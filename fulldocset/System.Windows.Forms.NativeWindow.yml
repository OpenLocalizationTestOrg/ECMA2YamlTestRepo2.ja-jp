### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.NativeWindow
  id: NativeWindow
  children:
  - System.Windows.Forms.NativeWindow.#ctor
  - System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  - System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  - System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  - System.Windows.Forms.NativeWindow.DestroyHandle
  - System.Windows.Forms.NativeWindow.Finalize
  - System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  - System.Windows.Forms.NativeWindow.Handle
  - System.Windows.Forms.NativeWindow.OnHandleChange
  - System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  - System.Windows.Forms.NativeWindow.ReleaseHandle
  - System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  langs:
  - csharp
  name: NativeWindow
  nameWithType: NativeWindow
  fullName: System.Windows.Forms.NativeWindow
  type: Class
  summary: "ウィンドウ ハンドルと、ウィンドウ プロシージャの低レベルのカプセル化を提供します。"
  remarks: "このクラスは、ウィンドウ クラスの作成と登録を自動的に管理します。       ウィンドウ ハンドルに関連付けられている場合、ウィンドウはガベージ コレクションの対象ではできません。 適切なガベージ コレクション ハンドルか、破棄されなければなりません<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A><xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>を使用して解放または</xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>を使用して手動で      > [!NOTE] >、<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>へのメッセージが処理されるときに、メソッドが呼び出されます</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。 つまり、どの場合にする必要はありませんを手動で呼び出す場合があります<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>、切らないでを行うことをお勧めは</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>       NativeWindow クラスには、次のプロパティとハンドルを管理する方法が用意されています: <xref:System.Windows.Forms.NativeWindow.Handle%2A>、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>、 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>、 <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>、 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A></xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> </xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> </xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> </xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A> 。"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name. The example creates two classes that inherit from NativeWindow that accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the NativeWindow will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.  \n  \n [!code-cpp[NativeWindow#1](~/add/codesnippet/cpp/t-system.windows.forms.n_0_1.cpp)]\n [!code-cs[NativeWindow#1](~/add/codesnippet/csharp/t-system.windows.forms.n_0_1.cs)]\n [!code-vb[NativeWindow#1](~/add/codesnippet/visualbasic/t-system.windows.forms.n_0_1.vb)]"
  syntax:
    content: 'public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Windows.Forms.IWin32Window
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: NativeWindow()
  nameWithType: NativeWindow.NativeWindow()
  fullName: System.Windows.Forms.NativeWindow.NativeWindow()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "インスタンスを初期化、 <xref href=&quot;System.Windows.Forms.NativeWindow&quot;> </xref>クラスです。"
  remarks: "これは、コンパイラによって提供される既定の NativeWindow コンス トラクターです。 <xref:System.Windows.Forms.NativeWindow>クラスにも、ドメイン全体のメッセージ ハンドラーにアプリケーションとハッシュ テーブルを初期化する静的コンス トラクターがあります</xref:System.Windows.Forms.NativeWindow>。"
  syntax:
    content: public NativeWindow ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  id: AssignHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: AssignHandle(IntPtr)
  nameWithType: NativeWindow.AssignHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "このウィンドウに、ハンドルを割り当てます。"
  remarks: "<xref:System.Windows.Forms.NativeWindow.WndProc%2A>送信されたウィンドウ メッセージを途中受信、`handle`パラメーター。</xref:System.Windows.Forms.NativeWindow.WndProc%2A> 使用して<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ハンドルのウィンドウ プロシージャを既定のウィンドウ プロシージャにリセットする</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>。       AssignHandle メソッドの呼び出し、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>ことを示すメソッドの値、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティが変更された</xref:System.Windows.Forms.NativeWindow.Handle%2A></xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>。      > [!NOTE] >、ハンドルを割り当てるには、別のアプリケーション プロセスですることはできません。"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the AssignHandle and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_4_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_4_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_4_1.vb)]"
  syntax:
    content: public void AssignHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "このウィンドウに代入するハンドル。"
  overload: System.Windows.Forms.NativeWindow.AssignHandle*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "このウィンドウは、ハンドルを既に持っています。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "関連付けられているネイティブ ウィンドウのウィンドウ プロシージャを取得できませんでした。"
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  id: CreateHandle(System.Windows.Forms.CreateParams)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: CreateHandle(CreateParams)
  nameWithType: NativeWindow.CreateHandle(CreateParams)
  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指定された作成パラメーターをウィンドウとそのハンドルを作成します。"
  remarks: "`cp`パラメーターは、ネイティブ Win32 に渡される値を指定`CreateWindowEx`ウィンドウとそのハンドルを作成します。       ときに、<xref:System.Windows.Forms.CreateParams.ClassName%2A>フィールドではありません`null`、新しく作成したウィンドウ ハンドルを指定したクラスから継承</xref:System.Windows.Forms.CreateParams.ClassName%2A> たとえば場合、<xref:System.Windows.Forms.CreateParams.ClassName%2A>に設定されている`BUTTON`、新しく作成されたウィンドウは、Win32 に基づいて`BUTTON`ウィンドウ クラス</xref:System.Windows.Forms.CreateParams.ClassName%2A> <xref:System.Windows.Forms.CreateParams.Param%2A>のプロパティ、<xref:System.Windows.Forms.CreateParams.ClassName%2A>オブジェクトがある必要がありますか、`null`または構造体として宣言されたクラスのインスタンスを参照します</xref:System.Windows.Forms.CreateParams.ClassName%2A></xref:System.Windows.Forms.CreateParams.Param%2A>。       このコードに示した例からの抜粋、<xref:System.Windows.Forms.NativeWindow>クラスの概要</xref:System.Windows.Forms.NativeWindow>。 一部のコードは、簡潔さを優先するためには表示されません。 参照してください<xref:System.Windows.Forms.NativeWindow>コード全体の</xref:System.Windows.Forms.NativeWindow>。      > [!NOTE] > オペレーティング システムで提供されるクラス名を登録します。"
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the CreateHandle method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/4bc4c996-2177-4901-b43d-_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/4bc4c996-2177-4901-b43d-_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/4bc4c996-2177-4901-b43d-_1.vb)]"
  syntax:
    content: public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);
    parameters:
    - id: cp
      type: System.Windows.Forms.CreateParams
      description: "A <xref href=&quot;System.Windows.Forms.CreateParams&quot;> </xref>このウィンドウの作成パラメーターを指定します。"
  overload: System.Windows.Forms.NativeWindow.CreateHandle*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "オペレーティング システムは、ネイティブのウィンドウを作成しようとしているときにリソース不足になりました。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "ネイティブの Win32 API は、指定されたウィンドウを作成できませんでした。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "現在のネイティブ ウィンドウのハンドルが既に割り当てられています。詳細については、<xref:System.Windows.Forms.NativeWindow.Handle*>プロパティが等しくない<xref:System.IntPtr.Zero>。</xref:System.IntPtr.Zero></xref:System.Windows.Forms.NativeWindow.Handle*>で"
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  id: DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: DefWndProc(Message)
  nameWithType: NativeWindow.DefWndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "このウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。"
  remarks: "通常、のみメソッドを呼び出す DefWndProc ウィンドウ メッセージを受け取り、メッセージを処理する既定のウィンドウ プロシージャを希望するとします。 ウィンドウをウィンドウ メッセージを送信する DefWndProc を呼び出すことはできません。Win32 を呼び出す`SendMessage`関数を使用します。       DefWndProc を呼び出すとエラーがあるときに、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティが 0 にします</xref:System.Windows.Forms.NativeWindow.Handle%2A>。"
  syntax:
    content: public void DefWndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "メッセージは現在処理中です。"
  overload: System.Windows.Forms.NativeWindow.DefWndProc*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.DestroyHandle
  id: DestroyHandle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: DestroyHandle()
  nameWithType: NativeWindow.DestroyHandle()
  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ウィンドウとそのハンドルを破棄します。"
  remarks: "このメソッドに関連付けられているウィンドウの破棄、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>、設定、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティを 0 であり、呼び出し、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>変更を反映するようにメソッド</xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A></xref:System.Windows.Forms.NativeWindow.Handle%2A></xref:System.Windows.Forms.NativeWindow.Handle%2A>。 一般的に、ネイティブのウィンドウが完了したときに DestroyHandle のみ呼び出します。      > [!NOTE] >、<xref:System.Windows.Forms.NativeWindow>クラスに自動的には関連付けられているウィンドウを破棄し、WM_DESTROY メッセージへの応答でそのリソースを解放します</xref:System.Windows.Forms.NativeWindow>。"
  syntax:
    content: public virtual void DestroyHandle ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.DestroyHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.Finalize
  id: Finalize
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: Finalize()
  nameWithType: NativeWindow.Finalize()
  fullName: System.Windows.Forms.NativeWindow.Finalize()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "このウィンドウに関連付けられているリソースを解放します。"
  remarks: "Finalize メソッドに現在関連付けられている Win32 派生クラスを削除する<xref:System.Windows.Forms.NativeWindow>インスタンス ハンドルを解放する、関連付けられたウィンドウに WM_CLOSE メッセージをポストします</xref:System.Windows.Forms.NativeWindow>。"
  syntax:
    content: ~NativeWindow ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  id: FromHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: FromHandle(IntPtr)
  nameWithType: NativeWindow.FromHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指定したハンドルに関連付けられたウィンドウを取得します。"
  remarks: "別のメソッドからハンドルを受信する場合は、このメソッドを使用したハンドルに関連付けられているウィンドウを取得します。 別のハンドルを所有する必要があります既に<xref:System.Windows.Forms.NativeWindow>、現在のプロセスですそれ以外の場合、`null`が返されます。</xref:System.Windows.Forms.NativeWindow> 。"
  syntax:
    content: public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "ウィンドウのハンドル。"
    return:
      type: System.Windows.Forms.NativeWindow
      description: "<xref href=&quot;System.Windows.Forms.NativeWindow&quot;> </xref>指定したハンドルに関連付けられています。 このメソッドが戻る<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>ハンドルがいないとき、関連付けられたウィンドウです。"
  overload: System.Windows.Forms.NativeWindow.FromHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.Handle
  id: Handle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: Handle
  nameWithType: NativeWindow.Handle
  fullName: System.Windows.Forms.NativeWindow.Handle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "このウィンドウのハンドルを取得します。"
  remarks: "ウィンドウまたはコントロールのハンドルを必要とする Windows API のメソッドを呼び出すときは、このメソッドを使用します。"
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the Handle changes.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/p-system.windows.forms.n_14_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/p-system.windows.forms.n_14_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/p-system.windows.forms.n_14_1.vb)]"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "成功した場合、<xref:System.IntPtr>に関連したネイティブな Win32 ウィンドウへのハンドルを表す、ウィンドウに関連付けられたハンドルがない場合は 0 です</xref:System.IntPtr>。"
  overload: System.Windows.Forms.NativeWindow.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.OnHandleChange
  id: OnHandleChange
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: OnHandleChange()
  nameWithType: NativeWindow.OnHandleChange()
  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ウィンドウのハンドルが変更されたときに呼び出される通知方法を指定します。"
  remarks: "このメソッドが呼び出されたときの値、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティが変更された</xref:System.Windows.Forms.NativeWindow.Handle%2A>。"
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the OnHandleChange method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/m-system.windows.forms.n_1_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/m-system.windows.forms.n_1_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/m-system.windows.forms.n_1_1.vb)]"
  syntax:
    content: protected virtual void OnHandleChange ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.OnHandleChange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  id: OnThreadException(System.Exception)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: OnThreadException(Exception)
  nameWithType: NativeWindow.OnThreadException(Exception)
  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "派生クラスでオーバーライドされると、スレッドのハンドルされない例外を管理します。"
  remarks: "通常、<xref:System.Windows.Forms.Application.OnThreadException%2A>スレッドの例外を処理します</xref:System.Windows.Forms.Application.OnThreadException%2A>。"
  syntax:
    content: protected virtual void OnThreadException (Exception e);
    parameters:
    - id: e
      type: System.Exception
      description: "<xref:System.Exception>未処理スレッドの例外を指定します</xref:System.Exception>。"
  overload: System.Windows.Forms.NativeWindow.OnThreadException*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle
  id: ReleaseHandle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: NativeWindow.ReleaseHandle()
  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "このウィンドウに関連付けられたハンドルを解放します。"
  remarks: "このメソッドは、ウィンドウ ハンドルを破棄しません。 代わりに、既定のウィンドウ プロシージャをハンドルのウィンドウ プロシージャを設定します。 設定、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティを 0 と呼び出し<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>変更を反映するようにします</xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A></xref:System.Windows.Forms.NativeWindow.Handle%2A>。       Windows のハンドルが破棄されることを示す、ネイティブ Win32 へメッセージを受信した場合、ウィンドウは自動的にこのメソッドを呼び出します。"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and ReleaseHandle methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_0_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_0_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_0_1.vb)]"
  syntax:
    content: public virtual void ReleaseHandle ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.ReleaseHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  id: WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: WndProc(Message)
  nameWithType: NativeWindow.WndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "このウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。"
  remarks: "このメソッドは、ウィンドウのハンドルをウィンドウ メッセージを送信するときに呼び出されます。"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the WndProc method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_3_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_3_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_3_1.vb)]"
  syntax:
    content: protected virtual void WndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;> </xref> Windows の現在のメッセージに関連付けられています。"
  overload: System.Windows.Forms.NativeWindow.WndProc*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Forms.NativeWindow.#ctor
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: NativeWindow()
  nameWithType: NativeWindow.NativeWindow()
  fullName: System.Windows.Forms.NativeWindow.NativeWindow()
- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: AssignHandle(IntPtr)
  nameWithType: NativeWindow.AssignHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: CreateHandle(CreateParams)
  nameWithType: NativeWindow.CreateHandle(CreateParams)
  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)
- uid: System.Windows.Forms.CreateParams
  parent: System.Windows.Forms
  isExternal: false
  name: CreateParams
  nameWithType: CreateParams
  fullName: System.Windows.Forms.CreateParams
- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DefWndProc(Message)
  nameWithType: NativeWindow.DefWndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)
- uid: System.Windows.Forms.Message
  parent: System.Windows.Forms
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Windows.Forms.Message
- uid: System.Windows.Forms.NativeWindow.DestroyHandle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DestroyHandle()
  nameWithType: NativeWindow.DestroyHandle()
  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()
- uid: System.Windows.Forms.NativeWindow.Finalize
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Finalize()
  nameWithType: NativeWindow.Finalize()
  fullName: System.Windows.Forms.NativeWindow.Finalize()
- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: FromHandle(IntPtr)
  nameWithType: NativeWindow.FromHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)
- uid: System.Windows.Forms.NativeWindow
  parent: System.Windows.Forms
  isExternal: false
  name: NativeWindow
  nameWithType: NativeWindow
  fullName: System.Windows.Forms.NativeWindow
- uid: System.Windows.Forms.NativeWindow.Handle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Handle
  nameWithType: NativeWindow.Handle
  fullName: System.Windows.Forms.NativeWindow.Handle
- uid: System.Windows.Forms.NativeWindow.OnHandleChange
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnHandleChange()
  nameWithType: NativeWindow.OnHandleChange()
  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()
- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnThreadException(Exception)
  nameWithType: NativeWindow.OnThreadException(Exception)
  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: ReleaseHandle()
  nameWithType: NativeWindow.ReleaseHandle()
  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()
- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: WndProc(Message)
  nameWithType: NativeWindow.WndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)
- uid: System.Windows.Forms.NativeWindow.#ctor*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: NativeWindow
  nameWithType: NativeWindow.NativeWindow
- uid: System.Windows.Forms.NativeWindow.AssignHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: AssignHandle
  nameWithType: NativeWindow.AssignHandle
- uid: System.Windows.Forms.NativeWindow.CreateHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: CreateHandle
  nameWithType: NativeWindow.CreateHandle
- uid: System.Windows.Forms.NativeWindow.DefWndProc*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DefWndProc
  nameWithType: NativeWindow.DefWndProc
- uid: System.Windows.Forms.NativeWindow.DestroyHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DestroyHandle
  nameWithType: NativeWindow.DestroyHandle
- uid: System.Windows.Forms.NativeWindow.Finalize*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Finalize
  nameWithType: NativeWindow.Finalize
- uid: System.Windows.Forms.NativeWindow.FromHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: FromHandle
  nameWithType: NativeWindow.FromHandle
- uid: System.Windows.Forms.NativeWindow.Handle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Handle
  nameWithType: NativeWindow.Handle
- uid: System.Windows.Forms.NativeWindow.OnHandleChange*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnHandleChange
  nameWithType: NativeWindow.OnHandleChange
- uid: System.Windows.Forms.NativeWindow.OnThreadException*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnThreadException
  nameWithType: NativeWindow.OnThreadException
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: ReleaseHandle
  nameWithType: NativeWindow.ReleaseHandle
- uid: System.Windows.Forms.NativeWindow.WndProc*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: WndProc
  nameWithType: NativeWindow.WndProc
