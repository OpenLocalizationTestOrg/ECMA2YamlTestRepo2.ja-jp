### YamlMime:ManagedReference
items:
- uid: System.Resources.ResXResourceReader
  id: ResXResourceReader
  children:
  - System.Resources.ResXResourceReader.#ctor(System.IO.Stream)
  - System.Resources.ResXResourceReader.#ctor(System.IO.TextReader)
  - System.Resources.ResXResourceReader.#ctor(System.String)
  - System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.ComponentModel.Design.ITypeResolutionService)
  - System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.Reflection.AssemblyName[])
  - System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.ComponentModel.Design.ITypeResolutionService)
  - System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.Reflection.AssemblyName[])
  - System.Resources.ResXResourceReader.#ctor(System.String,System.ComponentModel.Design.ITypeResolutionService)
  - System.Resources.ResXResourceReader.#ctor(System.String,System.Reflection.AssemblyName[])
  - System.Resources.ResXResourceReader.BasePath
  - System.Resources.ResXResourceReader.Close
  - System.Resources.ResXResourceReader.Dispose(System.Boolean)
  - System.Resources.ResXResourceReader.Finalize
  - System.Resources.ResXResourceReader.FromFileContents(System.String)
  - System.Resources.ResXResourceReader.FromFileContents(System.String,System.ComponentModel.Design.ITypeResolutionService)
  - System.Resources.ResXResourceReader.FromFileContents(System.String,System.Reflection.AssemblyName[])
  - System.Resources.ResXResourceReader.GetEnumerator
  - System.Resources.ResXResourceReader.GetMetadataEnumerator
  - System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator
  - System.Resources.ResXResourceReader.System#IDisposable#Dispose
  - System.Resources.ResXResourceReader.UseResXDataNodes
  langs:
  - csharp
  name: ResXResourceReader
  nameWithType: ResXResourceReader
  fullName: System.Resources.ResXResourceReader
  type: Class
  summary: "XML リソース (.resx) ファイルおよびストリームを列挙し、連続したリソースの名前と値のペアを読み取ります。"
  remarks: "ResXResourceReader クラスの既定の実装を提供する、<xref:System.Resources.IResourceReader>を XML 形式でリソース情報を読み取るインターフェイス</xref:System.Resources.IResourceReader>。 バイナリ リソース形式からリソース情報を読み取るには、<xref:System.Resources.ResourceReader>クラス</xref:System.Resources.ResourceReader>を使用します。       ResXResourceReader クラスを使用して、ディクショナリ列挙子を走査して .resx ファイル内のリソースを列挙する (<xref:System.Collections.IDictionaryEnumerator>) によって返される、<xref:System.Resources.ResXResourceReader.GetEnumerator%2A>メソッド</xref:System.Resources.ResXResourceReader.GetEnumerator%2A></xref:System.Collections.IDictionaryEnumerator>。 によって提供されるメソッドを呼び出す<xref:System.Collections.IDictionaryEnumerator>次のリソースに進めると、名前と、.resx ファイル内の各リソースの値を読み取れません</xref:System.Collections.IDictionaryEnumerator>。      > [!NOTE] >、ResXResourceReader クラスには、次の&2; つの列挙子が用意されています。 <xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=fullName>メソッドを返します、<xref:System.Collections.IDictionaryEnumerator>オブジェクトですこのメソッドを使用して、リソースを列挙することをお勧めします。</xref:System.Collections.IDictionaryEnumerator> </xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=fullName> 。 <xref:System.Resources.ResXResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=fullName>メソッドは、明示的なインターフェイス実装を返す、 <xref:System.Collections.IEnumerator>; オブジェクトの使用はお勧めしません</xref:System.Collections.IEnumerator></xref:System.Resources.ResXResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=fullName>。       次の例では、<xref:System.Resources.ResXResourceReader.GetEnumerator%2A>を取得するメソッド、 <xref:System.Collections.IDictionaryEnumerator>.resx ファイル内のリソースを列挙するために使用できるオブジェクト</xref:System.Collections.IDictionaryEnumerator></xref:System.Resources.ResXResourceReader.GetEnumerator%2A>。 この例では、`CreateResourceFile`必要なリソース ファイルを作成するルーチンです。       [!code-cs[System.Resources.ResXResourceReader.Class#1](~/add/codesnippet/csharp/t-system.resources.resxr_1_1.cs)][!code-vb[System.Resources.ResXResourceReader.Class#1](~/add/codesnippet/visualbasic/t-system.resources.resxr_1_1.vb) ]場合、<xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>プロパティは`true`の値、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName>プロパティは、<xref:System.Resources.ResXDataNode>リソース値ではなくオブジェクトします</xref:System.Resources.ResXDataNode></xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName></xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>。   これにより、リソース アイテムのコメントから使用可能な<xref:System.Resources.ResXDataNode.Comment%2A?displayProperty=fullName>プロパティ</xref:System.Resources.ResXDataNode.Comment%2A?displayProperty=fullName>。 次の例のセット、<xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>プロパティを`true`.resx ファイル内のリソースを列挙します[!code-cs [System.Resources.ResXResourceReader.Class#2](~/add/codesnippet/csharp/t-system.resources.resxr_1_2.cs)][!code-vb[System.Resources.ResXResourceReader.Class#2](~/add/codesnippet/visualbasic/t-system.resources.resxr_1_2.vb) ]場合<xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>は`true`、<xref:System.Resources.ResXDataNode>列挙内の項目には、いずれかを指定できます:-リソース、データと共にという名前です</xref:System.Resources.ResXDataNode></xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>  </xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>。 ここで、<xref:System.Resources.ResXDataNode.FileRef%2A?displayProperty=fullName>プロパティは`null`</xref:System.Resources.ResXDataNode.FileRef%2A?displayProperty=fullName>。      名前付きリソースとリソース データを格納しているファイルの名前。 ここで、<xref:System.Resources.ResXDataNode.FileRef%2A?displayProperty=fullName>プロパティから返される、<xref:System.Resources.ResXFileRef>をそのファイル名を含む、リソースに関する情報を提供するオブジェクト</xref:System.Resources.ResXFileRef></xref:System.Resources.ResXDataNode.FileRef%2A?displayProperty=fullName>。 相対ファイル名を使用している場合は、<xref:System.Resources.ResXResourceReader.BasePath%2A>相対ファイル パスの参照ポイントを提供するプロパティ</xref:System.Resources.ResXResourceReader.BasePath%2A>を常に設定する必要があります。       そのリソースを列挙するには、インスタンスを作成できるのではなく、.resx ファイルから名前付きリソースを取得する場合、<xref:System.Resources.ResXResourceSet>オブジェクト呼び出しとその`GetString`と`GetObject`メソッド</xref:System.Resources.ResXResourceSet>。      > [!NOTE] >、ResXResourceReader クラスには、リンク確認要求し、すべてのメンバーに適用されるクラス レベルの継承確認要求が含まれています。 A<xref:System.Security.SecurityException>直前の呼び出し元または派生クラスのいずれかに完全信頼アクセス許可があるない場合に例外がスローされます</xref:System.Security.SecurityException>。"
  example:
  - "The following example demonstrates how to use a ResXResourceReader to iterate through the resources in a .resx file. First, the ResXResourceReader`rsxr` is created for the file `items.resx`. Next, the <xref:System.Resources.ResXResourceReader.GetEnumerator%2A> method is used to create an <xref:System.Collections.IDictionaryEnumerator> to iterate through the resources and display the contents to the console.  \n  \n [!code-cpp[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/cpp/t-system.resources.resxr_1_3.cpp)]\n [!code-cs[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/csharp/t-system.resources.resxr_1_3.cs)]\n [!code-vb[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/visualbasic/t-system.resources.resxr_1_3.vb)]"
  syntax:
    content: 'public class ResXResourceReader : System.Resources.IResourceReader'
  inheritance:
  - System.Object
  implements:
  - System.Resources.IResourceReader
  inheritedMembers: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(Stream)
  nameWithType: ResXResourceReader.ResXResourceReader(Stream)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>指定したストリーム用のクラスです。"
  remarks: >-
    > [!NOTE]

    >  The <xref:System.Resources.ResXResourceReader.Dispose%2A> and <xref:System.Resources.ResXResourceReader.Close%2A> methods do not close the stream you specify in this constructor.
  syntax:
    content: public ResXResourceReader (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "リソースが含まれている入力ストリーム。"
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader)
  id: '#ctor(System.IO.TextReader)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(TextReader)
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>指定<xref:System.IO.TextReader></xref:System.IO.TextReader>クラス。"
  syntax:
    content: public ResXResourceReader (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "リソースが含まれているテキスト入力ストリーム。"
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(String)
  nameWithType: ResXResourceReader.ResXResourceReader(String)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>指定したリソース ファイルのクラスです。"
  remarks: ''
  example:
  - "The following example creates a new instance of the <xref:System.Resources.ResXResourceReader> class for the specified file, iterates through the resources of the file, and displays the contents to the console.  \n  \n [!code-cpp[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/cpp/m-system.resources.resxr_1_1.cpp)]\n [!code-cs[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/csharp/m-system.resources.resxr_1_1.cs)]\n [!code-vb[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/visualbasic/m-system.resources.resxr_1_1.vb)]"
  syntax:
    content: public ResXResourceReader (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "読み取るリソース ファイルのパス。"
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.ComponentModel.Design.ITypeResolutionService)
  id: '#ctor(System.IO.Stream,System.ComponentModel.Design.ITypeResolutionService)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(Stream,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(Stream,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream,ITypeResolutionService)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>クラス入力ストリームと型解決サービスを使用します。"
  syntax:
    content: public ResXResourceReader (System.IO.Stream stream, System.ComponentModel.Design.ITypeResolutionService typeResolver);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "リソースが含まれている入力ストリーム。"
    - id: typeResolver
      type: System.ComponentModel.Design.ITypeResolutionService
      description: "解決がリソースで指定された名前を入力するオブジェクト。"
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.Reflection.AssemblyName[])
  id: '#ctor(System.IO.Stream,System.Reflection.AssemblyName[])'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(Stream,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(Stream,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream,AssemblyName[])
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>クラスのストリームとアセンブリ名の配列を使用します。"
  syntax:
    content: public ResXResourceReader (System.IO.Stream stream, System.Reflection.AssemblyName[] assemblyNames);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "リソースが含まれている入力ストリーム。"
    - id: assemblyNames
      type: System.Reflection.AssemblyName[]
      description: "配列<xref:System.Reflection.AssemblyName>1 つまたは複数のアセンブリを指定するオブジェクト</xref:System.Reflection.AssemblyName>。 実際の型に、リソースの型名を解決するのには、アセンブリが使用されます。"
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.ComponentModel.Design.ITypeResolutionService)
  id: '#ctor(System.IO.TextReader,System.ComponentModel.Design.ITypeResolutionService)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(TextReader,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader,ITypeResolutionService)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>クラス テキスト ストリーム リーダーと型解決サービスを使用します。"
  syntax:
    content: public ResXResourceReader (System.IO.TextReader reader, System.ComponentModel.Design.ITypeResolutionService typeResolver);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "リソースを含むテキスト ストリーム リーダー。"
    - id: typeResolver
      type: System.ComponentModel.Design.ITypeResolutionService
      description: "解決がリソースで指定された名前を入力するオブジェクト。"
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.Reflection.AssemblyName[])
  id: '#ctor(System.IO.TextReader,System.Reflection.AssemblyName[])'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(TextReader,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader,AssemblyName[])
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>クラスを使用して、<xref:System.IO.TextReader>オブジェクトとアセンブリ名の配列</xref:System.IO.TextReader>。"
  syntax:
    content: public ResXResourceReader (System.IO.TextReader reader, System.Reflection.AssemblyName[] assemblyNames);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "テキストのストリームからリソースを読み取るためのオブジェクト。"
    - id: assemblyNames
      type: System.Reflection.AssemblyName[]
      description: "配列<xref:System.Reflection.AssemblyName>1 つまたは複数のアセンブリを指定するオブジェクト</xref:System.Reflection.AssemblyName>。 実際の型に、リソースの型名を解決するのには、アセンブリが使用されます。"
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.String,System.ComponentModel.Design.ITypeResolutionService)
  id: '#ctor(System.String,System.ComponentModel.Design.ITypeResolutionService)'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(String,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(String,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String,ITypeResolutionService)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>クラス ファイル名と型解決サービスを使用します。"
  syntax:
    content: public ResXResourceReader (string fileName, System.ComponentModel.Design.ITypeResolutionService typeResolver);
    parameters:
    - id: fileName
      type: System.String
      description: "リソースが含まれている XML リソース ファイルの名前。"
    - id: typeResolver
      type: System.ComponentModel.Design.ITypeResolutionService
      description: "解決がリソースで指定された名前を入力するオブジェクト。"
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.#ctor(System.String,System.Reflection.AssemblyName[])
  id: '#ctor(System.String,System.Reflection.AssemblyName[])'
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: ResXResourceReader(String,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(String,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String,AssemblyName[])
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>クラスの XML リソース ファイル名とアセンブリ名の配列を使用します。"
  syntax:
    content: public ResXResourceReader (string fileName, System.Reflection.AssemblyName[] assemblyNames);
    parameters:
    - id: fileName
      type: System.String
      description: "リソースが含まれている XML リソース ファイルの名前。"
    - id: assemblyNames
      type: System.Reflection.AssemblyName[]
      description: "配列<xref:System.Reflection.AssemblyName>1 つまたは複数のアセンブリを指定するオブジェクト</xref:System.Reflection.AssemblyName>。 実際の型に、リソースの型名を解決するのには、アセンブリが使用されます。"
  overload: System.Resources.ResXResourceReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.BasePath
  id: BasePath
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: BasePath
  nameWithType: ResXResourceReader.BasePath
  fullName: System.Resources.ResXResourceReader.BasePath
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "取得または設定で指定された相対ファイル パスのベース パス、 <xref href=&quot;System.Resources.ResXFileRef&quot;> </xref>オブジェクト。"
  remarks: "割り当てられている相対ファイル パス参照を解決するのには、BasePath プロパティが使用される、<xref:System.Resources.ResXFileRef.FileName%2A>プロパティ<xref:System.Resources.ResXFileRef>オブジェクト</xref:System.Resources.ResXFileRef></xref:System.Resources.ResXFileRef.FileName%2A>。  既定では、その値は<xref:System.String.Empty?displayProperty=fullName>、によって返される現在のディレクトリへのリレーションシップで相対ファイル パス参照を解決し、<xref:System.Environment.CurrentDirectory%2A?displayProperty=fullName>プロパティ</xref:System.Environment.CurrentDirectory%2A?displayProperty=fullName></xref:System.String.Empty?displayProperty=fullName>。 リソースの列挙を開始する前に、このプロパティを設定する必要があります。"
  example:
  - "The following example creates an XML resource file that contains images of dog breeds, and also creates a string resource that specifies the application that created the resource. <xref:System.Resources.ResXFileRef> objects are used to store the path to the images rather than storing the binary images themselves in the resource file. The example sets the BasePath property so that the relative file paths in the images' file names are interpreted as subdirectories of a directory named C:\\data\\\\.  \n  \n [!code-vb[System.Resources.ResXResourceReader.BasePath#1](~/add/codesnippet/visualbasic/p-system.resources.resxr_1_1.vb)]\n [!code-cs[System.Resources.ResXResourceReader.BasePath#1](~/add/codesnippet/csharp/p-system.resources.resxr_1_1.cs)]  \n  \n Note that you must add a reference to System.Drawing.dll to compile the project successfully. The example also requires that the necessary images exist in a directory named C:\\data\\images\\\\."
  syntax:
    content: public string BasePath { get; set; }
    return:
      type: System.String
      description: "パス、先頭に追加する場合、相対ファイル パスで指定、 <xref href=&quot;System.Resources.ResXFileRef&quot;> </xref>オブジェクト、リソース ファイルへの絶対パスを生成します。"
  overload: System.Resources.ResXResourceReader.BasePath*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "設定操作では、XML リソース ファイルがまだアクセスされていて、使用されているために値を指定することはできません。"
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.Close
  id: Close
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: Close()
  nameWithType: ResXResourceReader.Close()
  fullName: System.Resources.ResXResourceReader.Close()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Resources.ResXResourceReader&quot;></xref>です。"
  remarks: "閉じる有効で使用したリソースを呼び出して、<xref:System.Resources.ResXResourceReader>を他の目的に再割り当てされます</xref:System.Resources.ResXResourceReader>。 終了の詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example displays the resources of a file to the console, and then uses the Close method to shut down the reader and to make its resources available for other processes.  \n  \n [!code-cpp[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/cpp/m-system.resources.resxr_2_1.cpp)]\n [!code-cs[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/csharp/m-system.resources.resxr_2_1.cs)]\n [!code-vb[System.Resources.ResxresourceReader Example#1](~/add/codesnippet/visualbasic/m-system.resources.resxr_2_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Resources.ResXResourceReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ResXResourceReader.Dispose(Boolean)
  fullName: System.Resources.ResXResourceReader.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、いずれかを呼び出すことができます、<xref:System.Resources.ResXResourceReader.System%23IDisposable%23Dispose%2A>メソッドまたは<xref:System.Object.Finalize%2A?displayProperty=fullName>メソッド</xref:System.Object.Finalize%2A?displayProperty=fullName></xref:System.Resources.ResXResourceReader.System%23IDisposable%23Dispose%2A>。 <xref:System.Resources.ResXResourceReader.System%23IDisposable%23Dispose%2A>このメソッドを呼び出して、`disposing`パラメーターに設定`true`です。</xref:System.Resources.ResXResourceReader.System%23IDisposable%23Dispose%2A> <xref:System.Object.Finalize%2A>このメソッドを呼び出して`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Resources.ResXResourceReader>参照。</xref:System.Resources.ResXResourceReader> 。 このメソッドを呼び出して、`Dispose`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Resources.ResXResourceReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.Finalize
  id: Finalize
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: Finalize()
  nameWithType: ResXResourceReader.Finalize()
  fullName: System.Resources.ResXResourceReader.Finalize()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "このメンバーは、<xref:System.Object.Finalize*>メソッド</xref:System.Object.Finalize*>。"
  syntax:
    content: ~ResXResourceReader ();
    parameters: []
  overload: System.Resources.ResXResourceReader.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String)
  id: FromFileContents(System.String)
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: FromFileContents(String)
  nameWithType: ResXResourceReader.FromFileContents(String)
  fullName: System.Resources.ResXResourceReader.FromFileContents(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新たに作成<xref href=&quot;System.Resources.ResXResourceReader&quot;></xref>オブジェクトし、その内容は、XML リソース ファイルの形式では文字列を読み取ることを初期化します。"
  syntax:
    content: public static System.Resources.ResXResourceReader FromFileContents (string fileContents);
    parameters:
    - id: fileContents
      type: System.String
      description: "XML リソース書式付き情報を含む文字列。"
    return:
      type: System.Resources.ResXResourceReader
      description: "オブジェクトからリソースを読み込む、 <code> fileContents </code>文字列。"
  overload: System.Resources.ResXResourceReader.FromFileContents*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String,System.ComponentModel.Design.ITypeResolutionService)
  id: FromFileContents(System.String,System.ComponentModel.Design.ITypeResolutionService)
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: FromFileContents(String,ITypeResolutionService)
  nameWithType: ResXResourceReader.FromFileContents(String,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.FromFileContents(String,ITypeResolutionService)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新たに作成<xref href=&quot;System.Resources.ResXResourceReader&quot;></xref>オブジェクトを初期化し、使用する文字列を読み込み、その内容は、XML リソース ファイルの形式では、、 <xref href=&quot;System.ComponentModel.Design.ITypeResolutionService&quot;> </xref>リソースで指定された型名を解決するオブジェクト。"
  syntax:
    content: public static System.Resources.ResXResourceReader FromFileContents (string fileContents, System.ComponentModel.Design.ITypeResolutionService typeResolver);
    parameters:
    - id: fileContents
      type: System.String
      description: "XML リソース書式付き情報を含む文字列。"
    - id: typeResolver
      type: System.ComponentModel.Design.ITypeResolutionService
      description: "解決がリソースで指定された名前を入力するオブジェクト。"
    return:
      type: System.Resources.ResXResourceReader
      description: "オブジェクトからリソースを読み込む、 <code> fileContents </code>文字列。"
  overload: System.Resources.ResXResourceReader.FromFileContents*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String,System.Reflection.AssemblyName[])
  id: FromFileContents(System.String,System.Reflection.AssemblyName[])
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: FromFileContents(String,AssemblyName[])
  nameWithType: ResXResourceReader.FromFileContents(String,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.FromFileContents(String,AssemblyName[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "新たに作成<xref href=&quot;System.Resources.ResXResourceReader&quot;></xref>オブジェクトおよび初期化の配列を使用してその内容は、XML リソース ファイルの形式では文字列を読み取る<xref:System.Reflection.AssemblyName>リソースで指定された型名を解決するオブジェクト</xref:System.Reflection.AssemblyName>。"
  syntax:
    content: public static System.Resources.ResXResourceReader FromFileContents (string fileContents, System.Reflection.AssemblyName[] assemblyNames);
    parameters:
    - id: fileContents
      type: System.String
      description: "その内容は、XML リソース ファイルの形式では文字列です。"
    - id: assemblyNames
      type: System.Reflection.AssemblyName[]
      description: "配列<xref:System.Reflection.AssemblyName>1 つまたは複数のアセンブリを指定するオブジェクト</xref:System.Reflection.AssemblyName>。 実際の型に、リソースの型名を解決するのには、アセンブリが使用されます。"
    return:
      type: System.Resources.ResXResourceReader
      description: "オブジェクトからリソースを読み込む、 <code> fileContents </code>文字列。"
  overload: System.Resources.ResXResourceReader.FromFileContents*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.GetEnumerator
  id: GetEnumerator
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ResXResourceReader.GetEnumerator()
  fullName: System.Resources.ResXResourceReader.GetEnumerator()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "現在の列挙子を返します<xref href=&quot;System.Resources.ResXResourceReader&quot;></xref>オブジェクト。"
  remarks: "GetEnumerator メソッドが、XML リソース (.resx) ストリームに現在関連付けられている文字列の名前/値ペアを取得<xref:System.Resources.ResXResourceReader>オブジェクト</xref:System.Resources.ResXResourceReader>。 ただし場合、<xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>プロパティに設定されている`true`として、リソース アイテムの取得 GetEnumerator を呼び出す前に<xref:System.Resources.ResXDataNode>オブジェクト</xref:System.Resources.ResXDataNode></xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>。 この場合、リソースのすべてのノードが型に関係なく返されます。"
  example:
  - "The following example uses the GetEnumerator method to obtain an <xref:System.Collections.IDictionaryEnumerator> object that is used to enumerate the resources in a .resx file. The example includes a `CreateResourceFile` routine that creates the necessary resource file.  \n  \n [!code-cs[System.Resources.ResXResourceReader.Class#1](~/add/codesnippet/csharp/m-system.resources.resxr_0_1.cs)]\n [!code-vb[System.Resources.ResXResourceReader.Class#1](~/add/codesnippet/visualbasic/m-system.resources.resxr_0_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "現在の列挙子<xref href=&quot;System.Resources.ResourceReader&quot;></xref>オブジェクト。"
  overload: System.Resources.ResXResourceReader.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.GetMetadataEnumerator
  id: GetMetadataEnumerator
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: GetMetadataEnumerator()
  nameWithType: ResXResourceReader.GetMetadataEnumerator()
  fullName: System.Resources.ResXResourceReader.GetMetadataEnumerator()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "現在の XML リソース ファイルまたはストリームからデザイン時のプロパティを取得できる、ディクショナリ列挙子を提供します。"
  remarks: "リソースは、リソース ファイルまたはストリームの名前/値のペアとして格納されます。 メタデータと呼ばれる、デザイン時のプロパティは、リソース ファイルまたは実行時データのリソースと一緒にストリームに格納されます。 GetMetadataEnumerator メソッドには、<xref:System.Collections.IDictionaryEnumerator>オブジェクトからリソース ファイルまたはストリームに現在関連付けられているメタデータを取得できる<xref:System.Resources.ResXResourceReader>オブジェクト</xref:System.Resources.ResXResourceReader></xref:System.Collections.IDictionaryEnumerator>。 ただし場合、<xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>プロパティに設定されている`true`GetMetadataEnumerator を呼び出す前にリソース ノードは取得できません</xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A>。"
  example:
  - "The following example uses the GetMetadataEnumerator method to iterate through the metadata resources in an XML resource file. This code example is part of a larger example provided for the <xref:System.Resources.ResXResourceReader.UseResXDataNodes%2A> property.  \n  \n [!code-vb[System.Resources.ResxresourceReader Example#4](~/add/codesnippet/visualbasic/m-system.resources.resxr_4_1.vb)]\n [!code-cpp[System.Resources.ResxresourceReader Example#4](~/add/codesnippet/cpp/m-system.resources.resxr_4_1.cpp)]\n [!code-cs[System.Resources.ResxresourceReader Example#4](~/add/codesnippet/csharp/m-system.resources.resxr_4_1.cs)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetMetadataEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "リソース内のメタデータの列挙子。"
  overload: System.Resources.ResXResourceReader.GetMetadataEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ResXResourceReader.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Resources.ResXResourceReader.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "現在の列挙子を返します<xref href=&quot;System.Resources.ResXResourceReader&quot;></xref>オブジェクト。 このメンバーの説明は、次を参照してください。、 &lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName&gt;メソッドです。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Resources.ResXResourceReader>にインスタンスをキャスト、<xref:System.Collections.IEnumerable>インターフェイス</xref:System.Collections.IEnumerable></xref:System.Resources.ResXResourceReader>。 .Resx ファイル内のリソースを列挙することをお勧めを呼び出すこと、<xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=fullName>メソッド、および、呼び出し、`MoveNext`メソッドで返された<xref:System.Collections.IDictionaryEnumerator>オブジェクト</xref:System.Collections.IDictionaryEnumerator></xref:System.Resources.ResXResourceReader.GetEnumerator%2A?displayProperty=fullName>。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "XML リソース (.resx) ストリームまたは文字列に現在関連付けられている名前/値ペアを反復処理できる列挙子<xref href=&quot;System.Resources.ResXResourceReader&quot;></xref>オブジェクト。"
  overload: System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: ResXResourceReader.System.IDisposable.Dispose()
  fullName: System.Resources.ResXResourceReader.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Resources.ResXResourceReader&quot;> </xref>し、必要に応じてマネージ リソースを解放します。 このメンバーの説明は、次を参照してください。、 &lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;メソッドです。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Resources.ResXResourceReader>にインスタンスをキャスト、<xref:System.IDisposable>インターフェイス</xref:System.IDisposable></xref:System.Resources.ResXResourceReader>。"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Resources.ResXResourceReader.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResXResourceReader.UseResXDataNodes
  id: UseResXDataNodes
  parent: System.Resources.ResXResourceReader
  langs:
  - csharp
  name: UseResXDataNodes
  nameWithType: ResXResourceReader.UseResXDataNodes
  fullName: System.Resources.ResXResourceReader.UseResXDataNodes
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Resources
  summary: "取得または設定を示す値かどうか<xref href=&quot;System.Resources.ResXDataNode&quot;></xref>オブジェクトが現在の XML リソース ファイルまたはストリームを読み取るときに返されます。"
  remarks: "リソースの列挙を開始する前に、UseResXDataNodes プロパティを設定することができます。 既定では、その値は`false`します。"
  example:
  - "The following example enumerates and displays resource items in an XML file. Initially, UseResXDataNodes is set to `false` to show both data and metadata items as they occur in the resource file. The second enumeration has the UseResXDataNodes set to `true` so that resource data elements are returned as <xref:System.Resources.ResXDataNode>objects.  \n  \n [!code-vb[System.Resources.ResXResourceReader Example#2](~/add/codesnippet/visualbasic/p-system.resources.resxr_0_1.vb)]\n [!code-cpp[System.Resources.ResXResourceReader Example#2](~/add/codesnippet/cpp/p-system.resources.resxr_0_1.cpp)]\n [!code-cs[System.Resources.ResXResourceReader Example#2](~/add/codesnippet/csharp/p-system.resources.resxr_0_1.cs)]  \n  \n The resource XML file used by the example contains one data node and one metadata node. To use the XML file with the previous example, copy the following text and save it to a file named Resource1.resx.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<root>  \n  <resheader name=\"resmimetype\">  \n    <value>text/microsoft-resx</value>  \n  </resheader>  \n  <resheader name=\"version\">  \n    <value>2.0</value>  \n  </resheader>  \n  <resheader name=\"reader\">  \n    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0,  \n           Culture=neutral, PublicKeyToken=b77a5c561934e089  \n    </value>  \n  </resheader>  \n  <resheader name=\"writer\">  \n    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0,  \n           Culture=neutral, PublicKeyToken=b77a5c561934e089  \n    </value>  \n  </resheader>  \n  <data name=\"DataSample\" xml:space=\"preserve\">  \n    <value>Sample DATA value</value>  \n  </data>  \n  <metadata name=\"MetadataSample\">  \n    <value>Sample METADATA value</value>  \n  </metadata>  \n</root>  \n```"
  syntax:
    content: public bool UseResXDataNodes { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>リソース データ ノードが取得される場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>とリソース データ ノードは無視されます。"
  overload: System.Resources.ResXResourceReader.UseResXDataNodes*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "設定操作でリソース ファイルまたはストリームの列挙子が開いています。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(Stream)
  nameWithType: ResXResourceReader.ResXResourceReader(Stream)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(TextReader)
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Resources.ResXResourceReader.#ctor(System.String)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(String)
  nameWithType: ResXResourceReader.ResXResourceReader(String)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.ComponentModel.Design.ITypeResolutionService)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(Stream,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(Stream,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream,ITypeResolutionService)
- uid: System.ComponentModel.Design.ITypeResolutionService
  parent: System.ComponentModel.Design
  isExternal: false
  name: ITypeResolutionService
  nameWithType: ITypeResolutionService
  fullName: System.ComponentModel.Design.ITypeResolutionService
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.Stream,System.Reflection.AssemblyName[])
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(Stream,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(Stream,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(Stream,AssemblyName[])
- uid: System.Reflection.AssemblyName[]
  parent: System.Reflection
  isExternal: true
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName[]
  spec.csharp:
  - uid: System.Reflection.AssemblyName
    name: AssemblyName
    nameWithType: AssemblyName
    fullName: AssemblyName[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.ComponentModel.Design.ITypeResolutionService)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(TextReader,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader,ITypeResolutionService)
- uid: System.Resources.ResXResourceReader.#ctor(System.IO.TextReader,System.Reflection.AssemblyName[])
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(TextReader,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(TextReader,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(TextReader,AssemblyName[])
- uid: System.Resources.ResXResourceReader.#ctor(System.String,System.ComponentModel.Design.ITypeResolutionService)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(String,ITypeResolutionService)
  nameWithType: ResXResourceReader.ResXResourceReader(String,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String,ITypeResolutionService)
- uid: System.Resources.ResXResourceReader.#ctor(System.String,System.Reflection.AssemblyName[])
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader(String,AssemblyName[])
  nameWithType: ResXResourceReader.ResXResourceReader(String,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.ResXResourceReader(String,AssemblyName[])
- uid: System.Resources.ResXResourceReader.BasePath
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: BasePath
  nameWithType: ResXResourceReader.BasePath
  fullName: System.Resources.ResXResourceReader.BasePath
- uid: System.Resources.ResXResourceReader.Close
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Close()
  nameWithType: ResXResourceReader.Close()
  fullName: System.Resources.ResXResourceReader.Close()
- uid: System.Resources.ResXResourceReader.Dispose(System.Boolean)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ResXResourceReader.Dispose(Boolean)
  fullName: System.Resources.ResXResourceReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Resources.ResXResourceReader.Finalize
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Finalize()
  nameWithType: ResXResourceReader.Finalize()
  fullName: System.Resources.ResXResourceReader.Finalize()
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: FromFileContents(String)
  nameWithType: ResXResourceReader.FromFileContents(String)
  fullName: System.Resources.ResXResourceReader.FromFileContents(String)
- uid: System.Resources.ResXResourceReader
  parent: System.Resources
  isExternal: false
  name: ResXResourceReader
  nameWithType: ResXResourceReader
  fullName: System.Resources.ResXResourceReader
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String,System.ComponentModel.Design.ITypeResolutionService)
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: FromFileContents(String,ITypeResolutionService)
  nameWithType: ResXResourceReader.FromFileContents(String,ITypeResolutionService)
  fullName: System.Resources.ResXResourceReader.FromFileContents(String,ITypeResolutionService)
- uid: System.Resources.ResXResourceReader.FromFileContents(System.String,System.Reflection.AssemblyName[])
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: FromFileContents(String,AssemblyName[])
  nameWithType: ResXResourceReader.FromFileContents(String,AssemblyName[])
  fullName: System.Resources.ResXResourceReader.FromFileContents(String,AssemblyName[])
- uid: System.Resources.ResXResourceReader.GetEnumerator
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: GetEnumerator()
  nameWithType: ResXResourceReader.GetEnumerator()
  fullName: System.Resources.ResXResourceReader.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Resources.ResXResourceReader.GetMetadataEnumerator
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: GetMetadataEnumerator()
  nameWithType: ResXResourceReader.GetMetadataEnumerator()
  fullName: System.Resources.ResXResourceReader.GetMetadataEnumerator()
- uid: System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ResXResourceReader.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Resources.ResXResourceReader.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Resources.ResXResourceReader.System#IDisposable#Dispose
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: ResXResourceReader.System.IDisposable.Dispose()
  fullName: System.Resources.ResXResourceReader.System.IDisposable.Dispose()
- uid: System.Resources.ResXResourceReader.UseResXDataNodes
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: UseResXDataNodes
  nameWithType: ResXResourceReader.UseResXDataNodes
  fullName: System.Resources.ResXResourceReader.UseResXDataNodes
- uid: System.Resources.ResXResourceReader.#ctor*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: ResXResourceReader
  nameWithType: ResXResourceReader.ResXResourceReader
- uid: System.Resources.ResXResourceReader.BasePath*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: BasePath
  nameWithType: ResXResourceReader.BasePath
- uid: System.Resources.ResXResourceReader.Close*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Close
  nameWithType: ResXResourceReader.Close
- uid: System.Resources.ResXResourceReader.Dispose*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Dispose
  nameWithType: ResXResourceReader.Dispose
- uid: System.Resources.ResXResourceReader.Finalize*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: Finalize
  nameWithType: ResXResourceReader.Finalize
- uid: System.Resources.ResXResourceReader.FromFileContents*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: FromFileContents
  nameWithType: ResXResourceReader.FromFileContents
- uid: System.Resources.ResXResourceReader.GetEnumerator*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: GetEnumerator
  nameWithType: ResXResourceReader.GetEnumerator
- uid: System.Resources.ResXResourceReader.GetMetadataEnumerator*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: GetMetadataEnumerator
  nameWithType: ResXResourceReader.GetMetadataEnumerator
- uid: System.Resources.ResXResourceReader.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ResXResourceReader.System.Collections.IEnumerable.GetEnumerator
- uid: System.Resources.ResXResourceReader.System#IDisposable#Dispose*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: ResXResourceReader.System.IDisposable.Dispose
- uid: System.Resources.ResXResourceReader.UseResXDataNodes*
  parent: System.Resources.ResXResourceReader
  isExternal: false
  name: UseResXDataNodes
  nameWithType: ResXResourceReader.UseResXDataNodes
