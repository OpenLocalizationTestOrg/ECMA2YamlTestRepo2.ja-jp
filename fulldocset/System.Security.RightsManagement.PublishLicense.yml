### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.PublishLicense
  id: PublishLicense
  children:
  - System.Security.RightsManagement.PublishLicense.#ctor(System.String)
  - System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  - System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  - System.Security.RightsManagement.PublishLicense.ContentId
  - System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  - System.Security.RightsManagement.PublishLicense.ReferralInfoName
  - System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  - System.Security.RightsManagement.PublishLicense.ToString
  - System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  langs:
  - csharp
  name: PublishLicense
  nameWithType: PublishLicense
  fullName: System.Security.RightsManagement.PublishLicense
  type: Class
  summary: "署名付きの権限の管理は、ライセンスを発行します。"
  remarks: "PublishLicense では、権限、ユーザー、およびその他のセキュリティに関連する情報に関するセキュリティ データを定義します。  ライセンスは、特定のコンピューター上の特定のユーザーが指定された権限管理コンテンツを使用する方法を定義します。       公開プロセスで<xref:System.Security.RightsManagement.UnsignedPublishLicense>。</xref:System.Security.RightsManagement.UnsignedPublishLicense>権利の情報を定義するドキュメントの作成者には  次に、作成者が<xref:System.Security.RightsManagement.UnsignedPublishLicense.Sign%2A><xref:System.Security.RightsManagement.UnsignedPublishLicense>。</xref:System.Security.RightsManagement.UnsignedPublishLicense>のメソッド</xref:System.Security.RightsManagement.UnsignedPublishLicense.Sign%2A>を呼び出すことによって署名 PublishLicense を作成します。  署名付き PublishLicense のシリアル化形式を使用して、取得したエンドユーザーに提供し、ことができます、<xref:System.Security.RightsManagement.UseLicense>を呼び出して、 <xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A>、PublishLicense のメソッド</xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A></xref:System.Security.RightsManagement.UseLicense>。  返された<xref:System.Security.RightsManagement.UseLicense>し、により、クライアント アプリケーションがユーザーに付与されている権限を行使する</xref:System.Security.RightsManagement.UseLicense>。       その他の同様<xref:System.Security.RightsManagement>型、PublishLicense は完全信頼アプリケーションでは使用できません</xref:System.Security.RightsManagement>。"
  example:
  - "The following example shows how to initialize a PublishLicense by using the <xref:System.Security.RightsManagement.UnsignedPublishLicense.Sign%2A> method.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class PublishLicense
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: PublishLicense(String)
  nameWithType: PublishLicense.PublishLicense(String)
  fullName: System.Security.RightsManagement.PublishLicense.PublishLicense(String)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;> </xref>から、指定したクラスがシリアル化し、署名<xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;></xref>です。"
  syntax:
    content: public PublishLicense (string signedPublishLicense);
    parameters:
    - id: signedPublishLicense
      type: System.String
      description: "署名され、シリアル化するライセンスを発行します。"
  overload: System.Security.RightsManagement.PublishLicense.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>signedPublishLicense</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "ライセンスが正しくありません。"
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  id: AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: AcquireUseLicense(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicense(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(SecureEnvironment)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "取得を試みます、 <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>のユーザーまたはユーザー グループに、指定した<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref>です。"
  syntax:
    content: public System.Security.RightsManagement.UseLicense AcquireUseLicense (System.Security.RightsManagement.SecureEnvironment secureEnvironment);
    parameters:
    - id: secureEnvironment
      type: System.Security.RightsManagement.SecureEnvironment
      description: "ライセンスの有効化およびバインディングをセキュリティで保護された環境。"
    return:
      type: System.Security.RightsManagement.UseLicense
      description: "<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>ユーザーまたは指定したユーザー グループの<code> secureEnvironment</code>です。"
  overload: System.Security.RightsManagement.PublishLicense.AcquireUseLicense*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>secureEnvironment</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "認証に失敗しました。"
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  id: AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: AcquireUseLicenseNoUI(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "取得を試みます、 <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>のユーザーまたはユーザー グループに、指定した<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref>です。"
  remarks: "AcquireUseLicenseNoUI メソッドは、Windows ネットワーク認証のダイアログ ボックスを表示しません。 ライセンスの要求が拒否された場合、ユーザーがアクセス許可を持っていないため、AcquireUseLicenseNoUI はネットワーク認証 ダイアログ ボックスを表示されないようにします。 バック グラウンド タスクまたは紛らわしいダイアログ ボックスが表示される非ユーザー インターフェイスでのライセンスを取得するサイレント取得しようとするとを使用します。"
  syntax:
    content: public System.Security.RightsManagement.UseLicense AcquireUseLicenseNoUI (System.Security.RightsManagement.SecureEnvironment secureEnvironment);
    parameters:
    - id: secureEnvironment
      type: System.Security.RightsManagement.SecureEnvironment
      description: "ライセンスの有効化およびバインディングをセキュリティで保護された環境。"
    return:
      type: System.Security.RightsManagement.UseLicense
      description: "<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>ユーザーまたは指定したユーザー グループの<code> secureEnvironment</code>です。"
  overload: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>secureEnvironment</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "認証に失敗しました。"
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ContentId
  id: ContentId
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ContentId
  nameWithType: PublishLicense.ContentId
  fullName: System.Security.RightsManagement.PublishLicense.ContentId
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "発行者が作成したコンテンツ識別子を取得します。"
  remarks: "パブリッシャーは、作成、<xref:System.Security.RightsManagement.UnsignedPublishLicense.ContentId%2A>を保護されたコンテンツを識別します</xref:System.Security.RightsManagement.UnsignedPublishLicense.ContentId%2A>。"
  syntax:
    content: public Guid ContentId { get; }
    return:
      type: System.Guid
      description: "発行者が作成したコンテンツ識別子。"
  overload: System.Security.RightsManagement.PublishLicense.ContentId*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  id: DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: DecryptUnsignedPublishLicense(CryptoProvider)
  nameWithType: PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
  fullName: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "返します、復号化された<xref href=&quot;System.Security.RightsManagement.UnsignedPublishLicense&quot;></xref>署名版<xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;></xref>です。"
  remarks: "DecryptUnsignedPublishLicense メソッドでは、ライセンス所有者とユーザーが付与されている<xref:System.Security.RightsManagement.ContentRight>が元の情報を抽出するときに暗号化されて、<xref:System.Security.RightsManagement.PublishLicense>が作成された</xref:System.Security.RightsManagement.PublishLicense></xref:System.Security.RightsManagement.ContentRight>。"
  syntax:
    content: public System.Security.RightsManagement.UnsignedPublishLicense DecryptUnsignedPublishLicense (System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "ライセンスを復号化を使用する rights management サービスです。"
    return:
      type: System.Security.RightsManagement.UnsignedPublishLicense
      description: "このライセンスの復号化された、署名されていないバージョンです。"
  overload: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>cryptoProvider</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoName
  id: ReferralInfoName
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ReferralInfoName
  nameWithType: PublishLicense.ReferralInfoName
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoName
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "作成者やコンテンツの発行元の連絡先名を取得します。"
  remarks: "ReferralInfoName プロパティによって返される文字列は暗号化されず、ユーザーが<xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.UseLicense>があるまだない場合でもアクセスできます。  返される文字列により、ユーザーが<xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.UseLicense>を要求する発行者に問い合わせてください。"
  syntax:
    content: public string ReferralInfoName { get; }
    return:
      type: System.String
      description: "作成者またはコンテンツの発行元の連絡先の名前。"
  overload: System.Security.RightsManagement.PublishLicense.ReferralInfoName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  id: ReferralInfoUri
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ReferralInfoUri
  nameWithType: PublishLicense.ReferralInfoUri
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "連絡先を取得[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]作成者またはコンテンツの発行元。"
  remarks: "ReferralInfoUri プロパティによって返される文字列は暗号化されず、ユーザーが<xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.UseLicense>があるまだない場合でもアクセスできます。  返される文字列により、ユーザーが<xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.UseLicense>を要求する発行者に問い合わせてください。"
  syntax:
    content: public Uri ReferralInfoUri { get; }
    return:
      type: System.Uri
      description: "連絡先[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]作成者またはコンテンツの発行元。"
  overload: System.Security.RightsManagement.PublishLicense.ReferralInfoUri*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ToString
  id: ToString
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ToString()
  nameWithType: PublishLicense.ToString()
  fullName: System.Security.RightsManagement.PublishLicense.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "シリアル[!INCLUDE[TLA2#tla_xrml](~/add/includes/tla2sharptla-xrml-md.md)]本ライセンスの作成に使用された文字列。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "シリアル化された[!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)]本ライセンスの作成に使用された文字列。"
  overload: System.Security.RightsManagement.PublishLicense.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  id: UseLicenseAcquisitionUrl
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: UseLicenseAcquisitionUrl
  nameWithType: PublishLicense.UseLicenseAcquisitionUrl
  fullName: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "取得、[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]を取得するために使用する、 <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;></xref>です。"
  remarks: "UseLicenseAcquisitionUrl プロパティは、<xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A>ユーザーが<xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.UseLicense>を入手したときに、メソッド</xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A>によって使用します。"
  syntax:
    content: public Uri UseLicenseAcquisitionUrl { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]を取得するために使用する、 <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;></xref>です。"
  overload: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.RightsManagement.RightsManagementException
  parent: System.Security.RightsManagement
  isExternal: false
  name: RightsManagementException
  nameWithType: RightsManagementException
  fullName: System.Security.RightsManagement.RightsManagementException
- uid: System.Security.RightsManagement.PublishLicense.#ctor(System.String)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: PublishLicense(String)
  nameWithType: PublishLicense.PublishLicense(String)
  fullName: System.Security.RightsManagement.PublishLicense.PublishLicense(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicense(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicense(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(SecureEnvironment)
- uid: System.Security.RightsManagement.UseLicense
  parent: System.Security.RightsManagement
  isExternal: false
  name: UseLicense
  nameWithType: UseLicense
  fullName: System.Security.RightsManagement.UseLicense
- uid: System.Security.RightsManagement.SecureEnvironment
  parent: System.Security.RightsManagement
  isExternal: false
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicenseNoUI(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
- uid: System.Security.RightsManagement.PublishLicense.ContentId
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ContentId
  nameWithType: PublishLicense.ContentId
  fullName: System.Security.RightsManagement.PublishLicense.ContentId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: DecryptUnsignedPublishLicense(CryptoProvider)
  nameWithType: PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
  fullName: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
- uid: System.Security.RightsManagement.UnsignedPublishLicense
  parent: System.Security.RightsManagement
  isExternal: false
  name: UnsignedPublishLicense
  nameWithType: UnsignedPublishLicense
  fullName: System.Security.RightsManagement.UnsignedPublishLicense
- uid: System.Security.RightsManagement.CryptoProvider
  parent: System.Security.RightsManagement
  isExternal: false
  name: CryptoProvider
  nameWithType: CryptoProvider
  fullName: System.Security.RightsManagement.CryptoProvider
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoName
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoName
  nameWithType: PublishLicense.ReferralInfoName
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoName
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoUri
  nameWithType: PublishLicense.ReferralInfoUri
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Security.RightsManagement.PublishLicense.ToString
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ToString()
  nameWithType: PublishLicense.ToString()
  fullName: System.Security.RightsManagement.PublishLicense.ToString()
- uid: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: UseLicenseAcquisitionUrl
  nameWithType: PublishLicense.UseLicenseAcquisitionUrl
  fullName: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
- uid: System.Security.RightsManagement.PublishLicense.#ctor*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: PublishLicense
  nameWithType: PublishLicense.PublishLicense
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicense*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicense
  nameWithType: PublishLicense.AcquireUseLicense
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicenseNoUI
  nameWithType: PublishLicense.AcquireUseLicenseNoUI
- uid: System.Security.RightsManagement.PublishLicense.ContentId*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ContentId
  nameWithType: PublishLicense.ContentId
- uid: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: DecryptUnsignedPublishLicense
  nameWithType: PublishLicense.DecryptUnsignedPublishLicense
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoName*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoName
  nameWithType: PublishLicense.ReferralInfoName
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoUri*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoUri
  nameWithType: PublishLicense.ReferralInfoUri
- uid: System.Security.RightsManagement.PublishLicense.ToString*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ToString
  nameWithType: PublishLicense.ToString
- uid: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: UseLicenseAcquisitionUrl
  nameWithType: PublishLicense.UseLicenseAcquisitionUrl
