### YamlMime:ManagedReference
items:
- uid: System.Threading.CompressedStack
  id: CompressedStack
  children:
  - System.Threading.CompressedStack.Capture
  - System.Threading.CompressedStack.CreateCopy
  - System.Threading.CompressedStack.GetCompressedStack
  - System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)
  langs:
  - csharp
  name: CompressedStack
  nameWithType: CompressedStack
  fullName: System.Threading.CompressedStack
  type: Class
  summary: "設定し、現在のスレッドで圧縮スタックのメソッドを提供します。 このクラスは継承できません。"
  remarks: "圧縮は、スタックはすべてのコード アクセス セキュリティ情報、呼び出し履歴上の圧縮表現など<xref:System.Security.CodeAccessPermission.Deny%2A>と<xref:System.Security.CodeAccessPermission.Assert%2A>アクション</xref:System.Security.CodeAccessPermission.Assert%2A></xref:System.Security.CodeAccessPermission.Deny%2A>。 たとえば場合、<xref:System.Security.CodeAccessPermission.Deny%2A>操作が&2; つのスタック フレーム現在のフレームからされず、その他のコード アクセス セキュリティの注釈が間には、現在のフレームでは、圧縮のスタックのみその情報を記録、呼び出し履歴全体をシリアル化することがなく、します</xref:System.Security.CodeAccessPermission.Deny%2A>。       <xref:System.Security.SecurityContext>クラス</xref:System.Security.SecurityContext>によって、CompressedStackclass が内部的に使用されます。 たとえば、<xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName>メソッドは、権限借用とカルチャ情報と共に、現在の呼び出し履歴の圧縮のスタックをキャプチャします</xref:System.Security.SecurityContext.Capture%2A?displayProperty=fullName>。 <xref:System.Security.SecurityContext>クラスは、さらに、使用、<xref:System.Threading.ExecutionContext>スレッド プールのタスクをスケジュールするときの例については、スレッド間でコンテキストをフローするクラス</xref:System.Threading.ExecutionContext></xref:System.Security.SecurityContext>。       このクラスは、通常のアプリケーション プログラミングでは使用されません。"
  syntax:
    content: 'public sealed class CompressedStack : System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.CompressedStack.Capture
  id: Capture
  parent: System.Threading.CompressedStack
  langs:
  - csharp
  name: Capture()
  nameWithType: CompressedStack.Capture()
  fullName: System.Threading.CompressedStack.Capture()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "現在のスレッドからの圧縮のスタックをキャプチャします。"
  remarks: "すべてのコード アクセス セキュリティ情報をキャプチャ、呼び出し履歴上など<xref:System.Security.CodeAccessPermission.Deny%2A>と<xref:System.Security.CodeAccessPermission.Assert%2A>圧縮形式でのアクション</xref:System.Security.CodeAccessPermission.Assert%2A></xref:System.Security.CodeAccessPermission.Deny%2A>。 たとえば場合、<xref:System.Security.CodeAccessPermission.Deny%2A>操作が&2; つのスタック フレーム現在のフレームからされず、その他のコード アクセス セキュリティの注釈が間には、現在のフレームでは、圧縮のスタックのみその情報を記録、呼び出し履歴全体をシリアル化することがなく、します</xref:System.Security.CodeAccessPermission.Deny%2A>。       キャプチャした圧縮スタックは、別のスレッドに適用できます。"
  syntax:
    content: public static System.Threading.CompressedStack Capture ();
    parameters: []
    return:
      type: System.Threading.CompressedStack
      description: "A <xref href=&quot;System.Threading.CompressedStack&quot;></xref> object."
  overload: System.Threading.CompressedStack.Capture*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.CompressedStack.CreateCopy
  id: CreateCopy
  parent: System.Threading.CompressedStack
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: CompressedStack.CreateCopy()
  fullName: System.Threading.CompressedStack.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "現在の圧縮のスタックのコピーを作成します。"
  remarks: "このメソッドは、別のスレッドに適用する圧縮された現在のスタックのコピーを作成するのに役立ちます。"
  syntax:
    content: public System.Threading.CompressedStack CreateCopy ();
    parameters: []
    return:
      type: System.Threading.CompressedStack
      description: "A <xref href=&quot;System.Threading.CompressedStack&quot;> </xref>を現在の圧縮のスタックを表すオブジェクト。"
  overload: System.Threading.CompressedStack.CreateCopy*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.CompressedStack.GetCompressedStack
  id: GetCompressedStack
  parent: System.Threading.CompressedStack
  langs:
  - csharp
  name: GetCompressedStack()
  nameWithType: CompressedStack.GetCompressedStack()
  fullName: System.Threading.CompressedStack.GetCompressedStack()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "現在のスレッドの圧縮のスタックを取得します。"
  remarks: "セキュリティが有効になっている場合は、現在の圧縮のスタックが返されます。 セキュリティが無効になっている場合 GetCompressedStack は空白を返します<xref:System.Threading.CompressedStack>オブジェクト</xref:System.Threading.CompressedStack>。      > [!NOTE] > このメソッドを使用して<xref:System.Security.Permissions.SecurityAction?displayProperty=fullName>されないようにする、信頼されていないコードから呼び出す以外の直前の呼び出し元のみする必要がある<xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName>権限</xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName></xref:System.Security.Permissions.SecurityAction?displayProperty=fullName>。 使用してに関する重要な制限事項、 `LinkDemand` 、メンバーを参照してください[Demand とします。LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5)です。      > [!NOTE] > このメンバーがリンク確認要求ではなく、有効な暗号化キー、擬似キー ECMA 公開キーになります。 .NET Framework 内では、Microsoft 公開キーのリンク確認要求に ECMA 擬似キーのリンク確認要求が自動的に変換します。 セキュリティの例外は、ECMA 擬似キーではなく Microsoft 公開キーに基づいています。"
  syntax:
    content: public static System.Threading.CompressedStack GetCompressedStack ();
    parameters: []
    return:
      type: System.Threading.CompressedStack
      description: "A <xref href=&quot;System.Threading.CompressedStack&quot;> </xref>現在のスレッド。"
  overload: System.Threading.CompressedStack.GetCompressedStack*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出しチェーン内の呼び出し元には、アンマネージ コードへのアクセス許可がありません。       - または - 要求<xref href=&quot;System.Security.Permissions.StrongNameIdentityPermission&quot;></xref>できませんでした。"
  platform:
  - net462
- uid: System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Threading.CompressedStack
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: CompressedStack.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Threading.CompressedStack.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "セット、 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>をこの実行コンテキストのインスタンスを再作成するために必要な論理コンテキスト情報を持つオブジェクト。"
  remarks: "GetObjectData セット、<xref:System.Runtime.Serialization.SerializationInfo>論理呼び出しコンテキスト情報</xref:System.Runtime.Serialization.SerializationInfo>。 逆シリアル化実行コンテキストのオブジェクトはから再構成、 <xref:System.Runtime.Serialization.SerializationInfo>、ストリームで転送します</xref:System.Runtime.Serialization.SerializationInfo>。       詳細については、 <xref:System.Runtime.Serialization.SerializationInfo>。</xref:System.Runtime.Serialization.SerializationInfo>を参照してください。"
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>シリアル化情報が設定されるオブジェクト。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>シリアル化の対象コンテキストを表す構造体</xref:System.Runtime.Serialization.StreamingContext>。"
  overload: System.Threading.CompressedStack.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)
  id: Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)
  parent: System.Threading.CompressedStack
  langs:
  - csharp
  name: Run(CompressedStack,ContextCallback,Object)
  nameWithType: CompressedStack.Run(CompressedStack,ContextCallback,Object)
  fullName: System.Threading.CompressedStack.Run(CompressedStack,ContextCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "現在のスレッドで、指定された圧縮スタックでメソッドを実行します。"
  remarks: "メソッドが終了したときに、以前の状態を圧縮スタックが返されます。"
  syntax:
    content: public static void Run (System.Threading.CompressedStack compressedStack, System.Threading.ContextCallback callback, object state);
    parameters:
    - id: compressedStack
      type: System.Threading.CompressedStack
      description: "The <xref href=&quot;System.Threading.CompressedStack&quot;></xref> to set."
    - id: callback
      type: System.Threading.ContextCallback
      description: "A<xref:System.Threading.ContextCallback>指定されたセキュリティ コンテキストで実行するメソッドを表す</xref:System.Threading.ContextCallback>。"
    - id: state
      type: System.Object
      description: "コールバック メソッドに渡されるオブジェクト。"
  overload: System.Threading.CompressedStack.Run*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>compressedStack</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Threading.CompressedStack.Capture
  parent: System.Threading.CompressedStack
  isExternal: false
  name: Capture()
  nameWithType: CompressedStack.Capture()
  fullName: System.Threading.CompressedStack.Capture()
- uid: System.Threading.CompressedStack
  parent: System.Threading
  isExternal: false
  name: CompressedStack
  nameWithType: CompressedStack
  fullName: System.Threading.CompressedStack
- uid: System.Threading.CompressedStack.CreateCopy
  parent: System.Threading.CompressedStack
  isExternal: false
  name: CreateCopy()
  nameWithType: CompressedStack.CreateCopy()
  fullName: System.Threading.CompressedStack.CreateCopy()
- uid: System.Threading.CompressedStack.GetCompressedStack
  parent: System.Threading.CompressedStack
  isExternal: false
  name: GetCompressedStack()
  nameWithType: CompressedStack.GetCompressedStack()
  fullName: System.Threading.CompressedStack.GetCompressedStack()
- uid: System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Threading.CompressedStack
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: CompressedStack.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Threading.CompressedStack.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)
  parent: System.Threading.CompressedStack
  isExternal: false
  name: Run(CompressedStack,ContextCallback,Object)
  nameWithType: CompressedStack.Run(CompressedStack,ContextCallback,Object)
  fullName: System.Threading.CompressedStack.Run(CompressedStack,ContextCallback,Object)
- uid: System.Threading.ContextCallback
  parent: System.Threading
  isExternal: true
  name: ContextCallback
  nameWithType: ContextCallback
  fullName: System.Threading.ContextCallback
- uid: System.Threading.CompressedStack.Capture*
  parent: System.Threading.CompressedStack
  isExternal: false
  name: Capture
  nameWithType: CompressedStack.Capture
- uid: System.Threading.CompressedStack.CreateCopy*
  parent: System.Threading.CompressedStack
  isExternal: false
  name: CreateCopy
  nameWithType: CompressedStack.CreateCopy
- uid: System.Threading.CompressedStack.GetCompressedStack*
  parent: System.Threading.CompressedStack
  isExternal: false
  name: GetCompressedStack
  nameWithType: CompressedStack.GetCompressedStack
- uid: System.Threading.CompressedStack.GetObjectData*
  parent: System.Threading.CompressedStack
  isExternal: false
  name: GetObjectData
  nameWithType: CompressedStack.GetObjectData
- uid: System.Threading.CompressedStack.Run*
  parent: System.Threading.CompressedStack
  isExternal: false
  name: Run
  nameWithType: CompressedStack.Run
