### YamlMime:ManagedReference
items:
- uid: System.Windows.Point
  id: Point
  children:
  - System.Windows.Point.#ctor(System.Double,System.Double)
  - System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.Equals(System.Object)
  - System.Windows.Point.Equals(System.Windows.Point)
  - System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.GetHashCode
  - System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  - System.Windows.Point.Offset(System.Double,System.Double)
  - System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Size)
  - System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Vector)
  - System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  - System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.Parse(System.String)
  - System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Windows.Point.ToString
  - System.Windows.Point.ToString(System.IFormatProvider)
  - System.Windows.Point.X
  - System.Windows.Point.Y
  langs:
  - csharp
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
  type: Struct
  summary: "2 次元空間における、x 座標と y 座標の組を表します。"
  remarks: "XAML では、間の区切り文字、<xref:System.Windows.Point.X%2A>と<xref:System.Windows.Point.Y%2A>ポイントの値はコンマまたは空白にできます</xref:System.Windows.Point.Y%2A></xref:System.Windows.Point.X%2A>。       一部のカルチャは、ピリオドではなく&10; 進区切り記号としてコンマ文字を使用する可能性があります。 インバリアント カルチャの XAML 処理では、既定値のほとんどの XAML プロセッサの実装では、EN-US あり、小数点区切り文字にピリオドが必要です。 ポイントの属性値の文字列型の変換に競合が発生するため、XAML でのポイントを指定する場合、10 進区切り記号としてコンマ文字を使用してを避ける必要があります、<xref:System.Windows.Point.X%2A>と<xref:System.Windows.Point.Y%2A>コンポーネント</xref:System.Windows.Point.Y%2A></xref:System.Windows.Point.X%2A>。      <a name=&quot;xamlAttributeUsage_Duration&quot;></a>## XAML 属性の使用```   <object property=&quot;x,y&quot;/>   -or-   <object property=&quot;x y&quot;/>   ``` <a name=&quot;xamlValues_MinWidth&quot;> </a> ## XAML 値*x*このポイントの x 座標。             *y*このポイントの y 座標。"
  example:
  - "The following example shows how to check if two Point structures are not equal.  It also illustrates how to assign values to a Point structure when the structure is being declared and after the structure has been declared.  \n  \n [!code-cs[PointExamples_snip#PointInequalityExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#pointinequalityexample)]\n [!code-vb[PointExamples_snip#PointInequalityExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#pointinequalityexample)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PointConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.PointValueSerializer))]

      public struct Point : IFormattable
  inheritance:
  - System.ValueType
  implements:
  - System.IFormattable
  platform:
  - net462
- uid: System.Windows.Point.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: System.Windows.Point
  langs:
  - csharp
  name: Point(Double,Double)
  nameWithType: Point.Point(Double,Double)
  fullName: System.Windows.Point.Point(Double,Double)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "新たに作成<xref href=&quot;System.Windows.Point&quot;></xref>指定された座標を格納する構造体。"
  syntax:
    content: public Point (double x, double y);
    parameters:
    - id: x
      type: System.Double
      description: "新しいの x 座標<xref href=&quot;System.Windows.Point&quot;></xref>構造体。"
    - id: y
      type: System.Double
      description: "新しいの y 座標<xref href=&quot;System.Windows.Point&quot;></xref>構造体。"
  overload: System.Windows.Point.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)
  id: Add(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Add(Point,Vector)
  nameWithType: Point.Add(Point,Vector)
  fullName: System.Windows.Point.Add(Point,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "追加、 <xref href=&quot;System.Windows.Vector&quot;> </xref>を<xref href=&quot;System.Windows.Point&quot;></xref>として結果を返す、 <xref href=&quot;System.Windows.Point&quot;> </xref>構造体。"
  remarks: "追加する、<xref:System.Windows.Point>に構造体、<xref:System.Windows.Point>構造は禁止されています</xref:System.Windows.Point></xref:System.Windows.Point>。"
  example:
  - "This example adds a <xref:System.Windows.Point> to a <xref:System.Windows.Vector> and returns the result as a <xref:System.Windows.Vector> structure.  \n  \n [!code-cs[PointExamples_snip#AddPointAndVectorExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#addpointandvectorexample_csharp)]"
  syntax:
    content: public static System.Windows.Point Add (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "<xref href=&quot;System.Windows.Point&quot;> </xref>構造を追加します。"
    - id: vector
      type: System.Windows.Vector
      description: "<xref href=&quot;System.Windows.Vector&quot;> </xref>構造を追加します。"
    return:
      type: System.Windows.Point
      description: "Returns the sum of <code>point</code> and <code>vector</code>."
  overload: System.Windows.Point.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Point.Equals(Object)
  fullName: System.Windows.Point.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "決定するかどうか、指定した<xref:System.Object>は、 <xref href=&quot;System.Windows.Point&quot;> </xref>これと同じ座標が含まれているかどうかと<xref href=&quot;System.Windows.Point&quot;> </xref></xref:System.Object> 。"
  remarks: "<xref:System.Windows.Point>座標を使用して記述<xref:System.Double>値</xref:System.Double>。</xref:System.Windows.Point> の値、<xref:System.Double>操作、2 つの間で比較したときに、有効桁数が失われる可能性が<xref:System.Windows.Point>が論理的に等しい値が失敗する可能性があります</xref:System.Windows.Point></xref:System.Double>。"
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are equal using the non-static Equals method.  \n  \n [!code-cs[PointExamples_snip#NonStaticEqualsExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#nonstaticequalsexample_csharp)]"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>を比較します</xref:System.Object>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>o</code> is a <xref href=&quot;System.Windows.Point&quot;></xref> and contains the same <>*> and <>*> values as this <xref href=&quot;System.Windows.Point&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Point.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Equals(System.Windows.Point)
  id: Equals(System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Equals(Point)
  nameWithType: Point.Equals(Point)
  fullName: System.Windows.Point.Equals(Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比較する&2; つ<xref href=&quot;System.Windows.Point&quot;></xref>構造が等しいかどうか。"
  remarks: "<xref:System.Windows.Point>座標は、使用して表されます<xref:System.Double>値</xref:System.Double>。</xref:System.Windows.Point> の値、 <xref:System.Double>、2 つの比較に操作したときに、有効桁数が失われる可能性が<xref:System.Windows.Point>が論理的に等しい値が失敗する可能性があります</xref:System.Windows.Point></xref:System.Double>。"
  syntax:
    content: public bool Equals (System.Windows.Point value);
    parameters:
    - id: value
      type: System.Windows.Point
      description: "このインスタンスと比較するポイント。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>両方<xref href=&quot;System.Windows.Point&quot;></xref>構造体に含める同じ<> *> と<> *> 値です。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Point.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)
  id: Equals(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Equals(Point,Point)
  nameWithType: Point.Equals(Point,Point)
  fullName: System.Windows.Point.Equals(Point,Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比較する&2; つ<xref href=&quot;System.Windows.Point&quot;></xref>構造が等しいかどうか。"
  remarks: "使用してポイント座標が記述した<xref:System.Double>値</xref:System.Double>。 の値、<xref:System.Double>操作、2 つの間で比較したときに、有効桁数が失われる可能性が<xref:System.Windows.Point>が論理的に等しい値が失敗する可能性があります</xref:System.Windows.Point></xref:System.Double>。"
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are equal using the static Equals method.  \n  \n [!code-cs[PointExamples_snip#StaticEqualsExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#staticequalsexample_csharp)]"
  syntax:
    content: public static bool Equals (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "比較する最初のポイント。"
    - id: point2
      type: System.Windows.Point
      description: "比較する&2; 番目のポイント。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>point1</code> and <code>point2</code> contain the same <>*> and <>*> values; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Point.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.GetHashCode
  id: GetHashCode
  parent: System.Windows.Point
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Point.GetHashCode()
  fullName: System.Windows.Point.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "このハッシュ コードを返します<xref href=&quot;System.Windows.Point&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example shows how to get the hash code of a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#GetHashCodeExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#gethashcodeexample_csharp)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "ハッシュ コードをこの<xref href=&quot;System.Windows.Point&quot;></xref>構造体。"
  overload: System.Windows.Point.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  id: Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Multiply(Point,Matrix)
  nameWithType: Point.Multiply(Point,Matrix)
  fullName: System.Windows.Point.Multiply(Point,Matrix)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定された変換<xref href=&quot;System.Windows.Point&quot;></xref>構造体を指定した<xref href=&quot;System.Windows.Media.Matrix&quot;></xref>構造体。"
  remarks: ''
  example:
  - "The following example shows how to multiply a <xref:System.Windows.Point> structure by a <xref:System.Windows.Media.Matrix> structure using the Multiply method.  \n  \n [!code-cs[PointExamples_snip#MultiplyPointByMatrixExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#multiplypointbymatrixexample_csharp)]"
  syntax:
    content: public static System.Windows.Point Multiply (System.Windows.Point point, System.Windows.Media.Matrix matrix);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "変換対象のポイント。"
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "変換行列。"
    return:
      type: System.Windows.Point
      description: "変換されたポイント。"
  overload: System.Windows.Point.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Offset(System.Double,System.Double)
  id: Offset(System.Double,System.Double)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Offset(Double,Double)
  nameWithType: Point.Offset(Double,Double)
  fullName: System.Windows.Point.Offset(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "点のオフセット<> *> と<> *> 座標、指定した量だけです。"
  remarks: "この操作<xref:System.Windows.Point><xref:System.Windows.Vector>。</xref:System.Windows.Vector></xref:System.Windows.Point>を追加するには       オフセット メソッドを呼び出すことはのみ必要がある特殊効果を変更できる場合、<xref:System.Windows.Point.X%2A>と<xref:System.Windows.Point.Y%2A>プロパティに直接</xref:System.Windows.Point.Y%2A></xref:System.Windows.Point.X%2A>。 <xref:System.Windows.Point>値の型を参照する場合は、<xref:System.Windows.Point>オブジェクト プロパティまたはインデクサーを使用すると、オブジェクトへの参照ではなく、オブジェクトのコピーを取得します</xref:System.Windows.Point></xref:System.Windows.Point>。 変更しようとする場合<xref:System.Windows.Point.X%2A>または<xref:System.Windows.Point.Y%2A>プロパティまたはインデクサーの参照、コンパイラ エラーが発生します</xref:System.Windows.Point.Y%2A></xref:System.Windows.Point.X%2A>。 同様に、プロパティまたはインデクサーにオフセットを呼び出してしても、基になるオブジェクトには変更されません。  値を変更する場合、<xref:System.Windows.Point>プロパティまたはインデクサーとして参照される、新規作成<xref:System.Windows.Point>、そのフィールドを変更し、割り当てます、<xref:System.Windows.Point>プロパティまたはインデクサーに戻る</xref:System.Windows.Point></xref:System.Windows.Point></xref:System.Windows.Point>。"
  example:
  - "The following example shows how to offset the <xref:System.Windows.Point.X%2A> and <xref:System.Windows.Point.Y%2A> values of a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#OffsetExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#offsetexample_csharp)]"
  syntax:
    content: public void Offset (double offsetX, double offsetY);
    parameters:
    - id: offsetX
      type: System.Double
      description: "点のオフセット量<xref:System.Windows.Point.X*>を調整します</xref:System.Windows.Point.X*>。"
    - id: offsetY
      type: System.Double
      description: "点のオフセット量<xref:System.Windows.Point.Y*>を調整します</xref:System.Windows.Point.Y*>。"
  overload: System.Windows.Point.Offset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)
  id: op_Addition(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Addition(Point,Vector)
  nameWithType: Point.op_Addition(Point,Vector)
  fullName: System.Windows.Point.op_Addition(Point,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定された変換<xref href=&quot;System.Windows.Point&quot;></xref>において指定した<xref href=&quot;System.Windows.Vector&quot;></xref>結果を返します。"
  remarks: ''
  example:
  - "The following example shows how to add a <xref:System.Windows.Point> to a <xref:System.Windows.Vector> using the overloaded (+) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedAdditionOperatorExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedadditionoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedAdditionOperatorExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedadditionoperatorexample)]"
  syntax:
    content: public static System.Windows.Point op_Addition (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "変換対象のポイント。"
    - id: vector
      type: System.Windows.Vector
      description: "平行移動する量`point`です。"
    return:
      type: System.Windows.Point
      description: "指定したベクトルを指定したポイントに変換する結果。"
  overload: System.Windows.Point.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)
  id: op_Equality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Equality(Point,Point)
  nameWithType: Point.op_Equality(Point,Point)
  fullName: System.Windows.Point.op_Equality(Point,Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比較する&2; つ<xref href=&quot;System.Windows.Point&quot;></xref>構造が等しいかどうか。"
  remarks: "使用して、点の座標が記述した<xref:System.Double>値</xref:System.Double>。 の値<xref:System.Double>算術演算子は、2 つの比較を実行時に、有効桁数を失うことができます<xref:System.Windows.Point>が論理的に等しい値が失敗する可能性があります</xref:System.Windows.Point></xref:System.Double>。"
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are equal using the overloaded (==) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedequalityoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedequalityoperatorexample)]"
  syntax:
    content: public static bool op_Equality (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "最初の<xref href=&quot;System.Windows.Point&quot;></xref>に比較します。"
    - id: point2
      type: System.Windows.Point
      description: "2 番目<xref href=&quot;System.Windows.Point&quot;></xref>に比較します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if both the <>*> and <>*> coordinates of <code>point1</code> and <code>point2</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Point.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Size)
  id: op_Explicit(System.Windows.Point to System.Windows.Size)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: public static System.Windows.Size op_Explicit (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "追加します。"
    return:
      type: System.Windows.Size
      description: "追加します。"
  overload: System.Windows.Point.op_Explicit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Vector)
  id: op_Explicit(System.Windows.Point to System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: public static System.Windows.Vector op_Explicit (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "追加します。"
    return:
      type: System.Windows.Vector
      description: "追加します。"
  overload: System.Windows.Point.op_Explicit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)
  id: op_Inequality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Inequality(Point,Point)
  nameWithType: Point.op_Inequality(Point,Point)
  fullName: System.Windows.Point.op_Inequality(Point,Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比較する&2; つ<xref href=&quot;System.Windows.Point&quot;></xref>非等値の構造体。"
  remarks: "ポイントの<xref:System.Windows.Point.X%2A>と<xref:System.Windows.Point.Y%2A>座標を使用して記述<xref:System.Double>値</xref:System.Double></xref:System.Windows.Point.Y%2A></xref:System.Windows.Point.X%2A>。 <xref:System.Double>値には、2 つの比較に操作したときに、有効桁数が失われる可能性が<xref:System.Windows.Point>が論理的に等しい値が失敗する可能性があります</xref:System.Windows.Point></xref:System.Double>。"
  example:
  - "The following example shows how to check whether two <xref:System.Windows.Point> structures are not equal, using the overloaded (!=) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedinequalityoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedinequalityoperatorexample)]"
  syntax:
    content: public static bool op_Inequality (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "比較する最初のポイント。"
    - id: point2
      type: System.Windows.Point
      description: "比較する&2; 番目のポイント。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>point1</code> and <code>point2</code> have different <>*> or <>*> coordinates;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if <code>point1</code> and <code>point2</code> have the same <>*> and <>*> coordinates."
  overload: System.Windows.Point.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  id: op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Multiply(Point,Matrix)
  nameWithType: Point.op_Multiply(Point,Matrix)
  fullName: System.Windows.Point.op_Multiply(Point,Matrix)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定された変換<xref href=&quot;System.Windows.Point&quot;></xref>において指定した<xref href=&quot;System.Windows.Media.Matrix&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example shows how to multiply a <xref:System.Windows.Point> by a <xref:System.Windows.Media.Matrix> using the overloaded (*) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedMultiplyPointByMatrixOperatorExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedmultiplypointbymatrixoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedMultiplyPointByMatrixOperatorExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedmultiplypointbymatrixoperatorexample)]"
  syntax:
    content: public static System.Windows.Point op_Multiply (System.Windows.Point point, System.Windows.Media.Matrix matrix);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "変換対象のポイント。"
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "変換行列。"
    return:
      type: System.Windows.Point
      description: "指定した行列を使用して、指定したポイントを変換した結果。"
  overload: System.Windows.Point.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)
  id: op_Subtraction(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Subtraction(Point,Point)
  nameWithType: Point.op_Subtraction(Point,Point)
  fullName: System.Windows.Point.op_Subtraction(Point,Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定した減算<xref href=&quot;System.Windows.Point&quot;></xref>から指定した別<xref href=&quot;System.Windows.Point&quot;></xref>として差を返します、 <xref href=&quot;System.Windows.Vector&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Point> from another <xref:System.Windows.Point> and return a <xref:System.Windows.Vector> using the overloaded (-) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedSubtractionOperatorExample2](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedsubtractionoperatorexample2)]\n [!code-vb[PointExamples_snip#OverloadedSubtractionOperatorExample2](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedsubtractionoperatorexample2)]"
  syntax:
    content: public static System.Windows.Vector op_Subtraction (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "元となるポイント`point2`差し引かれます。"
    - id: point2
      type: System.Windows.Point
      description: "1 から減算するポイント`point1`です。"
    return:
      type: System.Windows.Vector
      description: "The difference between <code>point1</code> and <code>point2</code>."
  overload: System.Windows.Point.op_Subtraction*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)
  id: op_Subtraction(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Subtraction(Point,Vector)
  nameWithType: Point.op_Subtraction(Point,Vector)
  fullName: System.Windows.Point.op_Subtraction(Point,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定した減算<xref href=&quot;System.Windows.Vector&quot;></xref>から、指定した<xref href=&quot;System.Windows.Point&quot;></xref>し、その結果を返します<xref href=&quot;System.Windows.Point&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Vector> from a <xref:System.Windows.Point> using the overloaded (-) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedSubtractionOperatorExample1](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedsubtractionoperatorexample1)]\n [!code-vb[PointExamples_snip#OverloadedSubtractionOperatorExample1](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedsubtractionoperatorexample1)]"
  syntax:
    content: public static System.Windows.Point op_Subtraction (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "元となるポイント`vector`差し引かれます。"
    - id: vector
      type: System.Windows.Vector
      description: "1 から減算するベクター`point1`"
    return:
      type: System.Windows.Point
      description: "The difference between <code>point</code> and <code>vector</code>."
  overload: System.Windows.Point.op_Subtraction*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Parse(String)
  nameWithType: Point.Parse(String)
  fullName: System.Windows.Point.Parse(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "構築、 <xref href=&quot;System.Windows.Point&quot;> </xref>指定<xref:System.String></xref:System.String>。"
  remarks: ''
  example:
  - "The following example shows how to use the Parse method to convert a <xref:System.String> representation of a point into a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#ParseExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#parseexample)]\n [!code-vb[PointExamples_snip#ParseExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#parseexample)]"
  syntax:
    content: public static System.Windows.Point Parse (string source);
    parameters:
    - id: source
      type: System.String
      description: "ポイントの文字列形式。"
    return:
      type: System.Windows.Point
      description: "該当するショートカットは、 <xref href=&quot;System.Windows.Point&quot;> </xref>構造体。"
  overload: System.Windows.Point.Parse*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "<code>source</code>コンマまたはスペースで区切られた&2; つの double 値で構成ではありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>source</code>2 つの数値は含まれません。       - または -<code>source</code>が多すぎます区切り記号が含まれています。"
  platform:
  - net462
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)
  id: Subtract(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Subtract(Point,Point)
  nameWithType: Point.Subtract(Point,Point)
  fullName: System.Windows.Point.Subtract(Point,Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定した減算<xref href=&quot;System.Windows.Point&quot;></xref>から指定した別<xref href=&quot;System.Windows.Point&quot;></xref>として差を返します、 <xref href=&quot;System.Windows.Vector&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Point> from another <xref:System.Windows.Point> using the static Subtract method.  \n  \n [!code-cs[PointExamples_snip#SubtractExample2](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#subtractexample2)]\n [!code-vb[PointExamples_snip#SubtractExample2](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#subtractexample2)]"
  syntax:
    content: public static System.Windows.Vector Subtract (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "元となるポイント`point2`差し引かれます。"
    - id: point2
      type: System.Windows.Point
      description: "1 から減算するポイント`point1`です。"
    return:
      type: System.Windows.Vector
      description: "The difference between <code>point1</code> and <code>point2</code>."
  overload: System.Windows.Point.Subtract*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)
  id: Subtract(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Subtract(Point,Vector)
  nameWithType: Point.Subtract(Point,Vector)
  fullName: System.Windows.Point.Subtract(Point,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定した減算<xref href=&quot;System.Windows.Vector&quot;></xref>から、指定した<xref href=&quot;System.Windows.Point&quot;></xref>し、その結果を返します<xref href=&quot;System.Windows.Point&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Vector> from a <xref:System.Windows.Point> using the static Subtract method.  \n  \n [!code-cs[PointExamples_snip#SubtractExample1](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#subtractexample1)]\n [!code-vb[PointExamples_snip#SubtractExample1](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#subtractexample1)]"
  syntax:
    content: public static System.Windows.Point Subtract (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "元となるポイント`vector`差し引かれます。"
    - id: vector
      type: System.Windows.Vector
      description: "`vector`から減算する`point`です。"
    return:
      type: System.Windows.Point
      description: "The difference between <code>point</code> and <code>vector</code>."
  overload: System.Windows.Point.Subtract*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.Windows.Point
  langs:
  - csharp
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Point.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Point.System.IFormattable.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "このメンバーをサポートしている、[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]インフラストラクチャ コードから直接使用するものではありません。 このメンバーの説明、 <xref:System.IFormattable.ToString*>。</xref:System.IFormattable.ToString*>を参照してください。"
  syntax:
    content: string IFormattable.ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: "使用する形式を指定する文字列。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>の種類に対して定義されている既定の形式を使用する、<xref:System.IFormattable>実装</xref:System.IFormattable>。"
    - id: provider
      type: System.IFormatProvider
      description: "<xref uid=&quot;langword_csharp_IFormatProvider&quot; name=&quot;IFormatProvider&quot; href=&quot;&quot;> </xref>を使用して値の書式設定します。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>オペレーティング システムの現在のロケール設定から数値書式指定情報を取得します。"
    return:
      type: System.String
      description: "指定された形式で現在のインスタンスの値を含む文字列。"
  overload: System.Windows.Point.System#IFormattable#ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.ToString
  id: ToString
  parent: System.Windows.Point
  langs:
  - csharp
  name: ToString()
  nameWithType: Point.ToString()
  fullName: System.Windows.Point.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "作成、<xref:System.String>表現<xref href=&quot;System.Windows.Point&quot;> </xref></xref:System.String> 。"
  remarks: ''
  example:
  - "The following example shows how to use the ToString method to get a <xref:System.String> representation of a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#ToStringExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#tostringexample)]\n [!code-vb[PointExamples_snip#ToStringExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#tostringexample)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A<xref:System.String>を含む、 <> </> *> と<> *> この値<xref href=&quot;System.Windows.Point&quot;></xref>構造</xref:System.String>。"
  overload: System.Windows.Point.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Windows.Point
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Point.ToString(IFormatProvider)
  fullName: System.Windows.Point.ToString(IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "作成、<xref:System.String>表現<xref href=&quot;System.Windows.Point&quot;> </xref></xref:System.String> 。"
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "カルチャに固有の書式設定情報。"
    return:
      type: System.String
      description: "A<xref:System.String>を含む、 <> </> *> と<> *> この値<xref href=&quot;System.Windows.Point&quot;></xref>構造</xref:System.String>。"
  overload: System.Windows.Point.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.X
  id: X
  parent: System.Windows.Point
  langs:
  - csharp
  name: X
  nameWithType: Point.X
  fullName: System.Windows.Point.X
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得または設定の X 座標値<xref href=&quot;System.Windows.Point&quot;></xref>構造体。"
  remarks: ''
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are not equal.  It also illustrates how to assign values to a <xref:System.Windows.Point> structure when the structure is being declared and after the structure has been declared.  \n  \n [!code-cs[PointExamples_snip#PointInequalityExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#pointinequalityexample)]\n [!code-vb[PointExamples_snip#PointInequalityExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#pointinequalityexample)]"
  syntax:
    content: public double X { get; set; }
    return:
      type: System.Double
      description: "X 座標値<xref href=&quot;System.Windows.Point&quot;></xref>構造体。  既定値は `0` です。"
  overload: System.Windows.Point.X*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Y
  id: Y
  parent: System.Windows.Point
  langs:
  - csharp
  name: Y
  nameWithType: Point.Y
  fullName: System.Windows.Point.Y
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得または設定の Y 座標値<xref href=&quot;System.Windows.Point&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are not equal.  It also illustrates how to assign values to a <xref:System.Windows.Point> structure when the structure is being declared and after the structure has been declared.  \n  \n [!code-cs[PointExamples_snip#PointInequalityExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#pointinequalityexample)]\n [!code-vb[PointExamples_snip#PointInequalityExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#pointinequalityexample)]"
  syntax:
    content: public double Y { get; set; }
    return:
      type: System.Double
      description: "Y 座標値<xref href=&quot;System.Windows.Point&quot;></xref>構造体。  既定値は `0` です。"
  overload: System.Windows.Point.Y*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Point.#ctor(System.Double,System.Double)
  parent: System.Windows.Point
  isExternal: false
  name: Point(Double,Double)
  nameWithType: Point.Point(Double,Double)
  fullName: System.Windows.Point.Point(Double,Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: Add(Point,Vector)
  nameWithType: Point.Add(Point,Vector)
  fullName: System.Windows.Point.Add(Point,Vector)
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Vector
  parent: System.Windows
  isExternal: false
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
- uid: System.Windows.Point.Equals(System.Object)
  parent: System.Windows.Point
  isExternal: false
  name: Equals(Object)
  nameWithType: Point.Equals(Object)
  fullName: System.Windows.Point.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Point.Equals(System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: Equals(Point)
  nameWithType: Point.Equals(Point)
  fullName: System.Windows.Point.Equals(Point)
- uid: System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: Equals(Point,Point)
  nameWithType: Point.Equals(Point,Point)
  fullName: System.Windows.Point.Equals(Point,Point)
- uid: System.Windows.Point.GetHashCode
  parent: System.Windows.Point
  isExternal: false
  name: GetHashCode()
  nameWithType: Point.GetHashCode()
  fullName: System.Windows.Point.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  isExternal: false
  name: Multiply(Point,Matrix)
  nameWithType: Point.Multiply(Point,Matrix)
  fullName: System.Windows.Point.Multiply(Point,Matrix)
- uid: System.Windows.Media.Matrix
  parent: System.Windows.Media
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Windows.Media.Matrix
- uid: System.Windows.Point.Offset(System.Double,System.Double)
  parent: System.Windows.Point
  isExternal: false
  name: Offset(Double,Double)
  nameWithType: Point.Offset(Double,Double)
  fullName: System.Windows.Point.Offset(Double,Double)
- uid: System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: op_Addition(Point,Vector)
  nameWithType: Point.op_Addition(Point,Vector)
  fullName: System.Windows.Point.op_Addition(Point,Vector)
- uid: System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: op_Equality(Point,Point)
  nameWithType: Point.op_Equality(Point,Point)
  fullName: System.Windows.Point.op_Equality(Point,Point)
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Size)
  parent: System.Windows.Point
  isExternal: false
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
- uid: System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: op_Inequality(Point,Point)
  nameWithType: Point.op_Inequality(Point,Point)
  fullName: System.Windows.Point.op_Inequality(Point,Point)
- uid: System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  isExternal: false
  name: op_Multiply(Point,Matrix)
  nameWithType: Point.op_Multiply(Point,Matrix)
  fullName: System.Windows.Point.op_Multiply(Point,Matrix)
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: op_Subtraction(Point,Point)
  nameWithType: Point.op_Subtraction(Point,Point)
  fullName: System.Windows.Point.op_Subtraction(Point,Point)
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: op_Subtraction(Point,Vector)
  nameWithType: Point.op_Subtraction(Point,Vector)
  fullName: System.Windows.Point.op_Subtraction(Point,Vector)
- uid: System.Windows.Point.Parse(System.String)
  parent: System.Windows.Point
  isExternal: false
  name: Parse(String)
  nameWithType: Point.Parse(String)
  fullName: System.Windows.Point.Parse(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: Subtract(Point,Point)
  nameWithType: Point.Subtract(Point,Point)
  fullName: System.Windows.Point.Subtract(Point,Point)
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: Subtract(Point,Vector)
  nameWithType: Point.Subtract(Point,Vector)
  fullName: System.Windows.Point.Subtract(Point,Vector)
- uid: System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)
  parent: System.Windows.Point
  isExternal: false
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Point.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Point.System.IFormattable.ToString(String,IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Windows.Point.ToString
  parent: System.Windows.Point
  isExternal: false
  name: ToString()
  nameWithType: Point.ToString()
  fullName: System.Windows.Point.ToString()
- uid: System.Windows.Point.ToString(System.IFormatProvider)
  parent: System.Windows.Point
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Point.ToString(IFormatProvider)
  fullName: System.Windows.Point.ToString(IFormatProvider)
- uid: System.Windows.Point.X
  parent: System.Windows.Point
  isExternal: false
  name: X
  nameWithType: Point.X
  fullName: System.Windows.Point.X
- uid: System.Windows.Point.Y
  parent: System.Windows.Point
  isExternal: false
  name: Y
  nameWithType: Point.Y
  fullName: System.Windows.Point.Y
- uid: System.Windows.Point.#ctor*
  parent: System.Windows.Point
  isExternal: false
  name: Point
  nameWithType: Point.Point
- uid: System.Windows.Point.Add*
  parent: System.Windows.Point
  isExternal: false
  name: Add
  nameWithType: Point.Add
- uid: System.Windows.Point.Equals*
  parent: System.Windows.Point
  isExternal: false
  name: Equals
  nameWithType: Point.Equals
- uid: System.Windows.Point.GetHashCode*
  parent: System.Windows.Point
  isExternal: false
  name: GetHashCode
  nameWithType: Point.GetHashCode
- uid: System.Windows.Point.Multiply*
  parent: System.Windows.Point
  isExternal: false
  name: Multiply
  nameWithType: Point.Multiply
- uid: System.Windows.Point.Offset*
  parent: System.Windows.Point
  isExternal: false
  name: Offset
  nameWithType: Point.Offset
- uid: System.Windows.Point.op_Addition*
  parent: System.Windows.Point
  isExternal: false
  name: op_Addition
  nameWithType: Point.op_Addition
- uid: System.Windows.Point.op_Equality*
  parent: System.Windows.Point
  isExternal: false
  name: op_Equality
  nameWithType: Point.op_Equality
- uid: System.Windows.Point.op_Explicit*
  parent: System.Windows.Point
  isExternal: false
  name: op_Explicit
  nameWithType: Point.op_Explicit
- uid: System.Windows.Point.op_Inequality*
  parent: System.Windows.Point
  isExternal: false
  name: op_Inequality
  nameWithType: Point.op_Inequality
- uid: System.Windows.Point.op_Multiply*
  parent: System.Windows.Point
  isExternal: false
  name: op_Multiply
  nameWithType: Point.op_Multiply
- uid: System.Windows.Point.op_Subtraction*
  parent: System.Windows.Point
  isExternal: false
  name: op_Subtraction
  nameWithType: Point.op_Subtraction
- uid: System.Windows.Point.Parse*
  parent: System.Windows.Point
  isExternal: false
  name: Parse
  nameWithType: Point.Parse
- uid: System.Windows.Point.Subtract*
  parent: System.Windows.Point
  isExternal: false
  name: Subtract
  nameWithType: Point.Subtract
- uid: System.Windows.Point.System#IFormattable#ToString*
  parent: System.Windows.Point
  isExternal: false
  name: System.IFormattable.ToString
  nameWithType: Point.System.IFormattable.ToString
- uid: System.Windows.Point.ToString*
  parent: System.Windows.Point
  isExternal: false
  name: ToString
  nameWithType: Point.ToString
- uid: System.Windows.Point.X*
  parent: System.Windows.Point
  isExternal: false
  name: X
  nameWithType: Point.X
- uid: System.Windows.Point.Y*
  parent: System.Windows.Point
  isExternal: false
  name: Y
  nameWithType: Point.Y
