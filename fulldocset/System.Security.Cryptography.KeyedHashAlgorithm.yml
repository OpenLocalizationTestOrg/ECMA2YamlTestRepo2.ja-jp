### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  id: KeyedHashAlgorithm
  children:
  - System.Security.Cryptography.KeyedHashAlgorithm.#ctor
  - System.Security.Cryptography.KeyedHashAlgorithm.Create
  - System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)
  - System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.KeyedHashAlgorithm.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  langs:
  - csharp
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
  type: Class
  summary: "すべての実装のキー付きハッシュ アルゴリズムの派生元の抽象クラスを表します。"
  remarks: "ハッシュ関数マップ バイナリ文字列、任意の長さの固定長のバイナリ文字列を小規模にします。 暗号ハッシュ関数には、プロパティを同じ値にハッシュされる&2; つの異なる入力を検索可能な負荷の大きい計算されていないことがあります。 ハッシュの規模が大きく、予測不可能な変更にデータの結果を少し変更します。       キー付きハッシュ アルゴリズムは、メッセージ認証コードとして使用されるキーに依存する、一方向のハッシュ関数です。 ハッシュ キーを知っている人だけを確認できます。 キー付きハッシュ アルゴリズムは秘密にしなくても完全性を提供します。       ハッシュ関数は、デジタル署名とは、データの整合性によく使用されます。 <xref:System.Security.Cryptography.HMACSHA1>クラスは、キー付きハッシュ アルゴリズムの例を示します</xref:System.Security.Cryptography.HMACSHA1>。"
  example:
  - "The following code example demonstrates how to derive from the KeyedHashAlgorithm class.  \n  \n [!code-cs[KeyedHashAlgorithm#1](~/add/codesnippet/csharp/t-system.security.crypto_129_1.cs)]\n [!code-vb[KeyedHashAlgorithm#1](~/add/codesnippet/visualbasic/t-system.security.crypto_129_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.HashFinal
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.Initialize
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: KeyedHashAlgorithm()
  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyedHashAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref>クラスです。"
  remarks: "抽象クラスのインスタンスを作成することはできません。 アプリケーション コードでは、派生クラスの新しいインスタンスを作成します。"
  syntax:
    content: protected KeyedHashAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.KeyedHashAlgorithm.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: KeyedHashAlgorithm.Create()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "キー付きハッシュ アルゴリズムの既定の実装のインスタンスを作成します。"
  remarks: "既定では、このオーバー ロードを使用して、<xref:System.Security.Cryptography.HMACSHA1>キー付きハッシュ アルゴリズムの実装</xref:System.Security.Cryptography.HMACSHA1>。 別の実装を指定する場合は、使用、<xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29>オーバー ロードの代わりに、アルゴリズムの名前を指定することができます</xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29>。 暗号化構成システムは、<xref:System.Security.Cryptography.KeyedHashAlgorithm>クラス</xref:System.Security.Cryptography.KeyedHashAlgorithm>の既定の実装を定義します。"
  syntax:
    content: public static System.Security.Cryptography.KeyedHashAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "新しい<xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref>インスタンス、既定の設定が変更されていない限り、します。"
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: KeyedHashAlgorithm.Create(String)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "キー付きハッシュ アルゴリズムの指定した実装のインスタンスを作成します。"
  remarks: "このメソッドは、MD5、sha-1、sha-256、および RIPEMD160 など、アルゴリズムの数をサポートします。 一覧については、サポートされる値を参照してください、`algName`パラメーター。"
  syntax:
    content: public static System.Security.Cryptography.KeyedHashAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "使用するキー付きハッシュ アルゴリズムの実装です。 次の表に有効な値を示しています、`algName`パラメーターおよびそれらの割り当て先のアルゴリズムです。       <table><thead><tr><th> パラメーターの値       </th><th> 実装       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "指定したキー付きハッシュ アルゴリズムの新しいインスタンス。"
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: KeyedHashAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび`Finalize`メソッドです。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 `Finalize`呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Security.Cryptography.KeyedHashAlgorithm>参照。</xref:System.Security.Cryptography.KeyedHashAlgorithm> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key
  id: Key
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Key
  nameWithType: KeyedHashAlgorithm.Key
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得またはハッシュ アルゴリズムで使用するキーを設定します。"
  remarks: "パブリック アクセサーをこのプロパティは、<xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue>フィールド</xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue>。"
  example:
  - "The following code example demonstrates how to override the Key property to retrieve the key used in the current <xref:System.Security.Cryptography.KeyedHashAlgorithm> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.KeyedHashAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.KeyedHashAlgorithm#22](~/add/codesnippet/csharp/p-system.security.crypto_121_1.cs)]\n [!code-vb[System.Security.Cryptography.KeyedHashAlgorithm#22](~/add/codesnippet/visualbasic/p-system.security.crypto_121_1.vb)]\n [!code-cpp[System.Security.Cryptography.KeyedHashAlgorithm#22](~/add/codesnippet/cpp/p-system.security.crypto_121_1.cpp)]"
  syntax:
    content: public virtual byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "ハッシュ アルゴリズムで使用するキー。"
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Key*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "ハッシュが開始された後、キー プロパティを変更しようとしました。"
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  id: KeyValue
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: KeyValue
  nameWithType: KeyedHashAlgorithm.KeyValue
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "ハッシュ アルゴリズムで使用するキー。"
  remarks: "このフィールドには、<xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A>プロパティ</xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A>。"
  syntax:
    content: protected byte[] KeyValue;
    return:
      type: System.Byte[]
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyedHashAlgorithm()
  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyedHashAlgorithm()
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Create()
  nameWithType: KeyedHashAlgorithm.Create()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create()
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: KeyedHashAlgorithm.Create(String)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: KeyedHashAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Key
  nameWithType: KeyedHashAlgorithm.Key
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Key
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyValue
  nameWithType: KeyedHashAlgorithm.KeyValue
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Create
  nameWithType: KeyedHashAlgorithm.Create
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: KeyedHashAlgorithm.Dispose
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Key
  nameWithType: KeyedHashAlgorithm.Key
