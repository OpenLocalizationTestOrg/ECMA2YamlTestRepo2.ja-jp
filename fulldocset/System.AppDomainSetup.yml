### YamlMime:ManagedReference
items:
- uid: System.AppDomainSetup
  id: AppDomainSetup
  children:
  - System.AppDomainSetup.#ctor
  - System.AppDomainSetup.#ctor(System.ActivationContext)
  - System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)
  - System.AppDomainSetup.ActivationArguments
  - System.AppDomainSetup.AppDomainInitializer
  - System.AppDomainSetup.AppDomainInitializerArguments
  - System.AppDomainSetup.AppDomainManagerAssembly
  - System.AppDomainSetup.AppDomainManagerType
  - System.AppDomainSetup.ApplicationBase
  - System.AppDomainSetup.ApplicationName
  - System.AppDomainSetup.ApplicationTrust
  - System.AppDomainSetup.CachePath
  - System.AppDomainSetup.ConfigurationFile
  - System.AppDomainSetup.DisallowApplicationBaseProbing
  - System.AppDomainSetup.DisallowBindingRedirects
  - System.AppDomainSetup.DisallowCodeDownload
  - System.AppDomainSetup.DisallowPublisherPolicy
  - System.AppDomainSetup.DynamicBase
  - System.AppDomainSetup.GetConfigurationBytes
  - System.AppDomainSetup.LicenseFile
  - System.AppDomainSetup.LoaderOptimization
  - System.AppDomainSetup.PartialTrustVisibleAssemblies
  - System.AppDomainSetup.PrivateBinPath
  - System.AppDomainSetup.PrivateBinPathProbe
  - System.AppDomainSetup.SandboxInterop
  - System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})
  - System.AppDomainSetup.SetConfigurationBytes(System.Byte[])
  - System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)
  - System.AppDomainSetup.ShadowCopyDirectories
  - System.AppDomainSetup.ShadowCopyFiles
  - System.AppDomainSetup.TargetFrameworkName
  langs:
  - csharp
  name: AppDomainSetup
  nameWithType: AppDomainSetup
  fullName: System.AppDomainSetup
  type: Class
  summary: "インスタンスに追加できるアセンブリ バインディング情報を表す<xref href=&quot;System.AppDomain&quot;></xref>です。"
  remarks: "AppDomainSetup インスタンスのプロパティを変更しても、既存<xref:System.AppDomain>。</xref:System.AppDomain>は影響しません 新しいの作成のみを与えることが<xref:System.AppDomain>ときに、<xref:System.AppDomain.CreateDomain%2A>をパラメーターとして AppDomainSetup インスタンスとメソッドが呼び出されます</xref:System.AppDomain.CreateDomain%2A></xref:System.AppDomain>。       このクラスは、実装、<xref:System.IAppDomainSetup>インターフェイス</xref:System.IAppDomainSetup>。      > [!CAUTION] > の既定値、<xref:System.AppDomainSetup.DisallowCodeDownload%2A>プロパティは false</xref:System.AppDomainSetup.DisallowCodeDownload%2A> 。 この設定は、サービスの安全ではありません。 サービスが部分的に信頼されたコードをダウンロードするを防ぐためには、このプロパティを true に設定します。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class AppDomainSetup : IAppDomainSetup
  inheritance:
  - System.Object
  implements:
  - System.IAppDomainSetup
  inheritedMembers: []
  platform:
  - net462
- uid: System.AppDomainSetup.#ctor
  id: '#ctor'
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainSetup()
  nameWithType: AppDomainSetup.AppDomainSetup()
  fullName: System.AppDomainSetup.AppDomainSetup()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.AppDomainSetup&quot;> </xref>クラスです。"
  syntax:
    content: public AppDomainSetup ();
    parameters: []
  overload: System.AppDomainSetup.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.#ctor(System.ActivationContext)
  id: '#ctor(System.ActivationContext)'
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainSetup(ActivationContext)
  nameWithType: AppDomainSetup.AppDomainSetup(ActivationContext)
  fullName: System.AppDomainSetup.AppDomainSetup(ActivationContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.AppDomainSetup&quot;> </xref>アプリケーション ドメインのマニフェストに基づくアクティベーションに使用する指定したアクティベーション コンテキストを持つクラス。"
  remarks: "<xref:System.ActivationContext>に指定されたオブジェクト`activationContext`生成に使用される、 <xref:System.Runtime.Hosting.ActivationArguments>、新しいアプリケーション ドメインをアクティブ化するために必要な情報を含むオブジェクト</xref:System.Runtime.Hosting.ActivationArguments></xref:System.ActivationContext>。 これは、<xref:System.Runtime.Hosting.ActivationArguments>オブジェクトを使用してアクセスできる、<xref:System.AppDomainSetup.ActivationArguments%2A>プロパティ</xref:System.AppDomainSetup.ActivationArguments%2A></xref:System.Runtime.Hosting.ActivationArguments>。"
  syntax:
    content: public AppDomainSetup (ActivationContext activationContext);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "アプリケーション ドメインに使用されるアクティベーション コンテキスト。"
  overload: System.AppDomainSetup.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)
  id: '#ctor(System.Runtime.Hosting.ActivationArguments)'
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainSetup(ActivationArguments)
  nameWithType: AppDomainSetup.AppDomainSetup(ActivationArguments)
  fullName: System.AppDomainSetup.AppDomainSetup(ActivationArguments)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.AppDomainSetup&quot;> </xref>アプリケーション ドメインのマニフェストに基づくアクティベーションに必要な指定されたアクティベーション引数を持つクラス。"
  remarks: "指定されたオブジェクト`activationArguments`を使用してアクセスできる、<xref:System.AppDomainSetup.ActivationArguments%2A>プロパティ</xref:System.AppDomainSetup.ActivationArguments%2A>。"
  syntax:
    content: public AppDomainSetup (System.Runtime.Hosting.ActivationArguments activationArguments);
    parameters:
    - id: activationArguments
      type: System.Runtime.Hosting.ActivationArguments
      description: "新しいアプリケーション ドメインのマニフェストに基づくアクティベーションに必要な情報を指定するオブジェクト。"
  overload: System.AppDomainSetup.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationArguments</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AppDomainSetup.ActivationArguments
  id: ActivationArguments
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ActivationArguments
  nameWithType: AppDomainSetup.ActivationArguments
  fullName: System.AppDomainSetup.ActivationArguments
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはアプリケーション ドメインのアクティベーションに関するデータを設定します。"
  remarks: "このプロパティ設定されている場合に例外がスローされません`null`です。       によって提供される情報、<xref:System.Runtime.Hosting.ActivationArguments>オブジェクトは、マニフェストに基づくアクティベーションをサポートしています</xref:System.Runtime.Hosting.ActivationArguments>。"
  syntax:
    content: public System.Runtime.Hosting.ActivationArguments ActivationArguments { get; set; }
    return:
      type: System.Runtime.Hosting.ActivationArguments
      description: "アプリケーション ドメインのアクティベーションに関するデータを含むオブジェクトです。"
  overload: System.AppDomainSetup.ActivationArguments*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "プロパティに設定する<xref href=&quot;System.Runtime.Hosting.ActivationArguments&quot;></xref>オブジェクトのアプリケーション id を持つのアプリケーション id と一致しません、 <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref>によって返されるオブジェクト、 <> </> *> プロパティです。例外はスローされません、 <> </> *> プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.AppDomainSetup.AppDomainInitializer
  id: AppDomainInitializer
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainInitializer
  nameWithType: AppDomainSetup.AppDomainInitializer
  fullName: System.AppDomainSetup.AppDomainInitializer
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または設定、 <xref href=&quot;System.AppDomainInitializer&quot;> </xref>を委任するアプリケーション ドメインの初期化時に呼び出されるコールバック メソッドを表します。"
  remarks: "情報をコールバック メソッドに渡す、文字列の配列を割り当てる、<xref:System.AppDomainSetup.AppDomainInitializerArguments%2A>プロパティ</xref:System.AppDomainSetup.AppDomainInitializerArguments%2A>。 配列が毎回、コールバック メソッドに渡される、<xref:System.AppDomain>が初期化されています</xref:System.AppDomain>。       コールバック メソッドは、新しく作成されたアプリケーション ドメインのコンテキストで実行されます。"
  example:
  - "The following example creates a child application domain named `ChildDomain`, using an <xref:System.AppDomainSetup> object and evidence from the default application domain. The AppDomainInitializer property is set to the callback method `AppDomainInit`, which is invoked when the child domain is initialized. The arguments for the callback method are placed in an array of strings, which is assigned to the <xref:System.AppDomainSetup.AppDomainInitializerArguments%2A> property. When the child domain is created, the callback method simply prints the strings.  \n  \n [!code-cpp[AppDomainInitializer#1](~/add/codesnippet/cpp/p-system.appdomainsetup._4_1.cpp)]\n [!code-cs[AppDomainInitializer#1](~/add/codesnippet/csharp/p-system.appdomainsetup._4_1.cs)]\n [!code-vb[AppDomainInitializer#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._4_1.vb)]"
  syntax:
    content: public AppDomainInitializer AppDomainInitializer { get; set; }
    return:
      type: System.AppDomainInitializer
      description: "アプリケーション ドメインの初期化時に呼び出されるコールバック メソッドを表すデリゲート。"
  overload: System.AppDomainSetup.AppDomainInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.AppDomainInitializerArguments
  id: AppDomainInitializerArguments
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainInitializerArguments
  nameWithType: AppDomainSetup.AppDomainInitializerArguments
  fullName: System.AppDomainSetup.AppDomainInitializerArguments
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または設定によって表されるコールバック メソッドに渡される引数、 <xref href=&quot;System.AppDomainInitializer&quot;> </xref>を委任します。 アプリケーション ドメインの初期化時に、コールバック メソッドが呼び出されます。"
  remarks: "使用して、<xref:System.AppDomainSetup.AppDomainInitializer%2A>中に呼び出されるコールバック メソッドを指定するプロパティ<xref:System.AppDomain>初期化</xref:System.AppDomain></xref:System.AppDomainSetup.AppDomainInitializer%2A>。 場合、<xref:System.AppDomainSetup.AppDomainInitializer%2A>プロパティが設定されていない場合、このプロパティに割り当てられている配列は使用されません</xref:System.AppDomainSetup.AppDomainInitializer%2A>。       コールバック メソッドは、新しく作成されたアプリケーション ドメインのコンテキストで実行されます。"
  example:
  - "The following code example creates a child application domain named `ChildDomain`, using an <xref:System.AppDomainSetup> object and evidence from the default application domain. The <xref:System.AppDomainSetup.AppDomainInitializer%2A> property is set to the callback method `AppDomainInit`, which is invoked when the child domain is initialized. The arguments for the callback method are placed in an array of strings, which is assigned to the AppDomainInitializerArguments property. When the child domain is created, the callback method simply prints the strings.  \n  \n [!code-cpp[AppDomainInitializer#1](~/add/codesnippet/cpp/p-system.appdomainsetup._0_1.cpp)]\n [!code-cs[AppDomainInitializer#1](~/add/codesnippet/csharp/p-system.appdomainsetup._0_1.cs)]\n [!code-vb[AppDomainInitializer#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._0_1.vb)]"
  syntax:
    content: public string[] AppDomainInitializerArguments { get; set; }
    return:
      type: System.String[]
      description: "によって表されるコールバック メソッドに渡される文字列の配列、 <xref href=&quot;System.AppDomainInitializer&quot;> </xref>中に、コールバック メソッドが呼び出されたときに、デリゲート<xref href=&quot;System.AppDomain&quot;></xref>初期化します。"
  overload: System.AppDomainSetup.AppDomainInitializerArguments*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.AppDomainManagerAssembly
  id: AppDomainManagerAssembly
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainManagerAssembly
  nameWithType: AppDomainSetup.AppDomainManagerAssembly
  fullName: System.AppDomainSetup.AppDomainManagerAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "これを使用して作成されたアプリケーション ドメインのアプリケーション ドメイン マネージャーの種類を提供するアセンブリの表示名を取得または<xref href=&quot;System.AppDomainSetup&quot;></xref>オブジェクト。"
  remarks: "To specify the type of the application domain manager, set both this property and the <xref:System.AppDomainSetup.AppDomainManagerType%2A> property. If either of these properties is not set, the other is ignored.  \n  \n If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <xref:System.AppDomain.CreateDomain%2A?displayProperty=fullName> method is called).  \n  \n When the application domain is loaded, <xref:System.TypeLoadException> is thrown if the assembly does not exist, or if the assembly does not contain the type specified by the <xref:System.AppDomainSetup.AppDomainManagerType%2A> property. <xref:System.IO.FileLoadException> is thrown if the assembly is found but the version information does not match.  \n  \n To set the application domain manager for the default application domain, use the [\\<appDomainManagerAssembly>](../Topic/%3CappDomainManagerAssembly%3E%20Element.md) and [\\<appDomainManagerType>](../Topic/%3CappDomainManagerType%3E%20Element.md) elements in the [\\<runtime>](../Topic/%3Cruntime%3E%20Element.md) section of the application configuration file, or use the environment variables described in <xref:System.AppDomainManager>.  \n  \n This feature requires the application to have full trust. (For example, an application running on the desktop has full trust.) If the application does not have full trust, a <xref:System.TypeLoadException> is thrown.  \n  \n The format of the assembly display name is given by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property."
  syntax:
    content: public string AppDomainManagerAssembly { get; set; }
    return:
      type: System.String
      description: "提供するアセンブリの表示名、<xref:System.Type>のアプリケーション ドメイン マネージャー</xref:System.Type> 。"
  overload: System.AppDomainSetup.AppDomainManagerAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.AppDomainManagerType
  id: AppDomainManagerType
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainManagerType
  nameWithType: AppDomainSetup.AppDomainManagerType
  fullName: System.AppDomainSetup.AppDomainManagerType
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "これを使用して作成されたアプリケーション ドメインのアプリケーション ドメイン マネージャーを提供する型の完全名を取得または<xref href=&quot;System.AppDomainSetup&quot;></xref>オブジェクト。"
  remarks: "To specify the type of the application domain manager, set both this property and the <xref:System.AppDomainSetup.AppDomainManagerAssembly%2A> property. If either of these properties is not set, the other is ignored.  \n  \n If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <xref:System.AppDomain.CreateDomain%2A?displayProperty=fullName> method is called).  \n  \n When the application domain is loaded, <xref:System.TypeLoadException> is thrown if the assembly specified by the <xref:System.AppDomainSetup.AppDomainManagerAssembly%2A> property does not contain the type specified by this property.  \n  \n To set the application domain manager for the default application domain, use the [\\<appDomainManagerAssembly>](../Topic/%3CappDomainManagerAssembly%3E%20Element.md) and [\\<appDomainManagerType>](../Topic/%3CappDomainManagerType%3E%20Element.md) elements in the [\\<runtime>](../Topic/%3Cruntime%3E%20Element.md) section of the application configuration file, or use the environment variables described in <xref:System.AppDomainManager>.  \n  \n This feature requires the application to have full trust. (For example, an application running on the desktop has full trust.) If the application does not have full trust, a <xref:System.TypeLoadException> is thrown.  \n  \n The format of the full name of a type is given by the <xref:System.Type.FullName%2A?displayProperty=fullName> property."
  syntax:
    content: public string AppDomainManagerType { get; set; }
    return:
      type: System.String
      description: "名前空間を含む、型の完全名。"
  overload: System.AppDomainSetup.AppDomainManagerType*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.ApplicationBase
  id: ApplicationBase
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ApplicationBase
  nameWithType: AppDomainSetup.ApplicationBase
  fullName: System.AppDomainSetup.ApplicationBase
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはアプリケーションを含むディレクトリの名前を設定します。"
  remarks: "アプリケーションの基本ディレクトリは、アセンブリ マネージャーがアセンブリのプローブを開始します。       ApplicationBase プロパティに影響を与えるアプリケーション ドメインにアクセス許可が付与されます。 たとえば、通常、ローカル コンピューターから送信されたアプリケーション ドメインは、元の場所に基づいて完全に信頼を受け取ります。 ただし場合、その ApplicationBase プロパティ<xref:System.AppDomain>、イントラネットのディレクトリ設定する場合でも、アプリケーション ドメインは、ローカル コンピューターから実際にあなた LocalIntranet grant をアプリケーション ドメインに許可する権限が制限 ApplicationBase の完全な名前に設定されている</xref:System.AppDomain>。"
  example:
  - "The following example demonstrates how to use the ApplicationBase property to set the location where the assembly loader begins probing for assemblies to load into a new application domain.  \n  \n> [!NOTE]\n>  You must ensure that the folder you specify exists.  \n  \n [!code-vb[ADApplicationBase#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._5_1.vb)]\n [!code-cpp[ADApplicationBase#1](~/add/codesnippet/cpp/p-system.appdomainsetup._5_1.cpp)]\n [!code-cs[ADApplicationBase#1](~/add/codesnippet/csharp/p-system.appdomainsetup._5_1.cs)]"
  syntax:
    content: public string ApplicationBase { get; set; }
    return:
      type: System.String
      description: "アプリケーションの基本ディレクトリの名前。"
  overload: System.AppDomainSetup.ApplicationBase*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.ApplicationName
  id: ApplicationName
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ApplicationName
  nameWithType: AppDomainSetup.ApplicationName
  fullName: System.AppDomainSetup.ApplicationName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはアプリケーションの名前を設定します。"
  remarks: ''
  example:
  - "The following example shows how to set the ApplicationName property when you create a new application domain.  \n  \n The example creates a new application domain, and then calls the <xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=fullName> method to load the example assembly into the new application domain and create an instance of the `Worker` class. The `Worker` class inherits <xref:System.MarshalByRefObject>, so the example can use the proxy returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A> to call the `TestLoad` method.  \n  \n The `TestLoad` method loads an assembly that you specify. You must either specify a valid, fully qualified assembly name, or comment out the <xref:System.Reflection.Assembly.Load%28System.String%29> method. The `TestLoad` method lists the assemblies that are loaded into the new application domain, showing that your specified assembly and the example assembly are loaded.  \n  \n The example uses the <xref:System.LoaderOptimizationAttribute> attribute to tell the assembly loader how the application will share code across application domains.  \n  \n [!code-cpp[ADMultiDomain#1](~/add/codesnippet/cpp/p-system.appdomainsetup._2_1.cpp)]\n [!code-cs[ADMultiDomain#1](~/add/codesnippet/csharp/p-system.appdomainsetup._2_1.cs)]\n [!code-vb[ADMultiDomain#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._2_1.vb)]"
  syntax:
    content: public string ApplicationName { get; set; }
    return:
      type: System.String
      description: "アプリケーションの名前。"
  overload: System.AppDomainSetup.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.ApplicationTrust
  id: ApplicationTrust
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ApplicationTrust
  nameWithType: AppDomainSetup.ApplicationTrust
  fullName: System.AppDomainSetup.ApplicationTrust
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはセキュリティ情報や信頼情報を格納するオブジェクトを設定します。"
  remarks: "このプロパティは`null`ときに、<xref:System.AppDomainSetup>が作成されます</xref:System.AppDomainSetup>。 変更されると、null 参照をリセットできません。"
  syntax:
    content: public System.Security.Policy.ApplicationTrust ApplicationTrust { get; set; }
    return:
      type: System.Security.Policy.ApplicationTrust
      description: "セキュリティおよび信頼情報を格納するオブジェクト。"
  overload: System.AppDomainSetup.ApplicationTrust*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "プロパティに設定する<xref href=&quot;System.Security.Policy.ApplicationTrust&quot;></xref>オブジェクトのアプリケーション id を持つのアプリケーション id と一致しません、 <xref href=&quot;System.Runtime.Hosting.ActivationArguments&quot;> </xref>によって返されるオブジェクト、 <> </> *> プロパティです。例外はスローされません、 <> </> *> プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "プロパティに設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.AppDomainSetup.CachePath
  id: CachePath
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: CachePath
  nameWithType: AppDomainSetup.CachePath
  fullName: System.AppDomainSetup.CachePath
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または設定領域の名前特定アプリケーションにファイルのシャドウ コピーします。"
  remarks: "このプロパティを影響を与えるために、<xref:System.AppDomainSetup.ApplicationName%2A>プロパティも設定する必要があります</xref:System.AppDomainSetup.ApplicationName%2A>。 場合、<xref:System.AppDomainSetup.ApplicationName%2A>プロパティが設定されていない、CachePath プロパティは無視され、シャドウ コピーのキャッシュの場所の既定値は、ダウンロード キャッシュ</xref:System.AppDomainSetup.ApplicationName%2A>。       シャドウ コピーの詳細については、次を参照してください。[アセンブリのシャドウ コピー](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public string CachePath { get; set; }
    return:
      type: System.String
      description: "ファイルのシャドウ コピー ディレクトリのパスとファイル名の完全修飾名。"
  overload: System.AppDomainSetup.CachePath*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.ConfigurationFile
  id: ConfigurationFile
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ConfigurationFile
  nameWithType: AppDomainSetup.ConfigurationFile
  fullName: System.AppDomainSetup.ConfigurationFile
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはアプリケーション ドメインの構成ファイルの名前を設定します。"
  remarks: "構成ファイルは、アプリケーション ドメインの構成データと検索の規則について説明します。 アプリケーション ドメインを作成するホストは、意味のある値が状況によって異なるために、このデータを提供します。       たとえば、各アプリケーション、ユーザー、およびコンピューターで実行可能ファイルの構成データが格納されている各アプリケーション、サイト、およびコンピューターの ASP.NET アプリケーションの構成データが格納されます。 ホストだけでは、構成データの特定の状況の詳細を認識します。"
  syntax:
    content: public string ConfigurationFile { get; set; }
    return:
      type: System.String
      description: "構成ファイルの名前。"
  overload: System.AppDomainSetup.ConfigurationFile*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.DisallowApplicationBaseProbing
  id: DisallowApplicationBaseProbing
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: DisallowApplicationBaseProbing
  nameWithType: AppDomainSetup.DisallowApplicationBaseProbing
  fullName: System.AppDomainSetup.DisallowApplicationBaseProbing
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "読み込むアセンブリを検索するときに、アプリケーション ベース パスおよびプライベート バイナリ パスがプローブされるかどうかを指定します。"
  remarks: "DisallowApplicationBaseProbing プロパティが場合`true`の値、<xref:System.AppDomainSetup.ApplicationBase%2A>プロパティは無視されます</xref:System.AppDomainSetup.ApplicationBase%2A>。 つまり、アセンブリがプローブされますないので指定されたディレクトリで、<xref:System.AppDomainSetup.ApplicationBase%2A>プロパティ</xref:System.AppDomainSetup.ApplicationBase%2A>。 さらの値、<xref:System.AppDomainSetup.PrivateBinPath%2A>プロパティおよび<xref:System.AppDomainSetup.PrivateBinPathProbe%2A>プロパティは無視されます</xref:System.AppDomainSetup.PrivateBinPathProbe%2A></xref:System.AppDomainSetup.PrivateBinPath%2A>。 指定したディレクトリ内のアセンブリがプローブされますなし、<xref:System.AppDomainSetup.PrivateBinPath%2A>プロパティ</xref:System.AppDomainSetup.PrivateBinPath%2A>。       DisallowApplicationBaseProbing プロパティでは、読み込みプロセスが細かく制御の追加レイヤーを提供します。 通常のアセンブリ読み込みの前に、アプリケーション ベースがプローブ、<xref:System.AppDomain.AssemblyResolve?displayProperty=fullName>イベントが発生します</xref:System.AppDomain.AssemblyResolve?displayProperty=fullName>。 ただし、一部のアプリケーションは、ドキュメント内の OLE 複合ファイルまたはグローバル アセンブリ キャッシュにも、によって指定されたディレクトリで、一意な既知の場所からアセンブリを読み込む必要があります、<xref:System.AppDomainSetup.ApplicationBase%2A>と<xref:System.AppDomainSetup.PrivateBinPath%2A>プロパティ</xref:System.AppDomainSetup.PrivateBinPath%2A></xref:System.AppDomainSetup.ApplicationBase%2A>。 このようなアプリケーションは、標準の調査、による遅延を回避して、通常のプローブ パスに存在する可能性があるために必要なアセンブリのコピーが読み込まれないように、DisallowApplicationBaseProbing プロパティを使用できます。"
  syntax:
    content: public bool DisallowApplicationBaseProbing { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プローブは許可されていません。 場合、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.AppDomainSetup.DisallowApplicationBaseProbing*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.DisallowBindingRedirects
  id: DisallowBindingRedirects
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: DisallowBindingRedirects
  nameWithType: AppDomainSetup.DisallowBindingRedirects
  fullName: System.AppDomainSetup.DisallowBindingRedirects
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはアプリケーション ドメインがアセンブリ バインディング リダイレクトを許可するかどうかを示す値を設定します。"
  remarks: "DisallowBindingRedirects プロパティは、アセンブリ バインド リダイレクトがアプリケーションのシナリオの一部ではないサービスとサーバー アプリケーションで使用するよう設計されています。"
  syntax:
    content: public bool DisallowBindingRedirects { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>アセンブリのリダイレクトは許可されていません。 場合、<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>が許可された場合。"
  overload: System.AppDomainSetup.DisallowBindingRedirects*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.DisallowCodeDownload
  id: DisallowCodeDownload
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: DisallowCodeDownload
  nameWithType: AppDomainSetup.DisallowCodeDownload
  fullName: System.AppDomainSetup.DisallowCodeDownload
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはアプリケーション ドメインのアセンブリの HTTP ダウンロードを許可するかどうかを示す値を設定します。"
  remarks: "DisallowCodeDownload プロパティは、イントラネットまたはインターネットからダウンロードするコードがアプリケーションのシナリオの一部ではないサービスとサーバー アプリケーションで使用するよう設計されています。      > [!CAUTION] > DisallowCodeDownload プロパティの既定値は`false`します。 この設定は、サービスの安全ではありません。 サービスが部分的に信頼されたコードをダウンロードするを防ぐためには、このプロパティを設定`true`です。"
  syntax:
    content: public bool DisallowCodeDownload { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>アセンブリの HTTP ダウンロードする場合は許可されていません。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>が許可された場合。"
  overload: System.AppDomainSetup.DisallowCodeDownload*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.DisallowPublisherPolicy
  id: DisallowPublisherPolicy
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: DisallowPublisherPolicy
  nameWithType: AppDomainSetup.DisallowPublisherPolicy
  fullName: System.AppDomainSetup.DisallowPublisherPolicy
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または設定を示す値かどうか、 [ &lt;publisherPolicy&gt; ](../Topic/%3CpublisherPolicy%3E%20Element.md)構成ファイルのセクションをアプリケーション ドメインに適用します。"
  remarks: "DisallowPublisherPolicy プロパティは、具体的には、ローカルで読み込まれている Web アプリケーションに適用されます。 セーフ モードで、安全でない Web アプリケーションを実行するのに悪意のある試みを防止するのにには、このプロパティを使用します。       発行者ポリシーの省略の詳細については、次を参照してください。、[アセンブリ バージョンのリダイレクト](~/add/includes/ajax-current-ext-md.md)トピックです。 セーフ モードの詳細については、の「構成ファイルを調べて、」を参照してください、[ランタイムがアセンブリを検索する方法](~/add/includes/ajax-current-ext-md.md)トピックです。"
  syntax:
    content: public bool DisallowPublisherPolicy { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref uid=&quot;langword_csharp_&lt;publisherPolicy&gt;&quot; name=&quot;&lt;publisherPolicy&gt;&quot; href=&quot;&quot;> </xref>アプリケーション ドメインの構成ファイルのセクションは無視されます。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>場合は、宣言された発行元ポリシーは有効にします。"
  overload: System.AppDomainSetup.DisallowPublisherPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.DynamicBase
  id: DynamicBase
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: DynamicBase
  nameWithType: AppDomainSetup.DynamicBase
  fullName: System.AppDomainSetup.DynamicBase
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または動的に生成されたファイルのディレクトリが配置されている、ベース ディレクトリを設定します。"
  remarks: "Use this property to set the base directory where the dynamic directory for the new application domain will be located. When code in the new application domain loads an assembly, assembly resolution looks first in the normal probing paths. If it does not find the assembly, it looks in the dynamic directory, which is returned by the <xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName> property. Dynamic assemblies that will be loaded and executed by the new application domain can be placed there.  \n  \n When you assign a path to the DynamicBase property, an additional subdirectory is added; the name of this subdirectory is the hash code of the value assigned to the <xref:System.AppDomainSetup.ApplicationName%2A> property. Thus, the base directory subsequently returned by this property is always different from the value assigned.  \n  \n> [!IMPORTANT]\n>  Assigning a value to this property does not create any directories. The directories must be created or verified by the code that uses them.  \n  \n The dynamic directory is a subdirectory of DynamicBase. Its simple name is the value returned by the <xref:System.AppDomainSetup.ApplicationName%2A> property, so its format is *original path*\\\\*hash code*\\\\*application name*."
  example:
  - "The following example demonstrates how to use the DynamicBase property to set the path an application domain probes when loading dynamic assemblies.  \n  \n The example creates an <xref:System.AppDomainSetup> object and sets its <xref:System.AppDomainSetup.ApplicationName%2A> property to \"Example\" and its DynamicBase property to \"C:\\DynamicAssemblyDir\". The example then displays the DynamicBase property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.  \n  \n> [!NOTE]\n>  The base directory in this example is intended to be outside the probing path for the example application. Be sure to compile the example in a different location. Delete the base directory and all its subdirectories each time you run the example.  \n  \n The example creates a new application domain using the <xref:System.AppDomainSetup> object. The example then creates the dynamic directory if it does not already exist. Although the example uses the application domain's <xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName> property to get the name of the dynamic directory, it could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.  \n  \n The example has a `GenerateDynamicAssembly` method that emits an assembly named `DynamicHelloWorld.dll` and stores it in the new application domain's dynamic directory. The dynamic assembly contains one type, `HelloWorld`, that has a static method (`Shared` method in Visual Basic) named `HelloFromAD`. Calling this method displays the name of the application domain.  \n  \n The `Example` class derives from <xref:System.MarshalByRefObject>, so the example can create an instance of the class in the new application domain and call its `Test` method. The `Test` method loads the dynamic assembly by its display name and calls the static `HelloFromAD` method.  \n  \n You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named `DynamicHelloWorld.dll` and compiling it in the same directory as this example. The assembly must have a class named `HelloWorld` with a static method named `HelloFromAD`. This method does not have to have the same functionality as the one in the example; it can simply display a string to the console. The assembly must also have an <xref:System.Reflection.AssemblyVersionAttribute> attribute that sets its version to 1.0.0.0. When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.  \n  \n [!code-cpp[ADDynamicBase#1](~/add/codesnippet/cpp/p-system.appdomainsetup._1_1.cpp)]\n [!code-cs[ADDynamicBase#1](~/add/codesnippet/csharp/p-system.appdomainsetup._1_1.cs)]\n [!code-vb[ADDynamicBase#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._1_1.vb)]"
  syntax:
    content: public string DynamicBase { get; set; }
    return:
      type: System.String
      description: "ディレクトリを&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName&gt;が配置されています。       <div class=&quot;alert NOTE&quot;>    このプロパティの戻り値が割り当てられている値です。 「解説」セクションを参照してください。      </div>"
  overload: System.AppDomainSetup.DynamicBase*
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "アプリケーション ドメインでアプリケーション名があるために、このプロパティを設定することはできません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.AppDomainSetup.GetConfigurationBytes
  id: GetConfigurationBytes
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: GetConfigurationBytes()
  nameWithType: AppDomainSetup.GetConfigurationBytes()
  fullName: System.AppDomainSetup.GetConfigurationBytes()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "によって設定 XML 構成情報を返します、<xref:System.AppDomainSetup.SetConfigurationBytes*>メソッドで、アプリケーションの XML 構成情報をオーバーライドします</xref:System.AppDomainSetup.SetConfigurationBytes*>。"
  remarks: "<xref:System.AppDomainSetup.SetConfigurationBytes%2A>メソッドは、新しいアプリケーション ドメインを作成するアプリケーションの構成情報をオーバーライドする方法を提供します</xref:System.AppDomainSetup.SetConfigurationBytes%2A>。 ファイルの構成情報で`value`アプリケーションの構成ファイルの情報をオーバーライドします。 たとえば、Example.exe アプリケーションは、新しいアプリケーション ドメインを作成するときは、最初に Example.exe.config ファイルから取得された構成情報をオーバーライドできます。      > [!IMPORTANT] > 構成ファイルの情報のいくつかのコンシューマーは格納されている情報を使用しないでください、<xref:System.AppDomainSetup.SetConfigurationBytes%2A>メソッド</xref:System.AppDomainSetup.SetConfigurationBytes%2A>。 ランタイムはこれを強制しません。 すべての構成ファイルの情報が、新しいアプリケーション ドメインでオーバーライドされることを使用して、<xref:System.AppDomainSetup.ConfigurationFile%2A>構成ファイルを指定するプロパティ</xref:System.AppDomainSetup.ConfigurationFile%2A>。 <xref:System.AppDomainSetup.SetConfigurationBytes%2A>メソッドはアセンブリのバインディングに影響します</xref:System.AppDomainSetup.SetConfigurationBytes%2A>。       内の XML`value`同じですが、通常の構成ファイルに xml として保存されている、<xref:System.Byte>配列</xref:System.Byte>。       アプリケーション ドメインの構成 (バイト) にアクセスするには、使用、<xref:System.AppDomain.SetupInformation%2A?displayProperty=fullName>を取得するプロパティ、<xref:System.AppDomainSetup>アプリケーション ドメインのオブジェクト、GetConfigurationBytes メソッドを使用します</xref:System.AppDomainSetup></xref:System.AppDomain.SetupInformation%2A?displayProperty=fullName>。"
  syntax:
    content: public byte[] GetConfigurationBytes ();
    parameters: []
    return:
      type: System.Byte[]
      description: "によって設定された XML 構成情報を含む配列、 <> </> *> メソッド、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>場合、 <> </> *> メソッドが呼び出されていません。"
  overload: System.AppDomainSetup.GetConfigurationBytes*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.LicenseFile
  id: LicenseFile
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: LicenseFile
  nameWithType: AppDomainSetup.LicenseFile
  fullName: System.AppDomainSetup.LicenseFile
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または、このドメインに関連付けられたライセンス ファイルの場所を設定します。"
  syntax:
    content: public string LicenseFile { get; set; }
    return:
      type: System.String
      description: "場所とライセンス ファイルの名前。"
  overload: System.AppDomainSetup.LicenseFile*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.LoaderOptimization
  id: LoaderOptimization
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: LoaderOptimization
  nameWithType: AppDomainSetup.LoaderOptimization
  fullName: System.AppDomainSetup.LoaderOptimization
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "実行可能ファイルを読み込むために使用する最適化ポリシーを指定します。"
  remarks: ''
  example:
  - "The following example creates a dynamic assembly and saves it to disk, and then uses the LoaderOptimization property to set the optimization policy used to load the assembly into an application domain.  \n  \n [!code-cpp[ADDyno#1](~/add/codesnippet/cpp/p-system.appdomainsetup._3_1.cpp)]\n [!code-cs[ADDyno#1](~/add/codesnippet/csharp/p-system.appdomainsetup._3_1.cs)]\n [!code-vb[ADDyno#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._3_1.vb)]"
  syntax:
    content: public LoaderOptimization LoaderOptimization { get; set; }
    return:
      type: System.LoaderOptimization
      description: "使用される列挙定数、 <xref href=&quot;System.LoaderOptimizationAttribute&quot;></xref>です。"
  overload: System.AppDomainSetup.LoaderOptimization*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.PartialTrustVisibleAssemblies
  id: PartialTrustVisibleAssemblies
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: PartialTrustVisibleAssemblies
  nameWithType: AppDomainSetup.PartialTrustVisibleAssemblies
  fullName: System.AppDomainSetup.PartialTrustVisibleAssemblies
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または設定でマークされたアセンブリの一覧、 <xref href=&quot;System.Security.PartialTrustVisibilityLevel&quot;> </xref>がサンド ボックス アプリケーション ドメインで実行されている部分的に信頼されたコードに表示されるフラグ。"
  remarks: "以降で、 [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]、 <xref:System.Security.AllowPartiallyTrustedCallersAttribute>(APTCA) 属性が適用可能な<xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A><xref:System.Security.PartialTrustVisibilityLevel></xref:System.Security.PartialTrustVisibilityLevel>プロパティ</xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A>を設定して条件付き</xref:System.Security.AllowPartiallyTrustedCallersAttribute>。 <xref:System.Security.PartialTrustVisibilityLevel>ホスト アプリケーションがそれを許可しない限り、部分的に信頼されたコードで使用することはできません</xref:System.Security.PartialTrustVisibilityLevel>とマークされている APTCA アセンブリ       サンド ボックス アプリケーション ドメインのホストは、単純な名前と、各アセンブリの公開キーを含む配列を作成し、このプロパティに、配列を割り当てることによって、条件付きの APTCA 属性を持つアセンブリを使用するアプリケーション ドメインでコードを許可します。 For example, an element of the array might look like the following: &quot;MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9&quot;.      > [!IMPORTANT] > のサブクラスを使用している場合<xref:System.AppDomainManager>とそれを定義するアセンブリが、条件付きの APTCA 属性でマークされたアセンブリに依存して、一覧の PartialTrustVisibleAssemblies プロパティに渡すことでそれらのアセンブリを含める必要があります、<xref:System.AppDomainSetup>を使用するアプリケーション ドメインを作成します</xref:System.AppDomainSetup></xref:System.AppDomainManager>。 それ以外の場合、条件付きの APTCA 属性でマークされたアセンブリが無効になります。      > [!NOTE] > サンド ボックス アプリケーション ドメインで実行されているアプリケーションをデバッグしているときにいくつか<xref:System.Security.SecurityException>メッセージは誤解を招くことがあります</xref:System.Security.SecurityException>。 たとえば、メッセージを完全に信頼されたアセンブリのいずれかが限られるアクセス許可、本当の問題の原因がサンド ボックス アプリケーション ドメインの許可セットの値を超えているセキュリティの要求がサンド ボックス アプリケーション ドメインの境界に伝達する場合に状態があり、失敗しました。"
  syntax:
    content: public string[] PartialTrustVisibleAssemblies { get; set; }
    return:
      type: System.String[]
      description: "部分アセンブリ名、各部分名で構成されている単純なアセンブリ名と公開キーの配列。"
  overload: System.AppDomainSetup.PartialTrustVisibleAssemblies*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.PrivateBinPath
  id: PrivateBinPath
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: PrivateBinPath
  nameWithType: AppDomainSetup.PrivateBinPath
  fullName: System.AppDomainSetup.PrivateBinPath
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはプライベート アセンブリが調査されるアプリケーション ベース ディレクトリ下のディレクトリの一覧を設定します。"
  remarks: "プライベート アセンブリは、アプリケーションと同じディレクトリ構造で展開されます。 PrivateBinPath の指定したディレクトリが下がない場合<xref:System.AppDomainSetup.ApplicationBase%2A>、無視されます</xref:System.AppDomainSetup.ApplicationBase%2A>。"
  syntax:
    content: public string PrivateBinPath { get; set; }
    return:
      type: System.String
      description: "セミコロンで区切られたディレクトリ名の一覧。"
  overload: System.AppDomainSetup.PrivateBinPath*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.PrivateBinPathProbe
  id: PrivateBinPathProbe
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: PrivateBinPathProbe
  nameWithType: AppDomainSetup.PrivateBinPathProbe
  fullName: System.AppDomainSetup.PrivateBinPathProbe
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "追加または除外する文字列値の設定を取得または<> *> アプリケーション、および検索にのみの検索パスから<> *> です。"
  remarks: "任意の null 以外の文字列値にこのプロパティを設定を含む<xref:System.String?displayProperty=fullName>(&quot;&quot;)、アプリケーションのディレクトリ パスを除外する: つまり、 <xref:System.AppDomainSetup.ApplicationBase%2A>— <xref:System.AppDomainSetup.PrivateBinPath%2A>.</xref:System.AppDomainSetup.PrivateBinPath%2A>のみでアセンブリを検索して、アプリケーションの検索パスから</xref:System.AppDomainSetup.ApplicationBase%2A></xref:System.String?displayProperty=fullName>"
  syntax:
    content: public string PrivateBinPathProbe { get; set; }
    return:
      type: System.String
      description: "Null 参照 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual Basic で) を含めるアセンブリを検索するときのアプリケーション ベース パス、パスを除外する任意の null 以外の文字列値です。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.AppDomainSetup.PrivateBinPathProbe*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.SandboxInterop
  id: SandboxInterop
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: SandboxInterop
  nameWithType: AppDomainSetup.SandboxInterop
  fullName: System.AppDomainSetup.SandboxInterop
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはアプリケーション ドメインでの相互運用呼び出しに対するインターフェイス キャッシュが無効になるかどうかを示す値を設定できるように、`QueryInterface`が呼び出すたびに実行します。"
  remarks: "相互運用呼び出しのパフォーマンスに大きな影響を及ぼしますインターフェイスのキャッシュを無効にします。       このメンバーがで導入された、[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]です。"
  syntax:
    content: public bool SandboxInterop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、現在の作成されたアプリケーション ドメインの相互運用呼び出しに対するインターフェイス キャッシュが無効<xref href=&quot;System.AppDomainSetup&quot;></xref>オブジェクト。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.AppDomainSetup.SandboxInterop*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})
  id: SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: SetCompatibilitySwitches(IEnumerable<String>)
  nameWithType: AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)
  fullName: System.AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "アプリケーション ドメインを指定された問題の .NET Framework の以前のバージョンと互換性のあること、指定されたスイッチを設定します。"
  remarks: "Major versions of the .NET Framework sometimes introduce breaking changes from the previous version. For example, the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)] introduces a small number of breaking changes from the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]. Use the SetCompatibilitySwitches method to specify that one or more of these breaking changes should be rolled back for the application domain, to make the behavior compatible with the previous version of the .NET Framework.  \n  \n Each time you call this method, it replaces the existing switch settings. To erase the settings, specify `null` for the `switches` parameter.  \n  \n The set of string values you provide for `switches` can be a simple string array, because arrays implement the <xref:System.Collections.IEnumerable> interface.  \n  \n The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.  \n  \n|Switch|Meaning|  \n|------------|-------------|  \n|\"NetFx40_LegacySecurityPolicy\"|Code access security (CAS) for the [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] is enabled in this application domain. See [\\&lt;NetFx40_LegacySecurityPolicy\\&gt; Element](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md).|  \n|\"NetFx40_Legacy20SortingBehavior\"|String sorting defaults for the [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] are enabled in this application domain. Successfully restoring legacy sorting behavior also requires the sort00001000.dll dynamic link library to be available on the local system. See [\\&lt;CompatSortNLSVersion\\&gt; Element](../Topic/%3CCompatSortNLSVersion%3E%20Element.md).|  \n|\"NetFx40_Legacy40SortingBehavior\"|String sorting defaults for the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] and Unicode 5.0 are enabled in this application domain. Successfully restoring legacy sorting behavior also requires the sort00060101.dll dynamic link library to be available on the local system.|  \n|\"NetFx40_TimeSpanLegacyFormatMode\"|<xref:System.TimeSpan> formatting behavior for the [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] is enabled in this application domain. See [\\&lt;TimeSpan_LegacyFormatMode\\&gt; Element](../Topic/%3CTimeSpan_LegacyFormatMode%3E%20Element.md) and the \"Restoring Legacy TimeSpan Formatting\" section of the <xref:System.TimeSpan> topic.|  \n|\"UseRandomizedStringHashAlgorithm\"|The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains. See [\\&lt;UseRandomizedStringHashAlgorithm\\&gt; Element](../Topic/%3CUseRandomizedStringHashAlgorithm%3E%20Element.md).|"
  syntax:
    content: public void SetCompatibilitySwitches (System.Collections.Generic.IEnumerable<string> switches);
    parameters:
    - id: switches
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "互換性スイッチを指定する文字列値の列挙可能なセットまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>を既存の互換性を消去するスイッチです。"
  overload: System.AppDomainSetup.SetCompatibilitySwitches*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.SetConfigurationBytes(System.Byte[])
  id: SetConfigurationBytes(System.Byte[])
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: SetConfigurationBytes(Byte[])
  nameWithType: AppDomainSetup.SetConfigurationBytes(Byte[])
  fullName: System.AppDomainSetup.SetConfigurationBytes(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "アプリケーションの XML 構成情報を置き換え、アプリケーション ドメインの XML 構成情報を提供します。"
  remarks: "SetConfigurationBytes メソッドでは、新しいアプリケーション ドメインを作成したアプリケーションの構成情報を交換する手段を提供します。 ファイルの構成情報で`value`アプリケーションの構成ファイルの情報が置き換えられます。 たとえば、Example.exe アプリケーションは、新しいアプリケーション ドメインを作成するときは、Example.exe.config ファイルから最初に取得された構成情報を置き換えることができます。      > [!IMPORTANT] > 構成ファイルの情報のいくつかのコンシューマーが SetConfigurationBytes メソッドによって保存された情報を使用しないでください。 ランタイムはこれを強制しません。 すべての構成ファイルの情報が、新しいアプリケーション ドメインで置き換えられたことを確認してくださいを使用して、<xref:System.AppDomainSetup.ConfigurationFile%2A>構成ファイルを指定するプロパティ</xref:System.AppDomainSetup.ConfigurationFile%2A>。 SetConfigurationBytes メソッドには、アセンブリのバインディングに影響します。       内の XML`value`同じですが、通常の構成ファイルに xml として保存されている、<xref:System.Byte>配列</xref:System.Byte>。"
  syntax:
    content: public void SetConfigurationBytes (byte[] value);
    parameters:
    - id: value
      type: System.Byte[]
      description: "アプリケーション ドメインに使用する XML 構成情報を格納する配列。"
  overload: System.AppDomainSetup.SetConfigurationBytes*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)
  id: SetNativeFunction(System.String,System.Int32,System.IntPtr)
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: SetNativeFunction(String,Int32,IntPtr)
  nameWithType: AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)
  fullName: System.AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "文字列比較関数の代替実装を持つ共通言語ランタイムを提供します。"
  remarks: "SetNativeFunction メソッドでは、次の文字列の比較および並べ替え方法を無効にできます:- `IsNLSDefinedString`       -    `CompareStringEx`       -    `LCMapStringEx`       -    `FindNLSStringEx`       -    `CompareStringOrdinal`       -    `GetNLSVersion`についてこれらの関数は、次を参照してください。[言語サポート関数の各国語](http://go.microsoft.com/fwlink/?LinkId=228134)です。"
  syntax:
    content: public void SetNativeFunction (string functionName, int functionVersion, IntPtr functionPointer);
    parameters:
    - id: functionName
      type: System.String
      description: "オーバーライドする文字列比較関数の名前。"
    - id: functionVersion
      type: System.Int32
      description: "関数のバージョン。 [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]、その値が 1 以上にする必要があります。"
    - id: functionPointer
      type: System.IntPtr
      description: "オーバーライドする関数へのポインター`functionName`です。"
  overload: System.AppDomainSetup.SetNativeFunction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>functionName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>functionVersion</code>1 であるか、または大きい値ではありません。       - または -<code>functionPointer</code>は&lt;xref:System.IntPtr?displayProperty=fullName&gt;です。"
  platform:
  - net462
- uid: System.AppDomainSetup.ShadowCopyDirectories
  id: ShadowCopyDirectories
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ShadowCopyDirectories
  nameWithType: AppDomainSetup.ShadowCopyDirectories
  fullName: System.AppDomainSetup.ShadowCopyDirectories
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはシャドウ コピーするアセンブリを含むディレクトリの名前を設定します。"
  remarks: "既定ではシャドウ コピーが調査; で見つかったすべてのアセンブリがシャドウ コピーを有効にすると、つまり、ディレクトリ内で指定された、<xref:System.AppDomainSetup.PrivateBinPath%2A>と<xref:System.AppDomainSetup.ApplicationBase%2A>プロパティ</xref:System.AppDomainSetup.ApplicationBase%2A></xref:System.AppDomainSetup.PrivateBinPath%2A>。 ShadowCopyDirectories プロパティは、ShadowCopyDirectories で指定したディレクトリ内のアセンブリをシャドウ コピーを制限します。       文字列 ShadowCopyDirectories プロパティに割り当てられていない場合、またはこのプロパティを設定する`null`で指定したディレクトリ内のすべてのアセンブリ、<xref:System.AppDomainSetup.ApplicationBase%2A>と<xref:System.AppDomainSetup.PrivateBinPath%2A>プロパティは、シャドウ コピーします</xref:System.AppDomainSetup.PrivateBinPath%2A></xref:System.AppDomainSetup.ApplicationBase%2A>。      > [!IMPORTANT] > ディレクトリ パスを含めないでくださいセミコロン、セミコロンは区切り文字なのでです。 セミコロンのためのエスケープ文字はありません。       シャドウ コピーが有効な場合は、アセンブリが読み込まれる前に別の場所にアセンブリ ファイルがコピーされます。 元のアセンブリ ファイルはロックされず、更新できるようにします。 シャドウ コピーの詳細については、次を参照してください。[アセンブリのシャドウ コピー](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public string ShadowCopyDirectories { get; set; }
    return:
      type: System.String
      description: "セミコロンで区切られたディレクトリ名の一覧。"
  overload: System.AppDomainSetup.ShadowCopyDirectories*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.ShadowCopyFiles
  id: ShadowCopyFiles
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ShadowCopyFiles
  nameWithType: AppDomainSetup.ShadowCopyFiles
  fullName: System.AppDomainSetup.ShadowCopyFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはオンまたはオフ シャドウ コピーになっているかどうかを示す文字列を設定します。"
  remarks: "シャドウ コピーの詳細については、次を参照してください。[アセンブリのシャドウ コピー](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public string ShadowCopyFiles { get; set; }
    return:
      type: System.String
      description: "文字列値&quot;true&quot;シャドウ コピーすることを示すために電源がオンします。または、シャドウ コピーすることを示すためには&quot;false&quot;がオフにします。"
  overload: System.AppDomainSetup.ShadowCopyFiles*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.TargetFrameworkName
  id: TargetFrameworkName
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: TargetFrameworkName
  nameWithType: AppDomainSetup.TargetFrameworkName
  fullName: System.AppDomainSetup.TargetFrameworkName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または設定で解析できる形式で、対象のバージョンとのアプリケーション ドメインの .NET Framework のプロファイルを指定する文字列、 &lt;xref:System.Runtime.Versioning.FrameworkName.%23ctor%28System.String%29?displayProperty=fullName&gt;コンス トラクターです。"
  remarks: "このプロパティへの読み込みと実行対象のバージョンまたはプロファイルにコンパイルされたアセンブリ、アプリケーション ドメインが使用されることを現在実行中の .NET Framework のバージョンに通知を設定します。 現在実行中の .NET Framework のバージョンに対象のバージョンでコンパイルされたコードとの互換性に影響する省略可能な動作がある場合は、有効または互換性を向上させるために、必要に応じて、これらの動作を無効にすることできます。 これは、アプリケーションは、個別のアプリケーション ドメインで実行することにより、.NET Framework の複数のバージョンでコンパイルされたアドインをサポートしている場合に役立ちます。       クライアント アプリケーションの TargetFrameworkName プロパティの値はから推測、<xref:System.Runtime.Versioning.TargetFrameworkAttribute>属性</xref:System.Runtime.Versioning.TargetFrameworkAttribute>。 [!INCLUDE[vs_dev10_long](~/add/includes/vs-dev10-long-md.md)]後で、この属性が追加のプロジェクトの設定に基づいて自動的に、アセンブリと**ターゲット フレームワーク**プロパティです。"
  syntax:
    content: public string TargetFrameworkName { get; set; }
    return:
      type: System.String
      description: "対象のバージョンと、.NET Framework のプロファイルです。"
  overload: System.AppDomainSetup.TargetFrameworkName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.MemberAccessException
  isExternal: true
  name: System.MemberAccessException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.AppDomainSetup.#ctor
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainSetup()
  nameWithType: AppDomainSetup.AppDomainSetup()
  fullName: System.AppDomainSetup.AppDomainSetup()
- uid: System.AppDomainSetup.#ctor(System.ActivationContext)
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainSetup(ActivationContext)
  nameWithType: AppDomainSetup.AppDomainSetup(ActivationContext)
  fullName: System.AppDomainSetup.AppDomainSetup(ActivationContext)
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainSetup(ActivationArguments)
  nameWithType: AppDomainSetup.AppDomainSetup(ActivationArguments)
  fullName: System.AppDomainSetup.AppDomainSetup(ActivationArguments)
- uid: System.Runtime.Hosting.ActivationArguments
  parent: System.Runtime.Hosting
  isExternal: false
  name: ActivationArguments
  nameWithType: ActivationArguments
  fullName: System.Runtime.Hosting.ActivationArguments
- uid: System.AppDomainSetup.ActivationArguments
  parent: System.AppDomainSetup
  isExternal: false
  name: ActivationArguments
  nameWithType: AppDomainSetup.ActivationArguments
  fullName: System.AppDomainSetup.ActivationArguments
- uid: System.AppDomainSetup.AppDomainInitializer
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainInitializer
  nameWithType: AppDomainSetup.AppDomainInitializer
  fullName: System.AppDomainSetup.AppDomainInitializer
- uid: System.AppDomainInitializer
  parent: System
  isExternal: false
  name: AppDomainInitializer
  nameWithType: AppDomainInitializer
  fullName: System.AppDomainInitializer
- uid: System.AppDomainSetup.AppDomainInitializerArguments
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainInitializerArguments
  nameWithType: AppDomainSetup.AppDomainInitializerArguments
  fullName: System.AppDomainSetup.AppDomainInitializerArguments
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AppDomainSetup.AppDomainManagerAssembly
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainManagerAssembly
  nameWithType: AppDomainSetup.AppDomainManagerAssembly
  fullName: System.AppDomainSetup.AppDomainManagerAssembly
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.AppDomainSetup.AppDomainManagerType
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainManagerType
  nameWithType: AppDomainSetup.AppDomainManagerType
  fullName: System.AppDomainSetup.AppDomainManagerType
- uid: System.AppDomainSetup.ApplicationBase
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationBase
  nameWithType: AppDomainSetup.ApplicationBase
  fullName: System.AppDomainSetup.ApplicationBase
- uid: System.AppDomainSetup.ApplicationName
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationName
  nameWithType: AppDomainSetup.ApplicationName
  fullName: System.AppDomainSetup.ApplicationName
- uid: System.AppDomainSetup.ApplicationTrust
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationTrust
  nameWithType: AppDomainSetup.ApplicationTrust
  fullName: System.AppDomainSetup.ApplicationTrust
- uid: System.Security.Policy.ApplicationTrust
  parent: System.Security.Policy
  isExternal: false
  name: ApplicationTrust
  nameWithType: ApplicationTrust
  fullName: System.Security.Policy.ApplicationTrust
- uid: System.AppDomainSetup.CachePath
  parent: System.AppDomainSetup
  isExternal: false
  name: CachePath
  nameWithType: AppDomainSetup.CachePath
  fullName: System.AppDomainSetup.CachePath
- uid: System.AppDomainSetup.ConfigurationFile
  parent: System.AppDomainSetup
  isExternal: false
  name: ConfigurationFile
  nameWithType: AppDomainSetup.ConfigurationFile
  fullName: System.AppDomainSetup.ConfigurationFile
- uid: System.AppDomainSetup.DisallowApplicationBaseProbing
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowApplicationBaseProbing
  nameWithType: AppDomainSetup.DisallowApplicationBaseProbing
  fullName: System.AppDomainSetup.DisallowApplicationBaseProbing
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.AppDomainSetup.DisallowBindingRedirects
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowBindingRedirects
  nameWithType: AppDomainSetup.DisallowBindingRedirects
  fullName: System.AppDomainSetup.DisallowBindingRedirects
- uid: System.AppDomainSetup.DisallowCodeDownload
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowCodeDownload
  nameWithType: AppDomainSetup.DisallowCodeDownload
  fullName: System.AppDomainSetup.DisallowCodeDownload
- uid: System.AppDomainSetup.DisallowPublisherPolicy
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowPublisherPolicy
  nameWithType: AppDomainSetup.DisallowPublisherPolicy
  fullName: System.AppDomainSetup.DisallowPublisherPolicy
- uid: System.AppDomainSetup.DynamicBase
  parent: System.AppDomainSetup
  isExternal: false
  name: DynamicBase
  nameWithType: AppDomainSetup.DynamicBase
  fullName: System.AppDomainSetup.DynamicBase
- uid: System.AppDomainSetup.GetConfigurationBytes
  parent: System.AppDomainSetup
  isExternal: false
  name: GetConfigurationBytes()
  nameWithType: AppDomainSetup.GetConfigurationBytes()
  fullName: System.AppDomainSetup.GetConfigurationBytes()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AppDomainSetup.LicenseFile
  parent: System.AppDomainSetup
  isExternal: false
  name: LicenseFile
  nameWithType: AppDomainSetup.LicenseFile
  fullName: System.AppDomainSetup.LicenseFile
- uid: System.AppDomainSetup.LoaderOptimization
  parent: System.AppDomainSetup
  isExternal: false
  name: LoaderOptimization
  nameWithType: AppDomainSetup.LoaderOptimization
  fullName: System.AppDomainSetup.LoaderOptimization
- uid: System.LoaderOptimization
  parent: System
  isExternal: false
  name: LoaderOptimization
  nameWithType: LoaderOptimization
  fullName: System.LoaderOptimization
- uid: System.AppDomainSetup.PartialTrustVisibleAssemblies
  parent: System.AppDomainSetup
  isExternal: false
  name: PartialTrustVisibleAssemblies
  nameWithType: AppDomainSetup.PartialTrustVisibleAssemblies
  fullName: System.AppDomainSetup.PartialTrustVisibleAssemblies
- uid: System.AppDomainSetup.PrivateBinPath
  parent: System.AppDomainSetup
  isExternal: false
  name: PrivateBinPath
  nameWithType: AppDomainSetup.PrivateBinPath
  fullName: System.AppDomainSetup.PrivateBinPath
- uid: System.AppDomainSetup.PrivateBinPathProbe
  parent: System.AppDomainSetup
  isExternal: false
  name: PrivateBinPathProbe
  nameWithType: AppDomainSetup.PrivateBinPathProbe
  fullName: System.AppDomainSetup.PrivateBinPathProbe
- uid: System.AppDomainSetup.SandboxInterop
  parent: System.AppDomainSetup
  isExternal: false
  name: SandboxInterop
  nameWithType: AppDomainSetup.SandboxInterop
  fullName: System.AppDomainSetup.SandboxInterop
- uid: System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})
  parent: System.AppDomainSetup
  isExternal: false
  name: SetCompatibilitySwitches(IEnumerable<String>)
  nameWithType: AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)
  fullName: System.AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.AppDomainSetup.SetConfigurationBytes(System.Byte[])
  parent: System.AppDomainSetup
  isExternal: false
  name: SetConfigurationBytes(Byte[])
  nameWithType: AppDomainSetup.SetConfigurationBytes(Byte[])
  fullName: System.AppDomainSetup.SetConfigurationBytes(Byte[])
- uid: System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)
  parent: System.AppDomainSetup
  isExternal: false
  name: SetNativeFunction(String,Int32,IntPtr)
  nameWithType: AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)
  fullName: System.AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.AppDomainSetup.ShadowCopyDirectories
  parent: System.AppDomainSetup
  isExternal: false
  name: ShadowCopyDirectories
  nameWithType: AppDomainSetup.ShadowCopyDirectories
  fullName: System.AppDomainSetup.ShadowCopyDirectories
- uid: System.AppDomainSetup.ShadowCopyFiles
  parent: System.AppDomainSetup
  isExternal: false
  name: ShadowCopyFiles
  nameWithType: AppDomainSetup.ShadowCopyFiles
  fullName: System.AppDomainSetup.ShadowCopyFiles
- uid: System.AppDomainSetup.TargetFrameworkName
  parent: System.AppDomainSetup
  isExternal: false
  name: TargetFrameworkName
  nameWithType: AppDomainSetup.TargetFrameworkName
  fullName: System.AppDomainSetup.TargetFrameworkName
- uid: System.AppDomainSetup.#ctor*
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainSetup
  nameWithType: AppDomainSetup.AppDomainSetup
- uid: System.AppDomainSetup.ActivationArguments*
  parent: System.AppDomainSetup
  isExternal: false
  name: ActivationArguments
  nameWithType: AppDomainSetup.ActivationArguments
- uid: System.AppDomainSetup.AppDomainInitializer*
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainInitializer
  nameWithType: AppDomainSetup.AppDomainInitializer
- uid: System.AppDomainSetup.AppDomainInitializerArguments*
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainInitializerArguments
  nameWithType: AppDomainSetup.AppDomainInitializerArguments
- uid: System.AppDomainSetup.AppDomainManagerAssembly*
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainManagerAssembly
  nameWithType: AppDomainSetup.AppDomainManagerAssembly
- uid: System.AppDomainSetup.AppDomainManagerType*
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainManagerType
  nameWithType: AppDomainSetup.AppDomainManagerType
- uid: System.AppDomainSetup.ApplicationBase*
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationBase
  nameWithType: AppDomainSetup.ApplicationBase
- uid: System.AppDomainSetup.ApplicationName*
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationName
  nameWithType: AppDomainSetup.ApplicationName
- uid: System.AppDomainSetup.ApplicationTrust*
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationTrust
  nameWithType: AppDomainSetup.ApplicationTrust
- uid: System.AppDomainSetup.CachePath*
  parent: System.AppDomainSetup
  isExternal: false
  name: CachePath
  nameWithType: AppDomainSetup.CachePath
- uid: System.AppDomainSetup.ConfigurationFile*
  parent: System.AppDomainSetup
  isExternal: false
  name: ConfigurationFile
  nameWithType: AppDomainSetup.ConfigurationFile
- uid: System.AppDomainSetup.DisallowApplicationBaseProbing*
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowApplicationBaseProbing
  nameWithType: AppDomainSetup.DisallowApplicationBaseProbing
- uid: System.AppDomainSetup.DisallowBindingRedirects*
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowBindingRedirects
  nameWithType: AppDomainSetup.DisallowBindingRedirects
- uid: System.AppDomainSetup.DisallowCodeDownload*
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowCodeDownload
  nameWithType: AppDomainSetup.DisallowCodeDownload
- uid: System.AppDomainSetup.DisallowPublisherPolicy*
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowPublisherPolicy
  nameWithType: AppDomainSetup.DisallowPublisherPolicy
- uid: System.AppDomainSetup.DynamicBase*
  parent: System.AppDomainSetup
  isExternal: false
  name: DynamicBase
  nameWithType: AppDomainSetup.DynamicBase
- uid: System.AppDomainSetup.GetConfigurationBytes*
  parent: System.AppDomainSetup
  isExternal: false
  name: GetConfigurationBytes
  nameWithType: AppDomainSetup.GetConfigurationBytes
- uid: System.AppDomainSetup.LicenseFile*
  parent: System.AppDomainSetup
  isExternal: false
  name: LicenseFile
  nameWithType: AppDomainSetup.LicenseFile
- uid: System.AppDomainSetup.LoaderOptimization*
  parent: System.AppDomainSetup
  isExternal: false
  name: LoaderOptimization
  nameWithType: AppDomainSetup.LoaderOptimization
- uid: System.AppDomainSetup.PartialTrustVisibleAssemblies*
  parent: System.AppDomainSetup
  isExternal: false
  name: PartialTrustVisibleAssemblies
  nameWithType: AppDomainSetup.PartialTrustVisibleAssemblies
- uid: System.AppDomainSetup.PrivateBinPath*
  parent: System.AppDomainSetup
  isExternal: false
  name: PrivateBinPath
  nameWithType: AppDomainSetup.PrivateBinPath
- uid: System.AppDomainSetup.PrivateBinPathProbe*
  parent: System.AppDomainSetup
  isExternal: false
  name: PrivateBinPathProbe
  nameWithType: AppDomainSetup.PrivateBinPathProbe
- uid: System.AppDomainSetup.SandboxInterop*
  parent: System.AppDomainSetup
  isExternal: false
  name: SandboxInterop
  nameWithType: AppDomainSetup.SandboxInterop
- uid: System.AppDomainSetup.SetCompatibilitySwitches*
  parent: System.AppDomainSetup
  isExternal: false
  name: SetCompatibilitySwitches
  nameWithType: AppDomainSetup.SetCompatibilitySwitches
- uid: System.AppDomainSetup.SetConfigurationBytes*
  parent: System.AppDomainSetup
  isExternal: false
  name: SetConfigurationBytes
  nameWithType: AppDomainSetup.SetConfigurationBytes
- uid: System.AppDomainSetup.SetNativeFunction*
  parent: System.AppDomainSetup
  isExternal: false
  name: SetNativeFunction
  nameWithType: AppDomainSetup.SetNativeFunction
- uid: System.AppDomainSetup.ShadowCopyDirectories*
  parent: System.AppDomainSetup
  isExternal: false
  name: ShadowCopyDirectories
  nameWithType: AppDomainSetup.ShadowCopyDirectories
- uid: System.AppDomainSetup.ShadowCopyFiles*
  parent: System.AppDomainSetup
  isExternal: false
  name: ShadowCopyFiles
  nameWithType: AppDomainSetup.ShadowCopyFiles
- uid: System.AppDomainSetup.TargetFrameworkName*
  parent: System.AppDomainSetup
  isExternal: false
  name: TargetFrameworkName
  nameWithType: AppDomainSetup.TargetFrameworkName
