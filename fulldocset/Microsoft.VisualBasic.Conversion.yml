### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Conversion
  id: Conversion
  children:
  - Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  - Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  - Microsoft.VisualBasic.Conversion.ErrorToString
  - Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  - Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  - Microsoft.VisualBasic.Conversion.Fix(System.Double)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  - Microsoft.VisualBasic.Conversion.Fix(System.Object)
  - Microsoft.VisualBasic.Conversion.Fix(System.Single)
  - Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  - Microsoft.VisualBasic.Conversion.Hex(System.Object)
  - Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  - Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  - Microsoft.VisualBasic.Conversion.Int(System.Double)
  - Microsoft.VisualBasic.Conversion.Int(System.Int16)
  - Microsoft.VisualBasic.Conversion.Int(System.Int32)
  - Microsoft.VisualBasic.Conversion.Int(System.Int64)
  - Microsoft.VisualBasic.Conversion.Int(System.Object)
  - Microsoft.VisualBasic.Conversion.Int(System.Single)
  - Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  - Microsoft.VisualBasic.Conversion.Oct(System.Object)
  - Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  - Microsoft.VisualBasic.Conversion.Str(System.Object)
  - Microsoft.VisualBasic.Conversion.Val(System.Char)
  - Microsoft.VisualBasic.Conversion.Val(System.Object)
  - Microsoft.VisualBasic.Conversion.Val(System.String)
  langs:
  - csharp
  name: Conversion
  nameWithType: Conversion
  fullName: Microsoft.VisualBasic.Conversion
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Conversion&quot; name=&quot;Conversion&quot; href=&quot;&quot;> </xref>モジュールには、さまざまな変換操作を実行する手順が含まれています。"
  remarks: "このモジュールは、Visual Basic 言語のキーワードとランタイム ライブラリ メンバーを&10; 進数に変換するサポートを別の数値の文字列、数値、文字列および&1; つのデータを入力します。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Conversion
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  id: CTypeDynamic(System.Object,System.Type)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: CTypeDynamic(Object,Type)
  nameWithType: Conversion.CTypeDynamic(Object,Type)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "オブジェクトを指定した型に変換します。"
  remarks: "`CTypeDynamic`メソッドとして渡されたオブジェクトの変換、`Expression`パラメーターで指定された型を`TargetType`パラメーター。 オブジェクトがオブジェクトを動的オブジェクトである場合、`CTypeDynamic`メソッドには、使用できる動的な変換が適用されます。       `CTypeDynamic`メソッドには、オブジェクト自体で定義された変換セマンティクスに従っての動的変換が適用されます。 動的オブジェクトから継承している場合<xref:System.Dynamic.DynamicObject>、`CTypeDynamic`メソッドが最初に、ユーザー定義の静的な変換を使用して、変換を実行しようとします</xref:System.Dynamic.DynamicObject>。 ユーザー定義の静的な変換に失敗した場合、`CTypeDynamic`メソッドは動的な変換を使用して変換を実行しようとしています。 動的オブジェクトを実装する場合<xref:System.Dynamic.IDynamicMetaObjectProvider>、`CTypeDynamic`メソッドでは、ユーザー定義の静的な変換での動的変換を優先順位が得られます</xref:System.Dynamic.IDynamicMetaObjectProvider>。"
  example:
  - "The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.  \n  \n```vb#  \nImports System.Dynamic  \n  \nModule Module1  \n    Sub Main()  \n        Dim dyn As Object = New SampleDynamicObject  \n        Dim sampleString = CTypeDynamic(dyn, GetType(String))  \n        Console.WriteLine(sampleString)  \n    End Sub  \nEnd Module  \n  \nClass SampleDynamicObject  \n    Inherits DynamicObject  \n  \n    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  \n                                         ByRef result As Object) As Boolean  \n  \n        If binder.Type = GetType(String) Then  \n            result = \"Sample String\"  \n            Return True  \n        End If  \n  \n        Return False  \n    End Function  \nEnd Class  \n```"
  syntax:
    content: public static object CTypeDynamic (object Expression, Type TargetType);
    parameters:
    - id: Expression
      type: System.Object
      description: "変換するオブジェクト。"
    - id: TargetType
      type: System.Type
      description: "型、オブジェクトに変換します。"
    return:
      type: System.Object
      description: "オブジェクトが実行時に、要求されたターゲットの種類。"
  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  id: CTypeDynamic``1(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: CTypeDynamic(Object)
  nameWithType: Conversion.CTypeDynamic(Object)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: public static TargetType CTypeDynamic<TargetType> (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "追加します。"
    return:
      type: TargetType
      description: "追加します。"
  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.ErrorToString
  id: ErrorToString
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: ErrorToString()
  nameWithType: Conversion.ErrorToString()
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "特定のエラー番号に対応するエラー メッセージを返します。"
  remarks: "`ErrorToString`関数のプロパティの設定を調べ、`Err`を最新の実行時エラーを識別するオブジェクト。 戻り値、`ErrorToString`に対応する関数、`Description`のプロパティ、`Err`オブジェクト。 実行時エラーが発生していない場合`ErrorToString`長さ&0; の文字列を返します (&quot;&quot;) です。       Visual basic 6.0 とそれ以前のバージョンではこの機能によって提供された、`Error`関数。"
  example:
  - "The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \n  \n [!code-vb[VbVbalrCatRef#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._1_1.vb)]"
  syntax:
    content: public static string ErrorToString ();
    parameters: []
    return:
      type: System.String
      description: "最新の実行時エラーに対応するエラー メッセージ。"
  overload: Microsoft.VisualBasic.Conversion.ErrorToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ErrorNumber</code>範囲外です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  id: ErrorToString(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: ErrorToString(Int32)
  nameWithType: Conversion.ErrorToString(Int32)
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "特定のエラー番号に対応するエラー メッセージを返します。"
  remarks: "`ErrorToString`関数のプロパティの設定を調べ、`Err`を最新の実行時エラーを識別するオブジェクト。 戻り値、`ErrorToString`に対応する関数、`Description`のプロパティ、`Err`オブジェクト。 場合`ErrorNumber`有効なエラー番号が定義されていないが`ErrorToString`文字列を返します`&quot;Application-defined or object-defined error.&quot;`場合`ErrorNumber`が有効でないエラーが発生します。 場合`ErrorNumber`を省略すると、メッセージ、一番最近に対応する実行時エラーが返されます。 実行時エラーが発生していない場合または`ErrorNumber`0 の場合は、`ErrorToString`長さ 0 の文字列を返します (&quot;&quot;) です。       Visual basic 6.0 とそれ以前のバージョンではこの機能によって提供された、`Error`関数。"
  example:
  - "The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \n  \n [!code-vb[VbVbalrCatRef#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._191_1.vb)]"
  syntax:
    content: public static string ErrorToString (int ErrorNumber);
    parameters:
    - id: ErrorNumber
      type: System.Int32
      description: "任意。 任意の有効なエラー番号。"
    return:
      type: System.String
      description: "特定のエラー番号に対応するエラー メッセージ。"
  overload: Microsoft.VisualBasic.Conversion.ErrorToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ErrorNumber</code>範囲外です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  id: Fix(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Decimal)
  nameWithType: Conversion.Fix(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static decimal Fix (decimal Number);
    parameters:
    - id: Number
      type: System.Decimal
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Decimal
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)
  id: Fix(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Double)
  nameWithType: Conversion.Fix(Double)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static double Fix (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Double
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  id: Fix(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int16)
  nameWithType: Conversion.Fix(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static short Fix (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Int16
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  id: Fix(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int32)
  nameWithType: Conversion.Fix(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static int Fix (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Int32
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  id: Fix(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int64)
  nameWithType: Conversion.Fix(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static long Fix (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Int64
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)
  id: Fix(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Object)
  nameWithType: Conversion.Fix(Object)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static object Fix (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Object
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)
  id: Fix(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Single)
  nameWithType: Conversion.Fix(Single)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static float Fix (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Single
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  id: Hex(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Byte)
  nameWithType: Conversion.Hex(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&16; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |If `Number` is|返します&16; 進数の |。  |空 |ゼロ (0) |  |任意の数値 |最大&16; 個の&16; 進文字 |      適切な範囲の数値の前に直接&16; 進数を表すことができる`&H`です。 たとえば、 `&H10` 16 進表記で 16 進数を表します。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._208_1.vb)]"
  syntax:
    content: public static string Hex (byte Number);
    parameters:
    - id: Number
      type: System.Byte
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&16; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  id: Hex(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int16)
  nameWithType: Conversion.Hex(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&16; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |If `Number` is|返します&16; 進数の |。  |空 |ゼロ (0) |  |任意の数値 |最大&16; 個の&16; 進文字 |      適切な範囲の数値の前に直接&16; 進数を表すことができる`&H`です。 たとえば、 `&H10` 16 進表記で 16 進数を表します。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._128_1.vb)]"
  syntax:
    content: public static string Hex (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&16; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  id: Hex(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int32)
  nameWithType: Conversion.Hex(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&16; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |If `Number` is|返します&16; 進数の |。  |空 |ゼロ (0) |  |任意の数値 |最大&16; 個の&16; 進文字 |      適切な範囲の数値の前に直接&16; 進数を表すことができる`&H`です。 たとえば、 `&H10` 16 進表記で 16 進数を表します。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._102_1.vb)]"
  syntax:
    content: public static string Hex (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&16; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  id: Hex(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int64)
  nameWithType: Conversion.Hex(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&16; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |If `Number` is|返します&16; 進数の |。  |空 |ゼロ (0) |  |任意の数値 |最大&16; 個の&16; 進文字 |      適切な範囲の数値の前に直接&16; 進数を表すことができる`&H`です。 たとえば、 `&H10` 16 進表記で 16 進数を表します。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._75_1.vb)]"
  syntax:
    content: public static string Hex (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&16; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)
  id: Hex(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Object)
  nameWithType: Conversion.Hex(Object)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&16; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |If `Number` is|返します&16; 進数の |。  |空 |ゼロ (0) |  |任意の数値 |最大&16; 個の&16; 進文字 |      適切な範囲の数値の前に直接&16; 進数を表すことができる`&H`です。 たとえば、 `&H10` 16 進表記で 16 進数を表します。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._53_1.vb)]"
  syntax:
    content: public static string Hex (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&16; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  id: Hex(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(SByte)
  nameWithType: Conversion.Hex(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&16; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |If `Number` is|返します&16; 進数の |。  |空 |ゼロ (0) |  |任意の数値 |最大&16; 個の&16; 進文字 |      適切な範囲の数値の前に直接&16; 進数を表すことができる`&H`です。 たとえば、 `&H10` 16 進表記で 16 進数を表します。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._15_1.vb)]"
  syntax:
    content: public static string Hex (sbyte Number);
    parameters:
    - id: Number
      type: System.SByte
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&16; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  id: Hex(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt16)
  nameWithType: Conversion.Hex(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&16; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |If `Number` is|返します&16; 進数の |。  |空 |ゼロ (0) |  |任意の数値 |最大&16; 個の&16; 進文字 |      適切な範囲の数値の前に直接&16; 進数を表すことができる`&H`です。 たとえば、 `&H10` 16 進表記で 16 進数を表します。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._118_1.vb)]"
  syntax:
    content: public static string Hex (ushort Number);
    parameters:
    - id: Number
      type: System.UInt16
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&16; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  id: Hex(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt32)
  nameWithType: Conversion.Hex(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&16; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |If `Number` is|返します&16; 進数の |。  |空 |ゼロ (0) |  |任意の数値 |最大&16; 個の&16; 進文字 |      適切な範囲の数値の前に直接&16; 進数を表すことができる`&H`です。 たとえば、 `&H10` 16 進表記で 16 進数を表します。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._182_1.vb)]"
  syntax:
    content: public static string Hex (uint Number);
    parameters:
    - id: Number
      type: System.UInt32
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&16; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  id: Hex(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt64)
  nameWithType: Conversion.Hex(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&16; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |If `Number` is|返します&16; 進数の |。  |空 |ゼロ (0) |  |任意の数値 |最大&16; 個の&16; 進文字 |      適切な範囲の数値の前に直接&16; 進数を表すことができる`&H`です。 たとえば、 `&H10` 16 進表記で 16 進数を表します。"
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._119_1.vb)]"
  syntax:
    content: public static string Hex (ulong Number);
    parameters:
    - id: Number
      type: System.UInt64
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&16; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  id: Int(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Decimal)
  nameWithType: Conversion.Int(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static decimal Int (decimal Number);
    parameters:
    - id: Number
      type: System.Decimal
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Decimal
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)
  id: Int(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Double)
  nameWithType: Conversion.Int(Double)
  fullName: Microsoft.VisualBasic.Conversion.Int(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static double Int (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Double
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)
  id: Int(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int16)
  nameWithType: Conversion.Int(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static short Int (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Int16
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)
  id: Int(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int32)
  nameWithType: Conversion.Int(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static int Int (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Int32
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)
  id: Int(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int64)
  nameWithType: Conversion.Int(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static long Int (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Int64
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)
  id: Int(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Object)
  nameWithType: Conversion.Int(Object)
  fullName: Microsoft.VisualBasic.Conversion.Int(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static object Int (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Object
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)
  id: Int(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Single)
  nameWithType: Conversion.Int(Single)
  fullName: Microsoft.VisualBasic.Conversion.Int(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の整数部分を返します。"
  remarks: "両方の`Int`と`Fix`関数の小数部を削除する`Number`し、結果の整数値を返します。       間の違い`Int`と`Fix`関数がいる場合`Number`が負の値、`Int`以下に負の整数を返します`Number`であるのに対し`Fix`より大きいか等しいに負の整数を返します`Number`です。 たとえば、 `Int` -8.4-9 を指定して`Fix`-8.4-8 を指定します。       `Fix(number)`等価します。`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static float Int (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: "必須。 型の数値の<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>または有効な数値式です。 場合`Number`含む<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>が返されます。"
    return:
      type: System.Single
      description: "数値の整数部分を返します。"
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "数が指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "番号は、数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  id: Oct(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Byte)
  nameWithType: Conversion.Oct(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&8; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |かどうかは番号が |年 10 月を返します |  |空 |ゼロ (0) |  |その他の任意の数 |8 進文字の最大 22 |      適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。 たとえば、 `&O10` 10 進数 8 進表記です。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._109_1.vb)]"
  syntax:
    content: public static string Oct (byte Number);
    parameters:
    - id: Number
      type: System.Byte
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&8; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  id: Oct(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int16)
  nameWithType: Conversion.Oct(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&8; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |かどうかは番号が |年 10 月を返します |  |空 |ゼロ (0) |  |その他の任意の数 |8 進文字の最大 22 |      適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。 たとえば、 `&O10` 10 進数 8 進表記です。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._151_1.vb)]"
  syntax:
    content: public static string Oct (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&8; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  id: Oct(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int32)
  nameWithType: Conversion.Oct(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&8; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |かどうかは番号が |年 10 月を返します |  |空 |ゼロ (0) |  |その他の任意の数 |8 進文字の最大 22 |      適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。 たとえば、 `&O10` 10 進数 8 進表記です。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._36_1.vb)]"
  syntax:
    content: public static string Oct (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&8; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  id: Oct(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int64)
  nameWithType: Conversion.Oct(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&8; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |かどうかは番号が |年 10 月を返します |  |空 |ゼロ (0) |  |その他の任意の数 |8 進文字の最大 22 |      適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。 たとえば、 `&O10` 10 進数 8 進表記です。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._217_1.vb)]"
  syntax:
    content: public static string Oct (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&8; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)
  id: Oct(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Object)
  nameWithType: Conversion.Oct(Object)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&8; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |かどうかは番号が |年 10 月を返します |  |空 |ゼロ (0) |  |その他の任意の数 |8 進文字の最大 22 |      適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。 たとえば、 `&O10` 10 進数 8 進表記です。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._233_1.vb)]"
  syntax:
    content: public static string Oct (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&8; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  id: Oct(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(SByte)
  nameWithType: Conversion.Oct(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&8; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |かどうかは番号が |年 10 月を返します |  |空 |ゼロ (0) |  |その他の任意の数 |8 進文字の最大 22 |      適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。 たとえば、 `&O10` 10 進数 8 進表記です。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._16_1.vb)]"
  syntax:
    content: public static string Oct (sbyte Number);
    parameters:
    - id: Number
      type: System.SByte
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&8; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  id: Oct(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt16)
  nameWithType: Conversion.Oct(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&8; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |かどうかは番号が |年 10 月を返します |  |空 |ゼロ (0) |  |その他の任意の数 |8 進文字の最大 22 |      適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。 たとえば、 `&O10` 10 進数 8 進表記です。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._28_1.vb)]"
  syntax:
    content: public static string Oct (ushort Number);
    parameters:
    - id: Number
      type: System.UInt16
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&8; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  id: Oct(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt32)
  nameWithType: Conversion.Oct(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&8; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |かどうかは番号が |年 10 月を返します |  |空 |ゼロ (0) |  |その他の任意の数 |8 進文字の最大 22 |      適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。 たとえば、 `&O10` 10 進数 8 進表記です。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._240_1.vb)]"
  syntax:
    content: public static string Oct (uint Number);
    parameters:
    - id: Number
      type: System.UInt32
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&8; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  id: Oct(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt64)
  nameWithType: Conversion.Oct(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値の&8; 進数の値を表す文字列を返します。"
  remarks: "場合`Number`整数を指定されていない評価される前に、最も近い整数に丸められます。      |||  |-|-|  |かどうかは番号が |年 10 月を返します |  |空 |ゼロ (0) |  |その他の任意の数 |8 進文字の最大 22 |      適切な範囲の数値の前に直接 8 進数を表すことができる`&O`です。 たとえば、 `&O10` 10 進数 8 進表記です。"
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._219_1.vb)]"
  syntax:
    content: public static string Oct (ulong Number);
    parameters:
    - id: Number
      type: System.UInt64
      description: "必須。 有効な数値式または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "数値の&8; 進数の値を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)
  id: Str(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Str(Object)
  nameWithType: Conversion.Str(Object)
  fullName: Microsoft.VisualBasic.Conversion.Str(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>数値の形式です。"
  remarks: "符号の先頭にスペースが予約されています常に数値が文字列に変換されると、`Number`です。 場合`Number`が正の値、返される文字列には、先頭にスペースが含まれているし、プラス記号を暗黙的に指定します。 マイナス記号 (-) と主要な領域がない、負の値が含まれます。       使用して、`Format`数値を日付、時刻、または通貨として、または他のユーザー定義形式に変換する関数。 異なり、 `Str` 、関数、`Format`関数がの符号の先頭にスペースを含まない`Number`です。      > [!NOTE] >、`Str`関数は、ピリオドだけを認識 (`.`) は有効な小数点区切り文字として。 (たとえば、国際対応のアプリケーションで別の桁区切り記号を使用している場合を使用して、`CStr`または`Format`数値を文字列に変換する関数。 特定のカルチャの数値の文字列形式を取得するには、数値を使用`ToString(IFormatProvider)`メソッドです。 たとえば、使用して<xref:System.Double.ToString%2A>型の値を変換するときに`Double`を文字列にします</xref:System.Double.ToString%2A>。"
  example:
  - "This example uses the `Str` function to return a `String` representation of a number. When a positive number is converted to a string, a leading space is always reserved for its sign.  \n  \n [!code-vb[VbVbalrStrings#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._24_1.vb)]"
  syntax:
    content: public static string Str (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "必須。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>を含む任意の有効な数値式です。"
    return:
      type: System.String
      description: "返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>数値の形式です。"
  overload: Microsoft.VisualBasic.Conversion.Str*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>指定されていません。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>Number</code>数値型ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)
  id: Val(System.Char)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(Char)
  nameWithType: Conversion.Val(Char)
  fullName: Microsoft.VisualBasic.Conversion.Val(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "適切な型の数値の値として文字列に含まれる数値を返します。"
  remarks: "`Val`関数では、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。 シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。 ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の&8; 進数) と`&H`(の&16; 進数)。 空白、タブ、および改行文字は、引数から削除されます。       次の呼び出しでは、1615198 という値を返します。      ```      Val(&quot; 1615 198th Street N.E.&quot;)    ```次の呼び出しでは、10 進値-1 を返します。      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]>、`Val`関数は、ピリオドだけを認識 (`.`) は有効な小数点区切り文字として。 国際対応のアプリケーションと同様に、別の桁区切り記号が使用すると使用`CDbl`または`CInt`代わりに、文字列を数値に変換するためです。 特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して`Parse(String, IFormatProvider)`メソッドです。 たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=fullName>を文字列に変換するときに、 `Double`</xref:System.Double.Parse%2A?displayProperty=fullName> 。      > [!NOTE] >、<xref:System.InvalidCastException>特定一般的でない数値の形式への応答での例外が発生する可能性があります</xref:System.InvalidCastException>。 たとえば、次のコードでは、この例外を発生させます。   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> として書式設定された数の間での競合、`Double`と`Integer`と`Long`型文字は、文字列に含まれていない場合、コンパイラによってキャッチとします。   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._65_1.vb)]"
  syntax:
    content: public static int Val (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式、 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>変数、または<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>値。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、その値に変換できなければなりません<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>または<xref:System.ArgumentException>エラーが発生します</xref:System.ArgumentException>。"
    return:
      type: System.Int32
      description: "適切な型の数値の値として文字列に含まれる数値を返します。"
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>大きすぎます。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code><xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>に変換可能ではない式を入力<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)
  id: Val(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(Object)
  nameWithType: Conversion.Val(Object)
  fullName: Microsoft.VisualBasic.Conversion.Val(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "適切な型の数値の値として文字列に含まれる数値を返します。"
  remarks: "`Val`関数では、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。 シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。 ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の&8; 進数) と`&H`(の&16; 進数)。 空白、タブ、および改行文字は、引数から削除されます。       次の呼び出しでは、値 1234123 を返しますを返します。      ```      Val(&quot; 1234 123th Street N.E.&quot;)    ```次の呼び出しでは、10 進値-1 を返します。      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]>、`Val`関数は、ピリオドだけを認識 (`.`) は有効な小数点区切り文字として。 国際対応のアプリケーションと同様に、その他の&10; 進区切り記号が使用すると使用`CDbl`または`CInt`代わりに、文字列を数値に変換するためです。 特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して`Parse(String, IFormatProvider)`メソッドです。 たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=fullName>を文字列に変換するときに、 `Double`</xref:System.Double.Parse%2A?displayProperty=fullName> 。      > [!NOTE] >、<xref:System.InvalidCastException>特定一般的でない数値の形式への応答での例外が発生する可能性があります</xref:System.InvalidCastException>。 たとえば、次のコードでは、この例外を発生させます。   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> として書式設定された数の間での競合、`Double`と`Integer`と`Long`型文字は、競合は、文字列に含まれていなかった場合、コンパイラによってキャッチはします。   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._98_1.vb)]"
  syntax:
    content: public static double Val (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式、 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>変数、または<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>値。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、その値に変換できなければなりません<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>または<xref:System.ArgumentException>エラーが発生します</xref:System.ArgumentException>。"
    return:
      type: System.Double
      description: "適切な型の数値の値として文字列に含まれる数値を返します。"
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>大きすぎます。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code><xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>に変換可能ではない式を入力<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.String)
  id: Val(System.String)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(String)
  nameWithType: Conversion.Val(String)
  fullName: Microsoft.VisualBasic.Conversion.Val(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "適切な型の数値の値として文字列に含まれる数値を返します。"
  remarks: "`Val`関数では、数値の一部として認識できない最初の文字で文字列の読み取りを停止します。 シンボルとドル記号やコンマなどの数値の一部と見なされる文字は認識されません。 ただし、関数は、基数のプレフィックスを認識しません。 `&O` (の&8; 進数) と`&H`(の&16; 進数)。 空白、タブ、および改行文字は、引数から削除されます。       次の呼び出しでは、値 1234123 を返しますを返します。      ```      Val(&quot; 1234 123th Street N.E.&quot;)    ```次の呼び出しでは、10 進値-1 を返します。      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]>、`Val`関数は、ピリオドだけを認識 (`.`) は有効な小数点区切り文字として。 国際対応のアプリケーションと同様に、その他の&10; 進区切り記号が使用すると使用`CDbl`または`CInt`代わりに、文字列を数値に変換するためです。 特定のカルチャの数値の文字列形式を数値に変換する数値型を使用して`Parse(String, IFormatProvider)`メソッドです。 たとえば、使用して<xref:System.Double.Parse%2A?displayProperty=fullName>を文字列に変換するときに、 `Double`</xref:System.Double.Parse%2A?displayProperty=fullName> 。      > [!NOTE] >、<xref:System.InvalidCastException>特定一般的でない数値の形式への応答での例外が発生する可能性があります</xref:System.InvalidCastException>。 たとえば、次のコードでは、この例外を発生させます。   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> として書式設定された数の間での競合、`Double`と`Integer`と`Long`型文字は、競合は、文字列に含まれていなかった場合、コンパイラによってキャッチはします。   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._227_1.vb)]"
  syntax:
    content: public static double Val (string InputStr);
    parameters:
    - id: InputStr
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式、 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>変数、または<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>値。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、その値に変換できなければなりません<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>または<xref:System.ArgumentException>エラーが発生します</xref:System.ArgumentException>。"
    return:
      type: System.Double
      description: "適切な型の数値の値として文字列に含まれる数値を返します。"
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>大きすぎます。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code><xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>に変換可能ではない式を入力<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.OverflowException
  isExternal: true
  name: System.OverflowException
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic(Object,Type)
  nameWithType: Conversion.CTypeDynamic(Object,Type)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic(Object)
  nameWithType: Conversion.CTypeDynamic(Object)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)
- uid: TargetType
  isExternal: true
  name: TargetType
  nameWithType: TargetType
  fullName: TargetType
- uid: Microsoft.VisualBasic.Conversion.ErrorToString
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString()
  nameWithType: Conversion.ErrorToString()
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString(Int32)
  nameWithType: Conversion.ErrorToString(Int32)
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Decimal)
  nameWithType: Conversion.Fix(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Double)
  nameWithType: Conversion.Fix(Double)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int16)
  nameWithType: Conversion.Fix(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int32)
  nameWithType: Conversion.Fix(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int64)
  nameWithType: Conversion.Fix(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Object)
  nameWithType: Conversion.Fix(Object)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Single)
  nameWithType: Conversion.Fix(Single)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Byte)
  nameWithType: Conversion.Hex(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int16)
  nameWithType: Conversion.Hex(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int32)
  nameWithType: Conversion.Hex(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int64)
  nameWithType: Conversion.Hex(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Object)
  nameWithType: Conversion.Hex(Object)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(SByte)
  nameWithType: Conversion.Hex(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt16)
  nameWithType: Conversion.Hex(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt32)
  nameWithType: Conversion.Hex(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt64)
  nameWithType: Conversion.Hex(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Decimal)
  nameWithType: Conversion.Int(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Double)
  nameWithType: Conversion.Int(Double)
  fullName: Microsoft.VisualBasic.Conversion.Int(Double)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int16)
  nameWithType: Conversion.Int(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int32)
  nameWithType: Conversion.Int(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int64)
  nameWithType: Conversion.Int(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Object)
  nameWithType: Conversion.Int(Object)
  fullName: Microsoft.VisualBasic.Conversion.Int(Object)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Single)
  nameWithType: Conversion.Int(Single)
  fullName: Microsoft.VisualBasic.Conversion.Int(Single)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Byte)
  nameWithType: Conversion.Oct(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int16)
  nameWithType: Conversion.Oct(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int32)
  nameWithType: Conversion.Oct(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int64)
  nameWithType: Conversion.Oct(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Object)
  nameWithType: Conversion.Oct(Object)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(SByte)
  nameWithType: Conversion.Oct(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt16)
  nameWithType: Conversion.Oct(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt32)
  nameWithType: Conversion.Oct(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt64)
  nameWithType: Conversion.Oct(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)
- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Str(Object)
  nameWithType: Conversion.Str(Object)
  fullName: Microsoft.VisualBasic.Conversion.Str(Object)
- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(Char)
  nameWithType: Conversion.Val(Char)
  fullName: Microsoft.VisualBasic.Conversion.Val(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(Object)
  nameWithType: Conversion.Val(Object)
  fullName: Microsoft.VisualBasic.Conversion.Val(Object)
- uid: Microsoft.VisualBasic.Conversion.Val(System.String)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(String)
  nameWithType: Conversion.Val(String)
  fullName: Microsoft.VisualBasic.Conversion.Val(String)
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic
  nameWithType: Conversion.CTypeDynamic
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic<TargetType>
  nameWithType: Conversion.CTypeDynamic<TargetType>
- uid: Microsoft.VisualBasic.Conversion.ErrorToString*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString
  nameWithType: Conversion.ErrorToString
- uid: Microsoft.VisualBasic.Conversion.Fix*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix
  nameWithType: Conversion.Fix
- uid: Microsoft.VisualBasic.Conversion.Hex*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex
  nameWithType: Conversion.Hex
- uid: Microsoft.VisualBasic.Conversion.Int*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int
  nameWithType: Conversion.Int
- uid: Microsoft.VisualBasic.Conversion.Oct*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct
  nameWithType: Conversion.Oct
- uid: Microsoft.VisualBasic.Conversion.Str*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Str
  nameWithType: Conversion.Str
- uid: Microsoft.VisualBasic.Conversion.Val*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val
  nameWithType: Conversion.Val
