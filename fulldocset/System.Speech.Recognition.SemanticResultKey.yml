### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultKey
  id: SemanticResultKey
  children:
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  - System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
  type: Class
  summary: "String キーとを関連付ける<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>を定義する値<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>オブジェクト。"
  remarks: "System.Speech のセマンティックの式の基本単位は、 <xref:System.Speech.Recognition.SemanticValue>、これは、キー/値ペア</xref:System.Speech.Recognition.SemanticValue>。       SemanticResultKey オブジェクトを使用してタグを付ける<xref:System.Speech.Recognition.SemanticResultValue>インスタンスに含まれている<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトし、文字列の値から簡単にアクセスするように<xref:System.Speech.Recognition.SemanticValue>認識上のインスタンス</xref:System.Speech.Recognition.SemanticValue></xref:System.Speech.Recognition.GrammarBuilder></xref:System.Speech.Recognition.SemanticResultValue>。       使用することができます<xref:System.Speech.Recognition.SemanticResultValue>と組み合わせて、SemanticResultKey オブジェクト<xref:System.Speech.Recognition.GrammarBuilder>と<xref:System.Speech.Recognition.Choices>、オブジェクトの音声認識の文法のセマンティックの構造を定義します</xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder></xref:System.Speech.Recognition.SemanticResultValue>。 認識の結果のセマンティクス情報にアクセスするには、 <xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> <xref:System.Speech.Recognition.RecognizedPhrase>。</xref:System.Speech.Recognition.RecognizedPhrase>プロパティ</xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>を通じて</xref:System.Speech.Recognition.SemanticValue>のインスタンスを取得します。       使用しての詳細については<xref:System.Speech.Recognition.SemanticResultValue>SemanticResultKey オブジェクトを参照してください、 [Understanding SemanticResultValue と SemanticResultKey オブジェクト](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)と[、SemanticResultKey を使用して、SemanticResultValue を抽出する](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa)で、[システム音声プログラミング ガイド .NET Framework 4.0 用](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043)</xref:System.Speech.Recognition.SemanticResultValue>。"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n    RecognitionResult result=eventArgs.Result;  \n  \n    if (!semantics.ContainsKey(\"Password\"))   \n    {  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n    }  \n    else   \n    {  \n      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  \n      MemoryStream pwdMemoryStream = new MemoryStream();  \n      pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n      if (!IsValidPwd(pwdMemoryStream))   \n      {  \n        string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n        pwdAudio.WriteToWaveStream(waveStream);  \n        waveStream.Flush();  \n        waveStream.Close();  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n  \n      }  \n    }  \n  };  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")]

      public class SemanticResultKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  id: '#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "1 つまたは複数をセマンティック キーの割り当て<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>音声認識の文法の作成に使用されるオブジェクト。"
  remarks: "暗黙的な変換は、によって、`builders`引数サポート<xref:System.Speech.Recognition.SemanticResultValue>、 <xref:System.Speech.Recognition.SemanticResultKey>、 <xref:System.Speech.Recognition.Choices>、および<xref:System.String>オブジェクトも</xref:System.String></xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.SemanticResultKey></xref:System.Speech.Recognition.SemanticResultValue>。 暗黙的な変換の詳細については、 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>。</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>を参照してください。       認識操作を実行するときに、<xref:System.Speech.Recognition.GrammarBuilder>で提供されるオブジェクト、`builders`引数はシーケンシャルとして扱われます</xref:System.Speech.Recognition.GrammarBuilder>。 たとえば場合、次<xref:System.Speech.Recognition.SemanticResultValue>構築に使用される、 <xref:System.Speech.Recognition.Grammar>、認識エンジンへの入力が認識できるようにするシーケンスの&quot;the quick brown fox&quot;という語を含める必要があります</xref:System.Speech.Recognition.Grammar></xref:System.Speech.Recognition.SemanticResultValue>。      ```c#   SemanticResultKey stringTest=new SemanticResultKey(       &quot;stringTest&quot;, new GrammarBuilder[] {       new GrammarBuilder(&quot;the&quot;),       new GrammarBuilder(&quot;quick&quot;),       new GrammarBuilder(&quot;brown&quot;),       new GrammarBuilder(&quot;fox&quot;)});   ````semanticResultKey`引数には、使用されるタグが含まれていますにアクセスする、<xref:System.Speech.Recognition.SemanticValue>が返される可能性があります。</xref:System.Speech.Recognition.SemanticValue> 。       <xref:System.Speech.Recognition.SemanticValue.Value%2A>の<xref:System.Speech.Recognition.SemanticValue>によって決定されます、<xref:System.Speech.Recognition.GrammarBuilder>によって提供されるインスタンス、`builders`パラメーター</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> 。       場合、<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトの定義インスタンスを含まない<xref:System.Speech.Recognition.SemanticResultValue>の値、<xref:System.Speech.Recognition.SemanticValue>は`null`</xref:System.Speech.Recognition.SemanticValue></xref:System.Speech.Recognition.SemanticResultValue></xref:System.Speech.Recognition.GrammarBuilder>。       場合、<xref:System.Speech.Recognition.GrammarBuilder>で提供されるオブジェクト、`builders`パラメーターを提供、タグなし (に関連付けられていない、<xref:System.Speech.Recognition.SemanticResultKey>オブジェクト) <xref:System.Speech.Recognition.SemanticResultValue>、認識のロジックのインスタンスによって使用されるインスタンス<xref:System.Speech.Recognition.SemanticResultValue>を定義する、<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティ、<xref:System.Speech.Recognition.SemanticValue>生成される</xref:System.Speech.Recognition.SemanticValue></xref:System.Speech.Recognition.SemanticValue.Value%2A></xref:System.Speech.Recognition.SemanticResultValue></xref:System.Speech.Recognition.SemanticResultValue></xref:System.Speech.Recognition.SemanticResultKey></xref:System.Speech.Recognition.GrammarBuilder>。       1 つあり、1 つだけタグなし<xref:System.Speech.Recognition.SemanticResultValue>インスタンス、<xref:System.Speech.Recognition.GrammarBuilder>で指定されたオブジェクト、`builders`パラメーター</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> 。 複数のインスタンスがタグなし場合<xref:System.Speech.Recognition.SemanticResultValue>が関連付けられている、<xref:System.Speech.Recognition.SemanticResultKey>の値セットに各試行は、<xref:System.Speech.Recognition.SemanticValue>認識結果の生成します</xref:System.Speech.Recognition.SemanticValue></xref:System.Speech.Recognition.SemanticResultKey></xref:System.Speech.Recognition.SemanticResultValue>。 これは許可されていないと認識エンジンは、使用しようとすると、例外が発生、<xref:System.Speech.Recognition.Grammar>などを使用して作成された、<xref:System.Speech.Recognition.SemanticResultKey>インスタンス</xref:System.Speech.Recognition.SemanticResultKey></xref:System.Speech.Recognition.Grammar>。       インスタンス<xref:System.Speech.Recognition.SemanticResultValue>に含まれている、<xref:System.Speech.Recognition.GrammarBuilder>で指定されたオブジェクト、`builders`パラメーター間に既に関連付けられていると<xref:System.Speech.Recognition.SemanticResultKey>現在に影響を与えるありません<xref:System.Speech.Recognition.SemanticResultKey>インスタンス</xref:System.Speech.Recognition.SemanticResultKey></xref:System.Speech.Recognition.SemanticResultKey></xref:System.Speech.Recognition.GrammarBuilder></xref:System.Speech.Recognition.SemanticResultValue>。"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is \"Password\". The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized +=   \n    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n    {  \n      SemanticValue semantics = eventArgs.Result.Semantics;  \n      RecognitionResult result=eventArgs.Result;  \n  \n      if (!semantics.ContainsKey(\"Password\"))   \n      {  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n      }  \n      else   \n      {  \n        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n                  result.Words[3],  \n                  result.Words[result.Words.Count - 1]);  \n                  MemoryStream pwdMemoryStream = new MemoryStream();  \n                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n        if (!IsValidPwd(pwdMemoryStream))   \n        {  \n          string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    \n          pwdAudio.WriteToWaveStream(waveStream);  \n          waveStream.Flush();  \n          waveStream.Close();  \n          SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);      \n        }  \n      }  \n    };  \n  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, System.Speech.Recognition.GrammarBuilder[] builders);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "アクセスするセマンティック キーとして使用するタグ、 <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref>インスタンスに関連付けられている、 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>で指定されたオブジェクト、`builders`引数。"
    - id: builders
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "関連付けられる文法コンポーネントの配列、 <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref>オブジェクトで定義されているタグを持つアクセス可能な`semanticResultKey`します。"
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  id: '#ctor(System.String,System.String[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "1 つまたは複数をセマンティック キーの割り当て<xref:System.String>インスタンスが、音声認識の文法を作成するために使用します</xref:System.String>。"
  remarks: "認識操作を実行するときに、<xref:System.String>で使用されるオブジェクト、`phrases`パラメーターはシーケンシャルとして扱われます</xref:System.String>。 たとえば場合、次<xref:System.Speech.Recognition.SemanticResultValue>構築に使用される、 <xref:System.Speech.Recognition.Grammar>、認識エンジンへの入力が認識できるようにするシーケンスの&quot;the quick brown fox&quot;という語を含める必要があります</xref:System.Speech.Recognition.Grammar></xref:System.Speech.Recognition.SemanticResultValue>。      ```c#   SemanticResultKey stringTest=new SemanticResultKey(&quot;stringTest&quot;,                                    new string[] {                                                  &quot;the&quot;,                                                  &quot;quick&quot;,                                                  &quot;brown&quot;,                                                  &quot;fox&quot;});   ````semanticResultKey`引数を使用するキーを指定のアクセスを<xref:System.Speech.Recognition.SemanticValue>が返される可能性があります</xref:System.Speech.Recognition.SemanticValue>。       構築する場合、<xref:System.Speech.Recognition.Grammar>を使用して、<xref:System.Speech.Recognition.GrammarBuilder>セマンティックのキーが文字列オブジェクトの配列を格納しているオブジェクト、<xref:System.Speech.Recognition.SemanticValue.Value%2A>の<xref:System.Speech.Recognition.SemanticValue>認識操作によって生成されるは認識で使用される文字列になります</xref:System.Speech.Recognition.SemanticValue></xref:System.Speech.Recognition.SemanticValue.Value%2A></xref:System.Speech.Recognition.GrammarBuilder></xref:System.Speech.Recognition.Grammar>。 上記の例では、つまり<xref:System.Speech.Recognition.SemanticValue.Value%2A>&quot;the quick brown fox&quot;になります</xref:System.Speech.Recognition.SemanticValue.Value%2A>。"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.  \n  \n A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase \"color red green blue zero\". The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of \"red green blue\". You can access the <xref:System.Speech.Recognition.SemanticValue> using the \"code\" tag.  \n  \n Because of the `SemanticResultValue(\"zero\", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.  \n  \n```c#  \nprivate void keyTest()   \n{  \n  // Say \"color red green blue zero\"  \n  GrammarBuilder gb = new GrammarBuilder(\"color\") +  \n                        new SemanticResultKey(\"code\",   \n                          (new string[] {\"red\", \"green\", \"blue\"})) +  \n                        new SemanticResultValue(\"zero\", 5);  \n  Grammar g = new Grammar(gb);  \n  g.Name = \"keyTest\";  \n  _recognizer.LoadGrammar(g);  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, string[] phrases);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "タグにアクセスを使用、 <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref>インスタンスに関連付けられている、<xref:System.String>で指定されたオブジェクト、`phrases`引数</xref:System.String>。"
    - id: phrases
      type: System.String[]
      description: "1 つまたは複数<xref:System.String>が連結されたテキストが関連付けられるオブジェクト、 <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref>オブジェクトで定義されているタグを持つアクセス可能な`semanticResultKey`</xref:System.String>。"
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "インスタンスを返します<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>現在から構築された<xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;></xref>インスタンス。"
  remarks: "使用<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>を使用すると、<xref:System.Speech.Recognition.GrammarBuilder>を取るコンス トラクター<xref:System.Speech.Recognition.SemanticResultKey>を引数として (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances. The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the ToGrammarBuilder method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling ToGrammarBuilder on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RGB.  \n  // Choices constructors do not take SemanticResultValue parameters, so cast   \n  // the SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  \n    colorChoice.Add(colorValue.ToGrammarBuilder());      \n  }  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with introductory phrase and the color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the Grammar object, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  \n  grammar.Name = \"Make Background /Configure background as\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "インスタンスを返します<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>現在から構築された<xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;></xref>インスタンス。"
  overload: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder[]
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder[]
  spec.csharp:
  - uid: System.Speech.Recognition.GrammarBuilder
    name: GrammarBuilder
    nameWithType: GrammarBuilder
    fullName: GrammarBuilder[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultKey.#ctor*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey.SemanticResultKey
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultKey.ToGrammarBuilder
