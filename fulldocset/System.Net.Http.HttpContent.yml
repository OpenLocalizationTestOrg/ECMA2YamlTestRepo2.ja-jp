### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpContent
  id: HttpContent
  children:
  - System.Net.Http.HttpContent.#ctor
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.CreateContentReadStreamAsync
  - System.Net.Http.HttpContent.Dispose
  - System.Net.Http.HttpContent.Dispose(System.Boolean)
  - System.Net.Http.HttpContent.Headers
  - System.Net.Http.HttpContent.LoadIntoBufferAsync
  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  - System.Net.Http.HttpContent.ReadAsByteArrayAsync
  - System.Net.Http.HttpContent.ReadAsStreamAsync
  - System.Net.Http.HttpContent.ReadAsStringAsync
  - System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  langs:
  - csharp
  name: HttpContent
  nameWithType: HttpContent
  fullName: System.Net.Http.HttpContent
  type: Class
  summary: "HTTP エンティティ本体およびコンテンツ ヘッダーを表す基本クラス。"
  syntax:
    content: 'public abstract class HttpContent : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: HttpContent()
  nameWithType: HttpContent.HttpContent()
  fullName: System.Net.Http.HttpContent.HttpContent()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref>クラスです。"
  syntax:
    content: protected HttpContent ();
    parameters: []
  overload: System.Net.Http.HttpContent.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  id: CopyToAsync(System.IO.Stream)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CopyToAsync(Stream)
  nameWithType: HttpContent.CopyToAsync(Stream)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "HTTP コンテンツのバイト数とコピーとして指定されたストリーム オブジェクトにストリームにシリアル化、 <code> stream </code>のパラメーターです。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、すべてのコンテンツとして渡されるストリーム オブジェクトに書き込まれた後、完了、`stream`パラメーター</xref:System.Threading.Tasks.Task%601> 。"
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "対象のストリーム。"
    return:
      type: System.Threading.Tasks.Task
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.HttpContent.CopyToAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  id: CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CopyToAsync(Stream,TransportContext)
  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "HTTP コンテンツのバイト数とコピーとして指定されたストリーム オブジェクトにストリームにシリアル化、 <code> stream </code>のパラメーターです。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、すべてのコンテンツとして渡されるストリーム オブジェクトに書き込まれた後、完了、`stream`パラメーター</xref:System.Threading.Tasks.Task%601> 。"
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "対象のストリーム。"
    - id: context
      type: System.Net.TransportContext
      description: "トランスポート (チャネル バインド トークンなど) について説明します。 このパラメーターがあります<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Threading.Tasks.Task
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.HttpContent.CopyToAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync
  id: CreateContentReadStreamAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CreateContentReadStreamAsync()
  nameWithType: HttpContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "非同期操作として HTTP コンテンツをメモリ ストリームにシリアル化します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、すべてのコンテンツがメモリ ストリームに書き込まれた後に完了します</xref:System.Threading.Tasks.Task%601>。       操作の完了後、<xref:System.Threading.Tasks.Task%601.Result%2A>返されたタスク オブジェクトのプロパティには、HTTP コンテンツを表すメモリ ストリームが含まれています</xref:System.Threading.Tasks.Task%601.Result%2A>。 返されたストリームは、さまざまなストリーム Api を使用して、コンテンツの読み取りに使用できます。       CreateContentReadStreamAsync メソッドは、メモリ ストリームにコンテンツをバッファーします。 派生クラスは、内容をストリームとして取得する優れた方法がある場合、この動作をオーバーライドできます。 たとえば、バイト配列または文字列でしたを使用して読み取り専用の折り返しなどメソッド方法がより効率的<xref:System.IO.MemoryStream>バイトまたは文字列の周り)</xref:System.IO.MemoryStream> 。"
  syntax:
    content: protected virtual System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.HttpContent.CreateContentReadStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Dispose
  id: Dispose
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpContent.Dispose()
  fullName: System.Net.Http.HttpContent.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "リリースで使用されるアンマネージ リソースおよびマネージ リソースを破棄、 <xref href=&quot;System.Net.Http.HttpContent&quot;></xref>です。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpContent.Dispose(Boolean)
  fullName: System.Net.Http.HttpContent.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref>オプションでマネージ リソースを破棄します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A>。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Net.Http.HttpContent>参照。</xref:System.Net.Http.HttpContent> 。</xref:System.Object.Finalize%2A> このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Net.Http.HttpContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Headers
  id: Headers
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Headers
  nameWithType: HttpContent.Headers
  fullName: System.Net.Http.HttpContent.Headers
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "RFC 2616 で定義されている HTTP コンテンツ ヘッダーを取得します。"
  syntax:
    content: public System.Net.Http.Headers.HttpContentHeaders Headers { get; }
    return:
      type: System.Net.Http.Headers.HttpContentHeaders
      description: "RFC 2616 で定義されているコンテンツ ヘッダー。"
  overload: System.Net.Http.HttpContent.Headers*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync
  id: LoadIntoBufferAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: LoadIntoBufferAsync()
  nameWithType: HttpContent.LoadIntoBufferAsync()
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "非同期操作として HTTP コンテンツをメモリ バッファーにシリアル化します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task>オブジェクトは、すべてのコンテンツは、メモリ バッファーにシリアル化された後に完了します</xref:System.Threading.Tasks.Task>。       コンテンツがメモリ バッファーにシリアル化された後に呼び出しのいずれか、<xref:System.Net.Http.HttpContent.CopyToAsync%2A>メソッドは、対象のストリームにメモリ バッファーの内容をコピーします</xref:System.Net.Http.HttpContent.CopyToAsync%2A>。"
  syntax:
    content: public System.Threading.Tasks.Task LoadIntoBufferAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  id: LoadIntoBufferAsync(System.Int64)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: LoadIntoBufferAsync(Int64)
  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "非同期操作として HTTP コンテンツをメモリ バッファーにシリアル化します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task>オブジェクトは、すべてのコンテンツは、メモリ バッファーにシリアル化された後に完了します</xref:System.Threading.Tasks.Task>。       コンテンツがメモリ バッファーにシリアル化された後に呼び出しのいずれか、<xref:System.Net.Http.HttpContent.CopyToAsync%2A>メソッドは、対象のストリームにメモリ バッファーの内容をコピーします</xref:System.Net.Http.HttpContent.CopyToAsync%2A>。       コンテンツに渡された値を超える場合、`maxBufferSize`パラメーター、例外がスローされます。"
  syntax:
    content: public System.Threading.Tasks.Task LoadIntoBufferAsync (long maxBufferSize);
    parameters:
    - id: maxBufferSize
      type: System.Int64
      description: "(バイト単位) を使用するバッファーの最大サイズ。"
    return:
      type: System.Threading.Tasks.Task
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync
  id: ReadAsByteArrayAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsByteArrayAsync()
  nameWithType: HttpContent.ReadAsByteArrayAsync()
  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "非同期操作として HTTP コンテンツをバイト配列にシリアル化します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、すべてのコンテンツをバイト配列として書き込まれた後に完了します</xref:System.Threading.Tasks.Task%601>。       操作の完了後、 <xref:System.Threading.Tasks.Task%601.Result%2A>HTTP コンテンツを含むバイト配列が返されたタスク オブジェクトのプロパティに含まれています</xref:System.Threading.Tasks.Task%601.Result%2A>。"
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.HttpContent.ReadAsByteArrayAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync
  id: ReadAsStreamAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsStreamAsync()
  nameWithType: HttpContent.ReadAsStreamAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "HTTP コンテンツをシリアル化し、非同期操作としてコンテンツを表すストリームを返します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、完了後にすべてのストリームを表すコンテンツが読み取られたこと</xref:System.Threading.Tasks.Task%601>。       操作の完了後、<xref:System.Threading.Tasks.Task%601.Result%2A>返されたタスク オブジェクトのプロパティには、HTTP コンテンツを表すストリームが含まれています</xref:System.Threading.Tasks.Task%601.Result%2A>。 返されたストリームは、さまざまなストリーム Api を使用して、コンテンツの読み取りに使用できます。"
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.HttpContent.ReadAsStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsStringAsync
  id: ReadAsStringAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsStringAsync()
  nameWithType: HttpContent.ReadAsStringAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "非同期操作として HTTP コンテンツを文字列にシリアル化します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、すべてのコンテンツを文字列として書き込まれた後に完了します</xref:System.Threading.Tasks.Task%601>。       操作の完了後、<xref:System.Threading.Tasks.Task%601.Result%2A>返されたタスク オブジェクトのプロパティには、HTTP コンテンツを含む文字列が含まれています</xref:System.Threading.Tasks.Task%601.Result%2A>。"
  syntax:
    content: public System.Threading.Tasks.Task<string> ReadAsStringAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.HttpContent.ReadAsStringAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "非同期操作として HTTP コンテンツ ストリームにシリアル化します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、すべてのコンテンツは、渡されたストリーム オブジェクトにシリアル化された後に、完了、`stream`パラメーター</xref:System.Threading.Tasks.Task%601> 。"
  syntax:
    content: protected abstract System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "対象のストリーム。"
    - id: context
      type: System.Net.TransportContext
      description: "トランスポート (チャネル バインド トークンなど) について説明します。 このパラメーターがあります<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Threading.Tasks.Task
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.HttpContent.SerializeToStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  id: TryComputeLength(System.Int64@)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: TryComputeLength(Int64)
  nameWithType: HttpContent.TryComputeLength(Int64)
  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "HTTP コンテンツがバイト単位で有効な長さを持つかどうかを判断します。"
  remarks: "TryComputeLength メソッドは、HTTP コンテンツをコンテンツの長さを計算することを示します。 これは、コンテンツ タイプを簡単にコンテンツの長さを計算することがあるに役立ちます。 コンテンツの長さが可能でないか、高価な (は必要なシリアル化高価なや、大量のメモリを割り当てることが必要に、コンテンツ全体をバッファーに書き込むシステム) を計算するには、このメソッドは返す`false`です。 このメソッドが戻る場合`false`、つまり、チャンク転送が必要かあるコンテンツをサーバーに送信される前にバッファーを取得する必要があります。"
  syntax:
    content: protected abstract bool TryComputeLength (out long length);
    parameters:
    - id: length
      type: System.Int64
      description: "HTTP コンテンツの長さをバイト単位です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<code> length </code>有効な長さが、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>します。"
  overload: System.Net.Http.HttpContent.TryComputeLength*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Http.HttpContent.#ctor
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: HttpContent()
  nameWithType: HttpContent.HttpContent()
  fullName: System.Net.Http.HttpContent.HttpContent()
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync(Stream)
  nameWithType: HttpContent.CopyToAsync(Stream)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync(Stream,TransportContext)
  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CreateContentReadStreamAsync()
  nameWithType: HttpContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.Dispose
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose()
  nameWithType: HttpContent.Dispose()
  fullName: System.Net.Http.HttpContent.Dispose()
- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpContent.Dispose(Boolean)
  fullName: System.Net.Http.HttpContent.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpContent.Headers
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Headers
  nameWithType: HttpContent.Headers
  fullName: System.Net.Http.HttpContent.Headers
- uid: System.Net.Http.Headers.HttpContentHeaders
  parent: System.Net.Http.Headers
  isExternal: false
  name: HttpContentHeaders
  nameWithType: HttpContentHeaders
  fullName: System.Net.Http.Headers.HttpContentHeaders
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync()
  nameWithType: HttpContent.LoadIntoBufferAsync()
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync(Int64)
  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsByteArrayAsync()
  nameWithType: HttpContent.ReadAsByteArrayAsync()
  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Byte>
  nameWithType: Task<Byte>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Byte[]>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStreamAsync()
  nameWithType: HttpContent.ReadAsStreamAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()
- uid: System.Net.Http.HttpContent.ReadAsStringAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStringAsync()
  nameWithType: HttpContent.ReadAsStringAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)
- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: TryComputeLength(Int64)
  nameWithType: HttpContent.TryComputeLength(Int64)
  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)
- uid: System.Net.Http.HttpContent.#ctor*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: HttpContent
  nameWithType: HttpContent.HttpContent
- uid: System.Net.Http.HttpContent.CopyToAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync
  nameWithType: HttpContent.CopyToAsync
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CreateContentReadStreamAsync
  nameWithType: HttpContent.CreateContentReadStreamAsync
- uid: System.Net.Http.HttpContent.Dispose*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose
  nameWithType: HttpContent.Dispose
- uid: System.Net.Http.HttpContent.Headers*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Headers
  nameWithType: HttpContent.Headers
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync
  nameWithType: HttpContent.LoadIntoBufferAsync
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsByteArrayAsync
  nameWithType: HttpContent.ReadAsByteArrayAsync
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStreamAsync
  nameWithType: HttpContent.ReadAsStreamAsync
- uid: System.Net.Http.HttpContent.ReadAsStringAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStringAsync
  nameWithType: HttpContent.ReadAsStringAsync
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: SerializeToStreamAsync
  nameWithType: HttpContent.SerializeToStreamAsync
- uid: System.Net.Http.HttpContent.TryComputeLength*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: TryComputeLength
  nameWithType: HttpContent.TryComputeLength
