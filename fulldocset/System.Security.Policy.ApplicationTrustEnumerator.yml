### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.ApplicationTrustEnumerator
  id: ApplicationTrustEnumerator
  children:
  - System.Security.Policy.ApplicationTrustEnumerator.Current
  - System.Security.Policy.ApplicationTrustEnumerator.MoveNext
  - System.Security.Policy.ApplicationTrustEnumerator.Reset
  - System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: ApplicationTrustEnumerator
  nameWithType: ApplicationTrustEnumerator
  fullName: System.Security.Policy.ApplicationTrustEnumerator
  type: Class
  summary: "列挙子を表す<xref href=&quot;System.Security.Policy.ApplicationTrust&quot;></xref>内のオブジェクト、 <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref>コレクション。"
  remarks: "列挙子は、コレクション内のデータの読み取りのみ許可します。 列挙子を使用して、基になるコレクションを変更することはできません。       最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。 <xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>メソッドがこの位置に戻さも、列挙子を表示します</xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>。 この位置で、呼び出し、<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>プロパティは例外をスローします</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>。 そのため、呼び出す必要があります、<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める、<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>プロパティ</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>。       <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>いずれかのまで同じオブジェクトを返します<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>または<xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>と呼びます</xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>。</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>設定<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>次の要素にします</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>。</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>       列挙子が呼び出すと、コレクション内の最後の要素の後ろに配置され、コレクションの末尾が渡されると、<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>返します`false`</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>。 場合は、最後の呼び出し<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>返される`false`、呼び出し元<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>例外をスローします</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>。 <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>コレクションの最初の要素を呼び出す<xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A><xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>。</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>への呼び出し後に</xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>リセットするには       コレクションが変更されない限り、列挙子は有効です。 無効になり、次の呼び出しに変更を追加するなど、コレクションを変更、または要素を削除するには、列挙子は回復不可能<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>または<xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>スロー、<xref:System.InvalidOperationException>例外です</xref:System.InvalidOperationException></xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>。 呼び出し元のコレクションが変更された場合<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>と<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>、<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>列挙子が既に無効になっている場合でもが現在設定される、要素を返します</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>。       列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。 コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ApplicationTrustEnumerator : System.Collections.IEnumerator
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.Current
  id: Current
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: ApplicationTrustEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "現在の取得<xref href=&quot;System.Security.Policy.ApplicationTrust&quot;></xref>内のオブジェクト、 <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref>コレクション。"
  remarks: "列挙子が作成されると、それを指していませんオブジェクト、ため、現在のプロパティが無効であり、アクセスする場合、例外がスローされます。 最初に呼び出す必要があります、<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>メソッドをコレクションの最初のオブジェクトにカーソルを合わせます</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>。       現在ない中間の呼び出しを複数の呼び出し<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>は同じを返します<xref:System.Security.Policy.ApplicationTrust>オブジェクト</xref:System.Security.Policy.ApplicationTrust></xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>。"
  syntax:
    content: public System.Security.Policy.ApplicationTrust Current { get; }
    return:
      type: System.Security.Policy.ApplicationTrust
      description: "The current <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;></xref> in the <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;></xref>."
  overload: System.Security.Policy.ApplicationTrustEnumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: ApplicationTrustEnumerator.MoveNext()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "次の要素に移動、 <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref>コレクション。"
  remarks: "MoveNext メソッドが直ちに返されます`false`コレクション内のオブジェクトがない場合。       MoveNext は返します`true`コレクションの末尾に達するまでします。 その`false`連続する呼び出しごとにします。 ただし、MoveNext が返された後に`false`へのアクセス、<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>プロパティは例外をスローします</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>。       作成時に、列挙子が&1; つ目の前に位置付けられます<xref:System.Security.Policy.ApplicationTrust>コレクション、および MoveNext への最初の呼び出しでオブジェクトがコレクション内の最初のオブジェクトに、列挙子を配置します</xref:System.Security.Policy.ApplicationTrust>。"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列挙子が次の要素に正常に進んだ場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>列挙子がコレクションの末尾を越えた場合。"
  overload: System.Security.Policy.ApplicationTrustEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.Reset
  id: Reset
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: ApplicationTrustEnumerator.Reset()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "先頭に、列挙子をリセット、 <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref>コレクション。"
  remarks: "列挙子は、順方向専用の方向に移動します。 このメソッドのコレクションの先頭に、列挙子を使用して<xref:System.Security.Policy.ApplicationTrust>オブジェクト</xref:System.Security.Policy.ApplicationTrust>。       Reset メソッドは、コレクションの最初のオブジェクトにカーソルを位置付けます。 リセットを呼び出した後を呼び出す必要はありません、<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>最初のオブジェクトにカーソルを前方に移動する方法</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>。"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Policy.ApplicationTrustEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "現在の取得<xref:System.Object>で、 <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref>コレクションです</xref:System.Object>。"
  remarks: "このメソッドを呼び出す必要はありません。使用して、<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>プロパティ代わりにします</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>。"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "現在<xref:System.Object>で、 <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref></xref:System.Object> 。"
  overload: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Policy.ApplicationTrustEnumerator.Current
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Current
  nameWithType: ApplicationTrustEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Current
- uid: System.Security.Policy.ApplicationTrust
  parent: System.Security.Policy
  isExternal: false
  name: ApplicationTrust
  nameWithType: ApplicationTrust
  fullName: System.Security.Policy.ApplicationTrust
- uid: System.Security.Policy.ApplicationTrustEnumerator.MoveNext
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: ApplicationTrustEnumerator.MoveNext()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Policy.ApplicationTrustEnumerator.Reset
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Reset()
  nameWithType: ApplicationTrustEnumerator.Reset()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Reset()
- uid: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.Policy.ApplicationTrustEnumerator.Current*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Current
  nameWithType: ApplicationTrustEnumerator.Current
- uid: System.Security.Policy.ApplicationTrustEnumerator.MoveNext*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: ApplicationTrustEnumerator.MoveNext
- uid: System.Security.Policy.ApplicationTrustEnumerator.Reset*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Reset
  nameWithType: ApplicationTrustEnumerator.Reset
- uid: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
