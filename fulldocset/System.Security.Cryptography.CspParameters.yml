### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CspParameters
  id: CspParameters
  children:
  - System.Security.Cryptography.CspParameters.#ctor
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  - System.Security.Cryptography.CspParameters.CryptoKeySecurity
  - System.Security.Cryptography.CspParameters.Flags
  - System.Security.Cryptography.CspParameters.KeyContainerName
  - System.Security.Cryptography.CspParameters.KeyNumber
  - System.Security.Cryptography.CspParameters.KeyPassword
  - System.Security.Cryptography.CspParameters.ParentWindowHandle
  - System.Security.Cryptography.CspParameters.ProviderName
  - System.Security.Cryptography.CspParameters.ProviderType
  langs:
  - csharp
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
  type: Class
  summary: "暗号化の計算を実行する暗号化サービス プロバイダー (CSP) に渡されるパラメーターが含まれています。 このクラスは継承できません。"
  remarks: "CspParameters クラスでは、Microsoft 暗号化サービス プロバイダー (Csp) から、アンマネージ Microsoft Cryptography API (CAPI) を内部的に使用するマネージ暗号化クラスに渡すことができるパラメーターを表します。 &quot;CryptoServiceProvider&quot;で終わる名前を持つクラスは、対応する CSP のマネージ コード ラッパーです。       CspParameters クラスを使用して、次の操作:-プロバイダーの種類を渡すことによって、特定の CSP を指定、<xref:System.Security.Cryptography.CspParameters.ProviderType>または<xref:System.Security.Cryptography.CspParameters.ProviderName>プロパティ</xref:System.Security.Cryptography.CspParameters.ProviderName></xref:System.Security.Cryptography.CspParameters.ProviderType>。  コンス トラクターのオーバー ロードを使用して CSP を指定することもできます。      -暗号化キーを格納するキー コンテナーを作成します。  キー コンテナーは、暗号化キーを永続化し、悪意のあるサード パーティからシークレットを保持するには、最も安全な方法を提供します。  キー コンテナーの作成の詳細については、次を参照してください。[する方法: キー コンテナーに非対称キーのストア](~/add/includes/ajax-current-ext-md.md)です。      -非対称署名キーまたは非対称交換キーを使用して、作成するかどうかを指定、<xref:System.Security.Cryptography.CspParameters.KeyNumber>プロパティ</xref:System.Security.Cryptography.CspParameters.KeyNumber>。"
  example:
  - "The following code example creates a key container using the CspParameters class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/t-system.security.crypto_47_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/t-system.security.crypto_47_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/t-system.security.crypto_47_1.cs)]  \n  \n The following code example uses the CspParameters class to select a Smart Card Cryptographic Service Provider.  It then signs and verifies data using the smart card.  \n  \n [!code-cs[Cryptography.SmartCardCSP#1](~/add/codesnippet/csharp/t-system.security.crypto_47_2.cs)]\n [!code-cpp[Cryptography.SmartCardCSP#1](~/add/codesnippet/cpp/t-system.security.crypto_47_2.cpp)]\n [!code-vb[Cryptography.SmartCardCSP#1](~/add/codesnippet/visualbasic/t-system.security.crypto_47_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CspParameters
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters()
  nameWithType: CspParameters.CspParameters()
  fullName: System.Security.Cryptography.CspParameters.CspParameters()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>クラスです。"
  remarks: "この形式 CspParameters の初期化、<xref:System.Security.Cryptography.CspParameters.ProviderType>フィールドの値を`24`、PROV_RSA_AES プロバイダーを指定する</xref:System.Security.Cryptography.CspParameters.ProviderType>。  この既定のプロバイダーと互換性のある、<xref:System.Security.Cryptography.Aes>アルゴリズム</xref:System.Security.Cryptography.Aes>。       その他のプロバイダーの種類については、次を参照してください、<xref:System.Security.Cryptography.CspParameters.ProviderType>フィールド。</xref:System.Security.Cryptography.CspParameters.ProviderType> 。"
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/m-system.security.crypto_108_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/m-system.security.crypto_108_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/m-system.security.crypto_108_1.cs)]"
  syntax:
    content: public CspParameters ();
    parameters: []
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32)
  nameWithType: CspParameters.CspParameters(Int32)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>指定されたプロバイダーの型コードを持つクラス。"
  remarks: "CspParameters コンス トラクターを使用すると、そのプロバイダーを表す数値を渡すことによって、プロバイダーの種類を指定します。  WinCrypt.h ヘッダー ファイルで既定のプロバイダーの種類を表す数値の値が定義されている: - と互換性のあるプロバイダーを指定して、<xref:System.Security.Cryptography.RSA>アルゴリズムの値を渡します`1`を`dwTypeIn`パラメーター</xref:System.Security.Cryptography.RSA> 。      -互換性のあるプロバイダーを指定するには、<xref:System.Security.Cryptography.DSA>アルゴリズムの値を渡します`13`を`dwTypeIn`パラメーター</xref:System.Security.Cryptography.DSA> 。       その他のプロバイダー型の値については、次を参照してください、<xref:System.Security.Cryptography.CspParameters.ProviderType>フィールド。</xref:System.Security.Cryptography.CspParameters.ProviderType> 。  既定のプロバイダーの種類とその動作の詳細については、MSDN ライブラリの Microsoft Cryptography API (CAPI) ドキュメントを参照してください。"
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/m-system.security.crypto_129_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/m-system.security.crypto_129_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/m-system.security.crypto_129_1.cs)]"
  syntax:
    content: public CspParameters (int dwTypeIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "作成するプロバイダーの種類を指定するプロバイダーの型コード。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String)
  nameWithType: CspParameters.CspParameters(Int32,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>指定されたプロバイダーの型コードと名前を持つクラス。"
  remarks: "CspParameters コンス トラクターを使用すると、プロバイダーの種類と名前を指定します。       必要なプロバイダーの種類を表す数値を渡すことによって、プロバイダーの種類を指定します。  WinCrypt.h ヘッダー ファイルで既定のプロバイダーの種類を表す数値の値が定義されている: - と互換性のあるプロバイダーを指定して、<xref:System.Security.Cryptography.RSA>アルゴリズムの値を渡します`1`を`dwTypeIn`パラメーター</xref:System.Security.Cryptography.RSA> 。      -互換性のあるプロバイダーを指定するには、<xref:System.Security.Cryptography.DSA>アルゴリズムの値を渡します`13`を`dwTypeIn`パラメーター</xref:System.Security.Cryptography.DSA> 。       その他のプロバイダー型の値については、次を参照してください、<xref:System.Security.Cryptography.CspParameters.ProviderType>フィールド。</xref:System.Security.Cryptography.CspParameters.ProviderType> 。  既定のプロバイダーの種類とその動作の詳細については、MSDN ライブラリの Microsoft Cryptography API (CAPI) ドキュメントを参照してください。"
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.CspParameters> class to select a Smart Card Cryptographic Service Provider.  It then signs and verifies data using the smart card.  \n  \n [!code-cs[Cryptography.SmartCardCSP#1](~/add/codesnippet/csharp/3115faba-ad85-4109-97d8-_1.cs)]\n [!code-cpp[Cryptography.SmartCardCSP#1](~/add/codesnippet/cpp/3115faba-ad85-4109-97d8-_1.cpp)]\n [!code-vb[Cryptography.SmartCardCSP#1](~/add/codesnippet/visualbasic/3115faba-ad85-4109-97d8-_1.vb)]"
  syntax:
    content: public CspParameters (int dwTypeIn, string strProviderNameIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "作成するプロバイダーの種類を指定するプロバイダーの型コード。"
    - id: strProviderNameIn
      type: System.String
      description: "プロバイダー名です。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  id: '#ctor(System.Int32,System.String,System.String)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String)
  nameWithType: CspParameters.CspParameters(Int32,String,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>指定されたプロバイダーの型コードと、指定されたコンテナー名を持つクラス。"
  remarks: "CspParameters コンス トラクターを使用すると、プロバイダーの種類、プロバイダー名、およびコンテナーの名前を指定します。       コンテナー名を使用すると、そのコンテナー内のキーを取得します。       必要なプロバイダーの種類を表す数値を渡すことによって、プロバイダーの種類を指定します。  WinCrypt.h ヘッダー ファイルで既定のプロバイダーの種類を表す数値の値が定義されている: - と互換性のあるプロバイダーを指定して、<xref:System.Security.Cryptography.RSA>アルゴリズムの値を渡します`1`を`dwTypeIn`パラメーター</xref:System.Security.Cryptography.RSA> 。      -互換性のあるプロバイダーを指定するには、<xref:System.Security.Cryptography.DSA>アルゴリズムの値を渡します`13`を`dwTypeIn`パラメーター</xref:System.Security.Cryptography.DSA> 。       その他のプロバイダー型の値については、次を参照してください、<xref:System.Security.Cryptography.CspParameters.ProviderType>フィールド。</xref:System.Security.Cryptography.CspParameters.ProviderType> 。  既定のプロバイダーの種類とその動作の詳細については、MSDN ライブラリの Microsoft Cryptography API (CAPI) ドキュメントを参照してください。"
  syntax:
    content: public CspParameters (int dwTypeIn, string strProviderNameIn, string strContainerNameIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "作成するプロバイダーの種類を指定するプロバイダーの型コード。"
    - id: strProviderNameIn
      type: System.String
      description: "プロバイダー名です。"
    - id: strContainerNameIn
      type: System.String
      description: "コンテナーの名前です。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  id: '#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>クラス、プロバイダーの種類、プロバイダー名、コンテナーの名前、アクセス情報、およびアンマネージ スマート カードのパスワード ダイアログへのハンドルを使用します。"
  remarks: "コンテナー名を使用すると、そのコンテナー内のキーを取得します。       必要なプロバイダーの種類を表す数値を渡すことによって、プロバイダーの種類を指定します。  WinCrypt.h ヘッダー ファイルで既定のプロバイダーの種類を表す数値の値が定義されている: - と互換性のあるプロバイダーを指定して、<xref:System.Security.Cryptography.RSA>アルゴリズムの値を渡します`1`を`dwTypeIn`パラメーター</xref:System.Security.Cryptography.RSA> 。      -互換性のあるプロバイダーを指定するには、<xref:System.Security.Cryptography.DSA>アルゴリズムの値を渡します`13`を`dwTypeIn`パラメーター</xref:System.Security.Cryptography.DSA> 。       その他のプロバイダー型の値については、次を参照してください、<xref:System.Security.Cryptography.CspParameters.ProviderType>フィールド。</xref:System.Security.Cryptography.CspParameters.ProviderType> 。  既定のプロバイダーの種類とその動作の詳細については、MSDN ライブラリの Microsoft Cryptography API (CAPI) ドキュメントを参照してください。"
  syntax:
    content: public CspParameters (int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, IntPtr parentWindowHandle);
    parameters:
    - id: providerType
      type: System.Int32
      description: "作成するプロバイダーの種類を指定するプロバイダーの型コード。"
    - id: providerName
      type: System.String
      description: "プロバイダー名です。"
    - id: keyContainerName
      type: System.String
      description: "コンテナーの名前です。"
    - id: cryptoKeySecurity
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "コンテナーの規則を表すアクセス権および監査するオブジェクト。"
    - id: parentWindowHandle
      type: System.IntPtr
      description: "スマート カードのパスワード ダイアログの親ウィンドウへのハンドル。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  id: '#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>クラス、プロバイダーの種類、プロバイダー名、コンテナーの名前、アクセス情報、およびスマート カード キーに関連付けられているパスワードを使用します。"
  remarks: "コンテナー名を使用すると、そのコンテナー内のキーを取得します。       必要なプロバイダーの種類を表す数値を渡すことによって、プロバイダーの種類を指定します。  WinCrypt.h ヘッダー ファイルで既定のプロバイダーの種類を表す数値の値が定義されている: - と互換性のあるプロバイダーを指定して、<xref:System.Security.Cryptography.RSA>アルゴリズムの値を渡します`1`を`dwTypeIn`パラメーター</xref:System.Security.Cryptography.RSA> 。      -互換性のあるプロバイダーを指定するには、<xref:System.Security.Cryptography.DSA>アルゴリズムの値を渡します`13`を`dwTypeIn`パラメーター</xref:System.Security.Cryptography.DSA> 。       その他のプロバイダー型の値については、次を参照してください、<xref:System.Security.Cryptography.CspParameters.ProviderType>フィールド。</xref:System.Security.Cryptography.CspParameters.ProviderType> 。  既定のプロバイダーの種類とその動作の詳細については、MSDN ライブラリの Microsoft Cryptography API (CAPI) ドキュメントを参照してください。"
  syntax:
    content: public CspParameters (int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, System.Security.SecureString keyPassword);
    parameters:
    - id: providerType
      type: System.Int32
      description: "作成するプロバイダーの種類を指定するプロバイダーの型コード。"
    - id: providerName
      type: System.String
      description: "プロバイダー名です。"
    - id: keyContainerName
      type: System.String
      description: "コンテナーの名前です。"
    - id: cryptoKeySecurity
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "コンテナーの規則を表すアクセス権および監査するオブジェクト。"
    - id: keyPassword
      type: System.Security.SecureString
      description: "スマート カード キーに関連付けられているパスワードです。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  id: CryptoKeySecurity
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
  fullName: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得または設定、 <xref href=&quot;System.Security.AccessControl.CryptoKeySecurity&quot;> </xref>オブジェクトを表しますがアクセス権と、監査規則のコンテナーのことです。"
  remarks: "指定する、CryptoKeySecurity プロパティを使用して、<xref:System.Security.AccessControl.CryptoKeySecurity>随意アクセス制御の作成を管理するオブジェクトのリスト (DACL) とコンテナーのシステム アクセス制御リスト (SACL).</xref:System.Security.AccessControl.CryptoKeySecurity>"
  syntax:
    content: public System.Security.AccessControl.CryptoKeySecurity CryptoKeySecurity { get; set; }
    return:
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.CryptoKeySecurity&quot;> </xref>オブジェクトを表しますがアクセス権と、監査規則のコンテナーのことです。"
  overload: System.Security.Cryptography.CspParameters.CryptoKeySecurity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.Flags
  id: Flags
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: Flags
  nameWithType: CspParameters.Flags
  fullName: System.Security.Cryptography.CspParameters.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "フラグを表す<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>暗号化サービス プロバイダー (CSP) の動作を変更します。"
  syntax:
    content: public System.Security.Cryptography.CspProviderFlags Flags { get; set; }
    return:
      type: System.Security.Cryptography.CspProviderFlags
      description: "列挙値、または列挙値のビットごとの組み合わせ。"
  overload: System.Security.Cryptography.CspParameters.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "値は、有効な列挙値ではありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyContainerName
  id: KeyContainerName
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyContainerName
  nameWithType: CspParameters.KeyContainerName
  fullName: System.Security.Cryptography.CspParameters.KeyContainerName
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "キー コンテナー名を表す<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>です。"
  remarks: "キーコンテナー名フィールドを使用すると、キー コンテナーの名前を指定します。  コンテナー名を使用すると、そのコンテナー内の永続化されたキーを取得します。       キー コンテナーの作成の詳細については、次を参照してください。[する方法: キー コンテナーに非対称キーのストア](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/f-system.security.crypto_6_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/f-system.security.crypto_6_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/f-system.security.crypto_6_1.cs)]"
  syntax:
    content: public string KeyContainerName;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyNumber
  id: KeyNumber
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyNumber
  nameWithType: CspParameters.KeyNumber
  fullName: System.Security.Cryptography.CspParameters.KeyNumber
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "非対称キーが署名キーか、交換キーとして作成されたかどうかを指定します。"
  remarks: "KeyNumber フィールドを初期化、<xref:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber%2A>プロパティを初期化するとき、<xref:System.Security.Cryptography.CspKeyContainerInfo>オブジェクトを<xref:System.Security.Cryptography.CspParameters>オブジェクト</xref:System.Security.Cryptography.CspParameters></xref:System.Security.Cryptography.CspKeyContainerInfo></xref:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber%2A>。       交換キーは、セッション キーを暗号化に使用される非対称キーのペアです。  使用することができます、<xref:System.Security.Cryptography.KeyNumber>値 (`1`)、交換キーを指定します</xref:System.Security.Cryptography.KeyNumber>。  この値に対応、`AT_KEYEXCHANGE`で、アンマネージ Microsoft 暗号化 API (CAPI) を使用する値。       署名キーは、デジタル署名されたメッセージやファイルの認証に使用される非対称キーのペアです。  使用することができます、<xref:System.Security.Cryptography.KeyNumber>値 (`2`) 署名キーを指定します</xref:System.Security.Cryptography.KeyNumber>。  この値に対応、 `AT_SIGNATURE` CAPI で使用される値。       既定では、KeyNumber フィールドは、交換キーを指定します。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Security.Cryptography.KeyNumber> enumeration to specify a key type for an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object.  \n  \n [!code-cs[Cryptography.KeyNumber#1](~/add/codesnippet/csharp/f-system.security.crypto_8_1.cs)]\n [!code-cpp[Cryptography.KeyNumber#1](~/add/codesnippet/cpp/f-system.security.crypto_8_1.cpp)]\n [!code-vb[Cryptography.KeyNumber#1](~/add/codesnippet/visualbasic/f-system.security.crypto_8_1.vb)]"
  syntax:
    content: public int KeyNumber;
    return:
      type: System.Int32
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyPassword
  id: KeyPassword
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
  fullName: System.Security.Cryptography.CspParameters.KeyPassword
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得またはスマート カード キーに関連付けられているパスワードを設定します。"
  remarks: "KeyPassword プロパティを使用して、スマート カード キーのパスワードを入力します。  このプロパティを使用してパスワードを指定するときに、[パスワード] ダイアログ ボックスは、ユーザーには存在しません。"
  syntax:
    content: public System.Security.SecureString KeyPassword { get; set; }
    return:
      type: System.Security.SecureString
      description: "スマート カード キーに関連付けられているパスワードです。"
  overload: System.Security.Cryptography.CspParameters.KeyPassword*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle
  id: ParentWindowHandle
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
  fullName: System.Security.Cryptography.CspParameters.ParentWindowHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得またはスマート カードのパスワード ダイアログ ボックスは、アンマネージの親ウィンドウへのハンドルを設定します。"
  remarks: "ParentWindowHandle プロパティを使用すると、スマート カードのパスワード ダイアログ ボックスは、アンマネージの親ウィンドウへのハンドルを指定できます。  このプロパティを使用してハンドルを指定するときに、スマート カードのパスワード ダイアログ ボックスは、ユーザーに表示されます。       使用して明示的にパスワードを指定して、スマート カードのパスワード ダイアログ ボックスを表示するを回避することができます、<xref:System.Security.Cryptography.CspParameters.KeyPassword%2A>プロパティ</xref:System.Security.Cryptography.CspParameters.KeyPassword%2A>。"
  syntax:
    content: public IntPtr ParentWindowHandle { get; set; }
    return:
      type: System.IntPtr
      description: "スマート カードのパスワード ダイアログ ボックスの親ウィンドウへのハンドル。"
  overload: System.Security.Cryptography.CspParameters.ParentWindowHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ProviderName
  id: ProviderName
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ProviderName
  nameWithType: CspParameters.ProviderName
  fullName: System.Security.Cryptography.CspParameters.ProviderName
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "プロバイダー名を表す<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>です。"
  remarks: "プロバイダー名の詳細については、MSDN ライブラリの Microsoft Cryptography API (CAPI) ドキュメントを参照してください。"
  syntax:
    content: public string ProviderName;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ProviderType
  id: ProviderType
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ProviderType
  nameWithType: CspParameters.ProviderType
  fullName: System.Security.Cryptography.CspParameters.ProviderType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "プロバイダーの種類のコードを表す<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>です。"
  remarks: "プロバイダーの種類フィールドを使用すると、そのプロバイダーを表す数値を渡すことによって、プロバイダーの種類を指定できます。  既定のプロバイダーの種類を表す数値が WinCrypt.h ヘッダー ファイルで定義されている: - と互換性のあるプロバイダーを指定して、<xref:System.Security.Cryptography.RSA>クラス、値を渡します`1`</xref:System.Security.Cryptography.RSA>。      -互換性のあるプロバイダーを指定するには、<xref:System.Security.Cryptography.DSA>クラスの値を渡す`13`</xref:System.Security.Cryptography.DSA>。       次の表は、プロバイダーの種類と WinCrypt.h ヘッダー ファイルで定義されている対応する数値を示します。      |プロバイダーの種類 |数値の値 |  |-------------------|-------------------|  |`PROV_RSA_FULL`|1|  |`PROV_RSA_SIG`|2|  |`PROV_DSS`|3|  |`PROV_FORTEZZA`|4|  |`PROV_MS_EXCHANGE`|5|  |`PROV_SSL`|6|  |`PROV_RSA_SCHANNEL`|12|  |`PROV_DSS_DH`|13|  |`PROV_EC_ECDSA_SIG`|14|  |`PROV_EC_ECNRA_SIG`|15|  |`PROV_EC_ECDSA_FULL`|16|  |`PROV_EC_ECNRA_FULL`|17|  |`PROV_DH_SCHANNEL`|18|  |`PROV_SPYRUS_LYNKS`|20|  |`PROV_RNG`|21|  |`PROV_INTEL_SEC`|22|  |`PROV_REPLACE_OWF`|23|  |`PROV_RSA_AES`|24|      既定のプロバイダーの種類とその動作の詳細については、MSDN ライブラリの Microsoft Cryptography API (CAPI) ドキュメントを参照してください。"
  syntax:
    content: public int ProviderType;
    return:
      type: System.Int32
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.CspParameters.#ctor
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters()
  nameWithType: CspParameters.CspParameters()
  fullName: System.Security.Cryptography.CspParameters.CspParameters()
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32)
  nameWithType: CspParameters.CspParameters(Int32)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String)
  nameWithType: CspParameters.CspParameters(Int32,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String)
  nameWithType: CspParameters.CspParameters(Int32,String,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String)
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
- uid: System.Security.AccessControl.CryptoKeySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CryptoKeySecurity
  fullName: System.Security.AccessControl.CryptoKeySecurity
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
  fullName: System.Security.Cryptography.CspParameters.CryptoKeySecurity
- uid: System.Security.Cryptography.CspParameters.Flags
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: Flags
  nameWithType: CspParameters.Flags
  fullName: System.Security.Cryptography.CspParameters.Flags
- uid: System.Security.Cryptography.CspProviderFlags
  parent: System.Security.Cryptography
  isExternal: false
  name: CspProviderFlags
  nameWithType: CspProviderFlags
  fullName: System.Security.Cryptography.CspProviderFlags
- uid: System.Security.Cryptography.CspParameters.KeyContainerName
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyContainerName
  nameWithType: CspParameters.KeyContainerName
  fullName: System.Security.Cryptography.CspParameters.KeyContainerName
- uid: System.Security.Cryptography.CspParameters.KeyNumber
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyNumber
  nameWithType: CspParameters.KeyNumber
  fullName: System.Security.Cryptography.CspParameters.KeyNumber
- uid: System.Security.Cryptography.CspParameters.KeyPassword
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
  fullName: System.Security.Cryptography.CspParameters.KeyPassword
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
  fullName: System.Security.Cryptography.CspParameters.ParentWindowHandle
- uid: System.Security.Cryptography.CspParameters.ProviderName
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ProviderName
  nameWithType: CspParameters.ProviderName
  fullName: System.Security.Cryptography.CspParameters.ProviderName
- uid: System.Security.Cryptography.CspParameters.ProviderType
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ProviderType
  nameWithType: CspParameters.ProviderType
  fullName: System.Security.Cryptography.CspParameters.ProviderType
- uid: System.Security.Cryptography.CspParameters.#ctor*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters.CspParameters
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
- uid: System.Security.Cryptography.CspParameters.Flags*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: Flags
  nameWithType: CspParameters.Flags
- uid: System.Security.Cryptography.CspParameters.KeyPassword*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
