### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeDescriptor
  id: TypeDescriptor
  children:
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  - System.ComponentModel.TypeDescriptor.ComObjectType
  - System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptor.InterfaceType
  - System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  - System.ComponentModel.TypeDescriptor.Refreshed
  - System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  langs:
  - csharp
  name: TypeDescriptor
  nameWithType: TypeDescriptor
  fullName: System.ComponentModel.TypeDescriptor
  type: Class
  summary: "コンポーネントについては、属性、プロパティ、イベントなどの特性に関する情報を提供します。 このクラスは継承できません。"
  remarks: ".NET Framework には、型のメタデータにアクセスする&2; つの方法: リフレクション<xref:System.Reflection?displayProperty=fullName>名前空間、および TypeDescriptor クラス</xref:System.Reflection?displayProperty=fullName>で提供される API <xref:System.Object.GetType%2A>ルート<xref:System.Object>クラス</xref:System.Object>のメソッド</xref:System.Object.GetType%2A>でその基礎部分が確立されるため、リフレクションはすべての種類で使用できる一般的な機構 対象の型のコンパイル後に変更することはできません、型が返されます情報は、拡張可能ではありません。 詳細については、トピックを参照してください。[リフレクション](~/add/includes/ajax-current-ext-md.md)です。       これに対し、TypeDescriptor は、コンポーネント、拡張可能な検査メカニズム: を実装する、クラス、<xref:System.ComponentModel.IComponent>インターフェイス</xref:System.ComponentModel.IComponent>。 リフレクションとは異なり、メソッドは検査されません。 TypeDescriptor は、ターゲット コンポーネントの<xref:System.ComponentModel.Component.Site%2A>。</xref:System.ComponentModel.Component.Site%2A>を介して使用できるいくつかのサービスによって動的に拡張できます。 次の表は、これらのサービスを示します。      |サービス名 |説明 |  |------------------|-----------------|  |<xref:System.ComponentModel.IExtenderProvider>|コンポーネントに余分なプロパティを提供する<xref:System.Windows.Forms.ToolTip>などの別のクラスを有効にします |。  |<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>|コンポーネントによって公開される標準のメタデータを変更する別のオブジェクトを有効にします |。  |<xref:System.ComponentModel.ICustomTypeDescriptor>|TypeDescriptor の標準的な検査メカニズムを置き換えて、独自のメタデータを完全に動的に指定するクラスを有効にします |。      TypeDescriptor によって提供される機能拡張により、デザイン時のインフラストラクチャの構築に役立つ TypeDescriptor は、実際のランタイム表現を異なるコンポーネントのデザイン時の表示</xref:System.ComponentModel.ICustomTypeDescriptor></xref:System.ComponentModel.Design.ITypeDescriptorFilterService></xref:System.Windows.Forms.ToolTip></xref:System.ComponentModel.IExtenderProvider>。       TypeDescriptor のすべてのメソッドは`static`します。 このクラスのインスタンスを作成することはできませんし、このクラスは継承できません。       プロパティを設定して、イベントの値の&2; つの方法: コンポーネント クラス内の指定や、デザイン時に変更します。 TypeDescriptor のオーバー ロードされたメソッドが&2; つの異なる型のパラメーターを受け取るため、2 つの方法は、これらの値を設定できますが、: クラス型またはオブジェクト インスタンス。       TypeDescriptor の情報にアクセスするし、オブジェクトのインスタンスが存在する、コンポーネントに対して呼び出されるメソッドを使用します。 オブジェクトのインスタンスがあるない場合にのみ、クラス型に対して呼び出されるメソッドを使用します。       プロパティとイベントは、速度の TypeDescriptor によってキャッシュされます。 通常、これらは定数オブジェクトの有効期間です。 ただし、拡張プロバイダーとデザイナーは、一連のオブジェクトのプロパティを変更できます。 この場合は、次に、<xref:System.ComponentModel.TypeDescriptor.Refresh%2A>キャッシュを更新するメソッドを呼び出す必要があります</xref:System.ComponentModel.TypeDescriptor.Refresh%2A>。"
  syntax:
    content: public sealed class TypeDescriptor
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  id: AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddAttributes(Object,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "対象コンポーネントのインスタンスにクラス レベルの属性を追加します。"
  remarks: "AddAttributes メソッドは、クラス レベルの属性を指定したコンポーネントのインスタンスに追加します。 これを使用してアプリケーションの一般的な要件であるため、[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]クラスに既に存在する属性を持つ指定した属性をマージする型説明プロバイダーを作成することで Windows フォーム デザイナーのプロパティ ウィンドウでこのメソッドを提供するショートカットです。 戻り値は、属性を追加するために使用された型説明プロバイダーです。 このプロバイダーに渡すことが後で、<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>メソッドに追加された属性は不要になったとき</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>。"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider AddAttributes (object instance, Attribute[] attributes);
    parameters:
    - id: instance
      type: System.Object
      description: "対象コンポーネントのインスタンス。"
    - id: attributes
      type: System.Attribute[]
      description: "<xref:System.Attribute>コンポーネントのクラスに追加するオブジェクト</xref:System.Attribute>の配列"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "新しく作成された<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>指定された属性の追加に使用されました。"
  overload: System.ComponentModel.TypeDescriptor.AddAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一方または両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  id: AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddAttributes(Type,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "対象コンポーネントの型をクラス レベルの属性を追加します。"
  remarks: "AddAttributes メソッドは、指定したコンポーネントの型をクラス レベルの属性を追加します。 これを使用してアプリケーションの一般的な要件であるため、[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]クラスに既に存在する属性を持つ指定した属性をマージする型説明プロバイダーを作成することで Windows フォーム デザイナーのプロパティ ウィンドウでこのメソッドを提供するショートカットです。 戻り値は、属性を追加するために使用された型説明プロバイダーです。 このプロバイダーに渡すことが後で、<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>メソッドは、追加された属性は不要になったとします</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>。"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider AddAttributes (Type type, Attribute[] attributes);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    - id: attributes
      type: System.Attribute[]
      description: "<xref:System.Attribute>コンポーネントのクラスに追加するオブジェクト</xref:System.Attribute>の配列"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "新しく作成された<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>指定された属性の追加に使用されました。"
  overload: System.ComponentModel.TypeDescriptor.AddAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一方または両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  id: AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddEditorTable(Type,Hashtable)
  nameWithType: TypeDescriptor.AddEditorTable(Type,Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(Type,Hashtable)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたエディターの基本型のエディター テーブルを追加します。"
  remarks: "AddEditorTable メソッドでは、特定のエディターの基本型のエディター テーブルを追加します。 通常、エディターは、コンポーネントのメタデータとして指定されます。 ただし場合の要求されたエディター基本のメタデータ型が見つからない、関連付けられているコンポーネントに<xref:System.ComponentModel.TypeDescriptor>1 つが見つかった場合に、エディターの種類のエディター テーブルを検索します</xref:System.ComponentModel.TypeDescriptor>。 エディター テーブルは、型記述子に追加されると、削除することはできませんし、型記述子によって所有されてです。 型記述子では、次の表を自由に変更可能性があります。       エディター テーブルの形式は、値として、キーおよびエディターとしてのデータ型を使用します。 テーブル内のエントリの値の部分では、エディターのインスタンスを表します。 これは、3 つの値のいずれかを持つことができます。 文字列が含まれているオブジェクトの種類、および、読み込み、型の完全修飾名は、この型記述子を引き継ぎます。 型が含まれている場合はこの型のインスタンスを作成してエディターを取得します。 最後に、値の部分では、実際のエディター インスタンスを含めることがあります。 型記述子では、インスタンスに、エディターを解決する場合は、将来の使用については、表に、インスタンスが格納されます。"
  syntax:
    content: public static void AddEditorTable (Type editorBaseType, System.Collections.Hashtable table);
    parameters:
    - id: editorBaseType
      type: System.Type
      description: "エディター テーブルを追加するエディターの基本型です。 この型のテーブルが既に存在する場合は、このメソッドは何もします。"
    - id: table
      type: System.Collections.Hashtable
      description: "The <xref href=&quot;System.Collections.Hashtable&quot;></xref> to add."
  overload: System.ComponentModel.TypeDescriptor.AddEditorTable*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "コンポーネントの&1; つのインスタンスの型説明プロバイダーを追加します。"
  remarks: "AddProvider メソッドでは、提供がコンポーネントの&1; つのインスタンスの情報を入力する型説明プロバイダーを追加します。 この方法により、プロバイダーのかどうかは、プロバイダーが追加<xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A>インスタンスが既に存在するので、メソッドは呼び出されません</xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A>。       コンポーネントの完了を妨げることはないために、このメソッドは、コンポーネントへの強い参照を保持できません。       同じ型またはオブジェクトの複数の型説明プロバイダーを追加することができます。 この場合、最初型説明プロバイダーが発生しました型情報を提供するが排他的に使用されます。 型情報プロバイダーは、スタックに格納される、ために追加された最新のプロバイダーが照会された最初の&1; つになります。 この動作により、AddProvider と<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>にプッシュおよびポップを使用する方法の特定のシナリオでの必要に応じて説明のプロバイダーを入力します</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>。       かどうかは成功すると、このメソッドは、<xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Object%29>メソッドを`instance`パラメーター</xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Object%29> 。      > [!NOTE] > このメソッドの&2; つのバージョンが異なるスコープを持つ結果を生成します。 <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>を受け取るメソッド、<xref:System.Object>パラメーターが指定されたコンポーネントのインスタンスを&1; つだけに影響します</xref:System.Object></xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>。 これに対し、他のオーバー ロードするを取り、<xref:System.Type>パラメーター、その型によって記述されたコンポーネントのすべてのインスタンスに影響を与えます</xref:System.Type>。       使用して、<xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>メソッドを部分的に信頼されたコードから呼び出す必要がある場合</xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>。"
  syntax:
    content: public static void AddProvider (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: instance
      type: System.Object
      description: "対象コンポーネントのインスタンス。"
  overload: System.ComponentModel.TypeDescriptor.AddProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "コンポーネント クラスの型説明プロバイダーを追加します。"
  remarks: "AddProvider メソッドは、その提供の型情報を指定したクラス、派生クラス、およびこれらの型のすべてのインスタンス型説明プロバイダーを追加します。      > [!NOTE] >、`type`パラメーターは、インターフェイスを含む任意の型を指定できます。 たとえば、カスタム型およびすべてのコンポーネントのインスタンス情報を提供するには指定した`typeof(IComponent)`です。 渡す`typeof(object)`が呼び出すプロバイダーからのすべての型の型情報を提供します。       オブジェクトの完了を妨げることはないために、このメソッドは、任意のオブジェクトへの強い参照を保持できません。       同じ型またはオブジェクトの複数の型説明プロバイダーを追加することができます。 この場合、最初型説明プロバイダーが発生しました型情報を提供するが排他的に使用されます。 型情報プロバイダーが保存されるため、スタックで、追加された最新のプロバイダーを照会された最初の&1; つとなります。 この動作により、AddProvider と<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>にプッシュおよびポップを使用する方法の特定のシナリオでの必要に応じて説明のプロバイダーを入力します</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>。       かどうかは成功すると、このメソッドは、<xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Type%29>メソッドを`type`パラメーター</xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Type%29> 。      > [!NOTE] > このメソッドの&2; つのバージョンが異なるスコープを持つ結果を生成します。 <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>を受け取るメソッド、<xref:System.Object>パラメーターが指定されたコンポーネントのインスタンスを&1; つだけに影響します</xref:System.Object></xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>。 これに対し、他のオーバー ロードするを取り、<xref:System.Type>パラメーター、その型によって記述されたコンポーネントのすべてのインスタンスに影響を与えます</xref:System.Type>。       使用して、<xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>メソッドを部分的に信頼されたコードから呼び出す必要がある場合</xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>。"
  syntax:
    content: public static void AddProvider (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
  overload: System.ComponentModel.TypeDescriptor.AddProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "コンポーネントの&1; つのインスタンスの型説明プロバイダーを追加します。"
  remarks: "このメソッドは、部分的に信頼されたコードから呼び出すことができます。 場合<xref:System.Security.Permissions.TypeDescriptorPermissionFlags>が定義されている場合、呼び出し元できますプロバイダーを登録する指定したインスタンスの型が部分的に信頼されたもある場合</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>。       使用して、<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>メソッドの場合は、部分的に信頼されたコードから呼び出す必要はありません</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>。"
  syntax:
    content: public static void AddProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: instance
      type: System.Object
      description: "対象コンポーネントのインスタンス。"
  overload: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "コンポーネント クラスの型説明プロバイダーを追加します。"
  remarks: "このメソッドは、部分的に信頼されたコードから呼び出すことができます。 場合<xref:System.Security.Permissions.TypeDescriptorPermissionFlags>が定義されている、呼び出し元は、ことができますプロバイダーを登録する指定した型の部分的な信頼でもある場合</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>。       使用して、<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>メソッドの場合は、部分的に信頼されたコードから呼び出す必要はありません</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>。"
  syntax:
    content: public static void AddProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
  overload: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  id: ComNativeDescriptorHandler
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
  fullName: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得またはターゲット コンポーネントのコンポーネント オブジェクト モデル (COM) 型情報のプロバイダーを設定します。"
  remarks: "ComNativeDescriptorHandler プロパティおよび<xref:System.ComponentModel.IComNativeDescriptorHandler>インターフェイスは廃止されました</xref:System.ComponentModel.IComNativeDescriptorHandler>。 詳細については、次を参照してください、<xref:System.ComponentModel.TypeDescriptor.ComObjectType%2A>プロパティ。</xref:System.ComponentModel.TypeDescriptor.ComObjectType%2A> 。"
  syntax:
    content: public static System.ComponentModel.IComNativeDescriptorHandler ComNativeDescriptorHandler { get; set; }
    return:
      type: System.ComponentModel.IComNativeDescriptorHandler
      description: "<xref href=&quot;System.ComponentModel.IComNativeDescriptorHandler&quot;> </xref> COM 型情報プロバイダーを表すインスタンス。"
  overload: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.ComObjectType
  id: ComObjectType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
  fullName: System.ComponentModel.TypeDescriptor.ComObjectType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "対象コンポーネントによって表されるコンポーネント オブジェクト モデル (COM) オブジェクトの種類を取得します。"
  remarks: "ComObjectType プロパティに渡すことができる型を返す、 <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>COM 型の型説明プロバイダーを定義するメソッド</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>。       ComObjectType プロパティおよびその他のメンバーでは、このクラスで廃止された機能を置き換える<xref:System.ComponentModel.IComNativeDescriptorHandler>インターフェイス</xref:System.ComponentModel.IComNativeDescriptorHandler>。 COM オブジェクトの間のマッピング レイヤーを実装して<xref:System.ComponentModel.TypeDescriptor>、追加、<xref:System.ComponentModel.TypeDescriptionProvider>をハンドル型 ComObjectType</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor> 。"
  syntax:
    content: public static Type ComObjectType { get; }
    return:
      type: System.Type
      description: "<xref:System.Type>このコンポーネントによって表される COM オブジェクトのまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>非 COM オブジェクト用です</xref:System.Type>。"
  overload: System.ComponentModel.TypeDescriptor.ComObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  id: CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateAssociation(Object,Object)
  nameWithType: TypeDescriptor.CreateAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "2 つのオブジェクト間でプライマリとセカンダリの関連付けを作成します。"
  remarks: "CreateAssociation メソッドでは、プライマリとセカンダリのオブジェクト間の関連付けを作成します。 関連付けが作成されると、デザイナー、またはその他のフィルター メカニズムは、主要なオブジェクトのプロパティ セットにいずれかのオブジェクトにルーティングするプロパティを追加できます。 主要なオブジェクトに対するプロパティの呼び出しが行われたときに、<xref:System.ComponentModel.TypeDescriptor.GetAssociation%2A>メソッドは、型パラメーターに関連付けられている実際のオブジェクト インスタンスを解決するのには呼び出されます</xref:System.ComponentModel.TypeDescriptor.GetAssociation%2A>。       A<xref:System.WeakReference>ために使用されるは、プライマリとセカンダリのオブジェクト間の関連付けを維持そのため、このメソッドは防止しませんいずれかのオブジェクトされる完了し、ガベージ コレクションによって回収される。</xref:System.WeakReference> 。"
  syntax:
    content: public static void CreateAssociation (object primary, object secondary);
    parameters:
    - id: primary
      type: System.Object
      description: "プライマリ<xref:System.Object>。</xref:System.Object>"
    - id: secondary
      type: System.Object
      description: "セカンダリ<xref:System.Object>。</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.CreateAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>primary</code>等しい<code>secondary</code>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  id: CreateDesigner(System.ComponentModel.IComponent,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateDesigner(IComponent,Type)
  nameWithType: TypeDescriptor.CreateDesigner(IComponent,Type)
  fullName: System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたコンポーネントに関連付けられたデザイナーおよび指定したデザイナーの型のインスタンスを作成します。"
  remarks: "このメソッドは、有効な見つけられない場合<xref:System.ComponentModel.DesignerAttribute>、デザイナーのクラス階層を検索します</xref:System.ComponentModel.DesignerAttribute>。 返すかどうかは、クラスの階層構造で、デザイナーを見つけられない、`null`です。"
  syntax:
    content: public static System.ComponentModel.Design.IDesigner CreateDesigner (System.ComponentModel.IComponent component, Type designerBaseType);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>デザイナーに関連付けるコンポーネントを指定します。"
    - id: designerBaseType
      type: System.Type
      description: "A<xref:System.Type>を作成するデザイナーの型を表す</xref:System.Type>。"
    return:
      type: System.ComponentModel.Design.IDesigner
      description: "<xref href=&quot;System.ComponentModel.Design.IDesigner&quot;> </xref> 、コンポーネントのデザイナーのインスタンスであるか、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>デザイナーが見つからない場合。"
  overload: System.ComponentModel.TypeDescriptor.CreateDesigner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  id: CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateEvent(Type,EventDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "既存の渡されたときに既存のイベント記述子と同じである新しいイベント記述子を作成<xref href=&quot;System.ComponentModel.EventDescriptor&quot;></xref>です。"
  syntax:
    content: public static System.ComponentModel.EventDescriptor CreateEvent (Type componentType, System.ComponentModel.EventDescriptor oldEventDescriptor, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "新しいイベントを作成する対象のコンポーネントの型。"
    - id: oldEventDescriptor
      type: System.ComponentModel.EventDescriptor
      description: "既存のイベント情報です。"
    - id: attributes
      type: System.Attribute[]
      description: "新しい属性。"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "新しい<xref href=&quot;System.ComponentModel.EventDescriptor&quot;></xref>は指定されたメタデータ属性と既存のメタデータ属性とマージします。"
  overload: System.ComponentModel.TypeDescriptor.CreateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateEvent(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "型で指定したイベントから記述子の情報を動的に生成することによって、既存のイベント記述子と同じである新しいイベント記述子を作成します。"
  syntax:
    content: public static System.ComponentModel.EventDescriptor CreateEvent (Type componentType, string name, Type type, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "コンポーネント イベントの種類が存在します。"
    - id: name
      type: System.String
      description: "イベントの名前。"
    - id: type
      type: System.Type
      description: "イベントを処理するデリゲートの型。"
    - id: attributes
      type: System.Attribute[]
      description: "このイベントの属性。"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>型にバインドされました。"
  overload: System.ComponentModel.TypeDescriptor.CreateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "別のデータ型の代わりに使用できるオブジェクトを作成します。"
  remarks: "CreateInstance メソッドは検索、 <xref:System.ComponentModel.TypeDescriptionProvider>、指定したに関連付けられている`objectType`データ型</xref:System.ComponentModel.TypeDescriptionProvider>。 このメソッドは、最初から型説明プロバイダーを取得を試みます、`provider`パラメーター。 プロバイダーの検索できない場合は、独自の内部テーブル (これらのエントリは、前の呼び出しによって作成された<xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>).</xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> プロバイダーが検出されると、このメソッドはそのオブジェクトを作成呼び出しを委任します。"
  syntax:
    content: public static object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "提供するサービス プロバイダー、 <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>サービス。 このパラメーターを指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    - id: objectType
      type: System.Type
      description: "<xref:System.Type>を作成するオブジェクト</xref:System.Type>。"
    - id: argTypes
      type: System.Type[]
      description: "省略可能なオブジェクトのコンス トラクターに渡されるパラメーターの型の配列。 このパラメーターを指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または長さ&0; の配列。"
    - id: args
      type: System.Object[]
      description: "省略可能なオブジェクトのコンス トラクターに渡すパラメーターの値の配列。 ない場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>数の要素の必要がありますと同じである、`argTypes`です。"
    return:
      type: System.Object
      description: "関連付けられている場合は、代替データの型のインスタンス<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>以外、それ以外の場合は、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.TypeDescriptor.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>objectType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, or <code>args</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> when <code>argTypes</code> is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argTypes</code>および<code>args</code>別の要素数を持ちます。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  id: CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateProperty(Type,PropertyDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した既存を使用して、既存のプロパティ記述子から新しいプロパティ記述子を作成<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;></xref>と属性の配列。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor CreateProperty (Type componentType, System.ComponentModel.PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>のメンバーであるプロパティのコンポーネント</xref:System.Type>。"
    - id: oldPropertyDescriptor
      type: System.ComponentModel.PropertyDescriptor
      description: "既存のプロパティ記述子。"
    - id: attributes
      type: System.Attribute[]
      description: "このプロパティの新しい属性。"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "新しい<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;></xref>既存のメタデータ属性のトピックとマージされた指定されたメタデータ属性を持ちます。"
  overload: System.ComponentModel.TypeDescriptor.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateProperty(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "作成し、指定したプロパティ名を使用して、型、型、および属性の配列をプロパティ記述子を動的にバインドします。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor CreateProperty (Type componentType, string name, Type type, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>のメンバーであるプロパティのコンポーネント</xref:System.Type>。"
    - id: name
      type: System.String
      description: "プロパティの名前です。"
    - id: type
      type: System.Type
      description: "<xref:System.Type>プロパティの</xref:System.Type>。"
    - id: attributes
      type: System.Attribute[]
      description: "このプロパティの新しい属性。"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>と、指定された型にバインドされた既存のメタデータ属性のトピックとマージされた指定されたメタデータ属性を持ちます。"
  overload: System.ComponentModel.TypeDescriptor.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  id: GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAssociation(Type,Object)
  nameWithType: TypeDescriptor.GetAssociation(Type,Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたプライマリ オブジェクトに関連付けられている型のインスタンスを返します。"
  remarks: "以前の関連付けが行われて場合、`type`パラメーターを使用して、 <xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>、メソッド、GetAssociation メソッドは、要求された型に対して呼び出す正しいセカンダリ オブジェクトを返します</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>。 それ以外の場合、GetAssociation 検索を互換性のあるデザイナー`type`し、見つかった場合は、デザイナーを返します。 このメソッドが戻ることはありません`null`です。       A<xref:System.WeakReference>ために使用されるは、プライマリとセカンダリのオブジェクト間の関連付けを維持そのため、このメソッドは防止しませんプライマリまたはセカンダリのいずれかのオブジェクトされる完了し、ガベージ コレクションによって回収される。</xref:System.WeakReference> 。"
  syntax:
    content: public static object GetAssociation (Type type, object primary);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    - id: primary
      type: System.Object
      description: "関連付けのプライマリ オブジェクトです。"
    return:
      type: System.Object
      description: "関連付けが存在する場合は、プライマリ オブジェクトに関連付けられているセカンダリの型のインスタンスそれ以外の場合、 <code> primary </code>関連付けが存在する場合が指定されていません。"
  overload: System.ComponentModel.TypeDescriptor.GetAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  id: GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Object)
  nameWithType: TypeDescriptor.GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたコンポーネントの属性のコレクションを返します。"
  remarks: "によって返される属性、<xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>拡張プロバイダーを一覧表示する元のコンポーネントのソースから動的にメソッドを変更することがあります (<xref:System.ComponentModel.IExtenderProvider>)、サービスをフィルター処理 (<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>)、およびフィルターの属性です</xref:System.ComponentModel.Design.ITypeDescriptorFilterService></xref:System.ComponentModel.IExtenderProvider></xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>。       カスタム属性を定義するときに<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>に設定`true`、オーバーライドする必要があります、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>一意にするプロパティ</xref:System.Attribute.TypeId%2A?displayProperty=fullName></xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>。 属性のすべてのインスタンスが一意の場合は、オーバーライド<xref:System.Attribute.TypeId%2A?displayProperty=fullName>、属性のオブジェクト id を取得します</xref:System.Attribute.TypeId%2A?displayProperty=fullName>。 値を返す場合だけ、属性の複数のインスタンスが一意で、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>を等しいかどうかを返すような場合は</xref:System.Attribute.TypeId%2A?displayProperty=fullName>。 たとえば、いくつかの属性には、一意のキーとして機能するコンス トラクターのパラメーターがあります。 これらの属性からコンス トラクターのパラメーターの値を返す、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>プロパティ</xref:System.Attribute.TypeId%2A?displayProperty=fullName>。      > [!NOTE] > の既定の実装<xref:System.Attribute.TypeId%2A?displayProperty=fullName>の値に関係なく型 id を返します、<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>プロパティ</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName></xref:System.Attribute.TypeId%2A?displayProperty=fullName>。 複数のインスタンスを返すために、<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>属性から、 <xref:System.ComponentModel.AttributeCollection>、属性をオーバーライドする必要があります、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>プロパティ</xref:System.Attribute.TypeId%2A?displayProperty=fullName></xref:System.ComponentModel.AttributeCollection></xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>。"
  example:
  - For an example of this method, see the <xref:System.ComponentModel.AttributeCollection.Matches%2A> method.
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (object component);
    parameters:
    - id: component
      type: System.Object
      description: "属性を取得するコンポーネントです。"
    return:
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>コンポーネントの属性を含むです。 場合<code> component </code>は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、このメソッドは、空のコレクションを返します。"
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  id: GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Type)
  nameWithType: TypeDescriptor.GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "コンポーネントの指定した型の属性のコレクションを返します。"
  remarks: "オブジェクトのインスタンスがあるない場合にのみ、このバージョンのこのメソッドを呼び出します。       属性の場合<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>&quot;éý&quot;`true`属性のコレクションが重複するインスタンスを削除します</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>。 これらは、インスタンスを<xref:System.Attribute.TypeId%2A?displayProperty=fullName>プロパティと等しい値を返します</xref:System.Attribute.TypeId%2A?displayProperty=fullName>。       カスタム属性を定義するときに<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>に設定`true`、オーバーライドする必要があります、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>一意にするプロパティ</xref:System.Attribute.TypeId%2A?displayProperty=fullName></xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>。 属性のすべてのインスタンスが一意の場合は、オーバーライド<xref:System.Attribute.TypeId%2A?displayProperty=fullName>、属性のオブジェクト id を取得します</xref:System.Attribute.TypeId%2A?displayProperty=fullName>。 値を返す場合だけ、属性の複数のインスタンスが一意で、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>を等しいかどうかを返すような場合は</xref:System.Attribute.TypeId%2A?displayProperty=fullName>。 たとえば、いくつかの属性には、一意のキーとして機能するコンス トラクターのパラメーターがあります。 これらの属性からコンス トラクターのパラメーターの値を返す、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>プロパティ</xref:System.Attribute.TypeId%2A?displayProperty=fullName>。      > [!NOTE] > の既定の実装<xref:System.Attribute.TypeId%2A?displayProperty=fullName>の値に関係なく型 id を返します、<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>プロパティ</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName></xref:System.Attribute.TypeId%2A?displayProperty=fullName>。 複数のインスタンスを返すために、<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>属性から、 <xref:System.ComponentModel.AttributeCollection>、属性をオーバーライドする必要があります、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>プロパティ</xref:System.Attribute.TypeId%2A?displayProperty=fullName></xref:System.ComponentModel.AttributeCollection></xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>。"
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    return:
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>コンポーネントの型の属性を持つ。 コンポーネントが場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、このメソッドは、空のコレクションを返します。"
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  id: GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Object,Boolean)
  nameWithType: TypeDescriptor.GetAttributes(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたコンポーネントおよびカスタム型記述子が作成されたことを示すブール値の属性のコレクションを返します。"
  remarks: "によって返される属性、<xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>メソッドは、元のコンポーネント拡張プロバイダーを一覧表示する動的に変更される可能性 (<xref:System.ComponentModel.IExtenderProvider>)、サービスをフィルター処理 (<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>)、およびフィルターの属性です</xref:System.ComponentModel.Design.ITypeDescriptorFilterService></xref:System.ComponentModel.IExtenderProvider></xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>。       カスタム属性を定義するときに<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>に設定`true`、オーバーライドする必要があります、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>一意にするプロパティ</xref:System.Attribute.TypeId%2A?displayProperty=fullName></xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>。 属性のすべてのインスタンスが一意の場合は、オーバーライド<xref:System.Attribute.TypeId%2A?displayProperty=fullName>、属性のオブジェクト id を取得します</xref:System.Attribute.TypeId%2A?displayProperty=fullName>。 値を返す場合だけ、属性の複数のインスタンスが一意で、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>を等しいかどうかを返すような場合は</xref:System.Attribute.TypeId%2A?displayProperty=fullName>。 たとえば、いくつかの属性には、一意のキーとして機能するコンス トラクターのパラメーターがあります。 これらの属性からコンス トラクターのパラメーターの値を返す、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>プロパティ</xref:System.Attribute.TypeId%2A?displayProperty=fullName>。      > [!NOTE] > の既定の実装<xref:System.Attribute.TypeId%2A?displayProperty=fullName>の値に関係なく型 id を返します、<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>プロパティ</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName></xref:System.Attribute.TypeId%2A?displayProperty=fullName>。 複数のインスタンスを返すために、<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>属性から、 <xref:System.ComponentModel.AttributeCollection>、属性をオーバーライドする必要があります、<xref:System.Attribute.TypeId%2A?displayProperty=fullName>プロパティ</xref:System.Attribute.TypeId%2A?displayProperty=fullName></xref:System.ComponentModel.AttributeCollection></xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>。"
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "属性を取得するコンポーネントです。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合に使用するカスタム型記述子から属性のベースライン セット`component`の種類は<xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>コンポーネントの属性を持つ。 コンポーネントが場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、このメソッドは、空のコレクションを返します。"
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  id: GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Object)
  nameWithType: TypeDescriptor.GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "既定の型記述子を使用して指定されたコンポーネントのクラスの名前を返します。"
  remarks: "通常、このメソッドは、完全を返します<xref:System.Type>の名前、`component`パラメーターの型</xref:System.Type>。 たとえば、ボタンのクラス名は、&quot;System.Windows.Forms.Button&quot;がします。 場合`component`実装<xref:System.ComponentModel.ICustomTypeDescriptor>、代替名を返すことができます</xref:System.ComponentModel.ICustomTypeDescriptor>。       このメソッドはオーバー ロードされたのと同じ<xref:System.ComponentModel.TypeDescriptor.GetClassName%28System.Object%2CSystem.Boolean%29>の&2; 番目のパラメーターを持つメソッド`false`</xref:System.ComponentModel.TypeDescriptor.GetClassName%28System.Object%2CSystem.Boolean%29>。"
  syntax:
    content: public static string GetClassName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>必要なクラス名</xref:System.Object>。"
    return:
      type: System.String
      description: "A<xref:System.String>指定されたコンポーネントのクラスの名前を含むします</xref:System.String>。"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  id: GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Type)
  nameWithType: TypeDescriptor.GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型のクラスの名前を返します。"
  remarks: "このメソッドは、指定した型のキャッシュされたカスタム型記述子を使用して、関連するクラス名を検出します。"
  syntax:
    content: public static string GetClassName (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    return:
      type: System.String
      description: "A<xref:System.String>指定されたコンポーネントの種類のクラスの名前を含むします</xref:System.String>。"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>componentType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  id: GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Object,Boolean)
  nameWithType: TypeDescriptor.GetClassName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "カスタム型記述子を使用して指定されたコンポーネントのクラスの名前を返します。"
  remarks: "通常、このメソッドは、完全を返します<xref:System.Type>の名前、`component`パラメーターの型</xref:System.Type>。 たとえば、ボタンのクラス名は、&quot;System.Windows.Forms.Button&quot;がします。 場合、`component`パラメーターを実装する<xref:System.ComponentModel.ICustomTypeDescriptor>、代替名を返すことができます</xref:System.ComponentModel.ICustomTypeDescriptor>。"
  syntax:
    content: public static string GetClassName (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>必要なクラス名</xref:System.Object>。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム型説明情報を考慮するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.String
      description: "A<xref:System.String>指定されたコンポーネントのクラスの名前を含むします</xref:System.String>。"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  id: GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetComponentName(Object)
  nameWithType: TypeDescriptor.GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "既定の型記述子を使用して指定されたコンポーネントの名前を返します。"
  remarks: "通常、このメソッドは、1 つが存在する場合、コンポーネントのサイトの名前を返します。 たとえば、ボタンのクラス名は、&quot;System.Windows.Forms.Button&quot;がします。       このメソッドはオーバー ロードされたのと同じ<xref:System.ComponentModel.TypeDescriptor.GetComponentName%28System.Object%2CSystem.Boolean%29>の&2; 番目のパラメーターを持つメソッド`false`</xref:System.ComponentModel.TypeDescriptor.GetComponentName%28System.Object%2CSystem.Boolean%29>。       このメソッドは、コンポーネントのインスタンスの名前を取得するデザイン時に使用されます。"
  syntax:
    content: public static string GetComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>必要なクラス名</xref:System.Object>。"
    return:
      type: System.String
      description: "A <xref:System.String>、指定されたコンポーネントの名前を含むまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>コンポーネント名が存在しない場合</xref:System.String>。"
  overload: System.ComponentModel.TypeDescriptor.GetComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  id: GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetComponentName(Object,Boolean)
  nameWithType: TypeDescriptor.GetComponentName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "カスタム型記述子を使用して、指定したコンポーネントの名前を返します。"
  remarks: "このメソッドは、コンポーネントのインスタンスの名前を取得するデザイン時に使用されます。 通常、このメソッドは、1 つが存在する場合、コンポーネントのサイトの名前を返します。 たとえば、ボタンのクラス名は、&quot;System.Windows.Forms.Button&quot;がします。 コンポーネントを実装する場合、<xref:System.ComponentModel.ICustomTypeDescriptor>インターフェイス、その代替名を返すことができます</xref:System.ComponentModel.ICustomTypeDescriptor>。"
  syntax:
    content: public static string GetComponentName (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>必要なクラス名</xref:System.Object>。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム型説明情報を考慮するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.String
      description: "指定したコンポーネントのクラスの名前または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>コンポーネント名が存在しない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  id: GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Object)
  nameWithType: TypeDescriptor.GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたコンポーネントの種類の型コンバーターを返します。"
  remarks: "このメソッドは、 <xref:System.ComponentModel.TypeConverterAttribute>。</xref:System.ComponentModel.TypeConverterAttribute>を調べることで、適切な型コンバーターを検索します。 見つからない場合、 <xref:System.ComponentModel.TypeConverterAttribute>、プリミティブ型が見つかるまで、クラスの基底クラスの階層の走査</xref:System.ComponentModel.TypeConverterAttribute>。       このメソッドはオーバー ロードされたのと同じ<xref:System.ComponentModel.TypeDescriptor.GetConverter%2A>の&2; 番目のパラメーターを持つメソッド`false`</xref:System.ComponentModel.TypeDescriptor.GetConverter%2A>。"
  example:
  - For an example of using this method, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (object component);
    parameters:
    - id: component
      type: System.Object
      description: "コンバーターを取得するコンポーネント。"
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref>指定されたコンポーネント。"
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  id: GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Type)
  nameWithType: TypeDescriptor.GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型の型コンバーターを返します。"
  remarks: "オブジェクトのインスタンスがあるない場合にのみ、このバージョンのこのメソッドを呼び出します。       このメソッドは<xref:System.ComponentModel.TypeConverterAttribute>。</xref:System.ComponentModel.TypeConverterAttribute>を調べることで、適切な型コンバーターを検索します。 見つからない場合、 <xref:System.ComponentModel.TypeConverterAttribute>、プリミティブ型が見つかるまで、クラスの基底クラスの階層の走査</xref:System.ComponentModel.TypeConverterAttribute>。"
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref>指定の種類。"
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  id: GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Object,Boolean)
  nameWithType: TypeDescriptor.GetConverter(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "カスタム型記述子を使用して指定されたコンポーネントの種類の型コンバーターを返します。"
  remarks: "このメソッドは<xref:System.ComponentModel.TypeConverterAttribute>。</xref:System.ComponentModel.TypeConverterAttribute>を検出することによって、適切な型コンバーターを検索します。 見つからない場合、 <xref:System.ComponentModel.TypeConverterAttribute>、プリミティブ型が見つかるまで、クラスの基底クラスの階層の走査</xref:System.ComponentModel.TypeConverterAttribute>。"
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "コンバーターを取得するコンポーネント。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム型説明情報を考慮するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref>指定されたコンポーネント。"
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  id: GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Object)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定したコンポーネントの既定のイベントを返します。"
  remarks: "このメソッドはオーバー ロードされたのと同じ<xref:System.ComponentModel.TypeDescriptor.GetDefaultEvent%28System.Object%2CSystem.Boolean%29>の&2; 番目のパラメーターを持つメソッド`false`</xref:System.ComponentModel.TypeDescriptor.GetDefaultEvent%28System.Object%2CSystem.Boolean%29>。"
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (object component);
    parameters:
    - id: component
      type: System.Object
      description: "イベントを取得するコンポーネント。"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>の既定のイベントを伴うまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>イベントがない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  id: GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Type)
  nameWithType: TypeDescriptor.GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "コンポーネントの指定した型の既定のイベントを返します。"
  remarks: "オブジェクトのインスタンスがあるない場合にのみ、このバージョンのこのメソッドを呼び出します。"
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>の既定のイベントを伴うまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>イベントがない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  id: GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "カスタム型記述子を持つコンポーネントの既定のイベントを返します。"
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "イベントを取得するコンポーネント。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム型説明情報を考慮するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>の既定のイベントを伴うまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>イベントがない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  id: GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Object)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたコンポーネントの既定のプロパティを返します。"
  remarks: "場合、`component`パラメーターは`null`、このメソッドが戻る`null`です。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (object component);
    parameters:
    - id: component
      type: System.Object
      description: "既定のプロパティを取得するコンポーネント。"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>既定のプロパティ、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>プロパティがない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  id: GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Type)
  nameWithType: TypeDescriptor.GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "コンポーネントの指定した型の既定のプロパティを返します。"
  remarks: "オブジェクトのインスタンスがあるない場合にのみ、このバージョンのこのメソッドを呼び出します。       場合、`componentType`パラメーターは`null`、このメソッドが戻る`null`です。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>プロパティのデータ型を取得するクラスを表す</xref:System.Type>"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>既定のプロパティ、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>プロパティがない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  id: GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "カスタム型記述子を使用して指定されたコンポーネントの既定のプロパティを返します。"
  remarks: "場合、`component`パラメーターは`null`、このメソッドが戻る`null`です。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "既定のプロパティを取得するコンポーネント。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム型説明情報を考慮するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>既定のプロパティ、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>プロパティがない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  id: GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Object,Type)
  nameWithType: TypeDescriptor.GetEditor(Object,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたコンポーネントの基本型を指定してエディターを取得します。"
  remarks: "型`editorBaseType`は通常<xref:System.Drawing.Design.UITypeEditor>、他の種類を使用することもできますが、(たとえば、<xref:System.ComponentModel.ComponentEditor>と<xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       プロパティに対して複数のエディターを定義することができます。 使用するエディターを選択するのにには、このメソッドを使用します。"
  syntax:
    content: public static object GetEditor (object component, Type editorBaseType);
    parameters:
    - id: component
      type: System.Object
      description: "エディターを取得するコンポーネント。"
    - id: editorBaseType
      type: System.Type
      description: "A<xref:System.Type>を検索するエディターの基本型を表す</xref:System.Type>。"
    return:
      type: System.Object
      description: "指定されたエディターの種類にキャストできるエディターのインスタンスまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>要求された型のエディターが見つからない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  id: GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Type,Type)
  nameWithType: TypeDescriptor.GetEditor(Type,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Type,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型の基本型を指定してエディターを返します。"
  remarks: "型`editorBaseType`は通常<xref:System.Drawing.Design.UITypeEditor>、その他の種類を使用することもできますが、(たとえば<xref:System.ComponentModel.ComponentEditor>と<xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       型に対して複数のエディターを定義することができます。 この方法を使用して、使用する&1; つを選択します。       オブジェクトのインスタンスがあるない場合にのみ、このバージョンのこのメソッドを呼び出します。"
  syntax:
    content: public static object GetEditor (Type type, Type editorBaseType);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    - id: editorBaseType
      type: System.Type
      description: "A<xref:System.Type>検索しようとしているエディターの基本型を表す</xref:System.Type>。"
    return:
      type: System.Object
      description: "指定した基本型にキャストできるエディター オブジェクトのインスタンスまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>要求された型のエディターが見つからない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  id: GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Object,Type,Boolean)
  nameWithType: TypeDescriptor.GetEditor(Object,Type,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "基本型を指定して、指定したコンポーネントのカスタム型記述子を使用してエディターを返します。"
  remarks: "型`editorBaseType`は通常<xref:System.Drawing.Design.UITypeEditor>、その他の種類を使用することもできますが、(たとえば<xref:System.ComponentModel.ComponentEditor>と<xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       プロパティに対して複数のエディターを定義することができます。 使用するエディターを選択するのにには、このメソッドを使用します。"
  syntax:
    content: public static object GetEditor (object component, Type editorBaseType, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "エディターを取得するコンポーネント。"
    - id: editorBaseType
      type: System.Type
      description: "A<xref:System.Type>を検索するエディターの基本型を表す</xref:System.Type>。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "カスタム型説明情報を考慮する必要があるかどうかを示すフラグです。"
    return:
      type: System.Object
      description: "指定されたエディターの種類にキャストできるエディターのインスタンスまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>要求された型のエディターが見つからない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  id: GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object)
  nameWithType: TypeDescriptor.GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたコンポーネントのイベントのコレクションを返します。"
  remarks: "イベントのコレクションを取得する、指定された`component`パラメーター インスタンスを提供します。 このコレクションとは異なる一連のイベント クラスを提供します。 場合、`component`パラメーターが配置された、サイトを追加またはその他のイベントを削除します。       場合`component`は`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  example:
  - For an example of this method, see the <xref:System.ComponentModel.EventDescriptorCollection.Count%2A> property.
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component);
    parameters:
    - id: component
      type: System.Object
      description: "イベントを取得するコンポーネント。"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>このコンポーネントのイベントを使用します。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  id: GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Type)
  nameWithType: TypeDescriptor.GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたコンポーネント型のイベントのコレクションを返します。"
  remarks: "オブジェクトのインスタンスがあるない場合にのみ、このバージョンのこのメソッドを呼び出します。       場合、`componentType`パラメーターは`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>このコンポーネントのイベントを使用します。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  id: GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "フィルターとして指定した属性配列を使用して、指定されたコンポーネントのイベントのコレクションを返します。"
  remarks: "イベントを`component`パラメーターが、サイトは追加したり、場合にイベントを削除するため、クラスのイベントと異なる場合が、`component`パラメーターが配置されています。       `attributes`配列が混在していることができます<xref:System.Type>と<xref:System.Attribute>オブジェクト</xref:System.Attribute></xref:System.Type>。 フィルター処理は、次のルールによって定義: - <xref:System.Type>; ワイルドカードとして扱われますを持つ任意のイベントと一致する、<xref:System.Type>属性のセットにします</xref:System.Type></xref:System.Type>。      イベントがない場合、 <xref:System.Attribute>、同じクラスのイベントに含まれていない、返される配列</xref:System.Attribute>。      属性がのインスタンスである場合、<xref:System.Attribute>クラス、イベントは、完全に一致する必要がありますまたは返される配列に含まれていません</xref:System.Attribute>。      場合、<xref:System.Attribute>インスタンスが指定されて、既定のイベントは、のインスタンスがない場合でも返される配列に含まれている、<xref:System.Attribute>イベント</xref:System.Attribute></xref:System.Attribute>。       場合`component`は`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, Attribute[] attributes);
    parameters:
    - id: component
      type: System.Object
      description: "イベントを取得するコンポーネント。"
    - id: attributes
      type: System.Attribute[]
      description: "型の配列<xref:System.Attribute>フィルターとして使用できる</xref:System.Attribute>。"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>このコンポーネントの指定した属性と一致するイベントを持つ。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  id: GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "カスタム型記述子を使用して、指定されたコンポーネントのイベントのコレクションを返します。"
  remarks: "このメソッドは、イベントのコレクションを取得する、指定された`component`パラメーター インスタンスを提供します。 一連のイベント クラスは、この異なることができます。 場合、`component`パラメーターが配置された、サイトを追加またはその他のイベントを削除します。       場合`component`は`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "イベントを取得するコンポーネント。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム型説明情報を考慮するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>このコンポーネントのイベントを使用します。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  id: GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Type,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した種類のフィルターとして指定した属性配列を使用して、コンポーネントのイベントのコレクションを返します。"
  remarks: "オブジェクトのインスタンスがあるない場合にのみ、このバージョンのこのメソッドを呼び出します。       `attributes`パラメーター配列が混在していることができます<xref:System.Type>と<xref:System.Attribute>オブジェクト</xref:System.Attribute></xref:System.Type>。 フィルター処理は、次のルールによって定義: - <xref:System.Type>; ワイルドカードとして扱われますを持つ任意のイベントと一致する、<xref:System.Type>属性のセットにします</xref:System.Type></xref:System.Type>。      イベントがない場合、 <xref:System.Attribute>、同じクラスのイベントに含まれていない、返される配列</xref:System.Attribute>。      属性がのインスタンスである場合、<xref:System.Attribute>クラス、イベントは、完全に一致する必要がありますまたは返される配列に含まれていません</xref:System.Attribute>。      場合、<xref:System.Attribute>インスタンスが指定されて、既定のイベントは、のインスタンスがない場合でも返される配列に含まれている、<xref:System.Attribute>イベント</xref:System.Attribute></xref:System.Attribute>。       場合、`componentType`パラメーターは`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (Type componentType, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    - id: attributes
      type: System.Attribute[]
      description: "型の配列<xref:System.Attribute>フィルターとして使用できる</xref:System.Attribute>。"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>このコンポーネントの指定した属性と一致するイベントを持つ。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  id: GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "フィルターとして指定した属性配列を使用して、カスタム型記述子を使用して、指定されたコンポーネントのイベントのコレクションを返します。"
  remarks: "イベントを`component`パラメーターが、サイトは追加したり、場合にイベントを削除するため、クラスのイベントと異なる場合が、`component`パラメーターが配置されています。       `attributes`パラメーター配列が混在していることができます<xref:System.Type>と<xref:System.Attribute>オブジェクト</xref:System.Attribute></xref:System.Type>。 フィルター処理は、次のルールによって定義: - <xref:System.Type>; ワイルドカードとして扱われますを持つ任意のイベントと一致する、<xref:System.Type>属性のセットにします</xref:System.Type></xref:System.Type>。      イベントがない場合、 <xref:System.Attribute>、同じクラスのイベントに含まれていない、返される配列</xref:System.Attribute>。      属性がのインスタンスである場合、<xref:System.Attribute>クラス、イベントは、完全に一致する必要がありますまたは返される配列に含まれていません</xref:System.Attribute>。      場合、<xref:System.Attribute>インスタンスが指定されて、既定のイベントは、のインスタンスがない場合でも返される配列に含まれている、<xref:System.Attribute>イベント</xref:System.Attribute></xref:System.Attribute>。       場合`component`は`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, Attribute[] attributes, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "イベントを取得するコンポーネント。"
    - id: attributes
      type: System.Attribute[]
      description: "型の配列<xref:System.Attribute>フィルターとして使用する</xref:System.Attribute>。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム型説明情報を考慮するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>このコンポーネントの指定した属性と一致するイベントを持つ。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptor.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "コンポーネントの完全修飾名を返します。"
  remarks: "多くの場合、GetFullComponentName メソッドと同じ値を返します、<xref:System.ComponentModel.TypeDescriptor.GetComponentName%2A>メソッド</xref:System.ComponentModel.TypeDescriptor.GetComponentName%2A>。 ただし、コンポーネントは、入れ子になったコンテナーに存在するか、入れ子になった他のセマンティクスを持つ場合、は、別の完全修飾名を返す可能性があります。"
  syntax:
    content: public static string GetFullComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "<xref href=&quot;System.ComponentModel.Component&quot;> </xref>の名前を検索します。"
    return:
      type: System.String
      description: "指定されたコンポーネントの完全修飾名または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>コンポーネントに名前があるない場合。"
  overload: System.ComponentModel.TypeDescriptor.GetFullComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object)
  nameWithType: TypeDescriptor.GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたコンポーネントのプロパティのコレクションを返します。"
  remarks: "コンポーネントのプロパティできるとは異なります。 クラスのプロパティから、サイトの追加またはコンポーネントが配置された場合は、プロパティを削除できます。       場合、`component`パラメーターは`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  example:
  - "The following code example demonstrates the use of the GetProperties method to access the properties of a control. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.ComponentDesigner> class.  \n  \n [!code-vb[System.ComponentModel.Design.DesignerServices#8](~/add/codesnippet/visualbasic/m-system.componentmodel._38_1.vb)]\n [!code-cs[System.ComponentModel.Design.DesignerServices#8](~/add/codesnippet/csharp/m-system.componentmodel._38_1.cs)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component);
    parameters:
    - id: component
      type: System.Object
      description: "プロパティを取得するコンポーネント。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>指定されたコンポーネントのプロパティを使用します。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  id: GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Type)
  nameWithType: TypeDescriptor.GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した種類のコンポーネントのプロパティのコレクションを返します。"
  remarks: "オブジェクトのインスタンスがあるない場合にのみ、このバージョンのこのメソッドを呼び出します。       場合、`componentType`パラメーターは`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>プロパティのデータ型を取得するコンポーネントを表す</xref:System.Type>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>コンポーネントの指定した型のプロパティを持つ。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  id: GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "フィルターとして指定した属性配列を使用して、指定されたコンポーネントのプロパティのコレクションを返します。"
  remarks: "プロパティを`component`パラメーターが、サイトは追加したり、場合に、プロパティを削除するため、クラスのプロパティと異なる場合が、`component`パラメーターが配置されています。       `attributes`パラメーター配列は配列をフィルター処理に使用します。 フィルター処理は、次のルールによって定義: - プロパティがない場合、 <xref:System.Attribute>、同じクラスのプロパティに含まれていない、返される配列</xref:System.Attribute>。      属性がのインスタンスである場合、<xref:System.Attribute>クラス、プロパティは、完全に一致する必要がありますまたは返される配列に含まれていない</xref:System.Attribute>。      場合、<xref:System.Attribute>インスタンスが指定されて、既定のプロパティは、のインスタンスがない場合でも返される配列に含まれている、<xref:System.Attribute>プロパティ</xref:System.Attribute></xref:System.Attribute>。      If`attributes`メソッド、プロパティが適用された属性を持っていない場合に大文字と小文字が一致する GetProperties 既定属性があります。       場合`component`は`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  example:
  - "The following code example demonstrates how to implement the <xref:System.Windows.Forms.Design.PropertyTab.GetProperties%2A> method. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.PropertyTab> class.  \n  \n [!code-cs[PropertyTabExample#2](~/add/codesnippet/csharp/0d160e65-8e23-4623-ad72-_1.cs)]\n [!code-cpp[PropertyTabExample#2](~/add/codesnippet/cpp/0d160e65-8e23-4623-ad72-_1.cpp)]\n [!code-vb[PropertyTabExample#2](~/add/codesnippet/visualbasic/0d160e65-8e23-4623-ad72-_1.vb)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, Attribute[] attributes);
    parameters:
    - id: component
      type: System.Object
      description: "プロパティを取得するコンポーネント。"
    - id: attributes
      type: System.Attribute[]
      description: "型の配列<xref:System.Attribute>フィルターとして使用する</xref:System.Attribute>。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>指定されたコンポーネントの指定した属性と一致するプロパティを使用します。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  id: GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "既定の型記述子を使用して、指定されたコンポーネントのプロパティのコレクションを返します。"
  remarks: "プロパティを`component`パラメーターが、サイトは追加したり、場合に、プロパティを削除するため、クラスのプロパティと異なる場合が、`component`パラメーターが配置されています。       場合`component`は`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "プロパティを取得するコンポーネント。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム型説明情報を検討しません。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>指定されたコンポーネントのプロパティを使用します。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  id: GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Type,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した種類のフィルターとして指定した属性配列を使用して、コンポーネントのプロパティのコレクションを返します。"
  remarks: "オブジェクトのインスタンスがあるない場合にのみ、このバージョンのこのメソッドを呼び出します。       `attributes`パラメーター配列は配列をフィルター処理に使用します。 フィルター処理は、次のルールによって定義: - プロパティがない場合、 <xref:System.Attribute>、同じクラスのプロパティに含まれていない、返される配列</xref:System.Attribute>。      属性がのインスタンスである場合、<xref:System.Attribute>クラス、プロパティは、完全に一致する必要がありますまたは返される配列に含まれていない</xref:System.Attribute>。      場合、<xref:System.Attribute>インスタンスが指定されて、既定のプロパティは、のインスタンスがない場合でも返される配列に含まれている、<xref:System.Attribute>プロパティ</xref:System.Attribute></xref:System.Attribute>。      If`attributes`メソッド、プロパティが適用された属性を持っていない場合に大文字と小文字が一致する GetProperties 既定属性があります。       場合、`componentType`パラメーターは`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  example:
  - "The following code example demonstrates how to implement the <xref:System.Windows.Forms.Design.PropertyTab.GetProperties%2A> method. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.PropertyTab> class.  \n  \n [!code-cs[PropertyTabExample#2](~/add/codesnippet/csharp/af245915-0d17-4307-99bf-_1.cs)]\n [!code-cpp[PropertyTabExample#2](~/add/codesnippet/cpp/af245915-0d17-4307-99bf-_1.cpp)]\n [!code-vb[PropertyTabExample#2](~/add/codesnippet/visualbasic/af245915-0d17-4307-99bf-_1.vb)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (Type componentType, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    - id: attributes
      type: System.Attribute[]
      description: "型の配列<xref:System.Attribute>フィルターとして使用する</xref:System.Attribute>。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>コンポーネントのこの型の指定した属性と一致するプロパティを使用します。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  id: GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "フィルターとして指定した属性配列を使用して、カスタム型記述子を使用して、指定されたコンポーネントのプロパティのコレクションを返します。"
  remarks: "プロパティを`component`サイトは追加したり、場合に、プロパティを削除するために、クラスのプロパティと異なる場合が、`component`が配置されています。       `attributes`パラメーター配列は配列をフィルター処理に使用します。 フィルター処理は、次のルールによって定義: - プロパティがない場合、 <xref:System.Attribute>、同じクラスのプロパティに含まれていない、返される配列</xref:System.Attribute>。      属性がのインスタンスである場合、<xref:System.Attribute>クラス、プロパティは、完全に一致する必要がありますまたは返される配列に含まれていない</xref:System.Attribute>。      場合、<xref:System.Attribute>インスタンスが指定されて、既定のプロパティは、のインスタンスがない場合でも返される配列に含まれている、<xref:System.Attribute>プロパティ</xref:System.Attribute></xref:System.Attribute>。      If`attributes`メソッド、プロパティが適用された属性を持っていない場合に大文字と小文字が一致する GetProperties 既定属性があります。       場合、`component`パラメーターは`null`、空のコレクションが返されます。       返されるコレクションの順序は、呼び出しで同じにするため、常に使用する前に注文は保証されません。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, Attribute[] attributes, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "プロパティを取得するコンポーネント。"
    - id: attributes
      type: System.Attribute[]
      description: "型の配列<xref:System.Attribute>フィルターとして使用する</xref:System.Attribute>。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム型説明情報を考慮するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>指定されたコンポーネントの指定した属性と一致するイベントを持つ。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>プロセス間リモート オブジェクトです。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  id: GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProvider(Object)
  nameWithType: TypeDescriptor.GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定されたコンポーネントの型説明プロバイダーを返します。"
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>メソッドは、型説明プロバイダーを常に返します</xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>。 でも、既定<xref:System.ComponentModel.TypeDescriptor>の実装は<xref:System.ComponentModel.TypeDescriptionProvider>。</xref:System.ComponentModel.TypeDescriptionProvider>上に構築</xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider GetProvider (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "対象コンポーネントのインスタンス。"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "A <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>指定されたコンポーネントに関連付けられています。"
  overload: System.ComponentModel.TypeDescriptor.GetProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  id: GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProvider(Type)
  nameWithType: TypeDescriptor.GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型の型説明プロバイダーを返します。"
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>メソッドは、型説明プロバイダーを常に返します</xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>。 でも、既定<xref:System.ComponentModel.TypeDescriptor>の実装は<xref:System.ComponentModel.TypeDescriptionProvider>。</xref:System.ComponentModel.TypeDescriptionProvider>上に構築</xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider GetProvider (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "A <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>指定した型に関連付けられています。"
  overload: System.ComponentModel.TypeDescriptor.GetProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptor.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返します、<xref:System.Type>オブジェクトを指定するリフレクションの実行に使用できる</xref:System.Type>。"
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>メソッドは、低レベルのバージョンのでは、<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>メソッド</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A></xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>。 <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>カスタム型記述子が見つからないことのときに、オブジェクトに対する標準のリフレクションを実行する通常使用されます。</xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>"
  syntax:
    content: public static Type GetReflectionType (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "対象コンポーネントのインスタンス。"
    return:
      type: System.Type
      description: "A <xref:System.Type>、指定したオブジェクト</xref:System.Type>。"
  overload: System.ComponentModel.TypeDescriptor.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptor.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返します、 <xref:System.Type>、指定されたクラス種類リフレクションの実行に使用できる</xref:System.Type>。"
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>メソッドは、低レベルのバージョンのでは、<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>メソッド</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A></xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>。 <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>カスタム型記述子が見つからないことのときに、クラスに対して標準的なリフレクションを実行する通常使用されます。</xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>"
  syntax:
    content: public static Type GetReflectionType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
    return:
      type: System.Type
      description: "<xref:System.Type>指定したクラスの</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  id: InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "すべてのインターフェイス型の型説明プロバイダーを表す型を取得します。"
  remarks: "クラスのプロパティを取得、<xref:System.Type>に渡すことができるオブジェクト、<xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>インターフェイスの型の型説明プロバイダーを定義するメソッド</xref:System.ComponentModel.TypeDescriptor.AddProvider%2A></xref:System.Type>。"
  syntax:
    content: public static Type InterfaceType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>のすべての種類のインターフェイスは、カスタム型説明プロバイダーを表す</xref:System.Type>。"
  overload: System.ComponentModel.TypeDescriptor.InterfaceType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  id: Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Object)
  nameWithType: TypeDescriptor.Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "プロパティと、キャッシュから指定したコンポーネントのイベントを消去します。"
  remarks: "プロパティとイベントがによってキャッシュされる<xref:System.ComponentModel.TypeDescriptor>速度</xref:System.ComponentModel.TypeDescriptor>。 通常、これらは定数オブジェクトの有効期間です。 ただし、拡張プロバイダーとデザイナーは、一連のオブジェクトのプロパティを変更できます。 場合は、オブジェクトのプロパティとイベント記述子をクリアするには、このメソッドを呼び出す必要があります。 このメソッドは、デザイン時にのみ使用されます。 実行時に使用されません。       このメソッドは、<xref:System.ComponentModel.TypeDescriptor.Refreshed>プロパティまたはコンポーネントのイベントを変更したときにイベント</xref:System.ComponentModel.TypeDescriptor.Refreshed>。 前回の呼び出しがあった場合にのみ、このイベントが発生、<xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>または<xref:System.ComponentModel.TypeDescriptor.GetEvents%2A>情報をキャッシュするメソッド</xref:System.ComponentModel.TypeDescriptor.GetEvents%2A></xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>。"
  example:
  - For an example of using this method, see the <xref:System.ComponentModel.RefreshEventHandler> class.
  syntax:
    content: public static void Refresh (object component);
    parameters:
    - id: component
      type: System.Object
      description: "プロパティまたはイベントが変更されたコンポーネント。"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  id: Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Assembly)
  nameWithType: TypeDescriptor.Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Assembly)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "キャッシュから指定したアセンブリのプロパティとイベントを消去します。"
  remarks: "プロパティとイベントがによってキャッシュされる<xref:System.ComponentModel.TypeDescriptor>速度</xref:System.ComponentModel.TypeDescriptor>。 通常、これらは定数オブジェクトの有効期間です。 ただし、拡張プロバイダーとデザイナーは、一連のオブジェクトのプロパティを変更できます。 場合は、オブジェクトのプロパティとイベント記述子をクリアするには、このメソッドを呼び出す、ことができます。 このメソッドは、デザイン時にのみ使用されます。 実行時に使用されません。       呼び出しを行う前に、 <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>、キャッシュを消去するメソッドを呼び出す必要がある、<xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>情報を最初にキャッシュする特定のアセンブリのメソッド</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A></xref:System.ComponentModel.TypeDescriptor.Refresh%2A>。       このメソッドは、<xref:System.ComponentModel.TypeDescriptor.Refreshed>プロパティがコンポーネントの変更のときに通知する必要があるすべてのクラスを通知するイベントです</xref:System.ComponentModel.TypeDescriptor.Refreshed>。"
  syntax:
    content: public static void Refresh (System.Reflection.Assembly assembly);
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "<xref:System.Reflection.Assembly>を更新するアセンブリを表す</xref:System.Reflection.Assembly>。 各<xref:System.Type>このアセンブリ内で更新されます</xref:System.Type>。"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  id: Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Module)
  nameWithType: TypeDescriptor.Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Module)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "プロパティと、キャッシュから指定されたモジュールのイベントを消去します。"
  remarks: "プロパティとイベントがによってキャッシュされる<xref:System.ComponentModel.TypeDescriptor>速度</xref:System.ComponentModel.TypeDescriptor>。 通常、これらは定数オブジェクトの有効期間です。 ただし、拡張プロバイダーとデザイナーは、一連のオブジェクトのプロパティを変更できます。 場合は、オブジェクトのプロパティとイベント記述子をクリアするには、このメソッドを呼び出す、ことができます。 このメソッドは、デザイン時にのみ使用されます。 実行時に使用されません。       呼び出しを行う前に、 <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>、キャッシュを消去するメソッドを呼び出す必要がある、<xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>情報を最初にキャッシュする特定のモジュールのメソッド</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A></xref:System.ComponentModel.TypeDescriptor.Refresh%2A>。       このメソッドは、<xref:System.ComponentModel.TypeDescriptor.Refreshed>プロパティがコンポーネントの変更のときに通知する必要があるすべてのクラスを通知するイベントです</xref:System.ComponentModel.TypeDescriptor.Refreshed>。"
  syntax:
    content: public static void Refresh (System.Reflection.Module module);
    parameters:
    - id: module
      type: System.Reflection.Module
      description: "<xref:System.Reflection.Module>を更新するモジュールを表す</xref:System.Reflection.Module>。 各<xref:System.Type>このモジュールで更新されます</xref:System.Type>。"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  id: Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Type)
  nameWithType: TypeDescriptor.Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "プロパティと、指定されたコンポーネント型のキャッシュからのイベントを消去します。"
  remarks: "オブジェクトのインスタンスがあるない場合にのみ、このバージョンのこのメソッドを呼び出します。       プロパティとイベントがによってキャッシュされる<xref:System.ComponentModel.TypeDescriptor>速度</xref:System.ComponentModel.TypeDescriptor>。 通常、これらは定数オブジェクトの有効期間です。 ただし、拡張プロバイダーとデザイナーは、一連のオブジェクトのプロパティを変更できます。 場合は、オブジェクトのプロパティとイベント記述子をクリアするには、このメソッドを呼び出す、ことができます。 このメソッドは、デザイン時にのみ使用されます。 実行時に使用されません。       このメソッドは、<xref:System.ComponentModel.TypeDescriptor.Refreshed>プロパティまたはコンポーネントのイベントを変更したときにイベント</xref:System.ComponentModel.TypeDescriptor.Refreshed>。 前回の呼び出しがあった場合にのみ、このイベントが発生、<xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>または<xref:System.ComponentModel.TypeDescriptor.GetEvents%2A>情報をキャッシュするメソッド</xref:System.ComponentModel.TypeDescriptor.GetEvents%2A></xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>。"
  syntax:
    content: public static void Refresh (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  id: Refreshed
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refreshed
  nameWithType: TypeDescriptor.Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "コンポーネントのキャッシュがオフの場合に発生します。"
  remarks: 'イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。'
  example:
  - For an example of using this event, see the <xref:System.ComponentModel.RefreshEventHandler> class.
  syntax:
    content: public static event System.ComponentModel.RefreshEventHandler Refreshed;
    return:
      type: System.ComponentModel.RefreshEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  id: RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveAssociation(Object,Object)
  nameWithType: TypeDescriptor.RemoveAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "2 つのオブジェクト間の関連付けを削除します。"
  remarks: "RemoveAssociation メソッドによって形成される&2; つのオブジェクト間のアソシエーションの削除、<xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>メソッド</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>。       A<xref:System.WeakReference>ために使用されるは、プライマリとセカンダリのオブジェクト間の関連付けを維持ですそのため、このメソッドには影響しませんいずれかのオブジェクトが終了またはガベージ コレクションによって回収されるときにします。</xref:System.WeakReference> 。"
  syntax:
    content: public static void RemoveAssociation (object primary, object secondary);
    parameters:
    - id: primary
      type: System.Object
      description: "プライマリ<xref:System.Object>。</xref:System.Object>"
    - id: secondary
      type: System.Object
      description: "セカンダリ<xref:System.Object>。</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.RemoveAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  id: RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveAssociations(Object)
  nameWithType: TypeDescriptor.RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "プライマリ オブジェクトのすべての関連付けを削除します。"
  remarks: "RemoveAssociations メソッドは、プライマリ オブジェクトとそのすべてのセカンダリ オブジェクトへの呼び出しによって作成される間のすべての関連付けを削除、<xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>メソッド</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>。       A<xref:System.WeakReference>にプライマリとセカンダリのオブジェクト間の関連付けを維持ですそのため、このメソッドには影響しませんときに&2; 番目のオブジェクトのいずれか、プライマリが終了またはガベージ コレクションによって回収される。</xref:System.WeakReference> 。"
  syntax:
    content: public static void RemoveAssociations (object primary);
    parameters:
    - id: primary
      type: System.Object
      description: "プライマリ<xref:System.Object>アソシエーション</xref:System.Object>。"
  overload: System.ComponentModel.TypeDescriptor.RemoveAssociations*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>primary</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定したオブジェクトに関連付けられている、以前に追加された型説明プロバイダーを削除します。"
  remarks: "このメソッドは、以前に追加された型説明プロバイダーを削除、<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>メソッド</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>。 プロバイダーの削除により、<xref:System.ComponentModel.TypeDescriptor.Refreshed>イベントが関連付けられているオブジェクトに対して発生する</xref:System.ComponentModel.TypeDescriptor.Refreshed>。       使用して、<xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>メソッドを部分的に信頼されたコードから呼び出す必要がある場合</xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>。"
  syntax:
    content: public static void RemoveProvider (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>を削除します。"
    - id: instance
      type: System.Object
      description: "対象コンポーネントのインスタンス。"
  overload: System.ComponentModel.TypeDescriptor.RemoveProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型に関連付けられている、以前に追加された型説明プロバイダーを削除します。"
  remarks: "このメソッドは、以前に追加された型説明プロバイダーを削除、<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>メソッド</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>。 プロバイダーの削除により、<xref:System.ComponentModel.TypeDescriptor.Refreshed>に関連付けられている型に対して生成されるイベント</xref:System.ComponentModel.TypeDescriptor.Refreshed>。       使用して、<xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>メソッドを部分的に信頼されたコードから呼び出す必要がある場合</xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>。"
  syntax:
    content: public static void RemoveProvider (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>を削除します。"
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
  overload: System.ComponentModel.TypeDescriptor.RemoveProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定したオブジェクトに関連付けられている、以前に追加された型説明プロバイダーを削除します。"
  remarks: "このメソッドは、以前に追加された型説明プロバイダーを削除、<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>メソッド</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>。 プロバイダーの削除により、<xref:System.ComponentModel.TypeDescriptor.Refreshed>イベントが関連付けられているオブジェクトに対して発生する</xref:System.ComponentModel.TypeDescriptor.Refreshed>。       このメソッドは、部分的に信頼されたコードから呼び出すことができます。 場合<xref:System.Security.Permissions.TypeDescriptorPermissionFlags>が定義されている場合、呼び出し元できますプロバイダーを登録する指定したインスタンスの型が部分的に信頼されたもある場合</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>。       使用して、<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>メソッドの場合は、部分的に信頼されたコードから呼び出す必要はありません</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>。"
  syntax:
    content: public static void RemoveProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>を削除します。"
    - id: instance
      type: System.Object
      description: "対象コンポーネントのインスタンス。"
  overload: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型に関連付けられている、以前に追加された型説明プロバイダーを削除します。"
  remarks: "このメソッドは、以前に追加された型説明プロバイダーを削除、<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>メソッド</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>。 プロバイダーの削除により、<xref:System.ComponentModel.TypeDescriptor.Refreshed>に関連付けられている型に対して生成されるイベント</xref:System.ComponentModel.TypeDescriptor.Refreshed>。       このメソッドは、部分的に信頼されたコードから呼び出すことができます。 場合<xref:System.Security.Permissions.TypeDescriptorPermissionFlags>が定義されている場合、呼び出し元は、登録を解除できます、指定した種類のプロバイダーも部分的に信頼されている場合</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>。       使用して、<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>メソッドの場合は、部分的に信頼されたコードから呼び出す必要はありません</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>。"
  syntax:
    content: public static void RemoveProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>を削除します。"
    - id: type
      type: System.Type
      description: "<xref:System.Type>対象コンポーネントの</xref:System.Type>。"
  overload: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "1 つまたは両方のパラメーターが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  id: SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: SortDescriptorArray(IList)
  nameWithType: TypeDescriptor.SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "記述子の名前を使用して、記述子を並べ替えます。"
  syntax:
    content: public static void SortDescriptorArray (System.Collections.IList infos);
    parameters:
    - id: infos
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>並べ替える記述子を格納している</xref:System.Collections.IList>。"
  overload: System.ComponentModel.TypeDescriptor.SortDescriptorArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>infos</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes(Object,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes(Type,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Type,Attribute[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddEditorTable(Type,Hashtable)
  nameWithType: TypeDescriptor.AddEditorTable(Type,Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(Type,Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
  fullName: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
- uid: System.ComponentModel.IComNativeDescriptorHandler
  parent: System.ComponentModel
  isExternal: false
  name: IComNativeDescriptorHandler
  nameWithType: IComNativeDescriptorHandler
  fullName: System.ComponentModel.IComNativeDescriptorHandler
- uid: System.ComponentModel.TypeDescriptor.ComObjectType
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
  fullName: System.ComponentModel.TypeDescriptor.ComObjectType
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateAssociation(Object,Object)
  nameWithType: TypeDescriptor.CreateAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(Object,Object)
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateDesigner(IComponent,Type)
  nameWithType: TypeDescriptor.CreateDesigner(IComponent,Type)
  fullName: System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent,Type)
- uid: System.ComponentModel.Design.IDesigner
  parent: System.ComponentModel.Design
  isExternal: false
  name: IDesigner
  nameWithType: IDesigner
  fullName: System.ComponentModel.Design.IDesigner
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent(Type,EventDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
- uid: System.ComponentModel.EventDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptor
  nameWithType: EventDescriptor
  fullName: System.ComponentModel.EventDescriptor
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty(Type,PropertyDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAssociation(Type,Object)
  nameWithType: TypeDescriptor.GetAssociation(Type,Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(Type,Object)
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Object)
  nameWithType: TypeDescriptor.GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object)
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Type)
  nameWithType: TypeDescriptor.GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Type)
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Object,Boolean)
  nameWithType: TypeDescriptor.GetAttributes(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Object)
  nameWithType: TypeDescriptor.GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Type)
  nameWithType: TypeDescriptor.GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Type)
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Object,Boolean)
  nameWithType: TypeDescriptor.GetClassName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName(Object)
  nameWithType: TypeDescriptor.GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName(Object,Boolean)
  nameWithType: TypeDescriptor.GetComponentName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Object)
  nameWithType: TypeDescriptor.GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object)
- uid: System.ComponentModel.TypeConverter
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter
  nameWithType: TypeConverter
  fullName: System.ComponentModel.TypeConverter
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Type)
  nameWithType: TypeDescriptor.GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Type)
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Object,Boolean)
  nameWithType: TypeDescriptor.GetConverter(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Object)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Type)
  nameWithType: TypeDescriptor.GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Object)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Type)
  nameWithType: TypeDescriptor.GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Object,Type)
  nameWithType: TypeDescriptor.GetEditor(Object,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Type,Type)
  nameWithType: TypeDescriptor.GetEditor(Type,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Type,Type)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Object,Type,Boolean)
  nameWithType: TypeDescriptor.GetEditor(Object,Type,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object)
  nameWithType: TypeDescriptor.GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object)
- uid: System.ComponentModel.EventDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptorCollection
  nameWithType: EventDescriptorCollection
  fullName: System.ComponentModel.EventDescriptorCollection
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Type)
  nameWithType: TypeDescriptor.GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Type,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptor.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object)
  nameWithType: TypeDescriptor.GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Type)
  nameWithType: TypeDescriptor.GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Type,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider(Object)
  nameWithType: TypeDescriptor.GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Object)
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider(Type)
  nameWithType: TypeDescriptor.GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Type)
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptor.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Object)
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptor.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Type)
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Object)
  nameWithType: TypeDescriptor.Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Object)
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Assembly)
  nameWithType: TypeDescriptor.Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Module)
  nameWithType: TypeDescriptor.Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Module)
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: true
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Type)
  nameWithType: TypeDescriptor.Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Type)
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refreshed
  nameWithType: TypeDescriptor.Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
- uid: System.ComponentModel.RefreshEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: RefreshEventHandler
  nameWithType: RefreshEventHandler
  fullName: System.ComponentModel.RefreshEventHandler
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociation(Object,Object)
  nameWithType: TypeDescriptor.RemoveAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(Object,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociations(Object)
  nameWithType: TypeDescriptor.RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: SortDescriptorArray(IList)
  nameWithType: TypeDescriptor.SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.ComponentModel.TypeDescriptor.AddAttributes*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes
  nameWithType: TypeDescriptor.AddAttributes
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddEditorTable
  nameWithType: TypeDescriptor.AddEditorTable
- uid: System.ComponentModel.TypeDescriptor.AddProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider
  nameWithType: TypeDescriptor.AddProvider
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent
  nameWithType: TypeDescriptor.AddProviderTransparent
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
- uid: System.ComponentModel.TypeDescriptor.ComObjectType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateAssociation
  nameWithType: TypeDescriptor.CreateAssociation
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateDesigner
  nameWithType: TypeDescriptor.CreateDesigner
- uid: System.ComponentModel.TypeDescriptor.CreateEvent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent
  nameWithType: TypeDescriptor.CreateEvent
- uid: System.ComponentModel.TypeDescriptor.CreateInstance*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateInstance
  nameWithType: TypeDescriptor.CreateInstance
- uid: System.ComponentModel.TypeDescriptor.CreateProperty*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty
  nameWithType: TypeDescriptor.CreateProperty
- uid: System.ComponentModel.TypeDescriptor.GetAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAssociation
  nameWithType: TypeDescriptor.GetAssociation
- uid: System.ComponentModel.TypeDescriptor.GetAttributes*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes
  nameWithType: TypeDescriptor.GetAttributes
- uid: System.ComponentModel.TypeDescriptor.GetClassName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName
  nameWithType: TypeDescriptor.GetClassName
- uid: System.ComponentModel.TypeDescriptor.GetComponentName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName
  nameWithType: TypeDescriptor.GetComponentName
- uid: System.ComponentModel.TypeDescriptor.GetConverter*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter
  nameWithType: TypeDescriptor.GetConverter
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent
  nameWithType: TypeDescriptor.GetDefaultEvent
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty
  nameWithType: TypeDescriptor.GetDefaultProperty
- uid: System.ComponentModel.TypeDescriptor.GetEditor*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor
  nameWithType: TypeDescriptor.GetEditor
- uid: System.ComponentModel.TypeDescriptor.GetEvents*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents
  nameWithType: TypeDescriptor.GetEvents
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetFullComponentName
  nameWithType: TypeDescriptor.GetFullComponentName
- uid: System.ComponentModel.TypeDescriptor.GetProperties*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties
  nameWithType: TypeDescriptor.GetProperties
- uid: System.ComponentModel.TypeDescriptor.GetProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider
  nameWithType: TypeDescriptor.GetProvider
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType
  nameWithType: TypeDescriptor.GetReflectionType
- uid: System.ComponentModel.TypeDescriptor.InterfaceType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
- uid: System.ComponentModel.TypeDescriptor.Refresh*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh
  nameWithType: TypeDescriptor.Refresh
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociation
  nameWithType: TypeDescriptor.RemoveAssociation
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociations
  nameWithType: TypeDescriptor.RemoveAssociations
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider
  nameWithType: TypeDescriptor.RemoveProvider
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent
  nameWithType: TypeDescriptor.RemoveProviderTransparent
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: SortDescriptorArray
  nameWithType: TypeDescriptor.SortDescriptorArray
