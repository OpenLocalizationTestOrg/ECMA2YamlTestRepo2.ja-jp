### YamlMime:ManagedReference
items:
- uid: System.Data.DataColumn
  id: DataColumn
  children:
  - System.Data.DataColumn.#ctor
  - System.Data.DataColumn.#ctor(System.String)
  - System.Data.DataColumn.#ctor(System.String,System.Type)
  - System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  - System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  - System.Data.DataColumn.AllowDBNull
  - System.Data.DataColumn.AutoIncrement
  - System.Data.DataColumn.AutoIncrementSeed
  - System.Data.DataColumn.AutoIncrementStep
  - System.Data.DataColumn.Caption
  - System.Data.DataColumn.CheckNotAllowNull
  - System.Data.DataColumn.CheckUnique
  - System.Data.DataColumn.ColumnMapping
  - System.Data.DataColumn.ColumnName
  - System.Data.DataColumn.DataType
  - System.Data.DataColumn.DateTimeMode
  - System.Data.DataColumn.DefaultValue
  - System.Data.DataColumn.Expression
  - System.Data.DataColumn.ExtendedProperties
  - System.Data.DataColumn.MaxLength
  - System.Data.DataColumn.Namespace
  - System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataColumn.Ordinal
  - System.Data.DataColumn.Prefix
  - System.Data.DataColumn.RaisePropertyChanging(System.String)
  - System.Data.DataColumn.ReadOnly
  - System.Data.DataColumn.SetOrdinal(System.Int32)
  - System.Data.DataColumn.Table
  - System.Data.DataColumn.ToString
  - System.Data.DataColumn.Unique
  langs:
  - csharp
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
  type: Class
  summary: "内の列のスキーマを表す、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。"
  remarks: "DataColumn は<xref:System.Data.DataTable>。</xref:System.Data.DataTable>のスキーマを作成するための基本的なビルド ブロックです。 <xref:System.Data.DataColumnCollection>。</xref:System.Data.DataColumnCollection>を&1; つ以上の DataColumn オブジェクトを追加することによって、スキーマをビルドします。 詳細については、次を参照してください。 [DataTable に列の追加](~/add/includes/ajax-current-ext-md.md)です。       各 DataColumn が、 <xref:System.Data.DataColumn.DataType%2A>DataColumn のデータの種類を決定するプロパティが含まれています</xref:System.Data.DataColumn.DataType%2A>。 たとえば、整数、または文字列、または&10; 進数に、データ型を制限できます。 に格納されているデータ、<xref:System.Data.DataTable>結合は通常、元のデータ ソースにデータ ソースのデータ型に一致する必要があります</xref:System.Data.DataTable>。 詳細については、次を参照してください。 [ADO.NET でのデータ型マッピング](~/add/includes/ajax-current-ext-md.md)です。       などのプロパティ<xref:System.Data.DataColumn.AllowDBNull%2A>、 <xref:System.Data.DataColumn.Unique%2A>、および<xref:System.Data.DataColumn.ReadOnly%2A>エントリとそれによってデータの整合性を保証することができ、データの更新に関する制限を格納します</xref:System.Data.DataColumn.ReadOnly%2A></xref:System.Data.DataColumn.Unique%2A></xref:System.Data.DataColumn.AllowDBNull%2A>。 使用することも、 <xref:System.Data.DataColumn.AutoIncrement%2A>、 <xref:System.Data.DataColumn.AutoIncrementSeed%2A>、および<xref:System.Data.DataColumn.AutoIncrementStep%2A>データの自動生成を制御するプロパティ</xref:System.Data.DataColumn.AutoIncrementStep%2A></xref:System.Data.DataColumn.AutoIncrementSeed%2A></xref:System.Data.DataColumn.AutoIncrement%2A>。 詳細については<xref:System.Data.DataColumn.AutoIncrement%2A>列を参照してください[AutoIncrement 列の作成](~/add/includes/ajax-current-ext-md.md)</xref:System.Data.DataColumn.AutoIncrement%2A>。 詳細については、次を参照してください。[主キーを定義する](~/add/includes/ajax-current-ext-md.md)です。       行うことも、DataColumn の値が作成することで一意であることを確認して、<xref:System.Data.UniqueConstraint>に追加することと、<xref:System.Data.ConstraintCollection>の<xref:System.Data.DataTable>DataColumn が属している</xref:System.Data.DataTable></xref:System.Data.ConstraintCollection></xref:System.Data.UniqueConstraint>。 詳細については、次を参照してください。 [DataTable の制約](~/add/includes/ajax-current-ext-md.md)です。       DataColumn オブジェクト間の関係を作成する作成<xref:System.Data.DataRelation>オブジェクトし<xref:System.Data.DataRelationCollection><xref:System.Data.DataSet>。</xref:System.Data.DataSet></xref:System.Data.DataRelationCollection>に追加</xref:System.Data.DataRelation>       使用することができます、 <xref:System.Data.DataColumn.Expression%2A>、列の値を計算または集計列を作成するには、DataColumn オブジェクトのプロパティ</xref:System.Data.DataColumn.Expression%2A>。 詳細については、次を参照してください。[式列を作成する](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example creates a <xref:System.Data.DataTable> with several DataColumn objects.  \n  \n [!code-cs[Classic WebData DataColumn Example#1](~/add/codesnippet/csharp/t-system.data.datacolumn_1.cs)]\n [!code-vb[Classic WebData DataColumn Example#1](~/add/codesnippet/visualbasic/t-system.data.datacolumn_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("ColumnName")]

      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(false)]

      public class DataColumn : System.ComponentModel.MarshalByValueComponent
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements: []
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.Site
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor
  id: '#ctor'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn()
  nameWithType: DataColumn.DataColumn()
  fullName: System.Data.DataColumn.DataColumn()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.DataColumn&quot;> </xref>文字列型としてクラスです。"
  remarks: "作成される<xref:System.Data.DataColumn>既定値なし<xref:System.Data.DataColumn.ColumnName%2A>、または<xref:System.Data.DataColumn.Caption%2A>.</xref:System.Data.DataColumn.Caption%2A></xref:System.Data.DataColumn.ColumnName%2A>オブジェクトには</xref:System.Data.DataColumn> 追加すると、a <xref:System.Data.DataColumnCollection>、 <xref:System.Data.DataColumn.ColumnName%2A>。</xref:System.Data.DataColumn.ColumnName%2A>名前が割り当てられていない場合は、既定の名前 (&quot;Column1&quot;、&quot;Column2&quot;) が生成されます。</xref:System.Data.DataColumnCollection>"
  example:
  - "The following example creates a new <xref:System.Data.DataColumn>, sets various properties, and adds it to a <xref:System.Data.DataColumnCollection> for the <xref:System.Data.DataTable> object.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_13_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_13_1.cs)]"
  syntax:
    content: public DataColumn ();
    parameters: []
  overload: System.Data.DataColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String)
  nameWithType: DataColumn.DataColumn(String)
  fullName: System.Data.DataColumn.DataColumn(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.DataColumn&quot;> </xref>指定された列名を使用して、型の文字列としてのクラスです。"
  remarks: "既定では、列に固有の名前になります、<xref:System.Data.DataColumn.Caption%2A>プロパティの値</xref:System.Data.DataColumn.Caption%2A>。"
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> with a specified <xref:System.Data.DataColumn.ColumnName%2A>.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_6_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn1 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_6_1.cs)]"
  syntax:
    content: public DataColumn (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "作成するのには、列の名前を表す文字列。 場合設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または空の文字列 (&quot;&quot;)、columns コレクションに追加すると、既定の名前が指定されます。"
  overload: System.Data.DataColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type)
  nameWithType: DataColumn.DataColumn(String,Type)
  fullName: System.Data.DataColumn.DataColumn(String,Type)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.DataColumn&quot;> </xref>クラス、指定された列の名前とデータ型を使用します。"
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> with a specified <xref:System.Data.DataColumn.ColumnName%2A> and <xref:System.Data.DataColumn.DataType%2A>.  \n  \n [!code-cs[Classic WebData DataColumn.DataColumn2 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_15_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_15_1.vb)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType);
    parameters:
    - id: columnName
      type: System.String
      description: "作成するのには、列の名前を表す文字列。 場合設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または空の文字列 (&quot;&quot;)、columns コレクションに追加すると、既定の名前が指定されます。"
    - id: dataType
      type: System.Type
      description: "サポートされている<xref:System.Data.DataColumn.DataType*>。</xref:System.Data.DataColumn.DataType*>"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "いいえ<code> dataType </code>が指定されました。"
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  id: '#ctor(System.String,System.Type,System.String)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type,String)
  nameWithType: DataColumn.DataColumn(String,Type,String)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.DataColumn&quot;> </xref>クラス、指定された名前、データ型と式を使用します。"
  remarks: ''
  example:
  - "The following example creates a computed column.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_8_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn3 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_8_1.cs)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType, string expr);
    parameters:
    - id: columnName
      type: System.String
      description: "作成するのには、列の名前を表す文字列。 場合設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または空の文字列 (&quot;&quot;)、columns コレクションに追加すると、既定の名前が指定されます。"
    - id: dataType
      type: System.Type
      description: "サポートされている<xref:System.Data.DataColumn.DataType*>。</xref:System.Data.DataColumn.DataType*>"
    - id: expr
      type: System.String
      description: "この列を作成するために使用する式。 詳細については、次を参照してください、<xref:System.Data.DataColumn.Expression*>プロパティ。</xref:System.Data.DataColumn.Expression*> 。"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "いいえ<code> dataType </code>が指定されました。"
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  id: '#ctor(System.String,System.Type,System.String,System.Data.MappingType)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type,String,MappingType)
  nameWithType: DataColumn.DataColumn(String,Type,String,MappingType)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String,MappingType)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.DataColumn&quot;> </xref>クラスの指定した名前、データ型、式、および列が属性であるかどうかを決定する値を使用します。"
  remarks: "The `type` argument sets the <xref:System.Data.DataColumn.ColumnMapping%2A> property. The property specifies how a <xref:System.Data.DataColumn> is mapped when a <xref:System.Data.DataSet> is transformed into an XML document. For example, if the column is named \"fName,\" and the value it contains is \"Bob,\" and `type` is set to `MappingType.Attribute`, the XML element would be as follows:  \n  \n \\<Name fName = 'Bob'/>  \n  \n For more information about how columns are mapped to elements or attributes, see the <xref:System.Data.DataColumn.ColumnMapping%2A> property."
  example:
  - "The following example constructs a computed column.  \n  \n [!code-cs[Classic WebData DataColumn.DataColumn4 Example#1](~/add/codesnippet/csharp/0bebed42-c35c-4bf3-9757-_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/add/codesnippet/visualbasic/0bebed42-c35c-4bf3-9757-_1.vb)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);
    parameters:
    - id: columnName
      type: System.String
      description: "作成するのには、列の名前を表す文字列。 場合設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または空の文字列 (&quot;&quot;)、columns コレクションに追加すると、既定の名前が指定されます。"
    - id: dataType
      type: System.Type
      description: "サポートされている<xref:System.Data.DataColumn.DataType*>。</xref:System.Data.DataColumn.DataType*>"
    - id: expr
      type: System.String
      description: "この列を作成するために使用する式。 詳細については、次を参照してください、<xref:System.Data.DataColumn.Expression*>プロパティ。</xref:System.Data.DataColumn.Expression*> 。"
    - id: type
      type: System.Data.MappingType
      description: "1 つ、 <xref href=&quot;System.Data.MappingType&quot;> </xref>値。"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "いいえ<code> dataType </code>が指定されました。"
  platform:
  - net462
- uid: System.Data.DataColumn.AllowDBNull
  id: AllowDBNull
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
  fullName: System.Data.DataColumn.AllowDBNull
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得またはテーブルに属する行のこの列で null 値を許可するかどうかを示す値を設定します。"
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> and sets its AllowDBNull property to `true`.  \n  \n [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_2_1.vb)]\n [!code-cs[Classic WebData DataColumn.AllowDBNull Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_2_1.cs)]"
  syntax:
    content: public bool AllowDBNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は null 値の値が許可されます。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataColumn.AllowDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrement
  id: AutoIncrement
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
  fullName: System.Data.DataColumn.AutoIncrement
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または列がテーブルに追加された新しい行の列の値を自動的にインクリメントするかどうかを示す値を設定します。"
  remarks: "この列の型がない場合、Int16、Int32 または Int64 このプロパティが設定されている場合、<xref:System.Data.DataColumn.DataType%2A>プロパティは Int32 に変換します</xref:System.Data.DataColumn.DataType%2A>。 これは、計算列と、例外が生成されます。 <xref:System.Data.DataColumn.Expression%2A>プロパティが設定されています</xref:System.Data.DataColumn.Expression%2A>。 インクリメントされた値は、columns コレクションに追加すると、この列の行の値が既定値に等しい場合にのみ使用されます。       使用して新しい行を作成することができます、<xref:System.Data.DataRow.ItemArray%2A>のプロパティ、<xref:System.Data.DataRow>クラスし、値の配列を渡します</xref:System.Data.DataRow></xref:System.Data.DataRow.ItemArray%2A>。 これは、潜在的な問題の自動増分の列に設定`true`、その値が自動的に生成されるためです。 使用する、<xref:System.Data.DataRow.ItemArray%2A>プロパティ、場所`null`配列での列の位置</xref:System.Data.DataRow.ItemArray%2A>。 詳細については、<xref:System.Data.DataRow.ItemArray%2A><xref:System.Data.DataRow>クラス</xref:System.Data.DataRow>のプロパティ</xref:System.Data.DataRow.ItemArray%2A>を参照してください。       場合は、列の型は<xref:System.Data.SqlTypes.SqlInt16>または<xref:System.Data.SqlTypes.SqlInt32>、AutoIncrement は機能しません</xref:System.Data.SqlTypes.SqlInt32></xref:System.Data.SqlTypes.SqlInt16>。 代わりに、Int16 または int32 型を使用します。       場合は、列の型は<xref:System.Data.SqlTypes.SqlInt64>または<xref:System.Data.SqlTypes.SqlDecimal>、AutoIncrement は部分的にのみ機能します</xref:System.Data.SqlTypes.SqlDecimal></xref:System.Data.SqlTypes.SqlInt64>。 Int64 型または Decimal を代わりに使用します。       ときに、<xref:System.Data.DataColumn.AutoIncrementStep%2A>値は、オーバーフローをチェックが抑制されて現在の値に追加します</xref:System.Data.DataColumn.AutoIncrementStep%2A>。"
  example:
  - "The following example sets the AutoIncrement, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_13_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_13_1.cs)]"
  syntax:
    content: public bool AutoIncrement { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列の値が自動的にインクリメントする場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataColumn.AutoIncrement*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "列は、計算列です。"
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrementSeed
  id: AutoIncrementSeed
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
  fullName: System.Data.DataColumn.AutoIncrementSeed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定を持つ列の開始値、<xref:System.Data.DataColumn.AutoIncrement*>プロパティに設定<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref></xref:System.Data.DataColumn.AutoIncrement*> 。 既定値は 0 です。"
  remarks: ''
  example:
  - "The following example sets the <xref:System.Data.DataColumn.AutoIncrement%2A>, AutoIncrementSeed, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_15_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_15_1.cs)]"
  syntax:
    content: public long AutoIncrementSeed { get; set; }
    return:
      type: System.Int64
      description: "開始値、<xref:System.Data.DataColumn.AutoIncrement*>機能</xref:System.Data.DataColumn.AutoIncrement*>。"
  overload: System.Data.DataColumn.AutoIncrementSeed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrementStep
  id: AutoIncrementStep
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
  fullName: System.Data.DataColumn.AutoIncrementStep
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定を持つ列で使用されるインクリメントその<xref:System.Data.DataColumn.AutoIncrement*>プロパティに設定<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref></xref:System.Data.DataColumn.AutoIncrement*> 。"
  remarks: ''
  example:
  - "The following example sets the <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, and AutoIncrementStep properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_7_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_7_1.cs)]"
  syntax:
    content: public long AutoIncrementStep { get; set; }
    return:
      type: System.Int64
      description: "列の値が自動的にインクリメントされる数です。 既定値は 1 です。"
  overload: System.Data.DataColumn.AutoIncrementStep*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定されている値は&0; です。"
  platform:
  - net462
- uid: System.Data.DataColumn.Caption
  id: Caption
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Caption
  nameWithType: DataColumn.Caption
  fullName: System.Data.DataColumn.Caption
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または列のキャプションを設定します。"
  remarks: "<xref:System.Data.DataColumn>。</xref:System.Data.DataColumn>のわかりやすいまたはフレンドリ名を表示するのにタイトルのプロパティを使用することができます。"
  example:
  - "The following example creates a new <xref:System.Data.DataTable>. It then adds three <xref:System.Data.DataColumn> objects to a <xref:System.Data.DataColumnCollection> and sets the Caption property for each <xref:System.Data.DataColumn>.  \n  \n [!code-cs[Classic WebData DataColumn.Caption Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_5_1.cs)]\n [!code-vb[Classic WebData DataColumn.Caption Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_5_1.vb)]"
  syntax:
    content: public string Caption { get; set; }
    return:
      type: System.String
      description: "列のキャプションです。 設定しない場合を返します、<xref:System.Data.DataColumn.ColumnName*>値</xref:System.Data.DataColumn.ColumnName*>。"
  overload: System.Data.DataColumn.Caption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.CheckNotAllowNull
  id: CheckNotAllowNull
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: CheckNotAllowNull()
  nameWithType: DataColumn.CheckNotAllowNull()
  fullName: System.Data.DataColumn.CheckNotAllowNull()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "このメンバーは、.NET Framework インフラストラクチャをサポートしているをコードから直接使用するものではありません。"
  syntax:
    content: protected void CheckNotAllowNull ();
    parameters: []
  overload: System.Data.DataColumn.CheckNotAllowNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.CheckUnique
  id: CheckUnique
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: CheckUnique()
  nameWithType: DataColumn.CheckUnique()
  fullName: System.Data.DataColumn.CheckUnique()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "このメンバーは、.NET Framework インフラストラクチャをサポートしているをコードから直接使用するものではありません。"
  syntax:
    content: protected void CheckUnique ();
    parameters: []
  overload: System.Data.DataColumn.CheckUnique*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ColumnMapping
  id: ColumnMapping
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
  fullName: System.Data.DataColumn.ColumnMapping
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定、 <xref href=&quot;System.Data.MappingType&quot;> </xref>列の。"
  remarks: "ColumnMapping プロパティを決定する方法、<xref:System.Data.DataColumn>ときにマップされて、<xref:System.Data.DataSet>による XML ドキュメントとして保存されます、<xref:System.Data.DataSet.WriteXml%2A>メソッド</xref:System.Data.DataSet.WriteXml%2A></xref:System.Data.DataSet></xref:System.Data.DataColumn>。       などの場合、 <xref:System.Data.DataColumn>&quot;customerID&quot;は、およびその ColumnMapping プロパティに設定の名前は`MappingType.Element`、列の値は、次の XML を生成する:```   <Customers>    <customerID>ALFKI</customerID>   ......    </Customers>    <Orders>    <OrderID>12345</OrderID>    <customerID>ALFKI</customerID>   ......    </Orders>   ```ただしに同じ列がマップされる場合`MappingType.Attribute`、次の XML が生成される:```   <Customers customerID=&quot;ALFKI&quot;........more attributes.....>    <Order orderID=&quot;1234&quot;....more attributes..../>    <Order orderID=&quot;1234&quot;....more attributes..../>   ...... More orders for this customer    </Customers>   ```使用、<xref:System.Data.DataColumn.%23ctor%2A>コンス トラクターを含む、`type`引数をすべての方法を<xref:System.Data.DataColumn>ときにマップされてその<xref:System.Data.DataSet>は XML ドキュメントに変換される</xref:System.Data.DataSet></xref:System.Data.DataColumn></xref:System.Data.DataColumn.%23ctor%2A></xref:System.Data.DataColumn>。       ColumnMapping プロパティは、コンス トラクターの引数に対応`type`です。"
  example:
  - "The following example sets the ColumnMapping type property of new <xref:System.Data.DataColumn>.  \n  \n [!code-cs[Classic WebData DataColumn.ColumnMapping Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_9_1.cs)]\n [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_9_1.vb)]"
  syntax:
    content: public virtual System.Data.MappingType ColumnMapping { get; set; }
    return:
      type: System.Data.MappingType
      description: "1 つ、 <xref href=&quot;System.Data.MappingType&quot;> </xref>値。"
  overload: System.Data.DataColumn.ColumnMapping*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ColumnName
  id: ColumnName
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ColumnName
  nameWithType: DataColumn.ColumnName
  fullName: System.Data.DataColumn.ColumnName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定内の列の名前、 <xref href=&quot;System.Data.DataColumnCollection&quot;></xref>です。"
  remarks: "ときに、<xref:System.Data.DataColumn>が作成されると、値が存在しない ColumnName</xref:System.Data.DataColumn> 。 ただし、ときに、<xref:System.Data.DataColumn>に追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>オブジェクトの既定の名前 (&quot;Column1&quot;、&quot;Column2&quot;) が指定します</xref:System.Data.DataTable></xref:System.Data.DataColumnCollection></xref:System.Data.DataColumn>。       既定では、 <xref:System.Data.DataColumn.Caption%2A>ColumnName 値に値が設定されている</xref:System.Data.DataColumn.Caption%2A>。"
  example:
  - "The following examples gets the ColumnName for every column in every table in a <xref:System.Data.DataSet>. The example also shows how to create a <xref:System.Data.DataColumn> with a new ColumnName.  \n  \n [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_8_1.vb)]\n [!code-cs[Classic WebData DataColumn.ColumnName Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_8_1.cs)]"
  syntax:
    content: public string ColumnName { get; set; }
    return:
      type: System.String
      description: "列の名前。"
  overload: System.Data.DataColumn.ColumnName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "プロパティに設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>か、空の文字列と列がコレクションに属しています。"
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "同じ名前の列は、コレクションに既に存在します。 名前比較では大文字と小文字が区別されません。"
  platform:
  - net462
- uid: System.Data.DataColumn.DataType
  id: DataType
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataType
  nameWithType: DataColumn.DataType
  fullName: System.Data.DataColumn.DataType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または列に格納されたデータの種類を設定します。"
  remarks: "データ型の値の設定は確実に正しい作成とデータ ソースのデータの更新時に非常に重要です。       DataType プロパティは、次の .NET Framework の基本データ型をサポートしている:- <xref:System.Boolean>- <xref:System.Byte>- <xref:System.Char>- <xref:System.DateTime>- <xref:System.Decimal>- <xref:System.Double>- <xref:System.Guid>- <xref:System.Int16>- <xref:System.Int32>- <xref:System.Int64>- <xref:System.SByte>- <xref:System.Single>- <xref:System.String>- <xref:System.TimeSpan>- <xref:System.UInt16>- <xref:System.UInt32>-<xref:System.UInt64>および次の配列型:-`Byte[]`列の後にこのプロパティの変更が開始されたデータを格納するときに、例外が生成されます</xref:System.UInt64></xref:System.UInt32></xref:System.UInt16></xref:System.TimeSpan></xref:System.String></xref:System.Single></xref:System.SByte></xref:System.Int64></xref:System.Int32></xref:System.Int16></xref:System.Guid></xref:System.Double></xref:System.Decimal></xref:System.DateTime></xref:System.Char></xref:System.Byte></xref:System.Boolean>。       場合<xref:System.Data.DataColumn.AutoIncrement%2A>に設定されている`true`型を整数型以外に設定しようと、データ型プロパティの設定前に、例外が生成されます</xref:System.Data.DataColumn.AutoIncrement%2A>。      > [!NOTE] > データ型の列`Byte[]`基本の .NET Framework データ型とは異なり、参照データ型であるためには、特定の状況で特別な処理が必要です。 データ型の列の場合`Byte[]`として使用される、 <xref:System.Data.DataTable.PrimaryKey%2A>、または、<xref:System.Data.DataView.Sort%2A>または<xref:System.Data.DataView.RowFilter%2A>のキー、 <xref:System.Data.DataView>、列値の変更では、割り当てが関係する必要があります、`Byte[]`列の値とは別にインスタンス化を`Byte[]`オブジェクト</xref:System.Data.DataView></xref:System.Data.DataView.RowFilter%2A></xref:System.Data.DataView.Sort%2A></xref:System.Data.DataTable.PrimaryKey%2A>。 並べ替え、フィルター、および主キー操作で使用される内部のインデックスの更新を開始するには、この割り当てが必要です。 例を次に例を示しますこの: ```   byte[] columnValue = (byte[])myDataTable.Rows[0][0];   byte[] newValue = (byte[])columnValue.Clone();   newValue[1] = 2;   myDataTable.Rows[0][0] = newValue;   ```       >  [!NOTE] > データ型の .NET Framework の基本データ型以外の場合、列を定義することはできますが、 `Byte[]`、このような列は、次の使用量制限に従い、ユーザー定義型として扱われます。 (ユーザー定義型の詳細については、次を参照してください[ユーザーの種類の作成と](http://msdn.microsoft.com/en-us/ec0266d2-7e5b-47e4-938a-85ac9d04fa40)。)。     -列がの一部にすることはできません、<xref:System.Data.DataView.RowFilter%2A>または<xref:System.Data.DataTable.Select%2A>式</xref:System.Data.DataTable.Select%2A></xref:System.Data.DataView.RowFilter%2A>。      -として列を使用する場合、 <xref:System.Data.DataTable.PrimaryKey%2A>、または、<xref:System.Data.DataView.Sort%2A>または、 <xref:System.Data.DataView>、変更できないフィールドとして扱う必要がありますテーブルに追加したら、列のデータを変更しないでください。</xref:System.Data.DataView> </xref:System.Data.DataView.Sort%2A> </xref:System.Data.DataTable.PrimaryKey%2A> 。      -その<xref:System.Data.DataColumn.ColumnMapping%2A>にのみ設定できます`MappingType.Element`</xref:System.Data.DataColumn.ColumnMapping%2A>。      -クラスを実装する必要があります、列のデータ型でマークする必要があります、 <xref:System.SerializableAttribute>、必要に応じて実装する場合と、<xref:System.Runtime.Serialization.ISerializable>または<xref:System.Xml.Serialization.IXmlSerializable>インターフェイス</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Runtime.Serialization.ISerializable></xref:System.SerializableAttribute>。      変更の追跡のサポートは制限されています。 利用する、<xref:System.Data.DataTable>クラスの変更の追跡メカニズム、列のデータ型を実装するクラスを実装する必要がありますか、<xref:System.ComponentModel.IChangeTracking>インターフェイス、または通知する責任を引き継ぎます、<xref:System.Data.DataRow>か、呼び出すことによって、列の値が変更されたとき<xref:System.Data.DataRow.SetModified%2A>行または列の値オブジェクトとは別にインスタンス化された列の値オブジェクトを割り当てる</xref:System.Data.DataRow.SetModified%2A></xref:System.Data.DataRow></xref:System.ComponentModel.IChangeTracking></xref:System.Data.DataTable>。"
  example:
  - "The following example adds columns of several data types to a <xref:System.Data.DataTable>, and then adds one row to the table.  \n  \n [!code-cs[Classic WebData DataColumn.DataType Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_4_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataType Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_4_1.vb)]"
  syntax:
    content: public Type DataType { get; set; }
    return:
      type: System.Type
      description: "A<xref:System.Type>列のデータ型を表すオブジェクト</xref:System.Type>。"
  overload: System.Data.DataColumn.DataType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "列が既に格納されているデータを使用しています。"
  platform:
  - net462
- uid: System.Data.DataColumn.DateTimeMode
  id: DateTimeMode
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
  fullName: System.Data.DataColumn.DateTimeMode
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定、 <xref uid=&quot;langword_csharp_DateTimeMode&quot; name=&quot;DateTimeMode&quot; href=&quot;&quot;> </xref>列にします。"
  remarks: "行を追加後に、DateTimeMode を変更することはできません、<xref:System.Data.DataColumn>からの変更を除く<xref:System.Data.DataSetDateTime>と<xref:System.Data.DataSetDateTime>またはその逆</xref:System.Data.DataSetDateTime></xref:System.Data.DataSetDateTime></xref:System.Data.DataColumn>。 変更`UnspecifiedLocal`に`Unspecified`とこれら&2; つのオプションの違いは、シリアル化中にのみ、記憶域には影響しません、その逆は許可されています。"
  syntax:
    content: public System.Data.DataSetDateTime DateTimeMode { get; set; }
    return:
      type: System.Data.DataSetDateTime
      description: "<xref href=&quot;System.Data.DataSetDateTime&quot;> </xref>指定された列にします。"
  overload: System.Data.DataColumn.DateTimeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.DefaultValue
  id: DefaultValue
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
  fullName: System.Data.DataColumn.DefaultValue
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または、新しい行を作成するときに、列の既定値を設定します。"
  remarks: "既定値は、列に自動的に割り当てられている値と、<xref:System.Data.DataRow>が作成される (たとえば、日付と時刻、<xref:System.Data.DataRow>が作成された</xref:System.Data.DataRow></xref:System.Data.DataRow>。       ときに<xref:System.Data.DataColumn.AutoIncrement%2A>に設定されている場合は true、することは既定値です</xref:System.Data.DataColumn.AutoIncrement%2A>。       使用して新しい行を作成することができます、<xref:System.Data.DataRow.ItemArray%2A>のプロパティ、<xref:System.Data.DataRow>クラスと値の配列をメソッドに渡します</xref:System.Data.DataRow></xref:System.Data.DataRow.ItemArray%2A>。 これは、その値が自動的に生成するために問題がある列の既定値です。 使用する、<xref:System.Data.DataRow.ItemArray%2A>プロパティでこのような列は、次のように配置します`null`配列での列の位置。</xref:System.Data.DataRow.ItemArray%2A> 。 詳細については、次を参照してください、<xref:System.Data.DataRow.ItemArray%2A>プロパティ。</xref:System.Data.DataRow.ItemArray%2A> 。"
  example:
  - "The following example creates several <xref:System.Data.DataColumn> objects that have different data types, and sets appropriate default values to each column.  \n  \n [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_0_1.vb)]"
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "列の<xref:System.Data.DataColumn.DataType*>。</xref:System.Data.DataColumn.DataType*>を適切な値"
  overload: System.Data.DataColumn.DefaultValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "行を追加するときに既定値はこの列のデータ型のインスタンスではありません。"
  platform:
  - net462
- uid: System.Data.DataColumn.Expression
  id: Expression
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Expression
  nameWithType: DataColumn.Expression
  fullName: System.Data.DataColumn.Expression
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または行のフィルター選択、列の値を計算または集計列を作成するための式を設定します。"
  remarks: "One use of the Expression property is to create calculated columns. For example, to calculate a tax value, the unit price is multiplied by a tax rate of a specific region. Because tax rates vary from region to region, it would be impossible to put a single tax rate in a column; instead, the value is calculated using the Expression property, as shown in the Visual Basic code in the following section:  \n  \n DataSet1.Tables(\"Products\").Columns(\"tax\").Expression = \"UnitPrice * 0.086\"  \n  \n A second use is to create an aggregate column. Similar to a calculated value, an aggregate performs an operation based on the complete set of rows in the <xref:System.Data.DataTable>. A simple example is to count the number of rows returned in the set. This is the method you would use to count the number of transactions completed by a particular salesperson, as shown in this Visual Basic code:  \n  \n```  \nDataSet1.Tables(\"Orders\").Columns(\"OrderCount\").Expression = \"Count(OrderID)\"  \n```  \n  \n## Expression Syntax  \n When you create an expression, use the <xref:System.Data.DataColumn.ColumnName%2A> property to refer to columns. For example, if the <xref:System.Data.DataColumn.ColumnName%2A> for one column is \"UnitPrice\", and another \"Quantity\", the expression would be as follows:  \n  \n \"UnitPrice * Quantity\"  \n  \n> [!NOTE]\n>  If a column is used in an expression, then the expression is said to have a dependency on that column. If a dependent column is renamed or removed, no exception is thrown. An exception will be thrown when the now-broken expression column is accessed.  \n  \n When you create an expression for a filter, enclose strings with single quotation marks:  \n  \n \"LastName = 'Jones'\"  \n  \n If a column name contains any non-alphanumeric characters or starts with a digit or matches (case-insensitively) any of the following reserved words, it requires special handling, as described in the following paragraphs.  \n  \n And  \n  \n Between  \n  \n Child  \n  \n False  \n  \n In  \n  \n Is  \n  \n Like  \n  \n Not  \n  \n Null  \n  \n Or  \n  \n Parent  \n  \n True  \n  \n If a column name satisfies one of the above conditions, it must be wrapped in either square brackets or the \"`\" (grave accent) quotes. For example, to use a column named \"Column#\" in an expression, you would write either \"[Column#]\":  \n  \n Total * [Column#]  \n  \n or \"\\`Column#`\":  \n  \n Total * \\`Column#`  \n  \n If the column name is enclosed in square brackets then any ']' and '\\\\' characters (but not any other characters) in it must be escaped by prepending them with the backslash (\"\\\\\") character. If the column name is enclosed in grave accent characters then it must not contain any grave accent characters in it. For example, a column named \"Column[]\\\\\" would be written:  \n  \n Total * [Column[\\\\]\\\\\\\\]  \n  \n or  \n  \n Total * \\`Column[]\\\\`  \n  \n## User-Defined Values  \n User-defined values may be used within expressions to be compared with column values. String values should be enclosed within single quotation marks (and each single quotation character in a string value has to be escaped by prepending it with another single quotation character). Date values should be enclosed within pound signs (#) or single quotes (') based on the data provider. Decimals and scientific notation are permissible for numeric values. For example:  \n  \n \"FirstName = 'John'\"  \n  \n \"Price <= 50.00\"  \n  \n \"Birthdate < #1/31/82#\"  \n  \n For columns that contain enumeration values, cast the value to an integer data type. For example:  \n  \n \"EnumColumn = 5\"  \n  \n## Parsing Literal Expressions  \n All literal expressions must be expressed in the invariant culture locale. When `DataSet` parses and converts literal expressions, it always uses the invariant culture, not the current culture.  \n  \n String literals are identified when there are single quotes surrounding the value. For example:  \n  \n 'John'  \n  \n `Boolean` literals are true and false; they are not quoted in expressions.  \n  \n `Integer` literals [+-]?[0-9]+ are treated as `System.Int32`, `System.Int64` or `System.Double`. `System.Double` can lose precision depending on how large the number is. For example, if the number in the literal is 2147483650, `DataSet` will first attempt to parse the number as an `Int32`. This will not succeed because the number is too large. In this case `DataSet` will parse the number as an `Int64`, which will succeed. If the literal was a number larger than the maximum value of an Int64, `DataSet` will parse the literal using `Double`.  \n  \n Real literals using scientific notation, such as 4.42372E-30, are parsed using `System.Double`.  \n  \n Real literals without scientific notation, but with a decimal point, are treated as `System.Decimal`. If the number exceeds the maximum or minimum values supported by `System.Decimal`, then it is parsed as a `System.Double`. For example:  \n  \n 142526.144524 will be converted to a `Decimal`.  \n  \n 345262.78036719560925667 will be treated as a `Double`.  \n  \n## Operators  \n Concatenation is allowed using Boolean AND, OR, and NOT operators. You can use parentheses to group clauses and force precedence. The AND operator has precedence over other operators. For example:  \n  \n (LastName = 'Smith' OR LastName = 'Jones') AND FirstName = 'John'  \n  \n When you create comparison expressions, the following operators are allowed:  \n  \n <  \n  \n \\>  \n  \n <=  \n  \n \\>=  \n  \n <>  \n  \n =  \n  \n IN  \n  \n LIKE  \n  \n The following arithmetic operators are also supported in expressions:  \n  \n \\+ (addition)  \n  \n \\- (subtraction)  \n  \n \\* (multiplication)  \n  \n / (division)  \n  \n % (modulus)  \n  \n## String Operators  \n To concatenate a string, use the + character. The value of the <xref:System.Data.DataSet.CaseSensitive%2A> property of the <xref:System.Data.DataSet> class determines whether string comparisons are case-sensitive. However, you can override that value with the <xref:System.Data.DataTable.CaseSensitive%2A> property of the <xref:System.Data.DataTable> class.  \n  \n## Wildcard Characters  \n Both the * and % can be used interchangeably for wildcard characters in a LIKE comparison. If the string in a LIKE clause contains a \\* or %, those characters should be enclosed in brackets ([]). If a bracket is in the clause, each bracket character should be enclosed in brackets (for example [[] or []]). A wildcard is allowed at the start and end of a pattern, or at the end of a pattern, or at the start of a pattern. For example:  \n  \n \"ItemName LIKE '*product\\*'\"  \n  \n \"ItemName LIKE '*product'\"  \n  \n \"ItemName LIKE 'product*'\"  \n  \n Wildcard characters are not allowed in the middle of a string. For example, 'te*xt' is not allowed.  \n  \n## Parent/Child Relation Referencing  \n A parent table may be referenced in an expression by prepending the column name with `Parent`. For example, the `Parent.Price` references the parent table's column named `Price`.  \n  \n When a child has more than one parent row, use Parent(RelationName).ColumnName. For example, the Parent(RelationName).Price references the parent table’s column named Price via the relation.  \n  \n A column in a child table may be referenced in an expression by prepending the column name with `Child`. However, because child relationships may return multiple rows, you must include the reference to the child column in an aggregate function. For example, `Sum(Child.Price)` would return the sum of the column named `Price` in the child table.  \n  \n If a table has more than one child, the syntax is: `Child(RelationName)`. For example, if a table has two child tables named `Customers` and `Orders`, and the <xref:System.Data.DataRelation> object is named `Customers2Orders`, the reference would be as follows:  \n  \n Avg(Child(Customers2Orders).Quantity)  \n  \n## Aggregates  \n The following aggregate types are supported:  \n  \n Sum (Sum)  \n  \n Avg (Average)  \n  \n Min (Minimum)  \n  \n Max (Maximum)  \n  \n Count (Count)  \n  \n StDev (Statistical standard deviation)  \n  \n Var (Statistical variance).  \n  \n Aggregates are ordinarily performed along relationships. Create an aggregate expression by using one of the functions listed earlier and a child table column as detailed in Parent/Child Relation Referencing that was discussed earlier. For example:  \n  \n Avg(Child.Price)  \n  \n Avg(Child(Orders2Details).Price)  \n  \n An aggregate can also be performed on a single table. For example, to create a summary of figures in a column named \"Price\":  \n  \n Sum(Price)  \n  \n> [!NOTE]\n>  If you use a single table to create an aggregate, there would be no group-by functionality. Instead, all rows would display the same value in the column.  \n  \n If a table has no rows, the aggregate functions will return `null`.  \n  \n Data types can always be determined by examining the <xref:System.Data.DataColumn.DataType%2A> property of a column. You can also convert data types using the Convert function, shown in the following section.  \n  \n An aggregate can only be applied to a single column and no other expressions can be used inside the aggregate.  \n  \n## Functions  \n The following functions are also supported:  \n  \n `CONVERT`  \n  \n|||  \n|-|-|  \n|Description|Converts particular expression to a specified .NET Framework Type.|  \n|Syntax|Convert(`expression`, `type`)|  \n|Arguments|`expression` -- The expression to convert.<br /><br /> `type` -- The .NET Framework type to which the value will be converted.|  \n  \n Example: myDataColumn.Expression=\"Convert(total, 'System.Int32')\"  \n  \n All conversions are valid with the following exceptions: `Boolean` can be coerced to and from `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` and itself only. `Char` can be coerced to and from `Int32`, `UInt32`, `String`, and itself only. `DateTime` can be coerced to and from `String` and itself only. `TimeSpan` can be coerced to and from `String` and itself only.  \n  \n `LEN`  \n  \n|||  \n|-|-|  \n|Description|Gets the length of a string|  \n|Syntax|LEN(`expression`)|  \n|Arguments|`expression` -- The string to be evaluated.|  \n  \n Example: myDataColumn.Expression=\"Len(ItemName)\"  \n  \n `ISNULL`  \n  \n|||  \n|-|-|  \n|Description|Checks an expression and either returns the checked expression or a replacement value.|  \n|Syntax|ISNULL(`expression`, `replacementvalue`)|  \n|Arguments|`expression` -- The expression to check.<br /><br /> `replacementvalue` -- If expression is `null`, `replacementvalue` is returned.|  \n  \n Example: myDataColumn.Expression=\"IsNull(price, -1)\"  \n  \n `IIF`  \n  \n|||  \n|-|-|  \n|Description|Gets one of two values depending on the result of a logical expression.|  \n|Syntax|IIF(`expr`, `truepart`, `falsepart`)|  \n|Arguments|`expr` -- The expression to evaluate.<br /><br /> `truepart` -- The value to return if the expression is true.<br /><br /> `falsepart` -- The value to return if the expression is false.|  \n  \n Example: myDataColumn.Expression = \"IIF(total>1000, 'expensive', 'dear')  \n  \n `TRIM`  \n  \n|||  \n|-|-|  \n|Description|Removes all leading and trailing blank characters like \\r, \\n, \\t, ' '|  \n|Syntax|TRIM(`expression`)|  \n|Arguments|`expression` -- The expression to trim.|  \n  \n `SUBSTRING`  \n  \n|||  \n|-|-|  \n|Description|Gets a sub-string of a specified length, starting at a specified point in the string.|  \n|Syntax|SUBSTRING(`expression`, `start`, `length`)|  \n|Arguments|`expression` -- The source string for the substring.<br /><br /> `start` -- Integer that specifies where the substring starts.<br /><br /> `length` -- Integer that specifies the length of the substring.|  \n  \n Example: myDataColumn.Expression = \"SUBSTRING(phone, 7, 8)\"  \n  \n> [!NOTE]\n>  You can reset the Expression property by assigning it a null value or empty string. If a default value is set on the expression column, all previously filled rows are assigned the default value after the Expression property is reset."
  example:
  - "The following example creates three columns in a <xref:System.Data.DataTable>. The second and third columns contain expressions; the second calculates tax using a variable tax rate, and the third adds the result of the calculation to the value of the first column. The resulting table is displayed in a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-cs[Classic WebData DataColumn.Expression Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_1_1.cs)]\n [!code-vb[Classic WebData DataColumn.Expression Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_1_1.vb)]"
  syntax:
    content: public string Expression { get; set; }
    return:
      type: System.String
      description: "列の値を計算または集計列を作成する式。 式の戻り値の型によって決定されます、<xref:System.Data.DataColumn.DataType*>列の</xref:System.Data.DataColumn.DataType*>。"
  overload: System.Data.DataColumn.Expression*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <>*> or <>*> property is set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "CONVERT 関数を使用しているときに、文字列式の評価結果が文字列に、型パラメーターに変換できる表現が含まれていません。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "CONVERT 関数を使用しているときに要求されたキャストはできません。 考えられるキャストの詳細については、次のセクションで、変換関数を参照してください。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "SUBSTRING 関数を使用する場合、開始引数が範囲外です。       または、長の引数が範囲外の部分文字列関数を使用するとします。"
  - type: System.Exception
    commentId: T:System.Exception
    description: "LEN 関数または TRIM 関数を使用する場合、式は文字列に評価されません。 これにより、 <xref:System.Char>。</xref:System.Char>に評価される式が含まれます。"
  platform:
  - net462
- uid: System.Data.DataColumn.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
  fullName: System.Data.DataColumn.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "関連付けられているカスタムのユーザー情報のコレクションを取得、 <xref href=&quot;System.Data.DataColumn&quot;></xref>です。"
  remarks: "ExtendedProperties プロパティでは、オブジェクトにカスタム情報を格納できます。 たとえば、データを更新する場合、時刻を格納する場合があります。       拡張プロパティは、型<xref:System.String>。</xref:System.String>でなければなりません 種類がプロパティ<xref:System.String>ときは保持されず、<xref:System.Data.DataColumn>は XML として書き込まれます</xref:System.Data.DataColumn></xref:System.String>。"
  example:
  - "The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the ExtendedProperties property. The second example retrieves the custom property.  \n  \n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_10_1.cs)]\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_10_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "A <xref href=&quot;System.Data.PropertyCollection&quot;> </xref>カスタム情報。"
  overload: System.Data.DataColumn.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.MaxLength
  id: MaxLength
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: MaxLength
  nameWithType: DataColumn.MaxLength
  fullName: System.Data.DataColumn.MaxLength
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得またはテキスト列の最大長を設定します。"
  remarks: "MaxLength プロパティには、テキスト以外の列は無視されます。 A <xref:System.ArgumentException>MaxLength を文字列以外の列に割り当てる場合に例外が発生します</xref:System.ArgumentException>。"
  syntax:
    content: public int MaxLength { get; set; }
    return:
      type: System.Int32
      description: "文字内の列の最大長。 最大長の列がない場合は、値は –&1; (既定値) です。"
  overload: System.Data.DataColumn.MaxLength*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Namespace
  id: Namespace
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Namespace
  nameWithType: DataColumn.Namespace
  fullName: System.Data.DataColumn.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定の名前空間、 <xref href=&quot;System.Data.DataColumn&quot;></xref>です。"
  remarks: "Namespace プロパティにドキュメントの XML を読み書きするときに使用される、<xref:System.Data.DataTable>で、<xref:System.Data.DataSet>を使用して、 <xref:System.Data.DataSet.ReadXml%2A>、 <xref:System.Data.DataSet.WriteXml%2A>、 <xref:System.Data.DataSet.ReadXmlSchema%2A>、または<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.WriteXml%2A></xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet></xref:System.Data.DataTable>。       XML ドキュメントの名前空間は XML 属性および<xref:System.Data.DataSet>。</xref:System.Data.DataSet>を読み取るときに要素のスコープを指定するために使用します。 たとえば、<xref:System.Data.DataSet>スキーマを含む&quot;myCompany、&quot;名前空間を持つドキュメントから読み取るデータの読み取りが試行され (で、<xref:System.Data.DataSet.ReadXml%2A>メソッド) を&quot;theirCompany&quot;名前空間を持つドキュメントから</xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet> 既存のスキーマに対応していないすべてのデータは無視されます。"
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "名前空間、 <xref href=&quot;System.Data.DataColumn&quot;></xref>です。"
  overload: System.Data.DataColumn.Namespace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "名前空間には、既にデータがあります。"
  platform:
  - net462
- uid: System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "このメンバーは、.NET Framework インフラストラクチャをサポートしているをコードから直接使用するものではありません。"
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "パラメーターの参照。"
  overload: System.Data.DataColumn.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Ordinal
  id: Ordinal
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Ordinal
  nameWithType: DataColumn.Ordinal
  fullName: System.Data.DataColumn.Ordinal
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "内の列の (0 から始まる) 位置を取得、 <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref>コレクション。"
  remarks: ''
  example:
  - "The following example returns the column name, ordinal, and data type of a column.  \n  \n [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_16_1.vb)]\n [!code-cs[Classic WebData DataColumn.Ordinal Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_16_1.cs)]"
  syntax:
    content: public int Ordinal { get; }
    return:
      type: System.Int32
      description: "列の位置。 列がコレクションのメンバーでない場合は、-1 を取得します。"
  overload: System.Data.DataColumn.Ordinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Prefix
  id: Prefix
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Prefix
  nameWithType: DataColumn.Prefix
  fullName: System.Data.DataColumn.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定の名前空間のエイリアスを表すプレフィックス、XML、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。"
  remarks: "<xref:System.Data.DataTable.Prefix%2A>の名前空間に属している要素を識別する XML ドキュメント全体で使用される、<xref:System.Data.DataSet>オブジェクト (によって、設定、<xref:System.Data.DataSet.Namespace%2A>プロパティ).</xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable.Prefix%2A>"
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "XML プレフィックス、 <xref href=&quot;System.Data.DataTable&quot;> </xref>名前空間。"
  overload: System.Data.DataColumn.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataColumn.RaisePropertyChanging(String)
  fullName: System.Data.DataColumn.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "このメンバーは、.NET Framework インフラストラクチャをサポートしているをコードから直接使用するものではありません。"
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "パラメーターの参照。"
  overload: System.Data.DataColumn.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ReadOnly
  id: ReadOnly
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
  fullName: System.Data.DataColumn.ReadOnly
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または列がテーブルに行を追加するとすぐに変更できるかどうかを示す値を設定します。"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Data.DataColumn> and sets its ReadOnly property `true`.  \n  \n [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_12_1.vb)]\n [!code-cs[Classic WebData DataColumn.ReadOnly Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_12_1.cs)]"
  syntax:
    content: public bool ReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、列は読み取り専用です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataColumn.ReadOnly*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "プロパティに設定<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>計算列にします。"
  platform:
  - net462
- uid: System.Data.DataColumn.SetOrdinal(System.Int32)
  id: SetOrdinal(System.Int32)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: SetOrdinal(Int32)
  nameWithType: DataColumn.SetOrdinal(Int32)
  fullName: System.Data.DataColumn.SetOrdinal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ordinal またはの位置を変更、 <xref href=&quot;System.Data.DataColumn&quot;> </xref>指定された序数の位置にします。"
  remarks: "Ordinal またはの位置を変更、 <xref:System.Data.DataColumn>、指定された序数の位置にします</xref:System.Data.DataColumn>。 序数に基づく場合は 0 より小さい列: 1 (最後の列の序数を超える) の既存の数よりも大きいし、無効な<xref:System.ArgumentException>がスローされます</xref:System.ArgumentException>。       変更すると、列の序数、列が列のコレクション内の新しい位置に移動されます。 列の新しい序数を調整する、以前と新しい序数との間のすべての列に番号がします。"
  syntax:
    content: public void SetOrdinal (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "指定した序数。"
  overload: System.Data.DataColumn.SetOrdinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Table
  id: Table
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Table
  nameWithType: DataColumn.Table
  fullName: System.Data.DataColumn.Table
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得、 <xref href=&quot;System.Data.DataTable&quot;> </xref>に属している列。"
  remarks: ''
  example:
  - "The following example returns the parent table of a <xref:System.Data.DataColumn> through its Table property.  \n  \n [!code-vb[Classic WebData DataColumn.Table Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_6_1.vb)]\n [!code-cs[Classic WebData DataColumn.Table Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_6_1.cs)]"
  syntax:
    content: public System.Data.DataTable Table { get; }
    return:
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref>を<xref href=&quot;System.Data.DataColumn&quot;></xref>に属しています。"
  overload: System.Data.DataColumn.Table*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ToString
  id: ToString
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ToString()
  nameWithType: DataColumn.ToString()
  fullName: System.Data.DataColumn.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得、<xref:System.Data.DataColumn.Expression*>が存在する場合は、列の</xref:System.Data.DataColumn.Expression*>。"
  remarks: ''
  example:
  - "The following example uses the ToString property to return the default string of each member of a collection of <xref:System.Data.DataColumn> objects.  \n  \n [!code-vb[Classic WebData DataColumn.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_1_1.vb)]\n [!code-cs[Classic WebData DataColumn.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "<> </> *> プロパティが設定されて、それ以外の場合は、値、 <> </> *> プロパティです。"
  overload: System.Data.DataColumn.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Unique
  id: Unique
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Unique
  nameWithType: DataColumn.Unique
  fullName: System.Data.DataColumn.Unique
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または列の各行の値が一意である必要があるかどうかを示す値を設定します。"
  remarks: "このプロパティは、false から true に変更とすぐに unique 制約は、値が一意であるかどうかを確認するには、この列に作成されます。"
  example:
  - "The following example creates new <xref:System.Data.DataColumn>, sets its properties, and adds it to a table's columns collection.  \n  \n [!code-cs[Classic WebData DataColumn.Unique Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_3_1.cs)]\n [!code-vb[Classic WebData DataColumn.Unique Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_3_1.vb)]"
  syntax:
    content: public bool Unique { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>値が一意である必要がある場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataColumn.Unique*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "列では、計算列です。"
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Data.DataColumn.#ctor
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn()
  nameWithType: DataColumn.DataColumn()
  fullName: System.Data.DataColumn.DataColumn()
- uid: System.Data.DataColumn.#ctor(System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String)
  nameWithType: DataColumn.DataColumn(String)
  fullName: System.Data.DataColumn.DataColumn(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataColumn.#ctor(System.String,System.Type)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type)
  nameWithType: DataColumn.DataColumn(String,Type)
  fullName: System.Data.DataColumn.DataColumn(String,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type,String)
  nameWithType: DataColumn.DataColumn(String,Type,String)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String)
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type,String,MappingType)
  nameWithType: DataColumn.DataColumn(String,Type,String,MappingType)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String,MappingType)
- uid: System.Data.MappingType
  parent: System.Data
  isExternal: false
  name: MappingType
  nameWithType: MappingType
  fullName: System.Data.MappingType
- uid: System.Data.DataColumn.AllowDBNull
  parent: System.Data.DataColumn
  isExternal: false
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
  fullName: System.Data.DataColumn.AllowDBNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataColumn.AutoIncrement
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
  fullName: System.Data.DataColumn.AutoIncrement
- uid: System.Data.DataColumn.AutoIncrementSeed
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
  fullName: System.Data.DataColumn.AutoIncrementSeed
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Data.DataColumn.AutoIncrementStep
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
  fullName: System.Data.DataColumn.AutoIncrementStep
- uid: System.Data.DataColumn.Caption
  parent: System.Data.DataColumn
  isExternal: false
  name: Caption
  nameWithType: DataColumn.Caption
  fullName: System.Data.DataColumn.Caption
- uid: System.Data.DataColumn.CheckNotAllowNull
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckNotAllowNull()
  nameWithType: DataColumn.CheckNotAllowNull()
  fullName: System.Data.DataColumn.CheckNotAllowNull()
- uid: System.Data.DataColumn.CheckUnique
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckUnique()
  nameWithType: DataColumn.CheckUnique()
  fullName: System.Data.DataColumn.CheckUnique()
- uid: System.Data.DataColumn.ColumnMapping
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
  fullName: System.Data.DataColumn.ColumnMapping
- uid: System.Data.DataColumn.ColumnName
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnName
  nameWithType: DataColumn.ColumnName
  fullName: System.Data.DataColumn.ColumnName
- uid: System.Data.DataColumn.DataType
  parent: System.Data.DataColumn
  isExternal: false
  name: DataType
  nameWithType: DataColumn.DataType
  fullName: System.Data.DataColumn.DataType
- uid: System.Data.DataColumn.DateTimeMode
  parent: System.Data.DataColumn
  isExternal: false
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
  fullName: System.Data.DataColumn.DateTimeMode
- uid: System.Data.DataSetDateTime
  parent: System.Data
  isExternal: false
  name: DataSetDateTime
  nameWithType: DataSetDateTime
  fullName: System.Data.DataSetDateTime
- uid: System.Data.DataColumn.DefaultValue
  parent: System.Data.DataColumn
  isExternal: false
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
  fullName: System.Data.DataColumn.DefaultValue
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataColumn.Expression
  parent: System.Data.DataColumn
  isExternal: false
  name: Expression
  nameWithType: DataColumn.Expression
  fullName: System.Data.DataColumn.Expression
- uid: System.Data.DataColumn.ExtendedProperties
  parent: System.Data.DataColumn
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
  fullName: System.Data.DataColumn.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataColumn.MaxLength
  parent: System.Data.DataColumn
  isExternal: false
  name: MaxLength
  nameWithType: DataColumn.MaxLength
  fullName: System.Data.DataColumn.MaxLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataColumn.Namespace
  parent: System.Data.DataColumn
  isExternal: false
  name: Namespace
  nameWithType: DataColumn.Namespace
  fullName: System.Data.DataColumn.Namespace
- uid: System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataColumn
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataColumn.Ordinal
  parent: System.Data.DataColumn
  isExternal: false
  name: Ordinal
  nameWithType: DataColumn.Ordinal
  fullName: System.Data.DataColumn.Ordinal
- uid: System.Data.DataColumn.Prefix
  parent: System.Data.DataColumn
  isExternal: false
  name: Prefix
  nameWithType: DataColumn.Prefix
  fullName: System.Data.DataColumn.Prefix
- uid: System.Data.DataColumn.RaisePropertyChanging(System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataColumn.RaisePropertyChanging(String)
  fullName: System.Data.DataColumn.RaisePropertyChanging(String)
- uid: System.Data.DataColumn.ReadOnly
  parent: System.Data.DataColumn
  isExternal: false
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
  fullName: System.Data.DataColumn.ReadOnly
- uid: System.Data.DataColumn.SetOrdinal(System.Int32)
  parent: System.Data.DataColumn
  isExternal: false
  name: SetOrdinal(Int32)
  nameWithType: DataColumn.SetOrdinal(Int32)
  fullName: System.Data.DataColumn.SetOrdinal(Int32)
- uid: System.Data.DataColumn.Table
  parent: System.Data.DataColumn
  isExternal: false
  name: Table
  nameWithType: DataColumn.Table
  fullName: System.Data.DataColumn.Table
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataColumn.ToString
  parent: System.Data.DataColumn
  isExternal: false
  name: ToString()
  nameWithType: DataColumn.ToString()
  fullName: System.Data.DataColumn.ToString()
- uid: System.Data.DataColumn.Unique
  parent: System.Data.DataColumn
  isExternal: false
  name: Unique
  nameWithType: DataColumn.Unique
  fullName: System.Data.DataColumn.Unique
- uid: System.Data.DataColumn.#ctor*
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn.DataColumn
- uid: System.Data.DataColumn.AllowDBNull*
  parent: System.Data.DataColumn
  isExternal: false
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
- uid: System.Data.DataColumn.AutoIncrement*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
- uid: System.Data.DataColumn.AutoIncrementSeed*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
- uid: System.Data.DataColumn.AutoIncrementStep*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
- uid: System.Data.DataColumn.Caption*
  parent: System.Data.DataColumn
  isExternal: false
  name: Caption
  nameWithType: DataColumn.Caption
- uid: System.Data.DataColumn.CheckNotAllowNull*
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckNotAllowNull
  nameWithType: DataColumn.CheckNotAllowNull
- uid: System.Data.DataColumn.CheckUnique*
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckUnique
  nameWithType: DataColumn.CheckUnique
- uid: System.Data.DataColumn.ColumnMapping*
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
- uid: System.Data.DataColumn.ColumnName*
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnName
  nameWithType: DataColumn.ColumnName
- uid: System.Data.DataColumn.DataType*
  parent: System.Data.DataColumn
  isExternal: false
  name: DataType
  nameWithType: DataColumn.DataType
- uid: System.Data.DataColumn.DateTimeMode*
  parent: System.Data.DataColumn
  isExternal: false
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
- uid: System.Data.DataColumn.DefaultValue*
  parent: System.Data.DataColumn
  isExternal: false
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
- uid: System.Data.DataColumn.Expression*
  parent: System.Data.DataColumn
  isExternal: false
  name: Expression
  nameWithType: DataColumn.Expression
- uid: System.Data.DataColumn.ExtendedProperties*
  parent: System.Data.DataColumn
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
- uid: System.Data.DataColumn.MaxLength*
  parent: System.Data.DataColumn
  isExternal: false
  name: MaxLength
  nameWithType: DataColumn.MaxLength
- uid: System.Data.DataColumn.Namespace*
  parent: System.Data.DataColumn
  isExternal: false
  name: Namespace
  nameWithType: DataColumn.Namespace
- uid: System.Data.DataColumn.OnPropertyChanging*
  parent: System.Data.DataColumn
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataColumn.OnPropertyChanging
- uid: System.Data.DataColumn.Ordinal*
  parent: System.Data.DataColumn
  isExternal: false
  name: Ordinal
  nameWithType: DataColumn.Ordinal
- uid: System.Data.DataColumn.Prefix*
  parent: System.Data.DataColumn
  isExternal: false
  name: Prefix
  nameWithType: DataColumn.Prefix
- uid: System.Data.DataColumn.RaisePropertyChanging*
  parent: System.Data.DataColumn
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataColumn.RaisePropertyChanging
- uid: System.Data.DataColumn.ReadOnly*
  parent: System.Data.DataColumn
  isExternal: false
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
- uid: System.Data.DataColumn.SetOrdinal*
  parent: System.Data.DataColumn
  isExternal: false
  name: SetOrdinal
  nameWithType: DataColumn.SetOrdinal
- uid: System.Data.DataColumn.Table*
  parent: System.Data.DataColumn
  isExternal: false
  name: Table
  nameWithType: DataColumn.Table
- uid: System.Data.DataColumn.ToString*
  parent: System.Data.DataColumn
  isExternal: false
  name: ToString
  nameWithType: DataColumn.ToString
- uid: System.Data.DataColumn.Unique*
  parent: System.Data.DataColumn
  isExternal: false
  name: Unique
  nameWithType: DataColumn.Unique
