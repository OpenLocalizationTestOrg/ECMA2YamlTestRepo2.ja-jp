### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher
  id: EventLogWatcher
  children:
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  langs:
  - csharp
  name: EventLogWatcher
  nameWithType: EventLogWatcher
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher
  type: Class
  summary: "使用すると、受信イベントにサブスクライブできます。 目的のイベントがイベント ログに発行されるたび、 <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref>イベントが発生し、このイベントを処理するメソッドは実行されます。"
  remarks: "このクラスのインスタンスから作成されます<xref:System.Diagnostics.Eventing.Reader.EventLogQuery>オブジェクトで、イベント サブスクリプションのクエリを指定します</xref:System.Diagnostics.Eventing.Reader.EventLogQuery>。 イベントが記録された、クエリで表される条件に一致する場合に、<xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten>イベントが発生します</xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten>。"
  example:
  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'
  syntax:
    content: 'public class EventLogWatcher : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref>イベント クエリを指定することによってクラスです。"
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "イベント サブスクリプションのクエリを指定します。 クエリで表される条件に一致するイベントが記録された場合に、 <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref>イベントが発生します。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(String)
  nameWithType: EventLogWatcher.EventLogWatcher(String)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(String)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref>クラス名またはイベント ログへのパスを指定します。"
  syntax:
    content: public EventLogWatcher (string path);
    parameters:
    - id: path
      type: System.String
      description: "パスまたはイベントのイベント ログ モニターの名前。 任意のイベントがこのイベント ログに記録された場合、 <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref>イベントが発生します。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery,EventBookmark)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref>クラス イベント クエリとクエリの開始位置として使用されるブックマークを指定しています。"
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "イベント サブスクリプションのクエリを指定します。 クエリで表される条件に一致するイベントが記録された場合に、 <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref>イベントが発生します。"
    - id: bookmark
      type: System.Diagnostics.Eventing.Reader.EventBookmark
      description: "イベント ログまたはイベントのストリーム内の開始位置として使用されるブックマーク (プレース ホルダー)。 クエリによって返されるブックマーク イベント後にログに記録されたイベントのみです。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref>クラス イベント クエリ、クエリの開始位置として使用されるブックマークおよび読み取りイベントがイベント ログに既に存在するかどうかを決定するブール値を指定します。"
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "イベント サブスクリプションのクエリを指定します。 クエリで表される条件に一致するイベントが記録された場合に、 <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref>イベントが発生します。"
    - id: bookmark
      type: System.Diagnostics.Eventing.Reader.EventBookmark
      description: "イベント ログまたはイベントのストリーム内の開始位置として使用されるブックマーク (プレース ホルダー)。 クエリによって返されるブックマーク イベント後にログに記録されたイベントのみです。"
    - id: readExistingEvents
      type: System.Boolean
      description: "イベント ログに既に存在するイベントを読み取るかどうかを決定するブール値。 この値が場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>、既存のイベントが読み取られ、この値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>、既存のイベントが読み取られません。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  id: Dispose
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Dispose()
  nameWithType: EventLogWatcher.Dispose()
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "このオブジェクトによって使用されているすべてのリソースを解放します。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogWatcher.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "このオブジェクトによって使用されているアンマネージ リソースを解放し、必要に応じてマネージ リソースも解放します。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  id: Enabled
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  type: Property
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "このオブジェクトがイベント デリゲートへのイベントの配信を開始するかどうかを判断します。"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "返します<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>イベント デリゲートを返す、このオブジェクトがイベントを配信するときに<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>ときにこのオブジェクトの配信が停止します。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  id: EventRecordWritten
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventRecordWritten
  nameWithType: EventLogWatcher.EventRecordWritten
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  type: Event
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "設定する、デリゲート (イベント ハンドラー メソッド) イベントが発行されるたびに呼び出される条件に一致するイベントで指定されて、このオブジェクトのクエリを許可します。"
  remarks: ''
  example:
  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'
  syntax:
    content: public event EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs> EventRecordWritten;
    return:
      type: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery)
- uid: System.Diagnostics.Eventing.Reader.EventLogQuery
  parent: System.Diagnostics.Eventing.Reader
  isExternal: false
  name: EventLogQuery
  nameWithType: EventLogQuery
  fullName: System.Diagnostics.Eventing.Reader.EventLogQuery
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(String)
  nameWithType: EventLogWatcher.EventLogWatcher(String)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery,EventBookmark)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
- uid: System.Diagnostics.Eventing.Reader.EventBookmark
  parent: System.Diagnostics.Eventing.Reader
  isExternal: false
  name: EventBookmark
  nameWithType: EventBookmark
  fullName: System.Diagnostics.Eventing.Reader.EventBookmark
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose()
  nameWithType: EventLogWatcher.Dispose()
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose()
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogWatcher.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(Boolean)
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventRecordWritten
  nameWithType: EventLogWatcher.EventRecordWritten
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
- uid: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<EventRecordWrittenEventArgs>
  nameWithType: EventHandler<EventRecordWrittenEventArgs>
  fullName: System.EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs
    name: EventRecordWrittenEventArgs
    nameWithType: EventRecordWrittenEventArgs
    fullName: EventRecordWrittenEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher
  nameWithType: EventLogWatcher.EventLogWatcher
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose
  nameWithType: EventLogWatcher.Dispose
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
