### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.XmlDataSource
  id: XmlDataSource
  children:
  - System.Web.UI.WebControls.XmlDataSource.#ctor
  - System.Web.UI.WebControls.XmlDataSource.CacheDuration
  - System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  - System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.XmlDataSource.Data
  - System.Web.UI.WebControls.XmlDataSource.DataFile
  - System.Web.UI.WebControls.XmlDataSource.EnableCaching
  - System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)
  - System.Web.UI.WebControls.XmlDataSource.GetXmlDocument
  - System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)
  - System.Web.UI.WebControls.XmlDataSource.Save
  - System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList
  - System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.WebControls.XmlDataSource.Transform
  - System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  - System.Web.UI.WebControls.XmlDataSource.TransformFile
  - System.Web.UI.WebControls.XmlDataSource.Transforming
  - System.Web.UI.WebControls.XmlDataSource.XPath
  langs:
  - csharp
  name: XmlDataSource
  nameWithType: XmlDataSource
  fullName: System.Web.UI.WebControls.XmlDataSource
  type: Class
  summary: "データ バインド コントロールに XML データ ソースを表します。"
  remarks: "このトピックで:-[概要](#introduction)      -   [XML データのソース](#source_of_xml_data)      -   [XML データの更新](#updating_xml_data)      -   [XSL 変換を指定する](#specifying_an_xsl_transformation)      -   [XPath 式を使用してフィルター処理](#filtering_using_an_xpath_expression)      -   [キャッシュ](#caching)      -   [追加機能](#additional_features)      -   [データ ビュー オブジェクト](#data_view_object)      -   [宣言構文](#declarative_syntax)<a name=&quot;introduction&quot;> </a> ## の概要、XmlDataSource コントロールは、XML データをデータ バインド コントロールを表示するデータ ソース コントロール。       XmlDataSource コントロールは、階層と表形式の両方のデータを表示するデータ バインド コントロールで使用できます。 XmlDataSource コントロールは通常、読み取り専用のシナリオでの階層の XML データの表示に使用されます。 XmlDataSource コントロールを拡張するため、<xref:System.Web.UI.HierarchicalDataSourceControl>階層データと連携して、クラス</xref:System.Web.UI.HierarchicalDataSourceControl>。 XmlDataSource コントロールを実装しても、<xref:System.Web.UI.IDataSource>インターフェイスでの動作を表形式、またはリスト形式、データ</xref:System.Web.UI.IDataSource>。      > [!NOTE] > セキュリティのために、コントロールのプロパティが指定された xmldatasource 上のいずれもビューステートに保存します。 技術的には、クライアント上のビュー ステートの内容をデコードできるため、データ構造体、またはその内容に関する機密情報を格納するおそれ情報漏洩の脅威にします。 などの情報を保存する必要がある場合を注意してください<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティ ビューで、状態を設定して、コンテンツを保護する暗号化を有効にすることができます<xref:System.Web.UI.Page.ViewStateEncryptionMode%2A>上、`@ Page`ディレクティブ。</xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> </xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 。       ページの開発者は、データ バインド コントロールを使用して XML データを表示するのに XmlDataSource コントロールを使用します。      <a name=&quot;source_of_xml_data&quot;></a>## XML データ、XmlDataSource のソースは通常、によって指定される XML ファイルから XML データを読み込みます、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>。 文字列形式を使用して、データ ソース コントロールによって直接 XML データを格納することも、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>。 データ バインドされたコントロールによって表示されるまでに、XML データを変換する場合は、変換の拡張スタイル シート言語 (XSL) スタイル シートを指定できます。 によって示されるように、XML データでは、ファイルからスタイル シートを読み込む通常、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティも格納できますで文字列形式を使用して直接、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A></xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>。      <a name=&quot;updating_xml_data&quot;></a>## XML データ、XmlDataSource コントロールの更新はよくシナリオで使用読み取り専用データ、データ バインド コントロールが XML データが表示されます。 ただし、XML データを編集するのに XmlDataSource コントロールを使用することもできます。 XML データを編集するには、呼び出し、<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>を取得する方法、<xref:System.Xml.XmlDataDocument>オブジェクト、XML データをメモリ内表現です</xref:System.Xml.XmlDataDocument></xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>。 によって公開されるオブジェクト モデルを使用することができます、<xref:System.Xml.XmlDataDocument>と<xref:System.Xml.XmlNode>オブジェクトが含まれていますが、または XPath 式をフィルター処理を使用してドキュメント内のデータを操作します</xref:System.Xml.XmlNode></xref:System.Xml.XmlDataDocument>。 XML データのメモリ内表現を変更したときに、それを呼び出すことによってディスクを保存、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッド</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>。       XmlDataSource コントロールの編集機能をいくつかの制限がある:-で示されている XML ファイルから XML データを読み込む必要がある、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>からインラインで指定された XML ではなく、プロパティ、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A></xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>。      -XSLT 変換を指定することができます、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>または<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A></xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>。      -<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッドを処理しません保存操作の同時実行要求によって</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>。 複数のユーザーが指定された xmldatasource 上での XML ファイルを編集している場合、すべてのユーザーは、同じデータで動作している保証はありません。 ことも、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>これら同じ同時実行の問題により失敗する操作</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>。      <a name=&quot;specifying_an_xsl_transformation&quot;></a>## XML データで実行される XSL 変換 A 一般的な操作を指定するは&1; つの XML データのセットに変換別です。 XmlDataSource コントロールを使用した XML 変換をサポートしている、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>と<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>データ バインド コントロールに渡される前に、XML データに適用する XSL スタイル シートを指定するには、このプロパティは、および<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>プロパティで、変換中に、XSL スタイル シートで使用する動的の XSLT スタイル シート引数を指定することができます</xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A></xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A></xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>。 XPath 式を使用してフィルターを指定する場合、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティが適用される変換が行われた後</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>。      > [!NOTE] >、XmlDataSource クラスを使用して、非推奨<xref:System.Xml.Xsl.XslTransform>XSL 変換を実行するクラス</xref:System.Xml.Xsl.XslTransform>。 この<xref:System.Xml.Xsl.XslTransform>クラスは廃止されて、<xref:System.Xml.Xsl.XslCompiledTransform>クラス</xref:System.Xml.Xsl.XslCompiledTransform>を使用して手動で変換を適用</xref:System.Xml.Xsl.XslTransform>後に導入されたスタイル シートの機能を使用する場合      <a name=&quot;filtering_using_an_xpath_expression&quot;></a>## は、XPath 式既定では、コントロールで識別される XML ファイル内のすべての XML データを読み込む XmlDataSource を使用してフィルター処理、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティまたはインラインで見つかった、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティが、XPath 式を使用してデータをフィルター処理できます</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A></xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>。 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティには、XML データが読み込まれ、変換後に適用されている XPath 構文フィルターがサポートしています</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>。      <a name=&quot;caching&quot;></a>## キャッシュのパフォーマンス向上のため、キャッシュは既定で XmlDataSource コントロールを有効にします。 開くと、ページが要求されるたびに、サーバー上の XML ファイルを読み取り、アプリケーションのパフォーマンスが低下することができます。 Web サーバー上のメモリを犠牲にして、サーバー上の処理負荷を軽減するキャッシュによってほとんどの場合これは、適切なトレードオフです。 XmlDataSource が自動的にデータをキャッシュときに、<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>プロパティに設定されている`true`、および<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>プロパティが、キャッシュを無効にする前に、キャッシュがデータを格納する秒数に設定します</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>。 使用することができます、<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>をさらに、データ ソース コントロールのキャッシュ動作を細かく調整します</xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>。      <a name=&quot;additional_features&quot;></a>## 追加機能、次の表は、XmlDataSource コントロールでサポートされている追加の機能を一覧表示します。      |機能 |説明 |  |----------------|-----------------|  |並べ替え |XmlDataSource コントロールによってサポートされていません |。  |フィルタ リング |<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティは、適切な XPath 式を使用して XML データをフィルター処理に使用できます |。  |ページング |XmlDataSource コントロールによってサポートされていません |。  |更新 |<xref:System.Xml.XmlDataDocument>を直接操作して、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッドを呼び出すことでサポートされている |。  |削除する |<xref:System.Xml.XmlDataDocument>を直接操作して、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッドを呼び出すことでサポートされている |。  |挿入 |<xref:System.Xml.XmlDataDocument>を直接操作して、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッドを呼び出すことでサポートされている |。  |キャッシュ |既定では、(無限) を 0 に設定<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>プロパティと設定<xref:System.Web.UI.DataSourceCacheExpiry><xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>プロパティで有効にします |。     <a name=&quot;data_view_object&quot;> </a> ## 階層データを表示するデータ バインド コントロールと表形式のデータを表示するコントロールをデータ ビュー オブジェクトのため XmlDataSource コントロールをサポートしている、データ ソース コントロールは、基になる XML データに複数のデータ ソース ビュー オブジェクトの種類をサポートしています</xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A></xref:System.Web.UI.DataSourceCacheExpiry></xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.XmlDataSource.Save%2A></xref:System.Xml.XmlDataDocument></xref:System.Web.UI.WebControls.XmlDataSource.Save%2A></xref:System.Xml.XmlDataDocument></xref:System.Web.UI.WebControls.XmlDataSource.Save%2A></xref:System.Xml.XmlDataDocument></xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>。 XmlDataSource コントロールを取得、単一の名前付き<xref:System.Web.UI.WebControls.XmlDataSourceView>オブジェクトが表形式のデータを表示するデータ バインド コントロールを使用するとします</xref:System.Web.UI.WebControls.XmlDataSourceView>。 <xref:System.Web.UI.IDataSource.GetViewNames%2A>メソッドは、この単一のビューを名前付きを識別します</xref:System.Web.UI.IDataSource.GetViewNames%2A>。 階層データを表示するデータ バインド コントロールに使用する場合、XmlDataSource コントロールを取得、<xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>に渡される、一意の階層パスに対して、<xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A>メソッド</xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A></xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>。      <a name=&quot;declarative_syntax&quot;></a>## 宣言構文```   <asp:XmlDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       DataFile=&quot;string&quot;       EnableCaching=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       ID=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnInit=&quot;Init event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnTransforming=&quot;Transforming event handler&quot;       OnUnload=&quot;Unload event handler&quot;       runat=&quot;server&quot;       SkinID=&quot;string&quot;       TransformArgumentList=&quot;string&quot;       TransformFile=&quot;string&quot;       Visible=&quot;True|False&quot;       XPath=&quot;string&quot;   >       <Data>string</Data>       <Transform>string</Transform>   </asp:XmlDataSource>   ```"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an XmlDataSource control with a <xref:System.Web.UI.WebControls.TreeView> control to display XML data from the sample XML file. The second example demonstrates how to use an XmlDataSource control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display XML data.  \n  \n The following code example demonstrates how to use an XmlDataSource control with a <xref:System.Web.UI.WebControls.TreeView> control to display XML data. The XmlDataSource loads XML data from the XML file identified by the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_22_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_22_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```  \n  \n The following code example demonstrates how to use an XmlDataSource control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display XML data. The <xref:System.Web.UI.WebControls.Repeater> control uses an XPath data-binding expression to bind to data items within the XML document that the XmlDataSource represents. For more information about `XPath` and `XPathSelect` data-binding syntax, see the <xref:System.Web.UI.XPathBinder> class.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_22_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_14#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_22_2.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>  \n <orders>  \n   <order>  \n     <customer id=\"12345\" />  \n     <customername>  \n         <firstn>John</firstn>  \n         <lastn>Smith</lastn>  \n     </customername>  \n     <transaction id=\"12345\" />  \n     <shipaddress>  \n         <address1>1234 Tenth Avenue</address1>  \n         <city>Bellevue</city>  \n         <state>Washington</state>  \n         <zip>98001</zip>  \n     </shipaddress>  \n     <summary>  \n         <item dept=\"tools\">screwdriver</item>  \n         <item dept=\"tools\">hammer</item>  \n         <item dept=\"plumbing\">fixture</item>  \n     </summary>  \n   </order>  \n</orders>  \n```"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Transforming")]

      [System.ComponentModel.DefaultProperty("DataFile")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.HierarchicalDataSourceControl
  implements:
  - System.ComponentModel.IListSource
  - System.Web.UI.IDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnInit(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SaveViewState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.TrackViewState
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.HierarchicalDataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.HierarchicalDataSourceControl.ClientID
  - System.Web.UI.HierarchicalDataSourceControl.ClientIDMode
  - System.Web.UI.HierarchicalDataSourceControl.Controls
  - System.Web.UI.HierarchicalDataSourceControl.CreateControlCollection
  - System.Web.UI.HierarchicalDataSourceControl.EnableTheming
  - System.Web.UI.HierarchicalDataSourceControl.FindControl(System.String)
  - System.Web.UI.HierarchicalDataSourceControl.Focus
  - System.Web.UI.HierarchicalDataSourceControl.HasControls
  - System.Web.UI.HierarchicalDataSourceControl.OnDataSourceChanged(System.EventArgs)
  - System.Web.UI.HierarchicalDataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.HierarchicalDataSourceControl.SkinID
  - System.Web.UI.HierarchicalDataSourceControl.System#Web#UI#IHierarchicalDataSource#GetHierarchicalView(System.String)
  - System.Web.UI.HierarchicalDataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: XmlDataSource()
  nameWithType: XmlDataSource.XmlDataSource()
  fullName: System.Web.UI.WebControls.XmlDataSource.XmlDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "新しいインスタンスを作成、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>クラスです。"
  syntax:
    content: public XmlDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.XmlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: XmlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはデータ ソース コントロールが取得したデータをキャッシュする秒単位で時間の長さを設定します。"
  remarks: "<xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、次に該当する場合に自動的にデータをキャッシュ: -<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>プロパティに設定されている`true`</xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A></xref:System.Web.UI.WebControls.XmlDataSource>。      -CacheDuration プロパティを 0 より大きく、キャッシュは、キャッシュを無効にする前にデータを格納する時間を秒数を示す、値に設定するとします。       変更を加えた、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティまたは XML データを格納するファイルの内容により、キャッシュが無効になります</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>。       既定では、CacheDuration プロパティが無期限のキャッシュを示す、0 に設定し、データ ソースからデータをキャッシュに依存している XML ファイルが変更されるまでです。       キャッシュの動作は、期間の組み合わせを受けると、<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定</xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>。 場合<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>に設定されている<xref:System.Web.UI.DataSourceCacheExpiry>、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールが最初のデータ取得操作にデータをキャッシュし、CacheDuration で指定された時間分のメモリに保持およびが時間の有効期限が切れて後に無効になります</xref:System.Web.UI.WebControls.XmlDataSource></xref:System.Web.UI.DataSourceCacheExpiry></xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>。 キャッシュは、次の操作時に更新されます。 場合<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>に設定されている<xref:System.Web.UI.DataSourceCacheExpiry>、データ ソース コントロールは、最初のデータの取得操作上のデータをキャッシュしますが、後続の各操作時にキャッシュを保持する時間枠をリセットします</xref:System.Web.UI.DataSourceCacheExpiry></xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>。 ない場合のアクティビティの日時、CacheDuration に等しい最後のデータの取得以降、キャッシュ有効期限のみです。"
  example:
  - "The following code example demonstrates how to enable caching when using the <xref:System.Web.UI.WebControls.XmlDataSource> control to display data contained in an XML file. Caching is enabled when the <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> property is set to `true` and the CacheDuration is set to the number of seconds that the data is cached by the data source control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_928_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_928_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "秒の数、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>コントロールがデータの取得操作の結果をキャッシュします。 既定値は 0 です。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: XmlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはをデータ ソース コントロールを使用するキャッシュのキャッシュ動作を記述するキャッシュの存続期間と組み合わせて使用するキャッシュの有効期限ポリシーを設定します。"
  remarks: "キャッシュの動作の組み合わせを受ける、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>と CacheExpirationPolicy 設定</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>。 CacheExpirationPolicy に設定されている場合<xref:System.Web.UI.DataSourceCacheExpiry>、<xref:System.Web.UI.WebControls.XmlDataSource>最初のデータ取得操作にデータをキャッシュで指定された時間分のメモリに保持<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>、および時刻の有効期限が切れて後が無効になります</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.XmlDataSource></xref:System.Web.UI.DataSourceCacheExpiry>。 キャッシュは、次の操作時に更新されます。 場合は、CacheExpirationPolicy に設定されている<xref:System.Web.UI.DataSourceCacheExpiry>、データ ソース コントロールは、最初のデータの取得操作上のデータをキャッシュしますが、後続の各操作時にキャッシュを保持する時間枠をリセットします</xref:System.Web.UI.DataSourceCacheExpiry>。 アクティビティがない日時と等しい場合にのみ、キャッシュの有効期限、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>最後のデータの取得以降</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>。"
  example:
  - "The following code example demonstrates how to enable caching when using the <xref:System.Web.UI.WebControls.XmlDataSource> control to display data contained in an XML file. Caching is enabled when the <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> is set to the number of seconds that the data is cached by the data source control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_427_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_427_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "1 つ、 <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref>値。 既定のキャッシュの有効期限ポリシー設定は<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;></xref>です。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  id: CacheKeyContext
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheKeyContext
  nameWithType: XmlDataSource.CacheKeyContext
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または状態の表示から、データ ソース コントロールのキャッシュ キーの値を設定または状態を表示するキャッシュ キーを追加します。"
  remarks: "CacheKeyContext プロパティでは、手動でのキャッシュ キーを作成することができます、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール</xref:System.Web.UI.WebControls.XmlDataSource>。 これは、機能は、データを含むファイルを指定する代わりに、コントロールを XML または XSLT のデータを格納しているオブジェクトを割り当てている場合にのみ必要です。 コントロールにデータを割り当てると、データはキャッシュ キーの生成に使用されません。 代わりに、データ オブジェクトを更新する予定の場合、手動で一意のキャッシュ キーを生成する必要があります。"
  syntax:
    content: public virtual string CacheKeyContext { get; set; }
    return:
      type: System.String
      description: "キャッシュ キー、またはキャッシュ キーがビュー状態にない場合は空の文字列の値。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: XmlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはデータ ソース コントロールによって作成されたすべてのデータ キャッシュのオブジェクトにリンクされているユーザー定義のキー依存関係を設定します。 すべてのキャッシュ オブジェクトには、キーの有効期限が切れるときに明示的に期限切れです。"
  remarks: "<xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、データのキャッシュをサポートしています</xref:System.Web.UI.WebControls.XmlDataSource>。 データがキャッシュされるときに、<xref:System.Web.UI.WebControls.XmlDataSource>基になるデータ ファイルではなく、キャッシュからデータを取得します</xref:System.Web.UI.WebControls.XmlDataSource>。 キャッシュが期限切れになったときに、基になるファイルからデータを取得し、再度データをキャッシュします。       によって作成されたすべてのキャッシュ エントリ間の依存関係を作成する CacheKeyDependency プロパティを設定することができます、<xref:System.Web.UI.WebControls.XmlDataSource>制御とキー</xref:System.Web.UI.WebControls.XmlDataSource> 。 プログラムで期限切れにして、キーいつでもすべてのキャッシュ エントリを無効にできます。       により、プロパティを CacheKeyDependency を作成するために使用すると、可能であれば複数<xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、ここで、同じ XML ファイルから同じデータを読み込むとファイルに変換され、同じであるシナリオで同じキャッシュを使用して<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>設定</xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A></xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.XmlDataSource>。"
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "によって作成されたすべてのキャッシュ オブジェクトを識別するキーを<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>コントロール。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Data
  id: Data
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Data
  nameWithType: XmlDataSource.Data
  fullName: System.Web.UI.WebControls.XmlDataSource.Data
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはデータ ソース コントロールがバインドされる XML データのブロックを設定します。"
  remarks: "宣言型のシナリオでは、データ プロパティがの複数行の内部プロパティとして指定されて、<xref:System.Web.UI.WebControls.XmlDataSource>オブジェクト</xref:System.Web.UI.WebControls.XmlDataSource>。 内部プロパティでは、XML データと互換性のある任意の方法で XML データを書式設定および引用符文字の埋め込みなど、文字の埋め込みの問題を無視することができます。       場合は、両方、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>データ プロパティを設定し、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティが優先され、データ プロパティで指定された XML データではなく、XML ファイル内のデータを使用します</xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A></xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>。       データ プロパティの値を変更する場合、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生します</xref:System.Web.UI.IDataSource.DataSourceChanged>。 キャッシュを有効にし、データの値を変更して、キャッシュは無効になります。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control to display inline XML data contained by the Data property with a <xref:System.Web.UI.WebControls.TreeView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_10#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_378_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_378_1.aspx)]"
  syntax:
    content: public virtual string Data { get; set; }
    return:
      type: System.String
      description: "インライン XML データの文字列を<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>コントロールにバインドします。 既定値は&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  overload: System.Web.UI.WebControls.XmlDataSource.Data*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ドキュメントを読み込んでいます。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.DataFile
  id: DataFile
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: DataFile
  nameWithType: XmlDataSource.DataFile
  fullName: System.Web.UI.WebControls.XmlDataSource.DataFile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "データ ソースをバインドする XML ファイルのファイル名を指定します。"
  remarks: "場合、両方のデータ ファイルと<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティが設定されて、DataFile プロパティが優先されで指定された XML データではなく、XML ファイル内のデータが使用される、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A></xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>。       DataFile プロパティの値を変更する場合、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生します</xref:System.Web.UI.IDataSource.DataSourceChanged>。 キャッシュを有効にし、データ ファイルの値を変更して、キャッシュは無効になります。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control to display XML data contained in a file with a <xref:System.Web.UI.WebControls.TreeView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_472_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_472_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual string DataFile { get; set; }
    return:
      type: System.String
      description: "絶対物理パスまたはデータを含む XML ファイルの相対パスを<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>制御を表します。 既定値は&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  overload: System.Web.UI.WebControls.XmlDataSource.DataFile*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ドキュメントを読み込んでいます。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: XmlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.XmlDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定を示す値かどうか、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>コントロールがデータ キャッシュを有効にします。"
  remarks: "<xref:System.Web.UI.WebControls.XmlDataSource>EnableCaching プロパティ設定されている場合にコントロールがデータに自動的にキャッシュされる`true`</xref:System.Web.UI.WebControls.XmlDataSource>。 既定では、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>プロパティが無期限のキャッシュを示す、0 に設定され、データ ソースからデータをキャッシュに依存している XML ファイルが変更されるまでです</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>。 設定した場合、<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>プロパティを 0 より大きい値は、キャッシュに新しいセットを取得する前にそれほど多くの秒のデータが格納されます</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>。       EnableCaching プロパティ設定されている場合`true`と<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>プロパティが設定されて、キャッシュ エントリは自動的に無効にパラメーターを変換引数リストの変更と</xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>。 その場合は、設定して、キャッシュを無効にするためのコードを記述する必要があります、<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>。"
  example:
  - "The following code example demonstrates how to enable caching when using the <xref:System.Web.UI.WebControls.XmlDataSource> control to display data contained in an XML file. Caching is enabled when the EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> is set to the number of seconds that the data is cached by the data source control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_365_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_365_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>データ ソース コントロールのデータのキャッシュが有効になっている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.XmlDataSource.EnableCaching*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)
  id: GetHierarchicalView(System.String)
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: GetHierarchicalView(String)
  nameWithType: XmlDataSource.GetHierarchicalView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "データ ソース ビュー オブジェクトを取得、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>コントロール。 <code> viewPath </code>パラメーターは、XPath 式を指定できます。"
  remarks: "取得する GetHierarchicalView メソッドを呼び出すことができます、<xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール</xref:System.Web.UI.WebControls.XmlDataSource></xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>。 指定した場合`viewPath`値、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、データ ソース ビュー オブジェクトで識別されるノード上のビューを表すを返します`viewPath`、すべての子ノードと共に</xref:System.Web.UI.WebControls.XmlDataSource>。 設定した場合`viewPath`に<xref:System.String.Empty?displayProperty=fullName>、<xref:System.Web.UI.WebControls.XmlDataSource>チェックを制御、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>に対するデータ ソース ビューを作成するためのルート ノードを特定するプロパティ</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A></xref:System.Web.UI.WebControls.XmlDataSource></xref:System.String.Empty?displayProperty=fullName>。 場合、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティが設定されて、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールを使用してこれを同じデータ ソース ビューを返すようにして、`viewPath`式を使用します</xref:System.Web.UI.WebControls.XmlDataSource></xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>。 場合、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティが設定されていない、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、XML データ内のすべてのデータ ノードのビューを返します</xref:System.Web.UI.WebControls.XmlDataSource></xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>。"
  syntax:
    content: protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);
    parameters:
    - id: viewPath
      type: System.String
      description: "現在の階層ビューの作成元となるノードを識別する XPath 式。"
    return:
      type: System.Web.UI.HierarchicalDataSourceView
      description: "返します、 <xref href=&quot;System.Web.UI.WebControls.XmlHierarchicalDataSourceView&quot;> </xref>以降で識別されるデータ ノードで、データの&1; つのビューを表すオブジェクト<code> viewPath</code>です。"
  overload: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument
  id: GetXmlDocument
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: GetXmlDocument()
  nameWithType: XmlDataSource.GetXmlDocument()
  fullName: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "基になるデータ ストレージから直接、またはキャッシュからメモリに XML データを読み込んでの形式で返します、 <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref>オブジェクト。"
  remarks: "基になる XML データのメモリ内表現に直接アクセスするためには、GetXmlDocument メソッドを使用します。       返された操作できます<xref:System.Xml.XmlDataDocument>オブジェクトを呼び出す<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>によって指定された XML ファイルへの変更を永続化する、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A></xref:System.Web.UI.WebControls.XmlDataSource.Save%2A></xref:System.Xml.XmlDataDocument>。 前に、いくつかの要件を満たす必要があります、<xref:System.Xml.XmlDataDocument>オブジェクトを正常に保存することができます</xref:System.Xml.XmlDataDocument>。 詳細については、次を参照してください、<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>メソッド。</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 。"
  example:
  - "This section contains two code examples. The first example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The second example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The data is manipulated in memory using the GetXmlDocument method every time you select a <xref:System.Web.UI.WebControls.TreeView> node, and is then saved to the XML file. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_196_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_196_1.aspx)]  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file. As with the previous example, the data is manipulated in memory using the <xref:System.Xml.XmlDataDocument> retrieved by the GetXmlDocument method. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_196_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_196_2.aspx)]  \n  \n The XML file in the code examples has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n <bookstore xmlns:bk=\"urn:samples\">  \n   <book genre=\"novel\" publicationdate=\"1999\" bk:ISBN=\"0000000000\">  \n     <title>Secrets of Silicon Valley</title>  \n     <author>  \n       <first-name>Sheryl</first-name>  \n       <last-name>Hunter</last-name>  \n     </author>  \n     <price>24.95</price>\"   \n     </book>  \n   <book genre=\"novel\" publicationdate=\"1985\" bk:ISBN=\"1111111111\">  \n     <title>Straight Talk About Computers</title>  \n     <author>  \n       <first-name>Dean</first-name>  \n       <last-name>Straight</last-name>  \n     </author>  \n     <price>29.95</price>  \n   </book>  \n</bookstore>  \n```"
  syntax:
    content: public System.Xml.XmlDocument GetXmlDocument ();
    parameters: []
    return:
      type: System.Xml.XmlDocument
      description: "<xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref>で指定された XML を表すオブジェクト、 <> </> *> プロパティによって指定されたファイルに、または、 <> </> *> を変換する任意のプロパティと<xref:System.Web.UI.WebControls.XmlDataSource.XPath*>適用クエリ</xref:System.Web.UI.WebControls.XmlDataSource.XPath*>。"
  overload: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "URL が指定されて、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>プロパティですただし、、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>コントロールには Web リソースの適切なアクセス許可がありません。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> 。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A URL is specified for the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property; however, it is not an HTTP-based URL.  \n  \n \\- or -  \n  \n A design-time relative path was not mapped correctly by the designer before using the <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control.  \n  \n \\- or -  \n  \n Both caching and client impersonation are enabled. The <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control does not support caching when client impersonation is enabled."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "指定されたパスへのアクセスが拒否、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)
  id: OnTransforming(System.EventArgs)
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: OnTransforming(EventArgs)
  nameWithType: XmlDataSource.OnTransforming(EventArgs)
  fullName: System.Web.UI.WebControls.XmlDataSource.OnTransforming(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "発生させる、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource.Transforming&quot;> </xref>前に、イベント、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>コントロールは、XML データに対して XSLT 変換を実行します。"
  remarks: "イベントを発生させるには、イベント ハンドラーがデリゲートからを呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。       OnTransforming メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 これは、派生クラスでイベントを処理するための手法をお勧めします。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data. The XML transformation is performed using the style sheet indicated by the <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> property. Additionally, the style sheet uses transform arguments that are passed to the data source control in an <xref:System.Xml.Xsl.XsltArgumentList> object at runtime. The code example demonstrates how to pass the <xref:System.Xml.Xsl.XsltArgumentList> object to the data source control by handling the <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> event with a custom event handler, which is identified by name of the method set for the OnTransforming method.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_60_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_60_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The XML transformation is performed using the following style sheet.  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:param name=\"purchdate\"/>  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n       Price: <xsl:value-of select=\"price\"/>  \n           15% discount if purchased by: <xsl:value-of select=\"$purchdate\"/>        \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: protected virtual void OnTransforming (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Web.UI.WebControls.XmlDataSource.OnTransforming*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Save
  id: Save
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Save()
  nameWithType: XmlDataSource.Save()
  fullName: System.Web.UI.WebControls.XmlDataSource.Save()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "メモリ内で現在保持されている XML データを保存、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>場合はディスクへのコントロール、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>プロパティが設定されています</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>。"
  remarks: "中に、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールが読み取り専用のデータ バインディングのシナリオで通常使用される、使用することができます、<xref:System.Web.UI.WebControls.XmlDataSource>を基になる XML データ ファイル内の XML データを編集するコントロール</xref:System.Web.UI.WebControls.XmlDataSource></xref:System.Web.UI.WebControls.XmlDataSource>。 これらのシナリオでは、XML データがによって XML ファイルから読み込まれる、<xref:System.Web.UI.WebControls.XmlDataSource>コントロール</xref:System.Web.UI.WebControls.XmlDataSource>。 変更する、<xref:System.Xml.XmlDataDocument>メモリを使用して、<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>メソッド、および Save メソッドを呼び出すことによって XML データ ファイルに保存しています</xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A></xref:System.Xml.XmlDataDocument>。 この編集可能な XML シナリオは、次の条件が満たされたときに、考えられる:-によって示される XML ファイルから XML データが読み込まれる、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>プロパティで指定されたインライン XML データからではなく、<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A></xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>。      の XSLT 変換が指定ない、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>または<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A></xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>。       Save メソッドは、別の要求で保存操作同時扱いません。 複数のユーザーを XML ファイルを編集してかどうか、<xref:System.Web.UI.WebControls.XmlDataSource>制御は、すべてのユーザーは、同じデータで動作しているという保証はありません</xref:System.Web.UI.WebControls.XmlDataSource>。 保存操作がこれら同一の同時実行の問題により失敗することもできます。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The second code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The data is manipulated in memory using the <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> method every time you select a <xref:System.Web.UI.WebControls.TreeView> node, and is then saved to the XML file. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_117_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_117_1.aspx)]  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file. As with the previous example, the data is manipulated in memory using the <xref:System.Xml.XmlDataDocument> object retrieved by the <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> method. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_117_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_117_2.aspx)]  \n  \n The XML file in the code examples has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n <bookstore xmlns:bk=\"urn:samples\">  \n   <book genre=\"novel\" publicationdate=\"1999\" bk:ISBN=\"0000000000\">  \n     <title>Secrets of Silicon Valley</title>  \n     <author>  \n       <first-name>Sheryl</first-name>  \n       <last-name>Hunter</last-name>  \n     </author>  \n     <price>24.95</price>\"   \n     </book>  \n   <book genre=\"novel\" publicationdate=\"1985\" bk:ISBN=\"1111111111\">  \n     <title>Straight Talk About Computers</title>  \n     <author>  \n       <first-name>Dean</first-name>  \n       <last-name>Straight</last-name>  \n     </author>  \n     <price>29.95</price>  \n   </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public void Save ();
    parameters: []
  overload: System.Web.UI.WebControls.XmlDataSource.Save*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "XML data was loaded using the <xref:System.Web.UI.WebControls.XmlDataSource.Data*> property instead of the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property.  \n  \n \\- or -  \n  \n A URL is specified for the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property; however, the <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control does not have the correct permissions for the Web resource."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A URL is specified for the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property; however, it is not an HTTP-based URL.  \n  \n \\- or -  \n  \n A design-time relative path was not mapped correctly by the designer before using the <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "指定されたパスへのアクセスが拒否、<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "このメンバーの説明、 <xref:System.ComponentModel.IListSource.ContainsListCollection*>。</xref:System.ComponentModel.IListSource.ContainsListCollection*>を参照してください。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Web.UI.WebControls.XmlDataSource>にインスタンスをキャスト、<xref:System.ComponentModel.IListSource>インターフェイス</xref:System.ComponentModel.IListSource></xref:System.Web.UI.WebControls.XmlDataSource>。"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、コレクションは、コレクションの<xref:System.Collections.IList>オブジェクトそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IList> 。"
  overload: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.GetList()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "このメンバーの説明、 <xref:System.ComponentModel.IListSource.GetList*>。</xref:System.ComponentModel.IListSource.GetList*>を参照してください。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Web.UI.WebControls.XmlDataSource>にインスタンスをキャスト、<xref:System.ComponentModel.IListSource>インターフェイス</xref:System.ComponentModel.IListSource></xref:System.Web.UI.WebControls.XmlDataSource>。"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "実装するオブジェクト<xref:System.Collections.IList>は、データ ソースにバインドできる</xref:System.Collections.IList>。"
  overload: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)
  id: System#Web#UI#IDataSource#GetView(System.String)
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.Web.UI.IDataSource.GetView(String)
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "データ ソース コントロールに関連付けられている名前付きのデータ ソース ビューを取得します。"
  syntax:
    content: System.Web.UI.DataSourceView IDataSource.GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "取得するビューの名前。 場合&lt;xref:System.String?displayProperty=fullName&gt;が指定されている既定のビュー、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>コントロールを取得します。"
    return:
      type: System.Web.UI.DataSourceView
      description: "名前付き返します<xref href=&quot;System.Web.UI.WebControls.XmlDataSourceView&quot;></xref>オブジェクトに関連付けられている、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>コントロール。"
  overload: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames
  id: System#Web#UI#IDataSource#GetViewNames
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.Web.UI.IDataSource.GetViewNames()
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "このメンバーの説明、 <xref:System.Web.UI.IDataSource.GetViewNames*>。</xref:System.Web.UI.IDataSource.GetViewNames*>を参照してください。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Web.UI.WebControls.XmlDataSource>インスタンスにキャスト、<xref:System.Web.UI.IDataSource>インターフェイス</xref:System.Web.UI.IDataSource></xref:System.Web.UI.WebControls.XmlDataSource>。"
  syntax:
    content: System.Collections.ICollection IDataSource.GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "実装するオブジェクト<xref:System.Collections.ICollection>に関連付けられているビュー オブジェクトの一覧を表す名前を含む、 <xref href=&quot;System.Web.UI.IDataSource&quot;> </xref>オブジェクト</xref:System.Collections.ICollection>。"
  overload: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Transform
  id: Transform
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Transform
  nameWithType: XmlDataSource.Transform
  fullName: System.Web.UI.WebControls.XmlDataSource.Transform
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定によって管理されている XML データに対して実行する XSLT 変換を定義する拡張スタイル シート言語 (XSL) のデータのブロック、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>コントロール。"
  remarks: "宣言型では、Transform プロパティはの複数行の内部プロパティとして指定、<xref:System.Web.UI.WebControls.XmlDataSource>オブジェクト</xref:System.Web.UI.WebControls.XmlDataSource>。 内部プロパティでは XSL スタイル シートのデータと互換性のある任意の方法でスタイル シートを書式設定および引用符文字の埋め込みなどの文字の埋め込みの問題を無視することができます。       場合は、両方、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>変換のプロパティを設定し、<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>プロパティが優先され、トランス フォームで指定されたスタイル シートの要素ではなく、XSL スタイル シート ファイル (.xsl) のデータを使用します</xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A></xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>。 使用して、XPath 式が設定されている場合、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティ、XML データを変換後に適用されます</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>。       変換プロパティの値を変更する場合、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生します</xref:System.Web.UI.IDataSource.DataSourceChanged>。 キャッシュを有効にし、変換の値を変更して、キャッシュは無効になります。      > [!NOTE] >、<xref:System.Web.UI.WebControls.XmlDataSource>クラスを使用して、非推奨<xref:System.Xml.Xsl.XslTransform>XSL 変換を実行するクラス</xref:System.Xml.Xsl.XslTransform></xref:System.Web.UI.WebControls.XmlDataSource>。 この<xref:System.Xml.Xsl.XslTransform>クラスは廃止されて、<xref:System.Xml.Xsl.XslCompiledTransform>クラス</xref:System.Xml.Xsl.XslCompiledTransform>を使用して手動で変換を適用</xref:System.Xml.Xsl.XslTransform>後に導入されたスタイル シートの機能を使用する場合"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display transformed XML data. The style sheet that performs the transformation is defined inline by the Transform property of the data source control.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>  \n <orders>  \n   <order>  \n     <customer id=\"12345\" />  \n     <customername>  \n         <firstn>Todd</firstn>  \n         <lastn>Rowe</lastn>  \n     </customername>  \n     <transaction id=\"12345\" />  \n     <shipaddress>  \n         <address1>1234 Tenth Avenue</address1>  \n         <city>Bellevue</city>  \n         <state>Washington</state>  \n         <zip>98001</zip>  \n     </shipaddress>  \n     <summary>  \n         <item dept=\"tools\">screwdriver</item>  \n         <item dept=\"tools\">hammer</item>  \n         <item dept=\"plumbing\">fixture</item>  \n     </summary>  \n   </order>  \n</orders>  \n```"
  syntax:
    content: public virtual string Transform { get; set; }
    return:
      type: System.String
      description: "インラインで含まれているデータに対して実行する、XML 変換を定義する XSL の文字列、 <> </> *> または<> *> プロパティです。 既定値は&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  overload: System.Web.UI.WebControls.XmlDataSource.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ドキュメントを読み込んでいます。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  id: TransformArgumentList
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: TransformArgumentList
  nameWithType: XmlDataSource.TransformArgumentList
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって定義されたスタイル シートで使用される XSLT 引数の一覧を示します、 <> </> *> または<> *> プロパティを XML データの変換を実行します。"
  remarks: "TransformArgumentList プロパティを設定するときに、<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>イベントは、XSLT 変換は、XML データに適用される時に、XSLT パラメーターを使用できるようにするためです</xref:System.Web.UI.WebControls.XmlDataSource.Transforming>。       場合、<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>プロパティに設定されている`true`TransformArgumentList プロパティが設定し、キャッシュ エントリは自動的に無効にパラメーターを変換引数リストの変更と</xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>。 その場合は、設定して、キャッシュを無効にするためのコードを記述する必要があります、<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> with a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data. The XML transformation is performed using the style sheet indicated by the <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> property. Additionally, the style sheet uses transform arguments that are passed to the data source control in an <xref:System.Xml.Xsl.XsltArgumentList> object at run time. The code example demonstrates how to pass the <xref:System.Xml.Xsl.XsltArgumentList> to the data source control by handling the <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> event with a custom event handler.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_437_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_437_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The transformation of the XML data is performed with the following style sheet.  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:param name=\"purchdate\"/>  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n       Price: <xsl:value-of select=\"price\"/>  \n           15% discount if purchased by: <xsl:value-of select=\"$purchdate\"/>        \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }
    return:
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref> XSLT パラメーターとして読み込まれるときに XML データに適用するオブジェクトを格納しているオブジェクト、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>コントロール。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.TransformFile
  id: TransformFile
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: TransformFile
  nameWithType: XmlDataSource.TransformFile
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformFile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって管理されている XML データに対して実行する XSLT 変換を定義する拡張スタイル シート言語 (XSL) ファイル (.xsl) のファイル名を指定します、 <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>コントロール。"
  remarks: "場合、両方の TransformFile と<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティが設定されて、TransformFile プロパティが優先されで指定されたスタイル シートの要素ではなく、XSL スタイル シート ファイル (.xsl) のデータを使用、<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>プロパティ</xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A></xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>。 使用して、XPath 式が設定されている場合、<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>プロパティ、XML データを変換後に適用されます</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>。       値を変更する場合、 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>、プロパティ、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生します</xref:System.Web.UI.IDataSource.DataSourceChanged></xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>。 値を変更すると、キャッシュが有効になっている<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>、キャッシュが無効になります</xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>。      > [!NOTE] >、<xref:System.Web.UI.WebControls.XmlDataSource>クラスを使用して、非推奨<xref:System.Xml.Xsl.XslTransform>XSL 変換を実行するクラス</xref:System.Xml.Xsl.XslTransform></xref:System.Web.UI.WebControls.XmlDataSource>。 この<xref:System.Xml.Xsl.XslTransform>クラスは廃止されて、<xref:System.Xml.Xsl.XslCompiledTransform>クラス</xref:System.Xml.Xsl.XslCompiledTransform>を使用して手動で変換を適用</xref:System.Xml.Xsl.XslTransform>後に導入されたスタイル シートの機能を使用する場合"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control and a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data on a Web form. The transformation is performed using the style sheet indicated by the TransformFile property. You can optionally supply transformation arguments for the style sheet using an <xref:System.Xml.Xsl.XsltArgumentList>. For more information, see the <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> property.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_625_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_5#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_625_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The XSL style sheet that performs the XML transformation has the following structure:  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"price\">  \n       <xsl:value-of select=\"price\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public virtual string TransformFile { get; set; }
    return:
      type: System.String
      description: "絶対物理パスまたは相対パスに含まれるデータに対して実行する、XML 変換を定義する XSL スタイル シート ファイルの<> *> または<> *> プロパティです。 既定値は&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  overload: System.Web.UI.WebControls.XmlDataSource.TransformFile*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ドキュメントを読み込んでいます。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Transforming
  id: Transforming
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Transforming
  nameWithType: XmlDataSource.Transforming
  fullName: System.Web.UI.WebControls.XmlDataSource.Transforming
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "定義されているスタイル シートの直前に発生する、 <> </> *> プロパティによって識別されると、 <> </> *> プロパティは XML データに適用します。"
  remarks: "設定する変換イベントを処理、<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>を持つプロパティ、<xref:System.Xml.Xsl.XsltArgumentList>オブジェクトの前に、<xref:System.Web.UI.WebControls.XmlDataSource>コントロールは、XML 変換を実行します</xref:System.Web.UI.WebControls.XmlDataSource></xref:System.Xml.Xsl.XsltArgumentList></xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data. The XML transformation is performed using the style sheet indicated by the <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> property. Additionally, the style sheet uses transform arguments that are passed to the data source control in an <xref:System.Xml.Xsl.XsltArgumentList> at run time. The code example demonstrates how to pass the <xref:System.Xml.Xsl.XsltArgumentList> object to the data source control by handling the Transforming event with a custom event handler.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_49_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_49_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The transformation of the XML data is performed with the following style sheet:  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:param name=\"purchdate\"/>  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n       Price: <xsl:value-of select=\"price\"/>  \n           15% discount if purchased by: <xsl:value-of select=\"$purchdate\"/>        \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public event EventHandler Transforming;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.XPath
  id: XPath
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: XPath
  nameWithType: XmlDataSource.XPath
  fullName: System.Web.UI.WebControls.XmlDataSource.XPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "含まれる XML データに適用される XPath 式を指定します、 <> </> *> プロパティで指定された XML ファイルで、または、 <> </> *> プロパティです。"
  remarks: "データ バインディングの XPath 式の詳細については、次を参照してください。 [XmlDataSource コントロールに表形式のコントロールをバインド](http://msdn.microsoft.com/en-us/d6bf202f-6454-45fd-9424-e17f6c7eafe8)です。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display XML data that has been filtered using an XPath expression. In this example, XPath syntax is used to filter the XML data when the XPath property of the data source control is set, and also binds elements of the <xref:System.Web.UI.WebControls.Repeater> control template to the XML data.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_422_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_8#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_422_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```"
  syntax:
    content: public virtual string XPath { get; set; }
    return:
      type: System.String
      description: "含まれるデータをフィルター処理に使用できる、XPath 式を表す文字列、 <> </> *> プロパティで指定された XML ファイルで、または、 <> </> *> プロパティです。 既定値は&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  overload: System.Web.UI.WebControls.XmlDataSource.XPath*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ドキュメントを読み込んでいます。"
  platform:
  - net462
references:
- uid: System.Web.UI.HierarchicalDataSourceControl
  isExternal: false
  name: System.Web.UI.HierarchicalDataSourceControl
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.UI.WebControls.XmlDataSource.#ctor
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XmlDataSource()
  nameWithType: XmlDataSource.XmlDataSource()
  fullName: System.Web.UI.WebControls.XmlDataSource.XmlDataSource()
- uid: System.Web.UI.WebControls.XmlDataSource.CacheDuration
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: XmlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: XmlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyContext
  nameWithType: XmlDataSource.CacheKeyContext
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: XmlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.XmlDataSource.Data
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Data
  nameWithType: XmlDataSource.Data
  fullName: System.Web.UI.WebControls.XmlDataSource.Data
- uid: System.Web.UI.WebControls.XmlDataSource.DataFile
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: DataFile
  nameWithType: XmlDataSource.DataFile
  fullName: System.Web.UI.WebControls.XmlDataSource.DataFile
- uid: System.Web.UI.WebControls.XmlDataSource.EnableCaching
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: XmlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.XmlDataSource.EnableCaching
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetHierarchicalView(String)
  nameWithType: XmlDataSource.GetHierarchicalView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(String)
- uid: System.Web.UI.HierarchicalDataSourceView
  parent: System.Web.UI
  isExternal: false
  name: HierarchicalDataSourceView
  nameWithType: HierarchicalDataSourceView
  fullName: System.Web.UI.HierarchicalDataSourceView
- uid: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetXmlDocument()
  nameWithType: XmlDataSource.GetXmlDocument()
  fullName: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument()
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: OnTransforming(EventArgs)
  nameWithType: XmlDataSource.OnTransforming(EventArgs)
  fullName: System.Web.UI.WebControls.XmlDataSource.OnTransforming(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.XmlDataSource.Save
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Save()
  nameWithType: XmlDataSource.Save()
  fullName: System.Web.UI.WebControls.XmlDataSource.Save()
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.GetList()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetView(String)
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetViewNames()
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.XmlDataSource.Transform
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Transform
  nameWithType: XmlDataSource.Transform
  fullName: System.Web.UI.WebControls.XmlDataSource.Transform
- uid: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformArgumentList
  nameWithType: XmlDataSource.TransformArgumentList
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
- uid: System.Xml.Xsl.XsltArgumentList
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltArgumentList
  nameWithType: XsltArgumentList
  fullName: System.Xml.Xsl.XsltArgumentList
- uid: System.Web.UI.WebControls.XmlDataSource.TransformFile
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformFile
  nameWithType: XmlDataSource.TransformFile
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformFile
- uid: System.Web.UI.WebControls.XmlDataSource.Transforming
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Transforming
  nameWithType: XmlDataSource.Transforming
  fullName: System.Web.UI.WebControls.XmlDataSource.Transforming
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.UI.WebControls.XmlDataSource.XPath
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XPath
  nameWithType: XmlDataSource.XPath
  fullName: System.Web.UI.WebControls.XmlDataSource.XPath
- uid: System.Web.UI.WebControls.XmlDataSource.#ctor*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XmlDataSource
  nameWithType: XmlDataSource.XmlDataSource
- uid: System.Web.UI.WebControls.XmlDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: XmlDataSource.CacheDuration
- uid: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: XmlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyContext
  nameWithType: XmlDataSource.CacheKeyContext
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: XmlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.XmlDataSource.Data*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Data
  nameWithType: XmlDataSource.Data
- uid: System.Web.UI.WebControls.XmlDataSource.DataFile*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: DataFile
  nameWithType: XmlDataSource.DataFile
- uid: System.Web.UI.WebControls.XmlDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: XmlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetHierarchicalView
  nameWithType: XmlDataSource.GetHierarchicalView
- uid: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetXmlDocument
  nameWithType: XmlDataSource.GetXmlDocument
- uid: System.Web.UI.WebControls.XmlDataSource.OnTransforming*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: OnTransforming
  nameWithType: XmlDataSource.OnTransforming
- uid: System.Web.UI.WebControls.XmlDataSource.Save*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Save
  nameWithType: XmlDataSource.Save
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.GetList
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetView
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetView
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetViewNames
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetViewNames
- uid: System.Web.UI.WebControls.XmlDataSource.Transform*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Transform
  nameWithType: XmlDataSource.Transform
- uid: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformArgumentList
  nameWithType: XmlDataSource.TransformArgumentList
- uid: System.Web.UI.WebControls.XmlDataSource.TransformFile*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformFile
  nameWithType: XmlDataSource.TransformFile
- uid: System.Web.UI.WebControls.XmlDataSource.XPath*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XPath
  nameWithType: XmlDataSource.XPath
