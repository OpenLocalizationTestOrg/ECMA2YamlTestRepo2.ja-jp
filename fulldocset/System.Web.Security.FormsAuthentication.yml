### YamlMime:ManagedReference
items:
- uid: System.Web.Security.FormsAuthentication
  id: FormsAuthentication
  children:
  - System.Web.Security.FormsAuthentication.#ctor
  - System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)
  - System.Web.Security.FormsAuthentication.CookieDomain
  - System.Web.Security.FormsAuthentication.CookieMode
  - System.Web.Security.FormsAuthentication.CookiesSupported
  - System.Web.Security.FormsAuthentication.Decrypt(System.String)
  - System.Web.Security.FormsAuthentication.DefaultUrl
  - System.Web.Security.FormsAuthentication.EnableCrossAppRedirects
  - System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)
  - System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)
  - System.Web.Security.FormsAuthentication.FormsCookieName
  - System.Web.Security.FormsAuthentication.FormsCookiePath
  - System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)
  - System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)
  - System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)
  - System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)
  - System.Web.Security.FormsAuthentication.Initialize
  - System.Web.Security.FormsAuthentication.IsEnabled
  - System.Web.Security.FormsAuthentication.LoginUrl
  - System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)
  - System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)
  - System.Web.Security.FormsAuthentication.RedirectToLoginPage
  - System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)
  - System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)
  - System.Web.Security.FormsAuthentication.RequireSSL
  - System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)
  - System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)
  - System.Web.Security.FormsAuthentication.SignOut
  - System.Web.Security.FormsAuthentication.SlidingExpiration
  - System.Web.Security.FormsAuthentication.TicketCompatibilityMode
  - System.Web.Security.FormsAuthentication.Timeout
  langs:
  - csharp
  name: FormsAuthentication
  nameWithType: FormsAuthentication
  fullName: System.Web.Security.FormsAuthentication
  type: Class
  summary: "Web アプリケーションのフォーム認証サービスを管理します。 このクラスは継承できません。"
  remarks: "フォーム認証では、ユーザーおよび Windows 認証を必要としない Web アプリケーションのパスワードの検証を実現します。 フォーム認証でユーザー情報が格納されている外部データ ソースにあるなど、<xref:System.Web.Security.Membership>データベース、またはアプリケーションの構成ファイル</xref:System.Web.Security.Membership>。 ユーザーが認証されると、フォーム認証を保持して、認証チケットをクッキーまたは URL のように、認証されたユーザーが要求のたびに資格情報を指定する必要はありません。       フォーム認証が有効になって、`mode`する構成要素の属性`Forms`です。 アプリケーションへのすべての要求が次の例で示すように、すべての不明なユーザーの要求を拒否する構成要素を使用して、有効なユーザー認証チケットを含めることを要求することができます。      ```   <system.web>     <authentication mode=&quot;Forms&quot;>       <forms loginUrl=&quot;login.aspx&quot; />     </authentication>     <authorization>       <deny users=&quot;?&quot; />     </authorization>   </system.web>   ```前の例では、アプリケーションの一部である ASP.NET ページのすべての要求には、フォーム認証で指定されている有効なユーザー名が必要です。 ユーザー名が存在しない場合、要求が構成されている<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>。</xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>にリダイレクトします。       FormsAuthentication クラスでは、メソッドおよびユーザーを認証するアプリケーションで使用できるプロパティへのアクセスを提供します。 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>メソッドは、構成されたにブラウザーをリダイレクト<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>のユーザーがアプリケーションにログインします</xref:System.Web.Security.FormsAuthentication.LoginUrl%2A></xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>。 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>メソッドが要求された元の保護された URL にまたは<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。</xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 、認証されたユーザーをリダイレクト</xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>する 必要な場合に使用すると、フォーム認証チケットを管理する方法もあります。"
  example:
  - "The following code example shows the Web.config file for an ASP.NET application that uses the ASP.NET membership provider for forms authentication and requires all users to be authenticated.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;\" />  \n  </connectionStrings>  \n  <system.web>  \n    <membership defaultProvider=\"SqlProvider\" userIsOnlineTimeWindow=\"20\">  \n      <providers>  \n        <add name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlMembershipProvider\"  \n          connectionStringName=\"SqlServices\"  \n          enablePasswordRetrieval=\"false\"  \n          enablePasswordReset=\"true\"  \n          requiresQuestionAndAnswer=\"true\"  \n          passwordFormat=\"Hashed\"  \n          applicationName=\"/\" />  \n      </providers>  \n    </membership>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following code example shows the login page for an ASP.NET application that uses forms authentication and ASP.NET membership.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlMembershipProvider#1](~/add/codesnippet/csharp/t-system.web.security.fo_5_1.aspx)]\n [!code-vb[System.Web.Security.SqlMembershipProvider#1](~/add/codesnippet/visualbasic/t-system.web.security.fo_5_1.aspx)]"
  syntax:
    content: public sealed class FormsAuthentication
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.#ctor
  id: '#ctor'
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: FormsAuthentication()
  nameWithType: FormsAuthentication.FormsAuthentication()
  fullName: System.Web.Security.FormsAuthentication.FormsAuthentication()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.Security.FormsAuthentication&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターは、コードから使用するものではありません。"
  syntax:
    content: public FormsAuthentication ();
    parameters: []
  overload: System.Web.Security.FormsAuthentication.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)
  id: Authenticate(System.String,System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: Authenticate(String,String)
  nameWithType: FormsAuthentication.Authenticate(String,String)
  fullName: System.Web.Security.FormsAuthentication.Authenticate(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "ユーザー名とアプリケーションの構成ファイルに格納されている資格情報に照らしてパスワードを検証します。"
  remarks: "認証方法では、アプリケーション構成ファイルのセクションに格納されているユーザーの資格情報を確認します。 代わりに、ASP.NET メンバーシップを使用してユーザーの資格情報と呼び出しを格納することができます、 <xref:System.Web.Security.MembershipProvider.ValidateUser%2A>、資格情報を確認します</xref:System.Web.Security.MembershipProvider.ValidateUser%2A>。 詳細については、次を参照してください。[メンバーシップを使用したユーザーを管理する](~/add/includes/ajax-current-ext-md.md)です。       セキュリティを強化を使用して、アプリケーションの構成ファイルに格納されているパスワードを暗号化することができます、<xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A>メソッド</xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A>。"
  example:
  - "The following code example shows user credentials stored in the Web.config file for an application. The password values have been hashed using the <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> method.  \n  \n `<authentication mode=\"Forms\">`  \n  \n `<forms loginUrl=\"login.aspx\">`  \n  \n `<credentials passwordFormat=\"SHA1\">`  \n  \n `<user name=\"user1\"   password=\"27CE4CA7FBF00685AF2F617E3F5BBCAFF7B7403C\" />`  \n  \n `<user name=\"user2\"   password=\"D108F80936F78DFDD333141EBC985B0233A30C7A\" />`  \n  \n `<user name=\"user3\" password=\"7BDB09781A3F23885CD43177C0508B375CB1B7E9\"/>`  \n  \n `</credentials>`  \n  \n `</forms>`  \n  \n `</authentication>`  \n  \n The following code example shows a login page that uses the Authenticate method to validate user credentials.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.Security.FormsAuthentication#1](~/add/codesnippet/visualbasic/5b51c766-1819-4817-a951-_1.aspx)]\n [!code-cs[System.Web.Security.FormsAuthentication#1](~/add/codesnippet/csharp/5b51c766-1819-4817-a951-_1.aspx)]"
  syntax:
    content: public static bool Authenticate (string name, string password);
    parameters:
    - id: name
      type: System.String
      description: "ユーザー名。"
    - id: password
      type: System.String
      description: "ユーザーのパスワードです。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、ユーザー名とパスワードが無効です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Security.FormsAuthentication.Authenticate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.CookieDomain
  id: CookieDomain
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: CookieDomain
  nameWithType: FormsAuthentication.CookieDomain
  fullName: System.Web.Security.FormsAuthentication.CookieDomain
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "フォーム認証 cookie のドメインの値を取得します。"
  remarks: "CookieDomain プロパティの値を使用して ASP.NET アプリケーションの構成ファイルで設定されて、`domain`構成要素の属性です。 CookieDomain プロパティの値では、 <xref:System.Web.HttpCookie.Domain%2A>cookie が使用されているデータ型になること</xref:System.Web.HttpCookie.Domain%2A>を決定します"
  example:
  - "The following code example sets the `domain` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseCookies\"  \n    domain=\"contoso.com\" />  \n</authentication>  \n```"
  syntax:
    content: public static string CookieDomain { get; }
    return:
      type: System.String
      description: "<xref:System.Web.HttpCookie.Domain*>フォーム認証 cookie の</xref:System.Web.HttpCookie.Domain*>。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.Security.FormsAuthentication.CookieDomain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.CookieMode
  id: CookieMode
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: CookieMode
  nameWithType: FormsAuthentication.CookieMode
  fullName: System.Web.Security.FormsAuthentication.CookieMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "アプリケーションが cookie なしのフォーム認証に構成されているかどうかを示す値を取得します。"
  remarks: "CookieMode プロパティの値を反映して、`cookieless`構成要素の属性です。 CookieMode プロパティを決定するかどうか、<xref:System.Web.Security.FormsAuthenticationTicket>値がブラウザーでセッション cookie に格納されているかに格納されている、<xref:System.Web.HttpRequest.QueryString%2A>プロパティ</xref:System.Web.HttpRequest.QueryString%2A></xref:System.Web.Security.FormsAuthenticationTicket>。      > [!NOTE] > ときに、 <xref:System.Web.Security.FormsAuthenticationTicket>URI に値が格納されている、生成された URI の長さが許容最大長より長くすることがあります</xref:System.Web.Security.FormsAuthenticationTicket>。 発生する可能性があるときに、<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>プロパティは、アプリケーション名に設定され、アプリケーション名が長 (40 以上の文字の) アプリケーション内のユーザー名と長、または長い場合<xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A>に文字列が格納されている、<xref:System.Web.Security.FormsAuthenticationTicket>値</xref:System.Web.Security.FormsAuthenticationTicket></xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A></xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>。 Web サーバーが返すが生成された URI が長すぎる、`400 - Bad Request`エラーです。"
  example:
  - "The following code example sets the `cookieless` attribute to `AutoDetect` in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"AutoDetect\" />  \n</authentication>  \n```"
  syntax:
    content: public static System.Web.HttpCookieMode CookieMode { get; }
    return:
      type: System.Web.HttpCookieMode
      description: "1 つ、 <xref href=&quot;System.Web.HttpCookieMode&quot;> </xref>アプリケーションが cookie なしのフォーム認証のために構成されているかどうかを示す値。 既定値は<xref href=&quot;System.Web.HttpCookieMode&quot;></xref>です。"
  overload: System.Web.Security.FormsAuthentication.CookieMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.CookiesSupported
  id: CookiesSupported
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: CookiesSupported
  nameWithType: FormsAuthentication.CookiesSupported
  fullName: System.Web.Security.FormsAuthentication.CookiesSupported
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "アプリケーションが cookie なしのフォーム認証をサポートするように構成するかどうかを示す値を取得します。"
  remarks: "CookiesSupported プロパティに基づいて値を返します、<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>値と、ブラウザーの機能</xref:System.Web.Security.FormsAuthentication.CookieMode%2A>。      場合、<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>プロパティに設定されている<xref:System.Web.HttpCookieMode>、CookiesSupported プロパティが返す`true`</xref:System.Web.HttpCookieMode></xref:System.Web.Security.FormsAuthentication.CookieMode%2A>。      場合、<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>プロパティに設定されている<xref:System.Web.HttpCookieMode>、CookiesSupported プロパティが返す`false`</xref:System.Web.HttpCookieMode></xref:System.Web.Security.FormsAuthentication.CookieMode%2A>。      If、<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>プロパティに設定されている<xref:System.Web.HttpCookieMode>、CookiesSupported プロパティが返す`true`場合、ブラウザーが cookie をサポートし、cookie が有効ですそれ以外の場合、CookiesSupported プロパティを返します`false`。</xref:System.Web.HttpCookieMode> </xref:System.Web.Security.FormsAuthentication.CookieMode%2A> 。      If、<xref:System.Web.Security.FormsAuthentication.CookieMode%2A>プロパティに設定されている<xref:System.Web.HttpCookieMode>、CookiesSupported プロパティが返す`true`場合、<xref:System.Web.HttpRequest.Browser%2A>現在の<xref:System.Web.HttpContext.Request%2A>cookie と cookie; でのリダイレクトの両方をサポートは CookiesSupported プロパティを返しますそれ以外の場合、 `false`</xref:System.Web.HttpContext.Request%2A> </xref:System.Web.HttpRequest.Browser%2A> </xref:System.Web.HttpCookieMode> </xref:System.Web.Security.FormsAuthentication.CookieMode%2A> 。"
  example:
  - "The following code example sets the `cookieless` attribute to <xref:System.Web.HttpCookieMode> in the Web.config file. This configuration will result in the CookiesSupported property returning `false`.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseUri\" />  \n</authentication>  \n```"
  syntax:
    content: public static bool CookiesSupported { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>アプリケーションが cookie なしのフォーム認証をサポートするために構成されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Security.FormsAuthentication.CookiesSupported*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.Decrypt(System.String)
  id: Decrypt(System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: Decrypt(String)
  nameWithType: FormsAuthentication.Decrypt(String)
  fullName: System.Web.Security.FormsAuthentication.Decrypt(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "作成、 <xref href=&quot;System.Web.Security.FormsAuthenticationTicket&quot;> </xref>オブジェクトが、メソッドに渡されるフォーム認証の暗号化されたチケットに基づきます。"
  syntax:
    content: public static System.Web.Security.FormsAuthenticationTicket Decrypt (string encryptedTicket);
    parameters:
    - id: encryptedTicket
      type: System.String
      description: "暗号化された認証チケット。"
    return:
      type: System.Web.Security.FormsAuthenticationTicket
      description: "A <xref href=&quot;System.Web.Security.FormsAuthenticationTicket&quot;></xref> object. 場合、 <code> encryptedTicket </code>パラメーターが有効なチケット<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>が返されます。"
  overload: System.Web.Security.FormsAuthentication.Decrypt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>encryptedTicket</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>encryptedTicket</code> is an empty string (\"\").  \n  \n \\- or -  \n  \n The length of <code>encryptedTicket</code> is greater than 4096 characters.  \n  \n \\- or -  \n  \n <code>encryptedTicket</code> is of an invalid format."
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.DefaultUrl
  id: DefaultUrl
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: DefaultUrl
  nameWithType: FormsAuthentication.DefaultUrl
  fullName: System.Web.Security.FormsAuthentication.DefaultUrl
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "URL を取得、 <xref href=&quot;System.Web.Security.FormsAuthentication&quot;> </xref>クラスをリダイレクトする場合にないリダイレクト URL を指定します。"
  remarks: "DefaultUrl プロパティの値を使用して ASP.NET アプリケーションの構成ファイルで設定されて、`defaultUrl`構成要素の属性です。 DefaultUrl プロパティを使って、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>メソッド要求の戻り先 URL が含まれていない場合</xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>。 同様に、<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>要求で戻り先 URL が含まれていない場合、メソッドは、DefaultUrl に戻ります</xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>。"
  example:
  - "The following code example sets the `defaultUrl` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    defaultUrl=\"index.aspx\" />  \n</authentication>  \n```"
  syntax:
    content: public static string DefaultUrl { get; }
    return:
      type: System.String
      description: "URL を<xref href=&quot;System.Web.Security.FormsAuthentication&quot;></xref>クラスをリダイレクトする場合にないリダイレクト URL を指定します。 既定値は&quot;default.aspx&quot;"
  overload: System.Web.Security.FormsAuthentication.DefaultUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects
  id: EnableCrossAppRedirects
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: EnableCrossAppRedirects
  nameWithType: FormsAuthentication.EnableCrossAppRedirects
  fullName: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "認証されたユーザーを他の Web アプリケーションの Url にリダイレクトできるかどうかを示す値を取得します。"
  remarks: "使用できるプロパティの値を設定、`enableCrossAppRedirects`構成要素の属性です。       内でできるプロパティがチェックされた、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>メソッドとリダイレクト URL が、現在のアプリケーション ページを指していません</xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>。 できる場合`true`、できる場合は、リダイレクトが実行し、`false`で定義されているページをブラウザーがリダイレクトされる、<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>プロパティ</xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。      > [!NOTE] > アプリケーション間でのページをリダイレクトすると、認証済みのアプリケーション間で構成要素の特定の属性が重複していることを確認してください。 例および詳細については、次を参照してください。[アプリケーション間でのフォーム認証](~/add/includes/ajax-current-ext-md.md)です。      > [!IMPORTANT] > アプリケーション間のリダイレクトは許可されている場合、サイトは、悪意のある Web サイトへのユーザーに指示し、ログイン ページを使用して、サイトの悪用に対する脆弱性。 常にいることを確認、リダイレクト URL によって返される、<xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A>メソッドは、承認済みの Web サイトにのみリダイレクトを許可することを確認することができるようにと想定している URL</xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> 。 リダイレクト URL が適切なプロトコル (HTTP または HTTPS) を使用することを確認する必要があります。 これらの検証を実行するポストバック イベントのハンドラーを追加するには、ログイン ページにまたはのハンドラーを追加することができます、<xref:System.Web.UI.WebControls.Login.LoggedIn>のイベント、<xref:System.Web.UI.WebControls.Login>コントロール</xref:System.Web.UI.WebControls.Login></xref:System.Web.UI.WebControls.Login.LoggedIn>。"
  example:
  - "The following code example sets the `enableCrossAppRedirects` attribute to `true` in the Web.config file for an ASP.NET application.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseUri\"  \n    requireSSL=\"true\"   \n    enableCrossAppRedirects=\"true\" />  \n</authentication>  \n```"
  syntax:
    content: public static bool EnableCrossAppRedirects { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>認証されたユーザーは、他の Web アプリケーションの Url にリダイレクトできる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)
  id: EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: EnableFormsAuthentication(NameValueCollection)
  nameWithType: FormsAuthentication.EnableFormsAuthentication(NameValueCollection)
  fullName: System.Web.Security.FormsAuthentication.EnableFormsAuthentication(NameValueCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "フォーム認証を有効にします。"
  remarks: "場合、<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>プロパティは`null`、プロパティが、URL の既定値に設定されている、`configurationData`パラメーター</xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> 。 場合、<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>プロパティは`null`から、ログイン URL の値にプロパティが設定されている、`configurationData`パラメーター</xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> 。"
  syntax:
    content: public static void EnableFormsAuthentication (System.Collections.Specialized.NameValueCollection configurationData);
    parameters:
    - id: configurationData
      type: System.Collections.Specialized.NameValueCollection
      description: "&quot;DefaultUrl&quot;や&quot;loginUrl&quot;の値を含む名前と値のコレクション。 パラメーターは、既定の URL または login の URL の値がない場合は null にすることはできます。"
  overload: System.Web.Security.FormsAuthentication.EnableFormsAuthentication*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "アプリケーションは、開始前の初期化フェーズではありません。"
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)
  id: Encrypt(System.Web.Security.FormsAuthenticationTicket)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: Encrypt(FormsAuthenticationTicket)
  nameWithType: FormsAuthentication.Encrypt(FormsAuthenticationTicket)
  fullName: System.Web.Security.FormsAuthentication.Encrypt(FormsAuthenticationTicket)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "HTTP クッキーで使用するのに適した暗号化された認証チケットを含む文字列を作成します。"
  remarks: ''
  example:
  - "The following code example stores the result of the Encrypt method in a cookie by using the <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> property and redirects the user to the URL returned from the <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> method.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[FormsAuthenticationTicketClass#1](~/add/codesnippet/csharp/d209d6db-e50b-4c64-961a-_1.aspx)]\n [!code-vb[FormsAuthenticationTicketClass#1](~/add/codesnippet/visualbasic/d209d6db-e50b-4c64-961a-_1.aspx)]"
  syntax:
    content: public static string Encrypt (System.Web.Security.FormsAuthenticationTicket ticket);
    parameters:
    - id: ticket
      type: System.Web.Security.FormsAuthenticationTicket
      description: "<xref href=&quot;System.Web.Security.FormsAuthenticationTicket&quot;> </xref>暗号化された認証チケットの作成に使用するオブジェクト。"
    return:
      type: System.String
      description: "暗号化された認証チケットを含む文字列。"
  overload: System.Web.Security.FormsAuthentication.Encrypt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ticket</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.FormsCookieName
  id: FormsCookieName
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: FormsCookieName
  nameWithType: FormsAuthentication.FormsCookieName
  fullName: System.Web.Security.FormsAuthentication.FormsCookieName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "フォーム認証チケットを格納するために使用する cookie の名前を取得します。"
  remarks: "FormsCookieName プロパティの値を使用して ASP.NET アプリケーションの構成ファイルで設定されて、`name`構成要素の属性です。 保存する cookie を参照するため、FormsCookieName、<xref:System.Web.Security.FormsAuthenticationTicket>情報</xref:System.Web.Security.FormsAuthenticationTicket>。"
  example:
  - "The following code example sets the FormsCookieName property value by using the `name` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseCookies\"  \n    name=\".ASPXFORMSAUTH\" />  \n</authentication>  \n```"
  syntax:
    content: public static string FormsCookieName { get; }
    return:
      type: System.String
      description: "フォーム認証チケットを格納するために使用する cookie の名前。 既定値は&quot;です。ASPXAUTH&quot;です。"
  overload: System.Web.Security.FormsAuthentication.FormsCookieName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.FormsCookiePath
  id: FormsCookiePath
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: FormsCookiePath
  nameWithType: FormsAuthentication.FormsCookiePath
  fullName: System.Web.Security.FormsAuthentication.FormsCookiePath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "フォーム認証 cookie のパスを取得します。"
  remarks: "FormsCookiePath プロパティの値は、構成ファイルで設定を使用する ASP.NET アプリケーション、`path`構成要素の属性です。 FormsCookiePath を指定します、<xref:System.Web.HttpCookie.Path%2A>に保存する cookie の<xref:System.Web.Security.FormsAuthenticationTicket>情報</xref:System.Web.Security.FormsAuthenticationTicket></xref:System.Web.HttpCookie.Path%2A>。"
  example:
  - "The following code example sets the FormsCookiePath property value by using the `path` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseCookies\"  \n    path=\"/MyApplication\" />  \n</authentication>  \n```"
  syntax:
    content: public static string FormsCookiePath { get; }
    return:
      type: System.String
      description: "フォーム認証チケットの情報が格納されているクッキーのパス。 既定値は「/」です。"
  overload: System.Web.Security.FormsAuthentication.FormsCookiePath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)
  id: GetAuthCookie(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: GetAuthCookie(String,Boolean)
  nameWithType: FormsAuthentication.GetAuthCookie(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.GetAuthCookie(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "特定のユーザー名、認証 cookie を作成します。 これは未設定、cookie、送信応答の一部としてアプリケーションが cookie を発行する方法より詳細に制御できるようにします。"
  remarks: "クッキーのパスはによって決定されます、<xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>プロパティ</xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A>。"
  syntax:
    content: public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie);
    parameters:
    - id: userName
      type: System.String
      description: "認証されたユーザーの名前です。"
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>(1 つは、ブラウザー セッション間で保存されている); 永続的な cookie を作成するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Web.HttpCookie
      description: "<xref href=&quot;System.Web.HttpCookie&quot;> </xref>暗号化された認証チケット情報を格納します。 既定値、<xref:System.Web.Security.FormsAuthentication.FormsCookiePath*>プロパティを使用します</xref:System.Web.Security.FormsAuthentication.FormsCookiePath*>。"
  overload: System.Web.Security.FormsAuthentication.GetAuthCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)
  id: GetAuthCookie(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: GetAuthCookie(String,Boolean,String)
  nameWithType: FormsAuthentication.GetAuthCookie(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.GetAuthCookie(String,Boolean,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "特定のユーザー名、認証 cookie を作成します。 送信応答の一部としては、cookie を設定されません。"
  syntax:
    content: public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);
    parameters:
    - id: userName
      type: System.String
      description: "認証されたユーザーの名前です。"
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>(1 つは、ブラウザー セッション間で保存されている); 永続的な cookie を作成するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: strCookiePath
      type: System.String
      description: "<xref:System.Web.HttpCookie.Path*>認証 cookie の</xref:System.Web.HttpCookie.Path*>。"
    return:
      type: System.Web.HttpCookie
      description: "<xref href=&quot;System.Web.HttpCookie&quot;> </xref>暗号化された認証チケット情報を格納します。"
  overload: System.Web.Security.FormsAuthentication.GetAuthCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)
  id: GetRedirectUrl(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: GetRedirectUrl(String,Boolean)
  nameWithType: FormsAuthentication.GetRedirectUrl(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.GetRedirectUrl(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "ログイン ページへのリダイレクトの原因となった元の要求のリダイレクト URL を返します。"
  remarks: "このメソッドを使用するには、使用する代わりに、アプリケーション コードでのリダイレクトを実行するときに、<xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>メソッド</xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A>。       GetRedirectUrl メソッドは、クエリ文字列を使用して、指定された URL を返します、`ReturnURL`変数の名前。 たとえば、URL で`http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`、GetRedirectUrl メソッドが戻り先 URL を返します`caller.aspx`です。 場合、`ReturnURL`変数が存在しない、GetRedirectUrl メソッド内の URL が返されます、<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>プロパティ</xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。       ASP.NET は、ログイン ページをブラウザーがリダイレクトされたとき、戻り先 URL を自動的に追加します。       既定では、`ReturnUrl`変数は、現在のアプリケーション内のページを参照する必要があります。 場合`ReturnUrl`GetRedirectUrl メソッドの別のサーバーの URL を返しますページで、別のアプリケーションまたは参照、<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>プロパティ</xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。 設定する必要があります、現在のアプリケーション外のページを参照する戻り先 URL を許可する場合、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティを`true`を使用して、`enableCrossAppRedirects`構成要素の属性です</xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>。      > [!IMPORTANT] > 設定、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティを`true`アプリケーション間のリダイレクトは潜在的なセキュリティの脅威を許可する</xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>。 詳細については、次を参照してください、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティ。</xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 。"
  example:
  - "The following code example redirects authenticated users to the URL returned from the GetRedirectUrl method.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[FormsAuthenticationTicketClass#1](~/add/codesnippet/csharp/41a9cd2e-33ed-4156-8c31-_1.aspx)]\n [!code-vb[FormsAuthenticationTicketClass#1](~/add/codesnippet/visualbasic/41a9cd2e-33ed-4156-8c31-_1.aspx)]"
  syntax:
    content: public static string GetRedirectUrl (string userName, bool createPersistentCookie);
    parameters:
    - id: userName
      type: System.String
      description: "認証されたユーザーの名前です。"
    - id: createPersistentCookie
      type: System.Boolean
      description: "このパラメーターは無視されます。"
    return:
      type: System.String
      description: "リダイレクト URL を表す文字列。"
  overload: System.Web.Security.FormsAuthentication.GetRedirectUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)
  id: HashPasswordForStoringInConfigFile(System.String,System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: HashPasswordForStoringInConfigFile(String,String)
  nameWithType: FormsAuthentication.HashPasswordForStoringInConfigFile(String,String)
  fullName: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "指定したパスワードとハッシュ アルゴリズムに基づく構成ファイルに保存するのに適したハッシュ パスワードを生成します。"
  remarks: "HashPasswordForStoringInConfigFile メソッドでは、アプリケーションの構成ファイルにフォーム認証の資格情報を格納する場合に使用できるハッシュされたパスワードの値を作成します。       アプリケーションの構成ファイルに格納されている認証の資格情報が使用、<xref:System.Web.Security.FormsAuthentication.Authenticate%2A>アプリケーションのユーザーのパスワードを確認するメソッド</xref:System.Web.Security.FormsAuthentication.Authenticate%2A>。 代わりに、ASP.NET メンバーシップを使用して、ユーザーの資格情報を格納することができます。 詳細については、次を参照してください。[メンバーシップを使用したユーザーを管理する](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example takes a user name, password, and hash type and displays the  section of the configuration that includes the user definition and hashed password.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[FormsAuthenticationHashPassword#1](~/add/codesnippet/visualbasic/60863efe-d1c9-47ee-90e6-_1.aspx)]\n [!code-cs[FormsAuthenticationHashPassword#1](~/add/codesnippet/csharp/60863efe-d1c9-47ee-90e6-_1.aspx)]"
  syntax:
    content: public static string HashPasswordForStoringInConfigFile (string password, string passwordFormat);
    parameters:
    - id: password
      type: System.String
      description: "ハッシュするパスワードです。"
    - id: passwordFormat
      type: System.String
      description: "使用するハッシュ アルゴリズム。 `passwordFormat`<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>の&1; つを表す、 <xref href=&quot;System.Web.Configuration.FormsAuthPasswordFormat&quot;> </xref>列挙値。"
    return:
      type: System.String
      description: "ハッシュされたパスワードです。"
  overload: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>password</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>       -or-       <code>passwordFormat</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>passwordFormat</code>有効ではありません<xref href=&quot;System.Web.Configuration.FormsAuthPasswordFormat&quot;></xref>値。"
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.Initialize
  id: Initialize
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: Initialize()
  nameWithType: FormsAuthentication.Initialize()
  fullName: System.Web.Security.FormsAuthentication.Initialize()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "初期化、 <xref href=&quot;System.Web.Security.FormsAuthentication&quot;> </xref>オブジェクトは、アプリケーションの構成設定に基づいています。"
  remarks: "Initialize メソッドが呼び出されます<xref:System.Web.Security.FormsAuthenticationModule>、<xref:System.Web.Security.FormsAuthentication>クラス</xref:System.Web.Security.FormsAuthentication>のインスタンスを作成</xref:System.Web.Security.FormsAuthenticationModule>する このメソッドは、コードから呼び出されるものではありません。"
  syntax:
    content: public static void Initialize ();
    parameters: []
  overload: System.Web.Security.FormsAuthentication.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.IsEnabled
  id: IsEnabled
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: IsEnabled
  nameWithType: FormsAuthentication.IsEnabled
  fullName: System.Web.Security.FormsAuthentication.IsEnabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "フォーム認証が有効になっているかどうかを示す値を取得します。"
  syntax:
    content: public static bool IsEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>フォーム認証が有効である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Security.FormsAuthentication.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.LoginUrl
  id: LoginUrl
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: LoginUrl
  nameWithType: FormsAuthentication.LoginUrl
  fullName: System.Web.Security.FormsAuthentication.LoginUrl
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "ログイン ページの URL を取得、 <xref href=&quot;System.Web.Security.FormsAuthentication&quot;> </xref>クラスにリダイレクトされます。"
  remarks: "LoginUrl プロパティの値を使用して ASP.NET アプリケーションの構成ファイルで設定されて、`loginUrl`構成要素の属性です。 ログイン Url が使用される、<xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>メソッド</xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>。"
  example:
  - "The following code example sets the `loginUrl` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    defaultUrl=\"index.aspx\" />  \n</authentication>  \n```"
  syntax:
    content: public static string LoginUrl { get; }
    return:
      type: System.String
      description: "ページのログインの URL、 <xref href=&quot;System.Web.Security.FormsAuthentication&quot;> </xref>クラスにリダイレクトされます。 既定値は&quot;login.aspx です&quot;"
  overload: System.Web.Security.FormsAuthentication.LoginUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)
  id: RedirectFromLoginPage(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RedirectFromLoginPage(String,Boolean)
  nameWithType: FormsAuthentication.RedirectFromLoginPage(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "最初に要求された URL または既定の URL に、認証されたユーザーをリダイレクトします。"
  remarks: "RedirectFromLoginPage メソッドは、クエリ文字列を使用して、指定された URL にリダイレクト、`ReturnURL`変数の名前。 たとえば、URL で`http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`、RedirectFromLoginPage メソッドは、戻り先 URL にリダイレクト`caller.aspx`です。 場合、`ReturnURL`変数が存在しない、RedirectFromLoginPage メソッド内の URL にリダイレクト、<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>プロパティ</xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。       ASP.NET は、ログイン ページをブラウザーがリダイレクトされたとき、戻り先 URL を自動的に追加します。       既定では、`ReturnUrl`変数は、現在のアプリケーション内のページを参照する必要があります。 場合`ReturnUrl`または RedirectFromLoginPage メソッドの別のサーバーに別のアプリケーションでページの URL にリダイレクトへの参照、<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>プロパティ</xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。 設定する必要があります、現在のアプリケーションの外部ページへのリダイレクトを許可する場合、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティを`true`を使用して、`enableCrossAppRedirects`構成要素の属性です</xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>。      > [!IMPORTANT] > 設定、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティを`true`アプリケーション間のリダイレクトは潜在的なセキュリティの脅威を許可する</xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>。 詳細については、次を参照してください、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティ。</xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 。       場合、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>プロパティは`true`、いずれか、`ReturnUrl`変数が、現在のアプリケーション内でまたは<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティは`true`、RedirectFromLoginPage メソッドは、認証チケットを発行され、既定の cookie を使用して、配置、<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>メソッド</xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A></xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A></xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>。       場合<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>は`false`リダイレクト パスは、現在のアプリケーションの URL には、リダイレクト URL の一部として、チケットが発行したとします</xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>。 場合<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>は`false`、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>は`true`、リダイレクト URL は、現在のアプリケーション内のページを参照していません RedirectFromLoginPage メソッドは、認証チケットを発行しに格納および、<xref:System.Web.HttpRequest.QueryString%2A>プロパティ</xref:System.Web.HttpRequest.QueryString%2A></xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A></xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>。"
  example:
  - "The following code example redirects validated users to either the originally requested URL or the <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>. The code example uses ASP.NET membership to validate users. For more information about ASP.NET membership, see [Managing Users by Using Membership](~/add/includes/ajax-current-ext-md.md).  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlMembershipProvider#1](~/add/codesnippet/csharp/1b30741b-7340-4c63-b342-_1.aspx)]\n [!code-vb[System.Web.Security.SqlMembershipProvider#1](~/add/codesnippet/visualbasic/1b30741b-7340-4c63-b342-_1.aspx)]"
  syntax:
    content: public static void RedirectFromLoginPage (string userName, bool createPersistentCookie);
    parameters:
    - id: userName
      type: System.String
      description: "認証されたユーザー名。"
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>(1 つは、ブラウザー セッション間で保存されている); 永続的な cookie を作成するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Security.FormsAuthentication.RedirectFromLoginPage*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: 'クエリ文字列で指定された戻り先 URL には、HTTP 以外のプロトコルが含まれています: または HTTPS: です。'
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)
  id: RedirectFromLoginPage(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RedirectFromLoginPage(String,Boolean,String)
  nameWithType: FormsAuthentication.RedirectFromLoginPage(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(String,Boolean,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "最初に要求された URL またはフォーム認証 cookie の指定された cookie のパスを使用して既定の URL に、認証されたユーザーをリダイレクトします。"
  remarks: "RedirectFromLoginPage メソッドは、クエリを使用して文字列で指定された戻り先 URL にリダイレクト、`ReturnURL`変数の名前。 たとえば、URL で`http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`、RedirectFromLoginPage メソッドは、戻り先 URL にリダイレクト`caller.aspx`です。 場合、`ReturnURL`変数が存在しない、RedirectFromLoginPage メソッド内の URL にリダイレクト、<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>プロパティ</xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。       ASP.NET は、ログイン ページをブラウザーがリダイレクトされたとき、戻り先 URL を自動的に追加します。       既定では、`ReturnUrl`変数は、現在のアプリケーション内のページを参照する必要があります。 場合`ReturnUrl`メソッド内の URL にリダイレクト RedirectFromLoginPage、別のサーバー上または別のアプリケーションでページを指す、<xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>プロパティ</xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>。 設定する必要があります、現在のアプリケーションの外部ページへのリダイレクトを許可する場合、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティを`true`を使用して、`enableCrossAppRedirects`構成要素の属性です</xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>。      > [!IMPORTANT] > 設定、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティを`true`アプリケーション間のリダイレクトは潜在的なセキュリティの脅威を許可する</xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>。 詳細については、次を参照してください、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティ。</xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> 。       場合、<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>プロパティは`true`、いずれか、`ReturnUrl`変数は、現在のアプリケーション内では、または<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>プロパティは`true`、RedirectFromLoginPage メソッドは、認証チケットを発行しで指定された cookie に格納し、`strCookiePath`パラメーターを使用して、<xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A>メソッド</xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A></xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A></xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>。       場合<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>は`false`リダイレクト パスは、現在のアプリケーションの URL には、リダイレクト URL の一部として、チケットが発行したとします</xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>。 場合<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>は`false`、<xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>は`true`、リダイレクト URL は、現在のアプリケーション内のページを参照していません RedirectFromLoginPage メソッドは、認証チケットを発行しに格納および、<xref:System.Web.HttpRequest.QueryString%2A>プロパティ</xref:System.Web.HttpRequest.QueryString%2A></xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A></xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>。"
  syntax:
    content: public static void RedirectFromLoginPage (string userName, bool createPersistentCookie, string strCookiePath);
    parameters:
    - id: userName
      type: System.String
      description: "認証されたユーザー名。"
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>(1 つは、ブラウザー セッション間で保存されている); 永続的な cookie を作成するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: strCookiePath
      type: System.String
      description: "フォーム認証チケットの cookie のパス。"
  overload: System.Web.Security.FormsAuthentication.RedirectFromLoginPage*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: 'クエリ文字列で指定された戻り先 URL には、HTTP 以外のプロトコルが含まれています: または HTTPS: です。'
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RedirectToLoginPage
  id: RedirectToLoginPage
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RedirectToLoginPage()
  nameWithType: FormsAuthentication.RedirectToLoginPage()
  fullName: System.Web.Security.FormsAuthentication.RedirectToLoginPage()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "ログイン URL にブラウザーをリダイレクトします。"
  remarks: "RedirectToLoginPage メソッド<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>。</xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>にブラウザーをリダイレクトします。       RedirectToLoginPage メソッドでは、フォーム認証 cookie はクリアされません。 <xref:System.Web.Security.FormsAuthentication.SignOut%2A>を&1; 人のユーザーをログインし、別のユーザーをログインできるようにするメソッド</xref:System.Web.Security.FormsAuthentication.SignOut%2A>と組み合わせて RedirectToLoginPage メソッドを使用することができます。"
  example:
  - "The following code example clears the forms-authentication cookie using the <xref:System.Web.Security.FormsAuthentication.SignOut%2A> method and redirects the user to the login page using the RedirectToLoginPage method.  \n  \n [!code-cs[System.Web.Security.FormsAuthentication#2](~/add/codesnippet/csharp/m-system.web.security.fo_0_1.aspx)]\n [!code-vb[System.Web.Security.FormsAuthentication#2](~/add/codesnippet/visualbasic/m-system.web.security.fo_0_1.aspx)]"
  syntax:
    content: public static void RedirectToLoginPage ();
    parameters: []
  overload: System.Web.Security.FormsAuthentication.RedirectToLoginPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)
  id: RedirectToLoginPage(System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RedirectToLoginPage(String)
  nameWithType: FormsAuthentication.RedirectToLoginPage(String)
  fullName: System.Web.Security.FormsAuthentication.RedirectToLoginPage(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "指定したクエリ文字列でログイン URL にブラウザーをリダイレクトします。"
  remarks: "RedirectToLoginPage メソッドにリダイレクトするブラウザー、<xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>が含まれています、`extraQueryString`として値、<xref:System.Management.ManagementQuery.QueryString%2A>のリダイレクト URL</xref:System.Management.ManagementQuery.QueryString%2A> </xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> 。       RedirectToLoginPage メソッドでは、フォーム認証 cookie はクリアされません。 <xref:System.Web.Security.FormsAuthentication.SignOut%2A>を&1; 人のユーザーをログインし、別のユーザーをログインできるようにするメソッド</xref:System.Web.Security.FormsAuthentication.SignOut%2A>と組み合わせて RedirectToLoginPage メソッドを使用することができます。"
  example:
  - "The following code example clears the forms-authentication cookie using the <xref:System.Web.Security.FormsAuthentication.SignOut%2A> method and redirects the user to the login page using the RedirectToLoginPage method.  \n  \n [!code-cs[System.Web.Security.FormsAuthentication#3](~/add/codesnippet/csharp/m-system.web.security.fo_1_1.aspx)]\n [!code-vb[System.Web.Security.FormsAuthentication#3](~/add/codesnippet/visualbasic/m-system.web.security.fo_1_1.aspx)]"
  syntax:
    content: public static void RedirectToLoginPage (string extraQueryString);
    parameters:
    - id: extraQueryString
      type: System.String
      description: "リダイレクト URL に含めるクエリ文字列。"
  overload: System.Web.Security.FormsAuthentication.RedirectToLoginPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)
  id: RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RenewTicketIfOld(FormsAuthenticationTicket)
  nameWithType: FormsAuthentication.RenewTicketIfOld(FormsAuthenticationTicket)
  fullName: System.Web.Security.FormsAuthentication.RenewTicketIfOld(FormsAuthenticationTicket)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "更新プログラムのある、発行日と有効期限の日付と時刻の条件付きで、 <xref href=&quot;System.Web.Security.FormsAuthenticationTicket&quot;></xref>です。"
  remarks: "RenewTicketIfOld メソッド更新の有効期限の日付と時刻の指定された<xref:System.Web.Security.FormsAuthenticationTicket>場合、現在の日付とマイナスの時間、<xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A>値がより大きい、<xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A>現在の日付と時刻を引いた値</xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A></xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A></xref:System.Web.Security.FormsAuthenticationTicket>。       チケットが更新、<xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A>プロパティの現在の日付と時刻に設定し、<xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A>プロパティ、現在の日付と時刻と、元に設定する<xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A>元を引いた値<xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A>値</xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A></xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A></xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A></xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A>。"
  syntax:
    content: public static System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld (System.Web.Security.FormsAuthenticationTicket tOld);
    parameters:
    - id: tOld
      type: System.Web.Security.FormsAuthenticationTicket
      description: "更新するフォーム認証チケット。"
    return:
      type: System.Web.Security.FormsAuthenticationTicket
      description: "更新された<xref href=&quot;System.Web.Security.FormsAuthenticationTicket&quot;></xref>です。"
  overload: System.Web.Security.FormsAuthentication.RenewTicketIfOld*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.RequireSSL
  id: RequireSSL
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: RequireSSL
  nameWithType: FormsAuthentication.RequireSSL
  fullName: System.Web.Security.FormsAuthentication.RequireSSL
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "フォーム認証 cookie がサーバーに返されるために SSL を必要とするかどうかを示す値を取得します。"
  remarks: "使用して ASP.NET アプリケーションの構成ファイルで RequireSSL プロパティの値を設定、`requireSSL`構成要素の属性です。 指定できます、Web.config ファイルで ASP.NET アプリケーションの SSL (Secure Sockets Layer) がサーバーに設定して、フォーム認証 cookie を返す必要かどうか、`requireSSL`属性。 詳細については、 <xref:System.Web.HttpCookie.Secure%2A>。</xref:System.Web.HttpCookie.Secure%2A>を参照してください。       推奨を構成する場合`requireSSL`として`false`、構成することも`slidingExpiration`として`false`チケットの有効期限の量を削減するためです。"
  example:
  - "The following code example sets the `requireSSL` attribute in the Web.config file.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    cookieless=\"UseCookies\"  \n    requireSSL=\"true\"  \n    path=\"/MyApplication\" />  \n</authentication>  \n```"
  syntax:
    content: public static bool RequireSSL { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>SSL が必要な場合、フォーム認証クッキーをサーバーに戻るにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Security.FormsAuthentication.RequireSSL*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)
  id: SetAuthCookie(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: SetAuthCookie(String,Boolean)
  nameWithType: FormsAuthentication.SetAuthCookie(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.SetAuthCookie(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "指定されたユーザー名の認証チケットを作成し、追加や、URL、応答のクッキー コレクションに cookie なしの認証を使用している場合。"
  remarks: "SetAuthCookie メソッドの場合に、いずれかのクッキー コレクション、または URL にフォーム認証チケットを追加します<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>は`false`</xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>。 フォーム認証チケットは、次のブラウザーによって行われた要求にフォーム認証情報を提供します。 フォーム認証では、ユーザーの認証が、リダイレクトの制御を維持する場合に SetAuthCookie メソッドを使用できます。"
  syntax:
    content: public static void SetAuthCookie (string userName, bool createPersistentCookie);
    parameters:
    - id: userName
      type: System.String
      description: "認証されたユーザーの名前。 これを Windows アカウントにマップがありません。"
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>(1 つは、ブラウザー セッション間で保存されている); 永続的な cookie を作成するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Security.FormsAuthentication.SetAuthCookie*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<>*> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> and <>*> is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)
  id: SetAuthCookie(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: SetAuthCookie(String,Boolean,String)
  nameWithType: FormsAuthentication.SetAuthCookie(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.SetAuthCookie(String,Boolean,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "指定されたユーザー名の認証チケットを作成し、指定された cookie のパスを使用または cookie なしの認証を使用している場合は、この URL を使用して、応答のクッキー コレクションに追加します。"
  remarks: "SetAuthCookie メソッドでは場合、cookie のコレクションまたは URL に、フォーム認証チケットを追加<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>は`false`</xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>。 フォーム認証チケットは、次のブラウザーによって行われた要求にフォーム認証情報を提供します。 フォーム認証では、ユーザーの認証が、リダイレクトの制御を維持する場合に SetAuthCookie メソッドを使用できます。"
  syntax:
    content: public static void SetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);
    parameters:
    - id: userName
      type: System.String
      description: "認証されたユーザーの名前。"
    - id: createPersistentCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>(1 つは、ブラウザー セッション間で保存されている); 永続的な cookie を作成するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: strCookiePath
      type: System.String
      description: "フォーム認証チケットの cookie のパス。"
  overload: System.Web.Security.FormsAuthentication.SetAuthCookie*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<>*> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> and <>*> is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.SignOut
  id: SignOut
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: SignOut()
  nameWithType: FormsAuthentication.SignOut()
  fullName: System.Web.Security.FormsAuthentication.SignOut()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "ブラウザーからフォーム認証チケットを削除します。"
  remarks: "SignOut メソッド フォーム認証チケット情報を削除、クッキーまたは URL から場合<xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>は`false`</xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A>。 <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>を&1; 人のユーザーをログインし、別のユーザーをログインできるようにするメソッド</xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A>と組み合わせて SignOut メソッドを使用することができます。       Cookie なしのモードで排他的に実行するかを明示的に認証と匿名ユーザーの両方をサポートする場合は、匿名 id を削除した結果として実行する特別なビジネス ロジックが必要な場合、ログイン ページへのリダイレクトを制御します。       呼び出して、アプリケーションのログイン ページへのリダイレクトが行われた SignOut メソッドが呼び出されたときに、<xref:System.Web.HttpResponse.Redirect%2A>メソッドを`endResponse`パラメーターに設定`false`</xref:System.Web.HttpResponse.Redirect%2A>。 リダイレクトは行われず、現在のページの実行が完了するまで追加のコードを実行できるようにします。 コードに別のページへの明示的なリダイレクトが含まれていない場合は、ユーザーがアプリケーションの構成ファイルで構成されたログイン ページにリダイレクトされます。       SignOut メソッドを呼び出すと、フォーム認証の cookie のみ削除されます。 Web サーバーは、後で比較用に有効であり、有効期限が切れた認証チケットを格納しません。 これにより、サイトを悪意のあるユーザーが、有効なフォーム認証 cookie を取得する場合はリプレイ攻撃に対して脆弱です。 フォーム認証 cookie を使用する場合にセキュリティを強化するには、次を実行する必要があります:-を設定して、フォーム認証 cookie の絶対有効期限を使用して、<xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A>プロパティを`false`</xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A>。 これにより、乗っ取ら cookie を再生できるウィンドウが制限されます。      -のみを発行しを設定して Secure Sockets Layer (SSL) 経由での認証クッキーを受け入れ、<xref:System.Web.Security.FormsAuthentication.RequireSSL%2A>プロパティを`true`し、Web サイト全体で SSL を実行しています</xref:System.Web.Security.FormsAuthentication.RequireSSL%2A>。 設定、<xref:System.Web.Security.FormsAuthentication.RequireSSL%2A>プロパティを`true`により、ASP.NET は送信しません、認証 cookie をブラウザーに非 SSL 接続経由でですただし、クライアントが、設定は無視セキュリティで保護された cookie のことです。</xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> 。 つまり、クライアントが送信するフォーム認証 cookie、非 SSL 接続を経由したがってがハイジャックされる危険にさらさです。 クライアントは、フォーム認証 cookie をクリア テキストで、Web サイト全体で SSL を実行して、送信されないようにできます。      -永続的なストレージを使用して、サーバーで Web サイトからログオフしたときを記録およびなど、アプリケーション イベントを使用し、 <xref:System.Web.HttpApplication.PostAuthenticateRequest>、現在のユーザーがフォーム認証で認証されたかどうかを決定するイベントです</xref:System.Web.HttpApplication.PostAuthenticateRequest>。 場合は、ユーザーがフォーム認証で認証されたユーザーがログアウトして永続的ストレージ内の情報が示されている場合、ただちに認証 cookie をクリアし、ログイン ページに戻る、ブラウザーをリダイレクトします。 ログインに成功した後、ユーザーがログインしていることを反映するように記憶域を更新します。 このメソッドを使用して、アプリケーション ログに記録で、ユーザーのステータスを追跡する必要がアイドル状態のユーザーをログアウトを強制する必要があります。"
  example:
  - "The following code example clears the forms-authentication cookie using the SignOut method and redirects the user to the login page using the <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> method.  \n  \n [!code-cs[System.Web.Security.FormsAuthentication#2](~/add/codesnippet/csharp/m-system.web.security.fo_2_1.aspx)]\n [!code-vb[System.Web.Security.FormsAuthentication#2](~/add/codesnippet/visualbasic/m-system.web.security.fo_2_1.aspx)]"
  syntax:
    content: public static void SignOut ();
    parameters: []
  overload: System.Web.Security.FormsAuthentication.SignOut*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.SlidingExpiration
  id: SlidingExpiration
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: SlidingExpiration
  nameWithType: FormsAuthentication.SlidingExpiration
  fullName: System.Web.Security.FormsAuthentication.SlidingExpiration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "スライディング期限を有効にするかどうかを示す値を取得します。"
  remarks: "使用して、SlidingExpiration プロパティ値を設定、`slidingExpiration`構成要素の属性です。       スライディング期限を有効では、要求が行われ、タイムアウト間隔の半分以上が経過した場合に有効な認証 cookie の有効期限をリセットします。 クッキーの期限が切れると、ユーザー再認証する必要があります。 SlidingExpiration プロパティを設定`false`セキュリティを強化できますアプリケーションの認証クッキーの有効期限、時間を制限することによって、構成されたに基づいて`timeout`値。       お勧めを構成する場合`requireSSL`として`false`、構成することも`slidingExpiration`として`false`チケットの有効期限の量を削減するためです。"
  example:
  - "The following code example sets the `slidingExpiration` attribute to `false` in the Web.config file for an ASP.NET application.  \n  \n```  \n<authentication mode=\"Forms\">  \n  <forms loginUrl=\"member_login.aspx\"  \n    name=\".ASPXFORMSAUTH\"  \n    cookieless=\"UseCookies\"  \n    requireSSL=\"true\"   \n    slidingExpiration=\"false\" />  \n</authentication>  \n```"
  syntax:
    content: public static bool SlidingExpiration { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>スライディング期限が有効である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Security.FormsAuthentication.SlidingExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.TicketCompatibilityMode
  id: TicketCompatibilityMode
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: TicketCompatibilityMode
  nameWithType: FormsAuthentication.TicketCompatibilityMode
  fullName: System.Web.Security.FormsAuthentication.TicketCompatibilityMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "チケットの有効期限の日付を世界協定時刻 (UTC) または現地時刻を使用するかどうかを示す値を取得します。"
  syntax:
    content: public static System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode { get; }
    return:
      type: System.Web.Configuration.TicketCompatibilityMode
      description: "チケットの有効期限の日付を世界協定時刻 (UTC) または現地時刻を使用するかどうかを示す値。"
  overload: System.Web.Security.FormsAuthentication.TicketCompatibilityMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.FormsAuthentication.Timeout
  id: Timeout
  parent: System.Web.Security.FormsAuthentication
  langs:
  - csharp
  name: Timeout
  nameWithType: FormsAuthentication.Timeout
  fullName: System.Web.Security.FormsAuthentication.Timeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "認証チケットの有効期限が切れるまでの時間を取得します。"
  syntax:
    content: public static TimeSpan Timeout { get; }
    return:
      type: System.TimeSpan
      description: "認証チケットの前に時間が有効期限です。"
  overload: System.Web.Security.FormsAuthentication.Timeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.Security.FormsAuthentication.#ctor
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsAuthentication()
  nameWithType: FormsAuthentication.FormsAuthentication()
  fullName: System.Web.Security.FormsAuthentication.FormsAuthentication()
- uid: System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Authenticate(String,String)
  nameWithType: FormsAuthentication.Authenticate(String,String)
  fullName: System.Web.Security.FormsAuthentication.Authenticate(String,String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.FormsAuthentication.CookieDomain
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookieDomain
  nameWithType: FormsAuthentication.CookieDomain
  fullName: System.Web.Security.FormsAuthentication.CookieDomain
- uid: System.Web.Security.FormsAuthentication.CookieMode
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookieMode
  nameWithType: FormsAuthentication.CookieMode
  fullName: System.Web.Security.FormsAuthentication.CookieMode
- uid: System.Web.HttpCookieMode
  parent: System.Web
  isExternal: false
  name: HttpCookieMode
  nameWithType: HttpCookieMode
  fullName: System.Web.HttpCookieMode
- uid: System.Web.Security.FormsAuthentication.CookiesSupported
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookiesSupported
  nameWithType: FormsAuthentication.CookiesSupported
  fullName: System.Web.Security.FormsAuthentication.CookiesSupported
- uid: System.Web.Security.FormsAuthentication.Decrypt(System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Decrypt(String)
  nameWithType: FormsAuthentication.Decrypt(String)
  fullName: System.Web.Security.FormsAuthentication.Decrypt(String)
- uid: System.Web.Security.FormsAuthenticationTicket
  parent: System.Web.Security
  isExternal: false
  name: FormsAuthenticationTicket
  nameWithType: FormsAuthenticationTicket
  fullName: System.Web.Security.FormsAuthenticationTicket
- uid: System.Web.Security.FormsAuthentication.DefaultUrl
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: DefaultUrl
  nameWithType: FormsAuthentication.DefaultUrl
  fullName: System.Web.Security.FormsAuthentication.DefaultUrl
- uid: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: EnableCrossAppRedirects
  nameWithType: FormsAuthentication.EnableCrossAppRedirects
  fullName: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects
- uid: System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: EnableFormsAuthentication(NameValueCollection)
  nameWithType: FormsAuthentication.EnableFormsAuthentication(NameValueCollection)
  fullName: System.Web.Security.FormsAuthentication.EnableFormsAuthentication(NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Encrypt(FormsAuthenticationTicket)
  nameWithType: FormsAuthentication.Encrypt(FormsAuthenticationTicket)
  fullName: System.Web.Security.FormsAuthentication.Encrypt(FormsAuthenticationTicket)
- uid: System.Web.Security.FormsAuthentication.FormsCookieName
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsCookieName
  nameWithType: FormsAuthentication.FormsCookieName
  fullName: System.Web.Security.FormsAuthentication.FormsCookieName
- uid: System.Web.Security.FormsAuthentication.FormsCookiePath
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsCookiePath
  nameWithType: FormsAuthentication.FormsCookiePath
  fullName: System.Web.Security.FormsAuthentication.FormsCookiePath
- uid: System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: GetAuthCookie(String,Boolean)
  nameWithType: FormsAuthentication.GetAuthCookie(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.GetAuthCookie(String,Boolean)
- uid: System.Web.HttpCookie
  parent: System.Web
  isExternal: false
  name: HttpCookie
  nameWithType: HttpCookie
  fullName: System.Web.HttpCookie
- uid: System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: GetAuthCookie(String,Boolean,String)
  nameWithType: FormsAuthentication.GetAuthCookie(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.GetAuthCookie(String,Boolean,String)
- uid: System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: GetRedirectUrl(String,Boolean)
  nameWithType: FormsAuthentication.GetRedirectUrl(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.GetRedirectUrl(String,Boolean)
- uid: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: HashPasswordForStoringInConfigFile(String,String)
  nameWithType: FormsAuthentication.HashPasswordForStoringInConfigFile(String,String)
  fullName: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(String,String)
- uid: System.Web.Security.FormsAuthentication.Initialize
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Initialize()
  nameWithType: FormsAuthentication.Initialize()
  fullName: System.Web.Security.FormsAuthentication.Initialize()
- uid: System.Web.Security.FormsAuthentication.IsEnabled
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: IsEnabled
  nameWithType: FormsAuthentication.IsEnabled
  fullName: System.Web.Security.FormsAuthentication.IsEnabled
- uid: System.Web.Security.FormsAuthentication.LoginUrl
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: LoginUrl
  nameWithType: FormsAuthentication.LoginUrl
  fullName: System.Web.Security.FormsAuthentication.LoginUrl
- uid: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectFromLoginPage(String,Boolean)
  nameWithType: FormsAuthentication.RedirectFromLoginPage(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(String,Boolean)
- uid: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectFromLoginPage(String,Boolean,String)
  nameWithType: FormsAuthentication.RedirectFromLoginPage(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.RedirectFromLoginPage(String,Boolean,String)
- uid: System.Web.Security.FormsAuthentication.RedirectToLoginPage
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectToLoginPage()
  nameWithType: FormsAuthentication.RedirectToLoginPage()
  fullName: System.Web.Security.FormsAuthentication.RedirectToLoginPage()
- uid: System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectToLoginPage(String)
  nameWithType: FormsAuthentication.RedirectToLoginPage(String)
  fullName: System.Web.Security.FormsAuthentication.RedirectToLoginPage(String)
- uid: System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RenewTicketIfOld(FormsAuthenticationTicket)
  nameWithType: FormsAuthentication.RenewTicketIfOld(FormsAuthenticationTicket)
  fullName: System.Web.Security.FormsAuthentication.RenewTicketIfOld(FormsAuthenticationTicket)
- uid: System.Web.Security.FormsAuthentication.RequireSSL
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RequireSSL
  nameWithType: FormsAuthentication.RequireSSL
  fullName: System.Web.Security.FormsAuthentication.RequireSSL
- uid: System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SetAuthCookie(String,Boolean)
  nameWithType: FormsAuthentication.SetAuthCookie(String,Boolean)
  fullName: System.Web.Security.FormsAuthentication.SetAuthCookie(String,Boolean)
- uid: System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SetAuthCookie(String,Boolean,String)
  nameWithType: FormsAuthentication.SetAuthCookie(String,Boolean,String)
  fullName: System.Web.Security.FormsAuthentication.SetAuthCookie(String,Boolean,String)
- uid: System.Web.Security.FormsAuthentication.SignOut
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SignOut()
  nameWithType: FormsAuthentication.SignOut()
  fullName: System.Web.Security.FormsAuthentication.SignOut()
- uid: System.Web.Security.FormsAuthentication.SlidingExpiration
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SlidingExpiration
  nameWithType: FormsAuthentication.SlidingExpiration
  fullName: System.Web.Security.FormsAuthentication.SlidingExpiration
- uid: System.Web.Security.FormsAuthentication.TicketCompatibilityMode
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: TicketCompatibilityMode
  nameWithType: FormsAuthentication.TicketCompatibilityMode
  fullName: System.Web.Security.FormsAuthentication.TicketCompatibilityMode
- uid: System.Web.Configuration.TicketCompatibilityMode
  parent: System.Web.Configuration
  isExternal: false
  name: TicketCompatibilityMode
  nameWithType: TicketCompatibilityMode
  fullName: System.Web.Configuration.TicketCompatibilityMode
- uid: System.Web.Security.FormsAuthentication.Timeout
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Timeout
  nameWithType: FormsAuthentication.Timeout
  fullName: System.Web.Security.FormsAuthentication.Timeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Web.Security.FormsAuthentication.#ctor*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsAuthentication
  nameWithType: FormsAuthentication.FormsAuthentication
- uid: System.Web.Security.FormsAuthentication.Authenticate*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Authenticate
  nameWithType: FormsAuthentication.Authenticate
- uid: System.Web.Security.FormsAuthentication.CookieDomain*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookieDomain
  nameWithType: FormsAuthentication.CookieDomain
- uid: System.Web.Security.FormsAuthentication.CookieMode*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookieMode
  nameWithType: FormsAuthentication.CookieMode
- uid: System.Web.Security.FormsAuthentication.CookiesSupported*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: CookiesSupported
  nameWithType: FormsAuthentication.CookiesSupported
- uid: System.Web.Security.FormsAuthentication.Decrypt*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Decrypt
  nameWithType: FormsAuthentication.Decrypt
- uid: System.Web.Security.FormsAuthentication.DefaultUrl*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: DefaultUrl
  nameWithType: FormsAuthentication.DefaultUrl
- uid: System.Web.Security.FormsAuthentication.EnableCrossAppRedirects*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: EnableCrossAppRedirects
  nameWithType: FormsAuthentication.EnableCrossAppRedirects
- uid: System.Web.Security.FormsAuthentication.EnableFormsAuthentication*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: EnableFormsAuthentication
  nameWithType: FormsAuthentication.EnableFormsAuthentication
- uid: System.Web.Security.FormsAuthentication.Encrypt*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Encrypt
  nameWithType: FormsAuthentication.Encrypt
- uid: System.Web.Security.FormsAuthentication.FormsCookieName*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsCookieName
  nameWithType: FormsAuthentication.FormsCookieName
- uid: System.Web.Security.FormsAuthentication.FormsCookiePath*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: FormsCookiePath
  nameWithType: FormsAuthentication.FormsCookiePath
- uid: System.Web.Security.FormsAuthentication.GetAuthCookie*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: GetAuthCookie
  nameWithType: FormsAuthentication.GetAuthCookie
- uid: System.Web.Security.FormsAuthentication.GetRedirectUrl*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: GetRedirectUrl
  nameWithType: FormsAuthentication.GetRedirectUrl
- uid: System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: HashPasswordForStoringInConfigFile
  nameWithType: FormsAuthentication.HashPasswordForStoringInConfigFile
- uid: System.Web.Security.FormsAuthentication.Initialize*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Initialize
  nameWithType: FormsAuthentication.Initialize
- uid: System.Web.Security.FormsAuthentication.IsEnabled*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: IsEnabled
  nameWithType: FormsAuthentication.IsEnabled
- uid: System.Web.Security.FormsAuthentication.LoginUrl*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: LoginUrl
  nameWithType: FormsAuthentication.LoginUrl
- uid: System.Web.Security.FormsAuthentication.RedirectFromLoginPage*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectFromLoginPage
  nameWithType: FormsAuthentication.RedirectFromLoginPage
- uid: System.Web.Security.FormsAuthentication.RedirectToLoginPage*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RedirectToLoginPage
  nameWithType: FormsAuthentication.RedirectToLoginPage
- uid: System.Web.Security.FormsAuthentication.RenewTicketIfOld*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RenewTicketIfOld
  nameWithType: FormsAuthentication.RenewTicketIfOld
- uid: System.Web.Security.FormsAuthentication.RequireSSL*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: RequireSSL
  nameWithType: FormsAuthentication.RequireSSL
- uid: System.Web.Security.FormsAuthentication.SetAuthCookie*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SetAuthCookie
  nameWithType: FormsAuthentication.SetAuthCookie
- uid: System.Web.Security.FormsAuthentication.SignOut*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SignOut
  nameWithType: FormsAuthentication.SignOut
- uid: System.Web.Security.FormsAuthentication.SlidingExpiration*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: SlidingExpiration
  nameWithType: FormsAuthentication.SlidingExpiration
- uid: System.Web.Security.FormsAuthentication.TicketCompatibilityMode*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: TicketCompatibilityMode
  nameWithType: FormsAuthentication.TicketCompatibilityMode
- uid: System.Web.Security.FormsAuthentication.Timeout*
  parent: System.Web.Security.FormsAuthentication
  isExternal: false
  name: Timeout
  nameWithType: FormsAuthentication.Timeout
