### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.DataContext
  id: DataContext
  children:
  - System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)
  - System.Data.Linq.DataContext.#ctor(System.String)
  - System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)
  - System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)
  - System.Data.Linq.DataContext.ChangeConflicts
  - System.Data.Linq.DataContext.CommandTimeout
  - System.Data.Linq.DataContext.Connection
  - System.Data.Linq.DataContext.CreateDatabase
  - System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  - System.Data.Linq.DataContext.DatabaseExists
  - System.Data.Linq.DataContext.DeferredLoadingEnabled
  - System.Data.Linq.DataContext.DeleteDatabase
  - System.Data.Linq.DataContext.Dispose
  - System.Data.Linq.DataContext.Dispose(System.Boolean)
  - System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])
  - System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)
  - System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)
  - System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)
  - System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  - System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])
  - System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  - System.Data.Linq.DataContext.GetChangeSet
  - System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)
  - System.Data.Linq.DataContext.GetTable(System.Type)
  - System.Data.Linq.DataContext.GetTable``1
  - System.Data.Linq.DataContext.LoadOptions
  - System.Data.Linq.DataContext.Log
  - System.Data.Linq.DataContext.Mapping
  - System.Data.Linq.DataContext.ObjectTrackingEnabled
  - System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  - System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)
  - System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])
  - System.Data.Linq.DataContext.SubmitChanges
  - System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)
  - System.Data.Linq.DataContext.Transaction
  - System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)
  - System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)
  - System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)
  langs:
  - csharp
  name: DataContext
  nameWithType: DataContext
  fullName: System.Data.Linq.DataContext
  type: Class
  summary: "メイン エントリ ポイントを表す、[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]フレームワークです。"
  remarks: "DataContext は、データベース接続にマップされ、すべてのエンティティのソースです。 取得したすべてのエンティティに対して行った変更を追跡し、「id キャッシュ」で表されるエンティティが&1; つ以上の時間を取得することの保証を維持、同じオブジェクト インスタンスを使用します。       一般に、DataContext インスタンスは、アプリケーションがその用語を定義するただし「の作業単位」1 つの最後に設計されています。 DataContext は、軽量を作成するコストではありません。 一般的な[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]メソッドのスコープで、または論理一連の関連するデータベース操作を表す有効期間が短いクラスのメンバーとして、アプリケーションが DataContext インスタンスを作成します。"
  syntax:
    content: 'public class DataContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)
  id: '#ctor(System.Data.IDbConnection)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(IDbConnection)
  nameWithType: DataContext.DataContext(IDbConnection)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>クラスによって使用される接続を参照することによって、[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]です。"
  remarks: "A<xref:System.Data.Linq.DataContext>閉じた接続または接続文字列を指定する場合、必要に応じて、データベース接続の開閉</xref:System.Data.Linq.DataContext>。 一般に、することはありませんを呼び出す`Dispose` <xref:System.Data.Linq.DataContext></xref:System.Data.Linq.DataContext> 。 <xref:System.Data.Linq.DataContext>それが閉じない</xref:System.Data.Linq.DataContext>、開いている接続を提供する場合 そのため、インスタンス化しないで、<xref:System.Data.Linq.DataContext>開いている接続を使用してこれを行う妥当な理由がない</xref:System.Data.Linq.DataContext>。 <xref:System.Transactions>、トランザクション、<xref:System.Data.Linq.DataContext>開くまたは昇格を避けるために、接続を閉じるされません</xref:System.Data.Linq.DataContext></xref:System.Transactions>。"
  syntax:
    content: public DataContext (System.Data.IDbConnection connection);
    parameters:
    - id: connection
      type: System.Data.IDbConnection
      description: "使用する接続、[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]です。"
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(String)
  nameWithType: DataContext.DataContext(String)
  fullName: System.Data.Linq.DataContext.DataContext(String)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>ファイル ソースを参照することでクラスです。"
  syntax:
    content: public DataContext (string fileOrServerOrConnection);
    parameters:
    - id: fileOrServerOrConnection
      type: System.String
      description: "この引数は、次のいずれかを指定できます。 SQL Server Express のデータベースが存在するファイルの名前。       データベースが存在するサーバーの名前。 ここでは、プロバイダーは、ユーザーの既定のデータベースを使用します。       完全な接続文字列。 [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]だけを変更しなくても、プロバイダー文字列を渡します。"
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)
  id: '#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(IDbConnection,MappingSource)
  nameWithType: DataContext.DataContext(IDbConnection,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection,MappingSource)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>クラスの接続とマッピング ソースを参照します。"
  syntax:
    content: public DataContext (System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mapping);
    parameters:
    - id: connection
      type: System.Data.IDbConnection
      description: ".NET Framework で使用される接続です。"
    - id: mapping
      type: System.Data.Linq.Mapping.MappingSource
      description: "マッピングのソースです。"
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)
  id: '#ctor(System.String,System.Data.Linq.Mapping.MappingSource)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(String,MappingSource)
  nameWithType: DataContext.DataContext(String,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(String,MappingSource)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>クラス ファイルのソースとマッピング ソースを参照します。"
  syntax:
    content: public DataContext (string fileOrServerOrConnection, System.Data.Linq.Mapping.MappingSource mapping);
    parameters:
    - id: fileOrServerOrConnection
      type: System.String
      description: "この引数は、次のいずれかを指定できます。 SQL Server Express のデータベースが存在するファイルの名前。       データベースが存在するサーバーの名前。 ここでは、プロバイダーは、ユーザーの既定のデータベースを使用します。       完全な接続文字列。 [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]だけを変更しなくても、プロバイダー文字列を渡します。"
    - id: mapping
      type: System.Data.Linq.Mapping.MappingSource
      description: "マッピングのソースです。"
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ChangeConflicts
  id: ChangeConflicts
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ChangeConflicts
  nameWithType: DataContext.ChangeConflicts
  fullName: System.Data.Linq.DataContext.ChangeConflicts
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "同時実行の競合の原因となったオブジェクトのコレクションを取得するときに<xref:System.Data.Linq.DataContext.SubmitChanges*>が呼び出されました</xref:System.Data.Linq.DataContext.SubmitChanges*>。"
  remarks: "次の例では、どのコレクション反復処理できる競合情報を取得するを示します。"
  example:
  - >-
    [!code-cs[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/csharp/objconflict/program.cs#1)]
     [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/visualbasic/objconflict/module1.vb#1)]
  syntax:
    content: public System.Data.Linq.ChangeConflictCollection ChangeConflicts { get; }
    return:
      type: System.Data.Linq.ChangeConflictCollection
      description: "同時実行の競合の原因となったオブジェクトのコレクション。"
  overload: System.Data.Linq.DataContext.ChangeConflicts*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.CommandTimeout
  id: CommandTimeout
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: CommandTimeout
  nameWithType: DataContext.CommandTimeout
  fullName: System.Data.Linq.DataContext.CommandTimeout
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "取得またはそれ以外の場合のタイムアウトを既定のタイムアウト期間中に、クエリのタイムアウト時間が増加する値を設定します。"
  remarks: "このプロパティを取得または生成されたコマンドを実行するために使用するコマンドのタイムアウトを設定 (`IDbCommands`)。 詳細については、 <xref:System.Data.IDbCommand.CommandTimeout%2A>。</xref:System.Data.IDbCommand.CommandTimeout%2A>を参照してください。       ときにこのプロパティが設定されていない、既定値の<xref:System.Data.IDbCommand.CommandTimeout%2A>クエリ コマンドの実行に使用します</xref:System.Data.IDbCommand.CommandTimeout%2A>。 この既定値は、記憶域プロバイダーによって設定されます。 この値は&0; 以外の値に設定されている場合に、一部のプロバイダーが例外をスロー可能性がありますに注意してください。"
  syntax:
    content: public int CommandTimeout { get; set; }
    return:
      type: System.Int32
      description: "それ以外の場合のタイムアウトを既定のタイムアウト期間中に、クエリのタイムアウト時間を増加する整数値。"
  overload: System.Data.Linq.DataContext.CommandTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Connection
  id: Connection
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Connection
  nameWithType: DataContext.Connection
  fullName: System.Data.Linq.DataContext.Connection
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "フレームワークで使用する接続を取得します。"
  remarks: "このプロパティを使用すると、リレーショナル ADO.NET コードと相互運用。       ユーザーによって明示的に開いている場合を除き、返される接続は切断されます。"
  syntax:
    content: public System.Data.Common.DbConnection Connection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "フレームワークによって使用される接続。"
  overload: System.Data.Linq.DataContext.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.CreateDatabase
  id: CreateDatabase
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: CreateDatabase()
  nameWithType: DataContext.CreateDatabase()
  fullName: System.Data.Linq.DataContext.CreateDatabase()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "サーバー上のデータベースを作成します。"
  remarks: "次のアルゴリズムを使用して、データベースの名前は派生:-識別される場合は、データベース接続文字列で、その名前を使用します。      場合、<xref:System.Data.Linq.Mapping.DatabaseAttribute>属性が含まれているその<xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A>プロパティは、データベースの名前として使用します</xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A></xref:System.Data.Linq.Mapping.DatabaseAttribute>。      -接続文字列と厳密に型指定されたデータベースのタグが存在しない場合<xref:System.Data.Linq.DataContext>を使用すると同じ名前を持つデータベース、<xref:System.Data.Linq.DataContext>クラスを継承することが確認されます</xref:System.Data.Linq.DataContext></xref:System.Data.Linq.DataContext>。      場合は、弱い型指定された<xref:System.Data.Linq.DataContext>はこれを使用すると、例外がスローされます</xref:System.Data.Linq.DataContext>。      場合、<xref:System.Data.Linq.DataContext>が作成されたファイル名を使用すると、そのファイル名に対応するデータベースを作成します</xref:System.Data.Linq.DataContext>。"
  example:
  - "The following code shows how to set up a temporary database and then remove it.  \n  \n [!code-vb[System.Data.Linq.DataContext#1](~/add/codesnippet/visualbasic/DataContext/Module1.vb#1)]\n [!code-cs[System.Data.Linq.DataContext#1](~/add/codesnippet/csharp/DataContext/Program.cs#1)]"
  syntax:
    content: public void CreateDatabase ();
    parameters: []
  overload: System.Data.Linq.DataContext.CreateDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  id: CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: CreateMethodCallQuery(Object,MethodInfo,Object[])
  nameWithType: DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: protected System.Linq.IQueryable<TResult> CreateMethodCallQuery<TResult> (object instance, System.Reflection.MethodInfo methodInfo, object[] parameters);
    parameters:
    - id: instance
      type: System.Object
      description: "追加します。"
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "追加します。"
    - id: parameters
      type: System.Object[]
      description: "追加します。"
    return:
      type: System.Linq.IQueryable{TResult}
      description: "追加します。"
  overload: System.Data.Linq.DataContext.CreateMethodCallQuery<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.DatabaseExists
  id: DatabaseExists
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DatabaseExists()
  nameWithType: DataContext.DatabaseExists()
  fullName: System.Data.Linq.DataContext.DatabaseExists()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "関連付けられたデータベースを開くことがあるかどうかを判断します。"
  remarks: "このメソッドはで接続を使用して、<xref:System.Data.Linq.DataContext.Connection%2A>プロパティを開くには、関連付けられたデータベースを試みます</xref:System.Data.Linq.DataContext.Connection%2A>。"
  example:
  - "The following example uses this method to determine whether a database already exists.  \n  \n [!code-vb[System.Data.Linq.DataContext#1](~/add/codesnippet/visualbasic/DataContext/Module1.vb#1)]\n [!code-cs[System.Data.Linq.DataContext#1](~/add/codesnippet/csharp/DataContext/Program.cs#1)]"
  syntax:
    content: public bool DatabaseExists ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定されたデータベースが起動できる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Linq.DataContext.DatabaseExists*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.DeferredLoadingEnabled
  id: DeferredLoadingEnabled
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DeferredLoadingEnabled
  nameWithType: DataContext.DeferredLoadingEnabled
  fullName: System.Data.Linq.DataContext.DeferredLoadingEnabled
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "取得または一対多または一対一のリレーションシップの遅延読み込みするかどうかを示す値を設定します。"
  remarks: "リレーションシップが一対一、一対多である場合、空のコレクションが返された場合、コードからのアクセスをする null これらのリレーションシップのいずれかが返されます。 設定して、リレーションシップを格納することができますも、<xref:System.Data.Linq.DataContext.LoadOptions%2A>プロパティ</xref:System.Data.Linq.DataContext.LoadOptions%2A>。       このプロパティの主なシナリオを使用すると、オブジェクト モデルの一部を抽出し、(たとえば、Web サービス) に送信を開始します。      > [!NOTE] > このプロパティが設定されている場合`false`クエリの実行後に、例外をスローします。 参照してください、**有効なモード**詳細については、後述の「します。      ## 遅延読み込みの有効なモードでは、オブジェクトの追跡が必要です。 のみ次の&3; つのモードが有効:- <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A>= `false`</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> 。 DeferredLoadingEnabled は無視され、推論されます`false`です。 この動作は、読み取り専用<xref:System.Data.Linq.DataContext>。</xref:System.Data.Linq.DataContext>に対応しています      -   <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `true`.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> DeferredLoadingEnabled =`false`です。 このような状況に対応する、<xref:System.Data.Linq.DataContext>ユーザーを使用して、オブジェクト グラフを読み込むことができます<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>ディレクティブは、それが遅延読み込みを有効にしません</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A></xref:System.Data.Linq.DataContext>。      どちら設定されている`true`です。 これは、既定値です。       クエリの実行後、フラグは変更できません。 使用する最初のクエリの実行後に変更<xref:System.Data.Linq.DataContext>例外をスローします</xref:System.Data.Linq.DataContext>。"
  syntax:
    content: public bool DeferredLoadingEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>遅延読み込みが有効である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Linq.DataContext.DeferredLoadingEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.DeleteDatabase
  id: DeleteDatabase
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DeleteDatabase()
  nameWithType: DataContext.DeleteDatabase()
  fullName: System.Data.Linq.DataContext.DeleteDatabase()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "関連付けられたデータベースを削除します。"
  remarks: "このメソッドはで接続を使用して、<xref:System.Data.Linq.DataContext.Connection%2A>プロパティを削除するデータベースを識別します</xref:System.Data.Linq.DataContext.Connection%2A>。"
  example:
  - "The following example shows how to delete a database that has been temporarily created.  \n  \n [!code-vb[System.Data.Linq.DataContext#1](~/add/codesnippet/visualbasic/DataContext/Module1.vb#1)]\n [!code-cs[System.Data.Linq.DataContext#1](~/add/codesnippet/csharp/DataContext/Program.cs#1)]"
  syntax:
    content: public void DeleteDatabase ();
    parameters: []
  overload: System.Data.Linq.DataContext.DeleteDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Dispose
  id: Dispose
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: DataContext.Dispose()
  fullName: System.Data.Linq.DataContext.Dispose()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "現在のインスタンスによって使用されるすべてのリソースを解放、 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>クラスです。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Data.Linq.DataContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DataContext.Dispose(Boolean)
  fullName: System.Data.Linq.DataContext.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>クラスし、オプションでマネージ リソースも解放します。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Data.Linq.DataContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])
  id: ExecuteCommand(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteCommand(String,Object[])
  nameWithType: DataContext.ExecuteCommand(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteCommand(String,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "データベース上で直接 SQL コマンドを実行します。"
  remarks: "This method is a pass-through mechanism for cases where [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] does not adequately provide for a particular scenario.  \n  \n The syntax for the command is almost the same as the syntax used to create an ADO.NET `DataCommand`. The only difference is in how the parameters are specified. Specifically, you specify parameters by enclosing them in braces ({…}) and enumerate them starting from 0. The parameter is associated with the equally numbered object in the parameters array.  \n  \n `ExecuteQuery` and `ExecuteCommand` allow you to specify a variable number of arguments for parameter substitution. For example, you can specify the parameters when invoking ExecuteQuery\\<TResult>:  \n  \n```  \ndb.ExecuteQuery<Customer>(\"select * from dbo.Customers where City = {0}\", \"London\");  \n```  \n  \n And, another example:  \n  \n```  \ndb.ExecuteCommand(\"UPDATE Products SET QuantityPerUnit = {0} WHERE ProductID = {1}\", \"24 boxes\", 5);  \n```  \n  \n The following example opens a connection and passes a SQL `UPDATE` command to the SQL engine."
  example:
  - >-
    [!code-cs[DLinqCommunicatingWithDatabase#3](~/add/codesnippet/csharp/CommWithDatabase/Program.cs#3)]
     [!code-vb[DLinqCommunicatingWithDatabase#3](~/add/codesnippet/visualbasic/CommWithDatabase/Module1.vb#3)]
  syntax:
    content: public int ExecuteCommand (string command, object[] parameters);
    parameters:
    - id: command
      type: System.String
      description: "実行する SQL コマンド。"
    - id: parameters
      type: System.Object[]
      description: "コマンドに渡されるパラメーターの配列。 次の動作に注意してください: 配列内のオブジェクトの数が、コマンド文字列で識別される最大数より小さい場合は、例外がスローされます。       配列にコマンド文字列で参照されていないオブジェクトが含まれている場合、例外はスローされません。       パラメーターのいずれかが null の場合、これに変換されます。 <xref uid=&quot;langword_csharp_DBNull.Value&quot; name=&quot;DBNull.Value&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Int32
      description: "コマンドの実行によって変更された行の数。"
  overload: System.Data.Linq.DataContext.ExecuteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)
  id: ExecuteDynamicDelete(System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteDynamicDelete(Object)
  nameWithType: DataContext.ExecuteDynamicDelete(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicDelete(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "代行させるために、削除のオーバーライド メソッド内で、実行[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]の生成と動的な SQL を実行するタスクが操作を削除します。"
  remarks: "<xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>。</xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>を参照してください。"
  syntax:
    content: protected void ExecuteDynamicDelete (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "削除するエンティティ。"
  overload: System.Data.Linq.DataContext.ExecuteDynamicDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)
  id: ExecuteDynamicInsert(System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteDynamicInsert(Object)
  nameWithType: DataContext.ExecuteDynamicInsert(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicInsert(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "代行させるために、挿入のオーバーライド メソッド内で、実行[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]の生成と動的な SQL を実行するタスクが操作を挿入します。"
  remarks: "次の考慮事項に注意してください:-ため protected 修飾子をメソッドには、その使用が必要に<xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext>をサブクラス化      にこの操作が内部呼び出されない場合、例外がスローされます、<xref:System.Data.Linq.DataContext.SubmitChanges%2A>操作</xref:System.Data.Linq.DataContext.SubmitChanges%2A>。 スコープ外のスタンドアロン操作として呼び出されるものではありません、<xref:System.Data.Linq.DataContext.SubmitChanges%2A>操作</xref:System.Data.Linq.DataContext.SubmitChanges%2A>。 <xref:System.Data.Linq.DataContext.SubmitChanges%2A>自体の呼び出しのメソッドをオーバーライド実装されると、前述の方法は、オーバーライド メソッド内で呼び出すことです。</xref:System.Data.Linq.DataContext.SubmitChanges%2A>      -これは、正しいエンティティに渡す開発者の責任です。 実装では、渡されたエンティティを追跡することを確認します。 ただし、順序を維持または&2; 回、同じエンティティに渡す、開発者の責任であります。      -これは、正しい動的 API を呼び出す開発者の責任です。 などで、`Update`のみメソッドをオーバーライドして、<xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A>メソッドを呼び出すことができます</xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A>。 [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]検出されず、呼び出した動的メソッドが適用される操作と一致するかどうかを確認してください。 適切でないメソッドが呼び出された場合、結果は定義されて (たとえば、呼び出し<xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A>オブジェクトを更新するため).</xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A>"
  syntax:
    content: protected void ExecuteDynamicInsert (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "挿入するエンティティ。"
  overload: System.Data.Linq.DataContext.ExecuteDynamicInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)
  id: ExecuteDynamicUpdate(System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteDynamicUpdate(Object)
  nameWithType: DataContext.ExecuteDynamicUpdate(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicUpdate(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "代行させるために、更新プログラムのオーバーライド メソッド内で、実行[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]タスクの生成と更新操作のための動的 SQL を実行します。"
  remarks: "<xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>。</xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>を参照してください。"
  syntax:
    content: protected void ExecuteDynamicUpdate (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "更新するエンティティ。"
  overload: System.Data.Linq.DataContext.ExecuteDynamicUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  id: ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteMethodCall(Object,MethodInfo,Object[])
  nameWithType: DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "格納されているデータベースのプロシージャまたは指定された CLR メソッドに関連付けられているスカラー関数を実行します。"
  remarks: "ExecuteMethodCall メソッドは、自動的に生成されたコードでは使用し、データベース関数をプロキシとして機能します。"
  syntax:
    content: protected System.Data.Linq.IExecuteResult ExecuteMethodCall (object instance, System.Reflection.MethodInfo methodInfo, object[] parameters);
    parameters:
    - id: instance
      type: System.Object
      description: "メソッドの呼び出し (現在のオブジェクト) のインスタンス。"
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "データベースのメソッドに対応する CLR メソッドを識別します。"
    - id: parameters
      type: System.Object[]
      description: "コマンドに渡されるパラメーターの配列。"
    return:
      type: System.Data.Linq.IExecuteResult
      description: "指定したメソッドの実行結果 (戻り値と出力パラメーター)。"
  overload: System.Data.Linq.DataContext.ExecuteMethodCall*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])
  id: ExecuteQuery(System.Type,System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteQuery(Type,String,Object[])
  nameWithType: DataContext.ExecuteQuery(Type,String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(Type,String,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "データベース上で直接には、SQL クエリを実行します。"
  syntax:
    content: public System.Collections.IEnumerable ExecuteQuery (Type elementType, string query, object[] parameters);
    parameters:
    - id: elementType
      type: System.Type
      description: "型、 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;を指定します。       フィールドに、クエリの結果内の列オブジェクトのプロパティと照合するためのアルゴリズムは次のように動作します。 フィールドまたはプロパティは、特定の列名にマップされて、結果セットのその列名は正常な動作です。       フィールドまたはプロパティがマップされていない場合、結果セットのフィールドまたはプロパティと同じ名前の列が必要です。       最初の大文字と小文字を検索して比較されます。 この一致が見つからない場合は、大文字と小文字の以降の検索が発生します。       クエリは、すべての追跡対象のフィールドと (除く遅延ごとに読み込まれる) オブジェクトのプロパティを返す必要があります、次の条件が当てはまる場合:`T`エンティティに明示的にでは、追跡、 <xref href=&quot;System.Data.Linq.DataContext&quot;></xref>です。       <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>       エンティティは、主キーを持ちます。       それ以外の場合、例外がスローされます。"
    - id: query
      type: System.String
      description: "実行する SQL クエリ。"
    - id: parameters
      type: System.Object[]
      description: "コマンドに渡されるパラメーターの配列。 次の動作に注意してください: 配列内のオブジェクトの数が、コマンド文字列で識別される最大数より小さい場合は、例外がスローされます。       配列にコマンド文字列で参照されていないオブジェクトが含まれている場合、例外はスローされません。       パラメーターが場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>に変換されます<xref uid=&quot;langword_csharp_DBNull.Value&quot; name=&quot;DBNull.Value&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Collections.IEnumerable
      description: "&lt;Xref:System.Collections.Generic.IEnumerable%601&gt;クエリによって返されるオブジェクトのコレクション。"
  overload: System.Data.Linq.DataContext.ExecuteQuery*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  id: ExecuteQuery``1(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteQuery(String,Object[])
  nameWithType: DataContext.ExecuteQuery(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(String,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public System.Collections.Generic.IEnumerable<TResult> ExecuteQuery<TResult> (string query, object[] parameters);
    parameters:
    - id: query
      type: System.String
      description: "追加します。"
    - id: parameters
      type: System.Object[]
      description: "追加します。"
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: "追加します。"
  overload: System.Data.Linq.DataContext.ExecuteQuery<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetChangeSet
  id: GetChangeSet
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetChangeSet()
  nameWithType: DataContext.GetChangeSet()
  fullName: System.Data.Linq.DataContext.GetChangeSet()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "によって追跡される変更済みオブジェクトを取得<xref href=&quot;System.Data.Linq.DataContext&quot;></xref>です。"
  remarks: "次の考慮事項に注意してください:-GetChangeSet が挿入の推論など、副作用がある操作と削除<xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>の時点で通常実行されます。 たとえば、次の操作で使用されるオブジェクトは、次の一覧の対応する、推論される操作を作成できます:- <xref:System.Data.Linq.EntitySet%601.Add%2A> <xref:System.Data.Linq.Table%601.InsertOnSubmit%2A></xref:System.Data.Linq.Table%601.InsertOnSubmit%2A> </xref:System.Data.Linq.EntitySet%601.Add%2A> 。          - <xref:System.Data.Linq.EntityRef%601>null への代入 (<xref:System.Data.Linq.EntitySet%601.Remove%2A><xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A></xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A></xref:System.Data.Linq.EntitySet%601.Remove%2A>ため可能性のある</xref:System.Data.Linq.EntityRef%601>。      外部キー制約に従って-セットを順序付けされない可能性があります。      -データベースによって生成された値 (たとえば、主キーと外部キーの値、タイムスタンプ、およびなど) は使用できません。 このような情報は、データベース コマンドを実行し、取得した情報 (たとえば、主キーから外部キー) が反映が必要です。      -変更されたオブジェクトのセットは、呼び出し時に計算されます。 後続の呼び出し<xref:System.Data.Linq.DataContext.SubmitChanges%2A>追加の変更が加えられた場合、別のセットを生成できます</xref:System.Data.Linq.DataContext.SubmitChanges%2A>。       変更が行われていません時の出力は次のとおりです。`{Added: 0, Removed: 0, Modified: 0}`"
  example:
  - >-
    [!code-vb[DLinqDebuggingSupport#2](~/add/codesnippet/visualbasic/debuggingsupport/Module1.vb#2)]
     [!code-cs[DLinqDebuggingSupport#2](~/add/codesnippet/csharp/debuggingsupport/Program.cs#2)]
  syntax:
    content: public System.Data.Linq.ChangeSet GetChangeSet ();
    parameters: []
    return:
      type: System.Data.Linq.ChangeSet
      description: "オブジェクトのセットは、次の&3; つの読み取り専用のコレクションとして返されます。"
  overload: System.Data.Linq.DataContext.GetChangeSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)
  id: GetCommand(System.Linq.IQueryable)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetCommand(IQueryable)
  nameWithType: DataContext.GetCommand(IQueryable)
  fullName: System.Data.Linq.DataContext.GetCommand(IQueryable)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "によって生成された SQL コマンドに関する情報を取得[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]です。"
  remarks: "このメソッドは値の取得のみであり、影響を与えません<xref:System.Data.Linq.DataContext>状態</xref:System.Data.Linq.DataContext>。       次の考慮事項に注意してください:-引数が null にする必要があります。 それ以外の場合、null の引数の例外がスローされます。      -通常のクエリ変換の例外が中にスローされた[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]変換できないクエリのクエリの実行を適用します。      に最初のクエリ コマンドのみが返されます。 一括読み込みに使用されるその他のコマンド具体的には、(<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>) は含まれません</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>。      -<xref:System.Data.Linq.DataContext>コマンドを使用して、ユーザーが何を追跡しません</xref:System.Data.Linq.DataContext>。 たとえば返されたコマンドの実行から結果は追跡されませんには影響しません<xref:System.Data.Linq.DataContext>状態</xref:System.Data.Linq.DataContext>。"
  example:
  - >-
    [!code-vb[DLinqDebuggingSupport#3](~/add/codesnippet/visualbasic/debuggingsupport/Module1.vb#3)]
     [!code-cs[DLinqDebuggingSupport#3](~/add/codesnippet/csharp/debuggingsupport/Program.cs#3)]
  syntax:
    content: public System.Data.Common.DbCommand GetCommand (System.Linq.IQueryable query);
    parameters:
    - id: query
      type: System.Linq.IQueryable
      description: "SQL コマンドの情報を取得するクエリ。"
    return:
      type: System.Data.Common.DbCommand
      description: "要求されたコマンドについてのオブジェクト。"
  overload: System.Data.Linq.DataContext.GetCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetTable(System.Type)
  id: GetTable(System.Type)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetTable(Type)
  nameWithType: DataContext.GetTable(Type)
  fullName: System.Data.Linq.DataContext.GetTable(Type)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "型が定義されている、特定の種類のオブジェクトのコレクションを返します、 <code> type </code>のパラメーターです。"
  remarks: "これは<xref:System.Data.Linq.DataContext.GetTable%2A>.</xref:System.Data.Linq.DataContext.GetTable%2A>の弱く型指定されたバージョンです。 クエリを動的に構築するために比較的一般的になっているために、弱く型指定されたバージョンを理解しておくことはできます。 リフレクションを使用して、正しいジェネリック メソッドを呼び出すを強制すると便利なできなくなります。       特定の型のコレクションがない場合、例外がスローされます。"
  syntax:
    content: public System.Data.Linq.ITable GetTable (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "返されるオブジェクトの型。"
    return:
      type: System.Data.Linq.ITable
      description: "定義されているオブジェクトのコレクション、 <code> type </code>パラメーター。"
  overload: System.Data.Linq.DataContext.GetTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetTable``1
  id: GetTable``1
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetTable()
  nameWithType: DataContext.GetTable()
  fullName: System.Data.Linq.DataContext.GetTable()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: 'public System.Data.Linq.Table<TEntity> GetTable<TEntity> () where TEntity : class;'
    parameters: []
    return:
      type: System.Data.Linq.Table`1
      description: "追加します。"
  overload: System.Data.Linq.DataContext.GetTable<TEntity>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.LoadOptions
  id: LoadOptions
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: LoadOptions
  nameWithType: DataContext.LoadOptions
  fullName: System.Data.Linq.DataContext.LoadOptions
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "取得または設定、 <xref href=&quot;System.Data.Linq.DataLoadOptions&quot;> </xref>これに関連付けられている<xref href=&quot;System.Data.Linq.DataContext&quot;></xref>です。"
  remarks: "このプロパティを取得または遅延読み込みされるメンバーと関連コレクションのメンバーシップのプリフェッチの動作を定義するために使用するオプションを設定します。"
  syntax:
    content: public System.Data.Linq.DataLoadOptions LoadOptions { get; set; }
    return:
      type: System.Data.Linq.DataLoadOptions
      description: "プリフェッチは、関連するデータのオプションを読み込みます。"
  overload: System.Data.Linq.DataContext.LoadOptions*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Log
  id: Log
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Log
  nameWithType: DataContext.Log
  fullName: System.Data.Linq.DataContext.Log
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "取得または SQL クエリまたはコマンドを書き込む宛先を設定します。"
  remarks: "このプロパティを設定`null`コマンドのログ記録を無効にします。"
  example:
  - "The following example displays generated SQL in the console window before it displays the results of the query.  \n  \n [!code-vb[System.Data.Linq.DataContext#2](~/add/codesnippet/visualbasic/DataContext/Module1.vb#2)]\n [!code-cs[System.Data.Linq.DataContext#2](~/add/codesnippet/csharp/DataContext/Program.cs#2)]"
  syntax:
    content: public System.IO.TextWriter Log { get; set; }
    return:
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextReader>コマンドの記述に使用する</xref:System.IO.TextReader>。"
  overload: System.Data.Linq.DataContext.Log*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Mapping
  id: Mapping
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Mapping
  nameWithType: DataContext.Mapping
  fullName: System.Data.Linq.DataContext.Mapping
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "取得、 <xref href=&quot;System.Data.Linq.Mapping.MetaModel&quot;> </xref>にマッピングが基づいています。"
  syntax:
    content: public System.Data.Linq.Mapping.MetaModel Mapping { get; }
    return:
      type: System.Data.Linq.Mapping.MetaModel
      description: "データベースとドメインのオブジェクト間のマッピング。"
  overload: System.Data.Linq.DataContext.Mapping*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ObjectTrackingEnabled
  id: ObjectTrackingEnabled
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ObjectTrackingEnabled
  nameWithType: DataContext.ObjectTrackingEnabled
  fullName: System.Data.Linq.DataContext.ObjectTrackingEnabled
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "取得またはオブジェクト トラッキングが有効になっているかどうかを示す値を設定します。"
  remarks: "このプロパティを設定`false`追跡するために以下の項目があるため、取得時にパフォーマンスが向上します。       例外がスローされます: プロパティ設定されている場合 -`false`クエリが実行された後です。           詳細については、 <xref:System.Data.Linq.DataContext>。</xref:System.Data.Linq.DataContext>有効なモード」を参照してください。      場合は、プロパティに設定`false`と<xref:System.Data.Linq.DataContext.SubmitChanges%2A>と呼びます</xref:System.Data.Linq.DataContext.SubmitChanges%2A>。       ObjectTrackingEnabled 場合`false`、<xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>は無視され、として扱われます`false`</xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>。 ここで、<xref:System.Data.Linq.DataContext>は読み取り専用です</xref:System.Data.Linq.DataContext>。       ObjectTrackingEnabled 場合`true`、<xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>は`false`</xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>。 この場合、<xref:System.Data.Linq.DataContext>を使用して、オブジェクト グラフを読み込むことができます<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>ディレクティブは、遅延読み込みが有効にしません</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A></xref:System.Data.Linq.DataContext>。"
  syntax:
    content: public bool ObjectTrackingEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>オブジェクト トラッキングが有効である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Linq.DataContext.ObjectTrackingEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  id: Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Refresh(RefreshMode,IEnumerable)
  nameWithType: DataContext.Refresh(RefreshMode,IEnumerable)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,IEnumerable)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "指定されたモードに従ってエンティティ オブジェクトのコレクションを更新します。"
  syntax:
    content: public void Refresh (System.Data.Linq.RefreshMode mode, System.Collections.IEnumerable entities);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "同時実行の競合をオプティミスティックの方法を指定する値が処理されます。"
    - id: entities
      type: System.Collections.IEnumerable
      description: "更新するエンティティのコレクション。"
  overload: System.Data.Linq.DataContext.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)
  id: Refresh(System.Data.Linq.RefreshMode,System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Refresh(RefreshMode,Object)
  nameWithType: DataContext.Refresh(RefreshMode,Object)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "指定されたモードに従ってエンティティ オブジェクトを更新します。"
  syntax:
    content: public void Refresh (System.Data.Linq.RefreshMode mode, object entity);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "同時実行の競合をオプティミスティックの方法を指定する値が処理されます。"
    - id: entity
      type: System.Object
      description: "更新するオブジェクト。"
  overload: System.Data.Linq.DataContext.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])
  id: Refresh(System.Data.Linq.RefreshMode,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Refresh(RefreshMode,Object[])
  nameWithType: DataContext.Refresh(RefreshMode,Object[])
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "指定されたモードに従ってエンティティ オブジェクトの配列を更新します。"
  syntax:
    content: public void Refresh (System.Data.Linq.RefreshMode mode, object[] entities);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "同時実行の競合をオプティミスティックの方法を指定する値が処理されます。"
    - id: entities
      type: System.Object[]
      description: "更新するエンティティ オブジェクトの配列。"
  overload: System.Data.Linq.DataContext.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.SubmitChanges
  id: SubmitChanges
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: SubmitChanges()
  nameWithType: DataContext.SubmitChanges()
  fullName: System.Data.Linq.DataContext.SubmitChanges()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "挿入、更新、または削除すると、変更されたオブジェクトのセットを計算し、データベースへの変更を実装する適切なコマンドを実行します。"
  remarks: "オーバーライド メソッドが insert、update、または削除、存在する場合<xref:System.Data.Linq.DataContext.SubmitChanges%2A>、既定ではなくこれらのメソッドを実行[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]コマンド</xref:System.Data.Linq.DataContext.SubmitChanges%2A>。"
  syntax:
    content: public void SubmitChanges ();
    parameters: []
  overload: System.Data.Linq.DataContext.SubmitChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)
  id: SubmitChanges(System.Data.Linq.ConflictMode)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: SubmitChanges(ConflictMode)
  nameWithType: DataContext.SubmitChanges(ConflictMode)
  fullName: System.Data.Linq.DataContext.SubmitChanges(ConflictMode)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "加えられた変更が、基になるデータベースにオブジェクトを取得し、送信が失敗した場合に実行されるアクションを指定を送信します。"
  remarks: "既定のエラー モードは<xref:System.Data.Linq.ConflictMode>.</xref:System.Data.Linq.ConflictMode>"
  example:
  - >-
    [!code-cs[System.Data.Linq.ConflictModeEnumeration#1](~/add/codesnippet/csharp/cmodesnip/program.cs#1)]
     [!code-vb[System.Data.Linq.ConflictModeEnumeration#1](~/add/codesnippet/visualbasic/snipdump/module1.vb#1)]
  syntax:
    content: public virtual void SubmitChanges (System.Data.Linq.ConflictMode failureMode);
    parameters:
    - id: failureMode
      type: System.Data.Linq.ConflictMode
      description: "送信が失敗した場合に実行されるアクションです。 有効な引数は次のとおりです。<xref href=&quot;System.Data.Linq.ConflictMode&quot;></xref><xref href=&quot;System.Data.Linq.ConflictMode&quot;></xref>"
  overload: System.Data.Linq.DataContext.SubmitChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Transaction
  id: Transaction
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Transaction
  nameWithType: DataContext.Transaction
  fullName: System.Data.Linq.DataContext.Transaction
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "取得または設定のローカル トランザクション、[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]を使用して、データベースにアクセスします。"
  remarks: "このプロパティの主なシナリオは、リレーショナルとの相互運用[!INCLUDE[vstecado](~/add/includes/vstecado-md.md)]コード。 たとえば、独自に作成するときにこのプロパティを使用して`Create` / `Update` / `Delete`を設定する方法、`Transaction`プロパティを ADO`Command`オブジェクト。       次に注意してください:-このプロパティが明示的に設定されていない場合、get アクセス操作子が null を返します。      -でコードが実行されている場合、<xref:System.Transactions.Transaction>コンテキスト、このプロパティの設定は例外をスローします</xref:System.Transactions.Transaction>。      場合、このプロパティが設定され、新しい<xref:System.Transactions.Transaction>が開くと、例外がスロー クエリまたは更新を実行するとします</xref:System.Transactions.Transaction>。"
  syntax:
    content: public System.Data.Common.DbTransaction Transaction { get; set; }
    return:
      type: System.Data.Common.DbTransaction
      description: "によって使用されるトランザクション オブジェクト、 <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>クエリとコマンドを実行するときにします。"
  overload: System.Data.Linq.DataContext.Transaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)
  id: Translate(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "既存の変換<xref href=&quot;System.Data.Common.DbDataReader&quot;></xref>オブジェクトにします。"
  syntax:
    content: public System.Data.Linq.IMultipleResults Translate (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>変換します。"
    return:
      type: System.Data.Linq.IMultipleResults
      description: "変換によって返されるオブジェクトの一覧。"
  overload: System.Data.Linq.DataContext.Translate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)
  id: Translate(System.Type,System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Translate(Type,DbDataReader)
  nameWithType: DataContext.Translate(Type,DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(Type,DbDataReader)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "既存の変換<xref href=&quot;System.Data.Common.DbDataReader&quot;></xref>オブジェクトにします。"
  syntax:
    content: public System.Collections.IEnumerable Translate (Type elementType, System.Data.Common.DbDataReader reader);
    parameters:
    - id: elementType
      type: System.Type
      description: "型、 &lt;xref:System.Collections.Generic.IEnumerable%601&gt;を指定します。       オブジェクトのプロパティおよびフィールドに、結果内の列を照合するアルゴリズムは次のように動作: フィールドまたはプロパティは、特定の列名にマップされて、結果セットの列名は正常な動作です。       フィールドまたはプロパティがマップされていない場合、結果セットのフィールドまたはプロパティと同じ名前の列が必要です。       最初の大文字と小文字を検索して比較されます。 以降の検索では、大文字と小文字の発生はこの一致が見つからない場合。       クエリは、すべての追跡対象のフィールドと (除く遅延ごとに読み込まれる) オブジェクトのプロパティを返す必要があります、次の条件が当てはまる場合:`T`エンティティに明示的にでは、追跡、 <xref href=&quot;System.Data.Linq.DataContext&quot;></xref>です。       <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>       エンティティは、主キーを持ちます。       それ以外の場合、例外がスローされます。"
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>変換します。"
    return:
      type: System.Collections.IEnumerable
      description: "変換によって返されるオブジェクトの一覧。"
  overload: System.Data.Linq.DataContext.Translate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)
  id: Translate``1(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public System.Collections.Generic.IEnumerable<TResult> Translate<TResult> (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "追加します。"
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: "追加します。"
  overload: System.Data.Linq.DataContext.Translate<TResult>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(IDbConnection)
  nameWithType: DataContext.DataContext(IDbConnection)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection)
- uid: System.Data.IDbConnection
  parent: System.Data
  isExternal: false
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data.Linq.DataContext.#ctor(System.String)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(String)
  nameWithType: DataContext.DataContext(String)
  fullName: System.Data.Linq.DataContext.DataContext(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(IDbConnection,MappingSource)
  nameWithType: DataContext.DataContext(IDbConnection,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection,MappingSource)
- uid: System.Data.Linq.Mapping.MappingSource
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MappingSource
  nameWithType: MappingSource
  fullName: System.Data.Linq.Mapping.MappingSource
- uid: System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(String,MappingSource)
  nameWithType: DataContext.DataContext(String,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(String,MappingSource)
- uid: System.Data.Linq.DataContext.ChangeConflicts
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ChangeConflicts
  nameWithType: DataContext.ChangeConflicts
  fullName: System.Data.Linq.DataContext.ChangeConflicts
- uid: System.Data.Linq.ChangeConflictCollection
  parent: System.Data.Linq
  isExternal: false
  name: ChangeConflictCollection
  nameWithType: ChangeConflictCollection
  fullName: System.Data.Linq.ChangeConflictCollection
- uid: System.Data.Linq.DataContext.CommandTimeout
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CommandTimeout
  nameWithType: DataContext.CommandTimeout
  fullName: System.Data.Linq.DataContext.CommandTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Linq.DataContext.Connection
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Connection
  nameWithType: DataContext.Connection
  fullName: System.Data.Linq.DataContext.Connection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.Linq.DataContext.CreateDatabase
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateDatabase()
  nameWithType: DataContext.CreateDatabase()
  fullName: System.Data.Linq.DataContext.CreateDatabase()
- uid: System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateMethodCallQuery(Object,MethodInfo,Object[])
  nameWithType: DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
- uid: System.Linq.IQueryable{TResult}
  parent: System.Linq
  isExternal: true
  name: IQueryable<TResult>
  nameWithType: IQueryable<TResult>
  fullName: System.Linq.IQueryable<TResult>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Linq.DataContext.DatabaseExists
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DatabaseExists()
  nameWithType: DataContext.DatabaseExists()
  fullName: System.Data.Linq.DataContext.DatabaseExists()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.DataContext.DeferredLoadingEnabled
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeferredLoadingEnabled
  nameWithType: DataContext.DeferredLoadingEnabled
  fullName: System.Data.Linq.DataContext.DeferredLoadingEnabled
- uid: System.Data.Linq.DataContext.DeleteDatabase
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeleteDatabase()
  nameWithType: DataContext.DeleteDatabase()
  fullName: System.Data.Linq.DataContext.DeleteDatabase()
- uid: System.Data.Linq.DataContext.Dispose
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Dispose()
  nameWithType: DataContext.Dispose()
  fullName: System.Data.Linq.DataContext.Dispose()
- uid: System.Data.Linq.DataContext.Dispose(System.Boolean)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DataContext.Dispose(Boolean)
  fullName: System.Data.Linq.DataContext.Dispose(Boolean)
- uid: System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteCommand(String,Object[])
  nameWithType: DataContext.ExecuteCommand(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteCommand(String,Object[])
- uid: System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicDelete(Object)
  nameWithType: DataContext.ExecuteDynamicDelete(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicDelete(Object)
- uid: System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicInsert(Object)
  nameWithType: DataContext.ExecuteDynamicInsert(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicInsert(Object)
- uid: System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicUpdate(Object)
  nameWithType: DataContext.ExecuteDynamicUpdate(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicUpdate(Object)
- uid: System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteMethodCall(Object,MethodInfo,Object[])
  nameWithType: DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
- uid: System.Data.Linq.IExecuteResult
  parent: System.Data.Linq
  isExternal: false
  name: IExecuteResult
  nameWithType: IExecuteResult
  fullName: System.Data.Linq.IExecuteResult
- uid: System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery(Type,String,Object[])
  nameWithType: DataContext.ExecuteQuery(Type,String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(Type,String,Object[])
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery(String,Object[])
  nameWithType: DataContext.ExecuteQuery(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(String,Object[])
- uid: System.Collections.Generic.IEnumerable{TResult}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.DataContext.GetChangeSet
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetChangeSet()
  nameWithType: DataContext.GetChangeSet()
  fullName: System.Data.Linq.DataContext.GetChangeSet()
- uid: System.Data.Linq.ChangeSet
  parent: System.Data.Linq
  isExternal: false
  name: ChangeSet
  nameWithType: ChangeSet
  fullName: System.Data.Linq.ChangeSet
- uid: System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetCommand(IQueryable)
  nameWithType: DataContext.GetCommand(IQueryable)
  fullName: System.Data.Linq.DataContext.GetCommand(IQueryable)
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Data.Linq.DataContext.GetTable(System.Type)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable(Type)
  nameWithType: DataContext.GetTable(Type)
  fullName: System.Data.Linq.DataContext.GetTable(Type)
- uid: System.Data.Linq.ITable
  parent: System.Data.Linq
  isExternal: false
  name: ITable
  nameWithType: ITable
  fullName: System.Data.Linq.ITable
- uid: System.Data.Linq.DataContext.GetTable``1
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable()
  nameWithType: DataContext.GetTable()
  fullName: System.Data.Linq.DataContext.GetTable()
- uid: System.Data.Linq.Table`1
  parent: System.Data.Linq
  isExternal: false
  name: Table<TEntity>
  nameWithType: Table<TEntity>
  fullName: System.Data.Linq.Table<TEntity>
- uid: System.Data.Linq.DataContext.LoadOptions
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: LoadOptions
  nameWithType: DataContext.LoadOptions
  fullName: System.Data.Linq.DataContext.LoadOptions
- uid: System.Data.Linq.DataLoadOptions
  parent: System.Data.Linq
  isExternal: false
  name: DataLoadOptions
  nameWithType: DataLoadOptions
  fullName: System.Data.Linq.DataLoadOptions
- uid: System.Data.Linq.DataContext.Log
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Log
  nameWithType: DataContext.Log
  fullName: System.Data.Linq.DataContext.Log
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.Linq.DataContext.Mapping
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Mapping
  nameWithType: DataContext.Mapping
  fullName: System.Data.Linq.DataContext.Mapping
- uid: System.Data.Linq.Mapping.MetaModel
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaModel
  nameWithType: MetaModel
  fullName: System.Data.Linq.Mapping.MetaModel
- uid: System.Data.Linq.DataContext.ObjectTrackingEnabled
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ObjectTrackingEnabled
  nameWithType: DataContext.ObjectTrackingEnabled
  fullName: System.Data.Linq.DataContext.ObjectTrackingEnabled
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh(RefreshMode,IEnumerable)
  nameWithType: DataContext.Refresh(RefreshMode,IEnumerable)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,IEnumerable)
- uid: System.Data.Linq.RefreshMode
  parent: System.Data.Linq
  isExternal: false
  name: RefreshMode
  nameWithType: RefreshMode
  fullName: System.Data.Linq.RefreshMode
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh(RefreshMode,Object)
  nameWithType: DataContext.Refresh(RefreshMode,Object)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object)
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh(RefreshMode,Object[])
  nameWithType: DataContext.Refresh(RefreshMode,Object[])
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object[])
- uid: System.Data.Linq.DataContext.SubmitChanges
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: SubmitChanges()
  nameWithType: DataContext.SubmitChanges()
  fullName: System.Data.Linq.DataContext.SubmitChanges()
- uid: System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: SubmitChanges(ConflictMode)
  nameWithType: DataContext.SubmitChanges(ConflictMode)
  fullName: System.Data.Linq.DataContext.SubmitChanges(ConflictMode)
- uid: System.Data.Linq.ConflictMode
  parent: System.Data.Linq
  isExternal: false
  name: ConflictMode
  nameWithType: ConflictMode
  fullName: System.Data.Linq.ConflictMode
- uid: System.Data.Linq.DataContext.Transaction
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Transaction
  nameWithType: DataContext.Transaction
  fullName: System.Data.Linq.DataContext.Transaction
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
- uid: System.Data.Linq.IMultipleResults
  parent: System.Data.Linq
  isExternal: false
  name: IMultipleResults
  nameWithType: IMultipleResults
  fullName: System.Data.Linq.IMultipleResults
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate(Type,DbDataReader)
  nameWithType: DataContext.Translate(Type,DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(Type,DbDataReader)
- uid: System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
- uid: System.Data.Linq.DataContext.#ctor*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext
  nameWithType: DataContext.DataContext
- uid: System.Data.Linq.DataContext.ChangeConflicts*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ChangeConflicts
  nameWithType: DataContext.ChangeConflicts
- uid: System.Data.Linq.DataContext.CommandTimeout*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CommandTimeout
  nameWithType: DataContext.CommandTimeout
- uid: System.Data.Linq.DataContext.Connection*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Connection
  nameWithType: DataContext.Connection
- uid: System.Data.Linq.DataContext.CreateDatabase*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateDatabase
  nameWithType: DataContext.CreateDatabase
- uid: System.Data.Linq.DataContext.CreateMethodCallQuery<TResult>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateMethodCallQuery<TResult>
  nameWithType: DataContext.CreateMethodCallQuery<TResult>
- uid: System.Data.Linq.DataContext.DatabaseExists*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DatabaseExists
  nameWithType: DataContext.DatabaseExists
- uid: System.Data.Linq.DataContext.DeferredLoadingEnabled*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeferredLoadingEnabled
  nameWithType: DataContext.DeferredLoadingEnabled
- uid: System.Data.Linq.DataContext.DeleteDatabase*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeleteDatabase
  nameWithType: DataContext.DeleteDatabase
- uid: System.Data.Linq.DataContext.Dispose*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Dispose
  nameWithType: DataContext.Dispose
- uid: System.Data.Linq.DataContext.ExecuteCommand*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteCommand
  nameWithType: DataContext.ExecuteCommand
- uid: System.Data.Linq.DataContext.ExecuteDynamicDelete*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicDelete
  nameWithType: DataContext.ExecuteDynamicDelete
- uid: System.Data.Linq.DataContext.ExecuteDynamicInsert*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicInsert
  nameWithType: DataContext.ExecuteDynamicInsert
- uid: System.Data.Linq.DataContext.ExecuteDynamicUpdate*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicUpdate
  nameWithType: DataContext.ExecuteDynamicUpdate
- uid: System.Data.Linq.DataContext.ExecuteMethodCall*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteMethodCall
  nameWithType: DataContext.ExecuteMethodCall
- uid: System.Data.Linq.DataContext.ExecuteQuery*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery
  nameWithType: DataContext.ExecuteQuery
- uid: System.Data.Linq.DataContext.ExecuteQuery<TResult>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery<TResult>
  nameWithType: DataContext.ExecuteQuery<TResult>
- uid: System.Data.Linq.DataContext.GetChangeSet*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetChangeSet
  nameWithType: DataContext.GetChangeSet
- uid: System.Data.Linq.DataContext.GetCommand*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetCommand
  nameWithType: DataContext.GetCommand
- uid: System.Data.Linq.DataContext.GetTable*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable
  nameWithType: DataContext.GetTable
- uid: System.Data.Linq.DataContext.GetTable<TEntity>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable<TEntity>
  nameWithType: DataContext.GetTable<TEntity>
- uid: System.Data.Linq.DataContext.LoadOptions*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: LoadOptions
  nameWithType: DataContext.LoadOptions
- uid: System.Data.Linq.DataContext.Log*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Log
  nameWithType: DataContext.Log
- uid: System.Data.Linq.DataContext.Mapping*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Mapping
  nameWithType: DataContext.Mapping
- uid: System.Data.Linq.DataContext.ObjectTrackingEnabled*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ObjectTrackingEnabled
  nameWithType: DataContext.ObjectTrackingEnabled
- uid: System.Data.Linq.DataContext.Refresh*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh
  nameWithType: DataContext.Refresh
- uid: System.Data.Linq.DataContext.SubmitChanges*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: SubmitChanges
  nameWithType: DataContext.SubmitChanges
- uid: System.Data.Linq.DataContext.Transaction*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Transaction
  nameWithType: DataContext.Transaction
- uid: System.Data.Linq.DataContext.Translate*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate
  nameWithType: DataContext.Translate
- uid: System.Data.Linq.DataContext.Translate<TResult>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate<TResult>
  nameWithType: DataContext.Translate<TResult>
