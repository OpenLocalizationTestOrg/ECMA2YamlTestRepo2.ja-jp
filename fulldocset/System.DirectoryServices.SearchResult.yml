### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SearchResult
  id: SearchResult
  children:
  - System.DirectoryServices.SearchResult.GetDirectoryEntry
  - System.DirectoryServices.SearchResult.Path
  - System.DirectoryServices.SearchResult.Properties
  langs:
  - csharp
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult
  type: Class
  summary: "検索クラス全体を検索中に返される、Active Directory ドメイン サービス階層内のノードをカプセル化<xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref>です。"
  remarks: "検索クラスのインスタンスが<xref:System.DirectoryServices.DirectoryEntry>クラス</xref:System.DirectoryServices.DirectoryEntry>のインスタンスとよく似ています。 重要な違いは、<xref:System.DirectoryServices.DirectoryEntry>クラスが新しいオブジェクトがアクセスされるたび、検索用のデータが既に提供されているこの<xref:System.DirectoryServices.SearchResultCollection><xref:System.DirectoryServices.DirectorySearcher>クラス</xref:System.DirectoryServices.DirectorySearcher>で実行されるクエリから返されたを取得、ここで、</xref:System.DirectoryServices.SearchResultCollection> Active Directory ドメイン サービス階層からの情報を取得</xref:System.DirectoryServices.DirectoryEntry>することです 使用して指定するプロパティだけ、<xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>コレクション、クエリでは検索から利用できます</xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>。"
  example:
  - "The following example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the  <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> method to retrieve the live directory entry identified in the search results.  \n  \n```vb  \nImports System  \nImports System.DirectoryServices  \nImports Microsoft.VisualBasic  \n  \nPublic Class MySample  \n   Public Shared Sub Main()  \n      Dim myLDAPPath As String = \"\"  \n      Try  \n         ' Create a 'DirectoryEntry' object to search.  \n         Console.WriteLine(\"Enter the path ( Ex : 'LDAP://MyServer')\")  \n         myLDAPPath = Console.ReadLine()  \n         Dim mySearchRoot As New DirectoryEntry(myLDAPPath)  \n  \n         Dim myDirectorySearcher As New DirectorySearcher(mySearchRoot)  \n  \n         ' Get the first entry of the search.  \n         Dim mySearchResult As SearchResult = myDirectorySearcher.FindOne()  \n         If Not (mySearchResult Is Nothing) Then  \n            ' Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \n            Dim myDirectoryEntry As DirectoryEntry = mySearchResult.GetDirectoryEntry()  \n            Console.WriteLine(ControlChars.Newline + \"The name of the 'myDirectoryEntry' \" + _  \n                        \"directory entry that corresponds to the \" + _  \n                        \"'mySearchResult' search result is : {0}\" + _  \n                        ControlChars.Newline, myDirectoryEntry.Name)  \n            Dim mySearchResultPath As String = mySearchResult.Path  \n            Console.WriteLine(\"The path for the 'mySearchResult' search result is : {0}\" + _  \n                              ControlChars.Newline, mySearchResultPath)  \n            ' Get the properties of the 'mySearchResult'.  \n            Dim myResultPropColl As ResultPropertyCollection  \n            myResultPropColl = mySearchResult.Properties  \n            Console.WriteLine(\"The properties of the 'mySearchResult' are :\")  \n            Dim myKey As String  \n            For Each myKey In  myResultPropColl.PropertyNames  \n               Dim tab1 As String = \"    \"  \n               Console.WriteLine(myKey + \" = \")  \n               Dim myCollection As Object  \n               For Each myCollection In  myResultPropColl(myKey)  \n                  Console.WriteLine(tab1 + myCollection)  \n               Next myCollection  \n            Next myKey  \n            myDirectoryEntry.Dispose()  \n            mySearchRoot.Dispose()  \n         Else  \n            Console.WriteLine(\"The '\" + myLDAPPath + \"' path not found.\")  \n         End If  \n      Catch e As Exception  \n         Console.WriteLine(\"The '\" + myLDAPPath + \"' path not found.\")  \n         Console.WriteLine(\"Exception : \" & e.Message)  \n      End Try  \n   End Sub 'Main  \nEnd Class 'MySample  \n```  \n  \n```c#  \nusing System;  \nusing System.DirectoryServices;  \n  \npublic class MySample  \n{  \n    public static void Main()  \n    {  \n        string myLDAPPath = \"\";  \n        try  \n        {  \n            // Create a 'DirectoryEntry' object to search.  \n            Console.WriteLine(\"Enter the path ( Ex : 'LDAP://MyServer')\");  \n            myLDAPPath = Console.ReadLine();  \n  \n            DirectoryEntry mySearchRoot = new DirectoryEntry(myLDAPPath);  \n            DirectorySearcher myDirectorySearcher =   \n                    new DirectorySearcher(mySearchRoot);  \n  \n            // Get the first entry of the search.  \n            SearchResult mySearchResult = myDirectorySearcher.FindOne();  \n  \n            if ( mySearchResult != null )  \n            {  \n                // Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \n                DirectoryEntry myDirectoryEntry =   \n                mySearchResult.GetDirectoryEntry();  \n                Console.WriteLine(\"\\nThe name of the 'myDirectoryEntry' \" +  \n                        \"directory entry that corresponds to the \" +  \n                        \"'mySearchResult' search result is : {0}\\n\",  \n                        myDirectoryEntry.Name);  \n                string mySearchResultPath = mySearchResult.Path;  \n                Console.WriteLine(\"The path for the 'mySearchResult' search \"  \n                        + \"result is : {0}\\n\", mySearchResultPath);  \n  \n                // Get the properties of the 'mySearchResult'.  \n                ResultPropertyCollection myResultPropColl;  \n                myResultPropColl = mySearchResult.Properties;  \n                Console.WriteLine(\"The properties of the \" +   \n                        \"'mySearchResult' are :\");  \n  \n                foreach( string myKey in myResultPropColl.PropertyNames)  \n                {  \n                    string tab = \"    \";  \n                    Console.WriteLine(myKey + \" = \");  \n                    foreach( Object myCollection in myResultPropColl[myKey])  \n                    {  \n                        Console.WriteLine(tab + myCollection);  \n                    }  \n                }  \n                mySearchRoot.Dispose();  \n                myDirectoryEntry.Dispose();  \n            }  \n            else  \n            {  \n                Console.WriteLine(\"The '\" + myLDAPPath + \"' path not found.\");  \n            }  \n        }  \n        catch(Exception e)  \n        {  \n            Console.WriteLine(\"The '\" + myLDAPPath + \"' path not found.\");  \n            Console.WriteLine(\"Exception : \" + e.Message);  \n        }  \n    }  \n  \n}  \n```  \n  \n```cpp#  \n#using <mscorlib.dll>  \n#using <System.dll>  \n#using <System.Directoryservices.dll>  \n  \nusing namespace System;  \nusing namespace System::Collections;  \nusing namespace System::DirectoryServices;  \nusing namespace stdcli::language;  \n  \nint main()   \n{  \n    String^ myLDAPPath = \"\";  \n    try   \n    {  \n        // Create a 'DirectoryEntry' object to search.  \n        Console::WriteLine(\"Enter the path ( Ex : 'LDAP://MyServer')\");  \n        myLDAPPath = Console::ReadLine();  \n        DirectoryEntry^ mySearchRoot = gcnew DirectoryEntry(myLDAPPath);  \n  \n        DirectorySearcher^ myDirectorySearcher = gcnew DirectorySearcher(mySearchRoot);  \n  \n        // Get the first entry of the search.  \n        SearchResult^ mySearchResult = myDirectorySearcher->FindOne();  \n        if (mySearchResult)   \n        {  \n            // Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \n            DirectoryEntry^ myDirectoryEntry = mySearchResult->GetDirectoryEntry();  \n            Console::WriteLine(  \n                String::Concat(\"\\nThe name of the 'myDirectoryEntry' \",  \n                \"directory entry that corresponds to the \",  \n                \"'mySearchResult' search result is : {0}\\n\"),  \n                myDirectoryEntry->Name);  \n  \n            String^ mySearchResultPath = mySearchResult->Path;  \n            Console::WriteLine(\"The path for the 'mySearchResult' search result is :  \n                    {0}\\n\", mySearchResultPath);  \n  \n            // Get the properties of the 'mySearchResult'.  \n            ResultPropertyCollection^ myResultPropColl = mySearchResult->Properties;  \n            Console::WriteLine(\"The properties of the 'mySearchResult' are :\");  \n            IEnumerator^ myEnum = myResultPropColl->PropertyNames->GetEnumerator();  \n            while (myEnum->MoveNext())   \n            {  \n                String^ myKey = safe_cast<String^>(myEnum->Current);  \n                Console::WriteLine(\"{0} = \", myKey);  \n                IEnumerator^ myEnum = myResultPropColl->Item[myKey]->GetEnumerator();  \n                while (myEnum->MoveNext())   \n                {  \n                    Console::WriteLine(\"\\t{0}\", myEnum->Current);  \n                }  \n            }  \n            myDirectoryEntry->Dispose();  \n            mySearchRoot->Dispose();   \n        }   \n        else   \n        {  \n            Console::WriteLine(\"The '{0}' path not found.\", myLDAPPath);  \n        }  \n    }   \n    catch (Exception^ e)   \n    {  \n        Console::WriteLine(\"The '{0}' path not found.\",  myLDAPPath);  \n        Console::WriteLine(\"Exception : {0}\", e->Message);  \n    }  \n}  \n  \n```"
  syntax:
    content: public class SearchResult
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResult.GetDirectoryEntry
  id: GetDirectoryEntry
  parent: System.DirectoryServices.SearchResult
  langs:
  - csharp
  name: GetDirectoryEntry()
  nameWithType: SearchResult.GetDirectoryEntry()
  fullName: System.DirectoryServices.SearchResult.GetDirectoryEntry()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>に対応する、 <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> Active Directory ドメイン サービス階層からです。"
  remarks: "返されたエントリではなくライブのエントリを確認するときに GetDirectoryEntry を使用して<xref:System.DirectoryServices.DirectorySearcher>、返されたオブジェクトでメソッドを呼び出すしたい場合や</xref:System.DirectoryServices.DirectorySearcher>。      > [!NOTE] > 各 GetDirectoryEntry を呼び出す<xref:System.DirectoryServices.SearchResult>を通じて返さ<xref:System.DirectoryServices.DirectorySearcher>速度が低下することができます</xref:System.DirectoryServices.DirectorySearcher></xref:System.DirectoryServices.SearchResult>。"
  example:
  - "The following example is an excerpt of the example in <xref:System.DirectoryServices.SearchResult>. The original example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the GetDirectoryEntry method to retrieve the live directory entry that is identified in the search results.  \n  \n```vb  \n' Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \nDim myDirectoryEntry As DirectoryEntry = mySearchResult.GetDirectoryEntry()  \nConsole.WriteLine(ControlChars.Newline + \"The name of the 'myDirectoryEntry' \" + _  \n            \"directory entry that corresponds to the \" + _  \n            \"'mySearchResult' search result is : {0}\" + _  \n            ControlChars.Newline, myDirectoryEntry.Name)  \n  \n```  \n  \n```c#  \n// Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \nDirectoryEntry myDirectoryEntry =   \n                           mySearchResult.GetDirectoryEntry();  \nConsole.WriteLine(\"\\nThe name of the 'myDirectoryEntry' \" +  \n                  \"directory entry that corresponds to the \" +  \n                  \"'mySearchResult' search result is : {0}\\n\",  \n                  myDirectoryEntry.Name);  \n  \n```  \n  \n```cpp#  \n// Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  \nDirectoryEntry^ myDirectoryEntry = mySearchResult->GetDirectoryEntry();  \nConsole::WriteLine(  \n    String::Concat(\"\\nThe name of the 'myDirectoryEntry' \",  \n    \"directory entry that corresponds to the \",  \n    \"'mySearchResult' search result is : {0}\\n\"),  \n    myDirectoryEntry->Name);  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry GetDirectoryEntry ();
    parameters: []
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>に対応する、 <xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>です。"
  overload: System.DirectoryServices.SearchResult.GetDirectoryEntry*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResult.Path
  id: Path
  parent: System.DirectoryServices.SearchResult
  langs:
  - csharp
  name: Path
  nameWithType: SearchResult.Path
  fullName: System.DirectoryServices.SearchResult.Path
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "このパスを取得<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>です。"
  remarks: "Path プロパティは、Active Directory ドメイン サービス階層内のこのエントリを一意に識別します。 常にこのパスを使用して、エントリを取得できます。"
  example:
  - "The following example is an excerpt of the example in <xref:System.DirectoryServices.SearchResult>. The original example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> method to retrieve the live directory entry that is identified in the search results.  \n  \n This example shows how to parse the Path property from the search result.  \n  \n```vb  \nDim mySearchResultPath As String = mySearchResult.Path  \nConsole.WriteLine(\"The path for the 'mySearchResult' search result is : {0}\" + _  \n                  ControlChars.Newline, mySearchResultPath)  \n  \n```  \n  \n```c#  \nstring mySearchResultPath = mySearchResult.Path;  \nConsole.WriteLine(\"The path for the 'mySearchResult' search \"  \n                  + \"result is : {0}\\n\", mySearchResultPath);  \n```  \n  \n```cpp#  \nString^ mySearchResultPath = mySearchResult->Path;  \nConsole::WriteLine(\"The path for the 'mySearchResult' search result is : {0}\\n\", mySearchResultPath);  \n  \n```"
  syntax:
    content: public string Path { get; }
    return:
      type: System.String
      description: "このパス<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>です。"
  overload: System.DirectoryServices.SearchResult.Path*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResult.Properties
  id: Properties
  parent: System.DirectoryServices.SearchResult
  langs:
  - csharp
  name: Properties
  nameWithType: SearchResult.Properties
  fullName: System.DirectoryServices.SearchResult.Properties
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得、 <xref href=&quot;System.DirectoryServices.ResultPropertyCollection&quot;> </xref>このオブジェクトのプロパティのコレクション。"
  remarks: "このコレクションには、 <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>。</xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=fullName>を通じて明示的に要求されたプロパティにはのみが含まれます。"
  example:
  - "The following example is an excerpt of the example in <xref:System.DirectoryServices.SearchResult>. The original example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the desired path and uses the <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> method to initiate the search. After performing the search, the example uses the <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> method to retrieve the live directory entry that is identified in the search results.  \n  \n In this example, the search result is put into a <xref:System.DirectoryServices.ResultPropertyCollection>. Then, each property is displayed to the console window.  \n  \n```vb  \n' Get the properties for 'mySearchResult'.  \nDim myResultPropColl As ResultPropertyCollection  \nmyResultPropColl = mySearchResult.Properties  \nConsole.WriteLine(\"The properties of the 'mySearchResult' are :\")  \nDim myKey As String  \nFor Each myKey In  myResultPropColl.PropertyNames  \n   Dim tab1 As String = \"    \"  \n   Console.WriteLine(myKey + \" = \")  \n   Dim myCollection As Object  \n   For Each myCollection In  myResultPropColl(myKey)  \n      Console.WriteLine(tab1 + myCollection)  \n   Next myCollection  \nNext myKey  \n  \n```  \n  \n```c#  \n// Get the properties for 'mySearchResult'.  \nResultPropertyCollection myResultPropColl;  \nmyResultPropColl = mySearchResult.Properties;  \nConsole.WriteLine(\"The properties of the \" +   \n                  \"'mySearchResult' are :\");  \nforeach( string myKey in myResultPropColl.PropertyNames)  \n{  \n   string tab = \"    \";  \n   Console.WriteLine(myKey + \" = \");  \n   foreach( Object myCollection in myResultPropColl[myKey])  \n   {  \n      Console.WriteLine(tab + myCollection);  \n   }  \n}  \n  \n```  \n  \n```cpp#  \n// Get the properties for 'mySearchResult'.  \nResultPropertyCollection^ myResultPropColl = mySearchResult->Properties;  \nConsole::WriteLine(\"The properties of the 'mySearchResult' are :\");  \nIEnumerator^ myEnum = myResultPropColl->PropertyNames->GetEnumerator();  \nwhile (myEnum->MoveNext())   \n{  \n    String^ myKey = safe_cast<String^>(myEnum->Current);  \n    Console::WriteLine(\"{0} = \", myKey);  \n    IEnumerator^ myEnum = myResultPropColl->Item[myKey]->GetEnumerator();  \n    while (myEnum->MoveNext())   \n    {  \n        Console::WriteLine(\"\\t{0}\", myEnum->Current);  \n    }  \n}  \n  \n```"
  syntax:
    content: public System.DirectoryServices.ResultPropertyCollection Properties { get; }
    return:
      type: System.DirectoryServices.ResultPropertyCollection
      description: "A <xref href=&quot;System.DirectoryServices.ResultPropertyCollection&quot;> </xref>プロパティがこのオブジェクトに設定します。"
  overload: System.DirectoryServices.SearchResult.Properties*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.DirectoryServices.SearchResult.GetDirectoryEntry
  parent: System.DirectoryServices.SearchResult
  isExternal: false
  name: GetDirectoryEntry()
  nameWithType: SearchResult.GetDirectoryEntry()
  fullName: System.DirectoryServices.SearchResult.GetDirectoryEntry()
- uid: System.DirectoryServices.DirectoryEntry
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
- uid: System.DirectoryServices.SearchResult.Path
  parent: System.DirectoryServices.SearchResult
  isExternal: false
  name: Path
  nameWithType: SearchResult.Path
  fullName: System.DirectoryServices.SearchResult.Path
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.SearchResult.Properties
  parent: System.DirectoryServices.SearchResult
  isExternal: false
  name: Properties
  nameWithType: SearchResult.Properties
  fullName: System.DirectoryServices.SearchResult.Properties
- uid: System.DirectoryServices.ResultPropertyCollection
  parent: System.DirectoryServices
  isExternal: false
  name: ResultPropertyCollection
  nameWithType: ResultPropertyCollection
  fullName: System.DirectoryServices.ResultPropertyCollection
- uid: System.DirectoryServices.SearchResult.GetDirectoryEntry*
  parent: System.DirectoryServices.SearchResult
  isExternal: false
  name: GetDirectoryEntry
  nameWithType: SearchResult.GetDirectoryEntry
- uid: System.DirectoryServices.SearchResult.Path*
  parent: System.DirectoryServices.SearchResult
  isExternal: false
  name: Path
  nameWithType: SearchResult.Path
- uid: System.DirectoryServices.SearchResult.Properties*
  parent: System.DirectoryServices.SearchResult
  isExternal: false
  name: Properties
  nameWithType: SearchResult.Properties
