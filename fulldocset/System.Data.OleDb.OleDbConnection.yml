### YamlMime:ManagedReference
items:
- uid: System.Data.OleDb.OleDbConnection
  id: OleDbConnection
  children:
  - System.Data.OleDb.OleDbConnection.#ctor
  - System.Data.OleDb.OleDbConnection.#ctor(System.String)
  - System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.OleDb.OleDbConnection.BeginTransaction
  - System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)
  - System.Data.OleDb.OleDbConnection.Close
  - System.Data.OleDb.OleDbConnection.ConnectionString
  - System.Data.OleDb.OleDbConnection.ConnectionTimeout
  - System.Data.OleDb.OleDbConnection.CreateCommand
  - System.Data.OleDb.OleDbConnection.CreateDbCommand
  - System.Data.OleDb.OleDbConnection.Database
  - System.Data.OleDb.OleDbConnection.DataSource
  - System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)
  - System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  - System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])
  - System.Data.OleDb.OleDbConnection.GetSchema
  - System.Data.OleDb.OleDbConnection.GetSchema(System.String)
  - System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])
  - System.Data.OleDb.OleDbConnection.InfoMessage
  - System.Data.OleDb.OleDbConnection.Open
  - System.Data.OleDb.OleDbConnection.Provider
  - System.Data.OleDb.OleDbConnection.ReleaseObjectPool
  - System.Data.OleDb.OleDbConnection.ResetState
  - System.Data.OleDb.OleDbConnection.ServerVersion
  - System.Data.OleDb.OleDbConnection.State
  - System.Data.OleDb.OleDbConnection.System#ICloneable#Clone
  langs:
  - csharp
  name: OleDbConnection
  nameWithType: OleDbConnection
  fullName: System.Data.OleDb.OleDbConnection
  type: Class
  summary: "データ ソースへの接続を開くを表します。"
  remarks: "Ole db 接続オブジェクトは、データ ソースへの一意の接続を表します。 クライアント/サーバー データベース システムでは、サーバーへのネットワーク接続と同じです。 ネイティブの OLE DB プロバイダーでサポートされる機能、によって一部のメソッドまたは ole db 接続オブジェクトのプロパティを使用できない可能性があります。       Ole db 接続のインスタンスを作成するときに、すべてのプロパティは、それぞれの初期値に設定されます。 これらの値の一覧は、ole db 接続コンス トラクターを参照してください。       1 つの ole db 接続の&1; つ以上の DataReader を開くことができます。 使用する OLE DB プロバイダーは、単一の接続で&1; つ以上の DataReader をサポートしていません、各追加の接続は、プロバイダーによって暗黙的が開きます。       OleDbConnection がスコープ外に出る、閉じられません。 したがって、する必要があります明示的に接続を呼び出して終了する<xref:System.Data.OleDb.OleDbConnection.Close%2A>または**Dispose**、または内で ole db 接続オブジェクトを使用して、`Using`ステートメント</xref:System.Data.OleDb.OleDbConnection.Close%2A>。      > [!NOTE] > アプリケーションを展開する高パフォーマンス、接続プールを使用する必要があります。 .NET Framework Data Provider for OLE DB を使用するときにありません接続プールを管理するため、プロバイダーに自動的に有効にします。 接続を使用する方法の詳細と .NET Framework Data Provider for OLE DB では、プールを参照してください[OLE DB、ODBC、および Oracle 接続プール](~/add/includes/ajax-current-ext-md.md)です。       致命的なエラー場合<xref:System.Data.OleDb.OleDbException>(たとえば、SQL Server 重大度レベル以上 20 の) メソッドの実行によって生成される、 <xref:System.Data.OleDb.OleDbCommand>、ole db 接続を終了する可能性があります</xref:System.Data.OleDb.OleDbCommand></xref:System.Data.OleDb.OleDbException>。 ただし、ユーザーことができます、接続を再び開き、続行します。       OleDbConnection オブジェクトのインスタンスを作成するアプリケーションには、すべて直接的および間接的な呼び出し元の設定宣言的または強制的のセキュリティ確認要求でのコードに十分なアクセス許可があることが必要です。 Ole db 接続は、セキュリティ要求を使用して、<xref:System.Data.OleDb.OleDbPermission>オブジェクト</xref:System.Data.OleDb.OleDbPermission>。 ユーザーが、コードが使用して、十分なアクセス許可を持っていることを確認、<xref:System.Data.OleDb.OleDbPermissionAttribute>オブジェクト</xref:System.Data.OleDb.OleDbPermissionAttribute>。 ユーザーと管理者を使っても、 [Caspol.exe (コード アクセス セキュリティ ポリシー ツール)](~/add/includes/ajax-current-ext-md.md)コンピューター、ユーザー、およびエンタープライズ レベルのセキュリティ ポリシーを変更します。 詳細については、次を参照してください。[コード アクセス セキュリティと ADO.NET](~/add/includes/ajax-current-ext-md.md)です。       データ サーバーからの警告および情報メッセージを処理の詳細については、次を参照してください。[接続イベント](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] >、Ole db 接続オブジェクトは設定または OLE DB プロバイダーに固有の動的プロパティの取得をサポートしていません。 OLE DB プロバイダーの接続文字列で渡すことができるプロパティのみがサポートされています。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbCommand> and an OleDbConnection. The OleDbConnection is opened and set as the <xref:System.Data.OleDb.OleDbCommand.Connection%2A> for the <xref:System.Data.OleDb.OleDbCommand>. The example then calls <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A> and closes the connection. To accomplish this, <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is an SQL INSERT statement.  \n  \n [!code-cs[Classic WebData OleDbConnection Example#1](~/add/codesnippet/csharp/t-system.data.oledb.oled_3_1.cs)]\n [!code-vb[Classic WebData OleDbConnection Example#1](~/add/codesnippet/visualbasic/t-system.data.oledb.oled_3_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("InfoMessage")]

      public sealed class OleDbConnection : System.Data.Common.DbConnection, ICloneable, IDisposable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements:
  - System.ICloneable
  - System.IDisposable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.DbProviderFactory
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.#ctor
  id: '#ctor'
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: OleDbConnection()
  nameWithType: OleDbConnection.OleDbConnection()
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref>クラスです。"
  remarks: "新しいインスタンスをときに<xref:System.Data.OleDb.OleDbConnection>が作成、読み取り/書き込みで、関連付けられているキーワードを使用して明示的に設定されている場合を除き、次の初期値にプロパティが設定されます、<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>プロパティ</xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A></xref:System.Data.OleDb.OleDbConnection>。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>| 空の文字列 (&quot;&quot;) |  |<xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A>|&15; |  |<xref:System.Data.OleDb.OleDbConnection.Database%2A>| 空の文字列 (&quot;&quot;) |  |<xref:System.Data.OleDb.OleDbConnection.DataSource%2A>| 空の文字列 (&quot;&quot;) |      のみを使用してこれらのプロパティの値を変更することができます、<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>プロパティ</xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A></xref:System.Data.OleDb.OleDbConnection.DataSource%2A></xref:System.Data.OleDb.OleDbConnection.Database%2A></xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A></xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>。"
  example:
  - "The following example creates and opens an <xref:System.Data.OleDb.OleDbConnection>.  \n  \n [!code-cs[Classic WebData OleDbConnection.OleDbConnection Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_7_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.OleDbConnection Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_7_1.vb)]"
  syntax:
    content: public OleDbConnection ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: OleDbConnection(String)
  nameWithType: OleDbConnection.OleDbConnection(String)
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref>指定された接続文字列を持つクラス。"
  remarks: "新しいインスタンスをときに<xref:System.Data.OleDb.OleDbConnection>が作成、読み取り/書き込みで、関連付けられているキーワードを使用して明示的に設定されている場合を除き、次の初期値にプロパティが設定されます、<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>プロパティ</xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A></xref:System.Data.OleDb.OleDbConnection>。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>|`connectionString`|  |<xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A>|&15; |  |<xref:System.Data.OleDb.OleDbConnection.Database%2A>| 空の文字列 (&quot;&quot;) |  |<xref:System.Data.OleDb.OleDbConnection.DataSource%2A>| 空の文字列 (&quot;&quot;) |      のみを使用してこれらのプロパティの値を変更することができます、<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>プロパティ</xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A></xref:System.Data.OleDb.OleDbConnection.DataSource%2A></xref:System.Data.OleDb.OleDbConnection.Database%2A></xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A></xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>。"
  example:
  - "The following example creates and opens an <xref:System.Data.OleDb.OleDbConnection>.  \n  \n [!code-cs[Classic WebData OleDbConnection.OleDbConnection1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_1_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.OleDbConnection1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_1_1.vb)]"
  syntax:
    content: public OleDbConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "データベースを開くために使用する接続です。"
  overload: System.Data.OleDb.OleDbConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "追加します。"
    return:
      type: System.Data.Common.DbTransaction
      description: "追加します。"
  overload: System.Data.OleDb.OleDbConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: OleDbConnection.BeginTransaction()
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "現在のデータベース トランザクションを開始<xref href=&quot;System.Data.IsolationLevel&quot;></xref>値。"
  remarks: "明示的にコミットまたはを使用してトランザクションをロールバックする必要があります、<xref:System.Data.OleDb.OleDbTransaction.Commit%2A>または<xref:System.Data.OleDb.OleDbTransaction.Rollback%2A>メソッド</xref:System.Data.OleDb.OleDbTransaction.Rollback%2A></xref:System.Data.OleDb.OleDbTransaction.Commit%2A>。 .NET Framework Data Provider for OLE DB のトランザクション管理モデルが正しく実行するようにするには、データ ソースによって提供されるものなど、他のトランザクション管理モデルを使用しないでください。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and an <xref:System.Data.OleDb.OleDbTransaction>. It also demonstrates how to use the BeginTransaction, <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>, and <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData OleDbConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_23_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_23_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.OleDb.OleDbTransaction
      description: "新しいトランザクションを表すオブジェクト。"
  overload: System.Data.OleDb.OleDbConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "並列トランザクションはサポートされていません。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "指定された分離レベルで、データベース トランザクションを開始します。"
  remarks: "明示的にコミットまたはを使用してトランザクションをロールバックする必要があります、<xref:System.Data.OleDb.OleDbTransaction.Commit%2A>または<xref:System.Data.OleDb.OleDbTransaction.Rollback%2A>メソッド</xref:System.Data.OleDb.OleDbTransaction.Rollback%2A></xref:System.Data.OleDb.OleDbTransaction.Commit%2A>。 .NET Framework Data Provider for OLE DB のトランザクション管理モデルが正しく実行するようにするには、データ ソースによって提供されるものなど、他のトランザクション管理モデルを使用しないでください。      > [!NOTE] > 分離レベルを指定しない場合、基になるプロバイダーの既定の分離レベルが使用されます。 BeginTransaction メソッドを使用して分離レベルを指定するを受け取るオーバー ロードを使用して、`isolationLevel`パラメーター。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and an <xref:System.Data.OleDb.OleDbTransaction>. It also demonstrates how to use the <xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>, a <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>, and <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData OleDbConnection.BeginTransaction1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_25_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.BeginTransaction1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_25_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "トランザクションを実行する分離レベル。"
    return:
      type: System.Data.OleDb.OleDbTransaction
      description: "新しいトランザクションを表すオブジェクト。"
  overload: System.Data.OleDb.OleDbConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "並列トランザクションはサポートされていません。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: OleDbConnection.ChangeDatabase(String)
  fullName: System.Data.OleDb.OleDbConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "開いているは、現在のデータベース変更<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref>です。"
  remarks: "指定された値、`database`パラメーターは、有効なデータベース名を指定する必要があります。 `database`パラメーターは、null 値、空の文字列または空白だけの文字の文字列を含めることはできません。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.Database Example#2](~/add/codesnippet/csharp/m-system.data.oledb.oled_20_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.Database Example#2](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_20_1.vb)]"
  syntax:
    content: public override void ChangeDatabase (string value);
    parameters:
    - id: value
      type: System.String
      description: "データベース名。"
  overload: System.Data.OleDb.OleDbConnection.ChangeDatabase*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "データベース名が正しくありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は開いていません。"
  - type: System.Data.OleDb.OleDbException
    commentId: T:System.Data.OleDb.OleDbException
    description: "データベースを変更することはできません。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Close
  id: Close
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Close()
  nameWithType: OleDbConnection.Close()
  fullName: System.Data.OleDb.OleDbConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "データ ソースへの接続を閉じます。"
  remarks: "Close メソッドは、保留中のトランザクションをロールバックします。 接続プールへの接続を解放し、または接続プールが無効になっている場合、接続を閉じます。 処理中に Close が呼び出された場合、<xref:System.Data.Common.DbConnection.StateChange>イベント、これ以上の<xref:System.Data.Common.DbConnection.StateChange>イベントは発生しません</xref:System.Data.Common.DbConnection.StateChange></xref:System.Data.Common.DbConnection.StateChange>。       アプリケーションは&1; つ以上の時間に Close を呼び出すことができます。 例外は生成されません。      > [!CAUTION] > Close を呼び出す必要はありませんか**Dispose**上、 <xref:System.Data.OleDb.OleDbConnection>、 <xref:System.Data.OleDb.OleDbDataReader>、またはその他のマネージ オブジェクトで、`Finalize`クラスのメソッド</xref:System.Data.OleDb.OleDbDataReader></xref:System.Data.OleDb.OleDbConnection> ファイナライザーで、クラスが直接所有されているアンマネージ リソースだけを解放する必要があります。 クラスがアンマネージ リソースを所有していない場合は含まれません、`Finalize`メソッド、クラス定義にします。 詳細については、次を参照してください。[ガベージ コレクション](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: OleDbConnection.ConnectionString
  fullName: System.Data.OleDb.OleDbConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "取得またはデータベースを開くために使用する文字列を設定します。"
  remarks: "The ConnectionString is designed to match OLE DB connection string format as closely as possible with the following exceptions:  \n  \n-   The \"Provider = `value` \" clause is required. However, you cannot use \"Provider = MSDASQL\" because the .NET Framework Data Provider for OLE DB does not support the OLE DB Provider for ODBC (MSDASQL). To access ODBC data sources, use the <xref:System.Data.Odbc.OdbcConnection> object that is in the <xref:System.Data.Odbc> namespace.  \n  \n-   Unlike ODBC or ADO, the connection string that is returned is the same as the user-set ConnectionString, minus security information if `Persist Security Info` is set to `false` (default). The .NET Framework Data Provider for OLE DB does not persist or return the password in a connection string unless you set the `Persist Security Info` keyword to `true` (not recommended). To maintain a high level of security, it is strongly recommended that you use the `Integrated Security` keyword with `Persist Security Info` set to `false`.  \n  \n You can use the ConnectionString property to connect to a variety of data sources. The following example illustrates several possible connection strings.  \n  \n```  \n\"Provider=MSDAORA; Data Source=ORACLE8i7;Persist Security Info=False;Integrated Security=Yes\"  \n  \n\"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=c:\\bin\\LocalAccess40.mdb\"  \n  \n\"Provider=SQLOLEDB;Data Source=(local);Integrated Security=SSPI\"  \n```  \n  \n If the `Data Source` keyword is not specified in the connection string, the provider will try to connect to the local server if one is available.  \n  \n For more information about connection strings, see [Using Connection String Keywords with SQL Server Native Client](http://go.microsoft.com/fwlink/?LinkId=126696).  \n  \n The ConnectionString property can be set only when the connection is closed. Many of the connection string values have corresponding read-only properties. When the connection string is set, these properties are updated, except when an error is detected. In this case, none of the properties are updated. <xref:System.Data.OleDb.OleDbConnection> properties return only those settings that are contained in the ConnectionString.  \n  \n Resetting the ConnectionString on a closed connection resets all connection string values and related properties. This includes the password. For example, if you set a connection string that includes \"Initial Catalog= AdventureWorks\", and then reset the connection string to \"Provider= SQLOLEDB;Data Source= MySQLServer;IntegratedSecurity=SSPI\", the <xref:System.Data.OleDb.OleDbConnection.Database%2A> property is no longer set to AdventureWorks. (The Initial Catalog value of the connection string corresponds to the `Database` property.)  \n  \n A preliminary validation of the connection string is performed when the property is set. If values for the `Provider`, `Connect Timeout`, `Persist Security Info`, or `OLE DB Services` are included in the string, these values are checked. When an application calls the <xref:System.Data.OleDb.OleDbConnection.Open%2A> method, the connection string is fully validated. If the connection string contains invalid or unsupported properties, a run-time exception, such as <xref:System.ArgumentException>, is generated.  \n  \n> [!CAUTION]\n>  It is possible to supply connection information for an <xref:System.Data.OleDb.OleDbConnection> in a Universal Data Link (UDL) file; however you should avoid doing so. UDL files are not encrypted and expose connection string information in clear text. Because a UDL file is an external file-based resource to your application, it cannot be secured using the .NET Framework.  \n  \n The basic format of a connection string includes a series of keyword/value pairs separated by semicolons. The equal sign (=) connects each keyword and its value. To include values that contain a semicolon, single-quote character, or double-quote character, the value must be enclosed in double quotation marks. If the value contains both a semicolon and a double-quote character, the value can be enclosed in single quotation marks. The single quotation mark is also useful if the value starts with a double-quote character. Conversely, the double quotation mark can be used if the value starts with a single quotation mark. If the value contains both single-quote and double-quote characters, the quotation-mark character used to enclose the value must be doubled every time it occurs within the value.  \n  \n To include preceding or trailing spaces in the string value, the value must be enclosed in either single quotation marks or double quotation marks. Any leading or trailing spaces around integer, Boolean, or enumerated values are ignored, even if enclosed in quotation marks. However, spaces within a string literal keyword or value are preserved. Single or double quotation marks may be used within a connection string without using delimiters (for example, `Data Source= my'Server` or `Data Source= my\"Server`) unless a quotation-mark character is the first or last character in the value.  \n  \n To include an equal sign (=) in a keyword or value, it must be preceded by another equal sign. For example, in the hypothetical connection string  \n  \n```  \n\"key==word=value\"  \n```  \n  \n the keyword is \"key=word\" and the value is \"value\".  \n  \n If a specific keyword in a keyword=value pair occurs multiple times in a connection string, the last occurrence listed is used in the value set.  \n  \n Keywords are not case sensitive.  \n  \n> [!CAUTION]\n>  You should use caution when constructing a connection string based on user input, for example, when retrieving user ID and password information from a dialog box and appending it to the connection string. The application should make sure that a user cannot embed additional connection-string parameters in these values, for example, entering a password as \"validpassword;database= somedb\" in an attempt to attach to a different database. If you use the Extended Properties connection string parameter for OLE DB connections, avoid passing user IDs and passwords because you should avoid storing user IDs and passwords in clear text if you can, and because the default setting of `Persist Security Info= false` does not affect the `Extended Properties` parameter."
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and sets some of its properties in the connection string.  \n  \n [!code-cs[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_4_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_4_1.vb)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "データ ソース名と最初の接続を確立するために必要なその他のパラメーターを含む OLE DB プロバイダー接続文字列。 既定値は、空の文字列です。"
  overload: System.Data.OleDb.OleDbConnection.ConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無効な接続文字列引数が指定されているか、必要な接続文字列の引数が指定されていません。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: OleDbConnection.ConnectionTimeout
  fullName: System.Data.OleDb.OleDbConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "試行を終了し、エラーが発生する前に接続を確立しているときに待機する時間を取得します。"
  remarks: "値が 0 の制限がないことを示しますとでは避ける必要があります、<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>ため、接続の試行は無期限に待機します。</xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> 。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and sets some of its properties in the connection string.  \n  \n [!code-vb[Classic WebData OleDbConnection.ConnectionTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_2_1.vb)]\n [!code-cs[Classic WebData OleDbConnection.ConnectionTimeout Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_2_1.cs)]"
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "接続を開くを待機する秒単位の時間。 既定値は、15 秒です。"
  overload: System.Data.OleDb.OleDbConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定されている値が 0 未満です。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: OleDbConnection.CreateCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "作成して返します、 <xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>オブジェクトに関連付けられている、 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref>です。"
  syntax:
    content: public System.Data.OleDb.OleDbCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>オブジェクト。"
  overload: System.Data.OleDb.OleDbConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: OleDbConnection.CreateDbCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "追加します。"
  overload: System.Data.OleDb.OleDbConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Database
  id: Database
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Database
  nameWithType: OleDbConnection.Database
  fullName: System.Data.OleDb.OleDbConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "現在のデータベースまたは接続が開かれた後に使用するデータベースの名前を取得します。"
  remarks: "データベースのプロパティを動的に更新します。 SQL ステートメントを使用して、現在のデータベースを変更するかどうか、または<xref:System.Data.OleDb.OleDbConnection.ChangeDatabase%2A>メソッド、情報メッセージが送信され、プロパティが自動的に更新されます</xref:System.Data.OleDb.OleDbConnection.ChangeDatabase%2A>。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.Database Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_14_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.Database Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_14_1.vb)]"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "現在のデータベースまたは接続が開かれた後に使用するデータベースの名前の名前。 既定値は、空の文字列です。"
  overload: System.Data.OleDb.OleDbConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.DataSource
  id: DataSource
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: OleDbConnection.DataSource
  fullName: System.Data.OleDb.OleDbConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "サーバー名またはデータ ソースのファイル名を取得します。"
  remarks: "データベースへの接続が閉じている場合、`DataSource`プロパティに含まれるものを返します`ConnectionString`for データ ソースのキーワードです。 接続が開いている場合、`ConnectionString`データ ソースのキーワードの値で始まる&quot;| datadirectory |&quot;に含まれるものを返します`ConnectionString`データ ソースのキーワードのみをします。 データベースへの接続が開いている場合は、このプロパティはネイティブ プロバイダーを返しますを返します、`DBPROP_INIT_DATASOURCE,`が、空の場合と、ネイティブ プロバイダーの`DBPROP_DATASOURCENAME`が返されます。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_26_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_26_1.vb)]"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "サーバー名またはデータ ソースのファイル名。 既定値は、空の文字列です。"
  overload: System.Data.OleDb.OleDbConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: OleDbConnection.Dispose(Boolean)
  fullName: System.Data.OleDb.OleDbConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.Data.OleDb.OleDbConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: OleDbConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(ITransaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "指定されたトランザクションは分散トランザクションに参加します。"
  remarks: "新しい ADO.NET 2.0 ではサポートを使用するため、<xref:System.Data.Common.DbConnection.EnlistTransaction%2A>分散トランザクションに参加するメソッド</xref:System.Data.Common.DbConnection.EnlistTransaction%2A>。 これにより、接続するため、<xref:System.Transactions.Transaction>インスタンス、 **EnlistTransaction**で利用できる機能を活用、<xref:System.Transactions>を管理するための名前空間は分散トランザクションを置き換えることが**どちら**この目的のためです</xref:System.Transactions></xref:System.Transactions.Transaction>。 詳細については、次を参照してください。[分散トランザクション](~/add/includes/ajax-current-ext-md.md)です。       自動参加が無効になっている場合は、どちらのメソッドを使用して既存の分散トランザクションに参加する続行することができます。 既存の分散トランザクションに参加させることにより、トランザクションがコミットまたはロールバックされた場合、データ ソース コードで行った変更もコミットまたはロールバックします。 分散トランザクションの詳細については、次を参照してください。[分散トランザクション](../Topic/Distributed%20Transactions.md)です。       場合、どちらが例外を返します<xref:System.Data.OleDb.OleDbConnection>が、既に<xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>.</xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>を使用してトランザクションを開始</xref:System.Data.OleDb.OleDbConnection> ただし、トランザクションは、データ ソースで開始されたローカル トランザクション (たとえば、明示的に実行することによって、BEGIN TRANSACTION ステートメントを使用して、<xref:System.Data.OleDbClient.OleDbCommand>オブジェクト)、どちらがローカル トランザクションをロールバックし、要求されるとおり、既存の分散トランザクションに参加します</xref:System.Data.OleDbClient.OleDbCommand>。 注意してください、ローカルのトランザクションがロールバックされていないローカル トランザクションの管理を担当を使用して開始<xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>。</xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>を受け取ることはありません。"
  syntax:
    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);
    parameters:
    - id: transaction
      type: System.EnterpriseServices.ITransaction
      description: "既存への参照を<xref href=&quot;System.EnterpriseServices.ITransaction&quot;></xref>登録先。"
  overload: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: OleDbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "指定されたトランザクションは分散トランザクションに参加します。"
  remarks: '新しい ADO.NET 2.0 ではサポートを使用するため、<xref:System.Data.Common.DbConnection.EnlistTransaction%2A>分散トランザクションに参加するメソッド</xref:System.Data.Common.DbConnection.EnlistTransaction%2A>。 これにより、接続するため、<xref:System.Transactions.Transaction>インスタンス、 **EnlistTransaction**で利用できる機能を活用、<xref:System.Transactions>を管理するための名前空間は分散トランザクションを置き換えることが**どちら**が使用される、<xref:System.EnterpriseServices.ITransaction>オブジェクト</xref:System.EnterpriseServices.ITransaction></xref:System.Transactions></xref:System.Transactions.Transaction>。 さらに、若干異なるセマンティクス: 接続は明示的にトランザクションに参加させる、一度参加解除されてまたはできない最初のトランザクションが終了するまで、別のトランザクションに参加しています。 分散トランザクションの詳細については、次を参照してください。[分散トランザクション](~/add/includes/ajax-current-ext-md.md)です。'
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "既存への参照を<xref href=&quot;System.Transactions.Transaction&quot;></xref>登録先。"
  overload: System.Data.OleDb.OleDbConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])
  id: GetOleDbSchemaTable(System.Guid,System.Object[])
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetOleDbSchemaTable(Guid,Object[])
  nameWithType: OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
  fullName: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "指定された制限を適用した後、GUID によって示されると、データ ソースからスキーマ情報を返します。"
  remarks: "スキーマ テーブルとして返されます、<xref:System.Data.DataTable>で指定された OLE DB スキーマ行セットと同じ形式を持つ、`schema`パラメーター</xref:System.Data.DataTable> 。 使用して、`restrictions`パラメーターで返される行をフィルター選択、 <xref:System.Data.DataTable>(たとえば、テーブル名、型、所有者、またはスキーマの制限の指定) を</xref:System.Data.DataTable>。 配列内の値を渡す際に、空の文字列または配列要素の値を含まないの null 値が含まれます。 空の配列を渡す場合`restrictions`、(テーブルごとに&1; つ) のすべての行が既定の順序で返されます。 配列内の値が、ソース テーブルと<xref:System.Data.DataTable>。</xref:System.Data.DataTable>内の列順序に対応します。 制限の配列内の各要素は、対応する列は、スキーマ行セットの内容と比較されます。 たとえば、制限の配列の最初の要素は、行セット内の最初の列に比較されます。 結果として得られる<xref:System.Data.DataTable>。</xref:System.Data.DataTable>スキーマ行セットから制限の値を正確に一致する行のみを追加制約要素が null でない場合       <xref:System.Data.OleDb.OleDbConnection>メソッドを呼び出す、基になる OLE DB **idbschemarowset::getrowset**標準的な共通言語ランタイムの変換規則を使用するメソッド</xref:System.Data.OleDb.OleDbConnection>。 詳細については、次を参照してください。 [COM のデータ型](http://msdn.microsoft.com/en-us/f93ae35d-a416-4218-8700-c8218cc90061)です。       <xref:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals>。</xref:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals>を使用して、リテラルに関する情報を取得することができます。 これにより、情報、OLE DB の呼び出しに相当**IDBInfo::GetLiteralInfo**インターフェイス、または ADO **Connection.OpenSchema**メソッドを`adSchemaDBInfoLiterals`定数。"
  example:
  - "The following sample returns a list of tables in a database.  \n  \n [!code-cs[Classic WebData OleDbConnection.GetOleDbSchemaTable Example#1](~/add/codesnippet/csharp/da103458-7630-4900-9261-_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.GetOleDbSchemaTable Example#1](~/add/codesnippet/visualbasic/da103458-7630-4900-9261-_1.vb)]"
  syntax:
    content: public System.Data.DataTable GetOleDbSchemaTable (Guid schema, object[] restrictions);
    parameters:
    - id: schema
      type: System.Guid
      description: "1 つ、 <xref href=&quot;System.Data.OleDb.OleDbSchemaGuid&quot;> </xref>を返すスキーマ テーブルを指定する値。"
    - id: restrictions
      type: System.Object[]
      description: "<xref:System.Object>制限値の配列</xref:System.Object>。 これらの制限列の順序で適用されます。 つまり、最初の制限列に適用される最初の制限値、2 番目の制限値と&2; 番目の制限列に適用されます。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>要求されたスキーマ情報を格納します。"
  overload: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable*
  exceptions:
  - type: System.Data.OleDb.OleDbException
    commentId: T:System.Data.OleDb.OleDbException
    description: "指定した制限のセットが正しくありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref>が閉じられます。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "OLE DB プロバイダーでは、指定されたスキーマ行セットはサポートされていません。       - または -、 <code> schema </code>パラメーターの値が含まれる<xref href=&quot;System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals&quot;></xref>と<code> restrictions </code>パラメーターには、1 つまたは複数の制限が含まれています。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetSchema
  id: GetSchema
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: OleDbConnection.GetSchema()
  fullName: System.Data.OleDb.OleDbConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "このデータ ソースのスキーマ情報を返します<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref>です。"
  syntax:
    content: public override System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>スキーマ情報を格納します。"
  overload: System.Data.OleDb.OleDbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: OleDbConnection.GetSchema(String)
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "このデータ ソースのスキーマ情報を返します<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref>スキーマ名を指定した文字列を使用します。"
  remarks: "ときに`collectionName`が null の場合、として指定されて、 <xref:System.Data.DataTable>、利用可能なすべてのメタデータとその制限に関する情報が含まれます</xref:System.Data.DataTable>。"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "返すスキーマの名前を指定します。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>スキーマ情報を格納します。"
  overload: System.Data.OleDb.OleDbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: OleDbConnection.GetSchema(String,String[])
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "このデータ ソースのスキーマ情報を返します<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref>スキーマ名と制限値に指定した文字列配列の指定した文字列を使用します。"
  remarks: "ときに`collectionName`が null の場合、として指定されて、 <xref:System.Data.DataTable>、利用可能なすべてのメタデータとその制限に関する情報が含まれます</xref:System.Data.DataTable>。       `restrictionValues`パラメーターを指定できます*n*特定のコレクションの制限のコレクションで指定されている値の深さ。 指定された制限の値を設定して、他の制限値を設定しない、null に設定し、値を指定するには、制限用に適切な値を格納する、前述の制限を設定する必要があります。       この例では、&quot;Tables&quot;コレクションです。 &quot;Tables&quot;コレクションでは、3 つの制限 (データベース、所有者、およびテーブル名)、&quot;Carl&quot;の所有者に関連付けられているテーブルのみを取得する場合は、(最低)、次の値で渡す必要があります: null、&quot;Carl&quot;です。 制限値が渡されない場合、既定値は、その制限に使用されます。 これは、null を渡すことと同じマッピングこれとは異なるパラメーター値に空の文字列に渡すことができます。 その場合、空の文字列 (&quot;&quot;) は、指定されたパラメーターの値であると見なされます。"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "返すスキーマの名前を指定します。"
    - id: restrictionValues
      type: System.String[]
      description: "要求されたスキーマの制限値のセットを指定します。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>スキーマ情報を格納します。"
  overload: System.Data.OleDb.OleDbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.InfoMessage
  id: InfoMessage
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: InfoMessage
  nameWithType: OleDbConnection.InfoMessage
  fullName: System.Data.OleDb.OleDbConnection.InfoMessage
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "プロバイダーが警告または情報メッセージを送信したときに発生します。"
  remarks: "警告またはサーバーによって送信される情報のメッセージを処理するクライアントを作成する必要があります、<xref:System.Data.OleDb.OleDbInfoMessageEventHandler>このイベントを待機するデリゲート</xref:System.Data.OleDb.OleDbInfoMessageEventHandler>。       InfoMessage イベントは、重要度が低いと、メッセージは、データ ソースから返されたときに発生します。 重要度が低いメッセージは、例外が発生しません。 重大度レベル 10 のエラー メッセージは、Microsoft SQL Server の詳細と例は、以下を参照してくださいまたは[接続イベント](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public event System.Data.OleDb.OleDbInfoMessageEventHandler InfoMessage;
    return:
      type: System.Data.OleDb.OleDbInfoMessageEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Open
  id: Open
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Open()
  nameWithType: OleDbConnection.Open()
  fullName: System.Data.OleDb.OleDbConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "<xref:System.Data.OleDb.OleDbConnection.ConnectionString*>。</xref:System.Data.OleDb.OleDbConnection.ConnectionString*>で指定されたプロパティの設定でデータベース接続を開きます"
  remarks: "<xref:System.Data.OleDb.OleDbConnection>がある場合、接続プールから、開いている接続を描画します</xref:System.Data.OleDb.OleDbConnection>。 それ以外の場合、データ ソースへの新しい接続を確立します。 単一<xref:System.Data.OleDb.OleDbConnection>。</xref:System.Data.OleDb.OleDbConnection>で&1; つ以上の DataReader を開くことができます。 使用する ole DB プロバイダーは、単一の接続で&1; つ以上のアクティブな DataReader をサポートしていません、各追加の接続は、ole DB プロバイダーによって暗黙的が開きます。      > [!NOTE] > 場合、<xref:System.Data.OleDb.OleDbConnection>スコープの移動のうち、終了していない</xref:System.Data.OleDb.OleDbConnection>。 したがって、する必要があります明示的に接続を呼び出して終了する<xref:System.Data.OleDb.OleDbConnection.Close%2A>または**Dispose**、または内で接続を使用して、`Using`ステートメント</xref:System.Data.OleDb.OleDbConnection.Close%2A>。"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続が開いています。"
  - type: System.Data.OleDb.OleDbException
    commentId: T:System.Data.OleDb.OleDbException
    description: "接続を開くときに、接続レベルのエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.Provider
  id: Provider
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: Provider
  nameWithType: OleDbConnection.Provider
  fullName: System.Data.OleDb.OleDbConnection.Provider
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "指定された OLE DB プロバイダーの名前を取得、&quot;プロバイダー =&quot;接続文字列の句。"
  remarks: ''
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData OleDbConnection.Provider Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_1_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.Provider Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_1_1.vb)]"
  syntax:
    content: public string Provider { get; }
    return:
      type: System.String
      description: "指定されているプロバイダーの名前、&quot;プロバイダー =&quot;接続文字列の句。 既定値は、空の文字列です。"
  overload: System.Data.OleDb.OleDbConnection.Provider*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ReleaseObjectPool
  id: ReleaseObjectPool
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ReleaseObjectPool()
  nameWithType: OleDbConnection.ReleaseObjectPool()
  fullName: System.Data.OleDb.OleDbConnection.ReleaseObjectPool()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "示します、 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref>オブジェクト プールは、最後の基になる接続がリリースされたときに解放することができます。"
  remarks: "`ReleaseObjectPool`予約されているプールの無料リソースを呼び出すことができる<xref:System.Data.OleDb.OleDbConnection>オブジェクト</xref:System.Data.OleDb.OleDbConnection>。 たとえば、接続オブジェクトは使用されませんしばらくの間 OLE DB サービス通常プールされた接続のアクティブなまま維持する場合は、このメソッドを呼び出す可能性があります。 メソッドを呼び出すだけでは解放されないこと実際には、プール内に存在するアクティブな接続に注意してください。       プールが最後に破棄される前に、次を行う必要があります: 1。  呼び出す<xref:System.Data.OleDb.OleDbConnection.Close%2A>をプールに接続オブジェクトを返します</xref:System.Data.OleDb.OleDbConnection.Close%2A>。      2.  各接続オブジェクトをプールのタイムアウトを許可します。      3.  ReleaseObjectPool を呼び出します。      4.  ガベージ コレクションを起動します。       逆に、呼び出す場合は、<xref:System.Data.OleDb.OleDbConnection.Close%2A>をすべてのアクティブな接続と、ガベージ コレクションを呼び出すが、ReleaseObjectPool、プール内のオブジェクトを引き続き利用できますに予約されているリソースを呼び出す必要はありません</xref:System.Data.OleDb.OleDbConnection.Close%2A>。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection>, opens it, displays some of its properties, closes the connection, and releases the object pool to conserve resources.  \n  \n [!code-cs[Classic WebData OleDbConnection.ReleaseObjectPool Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_15_1.cs)]\n [!code-vb[Classic WebData OleDbConnection.ReleaseObjectPool Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_15_1.vb)]"
  syntax:
    content: public static void ReleaseObjectPool ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.ReleaseObjectPool*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ResetState
  id: ResetState
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ResetState()
  nameWithType: OleDbConnection.ResetState()
  fullName: System.Data.OleDb.OleDbConnection.ResetState()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "更新プログラム、<xref:System.Data.OleDb.OleDbConnection.State*>のプロパティ、 <xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref>オブジェクト</xref:System.Data.OleDb.OleDbConnection.State*>。"
  remarks: "OLE DB プロバイダーによっては、接続の現在の状態を確認できます。 たとえば、以降、データベース サーバーが再利用される場合を開いた、 <xref:System.Data.OleDb.OleDbConnection>、<xref:System.Data.OleDb.OleDbConnection.State%2A>プロパティが返す引き続き`Open`</xref:System.Data.OleDb.OleDbConnection.State%2A></xref:System.Data.OleDb.OleDbConnection>。 OLE DB プロバイダーとライブ接続でこの情報のポーリングをサポートする作業している場合は、ResetState メソッドを呼び出すし、チェック、<xref:System.Data.OleDb.OleDbConnection.State%2A>プロパティは、接続が不要になったかをする</xref:System.Data.OleDb.OleDbConnection.State%2A>。 ResetState メソッドは、接続の現在の状態を確認する OLE DB プロバイダーの機能に依存しています。 調べるには、OLE DB プロバイダーがこの機能をサポートしているかどうか、DBPROP_CONNECTIONSTATUS についてプロバイダーのマニュアルを確認してください。"
  syntax:
    content: public void ResetState ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnection.ResetState*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: OleDbConnection.ServerVersion
  fullName: System.Data.OleDb.OleDbConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "クライアントが接続されているサーバーのバージョンを表す文字列を取得します。"
  remarks: "ServerVersion プロパティは、OLE DB dbprop_dbmsver とプロパティにマップされます。 ServerVersion は、基になる OLE DB プロバイダーでサポートされていない、空の文字列が返されます。       形式は、バージョン*##. ##. ###*、ここで最初の&2; 桁はメジャー バージョン、次の&2; 桁はマイナーのバージョンであり、最後の&4; 桁の数字は、リリース バージョン。 プロバイダーは、このフォームで製品のバージョンをレンダリングする必要がありますが、製品に固有のバージョンを追加することも、たとえば、&quot;04.01.0000 Rdb 4.1&quot;です。 文字列の形式は、 *major.minor.build*主な場所、ビルドが&4; 桁の数字とマイナーは正確に&2; 桁の数字です。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read-only properties.  \n  \n [!code-vb[Classic WebData OleDbConnection.ServerVersion Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_6_1.vb)]\n [!code-cs[Classic WebData OleDbConnection.ServerVersion Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_6_1.cs)]"
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "接続先のサーバーのバージョン。"
  overload: System.Data.OleDb.OleDbConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.State
  id: State
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: State
  nameWithType: OleDbConnection.State
  fullName: System.Data.OleDb.OleDbConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "接続の現在の状態を取得します。"
  remarks: "次の状態の変更は許可されて: - から`Closed`に`Open`を使用して、<xref:System.Data.OleDb.OleDbConnection.Open%2A>のメソッド、<xref:System.Data.OleDb.OleDbConnection>オブジェクト</xref:System.Data.OleDb.OleDbConnection></xref:System.Data.OleDb.OleDbConnection.Open%2A>。      -から`Open`に`Closed`、いずれかを使用して、<xref:System.Data.OleDb.OleDbConnection.Close%2A>メソッドまたは**Dispose**のメソッド、<xref:System.Data.OleDb.OleDbConnection>オブジェクト</xref:System.Data.OleDb.OleDbConnection></xref:System.Data.OleDb.OleDbConnection.Close%2A>。      > [!NOTE] > で以前のバージョンの .NET Framework では、State プロパティを呼び出してオーバーヘッドが増加するアプリケーションの各呼び出しに対して開いている接続の OLE DB DBPROP_CONNECTIONSTATUS プロパティへの呼び出しが発生したためです。 .NET Framework 2.0 のリリースでは、これが不要の問題です。"
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Data.ConnectionState&quot;> </xref>値。 既定値は閉じられます。"
  overload: System.Data.OleDb.OleDbConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.OleDb.OleDbConnection
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OleDbConnection.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbConnection.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "このメンバーの説明は、次を参照してください。 &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;です。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.OleDb.OleDbConnection>にインスタンスをキャスト、<xref:System.ICloneable>インターフェイス</xref:System.ICloneable></xref:System.Data.OleDb.OleDbConnection>。"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "新しい<xref:System.Object>のこのインスタンスのコピーである</xref:System.Object>。"
  overload: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.OleDb.OleDbException
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbException
  nameWithType: OleDbException
  fullName: System.Data.OleDb.OleDbException
- uid: System.Data.OleDb.OleDbConnection.#ctor
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: OleDbConnection()
  nameWithType: OleDbConnection.OleDbConnection()
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection()
- uid: System.Data.OleDb.OleDbConnection.#ctor(System.String)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: OleDbConnection(String)
  nameWithType: OleDbConnection.OleDbConnection(String)
  fullName: System.Data.OleDb.OleDbConnection.OleDbConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: OleDbConnection.BeginTransaction()
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction()
- uid: System.Data.OleDb.OleDbTransaction
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbTransaction
  nameWithType: OleDbTransaction
  fullName: System.Data.OleDb.OleDbTransaction
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: OleDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.OleDb.OleDbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: OleDbConnection.ChangeDatabase(String)
  fullName: System.Data.OleDb.OleDbConnection.ChangeDatabase(String)
- uid: System.Data.OleDb.OleDbConnection.Close
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Close()
  nameWithType: OleDbConnection.Close()
  fullName: System.Data.OleDb.OleDbConnection.Close()
- uid: System.Data.OleDb.OleDbConnection.ConnectionString
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: OleDbConnection.ConnectionString
  fullName: System.Data.OleDb.OleDbConnection.ConnectionString
- uid: System.Data.OleDb.OleDbConnection.ConnectionTimeout
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: OleDbConnection.ConnectionTimeout
  fullName: System.Data.OleDb.OleDbConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.OleDb.OleDbConnection.CreateCommand
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: OleDbConnection.CreateCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateCommand()
- uid: System.Data.OleDb.OleDbCommand
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbCommand
  nameWithType: OleDbCommand
  fullName: System.Data.OleDb.OleDbCommand
- uid: System.Data.OleDb.OleDbConnection.CreateDbCommand
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: OleDbConnection.CreateDbCommand()
  fullName: System.Data.OleDb.OleDbConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.OleDb.OleDbConnection.Database
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Database
  nameWithType: OleDbConnection.Database
  fullName: System.Data.OleDb.OleDbConnection.Database
- uid: System.Data.OleDb.OleDbConnection.DataSource
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: DataSource
  nameWithType: OleDbConnection.DataSource
  fullName: System.Data.OleDb.OleDbConnection.DataSource
- uid: System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: OleDbConnection.Dispose(Boolean)
  fullName: System.Data.OleDb.OleDbConnection.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: OleDbConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(ITransaction)
- uid: System.EnterpriseServices.ITransaction
  parent: System.EnterpriseServices
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: System.EnterpriseServices.ITransaction
- uid: System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: OleDbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.OleDb.OleDbConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetOleDbSchemaTable(Guid,Object[])
  nameWithType: OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
  fullName: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(Guid,Object[])
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OleDb.OleDbConnection.GetSchema
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema()
  nameWithType: OleDbConnection.GetSchema()
  fullName: System.Data.OleDb.OleDbConnection.GetSchema()
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String)
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: OleDbConnection.GetSchema(String)
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String)
- uid: System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: OleDbConnection.GetSchema(String,String[])
  fullName: System.Data.OleDb.OleDbConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OleDb.OleDbConnection.InfoMessage
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: InfoMessage
  nameWithType: OleDbConnection.InfoMessage
  fullName: System.Data.OleDb.OleDbConnection.InfoMessage
- uid: System.Data.OleDb.OleDbInfoMessageEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbInfoMessageEventHandler
  nameWithType: OleDbInfoMessageEventHandler
  fullName: System.Data.OleDb.OleDbInfoMessageEventHandler
- uid: System.Data.OleDb.OleDbConnection.Open
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Open()
  nameWithType: OleDbConnection.Open()
  fullName: System.Data.OleDb.OleDbConnection.Open()
- uid: System.Data.OleDb.OleDbConnection.Provider
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Provider
  nameWithType: OleDbConnection.Provider
  fullName: System.Data.OleDb.OleDbConnection.Provider
- uid: System.Data.OleDb.OleDbConnection.ReleaseObjectPool
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ReleaseObjectPool()
  nameWithType: OleDbConnection.ReleaseObjectPool()
  fullName: System.Data.OleDb.OleDbConnection.ReleaseObjectPool()
- uid: System.Data.OleDb.OleDbConnection.ResetState
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ResetState()
  nameWithType: OleDbConnection.ResetState()
  fullName: System.Data.OleDb.OleDbConnection.ResetState()
- uid: System.Data.OleDb.OleDbConnection.ServerVersion
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: OleDbConnection.ServerVersion
  fullName: System.Data.OleDb.OleDbConnection.ServerVersion
- uid: System.Data.OleDb.OleDbConnection.State
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: State
  nameWithType: OleDbConnection.State
  fullName: System.Data.OleDb.OleDbConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OleDbConnection.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbConnection.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OleDb.OleDbConnection.#ctor*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: OleDbConnection
  nameWithType: OleDbConnection.OleDbConnection
- uid: System.Data.OleDb.OleDbConnection.BeginDbTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: OleDbConnection.BeginDbTransaction
- uid: System.Data.OleDb.OleDbConnection.BeginTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: OleDbConnection.BeginTransaction
- uid: System.Data.OleDb.OleDbConnection.ChangeDatabase*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: OleDbConnection.ChangeDatabase
- uid: System.Data.OleDb.OleDbConnection.Close*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Close
  nameWithType: OleDbConnection.Close
- uid: System.Data.OleDb.OleDbConnection.ConnectionString*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: OleDbConnection.ConnectionString
- uid: System.Data.OleDb.OleDbConnection.ConnectionTimeout*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: OleDbConnection.ConnectionTimeout
- uid: System.Data.OleDb.OleDbConnection.CreateCommand*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateCommand
  nameWithType: OleDbConnection.CreateCommand
- uid: System.Data.OleDb.OleDbConnection.CreateDbCommand*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: OleDbConnection.CreateDbCommand
- uid: System.Data.OleDb.OleDbConnection.Database*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Database
  nameWithType: OleDbConnection.Database
- uid: System.Data.OleDb.OleDbConnection.DataSource*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: DataSource
  nameWithType: OleDbConnection.DataSource
- uid: System.Data.OleDb.OleDbConnection.Dispose*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Dispose
  nameWithType: OleDbConnection.Dispose
- uid: System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistDistributedTransaction
  nameWithType: OleDbConnection.EnlistDistributedTransaction
- uid: System.Data.OleDb.OleDbConnection.EnlistTransaction*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: OleDbConnection.EnlistTransaction
- uid: System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetOleDbSchemaTable
  nameWithType: OleDbConnection.GetOleDbSchemaTable
- uid: System.Data.OleDb.OleDbConnection.GetSchema*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: GetSchema
  nameWithType: OleDbConnection.GetSchema
- uid: System.Data.OleDb.OleDbConnection.Open*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Open
  nameWithType: OleDbConnection.Open
- uid: System.Data.OleDb.OleDbConnection.Provider*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: Provider
  nameWithType: OleDbConnection.Provider
- uid: System.Data.OleDb.OleDbConnection.ReleaseObjectPool*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ReleaseObjectPool
  nameWithType: OleDbConnection.ReleaseObjectPool
- uid: System.Data.OleDb.OleDbConnection.ResetState*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ResetState
  nameWithType: OleDbConnection.ResetState
- uid: System.Data.OleDb.OleDbConnection.ServerVersion*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: OleDbConnection.ServerVersion
- uid: System.Data.OleDb.OleDbConnection.State*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: State
  nameWithType: OleDbConnection.State
- uid: System.Data.OleDb.OleDbConnection.System#ICloneable#Clone*
  parent: System.Data.OleDb.OleDbConnection
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OleDbConnection.System.ICloneable.Clone
