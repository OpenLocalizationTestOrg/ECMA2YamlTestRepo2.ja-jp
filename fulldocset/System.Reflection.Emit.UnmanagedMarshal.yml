### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.UnmanagedMarshal
  id: UnmanagedMarshal
  children:
  - System.Reflection.Emit.UnmanagedMarshal.BaseType
  - System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)
  - System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)
  - System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  - System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  - System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  - System.Reflection.Emit.UnmanagedMarshal.ElementCount
  - System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  - System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  langs:
  - csharp
  name: UnmanagedMarshal
  nameWithType: UnmanagedMarshal
  fullName: System.Reflection.Emit.UnmanagedMarshal
  type: Class
  summary: "アンマネージ コードからフィールドをマーシャ リングする方法を説明するクラスを表します。 このクラスは継承できません。"
  remarks: "コード例では、この旧式の型の回避策を示します。       マーシャ リングは、リモート プロシージャ コールを確立するためのパッケージ化とアンパッケージ化パラメーターのプロセスです。 、マーシャ リング中にフィールドをマネージ型の形式が、対応するアンマネージ型の形式と異なる場合に形式変換を受ける可能性があります。 マーシャ リングするなど、`String`アンマネージ BSTR と型。 いくつかの形式の変換は、ランタイムによって自動的に処理されます。 既定の動作をオーバーライドするには、使用する必要があります、`UnmanagedMarshal`形式変換を定義するクラス。"
  example:
  - "The following code example shows replacement code for the obsolete UnmanagedMarshal type. The example emits a single-module assembly named `EmitMarshalAs.dll`, containing a type named `Sample`. The type has a method named `Test`, with one parameter of type <xref:System.String>. The code example applies the <xref:System.Runtime.InteropServices.MarshalAsAttribute> with <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> to the parameter.  \n  \n You can use the [Ildasm.exe (IL Disassembler)](~/add/includes/ajax-current-ext-md.md) to examine the emitted assembly and observe that the parameter is marked `marshal(bstr)`.  \n  \n [!code-cs[UnmanagedMarshalObsolete#1](~/add/codesnippet/csharp/t-system.reflection.emit_1.cs)]\n [!code-cpp[UnmanagedMarshalObsolete#1](~/add/codesnippet/cpp/t-system.reflection.emit_1.cpp)]\n [!code-vb[UnmanagedMarshalObsolete#1](~/add/codesnippet/visualbasic/t-system.reflection.emit_1.vb)]"
  syntax:
    content: >-
      [System.Obsolete("An alternate API is available: Emit the MarshalAs custom attribute instead. http://go.microsoft.com/fwlink/?linkid=14202")]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class UnmanagedMarshal
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType
  id: BaseType
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: BaseType
  nameWithType: UnmanagedMarshal.BaseType
  fullName: System.Reflection.Emit.UnmanagedMarshal.BaseType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "アンマネージの基本型を取得します。 このプロパティは、読み取り専用です。"
  syntax:
    content: public System.Runtime.InteropServices.UnmanagedType BaseType { get; }
    return:
      type: System.Runtime.InteropServices.UnmanagedType
      description: "<xref uid=&quot;langword_csharp_UnmanagedType&quot; name=&quot;UnmanagedType&quot; href=&quot;&quot;> </xref>オブジェクト。"
  overload: System.Reflection.Emit.UnmanagedMarshal.BaseType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "管理されていない種類ではありません、 <xref uid=&quot;langword_csharp_LPArray&quot; name=&quot;LPArray&quot; href=&quot;&quot;> </xref>または<xref uid=&quot;langword_csharp_SafeArray&quot; name=&quot;SafeArray&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)
  id: DefineByValArray(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineByValArray(Int32)
  nameWithType: UnmanagedMarshal.DefineByValArray(Int32)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "固定長配列をアンマネージ コードにマーシャ リングする (ByValArray) を指定します。"
  remarks: "`DefineByValArray`メソッドは、単純なネイティブ マーシャ リングではありません。       これらの静的コンス トラクターを使用してアンマネージ マーシャ リングの構成要素のみが可能です。       配列のマーシャ リングは、整数パラメーターをマーシャ リングよりも複雑なプロセスです。 配列メンバーは、相手側に正確に配列を再構築できるように、特定の順序でコピーされます。"
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineByValArray (int elemCount);
    parameters:
    - id: elemCount
      type: System.Int32
      description: "固定長配列の要素の数。"
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: "<xref href=&quot;System.Reflection.Emit.UnmanagedMarshal&quot;> </xref>オブジェクト。"
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引数は、単純なネイティブ型ではありません。"
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)
  id: DefineByValTStr(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineByValTStr(Int32)
  nameWithType: UnmanagedMarshal.DefineByValTStr(Int32)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "固定長配列バッファーをアンマネージ コードにマーシャ リングする (ByValTStr) の文字列を指定します。"
  remarks: "`DefineByValStr`メソッドは、単純なネイティブ マーシャ リングではありません。       これらの静的コンス トラクターを使用してアンマネージ マーシャ リングの構成要素のみが可能です。       配列のマーシャ リングは、整数パラメーターをマーシャ リングよりも複雑なプロセスです。 配列メンバーは、相手側に正確に配列を再構築できるように、特定の順序でコピーされます。"
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineByValTStr (int elemCount);
    parameters:
    - id: elemCount
      type: System.Int32
      description: "固定長配列バッファー内の要素の数。"
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: "<xref href=&quot;System.Reflection.Emit.UnmanagedMarshal&quot;> </xref>オブジェクト。"
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引数は、単純なネイティブ型ではありません。"
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  id: DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineLPArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineLPArray(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(UnmanagedType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "指定します、 <xref uid=&quot;langword_csharp_LPArray&quot; name=&quot;LPArray&quot; href=&quot;&quot;> </xref>アンマネージ コードにマーシャ リングします。 長さ、 <xref uid=&quot;langword_csharp_LPArray&quot; name=&quot;LPArray&quot; href=&quot;&quot;> </xref>は実行時に実際のマーシャ リングされた配列のサイズによって決まります。"
  remarks: "`DefineLPArray`メソッドは、単純なネイティブ マーシャ リングではありません。       これらの静的コンス トラクターを使用してアンマネージ マーシャ リングの構成要素のみが可能です。       配列のマーシャ リングは、整数パラメーターをマーシャ リングよりも複雑なプロセスです。 配列メンバーは、相手側に正確に配列を再構築できるように、特定の順序でコピーされます。"
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineLPArray (System.Runtime.InteropServices.UnmanagedType elemType);
    parameters:
    - id: elemType
      type: System.Runtime.InteropServices.UnmanagedType
      description: "アンマネージの型、配列にマーシャ リングします。"
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: "<xref href=&quot;System.Reflection.Emit.UnmanagedMarshal&quot;> </xref>オブジェクト。"
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引数は、単純なネイティブ型ではありません。"
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  id: DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineSafeArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineSafeArray(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(UnmanagedType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "指定します、 <xref uid=&quot;langword_csharp_SafeArray&quot; name=&quot;SafeArray&quot; href=&quot;&quot;> </xref>アンマネージ コードにマーシャ リングします。"
  remarks: "`DefineSafeArray`メソッドは、単純なネイティブ マーシャ リングではありません。       これらの静的コンス トラクターを使用してアンマネージ マーシャ リングの構成要素のみが可能です。       配列のマーシャ リングは、整数パラメーターをマーシャ リングよりも複雑なプロセスです。 配列メンバーは、相手側に正確に配列を再構築できるように、特定の順序でコピーされます。"
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineSafeArray (System.Runtime.InteropServices.UnmanagedType elemType);
    parameters:
    - id: elemType
      type: System.Runtime.InteropServices.UnmanagedType
      description: "基本型、または<xref uid=&quot;langword_csharp_UnmanagedType&quot; name=&quot;UnmanagedType&quot; href=&quot;&quot;></xref>配列の各要素のです。"
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: "<xref href=&quot;System.Reflection.Emit.UnmanagedMarshal&quot;> </xref>オブジェクト。"
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引数は、単純なネイティブ型ではありません。"
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  id: DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineUnmanagedMarshal(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "アンマネージ コードにマーシャ リングするのには、特定の型を指定します。"
  remarks: "<xref:System.Runtime.InteropServices.UnmanagedType>このメソッドに渡される単純なネイティブ型でなければなりません</xref:System.Runtime.InteropServices.UnmanagedType>。 次の値のいずれも使用することがあります: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>、 <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>、 <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>、 <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>、または<xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>.</xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>       このメソッドを使用してアンマネージ マーシャ リングの構成要素のみが可能です。"
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineUnmanagedMarshal (System.Runtime.InteropServices.UnmanagedType unmanagedType);
    parameters:
    - id: unmanagedType
      type: System.Runtime.InteropServices.UnmanagedType
      description: "型のマーシャ リング先のアンマネージ型。"
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: "<xref href=&quot;System.Reflection.Emit.UnmanagedMarshal&quot;> </xref>オブジェクト。"
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引数は、単純なネイティブ型ではありません。"
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount
  id: ElementCount
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: ElementCount
  nameWithType: UnmanagedMarshal.ElementCount
  fullName: System.Reflection.Emit.UnmanagedMarshal.ElementCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "要素の数を取得します。 このプロパティは、読み取り専用です。"
  remarks: "`ElementCount`がある場合にのみ、`NativeTypeFixedArray`です。"
  syntax:
    content: public int ElementCount { get; }
    return:
      type: System.Int32
      description: "要素の数を示す整数。"
  overload: System.Reflection.Emit.UnmanagedMarshal.ElementCount*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引数は、アンマネージの要素数ではありません。"
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  id: GetUnmanagedType
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: GetUnmanagedType
  nameWithType: UnmanagedMarshal.GetUnmanagedType
  fullName: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "アンマネージ型を示します。 このプロパティは、読み取り専用です。"
  remarks: "`GetUnmanagedType`プロパティは、ネイティブ型のアクセサー関数。"
  syntax:
    content: public System.Runtime.InteropServices.UnmanagedType GetUnmanagedType { get; }
    return:
      type: System.Runtime.InteropServices.UnmanagedType
      description: "<xref:System.Runtime.InteropServices.UnmanagedType>オブジェクト</xref:System.Runtime.InteropServices.UnmanagedType>。"
  overload: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  id: IIDGuid
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: IIDGuid
  nameWithType: UnmanagedMarshal.IIDGuid
  fullName: System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "GUID を取得します。 このプロパティは、読み取り専用です。"
  remarks: "このプロパティは、常に Guid.Empty を返します。 このプロパティは、将来のリリースで削除する可能性があります。"
  syntax:
    content: public Guid IIDGuid { get; }
    return:
      type: System.Guid
      description: "A<xref:System.Guid>オブジェクト</xref:System.Guid>。"
  overload: System.Reflection.Emit.UnmanagedMarshal.IIDGuid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引数は、カスタム マーシャラーではありません。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: BaseType
  nameWithType: UnmanagedMarshal.BaseType
  fullName: System.Reflection.Emit.UnmanagedMarshal.BaseType
- uid: System.Runtime.InteropServices.UnmanagedType
  parent: System.Runtime.InteropServices
  isExternal: true
  name: UnmanagedType
  nameWithType: UnmanagedType
  fullName: System.Runtime.InteropServices.UnmanagedType
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValArray(Int32)
  nameWithType: UnmanagedMarshal.DefineByValArray(Int32)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(Int32)
- uid: System.Reflection.Emit.UnmanagedMarshal
  parent: System.Reflection.Emit
  isExternal: false
  name: UnmanagedMarshal
  nameWithType: UnmanagedMarshal
  fullName: System.Reflection.Emit.UnmanagedMarshal
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValTStr(Int32)
  nameWithType: UnmanagedMarshal.DefineByValTStr(Int32)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(Int32)
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineLPArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineLPArray(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(UnmanagedType)
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineSafeArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineSafeArray(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(UnmanagedType)
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineUnmanagedMarshal(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
  fullName: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: ElementCount
  nameWithType: UnmanagedMarshal.ElementCount
  fullName: System.Reflection.Emit.UnmanagedMarshal.ElementCount
- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: GetUnmanagedType
  nameWithType: UnmanagedMarshal.GetUnmanagedType
  fullName: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: IIDGuid
  nameWithType: UnmanagedMarshal.IIDGuid
  fullName: System.Reflection.Emit.UnmanagedMarshal.IIDGuid
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: BaseType
  nameWithType: UnmanagedMarshal.BaseType
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValArray
  nameWithType: UnmanagedMarshal.DefineByValArray
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValTStr
  nameWithType: UnmanagedMarshal.DefineByValTStr
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineLPArray
  nameWithType: UnmanagedMarshal.DefineLPArray
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineSafeArray
  nameWithType: UnmanagedMarshal.DefineSafeArray
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineUnmanagedMarshal
  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal
- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: ElementCount
  nameWithType: UnmanagedMarshal.ElementCount
- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: GetUnmanagedType
  nameWithType: UnmanagedMarshal.GetUnmanagedType
- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: IIDGuid
  nameWithType: UnmanagedMarshal.IIDGuid
