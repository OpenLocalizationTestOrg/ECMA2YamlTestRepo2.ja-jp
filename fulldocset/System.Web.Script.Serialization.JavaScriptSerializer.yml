### YamlMime:ManagedReference
items:
- uid: System.Web.Script.Serialization.JavaScriptSerializer
  id: JavaScriptSerializer
  children:
  - System.Web.Script.Serialization.JavaScriptSerializer.#ctor
  - System.Web.Script.Serialization.JavaScriptSerializer.#ctor(System.Web.Script.Serialization.JavaScriptTypeResolver)
  - System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(System.Object,System.Type)
  - System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)
  - System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(System.String,System.Type)
  - System.Web.Script.Serialization.JavaScriptSerializer.Deserialize``1(System.String)
  - System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(System.String)
  - System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength
  - System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit
  - System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})
  - System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object)
  - System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object,System.Text.StringBuilder)
  langs:
  - csharp
  name: JavaScriptSerializer
  nameWithType: JavaScriptSerializer
  fullName: System.Web.Script.Serialization.JavaScriptSerializer
  type: Class
  summary: '[Json.NET](http://www.newtonsoft.com/json)に使用されるシリアル化および逆シリアル化する必要があります。 AJAX 対応アプリケーションをシリアル化および逆シリアル化の機能を提供します。'
  remarks: "The JavaScriptSerializer class is used internally by the asynchronous communication layer to serialize and deserialize the data that is passed between the browser and the Web server. You cannot access that instance of the serializer. However, this class exposes a public API. Therefore, you can use the class when you want to work with JavaScript Object Notation (JSON) in managed code.  \n  \n To serialize an object, use the <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A> method. To deserialize a JSON string, use the <xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A> or <xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A> methods. To serialize and deserialize types that are not natively supported by JavaScriptSerializer, implement custom converters by using the <xref:System.Web.Script.Serialization.JavaScriptConverter> class. Then register the converters by using the <xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> method.  \n  \n## Mapping Between Managed Types and JSON  \n The following table shows the mapping between managed types and JSON for the serialization process. These managed types are natively supported by JavaScriptSerializer. When you are deserializing from a JSON string to a managed type, the same mapping applies. However, deserialization can be asymmetric; not all serializable managed types can be deserialized from JSON.  \n  \n> [!NOTE]\n>  A multidimensional array is serialized as a one-dimensional array, and you should use it as a flat array.  \n  \n|Managed type|JSON equivalent|  \n|------------------|---------------------|  \n|<xref:System.String> (UTF-8 encoding only).|String|  \n|<xref:System.Char>|String|  \n|Single null char (such as, \\0 )|Null|  \n|<xref:System.Boolean>|Boolean. Represented in JSON as `true` or `false`|  \n|`null` (`null` object references and <xref:System.Nullable> value types).|A string value of null|  \n|<xref:System.DBNull>|A string value of null|  \n|Primitive numeric (or numeric-compatible) types: <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Double>, and <xref:System.Single>. The culture-invariant string representation is used.|Number|  \n|<xref:System.DateTime>|Date object, represented in JSON as \"\\\\/Date(number of ticks)\\\\/\". The number of ticks is a positive or negative long value that indicates the number of ticks (milliseconds) that have elapsed since midnight 01 January, 1970 UTC.<br /><br /> The maximum supported date value is <xref:System.DateTime.MaxValue> (12/31/9999 11:59:59 PM) and the minimum supported date value is <xref:System.DateTime.MinValue> (1/1/0001 12:00:00 AM).|  \n|Enumerations of integer type|Integer equivalent of the enumeration value|  \n|Types that implement <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> that are not also implementations of <xref:System.Collections.IDictionary> or <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>. This includes types such as <xref:System.Array>, <xref:System.Collections.ArrayList>, and <xref:System.Collections.Generic.List%601>.|Array that uses JSON array syntax|  \n|Types that implement <xref:System.Collections.IDictionary> or <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>. This includes types such as <xref:System.Collections.Generic.Dictionary%602> and <xref:System.Collections.Hashtable>.|JavaScript object that uses JSON dictionary syntax|  \n|Custom concrete (non-abstract) types that have public instance properties that have get accessors or public instance fields.<br /><br /> Note that public write-only properties, public property or public field attributes marked with <xref:System.Web.Script.Serialization.ScriptIgnoreAttribute>, and public indexed properties in these types are ignored.|JavaScript object that uses JSON dictionary syntax. A special metadata property named \"__type\" is included to ensure correct deserialization. Make sure that public instance properties have get and set accessors to ensure correct deserialization.|  \n|<xref:System.Guid>|String representation of a GUID|  \n|<xref:System.Uri>|String representation of the return value of <xref:System.Uri.GetComponents%2A>|"
  example:
  - "The first example provides a simple illustration of how to serialize and deserialize data objects. It requires a class names Person which is shown below.  \n  \n [!code-cs[System.Web.Script.Serialization.JavaScriptSerializer#1](~/add/codesnippet/csharp/t-system.web.script.seri_1_1.cs)]\n [!code-vb[System.Web.Script.Serialization.JavaScriptSerializer#1](~/add/codesnippet/visualbasic/t-system.web.script.seri_1_1.vb)]  \n  \n [!code-cs[System.Web.Script.Serialization.JavaScriptSerializer#2](~/add/codesnippet/csharp/t-system.web.script.seri_1_2.cs)]\n [!code-vb[System.Web.Script.Serialization.JavaScriptSerializer#2](~/add/codesnippet/visualbasic/t-system.web.script.seri_1_2.vb)]  \n  \n The next example shows a more complicated and complete project that uses the JavaScriptSerializer class to save and restore the state of an object by using JSON serialization. This code uses a custom converter that is provided for the <xref:System.Web.Script.Serialization.JavaScriptConverter> class.  \n  \n [!code-vb[System.Web.Script.Serialization#4](~/add/codesnippet/visualbasic/t-system.web.script.seri_1_3.aspx)]\n [!code-cs[System.Web.Script.Serialization#4](~/add/codesnippet/csharp/t-system.web.script.seri_1_3.aspx)]"
  syntax:
    content: public class JavaScriptSerializer
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.#ctor
  id: '#ctor'
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: JavaScriptSerializer()
  nameWithType: JavaScriptSerializer.JavaScriptSerializer()
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.JavaScriptSerializer()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref>型リゾルバーを持たないクラスです。"
  remarks: "インスタンス、<xref:System.Web.Script.Serialization.JavaScriptSerializer>クラスの型競合回避モジュールが、シリアル化された JSON 文字列に型のメタデータ プロパティ (名前は&quot;_ _type&quot;) を含めないことがなく</xref:System.Web.Script.Serialization.JavaScriptSerializer>。 型のメタデータ プロパティを使って、<xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>と<xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A>メソッドは、適切なマネージを確認するのには、JSON 文字列を変換する型します</xref:System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject%2A></xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>。 型競合回避モジュールについては、<xref:System.Web.Script.Serialization.JavaScriptTypeResolver>クラス</xref:System.Web.Script.Serialization.JavaScriptTypeResolver>を参照してください。"
  syntax:
    content: public JavaScriptSerializer ();
    parameters: []
  overload: System.Web.Script.Serialization.JavaScriptSerializer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.#ctor(System.Web.Script.Serialization.JavaScriptTypeResolver)
  id: '#ctor(System.Web.Script.Serialization.JavaScriptTypeResolver)'
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: JavaScriptSerializer(JavaScriptTypeResolver)
  nameWithType: JavaScriptSerializer.JavaScriptSerializer(JavaScriptTypeResolver)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.JavaScriptSerializer(JavaScriptTypeResolver)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref>カスタムの型リゾルバーを持つクラスであります。"
  remarks: "オブジェクトをシリアル化時に、<xref:System.Web.Script.Serialization.JavaScriptSerializer>クラスの使用、`resolver`型のメタデータ プロパティ (&quot;_ _type&quot;) のシリアル化された JSON 文字列に含める適切な値を決定するパラメーター</xref:System.Web.Script.Serialization.JavaScriptSerializer> 。 同様に、時、<xref:System.Web.Script.Serialization.JavaScriptSerializer>クラスが、JSON 文字列を逆シリアル化、競合回避モジュールのインスタンスを使用して適切なマネージ型に型のメタデータ プロパティの値を解決します</xref:System.Web.Script.Serialization.JavaScriptSerializer>。       設定することができます、`resolver`パラメーターを`null`、呼び出すことと同じである、<xref:System.Web.Script.Serialization.JavaScriptSerializer.%23ctor%2A>コンス トラクター</xref:System.Web.Script.Serialization.JavaScriptSerializer.%23ctor%2A> 。       インスタンス<xref:System.Web.Script.Serialization.JavaScriptSerializer>特殊な競合回避モジュールを使用するクライアント スクリプトから Web サービスを呼び出す非同期通信レイヤーで使用されている</xref:System.Web.Script.Serialization.JavaScriptSerializer>。 この型の競合回避モジュールの種類を逆シリアル化することができますを Web サービスのメソッドのシグネチャまたは付いてで定義されたに限定する、<xref:System.Web.Script.Services.GenerateScriptTypeAttribute>適用します</xref:System.Web.Script.Services.GenerateScriptTypeAttribute>。 この組み込みの型リゾルバーをプログラムで変更することはできません。      > [!IMPORTANT] >、カスタム型の競合回避モジュールで初期化されたこのオブジェクトのインスタンスを使用すると、セキュリティ上のリスクが発生することができます。 このオブジェクトを使用して、信頼されたデータだけです。 詳細については、次を参照してください。[信頼されていないデータのセキュリティ リスク](http://go.microsoft.com/fwlink/?LinkId=330378)です。"
  syntax:
    content: public JavaScriptSerializer (System.Web.Script.Serialization.JavaScriptTypeResolver resolver);
    parameters:
    - id: resolver
      type: System.Web.Script.Serialization.JavaScriptTypeResolver
      description: "カスタムの型リゾルバー オブジェクト。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(System.Object,System.Type)
  id: ConvertToType(System.Object,System.Type)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: ConvertToType(Object,Type)
  nameWithType: JavaScriptSerializer.ConvertToType(Object,Type)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(Object,Type)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "指定したオブジェクトを指定した型に変換します。"
  remarks: "ときに、<xref:System.Web.Script.Serialization.JavaScriptSerializer>インスタンスは、シリアライザーの呼び出し、カスタムのコンバーターが登録されている型をシリアル化、 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>JSON 形式の文字列に変換される名前/値ペアのディクショナリを取得します</xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A></xref:System.Web.Script.Serialization.JavaScriptSerializer>。       <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>オブジェクト グラフが複雑すぎるため、またはのインスタンスが登録されている場合、メソッドは例外をスローできますできます<xref:System.Web.Script.Serialization.JavaScriptConverter>コンバーター再帰しようとしました</xref:System.Web.Script.Serialization.JavaScriptConverter></xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>。"
  syntax:
    content: public object ConvertToType (object obj, Type targetType);
    parameters:
    - id: obj
      type: System.Object
      description: "変換するオブジェクト。"
    - id: targetType
      type: System.Type
      description: "オブジェクトに変換する型。"
    return:
      type: System.Object
      description: "シリアル化された JSON 文字列。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "結果として得られる JSON 形式の文字列は、 <xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*>。</xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*>の値を超えています。       - または - <code> obj </code>循環参照が含まれています。 循環参照は、子オブジェクトが、親オブジェクトへの参照を親オブジェクトが子オブジェクトへの参照を持つ場合に発生します。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "定義されている再帰の制限<xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>を超えました</xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>。"
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)
  id: ConvertToType``1(System.Object)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: ConvertToType(Object)
  nameWithType: JavaScriptSerializer.ConvertToType(Object)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(Object)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  syntax:
    content: public T ConvertToType<T> (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "追加します。"
    return:
      type: T
      description: "追加します。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(System.String,System.Type)
  id: Deserialize(System.String,System.Type)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: Deserialize(String,Type)
  nameWithType: JavaScriptSerializer.Deserialize(String,Type)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(String,Type)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "指定した型のオブジェクトを JSON 形式の文字列に変換します。"
  remarks: "この逆シリアル化メソッドはキャストをする方法、特定の種類のオブジェクト グラフのルートを試みませんを<xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>メソッドします</xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>。"
  syntax:
    content: public object Deserialize (string input, Type targetType);
    parameters:
    - id: input
      type: System.String
      description: "逆シリアル化する JSON 文字列。"
    - id: targetType
      type: System.Type
      description: "結果として得られるオブジェクトの型。"
    return:
      type: System.Object
      description: "逆シリアル化されたオブジェクトです。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "長さ<code> input </code>の値を超える<> *> です。      - または - で定義されている再帰の制限<> *> を超えました。       - または - <code> input </code>に予期しない文字シーケンスが含まれています。       - または - <code> input </code>はディクショナリ型であり、文字列以外のキー値が発生しました。       - または - <code> input </code>対象の型では使用できないメンバーの定義が含まれています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>input</code>シリアライザーに現在関連付けられている型の競合回避モジュールは、カスタムの型は、対応するマネージ型を見つけることができませんを示す&quot;_ _type&quot;プロパティが含まれています。       - または -<code>input</code>予想されるターゲットの型に割り当てることができませんが、カスタムの型を対応する JSON 文字列を逆シリアル化の結果を示す&quot;_ _type&quot;プロパティが含まれています。       - または -<code>input</code>をいずれかを示す&quot;_ _type&quot;プロパティを含む<xref:System.Object>または非インスタンス化可能な型 (たとえば、抽象型またはインターフェイス)。       - または - JSON 配列を JSON の逆シリアル化対象として使用するためにサポートされていない配列に似たマネージ型に変換するしようとしました。       - または - 変換することはできません<code>input</code>対象の型にします。"
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize``1(System.String)
  id: Deserialize``1(System.String)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: Deserialize(String)
  nameWithType: JavaScriptSerializer.Deserialize(String)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  syntax:
    content: public T Deserialize<T> (string input);
    parameters:
    - id: input
      type: System.String
      description: "追加します。"
    return:
      type: T
      description: "追加します。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(System.String)
  id: DeserializeObject(System.String)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: DeserializeObject(String)
  nameWithType: JavaScriptSerializer.DeserializeObject(String)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "指定された JSON 文字列をオブジェクト グラフに変換します。"
  remarks: "この逆シリアル化メソッドは、特定の種類をオブジェクト グラフのルートのキャストを試みませんと同様、<xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>メソッド</xref:System.Web.Script.Serialization.JavaScriptSerializer.Deserialize%2A>。"
  syntax:
    content: public object DeserializeObject (string input);
    parameters:
    - id: input
      type: System.String
      description: "逆シリアル化する JSON 文字列。"
    return:
      type: System.Object
      description: "逆シリアル化されたオブジェクトです。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> input </code>長さの値を超える<> *> です。      - または - で定義されている再帰の制限<> *> を超えました。       - または - <code> input </code>に予期しない文字シーケンスが含まれています。       - または - <code> input </code>はディクショナリ型であり、文字列以外のキー値が発生しました。       - または - <code> input </code>対象の型では使用できないメンバーの定義が含まれています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>input</code>シリアライザーに現在関連付けられている型の競合回避モジュールは、カスタムの型は、対応するマネージ型を見つけることができませんを示す&quot;_ _type&quot;プロパティが含まれています。       - または -<code>input</code>予想されるターゲットの型に割り当てることができませんが、カスタムの型を対応する JSON 文字列を逆シリアル化の結果を示す&quot;_ _type&quot;プロパティが含まれています。       - または -<code>input</code>をいずれかを示す&quot;_ _type&quot;プロパティを含む<xref:System.Object>または非インスタンス化可能な型 (たとえば、抽象型またはインターフェイス)。       - または - JSON 配列を JSON の逆シリアル化対象として使用するためにサポートされていない配列に似たマネージ型に変換するしようとしました。       - または - 変換することはできません<code>input</code>対象の型にします。"
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength
  id: MaxJsonLength
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: MaxJsonLength
  nameWithType: JavaScriptSerializer.MaxJsonLength
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "取得または設定によって受け入れられる JSON 文字列の最大長、 <xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref>クラスです。"
  remarks: '<xref:System.Web.Script.Serialization.JavaScriptSerializer>クラス</xref:System.Web.Script.Serialization.JavaScriptSerializer>のインスタンスを明示的に作成する場合にのみ、MaxJsonLength プロパティの値が適用されます。 使用して、`jsonSerialization`非同期通信レイヤーで使用される内部シリアライザー インスタンスの最大の長さを設定する構成ファイルの要素。 シリアル化の構成要素の詳細については、次を参照してください。[する方法: Microsoft Ajax の ASP.NET サービスを構成する](~/add/includes/ajax-current-ext-md.md)です。'
  syntax:
    content: public int MaxJsonLength { get; set; }
    return:
      type: System.Int32
      description: "JSON 文字列の最大長。 既定では 2,097, 152 文字は Unicode 文字列データの 4 MB に相当です。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "1 より小さい値に設定されます。"
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit
  id: RecursionLimit
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: RecursionLimit
  nameWithType: JavaScriptSerializer.RecursionLimit
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "取得または処理されるオブジェクト レベルの数の制限を設定します。"
  remarks: "RecursionLimit プロパティは、オブジェクトの階層内のレベル数を参照する<xref:System.Web.Script.Serialization.JavaScriptSerializer>、次の場合に処理されます::、<xref:System.Web.Script.Serialization.JavaScriptSerializer>クラスが、JSON 文字列を逆シリアル化します</xref:System.Web.Script.Serialization.JavaScriptSerializer></xref:System.Web.Script.Serialization.JavaScriptSerializer>。      場合、<xref:System.Web.Script.Serialization.JavaScriptSerializer>クラスがシリアル化中に、オブジェクト グラフをウォークします</xref:System.Web.Script.Serialization.JavaScriptSerializer>。       RecursionLimit の値は、明示的に<xref:System.Web.Script.Serialization.JavaScriptSerializer>クラス</xref:System.Web.Script.Serialization.JavaScriptSerializer>のインスタンスを作成する場合にのみ適用されます。 使用して、`jsonSerialization`非同期通信レイヤーで使用される内部シリアライザーのインスタンスを処理するオブジェクトの各レベルの数を設定する構成ファイルの要素。 シリアル化の構成要素の詳細については、次を参照してください。[する方法: Microsoft Ajax の ASP.NET サービスを構成する](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public int RecursionLimit { get; set; }
    return:
      type: System.Int32
      description: "オブジェクトの各レベルの数。 既定値は 100 です。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "1 より小さい値に設定されます。"
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})
  id: RegisterConverters(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: RegisterConverters(IEnumerable<JavaScriptConverter>)
  nameWithType: JavaScriptSerializer.RegisterConverters(IEnumerable<JavaScriptConverter>)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(IEnumerable<JavaScriptConverter>)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "カスタムのコンバーターを登録、 <xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref>インスタンス。"
  remarks: "1 つまたは複数のカスタムのコンバーターを登録することができます、 <xref:System.Web.Script.Serialization.JavaScriptSerializer>RegisterConverters メソッドを使用してインスタンス</xref:System.Web.Script.Serialization.JavaScriptSerializer>。 カスタムのコンバーターが登録されると、<xref:System.Web.Script.Serialization.JavaScriptSerializer>マネージ型をシリアル化とマネージ型を JSON 文字列を逆シリアル化するコンバーターを使用します</xref:System.Web.Script.Serialization.JavaScriptSerializer>。       複数のコンバーターは、同じに登録されていることができます<xref:System.Web.Script.Serialization.JavaScriptSerializer>インスタンス、およびこれらのコンバーターは、同じ型のサポートを指定できます</xref:System.Web.Script.Serialization.JavaScriptSerializer>。 特定の種類に対して登録されている最後のコンバーターで使用される&1; つは、その結果、<xref:System.Web.Script.Serialization.JavaScriptSerializer>型をシリアル化します</xref:System.Web.Script.Serialization.JavaScriptSerializer>。       カスタムのコンバーターの詳細については、<xref:System.Web.Script.Serialization.JavaScriptConverter>クラス</xref:System.Web.Script.Serialization.JavaScriptConverter>を参照してください。"
  example:
  - "The following example shows how to register a custom converter with a <xref:System.Web.Script.Serialization.JavaScriptSerializer> instance. This code example is part of a larger example provided for the <xref:System.Web.Script.Serialization.JavaScriptSerializer>class.  \n  \n [!code-vb[System.Web.Script.Serialization#1](~/add/codesnippet/visualbasic/0b038c1f-1fc5-4957-9daf-_1.aspx)]\n [!code-cs[System.Web.Script.Serialization#1](~/add/codesnippet/csharp/0b038c1f-1fc5-4957-9daf-_1.aspx)]"
  syntax:
    content: public void RegisterConverters (System.Collections.Generic.IEnumerable<System.Web.Script.Serialization.JavaScriptConverter> converters);
    parameters:
    - id: converters
      type: System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter}
      description: "登録するカスタムのコンバーターを格納する配列。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>converters</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object)
  id: Serialize(System.Object)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: Serialize(Object)
  nameWithType: JavaScriptSerializer.Serialize(Object)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(Object)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "オブジェクトを JSON 文字列に変換します。"
  remarks: "ときに、<xref:System.Web.Script.Serialization.JavaScriptSerializer>インスタンスは、シリアライザーの呼び出し、カスタムのコンバーターが登録されている型をシリアル化、 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>JSON 文字列に変換される名前/値ペアのディクショナリを取得します</xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A></xref:System.Web.Script.Serialization.JavaScriptSerializer>。       オブジェクト グラフが複雑すぎるため、またはのインスタンスが登録されている場合、シリアル化メソッドは例外をスローできますできます<xref:System.Web.Script.Serialization.JavaScriptConverter>コンバーター再帰しようとしました</xref:System.Web.Script.Serialization.JavaScriptConverter>。"
  example:
  - "The following example provides a simple illustration of how to serialize and deserialize data objects. It requires a class names Person which is shown below.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string Serialize (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "シリアル化するオブジェクト。"
    return:
      type: System.String
      description: "シリアル化された JSON 文字列。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.Serialize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "結果として得られる JSON 文字列<xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*>。</xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*>の値を超えています       - または - <code> obj </code>循環参照が含まれています。 循環参照は、子オブジェクトが、親オブジェクトへの参照を親オブジェクトが子オブジェクトへの参照を持つ場合に発生します。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "定義されている再帰の制限<xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>を超えました</xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>。"
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object,System.Text.StringBuilder)
  id: Serialize(System.Object,System.Text.StringBuilder)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  langs:
  - csharp
  name: Serialize(Object,StringBuilder)
  nameWithType: JavaScriptSerializer.Serialize(Object,StringBuilder)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(Object,StringBuilder)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "オブジェクトをシリアル化し、指定した結果として得られる JSON 文字列を書き込みます<xref:System.Text.StringBuilder>オブジェクト</xref:System.Text.StringBuilder>。"
  remarks: "ときに、<xref:System.Web.Script.Serialization.JavaScriptSerializer>インスタンスは、シリアライザーの呼び出し、カスタムのコンバーターが登録されている型をシリアル化、 <xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>JSON 文字列に変換される名前/値ペアのディクショナリを取得します</xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A></xref:System.Web.Script.Serialization.JavaScriptSerializer>。       <xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>オブジェクト グラフが複雑すぎるため、またはのインスタンスが登録されている場合、メソッドは例外をスローできますできます<xref:System.Web.Script.Serialization.JavaScriptConverter>コンバーター再帰しようとしました</xref:System.Web.Script.Serialization.JavaScriptConverter></xref:System.Web.Script.Serialization.JavaScriptSerializer.Serialize%2A>。"
  syntax:
    content: public void Serialize (object obj, System.Text.StringBuilder output);
    parameters:
    - id: obj
      type: System.Object
      description: "シリアル化するオブジェクト。"
    - id: output
      type: System.Text.StringBuilder
      description: "<xref:System.Text.StringBuilder>JSON 文字列を書き込むために使用できるオブジェクト</xref:System.Text.StringBuilder>。"
  overload: System.Web.Script.Serialization.JavaScriptSerializer.Serialize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "結果として得られる JSON 文字列<xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*>。</xref:System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*>の値を超えています       - または - <code> obj </code>循環参照が含まれています。 循環参照は、子オブジェクトが、親オブジェクトへの参照を親オブジェクトが子オブジェクトへの参照を持つ場合に発生します。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "定義されている再帰の制限<xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>を超えました</xref:System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>output</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Web.Script.Serialization.JavaScriptSerializer.#ctor
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: JavaScriptSerializer()
  nameWithType: JavaScriptSerializer.JavaScriptSerializer()
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.JavaScriptSerializer()
- uid: System.Web.Script.Serialization.JavaScriptSerializer.#ctor(System.Web.Script.Serialization.JavaScriptTypeResolver)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: JavaScriptSerializer(JavaScriptTypeResolver)
  nameWithType: JavaScriptSerializer.JavaScriptSerializer(JavaScriptTypeResolver)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.JavaScriptSerializer(JavaScriptTypeResolver)
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver
  parent: System.Web.Script.Serialization
  isExternal: false
  name: JavaScriptTypeResolver
  nameWithType: JavaScriptTypeResolver
  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(System.Object,System.Type)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: ConvertToType(Object,Type)
  nameWithType: JavaScriptSerializer.ConvertToType(Object,Type)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(Object,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType``1(System.Object)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: ConvertToType(Object)
  nameWithType: JavaScriptSerializer.ConvertToType(Object)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType(Object)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(System.String,System.Type)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Deserialize(String,Type)
  nameWithType: JavaScriptSerializer.Deserialize(String,Type)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(String,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize``1(System.String)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Deserialize(String)
  nameWithType: JavaScriptSerializer.Deserialize(String)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize(String)
- uid: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(System.String)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: DeserializeObject(String)
  nameWithType: JavaScriptSerializer.DeserializeObject(String)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject(String)
- uid: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: MaxJsonLength
  nameWithType: JavaScriptSerializer.MaxJsonLength
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: RecursionLimit
  nameWithType: JavaScriptSerializer.RecursionLimit
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter})
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: RegisterConverters(IEnumerable<JavaScriptConverter>)
  nameWithType: JavaScriptSerializer.RegisterConverters(IEnumerable<JavaScriptConverter>)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters(IEnumerable<JavaScriptConverter>)
- uid: System.Collections.Generic.IEnumerable{System.Web.Script.Serialization.JavaScriptConverter}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<JavaScriptConverter>
  nameWithType: IEnumerable<JavaScriptConverter>
  fullName: System.Collections.Generic.IEnumerable<System.Web.Script.Serialization.JavaScriptConverter>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Web.Script.Serialization.JavaScriptConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.Script.Serialization.JavaScriptConverter
    name: JavaScriptConverter
    nameWithType: JavaScriptConverter
    fullName: JavaScriptConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Serialize(Object)
  nameWithType: JavaScriptSerializer.Serialize(Object)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(Object)
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(System.Object,System.Text.StringBuilder)
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Serialize(Object,StringBuilder)
  nameWithType: JavaScriptSerializer.Serialize(Object,StringBuilder)
  fullName: System.Web.Script.Serialization.JavaScriptSerializer.Serialize(Object,StringBuilder)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Web.Script.Serialization.JavaScriptSerializer.#ctor*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: JavaScriptSerializer
  nameWithType: JavaScriptSerializer.JavaScriptSerializer
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: ConvertToType
  nameWithType: JavaScriptSerializer.ConvertToType
- uid: System.Web.Script.Serialization.JavaScriptSerializer.ConvertToType<T>*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: ConvertToType<T>
  nameWithType: JavaScriptSerializer.ConvertToType<T>
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Deserialize
  nameWithType: JavaScriptSerializer.Deserialize
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Deserialize<T>*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Deserialize<T>
  nameWithType: JavaScriptSerializer.Deserialize<T>
- uid: System.Web.Script.Serialization.JavaScriptSerializer.DeserializeObject*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: DeserializeObject
  nameWithType: JavaScriptSerializer.DeserializeObject
- uid: System.Web.Script.Serialization.JavaScriptSerializer.MaxJsonLength*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: MaxJsonLength
  nameWithType: JavaScriptSerializer.MaxJsonLength
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RecursionLimit*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: RecursionLimit
  nameWithType: JavaScriptSerializer.RecursionLimit
- uid: System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: RegisterConverters
  nameWithType: JavaScriptSerializer.RegisterConverters
- uid: System.Web.Script.Serialization.JavaScriptSerializer.Serialize*
  parent: System.Web.Script.Serialization.JavaScriptSerializer
  isExternal: false
  name: Serialize
  nameWithType: JavaScriptSerializer.Serialize
