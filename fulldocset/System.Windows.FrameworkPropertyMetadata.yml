### YamlMime:ManagedReference
items:
- uid: System.Windows.FrameworkPropertyMetadata
  id: FrameworkPropertyMetadata
  children:
  - System.Windows.FrameworkPropertyMetadata.#ctor
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  - System.Windows.FrameworkPropertyMetadata.AffectsArrange
  - System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  - System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  - System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  - System.Windows.FrameworkPropertyMetadata.AffectsRender
  - System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  - System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  - System.Windows.FrameworkPropertyMetadata.Inherits
  - System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  - System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  - System.Windows.FrameworkPropertyMetadata.Journal
  - System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  - System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  langs:
  - csharp
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata
  fullName: System.Windows.FrameworkPropertyMetadata
  type: Class
  summary: "報告またはフレームワーク固有のプロパティ システム特性を具体的には追加、依存関係プロパティのメタデータを適用します。"
  remarks: "このクラスから派生<xref:System.Windows.PropertyMetadata>(を通じて<xref:System.Windows.UIPropertyMetadata>).</xref:System.Windows.UIPropertyMetadata> </xref:System.Windows.PropertyMetadata> ほとんどの WPF フレームワーク レベルのアプリケーション開発目的 FrameworkPropertyMetadata は依存関係プロパティのメタデータではなく、基本のメタデータの種類<xref:System.Windows.PropertyMetadata>または<xref:System.Windows.UIPropertyMetadata>。</xref:System.Windows.UIPropertyMetadata></xref:System.Windows.PropertyMetadata>に使用される型 これは、既存の依存関係プロパティとカスタムの依存関係プロパティのほとんどのシナリオの両方に当てはまります。       これで宣言されたメンバー クラスの本追加ソフトウェア、<xref:System.Windows.PropertyMetadata>基底クラスは、さまざまなブール値のプロパティを指定するか、レポートのプロパティの継承、データ バインディング、レイアウトなどの WPF フレームワーク レベルのプロパティ システムの動作をします</xref:System.Windows.PropertyMetadata>。       FrameworkPropertyMetadata インスタンスを作成するためのいくつかのコンス トラクター シグネチャのかかる、<xref:System.Windows.FrameworkPropertyMetadataOptions>パラメーター</xref:System.Windows.FrameworkPropertyMetadataOptions> 。 <xref:System.Windows.FrameworkPropertyMetadataOptions>列挙型は、コンス トラクターで初期の動作を指定する場合にのみ使用および FrameworkPropertyMetadata が構築された後にそれ以外の場合、公開されません</xref:System.Windows.FrameworkPropertyMetadataOptions>。 構築されたインスタンスを取得またはコンス トラクターの呼び出しで使用する列挙値の名前を共有するさまざまなプロパティで、対応する情報を設定できます。      <a name=&quot;xamlTextUsage_FrameworkPropertyMetadata&quot;></a>## このクラスは、通常では使用されない XAML テキスト使用[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  example:
  - "The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type. That metadata is cast to FrameworkPropertyMetadata. If the cast returned a valid FrameworkPropertyMetadata, then various FrameworkPropertyMetadata property values are reported through a simple UI (not shown).  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: 'public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata'
  inheritance:
  - System.Object
  - System.Windows.PropertyMetadata
  - System.Windows.UIPropertyMetadata
  implements: []
  inheritedMembers:
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  - System.Windows.UIPropertyMetadata.IsAnimationProhibited
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata()
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref>クラスです。"
  remarks: "この署名は、そのプロパティの既定値に FrameworkPropertyMetadata のすべての値を初期化します。 <xref:System.Windows.PropertyMetadata.DefaultValue%2A>なります`null`と、さまざまな<xref:System.Windows.FrameworkPropertyMetadata>ブール型プロパティがなります`false`です</xref:System.Windows.FrameworkPropertyMetadata>。</xref:System.Windows.PropertyMetadata.DefaultValue%2A>"
  syntax:
    content: public FrameworkPropertyMetadata ();
    parameters: []
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref>指定された既定値を持つクラス。"
  remarks: "指定された値の型`defaultValue`にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。 この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。 プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。       値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません</xref:System.Windows.DependencyProperty.UnsetValue>。"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor1param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "通常、特定の種類の値として提供される、依存関係プロパティの既定値。"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>設定されている<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> 、指定したクラス<xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref>コールバック。"
  remarks: ''
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor1paramcallback)]"
  syntax:
    content: public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref>フレームワーク レベルのメタデータのオプションと指定された既定値を持つクラス。"
  remarks: "指定された値の型`defaultValue`にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。 この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。 プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。       値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません</xref:System.Windows.DependencyProperty.UnsetValue>。       セットの flags でフラグとしてマークされた値、`flags`パラメーターのブール値が設定されます<xref:System.Windows.FrameworkPropertyMetadata>と一致しているプロパティ<xref:System.Windows.FrameworkPropertyMetadataOptions>フラグの名前を`true`</xref:System.Windows.FrameworkPropertyMetadataOptions></xref:System.Windows.FrameworkPropertyMetadata>。 メタデータが特定のプロパティのシステム操作に適用されていない限り、その後、メタデータでは、プロパティの値を変更できます。"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "通常、特定の種類の値として提供される、依存関係プロパティの既定値。"
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "メタデータのオプション フラグ (を組み合わせた<xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;></xref>値)。 これらのオプションは、レイアウト、データ バインディングなどのシステムと対話する依存関係プロパティの特性を指定します。"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>設定されている<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref>指定された既定値は、クラスし、指定された<xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref>コールバック。"
  remarks: "指定された値の型`defaultValue`にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。 この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。 プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。       値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません</xref:System.Windows.DependencyProperty.UnsetValue>。"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor2param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "通常、特定の種類の値として提供される、依存関係プロパティの既定値。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>設定されている<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref>指定したコールバック クラス。"
  remarks: "この実装は、基本の初期化子を呼び出すし、追加、`coerceValueCallback`ベースのインスタンスのプロパティを設定します。"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_pcc_cvc)]"
  syntax:
    content: public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を<xref:System.Windows.DependencyObject.CoerceValue*>この依存関係プロパティ</xref:System.Windows.DependencyObject.CoerceValue*>。"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref>した既定値とフレームワーク メタデータ オプションで、クラスし、指定された<xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref>コールバック。"
  remarks: "指定された値の型`defaultValue`にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。 この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。 プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。       値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません</xref:System.Windows.DependencyProperty.UnsetValue>。       セットの flags でフラグとしてマークされた値、`flags`パラメーターのブール値が設定されます<xref:System.Windows.FrameworkPropertyMetadata>と一致しているプロパティ<xref:System.Windows.FrameworkPropertyMetadataOptions>フラグの名前を`true`</xref:System.Windows.FrameworkPropertyMetadataOptions></xref:System.Windows.FrameworkPropertyMetadata>。 メタデータでは、プロパティの値は、メタデータが特定のプロパティのシステム操作に適用されていない限り、引き続き変更できます。"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "通常、特定の種類の値として提供される、依存関係プロパティの既定値。"
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "メタデータのオプション フラグ (を組み合わせた<xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;></xref>値)。 これらのオプションは、レイアウト、データ バインディングなどのシステムと対話する依存関係プロパティの特性を指定します。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>設定されている<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref>された既定値と指定したコールバック クラス。"
  remarks: "指定された値の型`defaultValue`にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。 この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。 プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。       値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません</xref:System.Windows.DependencyProperty.UnsetValue>。"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor3param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "通常、特定の種類として提供される、依存関係プロパティの既定値。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を<xref:System.Windows.DependencyObject.CoerceValue*>この依存関係プロパティ</xref:System.Windows.DependencyObject.CoerceValue*>。"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>設定されている<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref>既定値とフレームワーク メタデータ オプションでは、指定したコールバック クラス。"
  remarks: "指定された値の型`defaultValue`にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。 この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。 プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。       値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません</xref:System.Windows.DependencyProperty.UnsetValue>。       セットの flags でフラグとしてマークされた値、`flags`パラメーターのブール値が設定されます<xref:System.Windows.FrameworkPropertyMetadata>と一致しているプロパティ<xref:System.Windows.FrameworkPropertyMetadataOptions>フラグの名前を`true`</xref:System.Windows.FrameworkPropertyMetadataOptions></xref:System.Windows.FrameworkPropertyMetadata>。 メタデータでは、プロパティの値は、メタデータが特定のプロパティのシステム操作に適用されていない限り、引き続き変更できます。"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "通常、特定の種類として提供される、依存関係プロパティの既定値。"
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "メタデータのオプション フラグ (を組み合わせた<xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;></xref>値)。 これらのオプションは、レイアウト、データ バインディングなどのシステムと対話する依存関係プロパティの特性を指定します。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を<xref:System.Windows.DependencyObject.CoerceValue*>このプロパティに対して</xref:System.Windows.DependencyObject.CoerceValue*>。"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>設定されている<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref>した既定値およびフレームワークのメタデータのオプション、指定したコールバック、およびブール値をプロパティのアニメーションを防ぐために使用できます。"
  remarks: "指定された値の型`defaultValue`にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。 この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。 プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。       値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません</xref:System.Windows.DependencyProperty.UnsetValue>。       `isAnimationProhibited`パラメーター<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>は、イミディ エイトの基本<xref:System.Windows.UIPropertyMetadata>クラス</xref:System.Windows.UIPropertyMetadata>によって宣言されたプロパティ</xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>の初期値の設定       セットの flags でフラグとしてマークされた値、`flags`パラメーターのブール値が設定されます<xref:System.Windows.FrameworkPropertyMetadata>と一致しているプロパティ<xref:System.Windows.FrameworkPropertyMetadataOptions>フラグの名前を`true`</xref:System.Windows.FrameworkPropertyMetadataOptions></xref:System.Windows.FrameworkPropertyMetadata>。 メタデータでは、プロパティの値は、メタデータが特定のプロパティのシステム操作に適用されていない限り、引き続き変更できます。"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "通常、特定の種類として提供される、依存関係プロパティの既定値。"
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "メタデータのオプション フラグ (を組み合わせた<xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;></xref>値)。 これらのオプションは、レイアウト、データ バインディングなどのシステムと対話する依存関係プロパティの特性を指定します。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を<xref:System.Windows.DependencyObject.CoerceValue*>この依存関係プロパティ</xref:System.Windows.DependencyObject.CoerceValue*>。"
    - id: isAnimationProhibited
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティ システムがこのメタデータに適用されるプロパティをアニメーション化するを防ぎます。 このようなプロパティにアニメーション化が試行されると、プロパティのシステムから送信された、実行時に例外が発生します。 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>プロパティをアニメーション化を許可します。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>設定されている<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref>既定値およびフレームワークのメタデータを持つクラス オプションは、指定されたコールバックは、ブール値をアニメーションのプロパティと、データ バインディングの update トリガーの既定値を防ぐために使用できます。"
  remarks: "指定された値の型`defaultValue`にこのメタデータが適用される依存関係プロパティの元の登録で指定された型に関連するまたは一致する必要があります。 この不一致は、コンパイル時に検出ではないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。 プロパティ システム既定値の型/プロパティ型の不一致の結果が、実行時エラーであるために、プロパティの有効な値を実行時まで評価されません。       値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムに特別な意味を持ち、依存関係プロパティの既定値として使用できません</xref:System.Windows.DependencyProperty.UnsetValue>。       `isAnimationProhibited`パラメーター<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>は、イミディ エイトの基本<xref:System.Windows.UIPropertyMetadata>クラス</xref:System.Windows.UIPropertyMetadata>によって宣言されたプロパティ</xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>の初期値の設定       バインディング ソースの更新の動作の詳細については、次を参照してください。[データ バインディングの概要](~/add/includes/ajax-current-ext-md.md)です。       セットの flags でフラグとしてマークされた値、`flags`パラメーターのブール値が設定されます<xref:System.Windows.FrameworkPropertyMetadata>と一致しているプロパティ<xref:System.Windows.FrameworkPropertyMetadataOptions>フラグの名前を`true`</xref:System.Windows.FrameworkPropertyMetadataOptions></xref:System.Windows.FrameworkPropertyMetadata>。 メタデータでは、プロパティの値は、メタデータが特定のプロパティのシステム操作に適用されていない限り、引き続き変更できます。"
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "通常、特定の種類として提供される、依存関係プロパティの既定値。"
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "メタデータのオプション フラグ (を組み合わせた<xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;></xref>値)。 これらのオプションは、レイアウト、データ バインディングなどのシステムと対話する依存関係プロパティの特性を指定します。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムが発信するハンドラーの実装への参照。"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を<xref:System.Windows.DependencyObject.CoerceValue*>このプロパティに対して</xref:System.Windows.DependencyObject.CoerceValue*>。"
    - id: isAnimationProhibited
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティ システムがこのメタデータに適用されるプロパティをアニメーション化するを防ぎます。 このようなプロパティにアニメーション化が試行されると、プロパティのシステムから送信された、実行時に例外が発生します。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: defaultUpdateSourceTrigger
      type: System.Windows.Data.UpdateSourceTrigger
      description: "<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>を持つこのプロパティのバインドが適用されるときに使用する、 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> &quot;éý&quot; <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>設定されている<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  id: AffectsArrange
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはレイアウト エンジンの操作中に、依存関係プロパティが配置パスに影響を与える可能性があるかどうかを示す値を設定します。"
  remarks: "<xref:System.Windows.FrameworkElement>および<xref:System.Windows.FrameworkContentElement>の実装が含まれて<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視する</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A></xref:System.Windows.FrameworkContentElement>。</xref:System.Windows.FrameworkElement> ロジックの一環として、有効な値を変更し、AffectsArrange でメタデータを持つ依存関係プロパティを設定`true`がその要素のビジュアルを無効化する遅延の要求を開始 (への呼び出し<xref:System.Windows.UIElement.InvalidateArrange%2A>).</xref:System.Windows.UIElement.InvalidateArrange%2A> この WPF フレームワーク レベルの実装は、既に設定されているために、通常は大幅に交換または WPF フレームワーク レベルのレイアウトの動作を変更する場合を除き、AffectsArrange と依存関係プロパティを検索する必要はありません。       カスタム<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>実装の依存関係プロパティの変更の動作は類似しているいる AffectsArrange こともできます`true`</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>。       派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_AffectsArrange&quot;></a>## このクラスの XAML テキスト使用状況メンバーは、通常使用されないかで[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsArrange { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメタデータが存在する可能性のある依存関係プロパティの配置パスに影響します。 場合、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.AffectsArrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  id: AffectsMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはレイアウト エンジンの操作中に依存関係プロパティが測定パスに影響を与える可能性があるかどうかを示す値を設定します。"
  remarks: "<xref:System.Windows.FrameworkElement>および<xref:System.Windows.FrameworkContentElement>の実装が含まれて<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視する</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A></xref:System.Windows.FrameworkContentElement>。</xref:System.Windows.FrameworkElement> そのロジックの一環として、有効な値を変更し、AffectsMeasure でメタデータを持つ依存関係プロパティの設定`true`がその要素のビジュアルを無効化する遅延の要求を開始します。 この WPF フレームワーク レベルの実装は、既に設定されているために、通常は大幅に交換または WPF フレームワーク レベルのレイアウトの動作を変更する場合を除き、AffectsMeasure と依存関係プロパティを検索する必要はありません。       カスタム<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>実装は、依存関係プロパティの変更の動作は類似しているいる AffectsMeasure することもできます`true`</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>。       派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_AffectsMeasure&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsMeasure { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメタデータが存在する可能性のある依存関係プロパティが測定パスに影響を与える場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  id: AffectsParentArrange
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはレイアウト エンジンの操作中に、依存関係プロパティがその親要素のレイアウトの配置パスに影響を与える可能性があるかどうかを示す値を設定します。"
  remarks: "<xref:System.Windows.FrameworkElement>および<xref:System.Windows.FrameworkContentElement>の実装が含まれて<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視する</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A></xref:System.Windows.FrameworkContentElement>。</xref:System.Windows.FrameworkElement> そのロジックの一環として、有効な値を変更し、AffectsParentArrange でメタデータを持つ依存関係プロパティの設定`true`が親要素のビジュアルの無効化する遅延の要求を開始します。       一般に、必要はありませんの変更を報告する、 <xref:System.Windows.FrameworkElement>AffectsParentArrange を使用して、要素自体は既に存在して、独自のため、親要素にプロパティ<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>として`true`</xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A></xref:System.Windows.FrameworkElement>。 通常で十分である、適切なときに、親の配置ため、一般に、子要素の変更を開始します。 AffectsParentArrange は<xref:System.Windows.FrameworkContentElement>派生したクラス</xref:System.Windows.FrameworkContentElement>の使用します。 この場合、子要素のセットが、プロパティ、<xref:System.Windows.FrameworkContentElement>派生クラスでは、自身のレンダリングを制御しません</xref:System.Windows.FrameworkContentElement>。 レンダリングがによって処理される、<xref:System.Windows.FrameworkElement>コンテンツ ホストとして機能する親要素です</xref:System.Windows.FrameworkElement>。 インスタンスの値の変更、 <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName>、子要素で添付プロパティを無効に、親の子の位置を変更する必要がありますので、親の配置</xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName>。 したがって、<xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName>添付プロパティがメタデータ AffectsParentArrange は`true`</xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName>。 別の例は、<xref:System.Windows.Controls.Control.Padding%2A>以外の場合はこのプロパティが変更された、親の可能性があります変更に使用できるスペースに応じて、子の位置と</xref:System.Windows.Controls.Control.Padding%2A>。       この WPF フレームワーク レベルの実装は、既に設定されているために、通常は大幅に交換または WPF フレームワーク レベルのレイアウトの動作を変更する場合を除き、AffectsParentArrange と依存関係プロパティを検索する必要はありません。       カスタム<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>実装の依存関係プロパティの変更の動作は類似しているいる AffectsParentArrange こともできます`true`</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>。       いずれかのプロパティの派生クラス<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_AffectsParentArrange&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public bool AffectsParentArrange { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメタデータが存在する可能性のある依存関係プロパティが特にその親要素の配置パスに影響する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  id: AffectsParentMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはレイアウト エンジンの操作中に、依存関係プロパティがその親要素のレイアウトの測定パスに影響を与える可能性があるかどうかを示す値を設定します。"
  remarks: "<xref:System.Windows.FrameworkElement>および<xref:System.Windows.FrameworkContentElement>の実装が含まれて<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視する</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A></xref:System.Windows.FrameworkContentElement>。</xref:System.Windows.FrameworkElement> そのロジックの一環として、有効な値を変更し、AffectsParentMeasure でメタデータを持つ依存関係プロパティの設定`true`が親要素のビジュアルの無効化する遅延の要求を開始します。 この WPF フレームワーク レベルの実装は、既に設定されているために、通常は大幅に交換または WPF フレームワーク レベルのレイアウトの動作を変更する場合を除き、AffectsParentMeasure と依存関係プロパティを検索する必要はありません。       一般に、必要はありませんの変更を報告する、 <xref:System.Windows.FrameworkElement>AffectsParentMeasure を使用して、要素自体は既に存在して、独自のため、親要素にプロパティ<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>として`true`</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A></xref:System.Windows.FrameworkElement>。 子要素の変更は一般的に該当する場合に親を表す measure を開始するため、通常で十分です。 AffectsParentMeasure は<xref:System.Windows.FrameworkContentElement>派生したクラス</xref:System.Windows.FrameworkContentElement>の使用します。 この場合、子要素のセットが、プロパティ、<xref:System.Windows.FrameworkContentElement>派生クラスでは、自身のレンダリングを制御しません</xref:System.Windows.FrameworkContentElement>。 レンダリングがによって処理される、<xref:System.Windows.FrameworkElement>コンテンツ ホストとして機能する親要素です</xref:System.Windows.FrameworkElement>。 インスタンスの値の変更、 <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName>、子要素でプロパティは、段落の相対的な間隔から変更可能性がありますとを増やす場合があります、またはコンテンツ ホストのサイズを小さくために、親のメジャーを無効にします</xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName>。 したがって、<xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName>プロパティ選択されているメタデータを AffectsParentMeasure `true`</xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> 。       コンテンツ ホスト要素も頻繁に参照で依存関係プロパティの変更の AffectsParentMeasure がここでは`true`、コンテンツ ホスト レンダリング ロジックの一部として。 インスタンス、<xref:System.Windows.Controls.TextBox>要素に応答するが必要となるテキスト内で特定の変更の境界ボックス、<xref:System.Windows.Controls.TextBox>自体を変更します</xref:System.Windows.Controls.TextBox></xref:System.Windows.Controls.TextBox>。       カスタム<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>実装の依存関係プロパティの変更の動作は類似しているいる AffectsParentMeasure こともできます`true`</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>。       いずれかのプロパティの派生クラス<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_AffectsParentMeasure&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public bool AffectsParentMeasure { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメタデータが存在する可能性のある依存関係プロパティが特にその親要素の測定パスに影響する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender
  id: AffectsRender
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsRender
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または依存関係プロパティが一般的なレイアウト配置や測定、具体的には影響しません。 ただし、再描画が必要な何らかの方法では、潜在的に影響するかどうかを示す値を設定します。"
  remarks: "<xref:System.Windows.FrameworkElement>および<xref:System.Windows.FrameworkContentElement>の実装が含まれて<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視する</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A></xref:System.Windows.FrameworkContentElement>。</xref:System.Windows.FrameworkElement> ロジックの一環として、有効な値を変更し、AffectsRender でメタデータを持つ依存関係プロパティを設定`true`がその要素のビジュアルを無効化する遅延の要求を開始します。 この WPF フレームワーク レベルの実装は、既に設定されているために、通常は大幅に交換または WPF フレームワーク レベルのレイアウトの動作を変更する場合を除き、AffectsRender と依存関係プロパティを検索する必要はありません。       カスタム<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>実装の依存関係プロパティの変更の動作は類似しているいる AffectsRender こともできます`true`</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>。       いずれかのプロパティの派生クラス<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_AffectsRender&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsRender { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメタデータが存在する依存関係プロパティがレンダリングに影響する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.AffectsRender*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  id: BindsTwoWayByDefault
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
  fullName: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはプロパティが既定で双方向バインドするかどうかを示す値を設定します。"
  remarks: "このプロパティがない場合に`true`、バインドの更新プログラムがの既定の動作に基づいて、既定で一方向、<xref:System.Windows.Data.Binding>コンス トラクターまたはそれと同等[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]構文</xref:System.Windows.Data.Binding>。       既存の要素では、このプロパティ設定通常検索は`true`状態を報告して、 <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName>.</xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName>例については、ユーザーの操作によって変更することは両方の依存関係プロパティのメタデータで       このプロパティはのみ、依存関係プロパティの既定のバインディング更新特性を一般に報告します。 どのバインディングでもインスタンスでこのプロパティを設定できるローカルに設定された、<xref:System.Windows.Data.Binding.Mode%2A>バインディングのプロパティと、この既定の設定を変更します</xref:System.Windows.Data.Binding.Mode%2A>。       いずれかのプロパティの派生クラス<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_BindsTwoWayByDefault&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool BindsTwoWayByDefault { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメタデータが存在する依存関係プロパティを既定では双方向バインド場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  id: DefaultUpdateSourceTrigger
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  fullName: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または設定の既定の<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>を使用するにはこのメタデータを使用してプロパティのバインドが適用されるときにその<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> &quot;éý&quot; <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>です。"
  remarks: "派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_DefaultUpdateSourceTrigger&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceTrigger
      description: "以外の列挙体の値<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "このプロパティに設定<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>; を設定する値はバインディングで要求されたときに既定値になります必要があります。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.Inherits
  id: Inherits
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
  fullName: System.Windows.FrameworkPropertyMetadata.Inherits
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または依存関係プロパティの値が継承可能かどうかを示す値を設定します。"
  remarks: "プロパティ値の継承の機能、[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]という特定の依存関係プロパティ ローカルで設定できる時またはその近辺のルート要素に、WPF フレームワーク レベルのプロパティのシステム、[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]要素ツリーし、その値もそのプロパティを保持する子要素の論理ツリー内のすべての要素によって継承されます。 プロパティ値の継承は、既定で無効になっており、パフォーマンスへの影響が有効にします。 詳細については、「[プロパティ値の継承](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 非添付依存関係プロパティを使用するプロパティ値の継承が表示されますが、ランタイム ツリーで特定オブジェクト間の分割を使用して非添付プロパティの継承動作が定義されていません。 常に使用する<xref:System.Windows.DependencyProperty.RegisterAttached%2A>Inherits をメタデータで指定した場所のプロパティを登録する</xref:System.Windows.DependencyProperty.RegisterAttached%2A>。       派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_Inherits&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool Inherits { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティの値が継承可能な場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.Inherits*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  id: IsDataBindingAllowed
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
  fullName: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "依存関係プロパティのデータ バインドがサポートされているかどうかを示す値を取得します。"
  remarks: "このプロパティは、報告`false`2 つの可能な条件のいずれかの: 依存関係プロパティが (に示される依存関係プロパティの識別子、メタデータではない)、読み取り専用であるために、依存関係プロパティをいずれかのデータ バインディングが許可されていませんまたは別のメタデータ プロパティの値<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>に設定されている`true`このメタデータにします</xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>。 このプロパティは、利便性のため公開呼び出し元は、両方<xref:System.Windows.DependencyProperty.ReadOnly%2A>と<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>。</xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A></xref:System.Windows.DependencyProperty.ReadOnly%2A>を確認する必要はありません。       それ以外の場合の読み取り/書き込みプロパティがデータ バインディングをサポートする必要がありますを指定するメタデータを作成しようとする場合は、フラグを指定<xref:System.Windows.FrameworkPropertyMetadataOptions>(とわずかな名前付け規約違いに注意してください<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> </xref:System.Windows.FrameworkPropertyMetadataOptions>      <a name=&quot;xamlTextUsage_IsDataBindingAllowed&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool IsDataBindingAllowed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメタデータを適用する依存関係プロパティのデータ バインディングがサポートされている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  id: IsNotDataBindable
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
  fullName: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または依存関係プロパティがデータ バインディングをサポートするかどうかを示す値を設定します。"
  remarks: "このメタデータ プロパティに設定されている注`true`専用のプロパティを読み取り/書き込みプロパティであるにもかかわらず、データ バインディングをサポートする必要があります。 予想する依存関係プロパティが宣言されているほとんどの場合、データ バインディングが必要な依存関係プロパティが役立つ主要シナリオのいずれかのデータ バインディングがあるためです。 異なり<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>、これだけで変わらないので、特定のバインドに後で変更可能な既定</xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>。 このプロパティの設定`true`依存関係プロパティのメタデータで、その依存関係プロパティに式を使用してその値を適用するすべてのバインディングがこのメタデータに無効になります。       読み取り専用の依存関係プロパティは (変更後の値を適用可能な set アクセス操作子がない) ため、データをバインディングをサポートしていませんが、レポートではまだ`false`IsNotDataBindable 用です。 これは、プロパティに対応するため、<xref:System.Windows.FrameworkPropertyMetadataOptions>値は、メタデータが実際に確立する方法、常にレポート プロパティの名前を付けることを示唆する最後の結果の動作ではなくと同等の機能を報告します</xref:System.Windows.FrameworkPropertyMetadataOptions>。 指定された依存関係プロパティがデータ バインドで許可されるかどうかを判断するのには通常をチェックする<xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>代わりにします</xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>。 <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>両方をチェックするための便利な<xref:System.Windows.DependencyProperty.ReadOnly%2A>と予期される結果を生成する単一の操作として IsNotDataBindable</xref:System.Windows.DependencyProperty.ReadOnly%2A> 。</xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>       派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_IsNotDataBindable&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public bool IsNotDataBindable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティがデータ バインディングをサポートしていない場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.Journal
  id: Journal
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
  fullName: System.Windows.FrameworkPropertyMetadata.Journal
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはこのプロパティがアプリケーションやまたはジャーナル実装の一部として保存する必要がありますのあるジャーナル情報を含めるかどうかを示す値を設定します。"
  remarks: "派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_Journal&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public bool Journal { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメタデータが適用される依存関係プロパティのジャーナルを実行する必要があります場合、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.Journal*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ソース メタデータと基本メタデータのマージを有効にします。"
  remarks: "このメソッドは、メタデータが上書きされているときに内部的に使用されます。"
  syntax:
    content: protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "マージする基本のメタデータ。"
    - id: dp
      type: System.Windows.DependencyProperty
      description: "このメタデータには適用されている依存関係プロパティ。"
  overload: System.Windows.FrameworkPropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "このメタデータは、メタデータがシールされていることを示すプロパティに適用されたときに呼び出されます。"
  remarks: "データ構造のすべての変更可能性、<xref:System.Windows.FrameworkPropertyMetadata>インスタンスに設定されなければなりません変更不可としてこのメソッドが呼び出されるとします</xref:System.Windows.FrameworkPropertyMetadata>。"
  syntax:
    content: protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "メタデータが適用されている依存関係プロパティ。"
    - id: targetType
      type: System.Type
      description: "型固有のメタデータは、この場合、このメタデータに関連付けられている型。 これが既定のメタデータである場合は、この値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  id: OverridesInheritanceBehavior
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  fullName: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはプロパティ値の継承を評価する必要があります要素の論理ツリー内の特定のコンテンツ境界をまたがっているかどうかを示す値を設定します。"
  remarks: "このメタデータは、特殊な親要素と子要素の境界にまたがってプロパティ値の継承の動作に変更を適用頻度の低いを報告します。 このような境界の標準的な例の内容は、<xref:System.Windows.Controls.Frame>ここで、 <xref:System.Windows.Controls.Frame> <xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame>の有無とは無関係にコンテンツが再読み込みされる可能性があります取得</xref:System.Windows.Controls.Frame></xref:System.Windows.Controls.Frame> 目的のプロパティのシステム動作は、プロパティ値の継承の内容に通過する必要がありますしないこと、 <xref:System.Windows.Controls.Frame>、これらの内容の要素をフレームをホストするアプリケーションが所有または管理していない可能性があるためです</xref:System.Windows.Controls.Frame>。 設定 OverridesInheritanceBehavior でメタデータを指定する`true`を指定しても、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>として`true`、プロパティを継承可能であっても、メタデータを適用すると、<xref:System.Windows.Controls.Frame>境界または類似の境界</xref:System.Windows.Controls.Frame></xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>。       派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後に<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_OverridesInheritanceBehavior&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public bool OverridesInheritanceBehavior { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティ値の継承が特定のコンテンツ境界をまたがる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  id: SubPropertiesDoNotAffectRender
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  fullName: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または依存関係プロパティのサブプロパティが親オブジェクトのレンダリングに影響しないかどうかを示す値を設定します。"
  remarks: "このメタデータ オプションは、その型が、独自のプロパティの値を持つ参照型の場合は、依存関係プロパティの関連です。 通常、レイアウト システムのロジックは、サブ プロパティを持つ任意の依存関係プロパティに可能性のあるレイアウトは影響は、別描画パスで実際に実行されているより時間がかかり、変更のすべてのサブ プロパティを確認するためことを想定することです。 このオプションを設定`true`は WPF フレームワーク レベルのレイアウト システムの実装のパフォーマンスを最適化するために便利です。       派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します</xref:System.Windows.PropertyMetadata>。 これは、インスタンスの初期化後にそれらを調整できるようにします。 ただし、メタデータがへの呼び出しの一部として使用された後<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびメタデータの仕様を伝えるためのプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 後にこのプロパティを設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。      <a name=&quot;xamlTextUsage_SubPropertiesDoNotAffectRender&quot;></a>## このクラスの XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public bool SubPropertiesDoNotAffectRender { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>サブプロパティ値の変更がレンダリングに影響をいない場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メタデータが依存関係プロパティの操作に適用されて既にできるように、メタデータは封印されており、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
references:
- uid: System.Windows.UIPropertyMetadata
  isExternal: false
  name: System.Windows.UIPropertyMetadata
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.FrameworkPropertyMetadata.#ctor
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata()
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata()
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
- uid: System.Windows.FrameworkPropertyMetadataOptions
  parent: System.Windows
  isExternal: false
  name: FrameworkPropertyMetadataOptions
  nameWithType: FrameworkPropertyMetadataOptions
  fullName: System.Windows.FrameworkPropertyMetadataOptions
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
- uid: System.Windows.Data.UpdateSourceTrigger
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: UpdateSourceTrigger
  fullName: System.Windows.Data.UpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsRender
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
  fullName: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  fullName: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.Inherits
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
  fullName: System.Windows.FrameworkPropertyMetadata.Inherits
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
  fullName: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
  fullName: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
- uid: System.Windows.FrameworkPropertyMetadata.Journal
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
  fullName: System.Windows.FrameworkPropertyMetadata.Journal
- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  fullName: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  fullName: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
- uid: System.Windows.FrameworkPropertyMetadata.#ctor*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.Inherits*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
- uid: System.Windows.FrameworkPropertyMetadata.Journal*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
- uid: System.Windows.FrameworkPropertyMetadata.Merge*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: FrameworkPropertyMetadata.Merge
- uid: System.Windows.FrameworkPropertyMetadata.OnApply*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: FrameworkPropertyMetadata.OnApply
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
