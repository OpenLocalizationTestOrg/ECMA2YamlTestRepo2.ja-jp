### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.ObjectDataSource
  id: ObjectDataSource
  children:
  - System.Web.UI.WebControls.ObjectDataSource.#ctor
  - System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  - System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  - System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  - System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  - System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  - System.Web.UI.WebControls.ObjectDataSource.Delete
  - System.Web.UI.WebControls.ObjectDataSource.Deleted
  - System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  - System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  - System.Web.UI.WebControls.ObjectDataSource.Deleting
  - System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  - System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  - System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  - System.Web.UI.WebControls.ObjectDataSource.Filtering
  - System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  - System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  - System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  - System.Web.UI.WebControls.ObjectDataSource.Insert
  - System.Web.UI.WebControls.ObjectDataSource.Inserted
  - System.Web.UI.WebControls.ObjectDataSource.Inserting
  - System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  - System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  - System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  - System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  - System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  - System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  - System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  - System.Web.UI.WebControls.ObjectDataSource.Select
  - System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  - System.Web.UI.WebControls.ObjectDataSource.Selected
  - System.Web.UI.WebControls.ObjectDataSource.Selecting
  - System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  - System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  - System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  - System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  - System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  - System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  - System.Web.UI.WebControls.ObjectDataSource.TypeName
  - System.Web.UI.WebControls.ObjectDataSource.Update
  - System.Web.UI.WebControls.ObjectDataSource.Updated
  - System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  - System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  - System.Web.UI.WebControls.ObjectDataSource.Updating
  langs:
  - csharp
  name: ObjectDataSource
  nameWithType: ObjectDataSource
  fullName: System.Web.UI.WebControls.ObjectDataSource
  type: Class
  summary: "多階層 Web アプリケーションのアーキテクチャでのデータ バインド コントロールにデータを提供するビジネス オブジェクトを表します。"
  remarks: "このトピックの「:-[概要](#introduction)      -   [目的](#purpose)      -   [データの取得](#retrieving_data)      -   [データ操作の実行](#performing_data_operations)      -   [データのフィルター処理](#filtering_data)      -   [キャッシュ](#caching)      -   [機能](#features)      -   [データ ビュー](#data_view)      -   [LINQ to SQL を使用して](#using_linq_to_sql)      -   [宣言構文](#declarative_syntax)<a name=&quot;introduction&quot;> </a> ## の概要、ObjectDataSource コントロールが作成するクラスと連携します。       取得し、データを更新するメソッドを作成して、ObjectDataSource コントロール マークアップでこれらのメソッドの名前を入力します。 レンダリングまたはポストバック処理では、中に、ObjectDataSource は指定したメソッドを呼び出します。       ObjectDataSource コントロールのビジュアル表示はありません。 その結果、ObjectDataSource 機能をサポートしない visual など、<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>または<xref:System.Web.UI.DataSourceControl.SkinID%2A>プロパティ</xref:System.Web.UI.DataSourceControl.SkinID%2A></xref:System.Web.UI.DataSourceControl.EnableTheming%2A>。      <a name=&quot;purpose&quot;></a>## 目的 A 非常に一般的なアプリケーションのデザイン方法は、ビジネス ロジックからプレゼンテーション層を分離して、ビジネス オブジェクトにビジネス ロジックをカプセル化するにです。 これらのビジネス オブジェクトは、プレゼンテーション層と&3; 層アプリケーションのアーキテクチャでは、その結果、データ層の間で区別する層を形成します。 ObjectDataSource コントロール開発者は、3 層アプリケーションのアーキテクチャを維持しながら ASP.NET データ ソース コントロールを使用できます。       ObjectDataSource コントロールは、ビジネス オブジェクトのインスタンスを作成し、取得、更新、挿入、およびデータを削除するためにメソッドの呼び出しに、リフレクションを使用します。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティは、ObjectDataSource が連携するクラスの名前を識別します</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>。 ObjectDataSource コントロールを作成し、各メソッドを呼び出すのためのクラスのインスタンスを破棄保持しないオブジェクト メモリ内の Web 要求の有効期間中にします。 これは重大な考慮事項を使用するビジネス オブジェクトの多くのリソースが必要ですか作成し、破棄にはコストがそれ以外の場合です。 高価なオブジェクトを使用できない可能性があります、最適な設計の選択肢を使用して、オブジェクトのライフ サイクルを制御することができます、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>。      > [!NOTE] > によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティは、インスタンス メソッドを指定できますまたは`static`(`Shared` Visual Basic で) メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 メソッドは、場合`static`(`Shared` Visual Basic で)、ビジネス オブジェクトのインスタンスは作成されません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベントは発生しません</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>。      <a name=&quot;retrieving_data&quot;></a>## ビジネス オブジェクトからデータを取得するデータを取得する設定、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ データを取得するメソッドの名前にします</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 メソッドが返されない場合、<xref:System.Collections.IEnumerable>または<xref:System.Data.DataSet>オブジェクト、オブジェクトがランタイムによってラップされた、<xref:System.Collections.IEnumerable>コレクションです</xref:System.Collections.IEnumerable></xref:System.Data.DataSet></xref:System.Collections.IEnumerable>。 メソッド署名しているかどうかのパラメーターを追加できます<xref:System.Web.UI.WebControls.Parameter>オブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>、コレクションで指定されているメソッドに渡す値に関連付けると、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A></xref:System.Web.UI.WebControls.Parameter>。 ObjectDataSource コントロールのパラメーターを使用するためには、名前とメソッドのシグネチャのパラメーターの型パラメーターが一致する必要があります。 詳細については、次を参照してください。 [、ObjectDataSource コントロールでのパラメーターの使用](~/add/includes/ajax-current-ext-md.md)です。       ObjectDataSource コントロールがデータを取得するたびに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが呼び出されます</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 このメソッドで指定されたメソッドへのプログラムによるアクセスを提供する<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 指定されているメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティは、ObjectDataSource にバインドされたコントロールによって自動的に呼び出されますときにその`DataBind`メソッドが呼び出されます。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 。 設定した場合、`DataSourceID`データ バインド コントロールのプロパティ、コントロールに自動的にデータにバインド データ ソースから、必要に応じて。 設定、`DataSourceID`プロパティは、ObjectDataSource コントロールをデータ バインド コントロールにバインドする方法をお勧めします。 また、設定することができます、`DataSource`プロパティ、それをする必要があります明示的に呼び出す、`DataBind`データ バインド コントロールのメソッドです。 呼び出すことができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>プログラムでいつでもデータを取得するメソッド</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。       データ ソース コントロールにデータ バインド コントロールのバインドの詳細については、次を参照してください。[データ ソース コントロールを使用してデータをバインド](http://msdn.microsoft.com/en-us/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)です。      <a name=&quot;performing_data_operations&quot;></a>## 機能しますでを実行するデータの操作によって、ObjectDataSource を制御するビジネス オブジェクトの機能、更新、挿入、および削除などのデータ操作を実行することができます。 これらのデータ操作を実行するには、適切なメソッド名とを実行する操作に関連するパラメーターを設定します。 たとえば、更新操作では、次のように設定します、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>必須パラメーターのプロパティを追加および更新プログラムを実行するビジネス オブジェクト メソッドの名前を、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションです。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 。 ObjectDataSource コントロールがデータ バインド コントロールに関連付けられている場合は、データ バインドされたコントロールによって、パラメーターが追加されます。 この場合、メソッドのパラメーター名が、データ バインド コントロール内のフィールド名を一致することを確認する必要があります。 更新プログラムが実行されるときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>メソッドが、コードによって明示的にまたは自動的にデータ バインドされたコントロールによって呼び出されます</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>。 同じ一般的なパターンに従うは<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>。 ビジネス オブジェクトをバッチ処理される代わりに、時に、これらの種類のデータ操作の&1; つのレコードを実行すると想定されます。      <a name=&quot;filtering_data&quot;></a>## ObjectDataSource コントロールには、によって取得されるデータをフィルター処理するデータのフィルター処理、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>としてデータが返される場合は、プロパティ、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト</xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 設定することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティ形式を使用してフィルター式を文字列構文とパラメーターで指定されている式で値を連結、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクションです</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>。      <a name=&quot;caching&quot;></a>## キャッシュが、複数の要求でビジネス オブジェクトのインスタンスは保持されません、ObjectDataSource によって識別されるメソッドの呼び出しの結果をキャッシュすることができます、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 データはキャッシュされたそれ以降の呼び出し中に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドには、ビジネス オブジェクトを作成して、呼び出しではなく、キャッシュされたデータが返されますその<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>リフレクションを使用します</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 オブジェクトを作成して、Web サーバーでメモリを犠牲にして、データ メソッドを呼び出すことを回避できますをキャッシュします。 ObjectDataSource が自動的にデータをキャッシュと、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`、および<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティが、キャッシュが破棄される前に、キャッシュがデータを格納する秒数に設定します</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>。 指定することも、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティと省略可能な<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A></xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>。 ObjectDataSource コントロールでは、すべての種類のデータをキャッシュすることができますが、リソースまたは複数の要求をサービスには共有できない状態を保持するオブジェクトをキャッシュする必要があります (たとえば、開いている<xref:System.Data.SqlClient.SqlDataReader>オブジェクト) オブジェクトの同じインスタンスが複数の要求をサービスに使用されるため、</xref:System.Data.SqlClient.SqlDataReader> 。      <a name=&quot;features&quot;></a>##、次の機能、ObjectDataSource コントロールの機能について説明します。      |機能 |要件 |  |----------------|------------------|  |選択 |<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティがデータを選択するビジネス オブジェクト メソッドの名前を設定し、プログラム、またはデータ バインド コントロールを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>コレクションに必要なパラメーターを含める |。  |並べ替え |並べ替えの条件を伝送する<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>メソッドのパラメーターの名前に<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>プロパティを設定します |。  |フィルタ リング |設定、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティ フィルター式に、必要に応じて、パラメーターを追加する、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>データにフィルターをコレクションと、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが呼び出されます</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティによって指定されたメソッドは、<xref:System.Data.DataSet>を返す必要がありますまたは<xref:System.Data.DataTable>|。  |ページング |データ ソースのページングがサポートされる場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>メソッドにパラメーター取得するレコードの最大数と、取得する最初のレコードのインデックスにはが含まれています</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A></xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 これらのパラメーターの名前を設定する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>プロパティをそれぞれ</xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A></xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>。 データ バインド コントロールできる場合があります、自体のページングを実行する、ObjectDataSource コントロールが直接によって指定されたメソッドでページングをサポートしていない場合でも、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 これを行うことができるデータ バインド コントロールの要件は<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティによって指定されたメソッドが<xref:System.Collections.ICollection>インターフェイスを実装するオブジェクトを返すことです |。  |更新 |データを更新するビジネス オブジェクトのメソッドの名前に<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティを設定し、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションに必要なパラメーターを含める |。  |削除する |ビジネス オブジェクトのメソッドや、データを削除する関数の名前に<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティを設定し、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクションに必要なパラメーターを含める |。  |挿入 |ビジネス オブジェクトのメソッドまたはデータを挿入する関数の名前を<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティを設定し、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクションに必要なパラメーターを含める |。  |キャッシュ |<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティを設定`true`、および、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>と、キャッシュされたデータのキャッシュ動作に従って<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティです |。     > [!NOTE] > ObjectDataSource クラスを使用して、更新またはデータを挿入する、クライアントで入力した文字列は自動的に変換されませんクライアントのカルチャの形式からサーバーのカルチャの形式にします</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A></xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A></xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A></xref:System.Collections.ICollection></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 たとえば、クライアントのカルチャは、日付の書式として DD、構造体、YYYY MM を指定する場合があり、サーバー上の日付の形式は/MM/DD/YYYY をする可能性があります。 その場合は、2009 年 10 月 5 日を入力すると、 <xref:System.Web.UI.WebControls.TextBox>2009 年 5 月 10 日として制御しますが、2009 年 5 月 10 日として解釈できます</xref:System.Web.UI.WebControls.TextBox>。 2009 年 10 月 15 日では、2009 年 15 月 10 日ように入力し、無効な日付として拒否されるようにします。      <a name=&quot;data_view&quot;></a>## データ ビューとしてすべてのデータ ソース コントロール、ObjectDataSource コントロールは、データ ソース ビュー クラスに関連付けられます。 ObjectDataSource コントロールのインターフェイス、ページの開発を使用して、データを操作するときに、<xref:System.Web.UI.WebControls.ObjectDataSourceView>クラスは、データ バインド コントロールを使用するインターフェイス</xref:System.Web.UI.WebControls.ObjectDataSourceView>。 さらに、<xref:System.Web.UI.WebControls.ObjectDataSourceView>クラスは、データ ソース コントロールの機能について説明し、実際の作業を実行します</xref:System.Web.UI.WebControls.ObjectDataSourceView>。 ObjectDataSource コントロールに関連付けられている&1; つだけがある<xref:System.Web.UI.WebControls.ObjectDataSourceView>、という名前が常と`DefaultView`</xref:System.Web.UI.WebControls.ObjectDataSourceView>。 中に、<xref:System.Web.UI.WebControls.ObjectDataSourceView>によってオブジェクトが公開されている、<xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>メソッド、プロパティとメソッドの多くがラップされ、ObjectDataSource コントロールによって直接公開されている</xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A></xref:System.Web.UI.WebControls.ObjectDataSourceView>。 バック グラウンドで、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトは取得、挿入、更新、削除、フィルター処理、およびデータの並べ替えを含む、すべてのデータ操作を実行します</xref:System.Web.UI.WebControls.ObjectDataSourceView>。 詳細については、 <xref:System.Web.UI.WebControls.ObjectDataSourceView>。</xref:System.Web.UI.WebControls.ObjectDataSourceView>を参照してください。      <a name=&quot;using_linq_to_sql&quot;></a>## LINQ to Sql を使用すると、LINQ to SQL クラスに、ObjectDataSource コントロールが使用できます。 そのため、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>データ コンテキスト クラスの名前を設定するには 設定することも、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>データ コンテキスト クラス内の対応する操作を実行するメソッドをメソッド</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>データ コンテキスト クラスの破棄をキャンセルするためにイベント</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>のイベント ハンドラーを作成する必要があります。 この手順は必要な LINQ to SQL は、遅延実行をサポートしているため、ObjectDataSource コントロールが、Select 操作の完了後、データ コンテキストを破棄しようとしています。 一方です。 LINQ to SQL クラスを作成する方法の詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。 データ コンテキスト クラスの破棄をキャンセルする方法の例は、次を参照してください、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 。      ## Entity Framework を使用しても使用できます、ObjectDataSource コントロールと Entity Framework。 詳細については、次を参照してください。 [Entity Framework と、ObjectDataSource コントロールを使用して](http://go.microsoft.com/fwlink/?LinkId=209117)です。      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:ObjectDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       ConflictDetection=&quot;OverwriteChanges|CompareAllValues&quot;       ConvertNullToDBNull=&quot;True|False&quot;       DataObjectTypeName=&quot;string&quot;       DeleteMethod=&quot;string&quot;       EnableCaching=&quot;True|False&quot;       EnablePaging=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       FilterExpression=&quot;string&quot;       ID=&quot;string&quot;       InsertMethod=&quot;string&quot;       MaximumRowsParameterName=&quot;string&quot;       OldValuesParameterFormatString=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDeleted=&quot;Deleted event handler&quot;       OnDeleting=&quot;Deleting event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnFiltering=&quot;Filtering event handler&quot;       OnInit=&quot;Init event handler&quot;       OnInserted=&quot;Inserted event handler&quot;       OnInserting=&quot;Inserting event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnObjectCreated=&quot;ObjectCreated event handler&quot;       OnObjectCreating=&quot;ObjectCreating event handler&quot;       OnObjectDisposing=&quot;ObjectDisposing event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnSelected=&quot;Selected event handler&quot;       OnSelecting=&quot;Selecting event handler&quot;       OnUnload=&quot;Unload event handler&quot;       OnUpdated=&quot;Updated event handler&quot;       OnUpdating=&quot;Updating event handler&quot;       runat=&quot;server&quot;       SelectCountMethod=&quot;string&quot;       SelectMethod=&quot;string&quot;       SkinID=&quot;string&quot;       SortParameterName=&quot;string&quot;       SqlCacheDependency=&quot;string&quot;       StartRowIndexParameterName=&quot;string&quot;       TypeName=&quot;string&quot;       UpdateMethod=&quot;string&quot;       Visible=&quot;True|False&quot;   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </UpdateParameters>   </asp:ObjectDataSource>   ```"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838).  \n  \n This section shows an ObjectDataSource in markup in an .aspx page and it shows the business objects that it works with. The example is the .aspx page. It contains a <xref:System.Web.UI.WebControls.GridView> control that is bound to an ObjectDataSource control. The ObjectDataSource control markup specifies the name of the business object and the name of the business object method to call in order to retrieve data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_1.aspx)]  \n  \n The following example shows the business object that the ObjectDataSource control in the .aspx page uses. (Many other ObjectDataSource code examples use this business object also.) The example consists of the following two basic classes:  \n  \n-   The `EmployeeLogic` class is the business logic class that the ObjectDataSource uses.  \n  \n-   The `NorthwindEmployee` class defines the data object that is returned by the `GetAllEmployees` method of the `EmployeeLogic` class.  \n  \n An additional `NorthwindDataException` class is provided as a convenience.  \n  \n This set of example classes works with the Northwind Traders database, which is available with Microsoft SQL Server and Microsoft Access. For a complete working example, you must compile and use these classes with the .aspx page example that is provided. For information about how to install the Northwind Traders database, see [How to: Install Sample Databases](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("TypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class ObjectDataSource : System.Web.UI.DataSourceControl
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDataSource()
  nameWithType: ObjectDataSource.ObjectDataSource()
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>クラスです。"
  syntax:
    content: public ObjectDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDataSource(String,String)
  nameWithType: ObjectDataSource.ObjectDataSource(String,String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>指定された型名とデータ取得メソッド名を持つクラス。"
  remarks: "値、 `typeName` Bin または App_Code ディレクトリに配置されているコードの部分修飾型またはアセンブリをグローバル アセンブリ キャッシュに登録されているコードの完全修飾型名パラメーターを指定できます。 グローバル アセンブリ キャッシュを使用する場合への適切な参照を追加する必要があります、`assemblies`は Machine.config または Web.config 構成ファイルのセクションです。"
  syntax:
    content: public ObjectDataSource (string typeName, string selectMethod);
    parameters:
    - id: typeName
      type: System.String
      description: "クラスの名前を<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>で動作します。"
    - id: selectMethod
      type: System.String
      description: "メソッドの名前または関数を<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>データを取得します。"
  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定の時間の長さ (秒単位)、データ ソース コントロールがデータをキャッシュすることによって取得される、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データのキャッシュをサポートしています</xref:System.Web.UI.WebControls.ObjectDataSource>。 データをキャッシュするために呼び出す、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、ビジネスではなく、キャッシュから、データを取得するオブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource>で動作します</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドがビジネス オブジェクトからデータを取得し、再度データをキャッシュします</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。       <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的にデータをキャッシュ時に、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`CacheDuration プロパティが、キャッシュは、キャッシュ エントリが破棄される前にデータを格納する時間を秒数を示す 0 より大きい値に設定します</xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。 0 の値では、無限の深さのキャッシュを示します。       実行時間の組み合わせで、キャッシュを調節し、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>設定</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティに設定されている、<xref:System.Web.UI.DataSourceCacheExpiry>値、<xref:System.Web.UI.WebControls.ObjectDataSource>最初の呼び出しにデータをキャッシュ、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、CacheDuration プロパティで指定されている時間の長さ、最大でのメモリを保持します</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.DataSourceCacheExpiry></xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>。 データは、メモリが必要な場合、継続時間の前にリリースされる可能性があります。 キャッシュは、次の呼び出し中に更新し、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティに設定されている<xref:System.Web.UI.DataSourceCacheExpiry>値、データ ソース コントロールが最初の呼び出しにデータをキャッシュする、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが各後続の呼び出しで、キャッシュを保持する時間枠をリセット、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.DataSourceCacheExpiry></xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>。 最後の呼び出し以降に CacheDuration プロパティに相当する時間のアクティビティがない場合、キャッシュが期限切れ、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。"
  example:
  - "This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports caching. To enable caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the CacheDuration and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \n  \n This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_2.cs)]"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "秒の数、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>の結果をキャッシュする<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>プロパティの呼び出し</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>。 既定値は 0 です。 値を負の値にすることはできません。"
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定キャッシュ有効期限の動作、期間と組み合わせると、データ ソース コントロールを使用するキャッシュの動作について説明します。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データのキャッシュをサポートしています</xref:System.Web.UI.WebControls.ObjectDataSource>。 データをキャッシュするために呼び出す、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、ビジネスではなく、キャッシュから、データを取得するオブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource>で動作します</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドがビジネス オブジェクトからデータを取得し、再度データをキャッシュします</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。       <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的にデータをキャッシュ時に、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティが、キャッシュは、キャッシュ エントリが破棄される前にデータを格納する時間を秒数を示す 0 より大きい値に設定します</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。 0 の値では、無限の深さキャッシュ期間を示します。       期間と CacheExpirationPolicy 設定の組み合わせでは、キャッシュを調節します。 CacheExpirationPolicy プロパティ設定されている場合、<xref:System.Web.UI.DataSourceCacheExpiry>値、<xref:System.Web.UI.WebControls.ObjectDataSource>最初の呼び出しにデータをキャッシュ、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、多くても、時間の間で指定されているメモリ内に保持し、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.DataSourceCacheExpiry>。 データは、メモリが必要な場合、継続時間の前にリリースされる可能性があります。 キャッシュは、次の呼び出し中に更新し、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 CacheExpirationPolicy プロパティ設定されている場合、<xref:System.Web.UI.DataSourceCacheExpiry>値、データ ソース コントロールが最初の呼び出しにデータをキャッシュする、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが、後続の呼び出しごとにキャッシュを保持する時間枠をリセット、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.DataSourceCacheExpiry>。 相当する時間のアクティビティがない場合、キャッシュが期限切れ、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティに最後に呼び出した後、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>。"
  example:
  - "This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports filtering and caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering and caching. To enable filtering and caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, caching is enabled because the `EmployeeLogic` object returns data as a <xref:System.Data.DataSet>, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and CacheExpirationPolicy properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList>. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_2.cs)]"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "1 つ、 <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref>値。 既定値は<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;></xref>です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはデータ ソース コントロールによって作成されたキャッシュ オブジェクトのすべてのデータにリンクされているユーザー定義のキー依存関係を設定します。"
  remarks: "CacheKeyDependency プロパティは、他の任意の文字列値を設定できます。       すべてのキャッシュ オブジェクトには、キーの有効期限が切れてが明示的に期限が切れています。 これにより、によって作成されたキャッシュ エントリを無効にするため、<xref:System.Web.UI.WebControls.ObjectDataSource>プログラムで独自のページからコードします</xref:System.Web.UI.WebControls.ObjectDataSource>。       <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データのキャッシュをサポートしています</xref:System.Web.UI.WebControls.ObjectDataSource>。 データをキャッシュするために呼び出す、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、ビジネスではなく、キャッシュから、データを取得するオブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource>で動作します</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドがビジネス オブジェクトからデータを取得し、再度データをキャッシュします</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。       <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的にデータをキャッシュ時に、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティが、キャッシュは、キャッシュ エントリが破棄される前にデータを格納する時間を秒数を示す 0 より大きい値に設定します</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。 0 の値では、無限の深さのキャッシュを示します。       によって作成されるすべてのキャッシュ エントリ間の依存関係を作成する CacheKeyDependency プロパティを設定することができます、<xref:System.Web.UI.WebControls.ObjectDataSource>制御とキー</xref:System.Web.UI.WebControls.ObjectDataSource> 。 できます期限切れにするすべてのキャッシュ エントリ プログラムでいつでも、キーを期限切れにします。 使用してキーの有効期限、<xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName>メソッドにパラメーターとして現在 CacheKeyDependency 値</xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName>。       組み合わせごとに一意のキャッシュ エントリが作成された、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A></xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A></xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>。 複数<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールで使用できる、同じキャッシュ エントリのシナリオで同じ型、メソッド、およびパラメーターを使用してデータを読み込む</xref:System.Web.UI.WebControls.ObjectDataSource>。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \n  \n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The CacheKeyDependency property is set to \"EmployeeDetails\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the CacheKeyDependency value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the CacheKeyDependency value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_2.vb)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_3.cs)]"
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "によって作成されたすべてのキャッシュ オブジェクトを識別するキーを<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  id: ConflictDetection
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定に新しい値だけが渡されるかどうかを決定する値、 <xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;> </xref>にメソッドまたは新旧両方の値が渡される、 <xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;> </xref>メソッドです。"
  remarks: "このプロパティは、新旧の値のパラメーターが指定されたメソッドに適用されるかどうかを決定、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。 メソッドである場合などで指定された、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティから返される、<xref:System.Data.DataTable>列を持つコントロール`Name`と`Number`、ConflictDetection プロパティに設定し、<xref:System.Web.UI.ConflictOptions>フィールド、パラメーターは、作成`Name`と`Number`の`Update`メソッド</xref:System.Web.UI.ConflictOptions></xref:System.Data.DataTable></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 ConflictDetection プロパティ設定されている場合、 <xref:System.Web.UI.ConflictOptions>、パラメーターが作成された値の`Name`、 `Number`、 `original_Name`、および`original_Number`</xref:System.Web.UI.ConflictOptions>。 (元の値のパラメーターの正確な名前が異なります、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティです)</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 。<xref:System.Web.UI.WebControls.ObjectDataSource>を判断するかどうか、メソッドをで指定された、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティが一致するパラメーター</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 。       同時実行制御は、データを読み取るし、複数のクライアントがアクセスして、同じデータを操作するときに、ストアで変更する方法を制御するデータ ストアを使用する手法です。 たとえば、1 つのクライアントは、データを読み取り、別のクライアントが同じデータを読み取り、別のユーザーに提示中に、ユーザーに提示します。 両方のユーザーは、データ更新、データ ストレージに送信すると、予期しない結果が発生する可能性、両方のクライアントは、同じデータの異なる値を指定する場合があります。 これは、競合と見なされます。 ConflictDetection プロパティを設定、<xref:System.Web.UI.ConflictOptions>値、`Update`メソッドの競合を検出し、必要に応じてそれらの処理を元のデータ ソースの新旧の値を比較し、</xref:System.Web.UI.ConflictOptions> 。       ConflictDetection プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>。"
  syntax:
    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }
    return:
      type: System.Web.UI.ConflictOptions
      description: "1 つ、 <xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref>値。 既定値は<xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref>です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  id: ConvertNullToDBNull
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定を示す値かどうか、 <xref href=&quot;System.Web.UI.WebControls.Parameter&quot;> </xref> update、insert、または削除操作に渡される値は自動的にから変換<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>を<xref href=&quot;System.DBNull.Value&quot;></xref>値に、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>コントロール。"
  remarks: "変換せず`null`を<xref:System.DBNull.Value>値、エラー実行時に発生します</xref:System.DBNull.Value>。 示すために、ConvertNullToDBNull プロパティを使用してかどうか<xref:System.Web.UI.WebControls.Parameter>update、insert、または削除操作に渡される値は自動的にから変換`null`を<xref:System.DBNull.Value>値に、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.DBNull.Value></xref:System.Web.UI.WebControls.Parameter>。"
  syntax:
    content: public bool ConvertNullToDBNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>、存在する場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>の値が<xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref>にオブジェクトが渡される、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>にコントロールを自動的に変換<xref href=&quot;System.DBNull.Value&quot;></xref>値です。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  id: DataObjectTypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定クラスの名前、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>更新プログラムのパラメーターのコントロールを使用して、挿入、または、データ バインド コントロールから個々 の値を渡す代わりに、データの操作を削除します。"
  remarks: "渡されるいくつかのパラメーターを指定する代わりに、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッド、いくつかのデータ フィールドの値を集計する&1; つのオブジェクトを作成することができます</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>。 このオブジェクトは、いくつかのパラメーターではなく、メソッドに渡されます。       既定の動作、<xref:System.Web.UI.WebControls.ObjectDataSource>データ バインド コントロールにバインドされたコントロールがデータ バインド コントロールが作成される、<xref:System.Web.UI.WebControls.Parameter>データ ソース内の各パラメーターのオブジェクト</xref:System.Web.UI.WebControls.Parameter></xref:System.Web.UI.WebControls.ObjectDataSource>。 ビジネス オブジェクトでは、多くのフィールドを持っている場合、その結果、メソッドは多数のフィールドもあります。 DataObjectTypeName プロパティでは、各データ フィールドのプロパティを持つ型を指定することができます。 次に、メソッドには、いくつかのパラメーターを渡すことではなく、ランタイムは&1; つのオブジェクトを作成し、そのすべてのプロパティを設定します。 このオブジェクトは、メソッドの呼び出しのパラメーター コレクションに追加されます。       DataObjectTypeName プロパティによって指定される型が、パラメーターを持たない既定コンス トラクターを持つ必要がありますので、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、型のインスタンスを作成できます</xref:System.Web.UI.WebControls.ObjectDataSource>。 型には、設定可能なプロパティを許可する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクト、データ バインド コントロールから渡される値に設定するコントロール</xref:System.Web.UI.WebControls.ObjectDataSource>。 プロパティの名前、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールがデータ バインドされたコントロールによって渡される値のパラメーターの名前と正確に一致するが必要です</xref:System.Web.UI.WebControls.ObjectDataSource>。       DataObjectTypeName プロパティが設定されている場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールがで指定されているメソッドのデータ バインド コントロールに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>それぞれのプロパティが DataObjectTypeName プロパティで指定されている型の&1; つのパラメーターを持つ必要があります</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions>値で指定されているメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティが DataObjectTypeName プロパティで指定されている型の&1; つのパラメーターを持つ必要があります</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A></xref:System.Web.UI.ConflictOptions></xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions>値で指定されているメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティが DataObjectTypeName プロパティで指定されている型の&2; つのパラメーターを持つ必要があります</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A></xref:System.Web.UI.ConflictOptions></xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>。 最初のパラメーターには、元の値が含まれています。2 番目のパラメーターには、新しい値が含まれています。       DataObjectTypeName プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>。"
  example:
  - "The section contains two code examples. The first code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The second code example shows the Web page that uses the two classes that are used in the first code example.  \n  \n The following code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The select method of the `AggregateData` class returns a <xref:System.Data.DataTable> object with two columns named `Name` and `Number`. Similarly, the `NewData` class defines two read/write properties, `Name` and `Number`. The `Insert` method of the `AggregateData` class takes one parameter of type `NewData`. The `TypeName` property of the <xref:System.Web.UI.WebControls.ObjectDataSource> is set to `AggregateData` and the DataObjectTypeName property is set to `NewData`.  \n  \n [!code-cs[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_1.cs)]\n [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_1.vb)]  \n  \n The following code example shows the Web page that uses the two classes that are used in the preceding code example.  \n  \n [!code-cs[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_2.aspx)]\n [!code-vb[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_2.aspx)]"
  syntax:
    content: public string DataObjectTypeName { get; set; }
    return:
      type: System.String
      description: "オブジェクトの種類を識別する部分的または完全修飾クラス名を<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>のパラメーターとして使用できる、 <> </> *>、 <> </> *>、または<xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>操作</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete
  id: Delete
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Delete()
  nameWithType: ObjectDataSource.Delete()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって識別されるメソッドを呼び出すと、削除操作を実行、 <> </> *> プロパティ内にあるすべてのパラメーターで、 <> </> *> コレクション。"
  remarks: "削除操作を実行すると、前に、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting></xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A>。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベント パラメーターの値を確認して、削除操作の前に処理を実行します</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>。 削除操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトによって識別されるオブジェクトのインスタンスを作成するリフレクションを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A></xref:System.Web.UI.WebControls.ObjectDataSourceView>。 によって識別されるメソッドを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティ、関連付けられているいずれかを使用して<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。 よると、パラメーターの名前が作成された場合は、関連付けられたデータ バインド コントロールから削除パラメーターを取得、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>。 削除操作の完了後、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.Deleted></xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A>。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>イベントを戻り値、出力パラメーターと、例外を調べると、後続の処理を実行する</xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>。       Delete メソッドのデリゲートを<xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>のメソッド、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>。      ## データ バインド コントロールと、<xref:System.Web.UI.WebControls.ObjectDataSource>など、データ バインド コントロールにコントロールが関連付けられている、<xref:System.Web.UI.WebControls.GridView>コントロール必要はありません ページのコードからは Delete メソッドを呼び出す</xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.ObjectDataSource>。 Delete メソッドは、代わりに、データ バインド コントロールによって直接呼び出されます。       パラメーターの詳細については、オブジェクトの有効期間のマージおよびメソッドの解決について<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>"
  syntax:
    content: public int Delete ();
    parameters: []
    return:
      type: System.Int32
      description: "場合に、基になるデータ ストレージから削除された行の数を表す値、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*>のプロパティ、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&quot;> </xref>設定されている、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource.Deleted&quot;> </xref>イベントですそれ以外の場合、-1。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*> 。"
  overload: System.Web.UI.WebControls.ObjectDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: ObjectDataSource.Deleted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "発生したときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>操作が完了します</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>。"
  remarks: "戻り値または出力パラメーターの値を確認するか、後に例外がスローされたかどうかを決定する、削除されたイベントを処理する<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>操作が完了します</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>。 戻り値、出力パラメーター、および例外処理のプロパティから使用できますが、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>。       使用することができます、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>から削除された行の数を取得するオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A></xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs></xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>。 これを行うには、設定、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>。 指定されたメソッドから削除された行の数を返す場合は、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティ値から使用可能な<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>オブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs></xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A></xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed and the `NorthwindEmployeeDeleted` delegate is called to handle the Deleted event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  id: DeleteMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定メソッドまたは関数の名前、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>データを削除するコントロールを呼び出します。"
  remarks: "ビジネス オブジェクトは、バッチ内ではなく、一度に&1; レコードずつデータを削除すると見なされます。       DeleteMethod プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>。       パラメーター名が構成されていることを確認してください、<xref:System.Web.UI.WebControls.ObjectDataSource>内の制御、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクション select メソッドによって返される列名に一致します</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。      ## DeleteMethod プロパティによって識別されるメソッドはインスタンス メソッドになるオブジェクトの有効期間または`static`(`Shared` Visual Basic で) メソッドです。 インスタンス メソッドである場合は、ビジネス オブジェクトが作成され、DeleteMethod プロパティが呼び出されるたびに破棄されます。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>DeleteMethod プロパティが呼び出される前に、ビジネス オブジェクトを使用するイベントです</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>。 処理することも、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>DeleteMethod プロパティが呼び出された後に発生するイベントです</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable>、インターフェイス、<xref:System.IDisposable.Dispose%2A>オブジェクトが破棄される前に、メソッドが呼び出されます</xref:System.IDisposable.Dispose%2A></xref:System.IDisposable>。 メソッドの場合、 `static` (`Shared` Visual Basic で)、メソッド、ビジネス オブジェクトは作成されず、処理することはできません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>。      ## マージ パラメーターのパラメーターの追加、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクションの&3; つのソースから: - 実行時に、データ バインド コントロールから</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>。      `DeleteParameters`要素を宣言します。      `Deleting`メソッドを宣言します。       データ バインド コントロールから生成されるすべてのパラメーターを追加する最初に、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクションです</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>。 たとえば場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールにバインドする、<xref:System.Web.UI.WebControls.GridView>列を持つコントロールを`Name`と`Number`、パラメーターを`Name`と`Number`コレクションに追加されます</xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.ObjectDataSource>。 パラメーターの正確な名前が異なります、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>。 これらのパラメーターのデータ型は`string`します。 次に記載されているパラメーター、`DeleteParameters`要素が追加されます。 場合のパラメーター、`DeleteParameters`になっているパラメーターと同じ名前で要素が見つかる、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>で指定されているパラメーターと一致する、既存のパラメーターのコレクションが変更された、`DeleteParameters`要素</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>。 通常、パラメーターのデータの種類の変更に使用されます。 最後に、プログラムで追加および削除できます内のパラメーター、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベントが発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッドを実行します</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決は、次のセクションで説明しています。      ## メソッドの解決時に、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッドは、宣言的に作成されたパラメーターのデータ バインド コントロールからのデータ フィールド、`DeleteParameters`要素、およびパラメーターで追加された、<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>イベント ハンドラーがすべてマージします</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting></xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>。 (詳細については、前のセクションを参照してください)。<xref:System.Web.UI.WebControls.ObjectDataSource>に呼び出すメソッドを検索するオブジェクトを試みます</xref:System.Web.UI.WebControls.ObjectDataSource>。 まず、DeleteMethod プロパティで指定されている名前を持つ&1; つまたは複数のメソッドを検索します。 一致するものが見つからない場合、<xref:System.InvalidOperationException>例外がスローされます</xref:System.InvalidOperationException>。 一致が見つかった場合、一致するパラメーター名が検索されます。 たとえば、によって指定される型、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティという&2; つのメソッドは、 `DeleteARecord`</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 。 1 つ`DeleteARecord`1 つのパラメーターを持つ`ID`、および、その他の`DeleteARecord`2 つのパラメーターを持ち`Name`と`Number`です。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクションという名前の&1; つだけのパラメーターには、 `ID`、`DeleteARecord`メソッドだけを`ID`パラメーターと呼びます</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は重要ではありません。       場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティを設定すると、メソッドは別の方法で解決されています</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>。 <xref:System.Web.UI.WebControls.ObjectDataSource>で型の&1; つのパラメーターを取るを DeleteMethod プロパティで指定されている名前を持つメソッドが指定された検索、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。 この場合、パラメーターの名前は関係ありません。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the DeleteMethod property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindDataException` delegate.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_2.cs)]"
  syntax:
    content: public string DeleteMethod { get; set; }
    return:
      type: System.String
      description: "メソッドの名前を表すまたは関数の文字列、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>を使用してデータを削除します。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって使用されているパラメーターを含むパラメーターのコレクションを取得、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>。"
  remarks: "名前と型のパラメーターの名前と deleteparameters の各コレクションに含まれているパラメーターの型が一致する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>メソッド シグネチャ</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。 パラメーター名が影響を受けました、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティであり、大文字小文字を区別します</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>。 コレクション内のパラメーターは、データ バインド コントロール、宣言によって、指定されたパラメーターおよびプログラムによって追加されたパラメーターに含まれるデータによって異なります。 詳細についてを参照してください「パラメーターをマージ」<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>と[、ObjectDataSource コントロールでのパラメーターの使用](~/add/includes/ajax-current-ext-md.md)</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>。       Deleteparameters の各プロパティの取得、<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>。       パラメーターの詳細については、オブジェクトの有効期間のマージおよびメソッドの解決について<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use the DeleteParameters property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event is called with two parameters. One parameter, `EmpID`, comes from the <xref:System.Web.UI.WebControls.DataGrid> control, and is based on the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property. The other parameter comes from the declarative DeleteParameters property. The `EmployeeLogic` class overloads the `DeleteEmployee` method. One overload takes a `NorthwindEmployee` parameter, and the other takes an <xref:System.Int32> parameter named `anID`. In the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event, the entries in the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property are adjusted to include only one parameter named `anID` with the value from `original_EmpID`. When the event handler exists, the matching `DeleteEmployee` method is called.  \n  \n The following code example shows the Web page that displays the <xref:System.Web.UI.WebControls.DataGrid> control and handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_2.cs)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>によって使用されるパラメーターを格納している、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: ObjectDataSource.Deleting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>操作</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>。"
  remarks: "パラメーターの値を検証する、アプリケーションに固有の追加の初期化を実行する、削除すると、イベントを処理またはパラメーターを変更する前に値、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、削除操作を実行します</xref:System.Web.UI.WebControls.ObjectDataSource>。 パラメーターとして使用できる、<xref:System.Collections.IDictionary>によってアクセスされるコレクション、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>オブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs></xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A></xref:System.Collections.IDictionary>。       設定して、削除操作を取り消すことができます、<xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>に`true`</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs></xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the Deleting event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定を示す値かどうか、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>コントロールがデータ キャッシュを有効にします。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データのキャッシュをサポートしています</xref:System.Web.UI.WebControls.ObjectDataSource>。 データをキャッシュするために呼び出す、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドは、キャッシュからデータを取得ではなく、<xref:System.Web.UI.WebControls.ObjectDataSource>ビジネス オブジェクトのインスタンスを作成し、そのデータ メソッドを呼び出すします</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドがビジネス オブジェクトからデータを取得し、再度データをキャッシュします</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。       <xref:System.Web.UI.WebControls.ObjectDataSource>EnableCaching プロパティ設定されている場合にコントロールがデータに自動的にキャッシュされる`true`と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティが、キャッシュは、キャッシュ エントリが破棄される前にデータを格納する時間を秒数を示す 0 より大きい値に設定します</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。 0 の値では、無限の深さのキャッシュを示します。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \n  \n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> property is set to \"EmployeeDetails\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_2.vb)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_3.cs)]"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>データ ソース コントロールのデータのキャッシュが有効になっている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "EnableCaching プロパティに設定<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>でメソッドが指定されている場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>プロパティから返される、 <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> 。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  id: EnablePaging
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはデータ ソース コントロールが取得したデータのセットを使用するページングをサポートするかどうかを示す値を設定します。"
  remarks: "によってページング、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、EnablePaging を設定して処理<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSource>と適切なパラメーターを使用して、ビジネス オブジェクトの選択メソッドを定義します</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A></xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。 EnablePaging プロパティに設定するときに`true`、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>コレクションには、最初の行が要求されると要求された行の数の&2; つのパラメーターが含まれています</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>。 これら&2; つのパラメーターがによって定義された名前は、<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A></xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>。 `Select`メソッドは、要求された行数、指定したインデックスを開始位置を返す必要があります。 ページ サイズによっては、データが均等に分割されない可能性があります、ため、最後のページより少ない行が含まれます。 したがって、要求された行の数が返される行の実際には最大数です。       関連付けられたデータ バインド コントロールでページングが有効の場合、データ バインド コントロールを呼び出す、`Select`開始インデックスと必要とされる行の数を持つメソッドです。 また場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティが設定されて、データ バインド コントロールのページャー コントロールを表示する前にメソッドを呼び出します</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>。 たとえば場合、<xref:System.Web.UI.WebControls.GridView>コントロールがページ サイズは 5 とで指定されているメソッドで有効になっているページング、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティは、20 を返します、ページャーで 4 つのページが表示されます</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A></xref:System.Web.UI.WebControls.GridView>。       EnablePaging プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose EnablePaging property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_3.vb)]"
  syntax:
    content: public bool EnablePaging { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>データ ソース コントロールには、データを介してページングがサポートされている場合を取得します。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  id: FilterExpression
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定は、メソッドであるときに適用するフィルター式で指定された、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>プロパティが呼び出されます</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データのフィルター処理をサポートしている場合にのみ、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを返します、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト</xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。       FilterExpression プロパティに使用される構文は、書式指定文字列スタイル式です。 フィルター式の構文は同じ構文で受け入れを<xref:System.Data.DataColumn.Expression%2A>プロパティ</xref:System.Data.DataColumn.Expression%2A>。 パラメーターを追加する場合、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクション、書式文字列のプレース ホルダーを含めることもできます</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>。 たとえば、含める`&quot;{0}&quot;`パラメーター値の代わりに式でします。 内のパラメーターのインデックスに従ってプレースは、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクションです</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>。       FilterExpression プロパティでは、パラメーターを含めることができます。 パラメーターの型が文字列型または char 型の場合は、パラメーターを単一引用符で囲みます。 パラメーターが数値型の場合、引用符は必要ありません。       <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>FilterExpression プロパティ内にあるプレース ホルダーに評価されるパラメーターがコレクションに含まれています</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>。       FilterExpression プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>。      > [!NOTE] > クライアントから受信したフィルターのパラメーター値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しに適用されます、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>によって返されるオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Data.DataTable></xref:System.Data.DataSet>。 FilterExpression プロパティは、返される項目数を制限する、セキュリティ対策として使用されている場合、フィルターを使用する前に、パラメーター値を検証する必要があります。"
  example:
  - "The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \n  \n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, enter the full name of the employee in the <xref:System.Web.UI.WebControls.TextBox>, and then click the **Submit** button.  \n  \n The FilterExpression property specifies an expression that is used to filter the data that is retrieved by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_2.vb)]"
  syntax:
    content: public string FilterExpression { get; set; }
    return:
      type: System.String
      description: "メソッドまたはで識別される関数を使用してデータを取得するときに適用されるフィルター式を表す文字列、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "FilterExpression プロパティが設定され、<xref:System.Web.UI.WebControls.ObjectDataSource.Select*>メソッドが返されません、 <xref href=&quot;System.Data.DataSet&quot;> </xref>または<xref href=&quot;System.Data.DataTable&quot;> </xref></xref:System.Web.UI.WebControls.ObjectDataSource.Select*> 。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering
  id: Filtering
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Filtering
  nameWithType: ObjectDataSource.Filtering
  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "フィルター操作の前に発生します。"
  remarks: "前に、のフィルター パラメーターの値の検証操作を実行する、フィルター イベントを処理、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、フィルター操作を実行します</xref:System.Web.UI.WebControls.ObjectDataSource>。 設定して、選択した操作を取り消すことができます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs>に`true`</xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs></xref:System.ComponentModel.CancelEventArgs.Cancel%2A>。 場合にのみこのイベントは、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティが設定されています</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>。       フィルター イベントを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName>のイベント、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName>。      > [!IMPORTANT] > クライアントから受信したフィルターのパラメーター値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しに適用されます、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>によって返されるオブジェクト、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Data.DataTable></xref:System.Data.DataSet>。 使用している場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>、フィルターを使用する前に、パラメーターの値を検証する必要があります、返される項目数を制限するセキュリティ対策としてプロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  id: FilterParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "内の任意のパラメーター プレース ホルダーに関連付けられているパラメーターのコレクションを取得、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>文字列</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データのフィルター処理をサポートしている場合にのみ、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを返します、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト</xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。       使用される構文、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>形式の文字列形式の式です</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>。 フィルター式の構文は同じ構文で受け入れを<xref:System.Data.DataColumn.Expression%2A>プロパティ</xref:System.Data.DataColumn.Expression%2A>。 FilterParameters コレクションにパラメーターを追加する場合は、書式文字列のプレース ホルダーも含めることができます。 たとえば、含める`&quot;{0}&quot;`パラメーター値の代わりに式でします。 このプレース FilterParameters コレクションは、       内のパラメーターを含めることができます、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>。 パラメーターが文字列型または char 型の場合は、パラメーターを単一引用符で囲みます。 パラメーターが数値型の場合、引用符は必要ありません。       FilterParameters プロパティの取得、<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> object to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The second code example provides an example of a middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \n  \n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, in the <xref:System.Web.UI.WebControls.TextBox>, enter the full name of the employee, and then click the **Submit** button.  \n  \n The <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property specifies an expression that is used to filter the data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the FilterParameters collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required. The FilterParameters collection contains one parameter, a <xref:System.Web.UI.WebControls.FormParameter> object that is bound to the <xref:System.Web.UI.WebControls.TextBox> control.  \n  \n> [!IMPORTANT]\n>  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataView> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_2.vb)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>で見つかったすべてのパラメーター プレース ホルダーに関連付けられているパラメーターのセットを含む、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "設定する、 <> </> *> プロパティおよび<> *> メソッドが返されません、 <xref href=&quot;System.Data.DataSet&quot;> </xref>または<xref href=&quot;System.Data.DataTable&quot;></xref>です。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: ObjectDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "データ ソース コントロールに関連付けられている名前付きのデータ ソース ビューを取得します。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、1 つだけのデータ ソース ビューをサポートしています</xref:System.Web.UI.WebControls.ObjectDataSource>。 すべてのデータ ソース ビュー オブジェクトと同様、<xref:System.Web.UI.WebControls.ObjectDataSourceView>関連付けられているデータ ソース コントロールの機能を定義は、基になるデータ ストレージからデータを取得する必要はし、並べ替え、挿入、削除、および更新などの操作を実行するすべての作業を実行します</xref:System.Web.UI.WebControls.ObjectDataSourceView>。       GetView メソッドは、ページのコードではなく、データ バインド コントロールによって呼び出される対象としています。"
  syntax:
    content: protected override System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "取得するビューの名前。 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>&1; つのビューをサポートしている`viewName`は無視されます。"
    return:
      type: System.Web.UI.DataSourceView
      description: "<xref href=&quot;System.Web.UI.WebControls.ObjectDataSourceView&quot;> </xref>という<xref uid=&quot;langword_csharp_DefaultView&quot; name=&quot;DefaultView&quot; href=&quot;&quot;></xref>と関連付けられている、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.GetView*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定した<code> viewName </code>は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>以外の項目または<xref uid=&quot;langword_csharp_DefaultView&quot; name=&quot;DefaultView&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: ObjectDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "関連付けられているビュー オブジェクトの一覧を表す名前のコレクションを取得、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>オブジェクト。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、という名前の&1; つのビューをサポートしている`DefaultView`、その基になるデータ</xref:System.Web.UI.WebControls.ObjectDataSource>。 GetViewNames メソッドでは、この&1; つのビューの名前の&1; つの要素のコレクションを返します。       GetViewNames メソッドは、ページ コードではなく、データ バインド コントロールによって呼び出される対象としています。"
  syntax:
    content: protected override System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>に関連付けられているビューの名前を格納している、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref></xref:System.Collections.ICollection> 。"
  overload: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert
  id: Insert
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Insert()
  nameWithType: ObjectDataSource.Insert()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって識別されるメソッドを呼び出すと、挿入操作を実行、 <> </> *> プロパティと任意のパラメーターで、 <> </> *> コレクション。"
  remarks: "挿入操作を実行すると、前に、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting></xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A>。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>イベント パラメーターの値を確認して、挿入操作の前に処理を実行します</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>。 挿入操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトによって識別されるオブジェクトのインスタンスを作成するリフレクションを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A></xref:System.Web.UI.WebControls.ObjectDataSourceView>。 によって識別されるメソッドを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティ、関連付けられているいずれかを使用して<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。 挿入操作の完了後、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.Inserted></xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>イベントを戻り値、出力パラメーターと、例外を調べると、後続の処理を実行する</xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>。       挿入メソッドのデリゲートを<xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>のメソッド、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>。       パラメーターの詳細については、オブジェクトの有効期間のマージおよびメソッドの解決について<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>      ## データ バインド コントロールと、<xref:System.Web.UI.WebControls.ObjectDataSource>など、データ バインド コントロールにオブジェクトが関連付けられている、<xref:System.Web.UI.WebControls.GridView>コントロールにする必要はありませんページ コードから挿入メソッドを呼び出します</xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.ObjectDataSource>。 Insert メソッドは、代わりに、データ バインド コントロールによって直接呼び出されます。"
  syntax:
    content: public int Insert ();
    parameters: []
    return:
      type: System.Int32
      description: "基になるデータ ストレージに挿入される行の数を表す値。"
  overload: System.Web.UI.WebControls.ObjectDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: ObjectDataSource.Inserted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "発生したときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>操作が完了します</xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>。"
  remarks: "戻り値または出力パラメーターの値を確認するか、後に例外がスローされたかどうかを決定する、Inserted イベントを処理する<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作が完了します</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>。 戻り値、出力パラメーター、および例外処理のプロパティから使用できますが、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: ObjectDataSource.Inserting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>操作</xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>。"
  remarks: "パラメーターの値を検証する、アプリケーションに固有の追加の初期化を実行する挿入イベントを処理またはパラメーターを変更する前に値、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、挿入操作を実行します</xref:System.Web.UI.WebControls.ObjectDataSource>。 パラメーターとして使用できる、<xref:System.Collections.IDictionary>によってアクセスされるコレクション、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>オブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs></xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A></xref:System.Collections.IDictionary>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \n  \n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the Inserting event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  id: InsertMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定メソッドまたは関数の名前、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>データを挿入するコントロールを呼び出します。"
  remarks: "ビジネス オブジェクトは、バッチ内ではなく、一度に&1; レコードずつデータを挿入すると見なされます。       InsertMethod プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクト</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>。      ## InsertMethod プロパティによって識別されるメソッドはインスタンス メソッドになるオブジェクトの有効期間または`static`(`Shared` Visual Basic で) メソッドです。 インスタンス メソッドである場合は、ビジネス オブジェクトが作成され、InsertMethod プロパティによって指定されたメソッドが呼び出されるたびに破棄されます。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>InsertMethod プロパティが呼び出される前に、ビジネス オブジェクトを使用するイベントです</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>。 処理することも、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>で指定されているメソッドの後に発生するイベント、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティが呼び出されます</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable>、インターフェイス、<xref:System.IDisposable.Dispose%2A>オブジェクトが破棄される前に、メソッドが呼び出されます</xref:System.IDisposable.Dispose%2A></xref:System.IDisposable>。 メソッドの場合`static`(`Shared` Visual Basic で)、ビジネス オブジェクトが作成されないこと、および処理することはできません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>。      ## マージ パラメーターのパラメーターの追加、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクションの&3; つのソースから: - 実行時に、データ バインド コントロールから</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>。      `InsertParameters`要素を宣言します。      `Inserting`メソッド、プログラムでします。       データ バインド コントロールから生成されるすべてのパラメーターを追加する最初に、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクションです</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>。 たとえば場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールにバインドする、<xref:System.Web.UI.WebControls.GridView>列を持つコントロールを`Name`と`Number`、パラメーターの`Name`と`Number`コレクションに追加されます</xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.ObjectDataSource>。 これらのパラメーターのデータ型は`string`します。 次に記載されているパラメーター、`InsertParameters`要素が追加されます。 場合のパラメーター、`InsertParameters`になっているパラメーターと同じ名前で要素が見つかる、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>で指定されているパラメーターと一致する、既存のパラメーターのコレクションが変更された、`InsertParameters`要素</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>。 通常、パラメーターのデータの種類の変更に使用されます。 最後に、プログラムで追加および削除できます内のパラメーター、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>イベントが発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>メソッドを実行します</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決は、次のセクションで説明しています。      > [!IMPORTANT] > クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値を InsertMethod プロパティ      ## メソッドの解決時に、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>メソッドは、宣言的に作成されたパラメーターのデータ バインド コントロールからのデータ フィールド、`InsertParameters`要素、およびパラメーターで追加された、<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>イベント ハンドラーがすべてマージします</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting></xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>。 (詳細については、前のセクションを参照してください)。<xref:System.Web.UI.WebControls.ObjectDataSource>に呼び出すメソッドを検索するオブジェクトを試みます</xref:System.Web.UI.WebControls.ObjectDataSource>。 まず、InsertMethod プロパティで指定されている名前を持つ&1; つまたは複数のメソッドを検索します。 一致するものが見つからない場合、<xref:System.InvalidOperationException>例外がスローされます</xref:System.InvalidOperationException>。 一致が見つかった場合、一致するパラメーター名が検索されます。 たとえば、によって指定される型、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティという&2; つのメソッドは、 `InsertARecord`</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 。 1 つ`InsertARecord`1 つのパラメーターを持つ`ID`、および、その他の`InsertARecord`2 つのパラメーターを持ち`Name`と`Number`です。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクションという名前の&1; つだけのパラメーターには、 `ID`、`InsertARecord`メソッドだけを`ID`パラメーターと呼びます</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は重要ではありません。       場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティを設定すると、メソッドは別の方法で解決されています</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>。 <xref:System.Web.UI.WebControls.ObjectDataSource>で型の&1; つのパラメーターを取るを InsertMethod プロパティで指定されている名前を持つメソッドが指定された検索、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。 この場合、パラメーターの名前は関係ありません。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The InsertMethod property identifies which method performs the insert operation.  \n  \n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the InsertMethod property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_2.cs)]"
  syntax:
    content: public string InsertMethod { get; set; }
    return:
      type: System.String
      description: "メソッドの名前を表すまたは関数の文字列、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>を使用してデータを挿入します。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって使用されているパラメーターを含むパラメーターのコレクションを取得、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>。"
  remarks: "名前と InsertParameters コレクションに含まれているパラメーターの型は、名前とされているパラメーターの型に一致する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>プロパティの署名</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。 パラメーター名は大文字小文字を区別します。 など、パラメーターを提供するデータ バインド コントロールを使用する場合、<xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>、コントロール、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールがデータ バインドされたコントロールによって提供されるパラメーターを使用して、コレクションで明示的に指定されているすべてのパラメーターを自動的にマージします</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.DetailsView></xref:System.Web.UI.WebControls.GridView>。 データ バインド コントロールが常に、パラメーターとしてを指定するためには、このことは重要<xref:System.String>型、およびメソッドのシグネチャに数値または日付型の場合は、する必要があります明示的にパラメーター コレクションに含める、InsertParameters、適切な型です</xref:System.String>。 それ以外の場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールはコレクション内のパラメーターで定義されている型に従ったパラメーターをキャストしようとしています</xref:System.Web.UI.WebControls.ObjectDataSource>。 詳細については、次を参照してください。 [、ObjectDataSource コントロールでのパラメーターの使用](~/add/includes/ajax-current-ext-md.md)です。       InsertParameters プロパティの取得、<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>。       パラメーターの詳細については、オブジェクトの有効期間のマージおよびメソッドの解決について<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example implementation of the `Insert` method that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays text boxes in which you can enter data for a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \n  \n If you click the **Insert** button, the operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property and any parameters that are specified in the InsertParameters collection. In this code example, one parameter is specified in the InsertParameters collection that corresponds to the supervisor's ID. This is because even though the ID is displayed in the <xref:System.Web.UI.WebControls.GridView.Rows%2A> collection for the <xref:System.Web.UI.WebControls.DetailsView> control as a <xref:System.Web.UI.WebControls.BoundField> object, it is passed as a string to the <xref:System.Web.UI.WebControls.ObjectDataSource> control. By adding it explicitly to the InsertParameters collection with a <xref:System.Web.UI.WebControls.Parameter.Type%2A> property set to the <xref:System.TypeCode> value, it will be passed correctly by the <xref:System.Web.UI.WebControls.ObjectDataSource> to the method as an <xref:System.Int32>, not as a string.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method of the object has a method signature that includes parameters, the InsertParameters collection must contain parameters that have names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n> [!IMPORTANT]\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_1.aspx)]  \n  \n The following code example provides an example implementation of the `Insert` method that the preceding code example uses. The `InsertNewEmployeeWrapper` method is added to the `EmployeeLogic` middle-tier object that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview to enable the object to work more easily with the <xref:System.Web.UI.WebControls.ObjectDataSource> control in Web scenarios, without a substantial rewrite to the actual business logic.  \n  \n To run the example, you must have the `NorthwindEmployee` class that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. This example illustrates only how to connect the <xref:System.Web.UI.WebControls.ObjectDataSource> to a business object method that gets data for a new database record by using parameters. The example does not add records to the database, because the `Save` method of the `NorthwindEmployee` class does not include code to update the database.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_2.cs)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>で識別されるメソッドによって使用されるパラメーターを格納している、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: ObjectDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "以前に保存したビューステートを読み込みます、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>コントロール。"
  remarks: "このメソッドは、主に、.NET Framework インフラストラクチャによって使用され、コードから直接使用するものではありません。 ただし、コントロールの開発者は、カスタム サーバー コントロールがそのビューステートを復元する方法を指定するには、このメソッドをオーバーライドすることができます。 詳細については、次を参照してください。 [ASP.NET 状態管理の概要](~/add/includes/ajax-current-ext-md.md)です。       LoadViewState メソッドはの以前に保存したビューステートの読み込みに使用、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource>。"
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "コントロールの保存されているビュー ステートの値を格納するオブジェクト。"
  overload: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  id: MaximumRowsParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはビジネス オブジェクト データの取得メソッドのパラメーターのデータ ソースのページング サポートを取得するレコードの数を示すために使用される名前を設定します。"
  remarks: "MaximumRowsParameterName プロパティは、データ ソース ページングをサポートするために使用されます。 方法については<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールを参照してください<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A></xref:System.Web.UI.WebControls.ObjectDataSource>によってページングはサポートします。       MaximumRowsParameterName プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The MaximumRowsParameterName property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_3.vb)]"
  syntax:
    content: public string MaximumRowsParameterName { get; set; }
    return:
      type: System.String
      description: "名前、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>取得するレコードの数を示すために使用されるパラメーター</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> 。 既定値は`&quot;maximumRows&quot;`します。"
  overload: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  id: ObjectCreated
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectCreated
  nameWithType: ObjectDataSource.ObjectCreated
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって識別されるオブジェクトの後に発生する、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>プロパティを作成します</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>。"
  remarks: "ビジネス オブジェクトで他のメソッドを呼び出すのプロパティを設定するには、ObjectCreated イベントを処理する前に、ビジネス オブジェクトに固有であるその他の初期化を実行したり、<xref:System.Web.UI.WebControls.ObjectDataSource>オブジェクトは、データ操作を実行するビジネス オブジェクト データ メソッドを呼び出します</xref:System.Web.UI.WebControls.ObjectDataSource>。 オブジェクトへの参照がアクセス、<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>オブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs></xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>。       かどうか、データ操作を実行する識別されるメソッドは`static`(`Shared` Visual Basic で) では、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>と ObjectCreated イベントが発生することはありません</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  id: ObjectCreating
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectCreating
  nameWithType: ObjectDataSource.ObjectCreating
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって識別されるオブジェクトの前に発生する、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>プロパティを作成します</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>。"
  remarks: "かどうか、データ操作を実行する識別されるメソッドは`static`(`Shared` Visual Basic で)、ObjectCreating と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>イベントが発生することはありません</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>。       <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的にリフレクションを使用してそのインスタンスを作成するビジネス オブジェクトの既定のコンス トラクターを呼び出します</xref:System.Web.UI.WebControls.ObjectDataSource>。 別のコンス トラクターを明示的に呼び出す ObjectCreating イベントを処理し、結果をオブジェクトのインスタンスを設定、 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>、関連するプロパティ<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>オブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs></xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation.  \n  \n> [!NOTE]\n>  In a production application, multiple requests might end up simultaneously using the same instance. Therefore, the object needs to be implemented in a thread-safe manner.  \n  \n This code example demonstrates this pattern. You can handle the ObjectCreating event to check the cache for an object first, and only create an instance of the object, if one is not already cached. Then, handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call <xref:System.IDisposable.Dispose%2A> method on the object.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_1.aspx)]  \n  \n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_2.vb)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  id: ObjectDisposing
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDisposing
  nameWithType: ObjectDataSource.ObjectDisposing
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって識別されるオブジェクトの前に発生する、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>プロパティは破棄されます</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>。"
  remarks: "ObjectDisposing 常にこのイベントは、ビジネス オブジェクトのインスタンスが破棄される前にします。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable>、インターフェイス、<xref:System.IDisposable.Dispose%2A>このイベントが発生した後にメソッドが呼び出されます</xref:System.IDisposable.Dispose%2A></xref:System.IDisposable>。       オブジェクトの他のメソッドを呼び出すのプロパティを設定またはクリーンアップは、オブジェクトが破棄される前に、オブジェクトに固有の実行 ObjectDisposing イベントを処理します。 オブジェクトへの参照がアクセス、<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>オブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs></xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>。       使用すると、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールと linq TO SQL クラスを ObjectDisposing イベントのハンドラーで、データ コンテキスト クラスの破棄を取り消す必要があります</xref:System.Web.UI.WebControls.ObjectDataSource>。 この手順が必要な LINQ to SQL は、遅延実行をサポートしているため、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、Select 操作の後にデータ コンテキストを破棄しようとしています</xref:System.Web.UI.WebControls.ObjectDataSource>。       イベントを処理する方法の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation. This example demonstrates this pattern. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> event to check the cache for an object first, and only create an instance of it, if one is not already cached. Then, handle the ObjectDisposing event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call the <xref:System.IDisposable.Dispose%2A> method on the object.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_1.aspx)]  \n  \n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_2.vb)]  \n  \n The following example shows how to handle the ObjectDisposing event when using an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a LINQ to SQL class.  \n  \n```vb#  \nPublic Sub ExampleObjectDisposing(ByVal sender As Object, _   \n        ByVal e As ObjectDataSourceDisposingEventArgs)  \n    e.Cancel = True  \nEnd Sub  \n```  \n  \n```c#  \npublic void ExampleObjectDisposing(object sender,   \n        ObjectDataSourceDisposingEventArgs e)  \n{  \n    e.Cancel = true;  \n}  \n```"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  id: OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または元の値に渡されるパラメーターの名前に適用する書式指定文字列を設定、 <xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;> </xref>または<xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;></xref>メソッドです。"
  remarks: "値、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>で識別されるものなどの主キーのみをプロパティが適用される、`DataKeyNames`プロパティ、または削除、データ バインド コントロールの更新シナリオと場所、<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions>値、および元の値のセットが対応するデータのメソッドに渡されます</xref:System.Web.UI.ConflictOptions></xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A></xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>。       変更する可能性があります、2 つの一般的なシナリオは、次のとおり、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>プロパティ:-更新プログラムに新旧の値を区別するプロパティを変更する可能性があります</xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>。 ときに、<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>プロパティに設定されている、 <xref:System.Web.UI.ConflictOptions>、パラメーターの値と元の新しい値の両方に追加する、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションです</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A></xref:System.Web.UI.ConflictOptions></xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>。 書式指定文字列をなしの各データ フィールドの同じ名前の&2; つのパラメーターが作成されます。 元の値パラメーターの名前を変更すると、競合を検出し、キーの値を比較する元のデータ ソースへのデータを比較できます。      いくつかのビジュアル デザイナーでは、元の値とキーの特定の名前付けスキームを実装します。       OldValuesParameterFormatString プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>。"
  syntax:
    content: public string OldValuesParameterFormatString { get; set; }
    return:
      type: System.String
      description: "いずれかの名前に適用される書式指定文字列を表す文字列<code> oldValues </code>にキー パラメーターが渡されるか、 <> </> *> または<> *> メソッドです。 既定値は`&quot;{0}&quot;`フィールド名は、パラメーター名を意味します。"
  overload: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: ObjectDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "追加、 <xref href=&quot;System.Web.UI.Page.LoadComplete&quot;> </xref>イベント ハンドラーを含むページを<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>コントロール。"
  remarks: "イベントを発生させるには、イベント ハンドラーがデリゲートからを呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。       OnInit メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 これは、派生クラスでイベントを処理するための手法をお勧めします。"
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  id: ParsingCulture
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得、またはカルチャ情報が<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>によって示される実際のプロパティの型、型のオブジェクトを構築するために文字列値を変換するときに使用するを示す値を設定"
  syntax:
    content: public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }
    return:
      type: System.Web.UI.WebControls.ParsingCulture
      description: "カルチャ情報。 既定値は<xref href=&quot;System.Web.UI.WebControls.ParsingCulture&quot;></xref>です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: ObjectDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "状態を保存、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>コントロール。"
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "サーバー コントロールの現在のビューステート以外を返します返しますそれ以外の場合、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>コントロールに関連付けられているビュー ステートがない場合は、します。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Select()
  nameWithType: ObjectDataSource.Select()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって識別されるメソッドを呼び出すことによって、基になるデータ ストレージからデータを取得、 <> </> *> でパラメーターを持つプロパティ、 <> </> *> コレクション。"
  remarks: "指定されたメソッドがメソッド シグネチャを持つ可能性がありますが、返す必要がありますか、または次の表に示す種類のいずれかから派生する、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールを正常に呼び出すことです</xref:System.Web.UI.WebControls.ObjectDataSource>。      |型を返す |アクション |  |-----------------|------------|  |<xref:System.Collections.IEnumerable>|選択メソッドによって、<xref:System.Collections.IEnumerable>が返されます |。  |<xref:System.Data.DataTable>|<xref:System.Data.DataView>は、<xref:System.Data.DataTable>を使用して作成され、Select メソッドによって返される |。  |<xref:System.Data.DataView>|選択メソッドによって、<xref:System.Data.DataView>が返されます |。  |<xref:System.Data.DataSet>|最初の数値<xref:System.Data.DataTable>、<xref:System.Data.DataSet>が抽出され、<xref:System.Data.DataView>が作成され、Select メソッドによって返される |。  |<xref:System.Object>|オブジェクトが&1; つの要素の<xref:System.Collections.IEnumerable>コレクション内にラップされ、Select メソッドによって返される |。      によって識別されるメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティは、インスタンス メソッドを使用できますか、 `static` (`Shared` Visual Basic で) メソッド</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A></xref:System.Collections.IEnumerable></xref:System.Object></xref:System.Data.DataView></xref:System.Data.DataSet></xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Data.DataView></xref:System.Data.DataView></xref:System.Data.DataTable></xref:System.Data.DataView></xref:System.Data.DataTable></xref:System.Collections.IEnumerable></xref:System.Collections.IEnumerable>。 インスタンス メソッドである場合、ビジネス オブジェクトは作成され破棄たびに、メソッドで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティが呼び出されると、同じインスタンスがで指定されているメソッドの呼び出しに使用する点を除いて、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティおよびメソッドで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 Select メソッドが返されます、<xref:System.Collections.IEnumerable>インターフェイス</xref:System.Collections.IEnumerable>。 ただし、キャッシュおよびフィルター処理シナリオには、戻り値があります、<xref:System.Data.DataSet>オブジェクト</xref:System.Data.DataSet>。 一方<xref:System.Data.DataSet><xref:System.Collections.IEnumerable>インターフェイス、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが自動的に既定の<xref:System.Data.DataView><xref:System.Collections.IEnumerable>.</xref:System.Collections.IEnumerable>を実装するコントロール</xref:System.Data.DataView>を抽出</xref:System.Web.UI.WebControls.ObjectDataSource>する</xref:System.Collections.IEnumerable>クラスを実装しません</xref:System.Data.DataSet>       選択操作を実行する前に、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting></xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A>。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント パラメーターの値を確認して、Select 操作の前に処理を実行します</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>。 データの取得操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトによって識別されるオブジェクトのインスタンスを作成するリフレクションを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A></xref:System.Web.UI.WebControls.ObjectDataSourceView>。 によって識別されるメソッドを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ、関連付けられているいずれかを使用して<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 Select 操作の完了後、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.Selected></xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>イベントを戻り値、出力パラメーターと、例外を調べると、後続の処理を実行する</xref:System.Web.UI.WebControls.ObjectDataSource.Selected>。       場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティから返される、 <xref:System.Data.DataSet>、 <xref:System.Data.DataTable>、または<xref:System.Data.DataView>オブジェクトとキャッシュ機能が有効になっている、<xref:System.Web.UI.WebControls.ObjectDataSource>からデータを取得し、Select 操作中にキャッシュにデータを保存します</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Data.DataView></xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 キャッシュが作成、破棄、または更新の組み合わせで指定されているキャッシュの動作に基づいて、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A></xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>。       場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティから返される、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト、および<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティが指定されて、指定されたいずれかと評価される<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>プロパティとその結果のフィルター適用のデータの一覧に、Select 操作中に</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A></xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。       Select メソッドのデリゲートを<xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>のメソッド、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>。       パラメーターの詳細については、オブジェクトの有効期間のマージおよびメソッドの解決について<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>      ## データ バインド コントロールと、<xref:System.Web.UI.WebControls.ObjectDataSource>など、データ バインド コントロールにコントロールが関連付けられている、<xref:System.Web.UI.WebControls.GridView>コントロールにする必要はありませんページ コードから Select メソッドを呼び出します</xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.ObjectDataSource>。 Select メソッドは、代わりに、データ バインド コントロールによって直接呼び出されます。"
  example:
  - For a code example, see <xref:System.Web.UI.WebControls.ObjectDataSource>.
  syntax:
    content: public System.Collections.IEnumerable Select ();
    parameters: []
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>データ行のリスト</xref:System.Collections.IEnumerable>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  id: SelectCountMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定メソッドまたは関数の名前、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>行の数を取得するコントロールを呼び出します。"
  remarks: "SelectCountMethod プロパティでは、データ ソース ページングをサポートするために、行の合計数を取得するために使用するビジネス オブジェクトのメソッドを識別します。 場合にのみ、SelectCountMethod プロパティが評価される、<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>プロパティに設定されている`true`</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。       SelectCountMethod プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A>。 方法については<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールを参照してください<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A></xref:System.Web.UI.WebControls.ObjectDataSource>によってページングはサポートします。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The SelectCountMethod property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the SelectCountMethod property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_3.vb)]"
  syntax:
    content: public string SelectCountMethod { get; set; }
    return:
      type: System.String
      description: "メソッドの名前を表すまたは関数の文字列、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>を使用して行の数を取得します。 メソッドは、整数を返す必要があります (<xref:System.Int32>).</xref:System.Int32> 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: ObjectDataSource.Selected
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "発生したときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select*>操作が完了します</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>。"
  remarks: "戻り値または出力パラメーターの値を確認するか、後に例外がスローされたかどうかを決定する、選択したイベントを処理する<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作が完了します</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 戻り値、出力パラメーター、および例外処理のプロパティから使用できますが、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_1.aspx)]  \n  \n The second example shows handlers for the Selected and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The Selected event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_3.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: ObjectDataSource.Selecting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select*>操作</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>。"
  remarks: "パラメーターの値を検証する、アプリケーションに固有の追加の初期化を実行するを選択するとイベントを処理またはパラメーターを変更する前に値、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールはデータの取得操作を実行します</xref:System.Web.UI.WebControls.ObjectDataSource>。 パラメーターとして使用できる、<xref:System.Collections.IDictionary>によってアクセスされるコレクション、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>オブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs></xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A></xref:System.Collections.IDictionary>。       このイベントは&1; 回の呼び出しに対して&2; 回発行されることができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>プロパティが設定されています</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs>オブジェクトはデータを取得または数を取得する選択が呼び出されたかどうかを決定するために使用します</xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs></xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  id: SelectMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定メソッドまたは関数の名前、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>データを取得するコントロールを呼び出します。"
  remarks: "指定したメソッドは、任意のメソッド シグネチャを持つことができますが、次の表に示すように型のいずれかを返す必要が、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールを正常に呼び出すことです</xref:System.Web.UI.WebControls.ObjectDataSource>。      |型を返す |アクション |  |-----------------|------------|  |<xref:System.Collections.IEnumerable>|<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドによって返される、 <xref:System.Collections.IEnumerable>|。  |<xref:System.Data.DataTable>|<xref:System.Data.DataView>が、<xref:System.Data.DataTable>を使用して作成し、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドによって返される |。  |<xref:System.Data.DataView>|<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドによって返される、 <xref:System.Data.DataView>|。  |<xref:System.Data.DataSet>|<xref:System.Data.DataTable>、<xref:System.Data.DataSet>のうちの最初の抽出、および、<xref:System.Data.DataView>が作成され、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドによって返される |。  |<xref:System.Object>|オブジェクトが&1; つの要素の<xref:System.Collections.IEnumerable>コレクション内にラップされ、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドによって返される |。      SelectMethod プロパティにデリゲート、<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Collections.IEnumerable></xref:System.Object></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Data.DataView></xref:System.Data.DataSet></xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Data.DataView></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Data.DataView></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Data.DataTable></xref:System.Data.DataView></xref:System.Data.DataTable></xref:System.Collections.IEnumerable></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Collections.IEnumerable>。       使用すると、<xref:System.Web.UI.WebControls.ObjectDataSource>クラスを削除するか、データを更新するのパラメーター名が構成されていることを確認してください、<xref:System.Web.UI.WebControls.ObjectDataSource>内の制御、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクションまたは<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクション select メソッドによって返される列名に一致します</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSource>。      ## SelectMethod プロパティによって識別されるメソッドはインスタンス メソッドになるオブジェクトの有効期間または`static`(`Shared` Visual Basic で) メソッドです。 インスタンス メソッドである場合は、ビジネス オブジェクトが作成され、SelectMethod プロパティで指定されているメソッドが呼び出されるたびに破棄されます。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>SelectMethod プロパティで指定されているメソッドが呼び出される前に、ビジネス オブジェクトを使用するイベントです</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>。 処理することも、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>SelectMethod プロパティで指定されているメソッドが呼び出された後に発生するイベントです</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable>、インターフェイス、<xref:System.IDisposable.Dispose%2A>オブジェクトが破棄される前に、メソッドが呼び出されます</xref:System.IDisposable.Dispose%2A></xref:System.IDisposable>。 メソッドの場合`static`(`Shared` Visual Basic で)、ビジネス オブジェクトが作成されないこと、および処理することはできません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>。      ## パラメーターのマージ パラメーターに追加されます、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>それらのソースからコレクション: - 宣言してから、`SelectParameters`要素</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>。      プログラムを使用せず、`Selecting`メソッドです。       最初に、パラメーターが表示されている、`SelectParameters`要素が追加されます。 次に、パラメーターがプログラムで追加または削除で、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベントが発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを実行します</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決は、次のセクションで説明しています。      > [!IMPORTANT] > クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値を SelectMethod プロパティ      ## メソッドの解決時に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドは、宣言的に作成されたパラメーターのデータ バインド コントロールからのデータ フィールド、`SelectParameters`要素、およびパラメーターで追加された、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント ハンドラーがすべてマージします</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 (詳細については、前のセクションを参照してください)。<xref:System.Web.UI.WebControls.ObjectDataSource>に呼び出すメソッドを検索しようを制御します</xref:System.Web.UI.WebControls.ObjectDataSource>。 まず、SelectMethod プロパティで指定されている名前を持つ&1; つまたは複数のメソッドを検索します。 一致するものが見つからない場合、<xref:System.InvalidOperationException>例外がスローされます</xref:System.InvalidOperationException>。 一致が見つかった場合、一致するパラメーター名が検索されます。 たとえば、によって指定される型、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティという&2; つのメソッドは、 `SelectARecord`</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 。 1 つ`SelectARecord`1 つのパラメーターを持つ`ID`、および、その他の`SelectARecord`2 つのパラメーターを持ち`Name`と`Number`です。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>コレクションという名前の&1; つだけのパラメーターには、 `ID`、`SelectARecord`メソッドだけを`ID`パラメーターと呼びます</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は重要ではありません。       場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティを設定すると、メソッドは別の方法で解決されています</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>。 <xref:System.Web.UI.WebControls.ObjectDataSource>で型の&1; つのパラメーターを取るを SelectMethod プロパティで指定されている名前を持つメソッドが指定された検索、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。 この場合、パラメーターの名前は関係ありません。"
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property and a method that is called to retrieve data with its SelectMethod property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the method that is specified by the SelectMethod property, and displays the data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_540_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_540_1.aspx)]"
  syntax:
    content: public string SelectMethod { get; set; }
    return:
      type: System.String
      description: "メソッドの名前を表すまたは関数の文字列、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>を使用してデータを取得します。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって指定されたメソッドで使用されるパラメーターのコレクションを取得、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>。"
  remarks: "Selectparameters のどのプロパティを取得、<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>。       パラメーター コレクションに追加する、SelectParameters 宣言を使用して、`SelectParameters`要素のハンドラーは、プログラムで、または、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>。 実行時にパラメーターが表示されている、`SelectParameters`要素が最初のコレクションに追加されます。 コレクション内のパラメーターの追加またはのハンドラーで削除し、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>。 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベントが発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを実行します</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>。       前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドの実行、名前と selectparameters のどのコレクションに含まれているパラメーターの型がで指定されているメソッドのシグネチャに一致する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 たとえば、という名前の選択メソッド`GetEmployeesByStateAndAge`受け取り、`string`および整数 selectparameters のどのコレクション、パラメーターとして&2; つのパラメーターを含める必要があります。 最初のパラメーターを文字列に解決する必要があり、2 番目のパラメーターが整数値に解決する必要があります。 内のマークアップの両方のパラメーターを指定することができます、`SelectParameters`要素。 または、可能性があるに追加できる、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>マークアップでは、イベント ハンドラー、または&1; つのパラメーターを追加することができ、もう&1; つをプログラミングで追加することができます</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>。       詳細については、次を参照してください[、ObjectDataSource コントロールでのパラメーターの使用](~/add/includes/ajax-current-ext-md.md)と<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>プロパティ。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod> 。      > [!IMPORTANT] > のコードで、<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>イベント ハンドラーまたはで指定されているメソッドで、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ、クライアントから受信されるパラメーター値を検証することを確認してください</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>。"
  example:
  - "The following code example demonstrates how to retrieve a single data record using an <xref:System.Web.UI.WebControls.ObjectDataSource> control and display it in a <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.ObjectDataSource> control retrieves a specific employee record by calling the `GetEmployee` method of the `EmployeeLogic` class. The `GetEmployee` method requires an employee ID parameter. The <xref:System.Web.UI.WebControls.ObjectDataSource> control uses a `QueryStringParameter` element in markup to create a <xref:System.Web.UI.WebControls.QueryStringParameter> object that will retrieve the value of a specified query-string parameter from the URL and pass it to the `GetEmployee` method.  \n  \n Other parameter classes can be used to retrieve values from other sources, such as control properties, form fields, cookies, ASP.NET profile data, or session state. You can also use a parameter object that is defined in markup in order to pass a hard-coded value to the select method. For more information about parameter classes that are available, see [Using Parameters with Data Source Controls for Filtering](~/add/includes/ajax-current-ext-md.md).  \n  \n To run this example, you will need the following:  \n  \n-   A Web site that has a connection string named `NorthwindConnection` that connects to the Northwind Traders database. For more information, see the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview.  \n  \n-   The `EmployeeLogic` class that is shown as one of the code examples for the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. The class file must be located in the App_Code folder.  \n  \n-   The sample code can be run as an .aspx page. If you request the page without a query-string parameter, an error message is displayed. If you request the page using a query string such as `?empid=1` after the name of the .aspx file, you will see the details for the requested employee.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1025_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1025_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "によって指定されたメソッドで使用されるパラメーターのコレクション、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  id: SortParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはビジネス オブジェクトの名前を設定、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>パラメーターのデータ ソースの並べ替えのサポートは、並べ替え式を指定するために使用します</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>。"
  remarks: "SortParameterName プロパティは、データ ソースの並べ替えをサポートするために使用されます。 ときに、<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>プロパティが設定されて、<xref:System.Web.UI.DataSourceSelectArguments>オブジェクトおよびに渡される、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッド、SortParameterName 値がパラメーター名を指定する、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>ビジネス オブジェクトのメソッドがこれに基づいてデータが並べ替えられます</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Web.UI.DataSourceSelectArguments></xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>。       場合、<xref:System.Web.UI.WebControls.ObjectDataSource>をコンマ区切りのフィールド値の形式が続くこのパラメーターが渡される値のデータ バインド コントロールに関連付けられている`&quot;ASC&quot;`または`&quot;DESC&quot;`</xref:System.Web.UI.WebControls.ObjectDataSource>。 たとえばに昇順の並べ替え順序の値`Name`なります`&quot;Name ASC&quot;`です。       SortParameterName プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to implement a type that supports sorting. The second code example demonstrates how to implement a sort expression.  \n  \n The following code example demonstrates how to implement a type that supports sorting. The `SelectMethod` of the `SortingData` class takes a parameter, `sortExpression`. The string that is passed to `SelectMethod` is used for the <xref:System.Data.DataView.Sort%2A> property of the <xref:System.Data.DataView> object that is returned by `SelectMethod`.  \n  \n [!code-cs[ObjectDataSourceSorting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_1.cs)]\n [!code-vb[ObjectDataSourceSorting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_1.vb)]  \n  \n The following code example demonstrates how to implement a sort expression. The code in the Web page creates an instance of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property is set to `SortingData` and the SortParameterName property is set to `sortExpression`. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true`. When the user clicks the **Sort** button, the field name, `Name` or `Number`, is passed to `SelectMethod` in the sort parameter.  \n  \n [!code-cs[ObjectDataSourceSorting#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_2.aspx)]\n [!code-vb[ObjectDataSourceSorting#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_2.aspx)]"
  syntax:
    content: public string SortParameterName { get; set; }
    return:
      type: System.String
      description: "データの並べ替えに使用されるパラメーターの指定に使用されるメソッドのパラメーターの名前です。 既定では、空の文字列です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  id: SqlCacheDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはデータベースと Microsoft SQL Server のキャッシュ依存のために使用するテーブルを示す、セミコロンで区切られた文字列を設定します。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、基になっているオプションの有効期限ポリシーをサポートしている、 <xref:System.Web.Caching.SqlCacheDependency>(データベース サーバーのサービスを構成する必要があります)、データ キャッシュのオブジェクト</xref:System.Web.Caching.SqlCacheDependency></xref:System.Web.UI.WebControls.ObjectDataSource>。       SQL Server は、キャッシュの無効化の&2; つのメカニズムをサポートしています。 ポーリングと通知します。 各メカニズムがのさまざまな構文、<xref:System.Web.Caching.SqlCacheDependency>オブジェクト</xref:System.Web.Caching.SqlCacheDependency>。       <xref:System.Web.UI.WebControls.ObjectDataSource>ポーリングしかサポートしていません</xref:System.Web.UI.WebControls.ObjectDataSource>。 <xref:System.Web.Caching.SqlCacheDependency>文字列は、作成に使用される、<xref:System.Data.SqlClient.SqlDependency>に渡されるオブジェクト、<xref:System.Data.Common.DbCommand>コンス トラクターの前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドを実行します</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Data.Common.DbCommand></xref:System.Data.SqlClient.SqlDependency></xref:System.Web.Caching.SqlCacheDependency>。 データベースと同じ形式で使用されるに従ってテーブルを識別する SqlCacheDependency 文字列、`@ Page`ディレクティブについては、ここで、文字列の最初の部分は、SQL Server データベースへの接続文字列とそれに続くコロン区切り記号、および最後に、データベース テーブルの名前 (たとえば、 `&quot;connectionstring1:table1&quot;`)。 接続文字列とテーブル名のペアをセミコロンで区切られた SqlCacheDependency プロパティは、複数のテーブルに依存している場合 (たとえば、 `&quot;connectionstring1:table1&quot;;connectionstring2:table2&quot;`)。       通知をサポートするための実装でキャッシュ ロジックを記述する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティの構造を処理し、 <xref:System.Web.Caching.SqlCacheDependency>、コード内のオブジェクト</xref:System.Web.Caching.SqlCacheDependency></xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> object. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.ObjectDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is expired and a new set of data is retrieved on the next request for the page.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_2.cs)]"
  syntax:
    content: public virtual string SqlCacheDependency { get; set; }
    return:
      type: System.String
      description: "SQL Server のキャッシュの依存関係を使用するテーブルのどのデータベースを示す文字列。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  id: StartRowIndexParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはデータ ソースのページング サポートを取得する最初のレコードの識別子の値を示すために使用されるデータの取得メソッドのパラメーターの名前を設定します。"
  remarks: "StartRowIndexParameterName プロパティは、データ ソース ページングをサポートするために使用されます。 方法については<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールを参照してください<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A></xref:System.Web.UI.WebControls.ObjectDataSource>によってページングはサポートします。       StartRowIndexParameterName プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the StartRowIndexParameterName property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_3.vb)]"
  syntax:
    content: public string StartRowIndexParameterName { get; set; }
    return:
      type: System.String
      description: "取得する最初のレコードを示すために使用するビジネス オブジェクト メソッドのパラメーターの名前。 パラメーターには、整数値を返す必要があります。 既定値は`&quot;startRowIndex&quot;`します。"
  overload: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: ObjectDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "ビュー ステートの変更を追跡、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>制御で保存できるように、 <xref href=&quot;System.Web.UI.StateBag&quot;> </xref>オブジェクト。"
  remarks: "TrackViewState メソッドをオーバーライドすることをオブジェクトのビュー状態の一部としてコントロールに対する変更の追跡と保存を開始する開始点をマークします。"
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName
  id: TypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定クラスの名前、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>オブジェクトを表します。"
  remarks: "オブジェクトのインスタンスを作成、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールのバインド先、コントロールでは、リフレクションを使用して、実行時に、型名によって識別される型を読み込めません</xref:System.Web.UI.WebControls.ObjectDataSource>。 したがって、TypeName プロパティの値では、Bin または App_Code ディレクトリに配置されているコードの部分修飾型またはアセンブリをグローバル アセンブリ キャッシュに登録されているコードの完全修飾型名を指定できます。 グローバル アセンブリ キャッシュを使用する場合への適切な参照を追加する必要があります、`assemblies`は Machine.config または Web.config ファイルのセクションです。       型を処理する場合を除き、既定のコンス トラクターを含んでいなければなりません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、そのインスタンスを作成するイベントです</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>。 呼び出しごとに、型のインスタンスが作成された、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>メソッド、型のメソッドは、メンバー メソッドの場合</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>。 メソッドは、インスタンスは作成されません`static`(`Shared` Visual Basic で)。 型を実装する場合、 <xref:System.IDisposable>、インターフェイス、<xref:System.IDisposable.Dispose%2A>オブジェクトが破棄される前に、メソッドが呼び出されます</xref:System.IDisposable.Dispose%2A></xref:System.IDisposable>。"
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data by using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its TypeName property and a method that is called to retrieve data with its <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, and displays the data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_1.aspx)]  \n  \n The following example shows the class that the TypeName property value refers to.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_2.vb)]"
  syntax:
    content: public string TypeName { get; set; }
    return:
      type: System.String
      description: "オブジェクトの種類を識別する部分的または完全修飾クラス名を<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>を表します。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.TypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Update
  id: Update
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Update()
  nameWithType: ObjectDataSource.Update()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって識別されるメソッドを呼び出すと、更新操作を実行、 <> </> *> プロパティおよびパラメーター内にある、 <> </> *> コレクション。"
  remarks: "ビジネス オブジェクトは、バッチ内ではなく、一度に&1; レコードずつデータを更新すると見なされます。       更新操作を実行すると、前に、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.Updating></xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A>。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント パラメーターの値を確認して、更新操作の前に処理を実行します</xref:System.Web.UI.WebControls.ObjectDataSource.Updating>。 更新操作を実行する、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトによって識別されるオブジェクトのインスタンスを作成するリフレクションを使用して、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A></xref:System.Web.UI.WebControls.ObjectDataSourceView>。 によって識別されるメソッドを呼び出して、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティ、関連付けられているいずれかを使用して<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。 更新操作の完了後、<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.Updated></xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>イベントを戻り値、出力パラメーターと、例外を調べると、後続の処理を実行する</xref:System.Web.UI.WebControls.ObjectDataSource.Updated>。       Update メソッドのデリゲートを<xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>のメソッド、<xref:System.Web.UI.WebControls.ObjectDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>。       パラメーターの詳細については、オブジェクトの有効期間のマージおよびメソッドの解決について<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      > [!IMPORTANT] > クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値に、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。      ## データ バインド コントロールと、<xref:System.Web.UI.WebControls.ObjectDataSource>など、データ バインド コントロールにコントロールが関連付けられている、<xref:System.Web.UI.WebControls.GridView>コントロール必要はありません ページのコードから、Update メソッドを呼び出す</xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.ObjectDataSource>。 Update メソッドは、代わりに、データ バインド コントロールによって直接呼び出されます。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection contains a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the Update operation is enabled only after an employee is selected.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_2.vb)]"
  syntax:
    content: public int Update ();
    parameters: []
    return:
      type: System.Int32
      description: "基になるデータ ストレージで更新された行の数を表す値。"
  overload: System.Web.UI.WebControls.ObjectDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: ObjectDataSource.Updated
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "発生したときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Update*>操作が完了します</xref:System.Web.UI.WebControls.ObjectDataSource.Update*>。"
  remarks: "戻り値または出力パラメーターの値を確認するか、後に例外がスローされたかどうかを決定する、更新されたイベントを処理する<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>操作が完了します</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>。 戻り値、出力パラメーター、および例外処理のプロパティから使用できますが、<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  id: UpdateMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定メソッドまたは関数の名前、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>コントロールがデータを更新するためです。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール UpdateMethod プロパティによって識別されるメソッドは、バッチ内ではなく、一度に&1; つの更新プログラムを実行を想定しています</xref:System.Web.UI.WebControls.ObjectDataSource>。       UpdateMethod プロパティを委任する場合、<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>のプロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>。       パラメーター名が構成されていることを確認してください、<xref:System.Web.UI.WebControls.ObjectDataSource>内の制御、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクション select メソッドによって返される列名に一致します</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。      ## UpdateMethod プロパティによって識別されるメソッドはインスタンス メソッドになるオブジェクトの有効期間または`static`(`Shared` Visual Basic で) メソッドです。 インスタンス メソッドである場合は、ビジネス オブジェクトが作成され、UpdateMethod プロパティで指定されているメソッドが呼び出されるたびに破棄されます。 処理することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>と<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>UpdateMethod プロパティで指定されているメソッドが呼び出される前に、ビジネス オブジェクトを使用するイベントです</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>。 処理することも、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>UpdateMethod プロパティで指定されているメソッドが呼び出された後に発生するイベントです</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable>、インターフェイス、<xref:System.IDisposable.Dispose%2A>オブジェクトが破棄される前に、メソッドが呼び出されます</xref:System.IDisposable.Dispose%2A></xref:System.IDisposable>。 メソッドの場合`static`(`Shared` Visual Basic で)、ビジネス オブジェクトが作成されないこと、および処理することはできません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating></xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>。      ## マージ パラメーターのパラメーターの追加、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションの&3; つのソースから: - 実行時に、データ バインド コントロールから</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>。      `UpdateParameters`要素を宣言します。      <xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント ハンドラーでは、プログラムによって</xref:System.Web.UI.WebControls.ObjectDataSource.Updating>。       データ バインド コントロールから生成されるすべてのパラメーターを追加する最初に、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションです</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>。 たとえば場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールにバインドする、<xref:System.Web.UI.WebControls.GridView>列を持つコントロールを`Name`と`Number`、パラメーターの`Name`と`Number`コレクションに追加されます</xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.ObjectDataSource>。 パラメーターの正確な名前が異なります、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>。 これらのパラメーターのデータ型は`string`します。 次に記載されているパラメーター、`UpdateParameters`要素が追加されます。 場合のパラメーター、`UpdateParameters`になっているパラメーターと同じ名前で要素が見つかる、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>で指定されているパラメーターと一致する、既存のパラメーターのコレクションが変更された、`UpdateParameters`要素</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>。 通常、パラメーターのデータの種類の変更に使用されます。 最後に、プログラムで追加および削除できます内のパラメーター、<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベントが発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>メソッドを実行します</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A></xref:System.Web.UI.WebControls.ObjectDataSource.Updating>。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決は、次のセクションで説明しています。      > [!IMPORTANT] > クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値を UpdateMethod プロパティ      ## メソッドの解決時に、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>メソッドは、宣言的に作成されたパラメーターのデータ バインド コントロールからのデータ フィールド、`UpdateParameters`要素、およびパラメーターで追加された、<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>イベント ハンドラーがすべてマージします</xref:System.Web.UI.WebControls.ObjectDataSource.Updating></xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>。 (詳細については、前のセクションを参照してください)。<xref:System.Web.UI.WebControls.ObjectDataSource>に呼び出すメソッドを検索しようを制御します</xref:System.Web.UI.WebControls.ObjectDataSource>。 まず、UpdateMethod プロパティで指定されている名前を持つ&1; つまたは複数のメソッドを検索します。 一致するものが見つからない場合、<xref:System.InvalidOperationException>例外がスローされます</xref:System.InvalidOperationException>。 一致が見つかった場合、一致するパラメーター名が検索されます。 たとえば、によって指定される型、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティという&2; つのメソッドは、 `UpdateARecord`</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 。 1 つ`UpdateARecord`1 つのパラメーターを持つ`ID`、および、その他の`UpdateARecord`2 つのパラメーターを持ち`Name`と`Number`です。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションという名前の&1; つだけのパラメーターには、 `ID`、`UpdateARecord`メソッドだけを`ID`パラメーターと呼びます</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は重要ではありません。       場合、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティを設定すると、メソッドは別の方法で解決されています</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>。 <xref:System.Web.UI.WebControls.ObjectDataSource>で型の&1; つのパラメーターを取るを UpdateMethod プロパティで指定されている名前を持つメソッドが指定された検索、<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A></xref:System.Web.UI.WebControls.ObjectDataSource>。 この場合、パラメーターの名前は関係ありません。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_1.aspx)]  \n  \n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_3.cs)]"
  syntax:
    content: public string UpdateMethod { get; set; }
    return:
      type: System.String
      description: "メソッドの名前を表すまたは関数の文字列、 <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>を使用してデータを更新します。 既定では、空の文字列です。"
  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "指定されているメソッドによって使用されているパラメーターを含むパラメーターのコレクションを取得、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>。"
  remarks: "名前と型のパラメーターの名前と UpdateParameters コレクションに含まれているパラメーターの型が一致する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>メソッド シグネチャ</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。 パラメーター名が影響を受けました、<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>プロパティであり、大文字小文字を区別します</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>。 コレクション内のパラメーターは、データ バインド コントロール、宣言によって、指定されたパラメーターおよびプログラムによって追加されたパラメーターのデータによって異なります。 詳細については、セクションを参照して、「パラメーターをマージ」<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>と[、ObjectDataSource コントロールでのパラメーターの使用](~/add/includes/ajax-current-ext-md.md)</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>。       UpdateParameters プロパティの取得、<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール</xref:System.Web.UI.WebControls.ObjectDataSource></xref:System.Web.UI.WebControls.ObjectDataSourceView></xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>。       パラメーターの詳細については、オブジェクトの有効期間のマージおよびメソッドの解決について<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      > [!IMPORTANT] > クライアントから受信したパラメーター値を検証する必要があります。 ランタイムは、パラメーターの値に、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the UpdateParameters collection contains a <xref:System.Web.UI.WebControls.ControlParameter> that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> operation is enabled only after an employee is selected.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_2.vb)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>で指定されているメソッドによって使用されるパラメーターを格納している、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: ObjectDataSource.Updating
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "発生する前に、<xref:System.Web.UI.WebControls.ObjectDataSource.Update*>操作</xref:System.Web.UI.WebControls.ObjectDataSource.Update*>。"
  remarks: "パラメーターの値を検証する、アプリケーションに固有の追加の初期化を実行する、更新イベントを処理またはパラメーターを変更する前に値、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、更新操作を実行します</xref:System.Web.UI.WebControls.ObjectDataSource>。 パラメーターとして使用できる、<xref:System.Collections.IDictionary>によってアクセスされるコレクション、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>によって公開される、プロパティ、<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>オブジェクト</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs></xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A></xref:System.Collections.IDictionary>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_1.aspx)]  \n  \n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and Updating events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The Updating event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_3.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataSourceControl
  isExternal: false
  name: System.Web.UI.DataSourceControl
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource()
  nameWithType: ObjectDataSource.ObjectDataSource()
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource(String,String)
  nameWithType: ObjectDataSource.ObjectDataSource(String,String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
- uid: System.Web.UI.ConflictOptions
  parent: System.Web.UI
  isExternal: false
  name: ConflictOptions
  nameWithType: ConflictOptions
  fullName: System.Web.UI.ConflictOptions
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Delete()
  nameWithType: ObjectDataSource.Delete()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Deleted
  nameWithType: ObjectDataSource.Deleted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted
- uid: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceStatusEventHandler
  nameWithType: ObjectDataSourceStatusEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Deleting
  nameWithType: ObjectDataSource.Deleting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting
- uid: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceMethodEventHandler
  nameWithType: ObjectDataSourceMethodEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Filtering
  nameWithType: ObjectDataSource.Filtering
  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering
- uid: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceFilteringEventHandler
  nameWithType: ObjectDataSourceFilteringEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: ObjectDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: ObjectDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Insert()
  nameWithType: ObjectDataSource.Insert()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Inserted
  nameWithType: ObjectDataSource.Inserted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Inserting
  nameWithType: ObjectDataSource.Inserting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: ObjectDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectCreated
  nameWithType: ObjectDataSource.ObjectCreated
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
- uid: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceObjectEventHandler
  nameWithType: ObjectDataSourceObjectEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectCreating
  nameWithType: ObjectDataSource.ObjectCreating
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDisposing
  nameWithType: ObjectDataSource.ObjectDisposing
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
- uid: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceDisposingEventHandler
  nameWithType: ObjectDataSourceDisposingEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: ObjectDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
- uid: System.Web.UI.WebControls.ParsingCulture
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParsingCulture
  nameWithType: ParsingCulture
  fullName: System.Web.UI.WebControls.ParsingCulture
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SaveViewState()
  nameWithType: ObjectDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()
- uid: System.Web.UI.WebControls.ObjectDataSource.Select
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Select()
  nameWithType: ObjectDataSource.Select()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.Selected
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Selected
  nameWithType: ObjectDataSource.Selected
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected
- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Selecting
  nameWithType: ObjectDataSource.Selecting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting
- uid: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceSelectingEventHandler
  nameWithType: ObjectDataSourceSelectingEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TrackViewState()
  nameWithType: ObjectDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Update
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Update()
  nameWithType: ObjectDataSource.Update()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()
- uid: System.Web.UI.WebControls.ObjectDataSource.Updated
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Updated
  nameWithType: ObjectDataSource.Updated
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.Updating
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Updating
  nameWithType: ObjectDataSource.Updating
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource
  nameWithType: ObjectDataSource.ObjectDataSource
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Delete
  nameWithType: ObjectDataSource.Delete
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetView
  nameWithType: ObjectDataSource.GetView
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: ObjectDataSource.GetViewNames
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Insert
  nameWithType: ObjectDataSource.Insert
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: LoadViewState
  nameWithType: ObjectDataSource.LoadViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OnInit
  nameWithType: ObjectDataSource.OnInit
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SaveViewState
  nameWithType: ObjectDataSource.SaveViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.Select*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Select
  nameWithType: ObjectDataSource.Select
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TrackViewState
  nameWithType: ObjectDataSource.TrackViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Update*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Update
  nameWithType: ObjectDataSource.Update
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
