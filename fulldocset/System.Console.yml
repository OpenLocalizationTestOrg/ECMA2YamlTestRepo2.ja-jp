### YamlMime:ManagedReference
items:
- uid: System.Console
  id: Console
  children:
  - System.Console.BackgroundColor
  - System.Console.Beep
  - System.Console.Beep(System.Int32,System.Int32)
  - System.Console.BufferHeight
  - System.Console.BufferWidth
  - System.Console.CancelKeyPress
  - System.Console.CapsLock
  - System.Console.Clear
  - System.Console.CursorLeft
  - System.Console.CursorSize
  - System.Console.CursorTop
  - System.Console.CursorVisible
  - System.Console.Error
  - System.Console.ForegroundColor
  - System.Console.In
  - System.Console.InputEncoding
  - System.Console.IsErrorRedirected
  - System.Console.IsInputRedirected
  - System.Console.IsOutputRedirected
  - System.Console.KeyAvailable
  - System.Console.LargestWindowHeight
  - System.Console.LargestWindowWidth
  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  - System.Console.NumberLock
  - System.Console.OpenStandardError
  - System.Console.OpenStandardError(System.Int32)
  - System.Console.OpenStandardInput
  - System.Console.OpenStandardInput(System.Int32)
  - System.Console.OpenStandardOutput
  - System.Console.OpenStandardOutput(System.Int32)
  - System.Console.Out
  - System.Console.OutputEncoding
  - System.Console.Read
  - System.Console.ReadKey
  - System.Console.ReadKey(System.Boolean)
  - System.Console.ReadLine
  - System.Console.ResetColor
  - System.Console.SetBufferSize(System.Int32,System.Int32)
  - System.Console.SetCursorPosition(System.Int32,System.Int32)
  - System.Console.SetError(System.IO.TextWriter)
  - System.Console.SetIn(System.IO.TextReader)
  - System.Console.SetOut(System.IO.TextWriter)
  - System.Console.SetWindowPosition(System.Int32,System.Int32)
  - System.Console.SetWindowSize(System.Int32,System.Int32)
  - System.Console.Title
  - System.Console.TreatControlCAsInput
  - System.Console.WindowHeight
  - System.Console.WindowLeft
  - System.Console.WindowTop
  - System.Console.WindowWidth
  - System.Console.Write(System.Boolean)
  - System.Console.Write(System.Char)
  - System.Console.Write(System.Char[])
  - System.Console.Write(System.Decimal)
  - System.Console.Write(System.Double)
  - System.Console.Write(System.Int32)
  - System.Console.Write(System.Int64)
  - System.Console.Write(System.Object)
  - System.Console.Write(System.Single)
  - System.Console.Write(System.String)
  - System.Console.Write(System.UInt32)
  - System.Console.Write(System.UInt64)
  - System.Console.Write(System.String,System.Object)
  - System.Console.Write(System.String,System.Object[])
  - System.Console.Write(System.Char[],System.Int32,System.Int32)
  - System.Console.Write(System.String,System.Object,System.Object)
  - System.Console.Write(System.String,System.Object,System.Object,System.Object)
  - System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  - System.Console.WriteLine
  - System.Console.WriteLine(System.Boolean)
  - System.Console.WriteLine(System.Char)
  - System.Console.WriteLine(System.Char[])
  - System.Console.WriteLine(System.Decimal)
  - System.Console.WriteLine(System.Double)
  - System.Console.WriteLine(System.Int32)
  - System.Console.WriteLine(System.Int64)
  - System.Console.WriteLine(System.Object)
  - System.Console.WriteLine(System.Single)
  - System.Console.WriteLine(System.String)
  - System.Console.WriteLine(System.UInt32)
  - System.Console.WriteLine(System.UInt64)
  - System.Console.WriteLine(System.String,System.Object)
  - System.Console.WriteLine(System.String,System.Object[])
  - System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  - System.Console.WriteLine(System.String,System.Object,System.Object)
  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  langs:
  - csharp
  name: Console
  nameWithType: Console
  fullName: System.Console
  type: Class
  summary: "コンソール アプリケーションの標準入力、出力、およびエラー ストリームを表します。 このクラスは継承できません。       この型の .NET Framework ソース コードを参照するを参照してください。、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4)です。"
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal. For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands. The Console class provides basic support for applications that read characters from, and write characters to, the console.  \n  \n For information about developing with the Console class, see the following sections:  \n  \n-   [Console I/O Streams](#Streams)  \n  \n-   [Screen Buffer and Console Window](#Buffer)  \n  \n-   [Unicode Support for the Console](#Unicode)  \n  \n-   [Common Operations](#Operations)  \n  \n-   [.NET Core Notes](#Core)  \n  \n<a name=\"Streams\"></a>   \n## Console I/O Streams  \n When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream. Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream. These streams are presented to your application as the values of the <xref:System.Console.In%2A?displayProperty=fullName>, <xref:System.Console.Out%2A?displayProperty=fullName>, and <xref:System.Console.Error%2A?displayProperty=fullName> properties.  \n  \n By default, the value of the <xref:System.Console.In%2A> property is a <xref:System.IO.TextReader?displayProperty=fullName> object that represents the keyboard, and the values of the <xref:System.Console.Out%2A> and <xref:System.Console.Error%2A> properties are <xref:System.IO.TextWriter?displayProperty=fullName> objects that represent a console window. However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files. To redirect the standard input, standard output, or standard error stream, call the <xref:System.Console.SetIn%2A?displayProperty=fullName>, <xref:System.Console.SetOut%2A?displayProperty=fullName>, or <xref:System.Console.SetError%2A?displayProperty=fullName> method, respectively. I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams. This means that methods that are ordinarily asynchronous, such as <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>, execute synchronously if the object represents a console stream.  \n  \n> [!NOTE]\n>  Do not use the Console class to display output in unattended applications, such as server applications. Calls to methods such as <xref:System.Console.Write%2A?displayProperty=fullName> and <xref:System.Console.WriteLine%2A?displayProperty=fullName> have no effect in GUI applications.  \n  \n Console class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file. Program your application to catch <xref:System.IO.IOException?displayProperty=fullName> exceptions if you redirect a standard stream. You can also use the <xref:System.Console.IsOutputRedirected%2A>, <xref:System.Console.IsInputRedirected%2A>, and <xref:System.Console.IsErrorRedirected%2A> properties to determine whether a standard stream is redirected before performing an operation that throws an <xref:System.IO.IOException?displayProperty=fullName> exception.  \n  \n It is sometimes useful to explicitly call the members of the stream objects represented by the <xref:System.Console.In%2A>, <xref:System.Console.Out%2A>, and <xref:System.Console.Error%2A> properties. For example, by default, the <xref:System.Console.ReadLine%2A?displayProperty=fullName> method reads input from the standard input stream. Similarly, the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed (\"\\r\\n\"). However, the Console class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream.  \n  \n You can solve this problem by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property of the <xref:System.Console.Out%2A> or <xref:System.Console.Error%2A> property to another line termination string. For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences:  \n  \n `Console.Error.NewLine = \"\\r\\n\\r\\n\";`  \n  \n You can then explicitly call the <xref:System.IO.TextWriter.WriteLine%2A> method of the error output stream object, as in the following C# statement:  \n  \n `Console.Error.WriteLine();`  \n  \n<a name=\"Buffer\"></a>   \n## Screen Buffer and Console Window  \n Two closely related features of the console are the screen buffer and the console window. Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer. The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character. Each character has its own foreground color, and each character cell has its own background color.  \n  \n The screen buffer is viewed through a rectangular region called the console window. The console window is another attribute of the console; it is not the console itself, which is an operating system window. The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer. If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.  \n  \n A cursor indicates the screen buffer position where text is currently read or written. The cursor can be hidden or made visible, and its height can be changed. If the cursor is visible, the console window position is moved automatically so the cursor is always in view.  \n  \n The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin. Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0. The maximum value for the row and column indexes is <xref:System.Int16.MaxValue?displayProperty=fullName>.  \n  \n<a name=\"Unicode\"></a>   \n## Unicode Support for the Console  \n In general, the console reads input and writes output by using the current console code page, which the system locale defines by default. A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won't be able to display all characters or represent them accurately. The following example illustrates this problem. It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console. If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.  \n  \n [!code-cs[System.Console.Class#1](~/add/codesnippet/csharp/t-system.console_1.cs)]\n [!code-vb[System.Console.Class#1](~/add/codesnippet/visualbasic/t-system.console_1.vb)]  \n  \n In addition to supporting code pages, the Console class supports UTF-8 encoding with the <xref:System.Text.UTF8Encoding> class. Beginning with the .NET Framework 4.5, the Console class also supports UTF-16 encoding with the <xref:System.Text.UnicodeEncoding> class. To display Unicode characters to the console. you set the <xref:System.Console.OutputEncoding%2A> property to either <xref:System.Text.UTF8Encoding> or  <xref:System.Text.UnicodeEncoding>.  \n  \n Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character. To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console. The following example shows how you can programmatically change the font from a raster font to Lucida Console.  \n  \n [!code-cs[System.Console.Class.Unsafe#3](~/add/codesnippet/csharp/setfont1/setfont1.cs#3)]\n [!code-vb[System.Console.Class.Unsafe#3](~/add/codesnippet/visualbasic/t-system.console_2.vb)]  \n  \n However, TrueType fonts can display only a subset of glyphs. For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02. To see which characters a particular font supports, open the **Fonts** applet in Control Panel, choose the **Find a character** option, and choose the font whose character set you'd like to examine in the **Font** list of the **Character Map** window.  \n  \n Windows uses font linking to display glyphs that are not available in a particular font. For information about font linking to display additional character sets, see [Globalization Step-by-Step: Fonts](http://go.microsoft.com/fwlink/?LinkId=229111). Linked fonts are defined in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink subkey of the registry. Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font. Each member of the array defines a linked font and takes the form *font-file-name*,*font-name*. The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.  \n  \n [!code-cs[System.Console.Class#2](~/add/codesnippet/csharp/t-system.console_3.cs)]\n [!code-vb[System.Console.Class#2](~/add/codesnippet/visualbasic/t-system.console_3.vb)]  \n  \n Unicode support for the console has the following limitations:  \n  \n-   UTF-32 encoding is not supported. The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <xref:System.Text.UTF8Encoding> and <xref:System.Text.UnicodeEncoding> classes, respectively.  \n  \n-   Bidirectional output is not supported.  \n  \n-   Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.  \n  \n-   Display of characters in complex scripts is not supported.  \n  \n-   Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters. To work around this limitation, you can normalize the string to be displayed by calling the <xref:System.String.Normalize%2A?displayProperty=fullName> method before sending output to the console. In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <xref:System.String.Normalize%2A?displayProperty=fullName> method is called.  \n  \n     [!code-cs[System.Console.Class#5](~/add/codesnippet/csharp/t-system.console_4.cs)]\n     [!code-vb[System.Console.Class#5](~/add/codesnippet/visualbasic/t-system.console_4.vb)]  \n  \n     Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.  \n  \n-   If a font provides a glyph for a code point in the private use area, that glyph will be displayed. However, because characters in the private use area are application-specific, this may not be the expected glyph.  \n  \n The following example displays a range of Unicode characters to the console. The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (`false`) or UTF-16 encoding (`true`). It assumes that the console is using a TrueType font.  \n  \n [!code-cs[System.Console.Class#4](~/add/codesnippet/csharp/t-system.console_5.cs)]\n [!code-vb[System.Console.Class#4](~/add/codesnippet/visualbasic/t-system.console_5.vb)]  \n  \n<a name=\"Operations\"></a>   \n## Common Operations  \n The Console class contains the following methods for reading console input and writing console output:  \n  \n-   The overloads of the <xref:System.Console.ReadKey%2A> method read an individual character.  \n  \n-   The <xref:System.Console.ReadLine%2A> method reads an entire line of input.  \n  \n-   The <xref:System.Console.Write%2A> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.  \n  \n-   A parallel set of <xref:System.Console.WriteLine%2A> method overloads output the same string as the <xref:System.Console.Write%2A> overloads but also add a line termination string.  \n  \n The Console class also contains methods and properties to perform the following operations:  \n  \n-   Get or set the size of the screen buffer. The <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties let you get or set the buffer height and width, respectively, and the <xref:System.Console.SetBufferSize%2A> method lets you set the buffer size in a single method call.  \n  \n-   Get or set the size of the console window. The <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties let you get or set the window height and width, respectively, and the <xref:System.Console.SetWindowSize%2A> method lets you set the window size in a single method call.  \n  \n-   Get or set the size of the cursor. The <xref:System.Console.CursorSize%2A> property specifies the height of the cursor in a character cell.  \n  \n-   Get or set the position of the console window relative to the screen buffer. The <xref:System.Console.WindowTop%2A> and <xref:System.Console.WindowLeft%2A> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <xref:System.Console.SetWindowPosition%2A> method lets you set these values in a single method call.  \n  \n-   Get or set the position of the cursor by getting or setting the <xref:System.Console.CursorTop%2A> and <xref:System.Console.CursorLeft%2A> properties, or set the position of the cursor by calling the <xref:System.Console.SetCursorPosition%2A> method.  \n  \n-   Move or clear data in the screen buffer by calling the <xref:System.Console.MoveBufferArea%2A> or <xref:System.Console.Clear%2A> method.  \n  \n-   Get or set the foreground and background colors by using the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties, or reset the background and foreground to their default colors by calling the <xref:System.Console.ResetColor%2A> method.  \n  \n-   Play the sound of a beep through the console speaker by calling the <xref:System.Console.Beep%2A> method.  \n  \n<a name=\"Core\"></a>   \n## [!INCLUDE[net_core](~/add/includes/net-core-md.md)] Notes  \n In the .NET Framework on the desktop, the Console class uses the encoding returned by `GetConsoleCP` and `GetConsoleOutputCP`, which typically is a code page encoding. For example code, on systems whose culture is English (United States), code page 437 is the encoding that is used by default. However, [!INCLUDE[net_core](~/add/includes/net-core-md.md)] may make only a limited subset of these encodings available. Where this is the case, <xref:System.Text.Encoding.UTF8%2A?displayProperty=fullName> is used as the default encoding for the console.  \n  \n If your app depends on specific code page encodings, you can still make them available by doing the following *before* you call any Console methods:  \n  \n1.  Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.  \n  \n2.  Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=fullName> property.  \n  \n3.  Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=fullName> method to make the additional encodings supported by the encoding provider available.  \n  \n The Console class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any Console output methods."
  example:
  - "The following example demonstrates how to read data from, and write data to, the standard input and output streams. Note that these streams can be redirected by using the <xref:System.Console.SetIn%2A> and <xref:System.Console.SetOut%2A> methods.  \n  \n [!code-cs[Classic Console Example#1](~/add/codesnippet/csharp/t-system.console_6.cs)]\n [!code-cpp[Classic Console Example#1](~/add/codesnippet/cpp/t-system.console_6.cpp)]\n [!code-vb[Classic Console Example#1](~/add/codesnippet/visualbasic/t-system.console_6.vb)]"
  syntax:
    content: public static class Console
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Console.BackgroundColor
  id: BackgroundColor
  parent: System.Console
  langs:
  - csharp
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
  fullName: System.Console.BackgroundColor
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはコンソールの背景色を設定します。"
  remarks: "BackgroundColor プロパティの変更では、背景色を変更した後に、個々 の文字のセルに書き込まれた出力のみに影響します。 全体として、コンソール ウィンドウの背景色を変更するには、BackgroundColor プロパティと呼び出しを設定、<xref:System.Console.Clear%2A>メソッド</xref:System.Console.Clear%2A>。 次の例では、図を提供します。       [!code-vb[System.Console.BackgroundColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_1.vb)][!code-cs[System.Console.BackgroundColor#1](~/add/codesnippet/csharp/p-system.console.backgro_1.cs) ]をコンソールが存在しない、Windows ベース アプリケーションの取得操作は<xref:System.ConsoleColor?displayProperty=fullName>.</xref:System.ConsoleColor?displayProperty=fullName>を返します  "
  example:
  - "The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the BackgroundColor and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_2.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.backgro_2.cs)]"
  syntax:
    content: public static ConsoleColor BackgroundColor { get; set; }
    return:
      type: System.ConsoleColor
      description: "コンソールの背景色を指定する値各文字の背後に表示される色は、します。 既定値は黒です。"
  overload: System.Console.BackgroundColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定操作で指定された色は、の有効なメンバーではない<xref href=&quot;System.ConsoleColor&quot;></xref>です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Beep
  id: Beep
  parent: System.Console
  langs:
  - csharp
  name: Beep()
  nameWithType: Console.Beep()
  fullName: System.Console.Beep()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "コンソールのスピーカーからビープ音を出します。"
  remarks: "既定では、200 ミリ秒の期間に 800 ヘルツの頻度でビープ音を再生します。      > [!NOTE] >、<xref:System.Console.Beep%2A>メソッドが Windows Vista および Windows XP の 64 ビット エディションでサポートされていません</xref:System.Console.Beep%2A>。       ビープ音が windows の呼び出しをラップ[関数ビープ音を鳴らす](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)です。 ビープ音が Windows 7 の前に Windows のバージョンで音を鳴らすかどうかは、8254 programmable interval timer チップの有無によって異なります。 Windows 7 以降では、依存の既定のサウンド デバイス。"
  example:
  - "The following example demonstrates the Beep method. The example accepts a number from 1 through 9 as a command line argument, and plays the beep that number of times.  \n  \n [!code-cs[console.beep#1](~/add/codesnippet/csharp/m-system.console.beep_1.cs)]\n [!code-cpp[console.beep#1](~/add/codesnippet/cpp/m-system.console.beep_1.cpp)]\n [!code-vb[console.beep#1](~/add/codesnippet/visualbasic/m-system.console.beep_1.vb)]"
  syntax:
    content: public static void Beep ();
    parameters: []
  overload: System.Console.Beep*
  exceptions:
  - type: System.Security.HostProtectionException
    commentId: T:System.Security.HostProtectionException
    description: "このメソッドは、ユーザー インターフェイスへのアクセスを許可しない SQL Server など、サーバーで実行されました。"
  platform:
  - net462
- uid: System.Console.Beep(System.Int32,System.Int32)
  id: Beep(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Beep(Int32,Int32)
  nameWithType: Console.Beep(Int32,Int32)
  fullName: System.Console.Beep(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した頻度と時間のコンソールのスピーカーからビープ音を出します。"
  remarks: "<xref:System.Console.Beep%2A>Windows への呼び出しをラップ[関数ビープ音を鳴らす](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)です。</xref:System.Console.Beep%2A> かどうか<xref:System.Console.Beep%2A>Windows 7 が 8254 programmable interval timer チップの存在に依存する前に、Windows のバージョンで音を鳴らす</xref:System.Console.Beep%2A>。 Windows 7 以降では、依存の既定のサウンド デバイス。      > [!NOTE] >、<xref:System.Console.Beep%2A>メソッドが Windows Vista および Windows XP の 64 ビット エディションでサポートされていません</xref:System.Console.Beep%2A>。"
  example:
  - "This example demonstrates the Beep method by playing the first few notes of a song through the console speaker.  \n  \n [!code-cpp[console.beep2#1](~/add/codesnippet/cpp/m-system.console.beep-sy_1.cpp)]\n [!code-vb[console.beep2#1](~/add/codesnippet/visualbasic/m-system.console.beep-sy_1.vb)]\n [!code-cs[console.beep2#1](~/add/codesnippet/csharp/m-system.console.beep-sy_1.cs)]"
  syntax:
    content: public static void Beep (int frequency, int duration);
    parameters:
    - id: frequency
      type: System.Int32
      description: "37 から 32767 ヘルツを超えますに至るまで、ビープ音の周波数。"
    - id: duration
      type: System.Int32
      description: "ビープ音の再生時間は、ミリ秒で指定します。"
  overload: System.Console.Beep*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>frequency</code>37 未満または 32767 ヘルツを超える。       - または -<code>duration</code>が&0; 未満です。"
  - type: System.Security.HostProtectionException
    commentId: T:System.Security.HostProtectionException
    description: "このメソッドは、コンソールへのアクセスを許可しない SQL Server など、サーバーで実行されました。"
  platform:
  - net462
- uid: System.Console.BufferHeight
  id: BufferHeight
  parent: System.Console
  langs:
  - csharp
  name: BufferHeight
  nameWithType: Console.BufferHeight
  fullName: System.Console.BufferHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはバッファー領域の高さを設定します。"
  remarks: "このプロパティは、コンソール モード ウィンドウによってアクセスされるバッファーに格納されている行 (または行) の数を定義します。 これに対し、<xref:System.Console.WindowHeight%2A>プロパティが実際には、特定の時点に、コンソール ウィンドウに表示されている行の数を定義します</xref:System.Console.WindowHeight%2A>。 バッファーに実際に書き込まれた行の数がによって定義された行の数を超えた場合、<xref:System.Console.WindowHeight%2A>プロパティと等しい行の連続する数値を表示するように、ウィンドウを縦方向にスクロールすることができます、<xref:System.Console.WindowHeight%2A>プロパティでありは、バッファー内の任意の場所にある</xref:System.Console.WindowHeight%2A></xref:System.Console.WindowHeight%2A>。       設定操作では、BufferHeight プロパティの値が低下する場合は、最上位の行が削除されます。 たとえば、250 に 300 から行の数を減らす場合は、0 ~ 49 の行が削除されると、既存の行を 50 ~ 299 になる線の 0 から 249 を実行します。"
  example:
  - "This example demonstrates the BufferHeight and <xref:System.Console.BufferWidth%2A> properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  \n  \n [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferh_1.cs)]\n [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferh_1.cpp)]\n [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferh_1.vb)]"
  syntax:
    content: public static int BufferHeight { get; set; }
    return:
      type: System.Int32
      description: "現在の高さのバッファー領域の行。"
  overload: System.Console.BufferHeight*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "セット操作の値は、0 に等しいまたはそれよりも小さいです。       - または - セット操作の値がより大きいまたは等しい&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;です。       - または - セット操作の値がより小さい<> *> + <> </> *> です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.BufferWidth
  id: BufferWidth
  parent: System.Console
  langs:
  - csharp
  name: BufferWidth
  nameWithType: Console.BufferWidth
  fullName: System.Console.BufferWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはバッファー領域の幅を設定します。"
  remarks: "設定操作では、BufferWidth プロパティの値が低下する場合、右端の列は削除されます。 たとえば、列の数は 60、80 から縮小した場合、60 ~ 79 各行の列は削除されます。"
  example:
  - "This example demonstrates the <xref:System.Console.BufferHeight%2A> and BufferWidth properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  \n  \n [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferw_1.cs)]\n [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferw_1.cpp)]\n [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferw_1.vb)]"
  syntax:
    content: public static int BufferWidth { get; set; }
    return:
      type: System.Int32
      description: "現在の幅のバッファー領域の列。"
  overload: System.Console.BufferWidth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "セット操作の値は、0 に等しいまたはそれよりも小さいです。       - または - セット操作の値がより大きいまたは等しい&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;です。       - または - セット操作の値がより小さい<> *> + <> </> *> です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.CancelKeyPress
  id: CancelKeyPress
  parent: System.Console
  langs:
  - csharp
  name: CancelKeyPress
  nameWithType: Console.CancelKeyPress
  fullName: System.Console.CancelKeyPress
  type: Event
  assemblies:
  - mscorlib
  namespace: System
  summary: "発生したときに、 <xref href=&quot;System.ConsoleModifiers&quot;> </xref>修飾子キー (Ctrl) と、 <xref href=&quot;System.ConsoleKey&quot;> </xref>コンソール キー (C) または中断キーが同時に押された (CTRL + C または Ctrl + break)。"
  remarks: "このイベント<xref:System.ConsoleCancelEventHandler?displayProperty=fullName>と<xref:System.ConsoleCancelEventArgs?displayProperty=fullName>。</xref:System.ConsoleCancelEventArgs?displayProperty=fullName></xref:System.ConsoleCancelEventHandler?displayProperty=fullName>と組み合わせて使用します。 CancelKeyPress イベントは、イベント ハンドラーが実行を続行するか終了するかどうかを決定するために CTRL + C シグナルをインターセプトするコンソール アプリケーションを使用します。 イベント処理の詳細については、次を参照してください。[処理とイベントの発生](~/add/includes/ajax-current-ext-md.md)です。       CTRL + C または Ctrl + break、イベントが発生した CancelKeyPress およびアプリケーションのキーが押されたとき<xref:System.ConsoleCancelEventHandler>イベント ハンドラーが実行されます</xref:System.ConsoleCancelEventHandler>。 イベント ハンドラーに渡されます、<xref:System.ConsoleCancelEventArgs>を&2; つの便利なプロパティを持つオブジェクト:- <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>、ctrl キーを押しながら C キーを押して、ユーザーの結果として、ハンドラーが呼び出されたかどうかを判断することができます (プロパティの値が<xref:System.ConsoleSpecialKey?displayProperty=fullName>) または Ctrl + Break (プロパティの値が<xref:System.ConsoleSpecialKey?displayProperty=fullName>).</xref:System.ConsoleSpecialKey?displayProperty=fullName> </xref:System.ConsoleSpecialKey?displayProperty=fullName> </xref:System.ConsoleCancelEventArgs.SpecialKey%2A> </xref:System.ConsoleCancelEventArgs>      - <xref:System.ConsoleCancelEventArgs.Cancel%2A>、どのアプリケーションにする必要がありますをユーザーには、応答を押すと CTRL + C または Ctrl + break を判断できます</xref:System.ConsoleCancelEventArgs.Cancel%2A>。 既定では、<xref:System.ConsoleCancelEventArgs.Cancel%2A>プロパティは`false`、原因プログラムの終了イベント ハンドラーの終了時に実行する</xref:System.ConsoleCancelEventArgs.Cancel%2A>。 そのプロパティを変更する`true`を実行するアプリケーションを続行するかを指定します。      > [!TIP] > アプリに単純な要件がある場合を使えば、<xref:System.Console.TreatControlCAsInput%2A>このイベントではなくプロパティ</xref:System.Console.TreatControlCAsInput%2A>。 このプロパティを設定して`false`、ctrl キーを押しながら C キーを押した場合に常にアプリケーションを終了することを確認できます。 設定することによって`true`、こと、ctrl キーを押しながら C キーを押しても、アプリケーションは終了しないことを確認できます。       このイベントのイベント ハンドラーは、スレッド プールのスレッドで実行されます。"
  example:
  - "The following example demonstrates how the CancelKeyPress event is used. When you press Ctrl+C, the read operation is interrupted and the `myHandler` event handler is invoked. Upon entry to the event handler, the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property is `false`, which means that the current process will terminate when the event handler terminates. However, the event handler sets the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property to `true`, which means that the process will not terminate and the read operation will resume.  \n  \n [!code-cs[console.cancelkeypress#1](~/add/codesnippet/csharp/e-system.console.cancelk_1.cs)]\n [!code-cpp[console.cancelkeypress#1](~/add/codesnippet/cpp/e-system.console.cancelk_1.cpp)]\n [!code-vb[console.cancelkeypress#1](~/add/codesnippet/visualbasic/e-system.console.cancelk_1.vb)]"
  syntax:
    content: public static event ConsoleCancelEventHandler CancelKeyPress;
    return:
      type: System.ConsoleCancelEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Console.CapsLock
  id: CapsLock
  parent: System.Console
  langs:
  - csharp
  name: CapsLock
  nameWithType: Console.CapsLock
  fullName: System.Console.CapsLock
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Capslock がオンまたはにするかどうかを示す値を取得します。"
  syntax:
    content: public static bool CapsLock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>CAPSLOCK がオンの場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> CAPSLOCK がになっている場合。"
  overload: System.Console.CapsLock*
  exceptions: []
  platform:
  - net462
- uid: System.Console.Clear
  id: Clear
  parent: System.Console
  langs:
  - csharp
  name: Clear()
  nameWithType: Console.Clear()
  fullName: System.Console.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "コンソール バッファーおよび表示情報の対応するコンソール ウィンドウをクリアします。"
  remarks: "Clear メソッドは、MS-DOS の呼び出し操作と同じ`cls`コマンド プロンプト ウィンドウでコマンド。 Clear メソッドが呼び出されると、カーソルがウィンドウの左上隅に自動的にスクロールし、画面バッファーの内容は、現在の前景の背景色を使用した空白に設定されます。      > [!NOTE] > <xref:System.IO.IOException>.</xref:System.IO.IOException>をスローするコンソール アプリケーションの出力がファイルにリダイレクトされたときにクリア メソッドを呼び出すしようとしています。 これを回避するには、常に Clear メソッドへの呼び出しをラップする`try`しています.`catch` ブロックです。"
  example:
  - "The following example uses the Clear method to clear the console before it executes a loop, prompts the user to select a foreground and background color and to enter a string to display. If the user chooses not to exit the program, the console's original foreground and background colors are restored and the Clear method is called again before re-executing the loop.  \n  \n [!code-vb[System.Console.Clear#1](~/add/codesnippet/visualbasic/m-system.console.clear_1.vb)]\n [!code-cs[System.Console.Clear#1](~/add/codesnippet/csharp/m-system.console.clear_1.cs)]  \n  \n The example relies on a `GetKeyPress` method to validate the user's selection of a foreground and background color.  \n  \n This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and Clear methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.clear_2.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.clear_2.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.clear_2.vb)]"
  syntax:
    content: public static void Clear ();
    parameters: []
  overload: System.Console.Clear*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.CursorLeft
  id: CursorLeft
  parent: System.Console
  langs:
  - csharp
  name: CursorLeft
  nameWithType: Console.CursorLeft
  fullName: System.Console.CursorLeft
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはバッファー領域におけるカーソルの列の位置を設定します。"
  remarks: ''
  example:
  - "This example demonstrates the CursorLeft and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursorl_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursorl_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursorl_1.vb)]"
  syntax:
    content: public static int CursorLeft { get; set; }
    return:
      type: System.Int32
      description: "列では、カーソルの現在位置。"
  overload: System.Console.CursorLeft*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "セット操作の値が&0; 未満です。       - または - セット操作の値がより大きいか等しい<xref:System.Console.BufferWidth*>。</xref:System.Console.BufferWidth*>"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.CursorSize
  id: CursorSize
  parent: System.Console
  langs:
  - csharp
  name: CursorSize
  nameWithType: Console.CursorSize
  fullName: System.Console.CursorSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または文字セル内のカーソルの高さを設定します。"
  remarks: "プロパティの値が完全にいっぱいになるセル プロパティ値が 100 の場合に、1 の場合、セルの下部にある水平行の範囲、カーソルの外観が異なります。"
  example:
  - "This example demonstrates the CursorSize property. The example increases the size of the cursor each time any console key is pressed, then restores the cursor to its original size before terminating.  \n  \n [!code-cs[console.cursorsize#1](~/add/codesnippet/csharp/p-system.console.cursors_1.cs)]\n [!code-cpp[console.cursorsize#1](~/add/codesnippet/cpp/p-system.console.cursors_1.cpp)]\n [!code-vb[console.cursorsize#1](~/add/codesnippet/visualbasic/p-system.console.cursors_1.vb)]"
  syntax:
    content: public static int CursorSize { get; set; }
    return:
      type: System.Int32
      description: "文字セルの高さの割合で表されたカーソルのサイズ。 プロパティの値範囲は、1 から 100 にします。"
  overload: System.Console.CursorSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定操作で指定された値は、1 より小さいか、100 より大きいです。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.CursorTop
  id: CursorTop
  parent: System.Console
  langs:
  - csharp
  name: CursorTop
  nameWithType: Console.CursorTop
  fullName: System.Console.CursorTop
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはバッファー領域におけるカーソルの行の位置を設定します。"
  remarks: ''
  example:
  - "This example demonstrates the <xref:System.Console.CursorLeft%2A> and CursorTop properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursortop_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursortop_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursortop_1.vb)]"
  syntax:
    content: public static int CursorTop { get; set; }
    return:
      type: System.Int32
      description: "行では、カーソルの現在位置。"
  overload: System.Console.CursorTop*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "セット操作の値が&0; 未満です。       - または - セット操作の値がより大きいか等しい<xref:System.Console.BufferHeight*>。</xref:System.Console.BufferHeight*>"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.CursorVisible
  id: CursorVisible
  parent: System.Console
  langs:
  - csharp
  name: CursorVisible
  nameWithType: Console.CursorVisible
  fullName: System.Console.CursorVisible
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはカーソルを表示するかどうかを示す値を設定します。"
  remarks: ''
  example:
  - "This example demonstrates the CursorVisible property. The example makes the cursor visible if the first column of input is a '+' character or invisible if the input is a '-' character.  \n  \n [!code-cs[console.cursorvis#1](~/add/codesnippet/csharp/p-system.console.cursorv_1.cs)]\n [!code-vb[console.cursorvis#1](~/add/codesnippet/visualbasic/p-system.console.cursorv_1.vb)]\n [!code-cpp[console.cursorvis#1](~/add/codesnippet/cpp/p-system.console.cursorv_1.cpp)]"
  syntax:
    content: public static bool CursorVisible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カーソルを表示する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Console.CursorVisible*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Error
  id: Error
  parent: System.Console
  langs:
  - csharp
  name: Error
  nameWithType: Console.Error
  fullName: System.Console.Error
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "標準エラー出力ストリームを取得します。"
  remarks: "この標準エラー ストリームは、既定では、コンソールに設定されます。 別のストリームに設定することができます、<xref:System.Console.SetError%2A>メソッド</xref:System.Console.SetError%2A>。 標準エラー ストリームをリダイレクトすると、そのことができます再取得するを呼び出して、<xref:System.Console.OpenStandardError%2A>メソッド</xref:System.Console.OpenStandardError%2A>。       コンソール アプリケーションでの情報の出力がファイルにリダイレクト多くの場合、情報を表示するコンソールに出力がリダイレクトされる場合でもエラー プロパティを通じて利用可能な標準エラー ストリームを使用できます。 次の例では、1 から始まる一度に 10 個の番号の製品テーブルが表示されます。 10 個の番号の各セットの後に、エラー プロパティを使用して、ユーザーに、次のセットを表示するかどうか確認します。 場合は、標準の出力は、ファイルにリダイレクトは、ルーチンが次の製品のセットを生成するかどうか、ユーザーがまだ求められます。       [!code-cs[System.Console.Error#1](~/add/codesnippet/csharp/p-system.console.error_1.cs)][!code-vb[System.Console.Error#1  ](~/add/codesnippet/visualbasic/p-system.console.error_1.vb)]"
  example:
  - "The following example is a command line utility named ExpandTabs that replaces tab characters in a text file with four spaces, the value defined by the `tabSize` variable. It redirects the standard input and output streams to files, but uses the Error property to write the standard error stream to the console. It can be launched from the command line by supplying the name of the file that contains tab characters and the name of the output file.  \n  \n [!code-cpp[Console-EXPANDTABSEX#1](~/add/codesnippet/cpp/p-system.console.error_2.cpp)]\n [!code-cs[Console-EXPANDTABSEX#1](~/add/codesnippet/csharp/p-system.console.error_2.cs)]\n [!code-vb[Console-EXPANDTABSEX#1](~/add/codesnippet/visualbasic/p-system.console.error_2.vb)]  \n  \n The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the <xref:System.Console.OpenStandardError%2A> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  \n  \n [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/p-system.console.error_3.cs)]\n [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/p-system.console.error_3.vb)]  \n  \n Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered."
  syntax:
    content: public static System.IO.TextWriter Error { get; }
    return:
      type: System.IO.TextWriter
      description: "A<xref:System.IO.TextWriter>標準エラー出力ストリームを表す</xref:System.IO.TextWriter>。"
  overload: System.Console.Error*
  exceptions: []
  platform:
  - net462
- uid: System.Console.ForegroundColor
  id: ForegroundColor
  parent: System.Console
  langs:
  - csharp
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
  fullName: System.Console.ForegroundColor
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはコンソールの前景色を設定します。"
  remarks: "これは、コンソールに存在しません、Windows ベース アプリケーションの取得操作は<xref:System.ConsoleColor>。</xref:System.ConsoleColor>を返します"
  example:
  - "The following example checks whether the console's background color is black and, if it is, it changes the background color to red and the foreground color to black.  \n  \n [!code-cs[System.ConsoleColor#2](~/add/codesnippet/csharp/p-system.console.foregro_1.cs)]\n [!code-vb[System.ConsoleColor#2](~/add/codesnippet/visualbasic/p-system.console.foregro_1.vb)]  \n  \n The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and ForegroundColor properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.foregro_2.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.foregro_2.cs)]"
  syntax:
    content: public static ConsoleColor ForegroundColor { get; set; }
    return:
      type: System.ConsoleColor
      description: "A <xref href=&quot;System.ConsoleColor&quot;> </xref>コンソールの前景色を指定します。 つまり、各文字の色をが表示されます。 既定値は灰色です。"
  overload: System.Console.ForegroundColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定操作で指定された色は、の有効なメンバーではない<xref href=&quot;System.ConsoleColor&quot;></xref>です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.In
  id: In
  parent: System.Console
  langs:
  - csharp
  name: In
  nameWithType: Console.In
  fullName: System.Console.In
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "標準入力ストリームを取得します。"
  remarks: "このプロパティが既定で標準入力ストリームに設定します。 別のストリームにこのプロパティを設定することができます、<xref:System.Console.SetIn%2A>メソッド</xref:System.Console.SetIn%2A>。       標準入力ストリームに対して読み取り操作が同期的に実行します。 つまり、指定された読み取り操作が完了するまで、ブロックします。 でもは true これは場合、非同期メソッドなど<xref:System.IO.TextReader.ReadLineAsync%2A>、で呼び出されると、 <xref:System.IO.TextReader>In プロパティによって返されるオブジェクト。</xref:System.IO.TextReader> </xref:System.IO.TextReader.ReadLineAsync%2A> 。"
  example:
  - "The following sample illustrates the use of the `In` property.  \n  \n [!code-cpp[consolein#1](~/add/codesnippet/cpp/p-system.console.in_1.cpp)]\n [!code-cs[consolein#1](~/add/codesnippet/csharp/p-system.console.in_1.cs)]\n [!code-vb[consolein#1](~/add/codesnippet/visualbasic/p-system.console.in_1.vb)]"
  syntax:
    content: public static System.IO.TextReader In { get; }
    return:
      type: System.IO.TextReader
      description: "A<xref:System.IO.TextReader>標準入力ストリームを表す</xref:System.IO.TextReader>。"
  overload: System.Console.In*
  exceptions: []
  platform:
  - net462
- uid: System.Console.InputEncoding
  id: InputEncoding
  parent: System.Console
  langs:
  - csharp
  name: InputEncoding
  nameWithType: Console.InputEncoding
  fullName: System.Console.InputEncoding
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはコンソールが入力内容の読み取りに使用するエンコーディングを設定します。"
  remarks: "コンソールでは、入力に対応する文字にキーボード入力を変換するエンコーディングを使用します。 入力のエンコードには、256 個のキーボード文字コードを個々 の文字にマップされているコード ページが組み込まれています。 異なるコード ページには、言語または言語グループ用にカスタマイズされた通常の異なる特殊文字が含まれます。       以降で、[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]プロパティの get 操作は、コンソールの現在入力エンコーディングの代わりにキャッシュされた値を返す可能性があります。 これは、InputEncoding プロパティの値は、Windows の呼び出しなど、InputEncoding プロパティへの代入以外のいくつかの方法で変更された場合に発生することができます`SetConsoleCP`関数またはを使用して、 `chcp` PowerShell スクリプトからコマンド。"
  syntax:
    content: public static System.Text.Encoding InputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "コンソールの入力内容の読み取りに使用するエンコーディングします。"
  overload: System.Console.InputEncoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "セット操作のプロパティの値が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "この操作の実行中にエラーが発生しました。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "アプリケーションには、この操作を実行するアクセス許可がありません。"
  platform:
  - net462
- uid: System.Console.IsErrorRedirected
  id: IsErrorRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
  fullName: System.Console.IsErrorRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "エラー出力ストリームが標準エラー ストリームからリダイレクトされているかどうかを示す値を取得します。"
  syntax:
    content: public static bool IsErrorRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合はエラー出力をリダイレクトします。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Console.IsErrorRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.IsInputRedirected
  id: IsInputRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
  fullName: System.Console.IsInputRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "入力が標準入力ストリームからリダイレクトされているかどうかを示す値を取得します。"
  syntax:
    content: public static bool IsInputRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>入力がリダイレクト; 場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Console.IsInputRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.IsOutputRedirected
  id: IsOutputRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
  fullName: System.Console.IsOutputRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "出力が標準出力ストリームからリダイレクトされているかどうかを示す値を取得します。"
  syntax:
    content: public static bool IsOutputRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>出力がリダイレクトされます。 場合、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Console.IsOutputRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.KeyAvailable
  id: KeyAvailable
  parent: System.Console
  langs:
  - csharp
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
  fullName: System.Console.KeyAvailable
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "入力ストリーム内のキーを押すが使用するかどうかを示す値を取得します。"
  remarks: "プロパティの値が直ちに返されますつまり、キーを押すが利用可能になるまで、KeyAvailable プロパティは入力をブロックされません。       KeyAvailable プロパティを使用するのみと組み合わせて、<xref:System.Console.ReadKey%2A>メソッド、されません、<xref:System.Console.Read%2A>または<xref:System.Console.ReadLine%2A>メソッド</xref:System.Console.ReadLine%2A></xref:System.Console.Read%2A></xref:System.Console.ReadKey%2A>。"
  example:
  - "The following example demonstrates how to use the KeyAvailable property to create a loop that runs until a key is pressed.  \n  \n [!code-cs[console.keyavailable#1](~/add/codesnippet/csharp/p-system.console.keyavai_1.cs)]\n [!code-cpp[console.keyavailable#1](~/add/codesnippet/cpp/p-system.console.keyavai_1.cpp)]\n [!code-vb[console.keyavailable#1](~/add/codesnippet/visualbasic/p-system.console.keyavai_1.vb)]"
  syntax:
    content: public static bool KeyAvailable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>キーを押すがある場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Console.KeyAvailable*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "標準入力は、キーボードの代わりにファイルにリダイレクトされます。"
  platform:
  - net462
- uid: System.Console.LargestWindowHeight
  id: LargestWindowHeight
  parent: System.Console
  langs:
  - csharp
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
  fullName: System.Console.LargestWindowHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "コンソールの最大数を現在のフォントおよび画面解像度に基づいて、ウィンドウの行を取得します。"
  syntax:
    content: public static int LargestWindowHeight { get; }
    return:
      type: System.Int32
      description: "行で指定された最大の可能なコンソール ウィンドウの高さ。"
  overload: System.Console.LargestWindowHeight*
  exceptions: []
  platform:
  - net462
- uid: System.Console.LargestWindowWidth
  id: LargestWindowWidth
  parent: System.Console
  langs:
  - csharp
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
  fullName: System.Console.LargestWindowWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "コンソールの最大数を現在のフォントおよび画面解像度に基づいて、ウィンドウの列を取得します。"
  syntax:
    content: public static int LargestWindowWidth { get; }
    return:
      type: System.Int32
      description: "最大の可能なコンソール ウィンドウの幅は、列で測定されます。"
  overload: System.Console.LargestWindowWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した領域に、画面バッファーの指定した特定の領域をコピーします。"
  remarks: "送信先と送信元のパラメーターは、現在の画面バッファーの境界の外にある位置を指定する場合は、コピー先領域に適合するコピー元領域の部分だけがコピーされます。 つまり、コピー元領域は、現在の画面バッファーに合わせてクリッピングされます。       MoveBufferArea メソッドは、コピー先領域にコピー元領域をコピーします。 コピー元領域をコピー先領域から共通部分がない場合、コピー元領域は、現在の前景色と背景色を使用して空白で埋められます。 それ以外の場合、コピー元領域の交差部分が指定されていません。"
  syntax:
    content: public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);
    parameters:
    - id: sourceLeft
      type: System.Int32
      description: "コピー元領域の左端の列です。"
    - id: sourceTop
      type: System.Int32
      description: "コピー元領域の最上行。"
    - id: sourceWidth
      type: System.Int32
      description: "コピー元領域内の列の数。"
    - id: sourceHeight
      type: System.Int32
      description: "コピー元領域内の行の数。"
    - id: targetLeft
      type: System.Int32
      description: "コピー先領域の左端の列です。"
    - id: targetTop
      type: System.Int32
      description: "コピー先領域の最上行。"
  overload: System.Console.MoveBufferArea*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "1 つまたは複数のパラメーターが&0; 未満です。       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <>*>.      -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <>*>.       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <>*>.      -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <>*>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  parent: System.Console
  langs:
  - csharp
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した領域に、画面バッファーの指定した特定の領域をコピーします。"
  remarks: "送信先と送信元のパラメーターは、現在の画面バッファーの境界を越える位置を指定する場合は、コピー先領域に適合するコピー元領域の部分のみがコピーされます。 つまり、コピー元領域は、現在の画面バッファーに合わせてクリッピングされます。       <xref:System.Console.MoveBufferArea%2A>メソッドは、コピー先領域にコピー元領域をコピーします</xref:System.Console.MoveBufferArea%2A>。 コピー元領域をコピー先領域から共通部分がない場合で指定された文字でコピー元領域が塗りつぶされます。 `sourceChar`、で指定された色を使用して`sourceForeColor`と`sourceBackColor`です。 それ以外の場合、コピー元領域の交差部分が指定されていません。       <xref:System.Console.MoveBufferArea%2A>メソッド操作も行いません場合`sourceWidth`または`sourceHeight`ゼロします</xref:System.Console.MoveBufferArea%2A>。"
  syntax:
    content: public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
    parameters:
    - id: sourceLeft
      type: System.Int32
      description: "コピー元領域の左端の列です。"
    - id: sourceTop
      type: System.Int32
      description: "コピー元領域の最上行。"
    - id: sourceWidth
      type: System.Int32
      description: "コピー元領域内の列の数。"
    - id: sourceHeight
      type: System.Int32
      description: "コピー元領域内の行の数。"
    - id: targetLeft
      type: System.Int32
      description: "コピー先領域の左端の列です。"
    - id: targetTop
      type: System.Int32
      description: "コピー先領域の最上行。"
    - id: sourceChar
      type: System.Char
      description: "コピー元領域を埋めるために使用する文字。"
    - id: sourceForeColor
      type: System.ConsoleColor
      description: "コピー元領域を埋めるために使用する前景色です。"
    - id: sourceBackColor
      type: System.ConsoleColor
      description: "コピー元領域を埋めるために使用する背景色です。"
  overload: System.Console.MoveBufferArea*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "1 つまたは複数のパラメーターが&0; 未満です。       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <>*>.      -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <>*>.       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <>*>.      -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <>*>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "色パラメーターの一方または両方のメンバーではない、 <xref href=&quot;System.ConsoleColor&quot;> </xref>列挙します。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.NumberLock
  id: NumberLock
  parent: System.Console
  langs:
  - csharp
  name: NumberLock
  nameWithType: Console.NumberLock
  fullName: System.Console.NumberLock
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Numlock がオンまたはにするかどうかを示す値を取得します。"
  syntax:
    content: public static bool NumberLock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>NUMLOCK がオンの場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> NUMLOCK がになっている場合。"
  overload: System.Console.NumberLock*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardError
  id: OpenStandardError
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardError()
  nameWithType: Console.OpenStandardError()
  fullName: System.Console.OpenStandardError()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "標準エラー ストリームを取得します。"
  remarks: "このメソッドは、によって変更された後に標準エラー ストリームを再取得に使用できます、<xref:System.Console.SetError%2A>メソッド</xref:System.Console.SetError%2A>。"
  example:
  - "The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the OpenStandardError method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  \n  \n [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/m-system.console.opensta_4_1.cs)]\n [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/m-system.console.opensta_4_1.vb)]  \n  \n Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered."
  syntax:
    content: public static System.IO.Stream OpenStandardError ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "標準エラー ストリーム。"
  overload: System.Console.OpenStandardError*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardError(System.Int32)
  id: OpenStandardError(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardError(Int32)
  nameWithType: Console.OpenStandardError(Int32)
  fullName: System.Console.OpenStandardError(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したバッファー サイズに設定されている標準エラー ストリームを取得します。"
  remarks: "このメソッドは、によって変更された後に標準エラー ストリームを再取得に使用できます、<xref:System.Console.SetError%2A>メソッド</xref:System.Console.SetError%2A>。"
  syntax:
    content: public static System.IO.Stream OpenStandardError (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "内部ストリーム バッファー サイズ。"
    return:
      type: System.IO.Stream
      description: "標準エラー ストリーム。"
  overload: System.Console.OpenStandardError*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>0 に等しいまたはそれよりも未満です。"
  platform:
  - net462
- uid: System.Console.OpenStandardInput
  id: OpenStandardInput
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardInput()
  nameWithType: Console.OpenStandardInput()
  fullName: System.Console.OpenStandardInput()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "標準入力ストリームを取得します。"
  remarks: "このメソッドは、によって変更された後は、標準入力ストリームを再取得に使用できます、<xref:System.Console.SetIn%2A>メソッド</xref:System.Console.SetIn%2A>。"
  example:
  - "The following example illustrates the use of the `OpenStandardInput` property.  \n  \n [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_3_1.cs)]\n [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_3_1.vb)]\n [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_3_1.cpp)]"
  syntax:
    content: public static System.IO.Stream OpenStandardInput ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "標準入力ストリーム。"
  overload: System.Console.OpenStandardInput*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardInput(System.Int32)
  id: OpenStandardInput(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardInput(Int32)
  nameWithType: Console.OpenStandardInput(Int32)
  fullName: System.Console.OpenStandardInput(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したバッファー サイズに設定された標準入力ストリームを取得します。"
  remarks: "このメソッドは、によって変更された後は、標準出力ストリームを再取得に使用できます、<xref:System.Console.SetIn%2A>メソッド</xref:System.Console.SetIn%2A>。"
  example:
  - "The following example illustrates the use of the `OpenStandardInput` property.  \n  \n [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_2_1.cs)]\n [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_2_1.vb)]\n [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_2_1.cpp)]"
  syntax:
    content: public static System.IO.Stream OpenStandardInput (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "内部ストリーム バッファー サイズ。"
    return:
      type: System.IO.Stream
      description: "標準入力ストリーム。"
  overload: System.Console.OpenStandardInput*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>0 に等しいまたはそれよりも未満です。"
  platform:
  - net462
- uid: System.Console.OpenStandardOutput
  id: OpenStandardOutput
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardOutput()
  nameWithType: Console.OpenStandardOutput()
  fullName: System.Console.OpenStandardOutput()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "標準出力ストリームを取得します。"
  remarks: "このメソッドは、によって変更された後は、標準出力ストリームを再取得に使用できます、<xref:System.Console.SetOut%2A>メソッド</xref:System.Console.SetOut%2A>。"
  example:
  - "The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command-line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_0_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_0_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_0_1.cs)]"
  syntax:
    content: public static System.IO.Stream OpenStandardOutput ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "標準出力ストリーム。"
  overload: System.Console.OpenStandardOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardOutput(System.Int32)
  id: OpenStandardOutput(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardOutput(Int32)
  nameWithType: Console.OpenStandardOutput(Int32)
  fullName: System.Console.OpenStandardOutput(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したバッファー サイズに設定されている標準出力ストリームを取得します。"
  remarks: "このメソッドは、によって変更された後は、標準出力ストリームを再取得に使用できます、<xref:System.Console.SetOut%2A>メソッド</xref:System.Console.SetOut%2A>。"
  example:
  - "The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_1_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_1_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_1_1.cs)]"
  syntax:
    content: public static System.IO.Stream OpenStandardOutput (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "内部ストリーム バッファー サイズ。"
    return:
      type: System.IO.Stream
      description: "標準出力ストリーム。"
  overload: System.Console.OpenStandardOutput*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>0 に等しいまたはそれよりも未満です。"
  platform:
  - net462
- uid: System.Console.Out
  id: Out
  parent: System.Console
  langs:
  - csharp
  name: Out
  nameWithType: Console.Out
  fullName: System.Console.Out
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "標準出力ストリームを取得します。"
  remarks: "このプロパティが既定では標準出力ストリームに設定します。 別のストリームにこのプロパティを設定することができます、<xref:System.Console.SetOut%2A>メソッド</xref:System.Console.SetOut%2A>。       呼び出す`Console.Out.WriteLine`メソッドは、対応する呼び出しに相当する<xref:System.Console.WriteLine%2A>メソッド</xref:System.Console.WriteLine%2A>。"
  example:
  - "The following example uses the Out property to display an array containing the names of files in the application's current directory to the standard output device. It then sets the standard output to a file named Files.txt and lists the array elements to the file. Finally, it sets the output to the standard output stream and again displays the array elements to the standard output device.  \n  \n [!code-cs[System.Console.Out#1](~/add/codesnippet/csharp/p-system.console.out_1.cs)]\n [!code-vb[System.Console.Out#1](~/add/codesnippet/visualbasic/p-system.console.out_1.vb)]"
  syntax:
    content: public static System.IO.TextWriter Out { get; }
    return:
      type: System.IO.TextWriter
      description: "A<xref:System.IO.TextWriter>標準出力ストリームを表す</xref:System.IO.TextWriter>。"
  overload: System.Console.Out*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OutputEncoding
  id: OutputEncoding
  parent: System.Console
  langs:
  - csharp
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
  fullName: System.Console.OutputEncoding
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはコンソールが出力を書き込むために使用するエンコーディングを設定します。"
  remarks: "コンソールは、出力のエンコードを使用に対応する文字のコンソール表示にアプリケーションによって書き込まれた文字を変換します。 コンソールを使用する既定のコード ページは、システムのロケールによって決まります。       以降で、[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]プロパティの get 操作は、現在の出力エンコードをコンソールの代わりにキャッシュされた値を返す可能性があります。 これは、OutputEncoding プロパティの値は、Windows の呼び出しなど、OutputEncoding プロパティへの代入以外のいくつかの方法で変更された場合に発生することができます`SetConsoleOutputCP`関数。"
  syntax:
    content: public static System.Text.Encoding OutputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "コンソール出力の書き込みに使用するエンコーディングします。"
  overload: System.Console.OutputEncoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "セット操作のプロパティの値が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "この操作の実行中にエラーが発生しました。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "アプリケーションには、この操作を実行するアクセス許可がありません。"
  platform:
  - net462
- uid: System.Console.Read
  id: Read
  parent: System.Console
  langs:
  - csharp
  name: Read()
  nameWithType: Console.Read()
  fullName: System.Console.Read()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "標準入力ストリームから次の文字を読み取ります。"
  remarks: "入力文字を入力する場合に、Read メソッドは、戻り値をブロックします。キーを押すと終了、<xref:System.ConsoleKey>キー</xref:System.ConsoleKey> 。 プラットフォームに依存する行の終了シーケンスを入力に追加 Enter キーを押して (たとえば、Windows がキャリッジ リターンとライン フィードのシーケンスを追加する)。 Read メソッドへの後続の呼び出しは、一度に、入力の&1; つの文字を取得します。 読み取りが、戻り値をブロックの最後の文字を取得すると、後にもう一度とサイクルを繰り返します。      > [!IMPORTANT] >、<xref:System.Console.ReadLine%2A>メソッド、または<xref:System.Console.KeyAvailable%2A>プロパティおよび<xref:System.Console.ReadKey%2A>メソッドは、Read メソッドを使用することをお勧めします</xref:System.Console.ReadKey%2A></xref:System.Console.KeyAvailable%2A></xref:System.Console.ReadLine%2A>。       エントリの次の操作のいずれかを実行しない限り、メソッドは-1 が返されませんに注意してください: - 同時にキーを押して、<xref:System.ConsoleModifiers>修飾子キーと<xref:System.ConsoleKey>コンソール キー (Ctrl + Z)、ファイル末尾の条件に通知します</xref:System.ConsoleKey></xref:System.ConsoleModifiers>。      -Windows F6 キーなど、ファイル末尾の条件のことを通知する、同じキーを押します。      実際のファイルの終端文字が含まれるテキスト ファイルなどのソースに、入力ストリームをリダイレクトします。"
  example:
  - "The following example demonstrates the Read method.  \n  \n [!code-cpp[console.read#1](~/add/codesnippet/cpp/m-system.console.read_1.cpp)]\n [!code-cs[console.read#1](~/add/codesnippet/csharp/m-system.console.read_1.cs)]\n [!code-vb[console.read#1](~/add/codesnippet/visualbasic/m-system.console.read_1.vb)]"
  syntax:
    content: public static int Read ();
    parameters: []
    return:
      type: System.Int32
      description: "次の入力ストリームから文字します。 または現在いる読み取る文字がない場合は負の&1; (-1)。"
  overload: System.Console.Read*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.ReadKey
  id: ReadKey
  parent: System.Console
  langs:
  - csharp
  name: ReadKey()
  nameWithType: Console.ReadKey()
  fullName: System.Console.ReadKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "ユーザーによって押された次の文字または関数のキーを取得します。 押されたキーは、コンソール ウィンドウに表示されます。"
  remarks: "ReadKey メソッドに、文字キーまたはファンクション キーが押下されるまで ReadKey メソッドを発行するスレッド上のメモリ ブロックを待機します。 1 つまたは複数の alt キーを押し、ctrl キーまたは shift キーを押し修飾子キーの組み合わせで、文字キーまたはファンクション キーを押すこともできます。 ただし、修飾子キーを押すと、それ自体では発生しません、ReadKey メソッドを返します。       アプリケーションによっては、メソッドを使用して、ReadKey と併用する可能性があります、<xref:System.Console.KeyAvailable%2A>プロパティ</xref:System.Console.KeyAvailable%2A>。       ReadKey メソッドを持つファイルに標準の入力がリダイレクトされる場合でも、キーボードから読み取り、<xref:System.Console.SetIn%2A>メソッド</xref:System.Console.SetIn%2A>。"
  example:
  - "One of the most common uses of the ReadKey method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app.  \n  \n [!code-cs[System.Console.ReadKey#1](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]\n [!code-vb[System.Console.ReadKey#1](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]  \n  \n Note that this overload of the <xref:System.Console.ReadKey%2A> method by default echoes any displayable keys that the user presses to the console. To suppress them, call the  <xref:System.Console.ReadKey%2A> method with an `intercept` argument of `true`.  \n  \n The following example uses the ReadKey method to display information about which key the user pressed..  \n  \n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]"
  syntax:
    content: public static ConsoleKeyInfo ReadKey ();
    parameters: []
    return:
      type: System.ConsoleKeyInfo
      description: "記述するオブジェクト、 <xref href=&quot;System.ConsoleKey&quot;> </xref>定数と Unicode 文字、存在する場合、対応する押されたコンソール キーにします。 <xref href=&quot;System.ConsoleKeyInfo&quot;> </xref>オブジェクトについても説明します、ビットごとの組み合わせで<xref href=&quot;System.ConsoleModifiers&quot;></xref>値、1 つ以上の Shift、alt キーを押し、または ctrl キーを押し修飾子キーがコンソール キーと同時に押されたかどうか。"
  overload: System.Console.ReadKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Console.In*>プロパティは、コンソール以外のストリームからリダイレクトされます</xref:System.Console.In*>。"
  platform:
  - net462
- uid: System.Console.ReadKey(System.Boolean)
  id: ReadKey(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: ReadKey(Boolean)
  nameWithType: Console.ReadKey(Boolean)
  fullName: System.Console.ReadKey(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "ユーザーによって押された次の文字または関数のキーを取得します。 押されたキーは必要に応じて、コンソール ウィンドウに表示されます。"
  remarks: "<xref:System.Console.ReadKey%2A>メソッドは、待機、つまり、発行元のスレッド上のメモリ ブロック、<xref:System.Console.ReadKey%2A>メソッドを文字キーまたはファンクション キーが押下されるまで</xref:System.Console.ReadKey%2A></xref:System.Console.ReadKey%2A>。 1 つまたは複数の alt キーを押し、ctrl キーまたは shift キーを押し修飾子キーの組み合わせで、文字キーまたはファンクション キーを押すこともできます。 ただし、修飾子キーを押すと、それ自体では発生しません、<xref:System.Console.ReadKey%2A>を返すメソッド</xref:System.Console.ReadKey%2A>。       場合、`intercept`パラメーターは`true`、押されたキーが傍受および押されたキーが表示されていない、コンソール ウィンドウに表示されている以外の場合はそれ以外の場合、します。       アプリケーションによっては、使用する場合があります、<xref:System.Console.ReadKey%2A>メソッドと組み合わせて、<xref:System.Console.KeyAvailable%2A>プロパティ</xref:System.Console.KeyAvailable%2A></xref:System.Console.ReadKey%2A>。       <xref:System.Console.ReadKey%2A>メソッドを持つファイルに標準の入力がリダイレクトされる場合でも、キーボードから読み取り、<xref:System.Console.SetIn%2A>メソッド</xref:System.Console.SetIn%2A></xref:System.Console.ReadKey%2A>。"
  example:
  - "One of the most common uses of the <xref:System.Console.ReadKey%2A> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app. Note that, if the user presses any other key, it is not echoed to the console.  \n  \n [!code-vb[System.Console.ReadKey#2](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]\n [!code-cs[System.Console.ReadKey#2](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]  \n  \n The following example uses the ReadKey method to display information about the key pressed by a user without echoing that key to the console.  \n  \n [!code-cs[console.readkey2#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]\n [!code-cpp[console.readkey2#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]\n [!code-vb[console.readkey2#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]"
  syntax:
    content: public static ConsoleKeyInfo ReadKey (bool intercept);
    parameters:
    - id: intercept
      type: System.Boolean
      description: "押されたキーをコンソール ウィンドウに表示するかどうかを判断します。 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>押されたキーを表示しません。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.ConsoleKeyInfo
      description: "記述するオブジェクト、 <xref href=&quot;System.ConsoleKey&quot;> </xref>定数と Unicode 文字、存在する場合、対応する押されたコンソール キーにします。 <xref href=&quot;System.ConsoleKeyInfo&quot;> </xref>オブジェクトについても説明します、ビットごとの組み合わせで<xref href=&quot;System.ConsoleModifiers&quot;></xref>値、1 つ以上の Shift、alt キーを押し、または ctrl キーを押し修飾子キーがコンソール キーと同時に押されたかどうか。"
  overload: System.Console.ReadKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Console.In*>プロパティは、コンソール以外のストリームからリダイレクトされます</xref:System.Console.In*>。"
  platform:
  - net462
- uid: System.Console.ReadLine
  id: ReadLine
  parent: System.Console
  langs:
  - csharp
  name: ReadLine()
  nameWithType: Console.ReadLine()
  fullName: System.Console.ReadLine()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "標準入力ストリームから文字の次の行を読み取ります。"
  remarks: "ReadLine メソッドは、標準入力ストリームから行を読み取ります。 (行の定義、次のリストの後に、段落を参照してください)。つまり、:: 標準的な入力デバイスが、キーボード、ユーザーが押すまで ReadLine メソッド ブロックの場合、 **Enter**キー。           メソッドは、コンソールをクリアして、新しい情報を表示する前に、プログラム実行を一時停止するか、またはアプリケーションを終了する前に、Enter キーを押すようにユーザーに促す ReadLine の最も一般的なのいずれかを使用します。 次の例を示します。           [!code-cpp[System.Console.ReadLine#6](~/add/codesnippet/cpp/m-system.console.readline_1.cpp)][!code-vb[System.Console.ReadLine#6](~/add/codesnippet/visualbasic/m-system.console.readline_1.vb)][!code-cs[System.Console.ReadLine#6](~/add/codesnippet/csharp/m-system.console.readline_1.cs) ]の場合は、ファイルに標準の入力がリダイレクトされると、ReadLine メソッド、行のテキスト ファイルから読み取ります。             たとえば、次に示します ReadLine1.txt をという名前のテキスト ファイル:```          This is the first line.       This is the second line.       This is the third line.       This is the fourth line.          ```次の例では、ReadLine メソッドを使用して、ファイルからリダイレクトが入力内容の読み取り。 メソッドが戻るときに、読み取り操作が終了する`null`、読み取られる行が残っていないことを示します。           [!code-cs[System.Console.ReadLine#3](~/add/codesnippet/csharp/m-system.console.readline_2.cs)][!code-vb[System.Console.ReadLine#3](~/add/codesnippet/visualbasic/m-system.console.readline_2.vb) ] ReadLine1.exe を名前付き実行可能ファイルに例をコンパイルすた後には、実行できます構文を使用してコマンドラインから```       ReadLine1 < ReadLine1.txt       ```をファイルの内容を読み取り、それらをコンソールに表示します。             行が文字の後にキャリッジ リターン (16 進 0x000d)、ライン フィード (16 進 0x000a)、またはの値のシーケンスとして定義されている、<xref:System.Environment.NewLine%2A?displayProperty=fullName>プロパティ</xref:System.Environment.NewLine%2A?displayProperty=fullName>。 返される文字列に終端文字が含まれていません。 既定では、このメソッドは、256 文字の入力バッファーからの入力を読み取ります。 これに含まれているため、<xref:System.Environment.NewLine%2A?displayProperty=fullName>文字、このメソッドは最大 254 文字を含む行を読み取ることができます</xref:System.Environment.NewLine%2A?displayProperty=fullName>。 長い行を読み取りを呼び出して、<xref:System.Console.OpenStandardInput%28System.Int32%29>メソッド</xref:System.Console.OpenStandardInput%28System.Int32%29>。       ReadLine メソッドは同期的に実行します。 つまり、行が読み取られるか、ctrl キーを押しながら Z キーの組み合わせが押されるまでブロックします。 <xref:System.Console.In%2A>プロパティから返される、<xref:System.IO.TextReader>オブジェクトを表す標準入力ストリームとを両方同期<xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName>メソッドおよび非同期<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>メソッド</xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName></xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName></xref:System.IO.TextReader></xref:System.Console.In%2A>。 ただし、コンソールの標準入力ストリームとして使用すると、<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>非同期的にではなく同期的に処理を実行し、返します、`Task<String>`読み取り操作が完了した後のみです</xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>。       このメソッドがスローされた場合、<xref:System.OutOfMemoryException>例外、基になるリーダーの位置<xref:System.IO.Stream>はこのメソッドは、読み込むことが文字数による高度なオブジェクトしますが、既に内部 ReadLine バッファーに読み取られた文字は破棄されます</xref:System.IO.Stream></xref:System.OutOfMemoryException>。 既に読み取られた文字が回復することはできず、 <xref:System.IO.TextReader>。</xref:System.IO.TextReader>を再初期化してのみアクセスできるストリーム内のリーダーの位置は変更することはできませんので ストリーム内の最初の位置が不明か、ストリームがシークを基になるをサポートしていない場合<xref:System.IO.Stream>も再初期化する必要があります</xref:System.IO.Stream>。 このような状況を回避し、堅牢なコードを生成するには、する必要がありますを使用する、<xref:System.Console.KeyAvailable%2A>プロパティおよび<xref:System.Console.ReadKey%2A>読み取りが事前に割り当てられたバッファーの文字メソッドとストアです</xref:System.Console.ReadKey%2A></xref:System.Console.KeyAvailable%2A>。       このメソッドを返しますのかどうか、ctrl キーを押しながら Z キーを押すと、メソッドは、コンソールからの入力を読み取るときに、`null`です。 これにより、ループで ReadLine メソッドが呼び出されると、さらにキーボード入力をできないようにできます。 次の例では、このシナリオを示します。       [!code-cpp[System.Console.ReadLine#1](~/add/codesnippet/cpp/m-system.console.readline_3.cpp)][!code-cs[System.Console.ReadLine#1](~/add/codesnippet/csharp/m-system.console.readline_3.cs)][!code-vb[System.Console.ReadLine#1    ](~/add/codesnippet/visualbasic/m-system.console.readline_3.vb)]"
  example:
  - "The following example requires two command line arguments: the name of an existing text file, and the name of a file to write the output to. It opens the existing text file and redirects the standard input from the keyboard to that file. It also redirects the standard output from the console to the output file. It then uses the ReadLine method to read each line in the file, replaces every sequence of four spaces with a tab character, and uses the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method to write the result to the output file.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.readline_4.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.readline_4.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.readline_4.cs)]"
  syntax:
    content: public static string ReadLine ();
    parameters: []
    return:
      type: System.String
      description: "入力ストリームから文字の次の行または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>行がない使用可能な場合です。"
  overload: System.Console.ReadLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "返される文字列のバッファーを割り当てることが不足しているメモリがあります。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "文字の次の行の文字数がより大きい&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;です。"
  platform:
  - net462
- uid: System.Console.ResetColor
  id: ResetColor
  parent: System.Console
  langs:
  - csharp
  name: ResetColor()
  nameWithType: Console.ResetColor()
  fullName: System.Console.ResetColor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "既定値をフォア グラウンドとバック グラウンド コンソール色を設定します。"
  remarks: "前景色と背景色は、現在のプロセスを開始したときに存在していた色に復元されます。 詳細については、次を参照してください、<xref:System.Console.ForegroundColor%2A>と<xref:System.Console.BackgroundColor%2A>プロパティ。</xref:System.Console.BackgroundColor%2A> </xref:System.Console.ForegroundColor%2A> 。"
  example:
  - "The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the ResetColor method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/m-system.console.resetco_1.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/m-system.console.resetco_1.cs)]"
  syntax:
    content: public static void ResetColor ();
    parameters: []
  overload: System.Console.ResetColor*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.SetBufferSize(System.Int32,System.Int32)
  id: SetBufferSize(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetBufferSize(Int32,Int32)
  nameWithType: Console.SetBufferSize(Int32,Int32)
  fullName: System.Console.SetBufferSize(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "画面バッファー領域の幅と高さを指定された値に設定します。"
  remarks: ''
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, SetBufferSize, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setbuff_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setbuff_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setbuff_1.cs)]"
  syntax:
    content: public static void SetBufferSize (int width, int height);
    parameters:
    - id: width
      type: System.Int32
      description: "バッファー領域の幅は、列で測定されます。"
    - id: height
      type: System.Int32
      description: "行で指定されたバッファー領域の高さ。"
  overload: System.Console.SetBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>height</code>または<code>width</code>が&0; 未満です。       - または -<code>height</code>または<code>width</code>がより大きいまたは等しい&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;です。       -or-       <code>width</code> is less than <xref:System.Console.WindowLeft*> + <xref:System.Console.WindowWidth*>.       -or-       <code>height</code> is less than <xref:System.Console.WindowTop*> + <xref:System.Console.WindowHeight*>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)
  id: SetCursorPosition(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetCursorPosition(Int32,Int32)
  nameWithType: Console.SetCursorPosition(Int32,Int32)
  fullName: System.Console.SetCursorPosition(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "カーソルの位置を設定します。"
  remarks: "SetCursorPosition メソッドを使用すると、コンソール ウィンドウに次の書き込み操作の開始を指定できます。 指定したカーソル位置が、コンソール ウィンドウに現在表示されている領域の外側にある場合は、カーソルを表示するウィンドウの原点を自動的に変更します。       カーソルは自動的に毎回、文字は、コンソール ウィンドウに書き込まれます。 次の文字位置に移動します。 カーソルが、コンソール ウィンドウの下部にある右の文字位置にある場合は、次への書き込み操作時、コンソール ウィンドウをスクロール カーソルが表示されるようにします。 させずにスクロールして、使用するには、コンソール ウィンドウの下部右の文字位置に文字を書き込む場合、<xref:System.Console.MoveBufferArea%2A>文字をその位置に移動するメソッド</xref:System.Console.MoveBufferArea%2A>。"
  example:
  - "This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the SetCursorPosition and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.setcurs_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.setcurs_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.setcurs_1.vb)]"
  syntax:
    content: public static void SetCursorPosition (int left, int top);
    parameters:
    - id: left
      type: System.Int32
      description: "カーソルの列の位置。 列は左から右から開始する番号 0 です。"
    - id: top
      type: System.Int32
      description: "カーソルの行の位置。 行は、上から下の 0 から始まる番号が付けられます。"
  overload: System.Console.SetCursorPosition*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>left</code>または<code>top</code>が&0; 未満です。       - または -<code>left</code>がより大きいまたは等しい<xref:System.Console.BufferWidth*>です。       - または -<code>top</code>がより大きいまたは等しい<xref:System.Console.BufferHeight*>です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.SetError(System.IO.TextWriter)
  id: SetError(System.IO.TextWriter)
  parent: System.Console
  langs:
  - csharp
  name: SetError(TextWriter)
  nameWithType: Console.SetError(TextWriter)
  fullName: System.Console.SetError(TextWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "セット、<xref:System.Console.Error*>プロパティを指定した<xref:System.IO.TextWriter>オブジェクト</xref:System.IO.TextWriter></xref:System.Console.Error*>。"
  remarks: "既定では、<xref:System.Console.Error%2A>プロパティが標準エラー出力ストリームに設定します</xref:System.Console.Error%2A>。       A<xref:System.IO.StreamWriter>をカプセル化する、<xref:System.IO.FileStream>をファイルにエラー メッセージを送信に使用することができます</xref:System.IO.FileStream></xref:System.IO.StreamWriter>。"
  example:
  - "The following example shows how to redirect the standard error stream to a file.  \n  \n [!code-vb[System.Console.SetError#1](~/add/codesnippet/visualbasic/m-system.console.seterro_1.vb)]\n [!code-cs[System.Console.SetError#1](~/add/codesnippet/csharp/m-system.console.seterro_1.cs)]\n [!code-cpp[System.Console.SetError#1](~/add/codesnippet/cpp/m-system.console.seterro_1.cpp)]"
  syntax:
    content: public static void SetError (System.IO.TextWriter newError);
    parameters:
    - id: newError
      type: System.IO.TextWriter
      description: "新しい標準エラー出力であるストリーム。"
  overload: System.Console.SetError*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newError</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.Console.SetIn(System.IO.TextReader)
  id: SetIn(System.IO.TextReader)
  parent: System.Console
  langs:
  - csharp
  name: SetIn(TextReader)
  nameWithType: Console.SetIn(TextReader)
  fullName: System.Console.SetIn(TextReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "セット、<xref:System.Console.In*>プロパティを指定した<xref:System.IO.TextReader>オブジェクト</xref:System.IO.TextReader></xref:System.Console.In*>。"
  remarks: "既定では、<xref:System.Console.In%2A>プロパティが標準入力ストリームに設定します</xref:System.Console.In%2A>。       A<xref:System.IO.StreamReader>をカプセル化する、<xref:System.IO.FileStream>ファイルからの入力を受信するために使用できます</xref:System.IO.FileStream></xref:System.IO.StreamReader>。"
  example:
  - "The following example illustrates the use of the SetIn method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setin-s_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setin-s_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setin-s_1.cs)]"
  syntax:
    content: public static void SetIn (System.IO.TextReader newIn);
    parameters:
    - id: newIn
      type: System.IO.TextReader
      description: "新しい標準入力であるストリーム。"
  overload: System.Console.SetIn*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newIn</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.Console.SetOut(System.IO.TextWriter)
  id: SetOut(System.IO.TextWriter)
  parent: System.Console
  langs:
  - csharp
  name: SetOut(TextWriter)
  nameWithType: Console.SetOut(TextWriter)
  fullName: System.Console.SetOut(TextWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "セット、<xref:System.Console.Out*>プロパティを指定した<xref:System.IO.TextWriter>オブジェクト</xref:System.IO.TextWriter></xref:System.Console.Out*>。"
  remarks: "既定では、<xref:System.Console.Out%2A>プロパティが標準出力ストリームに設定します</xref:System.Console.Out%2A>。       A<xref:System.IO.StreamWriter>をカプセル化する、<xref:System.IO.FileStream>をファイルに出力を送信に使用することができます</xref:System.IO.FileStream></xref:System.IO.StreamWriter>。 例: [!code-cs [System.Console.SetOut#1](~/add/codesnippet/csharp/m-system.console.setout-_1.cs)][!code-vb[System.Console.SetOut#1](~/add/codesnippet/visualbasic/m-system.console.setout-_1.vb)][!code-cpp[System.Console.SetOut#1    ](~/add/codesnippet/cpp/m-system.console.setout-_1.cpp)]"
  example:
  - "The following example illustrates the use of the SetOut method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setout-_2.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setout-_2.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setout-_2.cs)]"
  syntax:
    content: public static void SetOut (System.IO.TextWriter newOut);
    parameters:
    - id: newOut
      type: System.IO.TextWriter
      description: "新しい標準出力ストリーム。"
  overload: System.Console.SetOut*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newOut</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)
  id: SetWindowPosition(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetWindowPosition(Int32,Int32)
  nameWithType: Console.SetWindowPosition(Int32,Int32)
  fullName: System.Console.SetWindowPosition(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "画面バッファーに対するコンソール ウィンドウの位置を設定します。"
  remarks: "オペレーティング システム ウィンドウ、コンソール ウィンドウを表示し、コンソール ウィンドウは、画面バッファーの一部を表示します。 SetWindowPosition メソッドでは、画面バッファーに対するコンソール ウィンドウの位置に影響しますが、デスクトップの基準としたオペレーティング システムのウィンドウの位置には影響しません。       コンソールとオペレーティング システムの windows、通常は互いに影響しません。 ただし、画面バッファーをコンソール ウィンドウの境界の現在表示できない場合、オペレーティング システムに自動的にスクロール バーを追加オペレーティング システムのウィンドウします。 その場合は、コンソール ウィンドウの位置に影響を与えるオペレーティング システムのウィンドウのスクロール バーを移動し、オペレーティング システムのウィンドウのスクロール バーの位置に影響 SetWindowPosition メソッドを使用して、コンソール ウィンドウを移動します。"
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the SetWindowPosition, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setwind_0_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setwind_0_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setwind_0_1.cs)]"
  syntax:
    content: public static void SetWindowPosition (int left, int top);
    parameters:
    - id: left
      type: System.Int32
      description: "コンソール ウィンドウの左上隅の列の位置。"
    - id: top
      type: System.Int32
      description: "コンソール ウィンドウの左上隅の行の位置。"
  overload: System.Console.SetWindowPosition*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>left</code>または<code>top</code>が&0; 未満です。       - または - <code>left</code>  + <xref:System.Console.WindowWidth*>がより大きい<xref:System.Console.BufferWidth*>です。       - または - <code>top</code>  + <xref:System.Console.WindowHeight*>がより大きい<xref:System.Console.BufferHeight*>です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.SetWindowSize(System.Int32,System.Int32)
  id: SetWindowSize(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetWindowSize(Int32,Int32)
  nameWithType: Console.SetWindowSize(Int32,Int32)
  fullName: System.Console.SetWindowSize(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定された値をコンソール ウィンドウの幅と高さを設定します。"
  remarks: ''
  example:
  - "This example demonstrates the SetWindowSize method, and the <xref:System.Console.WindowWidth%2A> and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key to be pressed. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed, the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/m-system.console.setwind_1_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/m-system.console.setwind_1_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/m-system.console.setwind_1_1.cs)]"
  syntax:
    content: public static void SetWindowSize (int width, int height);
    parameters:
    - id: width
      type: System.Int32
      description: "コンソール ウィンドウの幅は、列で測定されます。"
    - id: height
      type: System.Int32
      description: "行で指定されたコンソール ウィンドウの高さ。"
  overload: System.Console.SetWindowSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>width</code>または<code>height</code>が&0; 未満です。       - または - <code>width</code> plus<xref:System.Console.WindowLeft*>または<code>height</code>plus<xref:System.Console.WindowTop*>がより大きいまたは等しい&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;です。       - または -<code>width</code>または<code>height</code>が利用可能なウィンドウの最大幅または現在の画面解像度とコンソールのフォントの高さを超えています。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、この操作を実行するアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Title
  id: Title
  parent: System.Console
  langs:
  - csharp
  name: Title
  nameWithType: Console.Title
  fullName: System.Console.Title
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはコンソールのタイトル バーに表示するタイトルを設定します。"
  remarks: ''
  example:
  - "This example demonstrates the Title property. The example displays the current title of the operating system window, waits for a key press, then displays a new title.  \n  \n [!code-cs[console.title#1](~/add/codesnippet/csharp/p-system.console.title_1.cs)]\n [!code-cpp[console.title#1](~/add/codesnippet/cpp/p-system.console.title_1.cpp)]\n [!code-vb[console.title#1](~/add/codesnippet/visualbasic/p-system.console.title_1.vb)]"
  syntax:
    content: public static string Title { get; set; }
    return:
      type: System.String
      description: "コンソールのタイトル バーに表示される文字列。 タイトル文字列の最大長は、24500 文字です。"
  overload: System.Console.Title*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Get 操作では、取得したタイトルが 24500 文字を超えています。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定操作では、指定したタイトルが 24500 文字を超えています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "設定操作では、指定されたタイトルは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.TreatControlCAsInput
  id: TreatControlCAsInput
  parent: System.Console
  langs:
  - csharp
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
  fullName: System.Console.TreatControlCAsInput
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または設定を示す値かどうかの組み合わせ、 <xref href=&quot;System.ConsoleModifiers&quot;> </xref>修飾子キーと<xref href=&quot;System.ConsoleKey&quot;></xref>コンソール キー (Ctrl + C) は、通常の入力として、またはオペレーティング システムによって処理される割り込みとして扱われます。"
  remarks: "TreatControlCAsInput プロパティの値が場合`false`Ctrl + C キーを押すと、押されたキーが入力バッファーに格納されませんし、オペレーティング システムが現在実行中のプロセスを終了します。 これは既定値です。      > [!CAUTION] > に設定するために、このプロパティを注意深く使用`true`大幅このような影響を与えます。 ほとんどのユーザーは、コンソール アプリケーションを終了するには、Ctrl + C を期待します。 Ctrl + C の効果を無効にした場合、ユーザーはあまり知られていないキーの組み合わせであると、アプリケーションを終了する Ctrl + Break を使用することを忘れないでください。"
  example:
  - "The following example demonstrates the TreatControlCAsInput property.  \n  \n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/p-system.console.treatco_1.cs)]\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/p-system.console.treatco_1.cpp)]\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/p-system.console.treatco_1.vb)]"
  syntax:
    content: public static bool TreatControlCAsInput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Ctrl + C が通常の入力として扱う場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Console.TreatControlCAsInput*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "取得またはコンソール入力バッファーの入力モードを設定できません。"
  platform:
  - net462
- uid: System.Console.WindowHeight
  id: WindowHeight
  parent: System.Console
  langs:
  - csharp
  name: WindowHeight
  nameWithType: Console.WindowHeight
  fullName: System.Console.WindowHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはコンソール ウィンドウ領域の高さを設定します。"
  remarks: "いずれかの出力がリダイレクトされたときに、WindowHeight プロパティの値を設定しようとしていますスロー、<xref:System.ArgumentOutOfRangeException>または<xref:System.IO.IOException>例外です。</xref:System.IO.IOException> </xref:System.ArgumentOutOfRangeException> 。 例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<xref:System.Console.IsOutputRedirected%2A>プロパティから返される`false`</xref:System.Console.IsOutputRedirected%2A>。"
  example:
  - "This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the <xref:System.Console.WindowWidth%2A> and WindowHeight properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windowh_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windowh_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windowh_1.cs)]"
  syntax:
    content: public static int WindowHeight { get; set; }
    return:
      type: System.Int32
      description: "行で指定されたコンソール ウィンドウの高さ。"
  overload: System.Console.WindowHeight*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "値、 <> </> *> プロパティまたは WindowHeight プロパティの値が 0 未満です。      - または - の値の合計 WindowHeight プロパティの値、 <> </> *> プロパティがより大きいか等しい&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;です。       - または - の値、<xref:System.Console.WindowWidth*>プロパティまたは WindowHeight プロパティの値が、利用可能なウィンドウの最大幅または現在の画面解像度とコンソールのフォントの高さの値より大きい</xref:System.Console.WindowWidth*>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーの読み取りまたは書き込み情報。"
  platform:
  - net462
- uid: System.Console.WindowLeft
  id: WindowLeft
  parent: System.Console
  langs:
  - csharp
  name: WindowLeft
  nameWithType: Console.WindowLeft
  fullName: System.Console.WindowLeft
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または画面バッファーに対するコンソール ウィンドウ領域の左端の位置を設定します。"
  remarks: "コンソールより大きな四角形のバッファー領域に四角形のウィンドウを表します。 行の数、および水平方向に列の番号では、ウィンドウと、バッファーの両方が垂直方向に測定されます。 バッファー領域の大きさがによって定義された、<xref:System.Console.BufferHeight%2A>と<xref:System.Console.BufferWidth%2A>プロパティ</xref:System.Console.BufferWidth%2A></xref:System.Console.BufferHeight%2A>。 コンソールの領域の大きさがによって定義された、<xref:System.Console.WindowHeight%2A>と<xref:System.Console.WindowWidth%2A>プロパティ</xref:System.Console.WindowWidth%2A></xref:System.Console.WindowHeight%2A>。 WindowLeft プロパティは、バッファー領域の列は、コンソール ウィンドウの最初の列で表示を決定します。 WindowLeft プロパティの値の範囲は 0 ~ <xref:System.Console.BufferWidth%2A>- <xref:System.Console.WindowWidth%2A>.</xref:System.Console.WindowWidth%2A> </xref:System.Console.BufferWidth%2A> スロー <xref:System.ArgumentOutOfRangeException>。</xref:System.ArgumentOutOfRangeException>の範囲外の値に設定しようとしています。       コンソール ウィンドウを初めて開いたときに WindowLeft プロパティの既定値は、0 で、コンソールで表示される最初の列がバッファー領域の最初の列 (ゼロの位置にある列) に対応していることを示します。 コンソール ウィンドウとバッファー領域の両方の既定の幅は、80 列です。 これは、コンソール ウィンドウの幅の狭いが行われたか、バッファー領域を広く場合にのみ、WindowLeft プロパティを変更できることを意味します。       バッファー領域の幅は、コンソール ウィンドウの幅を超えている場合 WindowLeft プロパティの値が自動的に調整すること、ユーザーは、リレーションシップを定義ウィンドウのバッファー領域を水平スクロール バーを使用する場合に注意してください。       出力がリダイレクトされたスロー WindowLeft プロパティの値を設定すると、<xref:System.IO.IOException>例外です</xref:System.IO.IOException>。 例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<xref:System.Console.IsOutputRedirected%2A>プロパティから返される`false`</xref:System.Console.IsOutputRedirected%2A>。"
  example:
  - "The following example opens an 80-column console window and defines a buffer area that is 120 columns wide. It displays information on window and buffer size, and then waits for the user to press either the LEFT ARROW key or the RIGHT ARROW key. In the former case, it decrements the value of the WindowLeft property by one if the result is a legal value. In the latter case, it increases the value of the WindowLeft property by one if the result would be legal. Note that the example does not have to handle an <xref:System.ArgumentOutOfRangeException>, because it checks that the value to be assigned to the WindowLeft property is not negative and does not cause the sum of the WindowLeft and <xref:System.Console.WindowWidth%2A> properties to exceed the <xref:System.Console.BufferWidth%2A> property value.  \n  \n [!code-vb[System.Console.WindowLeft#1](~/add/codesnippet/visualbasic/p-system.console.windowl_1.vb)]\n [!code-cs[System.Console.WindowLeft#1](~/add/codesnippet/csharp/p-system.console.windowl_1.cs)]\n [!code-cpp[System.Console.WindowLeft#1](~/add/codesnippet/cpp/p-system.console.windowl_1.cpp)]"
  syntax:
    content: public static int WindowLeft { get; set; }
    return:
      type: System.Int32
      description: "左端のコンソール ウィンドウの位置は、列で測定されます。"
  overload: System.Console.WindowLeft*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定操作で割り当てられる値が&0; 未満です。       または、プラス WindowLeft、割り当ての結果として<> *> を超えます<> *> です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーの読み取りまたは書き込み情報。"
  platform:
  - net462
- uid: System.Console.WindowTop
  id: WindowTop
  parent: System.Console
  langs:
  - csharp
  name: WindowTop
  nameWithType: Console.WindowTop
  fullName: System.Console.WindowTop
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得または画面バッファーに対するコンソール ウィンドウ領域の上端の位置を設定します。"
  remarks: "コンソールより大きな四角形のバッファー領域に四角形のウィンドウを表します。 行の数、および水平方向に列の番号では、ウィンドウと、バッファーの両方が垂直方向に測定されます。 バッファー領域の大きさがによって定義された、<xref:System.Console.BufferHeight%2A>と<xref:System.Console.BufferWidth%2A>プロパティ</xref:System.Console.BufferWidth%2A></xref:System.Console.BufferHeight%2A>。 コンソールの領域の大きさがによって定義された、<xref:System.Console.WindowHeight%2A>と<xref:System.Console.WindowWidth%2A>プロパティ</xref:System.Console.WindowWidth%2A></xref:System.Console.WindowHeight%2A>。 WindowTop プロパティは、バッファー領域のどの行が、コンソール ウィンドウの最初の列に表示を決定します。 WindowTop プロパティの値の範囲は 0 ~ <xref:System.Console.BufferHeight%2A>- <xref:System.Console.WindowHeight%2A>.</xref:System.Console.WindowHeight%2A> </xref:System.Console.BufferHeight%2A> スロー <xref:System.ArgumentOutOfRangeException>。</xref:System.ArgumentOutOfRangeException>の範囲外の値に設定しようとしています。       出力がリダイレクトされたスロー WindowTop プロパティの値を設定すると、<xref:System.IO.IOException>例外です</xref:System.IO.IOException>。 例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<xref:System.Console.IsOutputRedirected%2A>プロパティから返される`false`</xref:System.Console.IsOutputRedirected%2A>。"
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, WindowTop, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/p-system.console.windowtop_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/p-system.console.windowtop_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/p-system.console.windowtop_1.cs)]"
  syntax:
    content: public static int WindowTop { get; set; }
    return:
      type: System.Int32
      description: "最上位のコンソール ウィンドウの位置は、行で測定されます。"
  overload: System.Console.WindowTop*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定操作で割り当てられる値が&0; 未満です。       または、プラス WindowTop、割り当ての結果として<> *> を超えます<> *> です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーの読み取りまたは書き込み情報。"
  platform:
  - net462
- uid: System.Console.WindowWidth
  id: WindowWidth
  parent: System.Console
  langs:
  - csharp
  name: WindowWidth
  nameWithType: Console.WindowWidth
  fullName: System.Console.WindowWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "取得またはコンソール ウィンドウの幅を設定します。"
  remarks: "いずれかの出力がリダイレクトされたときに、WindowWidth プロパティの値を設定しようとしていますスロー、<xref:System.ArgumentOutOfRangeException>または<xref:System.IO.IOException>例外です。</xref:System.IO.IOException> </xref:System.ArgumentOutOfRangeException> 。 例外を防ぐためには、場合にのみ、このプロパティの値を設定することができます、<xref:System.Console.IsOutputRedirected%2A>プロパティから返される`false`</xref:System.Console.IsOutputRedirected%2A>。"
  example:
  - "This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the WindowWidth and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windoww_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windoww_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windoww_1.cs)]"
  syntax:
    content: public static int WindowWidth { get; set; }
    return:
      type: System.Int32
      description: "コンソール ウィンドウの幅は、列で測定されます。"
  overload: System.Console.WindowWidth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "WindowWidth プロパティまたはの値の値、 <> </> *> プロパティが 0 未満です。      - または - の値、 <> </> *> プロパティの値の合計、 <> </> *> プロパティがより大きいか等しい&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;です。      - または - WindowWidth プロパティの値またはの値、 <> </> *> プロパティは、利用可能なウィンドウの最大幅または現在の画面解像度とコンソールのフォントの高さを超えています。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーの読み取りまたは書き込み情報。"
  platform:
  - net462
- uid: System.Console.Write(System.Boolean)
  id: Write(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: Write(Boolean)
  nameWithType: Console.Write(Boolean)
  fullName: System.Console.Write(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したブール値のテキスト表現を標準出力ストリームに書き込みます。"
  remarks: "テキスト表現`value`<xref:System.Boolean.ToString%2A?displayProperty=fullName>いずれか<xref:System.Boolean.TrueString?displayProperty=fullName>または<xref:System.Boolean.FalseString?displayProperty=fullName>.</xref:System.Boolean.FalseString?displayProperty=fullName></xref:System.Boolean.TrueString?displayProperty=fullName>を出力する</xref:System.Boolean.ToString%2A?displayProperty=fullName>を呼び出すことによって生成されます。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_8_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_8_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_8_1.cpp)]"
  syntax:
    content: public static void Write (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: "書き込む値。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.Char)
  id: Write(System.Char)
  parent: System.Console
  langs:
  - csharp
  name: Write(Char)
  nameWithType: Console.Write(Char)
  fullName: System.Console.Write(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した Unicode 文字値を標準出力ストリームに書き込みます。"
  remarks: ''
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_9_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_9_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_9_1.cpp)]"
  syntax:
    content: public static void Write (char value);
    parameters:
    - id: value
      type: System.Char
      description: "書き込む値。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.Char[])
  id: Write(System.Char[])
  parent: System.Console
  langs:
  - csharp
  name: Write(Char[])
  nameWithType: Console.Write(Char[])
  fullName: System.Console.Write(Char[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定された Unicode 文字の配列を標準出力ストリームに書き込みます。"
  syntax:
    content: public static void Write (char[] buffer);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 文字配列。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.Decimal)
  id: Write(System.Decimal)
  parent: System.Console
  langs:
  - csharp
  name: Write(Decimal)
  nameWithType: Console.Write(Decimal)
  fullName: System.Console.Write(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したテキスト表現を書き込みます<xref:System.Decimal>を標準出力ストリームの値</xref:System.Decimal>。"
  remarks: "テキスト表現`value` <xref:System.Decimal.ToString%2A?displayProperty=fullName>.</xref:System.Decimal.ToString%2A?displayProperty=fullName>を呼び出すことによって生成されます。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_12_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_12_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_12_1.cpp)]"
  syntax:
    content: public static void Write (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: "書き込む値。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.Double)
  id: Write(System.Double)
  parent: System.Console
  langs:
  - csharp
  name: Write(Double)
  nameWithType: Console.Write(Double)
  fullName: System.Console.Write(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した倍精度浮動小数点値のテキスト表現を標準出力ストリームに書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.Double.ToString%2A?displayProperty=fullName>メソッド</xref:System.Double.ToString%2A?displayProperty=fullName>。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_6_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_6_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_6_1.cpp)]"
  syntax:
    content: public static void Write (double value);
    parameters:
    - id: value
      type: System.Double
      description: "書き込む値。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.Int32)
  id: Write(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Write(Int32)
  nameWithType: Console.Write(Int32)
  fullName: System.Console.Write(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した 32 ビット符号付き整数値のテキスト表現を標準出力ストリームに書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.Int32.ToString%2A?displayProperty=fullName>メソッド</xref:System.Int32.ToString%2A?displayProperty=fullName>。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_10_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_10_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_10_1.cpp)]"
  syntax:
    content: public static void Write (int value);
    parameters:
    - id: value
      type: System.Int32
      description: "書き込む値。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.Int64)
  id: Write(System.Int64)
  parent: System.Console
  langs:
  - csharp
  name: Write(Int64)
  nameWithType: Console.Write(Int64)
  fullName: System.Console.Write(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した 64 ビット符号付き整数値のテキスト表現を標準出力ストリームに書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.Int64.ToString%2A?displayProperty=fullName>メソッド</xref:System.Int64.ToString%2A?displayProperty=fullName>。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_0_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_0_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_0_1.cpp)]"
  syntax:
    content: public static void Write (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "書き込む値。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.Object)
  id: Write(System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(Object)
  nameWithType: Console.Write(Object)
  fullName: System.Console.Write(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したオブジェクトのテキスト表現を標準出力ストリームに書き込みます。"
  remarks: "場合`value`は`null`、何が書き込まれ、例外はスローされません。 それ以外の場合、`ToString`メソッドの`value`は、文字列形式を生成するために呼び出され、結果の文字列が標準出力ストリームに書き込まれます。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_3_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_3_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_3_1.cpp)]"
  syntax:
    content: public static void Write (object value);
    parameters:
    - id: value
      type: System.Object
      description: "書き込む値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.Single)
  id: Write(System.Single)
  parent: System.Console
  langs:
  - csharp
  name: Write(Single)
  nameWithType: Console.Write(Single)
  fullName: System.Console.Write(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した単精度浮動小数点値のテキスト表現を標準出力ストリームに書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.Single.ToString%2A?displayProperty=fullName>メソッド</xref:System.Single.ToString%2A?displayProperty=fullName>。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_1_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_1_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_1_1.cpp)]"
  syntax:
    content: public static void Write (float value);
    parameters:
    - id: value
      type: System.Single
      description: "書き込む値。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.String)
  id: Write(System.String)
  parent: System.Console
  langs:
  - csharp
  name: Write(String)
  nameWithType: Console.Write(String)
  fullName: System.Console.Write(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した文字列値を標準出力ストリームに書き込みます。"
  remarks: "値が場合`null`、標準出力ストリームに何も書き込まれません。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_5_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_5_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_5_1.cpp)]"
  syntax:
    content: public static void Write (string value);
    parameters:
    - id: value
      type: System.String
      description: "書き込む値。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.UInt32)
  id: Write(System.UInt32)
  parent: System.Console
  langs:
  - csharp
  name: Write(UInt32)
  nameWithType: Console.Write(UInt32)
  fullName: System.Console.Write(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した 32 ビット符号なし整数値のテキスト表現を標準出力ストリームに書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.UInt32.ToString%2A?displayProperty=fullName>メソッド</xref:System.UInt32.ToString%2A?displayProperty=fullName>。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_7_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_7_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_7_1.cpp)]"
  syntax:
    content: public static void Write (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: "書き込む値。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.UInt64)
  id: Write(System.UInt64)
  parent: System.Console
  langs:
  - csharp
  name: Write(UInt64)
  nameWithType: Console.Write(UInt64)
  fullName: System.Console.Write(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した 64 ビット符号なし整数値のテキスト表現を標準出力ストリームに書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.UInt64.ToString%2A?displayProperty=fullName>メソッド</xref:System.UInt64.ToString%2A?displayProperty=fullName>。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_4_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_4_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_4_1.cpp)]"
  syntax:
    content: public static void Write (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: "書き込む値。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object)
  id: Write(System.String,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object)
  nameWithType: Console.Write(String,Object)
  fullName: System.Console.Write(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したオブジェクトのテキスト表現を指定した書式情報を使用して、標準出力ストリームに書き込みます。"
  remarks: "このメソッドを使用して、[複合書式指定機能](~/add/includes/ajax-current-ext-md.md)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。       `format`パラメーターは、0 または&1; つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。       書式指定項目の構文は`{`*インデックス*[`,`*配置*] [`:`*formatString*]`}`必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。       .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。      、などのメソッドでサポートされている複合書式指定機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[複合書式指定](../Topic/Composite%20Formatting.md)</xref:System.Console.WriteLine%2A></xref:System.Text.StringBuilder.AppendFormat%2A></xref:System.String.Format%2A>。      数値書式指定子の詳細についてを参照してください[標準の数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタム数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -についての日付と時刻の書式指定子の詳細についてを参照してください[標準の日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタムの日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -列挙型書式指定子の詳細についてを参照してください[列挙型書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      書式設定に関する詳細についてを参照してください[型の書式設定](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_2_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_2_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_1.vb)]  \n  \n The following example illustrates the use of the Write method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_2_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_2_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0);
    parameters:
    - id: format
      type: System.String
      description: "複合書式指定文字列 (「解説」を参照してください)。"
    - id: arg0
      type: System.Object
      description: "使用して書き込むオブジェクト`format`です。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "書式指定<code> format </code>が無効です。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object[])
  id: Write(System.String,System.Object[])
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object[])
  nameWithType: Console.Write(String,Object[])
  fullName: System.Console.Write(String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定されたオブジェクトの配列のテキスト形式を指定した書式情報を使用して、標準出力ストリームに書き込みます。"
  remarks: "このメソッドを使用して、[複合書式指定機能](~/add/includes/ajax-current-ext-md.md)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。       `format`パラメーターは、0 または&1; つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。       書式指定項目の構文は`{`*インデックス*[`,`*配置*] [`:`*formatString*]`}`必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。       .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。      、などのメソッドでサポートされている複合書式指定機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[複合書式指定](../Topic/Composite%20Formatting.md)</xref:System.Console.WriteLine%2A></xref:System.Text.StringBuilder.AppendFormat%2A></xref:System.String.Format%2A>。      数値書式指定子の詳細についてを参照してください[標準の数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタム数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -についての日付と時刻の書式指定子の詳細についてを参照してください[標準の日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタムの日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -列挙型書式指定子の詳細についてを参照してください[列挙型書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      書式設定に関する詳細についてを参照してください[型の書式設定](~/add/includes/ajax-current-ext-md.md)です。       `arg`パラメーターはパラメーターの配列。 引数は、配列、または&5; つまたは複数の項目の一覧としてメソッドに渡すことができます。 例では、メソッドの呼び出しの両方の形式を示します。"
  example:
  - "The following example defines a `Person` class with a number of properties that provide information about a person. Its `GetDescription` method returns an array that contains all of the property values except one. The example then uses the array returned by the  `GetDescription` method  to display the values of the Person object.  \n  \n [!code-cs[System.Console.Write#1](~/add/codesnippet/csharp/m-system.console.write-s_13_1.cs)]\n [!code-vb[System.Console.Write#1](~/add/codesnippet/visualbasic/m-system.console.write-s_13_1.vb)]  \n  \n Note that the example calls the Write method rather than the [WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method because it attempts to display the value of the `Person.Remarks` property on the same line. To do this, it examines the value of the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.WindowWidth%2A> properties to determine whether there is enough space for the remark to fit.  If there is, it displays the line. If not, it writes a line, indents three spaces, and displays the remark.  \n  \n The following example is identical to the first, except that it supplies a five-item list as the `arg` argument instead of a parameter array.  \n  \n [!code-vb[System.Console.Write#2](~/add/codesnippet/visualbasic/m-system.console.write-s_13_2.vb)]\n [!code-cs[System.Console.Write#2](~/add/codesnippet/csharp/m-system.console.write-s_13_2.cs)]"
  syntax:
    content: public static void Write (string format, object[] arg);
    parameters:
    - id: format
      type: System.String
      description: "複合書式指定文字列 (「解説」を参照してください)。"
    - id: arg
      type: System.Object[]
      description: "使用して書き込むオブジェクトの配列`format`です。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>or <code>arg</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "書式指定<code> format </code>が無効です。"
  platform:
  - net462
- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Write(Char[],Int32,Int32)
  nameWithType: Console.Write(Char[],Int32,Int32)
  fullName: System.Console.Write(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Unicode 文字の指定した部分配列を標準出力ストリームに書き込みます。"
  remarks: "このメソッドは書き込みます`count`位置から始まる文字`index`の`buffer`を標準出力ストリームにします。"
  syntax:
    content: public static void Write (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 文字の配列。"
    - id: index
      type: System.Int32
      description: "内の開始位置`buffer`です。"
    - id: count
      type: System.Int32
      description: "書き込む文字の数。"
  overload: System.Console.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>または<code>count</code>が&0; 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>plus<code>count</code>内ではない位置を指定する<code>buffer</code>です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object)
  nameWithType: Console.Write(String,Object,Object)
  fullName: System.Console.Write(String,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したオブジェクトのテキスト形式を指定した書式情報を使用して、標準出力ストリームに書き込みます。"
  remarks: "このメソッドを使用して、[複合書式指定機能](~/add/includes/ajax-current-ext-md.md)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。       `format`パラメーターは、0 または&1; つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。       書式指定項目の構文は`{`*インデックス*[`,`*配置*] [`:`*formatString*]`}`必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。       .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。      、などのメソッドでサポートされている複合書式指定機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[複合書式指定](../Topic/Composite%20Formatting.md)</xref:System.Console.WriteLine%2A></xref:System.Text.StringBuilder.AppendFormat%2A></xref:System.String.Format%2A>。      数値書式指定子の詳細についてを参照してください[標準の数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタム数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -についての日付と時刻の書式指定子の詳細についてを参照してください[標準の日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタムの日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -列挙型書式指定子の詳細についてを参照してください[列挙型書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      書式設定に関する詳細についてを参照してください[型の書式設定](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_14_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_14_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_1.vb)]  \n  \n The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_14_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_14_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1);
    parameters:
    - id: format
      type: System.String
      description: "複合書式指定文字列 (「解説」を参照してください)。"
    - id: arg0
      type: System.Object
      description: "最初のオブジェクトを使用して書き込む`format`です。"
    - id: arg1
      type: System.Object
      description: "2 番目のオブジェクトを使用して書き込む`format`です。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "書式指定<code> format </code>が無効です。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したオブジェクトのテキスト形式を指定した書式情報を使用して、標準出力ストリームに書き込みます。"
  remarks: "このメソッドを使用して、[複合書式指定機能](~/add/includes/ajax-current-ext-md.md)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。       `format`パラメーターは、0 または&1; つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。       書式指定項目の構文は`{`*インデックス*[`,`*配置*] [`:`*formatString*]`}`必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。       .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。      、などのメソッドでサポートされている複合書式指定機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[複合書式指定](../Topic/Composite%20Formatting.md)</xref:System.Console.WriteLine%2A></xref:System.Text.StringBuilder.AppendFormat%2A></xref:System.String.Format%2A>。      数値書式指定子の詳細についてを参照してください[標準の数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタム数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -についての日付と時刻の書式指定子の詳細についてを参照してください[標準の日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタムの日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -列挙型書式指定子の詳細についてを参照してください[列挙型書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      書式設定に関する詳細についてを参照してください[型の書式設定](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_11_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_11_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_1.vb)]  \n  \n The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_11_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_11_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1, object arg2);
    parameters:
    - id: format
      type: System.String
      description: "複合書式指定文字列 (「解説」を参照してください)。"
    - id: arg0
      type: System.Object
      description: "最初のオブジェクトを使用して書き込む`format`です。"
    - id: arg1
      type: System.Object
      description: "2 番目のオブジェクトを使用して書き込む`format`です。"
    - id: arg2
      type: System.Object
      description: "使用して書き込む&3; 番目のオブジェクト`format`です。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "書式指定<code> format </code>が無効です。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したオブジェクトと可変長パラメーター リストのテキスト形式を指定した書式情報を使用して、標準出力ストリームに書き込みます。"
  remarks: "> [!NOTE]\n>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.Write(String, Object\\[\\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.Write(String, Object\\[\\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \n  \n This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \n  \n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \n  \n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the use of variable parameters with the Write method. The method is called with a composite format string and five format items.  \n  \n [!code-cpp[System.Console.Write#3](~/add/codesnippet/cpp/04cf3884-a7cc-4915-bdb2-_1.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1, object arg2, object arg3);
    parameters:
    - id: format
      type: System.String
      description: "複合書式指定文字列 (「解説」を参照してください)。"
    - id: arg0
      type: System.Object
      description: "最初のオブジェクトを使用して書き込む`format`です。"
    - id: arg1
      type: System.Object
      description: "2 番目のオブジェクトを使用して書き込む`format`です。"
    - id: arg2
      type: System.Object
      description: "使用して書き込む&3; 番目のオブジェクト`format`です。"
    - id: arg3
      type: System.Object
      description: "使用して書き込む&4; 番目のオブジェクト`format`です。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "書式指定<code> format </code>が無効です。"
  platform:
  - net462
- uid: System.Console.WriteLine
  id: WriteLine
  parent: System.Console
  langs:
  - csharp
  name: WriteLine()
  nameWithType: Console.WriteLine()
  fullName: System.Console.WriteLine()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "現在の行終端記号を標準出力ストリームに書き込みます。"
  remarks: "既定の行終端記号がキャリッジ リターンとライン フィードの値の文字列 (C# の場合、&quot;\\r&quot;、または`vbCrLf`Visual Basic で)。 設定して、行終端記号を変更することができます、<xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>のプロパティ、<xref:System.Console.Out%2A>を別の文字列プロパティです</xref:System.Console.Out%2A></xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>。 この例では、具体的なを示します。"
  example:
  - "The example changes the line terminator from its default value of \"\\r\\n\" or `vbCrLf` to \"\\r\\n\\r\\n\" or `vbCrLf` + `vbCrLf`. It then calls the WriteLine and <xref:System.Console.WriteLine%28System.String%29> methods to display output to the console.  \n  \n [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeline_1.cpp)]\n [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeline_1.cs)]\n [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeline_1.vb)]"
  syntax:
    content: public static void WriteLine ();
    parameters: []
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Boolean)
  id: WriteLine(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Boolean)
  nameWithType: Console.WriteLine(Boolean)
  fullName: System.Console.WriteLine(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "現在の行終端記号を標準出力ストリームの後に、指定したブール値のテキスト表現を書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.Boolean.ToString%2A?displayProperty=fullName>メソッド</xref:System.Boolean.ToString%2A?displayProperty=fullName>。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example generates ten random integers and uses the WriteLine method to indicate whether they are even.  \n  \n [!code-cpp[System.Console.WriteLine#4](~/add/codesnippet/cpp/m-system.console.writeli_5_1.cpp)]\n [!code-cs[System.Console.WriteLine#4](~/add/codesnippet/csharp/m-system.console.writeli_5_1.cs)]\n [!code-vb[System.Console.WriteLine#4](~/add/codesnippet/visualbasic/m-system.console.writeli_5_1.vb)]"
  syntax:
    content: public static void WriteLine (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char)
  id: WriteLine(System.Char)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char)
  nameWithType: Console.WriteLine(Char)
  fullName: System.Console.WriteLine(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "現在の行終端記号を標準出力ストリームに値の後に、指定した Unicode 文字を書き込みます。"
  remarks: "行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the WriteLine method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_13_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_13_1.vb)]"
  syntax:
    content: public static void WriteLine (char value);
    parameters:
    - id: value
      type: System.Char
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char[])
  id: WriteLine(System.Char[])
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char[])
  nameWithType: Console.WriteLine(Char[])
  fullName: System.Console.WriteLine(Char[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定された Unicode 文字が、現在の行終端記号を標準出力ストリームに続くの配列を書き込みます。"
  remarks: "行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  syntax:
    content: public static void WriteLine (char[] buffer);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 文字配列。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Decimal)
  id: WriteLine(System.Decimal)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Decimal)
  nameWithType: Console.WriteLine(Decimal)
  fullName: System.Console.WriteLine(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したテキスト表現を書き込みます<xref:System.Decimal>値を現在の行終端記号を標準出力ストリームに続く</xref:System.Decimal>。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.Decimal.ToString%2A?displayProperty=fullName>メソッド</xref:System.Decimal.ToString%2A?displayProperty=fullName>。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_3_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_3_1.vb)]"
  syntax:
    content: public static void WriteLine (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Double)
  id: WriteLine(System.Double)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Double)
  nameWithType: Console.WriteLine(Double)
  fullName: System.Console.WriteLine(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した倍精度浮動小数点値の、現在の行終端記号を標準出力ストリームに続くテキスト表現を書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.Double.ToString%2A?displayProperty=fullName>メソッド</xref:System.Double.ToString%2A?displayProperty=fullName>。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_2_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_2_1.vb)]"
  syntax:
    content: public static void WriteLine (double value);
    parameters:
    - id: value
      type: System.Double
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Int32)
  id: WriteLine(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Int32)
  nameWithType: Console.WriteLine(Int32)
  fullName: System.Console.WriteLine(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した 32 ビット符号付き整数値の現在の行終端記号を標準出力ストリームに後のテキスト表現を書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.Int32.ToString%2A?displayProperty=fullName>メソッド</xref:System.Int32.ToString%2A?displayProperty=fullName>。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_1_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_1_1.vb)]"
  syntax:
    content: public static void WriteLine (int value);
    parameters:
    - id: value
      type: System.Int32
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Int64)
  id: WriteLine(System.Int64)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Int64)
  nameWithType: Console.WriteLine(Int64)
  fullName: System.Console.WriteLine(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した 64 ビット符号付き整数値の現在の行終端記号を標準出力ストリームに後のテキスト表現を書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.Int64.ToString%2A?displayProperty=fullName>メソッド</xref:System.Int64.ToString%2A?displayProperty=fullName>。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_10_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_10_1.vb)]"
  syntax:
    content: public static void WriteLine (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: Console.WriteLine(Object)
  fullName: System.Console.WriteLine(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "現在の行終端記号を標準出力ストリームの後に、指定したオブジェクトのテキスト表現を書き込みます。"
  remarks: "場合`value`は`null`、行終端記号だけが書き込まれます。 それ以外の場合、`ToString`メソッドの`value`は、文字列形式を生成するために呼び出され、結果の文字列が標準出力ストリームに書き込まれます。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example uses the WriteLine method to display each value in an object array to the console.  \n  \n [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]\n [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]\n [!code-cs[System.Console.WriteLine#3](~/add/codesnippet/csharp/m-system.console.writeli_6_1.cs)]\n [!code-vb[System.Console.WriteLine#3](~/add/codesnippet/visualbasic/m-system.console.writeli_6_1.vb)]"
  syntax:
    content: public static void WriteLine (object value);
    parameters:
    - id: value
      type: System.Object
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Single)
  id: WriteLine(System.Single)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Single)
  nameWithType: Console.WriteLine(Single)
  fullName: System.Console.WriteLine(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した単精度浮動小数点値の、現在の行終端記号を標準出力ストリームに続くテキスト表現を書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.Single.ToString%2A?displayProperty=fullName>メソッド</xref:System.Single.ToString%2A?displayProperty=fullName>。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_4_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_4_1.vb)]"
  syntax:
    content: public static void WriteLine (float value);
    parameters:
    - id: value
      type: System.Single
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: Console.WriteLine(String)
  fullName: System.Console.WriteLine(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "現在の行終端記号を標準出力ストリームの後に、指定した文字列値を書き込みます。"
  remarks: "値が場合`null`、行終端記号だけが標準出力ストリームに書き込まれます。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine>メソッド</xref:System.Console.WriteLine>。"
  example:
  - "The example changes the line terminator from its default value of \"\\r\\n\" or `vbCrLf` to \"\\r\\n\\r\\n\" or `vbCrLf` + `vbCrLf`. It then calls the <xref:System.Console.WriteLine> and WriteLine methods to display output to the console.  \n  \n [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeli_0_1.cpp)]\n [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeli_0_1.cs)]\n [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeli_0_1.vb)]"
  syntax:
    content: public static void WriteLine (string value);
    parameters:
    - id: value
      type: System.String
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.UInt32)
  id: WriteLine(System.UInt32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(UInt32)
  nameWithType: Console.WriteLine(UInt32)
  fullName: System.Console.WriteLine(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した 32 ビット符号なし整数値の現在の行終端記号を標準出力ストリームに後のテキスト表現を書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.UInt32.ToString%2A?displayProperty=fullName>メソッド</xref:System.UInt32.ToString%2A?displayProperty=fullName>。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_8_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_8_1.vb)]"
  syntax:
    content: public static void WriteLine (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.UInt64)
  id: WriteLine(System.UInt64)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(UInt64)
  nameWithType: Console.WriteLine(UInt64)
  fullName: System.Console.WriteLine(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した 64 ビット符号なし整数値の現在の行終端記号を標準出力ストリームに後のテキスト表現を書き込みます。"
  remarks: "テキスト表現`value`呼び出しによって生成された、<xref:System.UInt64.ToString%2A?displayProperty=fullName>メソッド</xref:System.UInt64.ToString%2A?displayProperty=fullName>。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_12_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_12_1.vb)]"
  syntax:
    content: public static void WriteLine (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: "書き込む値。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object)
  id: WriteLine(System.String,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object)
  nameWithType: Console.WriteLine(String,Object)
  fullName: System.Console.WriteLine(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した書式情報を使用して、標準出力ストリームに、現在行終端記号を指定したオブジェクトのテキスト表現を書き込みます。"
  remarks: "このメソッドを使用して、[複合書式指定機能](~/add/includes/ajax-current-ext-md.md)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。       `format`パラメーターは、0 または&1; つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。       書式指定項目の構文は`{`*インデックス*[`,`*配置*] [`:`*formatString*]`}`必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。       .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。      、などのメソッドでサポートされている複合書式指定機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[複合書式指定](../Topic/Composite%20Formatting.md)</xref:System.Console.WriteLine%2A></xref:System.Text.StringBuilder.AppendFormat%2A></xref:System.String.Format%2A>。      数値書式指定子の詳細についてを参照してください[標準の数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタム数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -についての日付と時刻の書式指定子の詳細についてを参照してください[標準の日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタムの日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -列挙型書式指定子の詳細についてを参照してください[列挙型書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      書式設定に関する詳細についてを参照してください[型の書式設定](~/add/includes/ajax-current-ext-md.md)です。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example calls the WriteLine method to display five randomly generated <xref:System.Boolean> values.  \n  \n [!code-vb[System.Console.WriteLine#6](~/add/codesnippet/visualbasic/m-system.console.writeli_9_1.vb)]\n [!code-cs[System.Console.WriteLine#6](~/add/codesnippet/csharp/m-system.console.writeli_9_1.cs)]  \n  \n The following example calls the WriteLine method to display the current date.   Note that the format item in the `format` argument uses the \"D\" [standard date and time format string](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) to display the date in the long date format of the current culture.  \n  \n [!code-vb[System.Console.WriteLine#7](~/add/codesnippet/visualbasic/m-system.console.writeli_9_2.vb)]\n [!code-cs[System.Console.WriteLine#7](~/add/codesnippet/csharp/m-system.console.writeli_9_2.cs)]"
  syntax:
    content: public static void WriteLine (string format, object arg0);
    parameters:
    - id: format
      type: System.String
      description: "複合書式指定文字列 (「解説」を参照してください)。"
    - id: arg0
      type: System.Object
      description: "使用して書き込むオブジェクト`format`です。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "書式指定<code> format </code>が無効です。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object[])
  id: WriteLine(System.String,System.Object[])
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object[])
  nameWithType: Console.WriteLine(String,Object[])
  fullName: System.Console.WriteLine(String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定された、現在の行終端記号を指定した書式情報を使用して、標準出力ストリームに続いてオブジェクトの配列のテキスト表現を書き込みます。"
  remarks: "このメソッドを使用して、[複合書式指定機能](~/add/includes/ajax-current-ext-md.md)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。       `format`パラメーターは、0 または&1; つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。       書式指定項目の構文は`{`*インデックス*[`,`*配置*] [`:`*formatString*]`}`必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。       .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。      、などのメソッドでサポートされている複合書式指定機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[複合書式指定](../Topic/Composite%20Formatting.md)</xref:System.Console.WriteLine%2A></xref:System.Text.StringBuilder.AppendFormat%2A></xref:System.String.Format%2A>。      数値書式指定子の詳細についてを参照してください[標準の数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタム数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -についての日付と時刻の書式指定子の詳細についてを参照してください[標準の日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタムの日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -列挙型書式指定子の詳細についてを参照してください[列挙型書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      書式設定に関する詳細についてを参照してください[型の書式設定](~/add/includes/ajax-current-ext-md.md)です。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_11_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_11_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_11_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object[] arg);
    parameters:
    - id: format
      type: System.String
      description: "複合書式指定文字列 (「解説」を参照してください)。"
    - id: arg
      type: System.Object[]
      description: "使用して書き込むオブジェクトの配列`format`です。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>or <code>arg</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "書式指定<code> format </code>が無効です。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  id: WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char[],Int32,Int32)
  nameWithType: Console.WriteLine(Char[],Int32,Int32)
  fullName: System.Console.WriteLine(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Unicode 文字が、現在の行終端記号を標準出力ストリームに続くの指定した部分配列を書き込みます。"
  remarks: "このメソッドは書き込みます`count`位置から始まる文字`index`の`buffer`を標準出力ストリームにします。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  syntax:
    content: public static void WriteLine (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 文字の配列。"
    - id: index
      type: System.Int32
      description: "内の開始位置`buffer`です。"
    - id: count
      type: System.Int32
      description: "書き込む文字の数。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>または<code>count</code>が&0; 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>plus<code>count</code>内ではない位置を指定する<code>buffer</code>です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した書式情報を使用して、標準出力ストリームに、現在行終端記号を指定したオブジェクトのテキスト表現を書き込みます。"
  remarks: "このメソッドを使用して、[複合書式指定機能](~/add/includes/ajax-current-ext-md.md)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。       `format`パラメーターは、0 または&1; つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。       書式指定項目の構文は`{`*インデックス*[`,`*配置*] [`:`*formatString*]`}`必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。       .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。      、などのメソッドでサポートされている複合書式指定機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[複合書式指定](../Topic/Composite%20Formatting.md)</xref:System.Console.WriteLine%2A></xref:System.Text.StringBuilder.AppendFormat%2A></xref:System.String.Format%2A>。      数値書式指定子の詳細についてを参照してください[標準の数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタム数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -についての日付と時刻の書式指定子の詳細についてを参照してください[標準の日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタムの日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -列挙型書式指定子の詳細についてを参照してください[列挙型書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      書式設定に関する詳細についてを参照してください[型の書式設定](~/add/includes/ajax-current-ext-md.md)です。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_7_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_7_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_7_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1);
    parameters:
    - id: format
      type: System.String
      description: "複合書式指定文字列 (「解説」を参照してください)。"
    - id: arg0
      type: System.Object
      description: "最初のオブジェクトを使用して書き込む`format`です。"
    - id: arg1
      type: System.Object
      description: "2 番目のオブジェクトを使用して書き込む`format`です。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "書式指定<code> format </code>が無効です。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した書式情報を使用して、標準出力ストリームに、現在行終端記号を指定したオブジェクトのテキスト表現を書き込みます。"
  remarks: "このメソッドを使用して、[複合書式指定機能](~/add/includes/ajax-current-ext-md.md)をテキスト形式のオブジェクトの値を変換し、その表現を文字列に埋め込むには、.NET Framework のです。 結果の文字列は、出力ストリームに書き込まれます。       `format`パラメーターは、0 または&1; つ以上のインデックス付きプレース ホルダー、このメソッドのパラメーター リスト内のオブジェクトに対応する書式指定項目と呼ばれる個以上のテキストを混在させます。 書式設定のプロセスでは、対応するオブジェクトの値のテキスト形式で各書式項目を置き換えます。       書式指定項目の構文は`{`*インデックス*[`,`*配置*] [`:`*formatString*]`}`必須インデックス オプションの長さ、フォーマットされたテキストの配置を指定して、オプションの対応する値のオブジェクトを制御する書式指定子文字の文字列の形式が、します。       .NET Framework では、次の書式設定のトピックで詳しく説明されている、広範な書式設定サポートを提供します。      、などのメソッドでサポートされている複合書式指定機能の詳細については<xref:System.String.Format%2A>、 <xref:System.Text.StringBuilder.AppendFormat%2A>、および一部のオーバー ロードの<xref:System.Console.WriteLine%2A>を参照してください[複合書式指定](../Topic/Composite%20Formatting.md)</xref:System.Console.WriteLine%2A></xref:System.Text.StringBuilder.AppendFormat%2A></xref:System.String.Format%2A>。      数値書式指定子の詳細についてを参照してください[標準の数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタム数値書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -についての日付と時刻の書式指定子の詳細についてを参照してください[標準の日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)と[カスタムの日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      -列挙型書式指定子の詳細についてを参照してください[列挙型書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。      書式設定に関する詳細についてを参照してください[型の書式設定](~/add/includes/ajax-current-ext-md.md)です。       行終端記号の詳細については、の「解説」セクションを参照してください、<xref:System.Console.WriteLine%2A>パラメーターをとらないメソッド。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/ecdde448-c375-4488-93b7-_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1, object arg2);
    parameters:
    - id: format
      type: System.String
      description: "複合書式指定文字列 (「解説」を参照してください)。"
    - id: arg0
      type: System.Object
      description: "最初のオブジェクトを使用して書き込む`format`です。"
    - id: arg1
      type: System.Object
      description: "2 番目のオブジェクトを使用して書き込む`format`です。"
    - id: arg2
      type: System.Object
      description: "使用して書き込む&3; 番目のオブジェクト`format`です。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "書式指定<code> format </code>が無効です。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したオブジェクトと、現在の行終端記号を指定した書式情報を使用して、標準出力ストリームに続けて、可変長パラメーター リストのテキスト表現を書き込みます。"
  remarks: "> [!NOTE]\n>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \n  \n This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \n  \n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \n  \n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."
  example:
  - "The following example illustrates the use of variable arguments with the WriteLine method. The method is called with a composite format string and five format items.  \n  \n [!code-cpp[System.Console.WriteLine#5](~/add/codesnippet/cpp/b0d255a7-f5e0-4135-8d9b-_1.cpp)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);
    parameters:
    - id: format
      type: System.String
      description: "複合書式指定文字列 (「解説」を参照してください)。"
    - id: arg0
      type: System.Object
      description: "最初のオブジェクトを使用して書き込む`format`です。"
    - id: arg1
      type: System.Object
      description: "2 番目のオブジェクトを使用して書き込む`format`です。"
    - id: arg2
      type: System.Object
      description: "使用して書き込む&3; 番目のオブジェクト`format`です。"
    - id: arg3
      type: System.Object
      description: "使用して書き込む&4; 番目のオブジェクト`format`です。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "書式指定<code> format </code>が無効です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Security.HostProtectionException
  parent: System.Security
  isExternal: false
  name: HostProtectionException
  nameWithType: HostProtectionException
  fullName: System.Security.HostProtectionException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.Console.BackgroundColor
  parent: System.Console
  isExternal: false
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
  fullName: System.Console.BackgroundColor
- uid: System.ConsoleColor
  parent: System
  isExternal: false
  name: ConsoleColor
  nameWithType: ConsoleColor
  fullName: System.ConsoleColor
- uid: System.Console.Beep
  parent: System.Console
  isExternal: false
  name: Beep()
  nameWithType: Console.Beep()
  fullName: System.Console.Beep()
- uid: System.Console.Beep(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: Beep(Int32,Int32)
  nameWithType: Console.Beep(Int32,Int32)
  fullName: System.Console.Beep(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Console.BufferHeight
  parent: System.Console
  isExternal: false
  name: BufferHeight
  nameWithType: Console.BufferHeight
  fullName: System.Console.BufferHeight
- uid: System.Console.BufferWidth
  parent: System.Console
  isExternal: false
  name: BufferWidth
  nameWithType: Console.BufferWidth
  fullName: System.Console.BufferWidth
- uid: System.Console.CancelKeyPress
  parent: System.Console
  isExternal: false
  name: CancelKeyPress
  nameWithType: Console.CancelKeyPress
  fullName: System.Console.CancelKeyPress
- uid: System.ConsoleCancelEventHandler
  parent: System
  isExternal: false
  name: ConsoleCancelEventHandler
  nameWithType: ConsoleCancelEventHandler
  fullName: System.ConsoleCancelEventHandler
- uid: System.Console.CapsLock
  parent: System.Console
  isExternal: false
  name: CapsLock
  nameWithType: Console.CapsLock
  fullName: System.Console.CapsLock
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Console.Clear
  parent: System.Console
  isExternal: false
  name: Clear()
  nameWithType: Console.Clear()
  fullName: System.Console.Clear()
- uid: System.Console.CursorLeft
  parent: System.Console
  isExternal: false
  name: CursorLeft
  nameWithType: Console.CursorLeft
  fullName: System.Console.CursorLeft
- uid: System.Console.CursorSize
  parent: System.Console
  isExternal: false
  name: CursorSize
  nameWithType: Console.CursorSize
  fullName: System.Console.CursorSize
- uid: System.Console.CursorTop
  parent: System.Console
  isExternal: false
  name: CursorTop
  nameWithType: Console.CursorTop
  fullName: System.Console.CursorTop
- uid: System.Console.CursorVisible
  parent: System.Console
  isExternal: false
  name: CursorVisible
  nameWithType: Console.CursorVisible
  fullName: System.Console.CursorVisible
- uid: System.Console.Error
  parent: System.Console
  isExternal: false
  name: Error
  nameWithType: Console.Error
  fullName: System.Console.Error
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Console.ForegroundColor
  parent: System.Console
  isExternal: false
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
  fullName: System.Console.ForegroundColor
- uid: System.Console.In
  parent: System.Console
  isExternal: false
  name: In
  nameWithType: Console.In
  fullName: System.Console.In
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Console.InputEncoding
  parent: System.Console
  isExternal: false
  name: InputEncoding
  nameWithType: Console.InputEncoding
  fullName: System.Console.InputEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Console.IsErrorRedirected
  parent: System.Console
  isExternal: false
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
  fullName: System.Console.IsErrorRedirected
- uid: System.Console.IsInputRedirected
  parent: System.Console
  isExternal: false
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
  fullName: System.Console.IsInputRedirected
- uid: System.Console.IsOutputRedirected
  parent: System.Console
  isExternal: false
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
  fullName: System.Console.IsOutputRedirected
- uid: System.Console.KeyAvailable
  parent: System.Console
  isExternal: false
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
  fullName: System.Console.KeyAvailable
- uid: System.Console.LargestWindowHeight
  parent: System.Console
  isExternal: false
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
  fullName: System.Console.LargestWindowHeight
- uid: System.Console.LargestWindowWidth
  parent: System.Console
  isExternal: false
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
  fullName: System.Console.LargestWindowWidth
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  parent: System.Console
  isExternal: false
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Console.NumberLock
  parent: System.Console
  isExternal: false
  name: NumberLock
  nameWithType: Console.NumberLock
  fullName: System.Console.NumberLock
- uid: System.Console.OpenStandardError
  parent: System.Console
  isExternal: false
  name: OpenStandardError()
  nameWithType: Console.OpenStandardError()
  fullName: System.Console.OpenStandardError()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Console.OpenStandardError(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardError(Int32)
  nameWithType: Console.OpenStandardError(Int32)
  fullName: System.Console.OpenStandardError(Int32)
- uid: System.Console.OpenStandardInput
  parent: System.Console
  isExternal: false
  name: OpenStandardInput()
  nameWithType: Console.OpenStandardInput()
  fullName: System.Console.OpenStandardInput()
- uid: System.Console.OpenStandardInput(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardInput(Int32)
  nameWithType: Console.OpenStandardInput(Int32)
  fullName: System.Console.OpenStandardInput(Int32)
- uid: System.Console.OpenStandardOutput
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput()
  nameWithType: Console.OpenStandardOutput()
  fullName: System.Console.OpenStandardOutput()
- uid: System.Console.OpenStandardOutput(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput(Int32)
  nameWithType: Console.OpenStandardOutput(Int32)
  fullName: System.Console.OpenStandardOutput(Int32)
- uid: System.Console.Out
  parent: System.Console
  isExternal: false
  name: Out
  nameWithType: Console.Out
  fullName: System.Console.Out
- uid: System.Console.OutputEncoding
  parent: System.Console
  isExternal: false
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
  fullName: System.Console.OutputEncoding
- uid: System.Console.Read
  parent: System.Console
  isExternal: false
  name: Read()
  nameWithType: Console.Read()
  fullName: System.Console.Read()
- uid: System.Console.ReadKey
  parent: System.Console
  isExternal: false
  name: ReadKey()
  nameWithType: Console.ReadKey()
  fullName: System.Console.ReadKey()
- uid: System.ConsoleKeyInfo
  parent: System
  isExternal: false
  name: ConsoleKeyInfo
  nameWithType: ConsoleKeyInfo
  fullName: System.ConsoleKeyInfo
- uid: System.Console.ReadKey(System.Boolean)
  parent: System.Console
  isExternal: false
  name: ReadKey(Boolean)
  nameWithType: Console.ReadKey(Boolean)
  fullName: System.Console.ReadKey(Boolean)
- uid: System.Console.ReadLine
  parent: System.Console
  isExternal: false
  name: ReadLine()
  nameWithType: Console.ReadLine()
  fullName: System.Console.ReadLine()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Console.ResetColor
  parent: System.Console
  isExternal: false
  name: ResetColor()
  nameWithType: Console.ResetColor()
  fullName: System.Console.ResetColor()
- uid: System.Console.SetBufferSize(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetBufferSize(Int32,Int32)
  nameWithType: Console.SetBufferSize(Int32,Int32)
  fullName: System.Console.SetBufferSize(Int32,Int32)
- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetCursorPosition(Int32,Int32)
  nameWithType: Console.SetCursorPosition(Int32,Int32)
  fullName: System.Console.SetCursorPosition(Int32,Int32)
- uid: System.Console.SetError(System.IO.TextWriter)
  parent: System.Console
  isExternal: false
  name: SetError(TextWriter)
  nameWithType: Console.SetError(TextWriter)
  fullName: System.Console.SetError(TextWriter)
- uid: System.Console.SetIn(System.IO.TextReader)
  parent: System.Console
  isExternal: false
  name: SetIn(TextReader)
  nameWithType: Console.SetIn(TextReader)
  fullName: System.Console.SetIn(TextReader)
- uid: System.Console.SetOut(System.IO.TextWriter)
  parent: System.Console
  isExternal: false
  name: SetOut(TextWriter)
  nameWithType: Console.SetOut(TextWriter)
  fullName: System.Console.SetOut(TextWriter)
- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetWindowPosition(Int32,Int32)
  nameWithType: Console.SetWindowPosition(Int32,Int32)
  fullName: System.Console.SetWindowPosition(Int32,Int32)
- uid: System.Console.SetWindowSize(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetWindowSize(Int32,Int32)
  nameWithType: Console.SetWindowSize(Int32,Int32)
  fullName: System.Console.SetWindowSize(Int32,Int32)
- uid: System.Console.Title
  parent: System.Console
  isExternal: false
  name: Title
  nameWithType: Console.Title
  fullName: System.Console.Title
- uid: System.Console.TreatControlCAsInput
  parent: System.Console
  isExternal: false
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
  fullName: System.Console.TreatControlCAsInput
- uid: System.Console.WindowHeight
  parent: System.Console
  isExternal: false
  name: WindowHeight
  nameWithType: Console.WindowHeight
  fullName: System.Console.WindowHeight
- uid: System.Console.WindowLeft
  parent: System.Console
  isExternal: false
  name: WindowLeft
  nameWithType: Console.WindowLeft
  fullName: System.Console.WindowLeft
- uid: System.Console.WindowTop
  parent: System.Console
  isExternal: false
  name: WindowTop
  nameWithType: Console.WindowTop
  fullName: System.Console.WindowTop
- uid: System.Console.WindowWidth
  parent: System.Console
  isExternal: false
  name: WindowWidth
  nameWithType: Console.WindowWidth
  fullName: System.Console.WindowWidth
- uid: System.Console.Write(System.Boolean)
  parent: System.Console
  isExternal: false
  name: Write(Boolean)
  nameWithType: Console.Write(Boolean)
  fullName: System.Console.Write(Boolean)
- uid: System.Console.Write(System.Char)
  parent: System.Console
  isExternal: false
  name: Write(Char)
  nameWithType: Console.Write(Char)
  fullName: System.Console.Write(Char)
- uid: System.Console.Write(System.Char[])
  parent: System.Console
  isExternal: false
  name: Write(Char[])
  nameWithType: Console.Write(Char[])
  fullName: System.Console.Write(Char[])
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Console.Write(System.Decimal)
  parent: System.Console
  isExternal: false
  name: Write(Decimal)
  nameWithType: Console.Write(Decimal)
  fullName: System.Console.Write(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Console.Write(System.Double)
  parent: System.Console
  isExternal: false
  name: Write(Double)
  nameWithType: Console.Write(Double)
  fullName: System.Console.Write(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Console.Write(System.Int32)
  parent: System.Console
  isExternal: false
  name: Write(Int32)
  nameWithType: Console.Write(Int32)
  fullName: System.Console.Write(Int32)
- uid: System.Console.Write(System.Int64)
  parent: System.Console
  isExternal: false
  name: Write(Int64)
  nameWithType: Console.Write(Int64)
  fullName: System.Console.Write(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Console.Write(System.Object)
  parent: System.Console
  isExternal: false
  name: Write(Object)
  nameWithType: Console.Write(Object)
  fullName: System.Console.Write(Object)
- uid: System.Console.Write(System.Single)
  parent: System.Console
  isExternal: false
  name: Write(Single)
  nameWithType: Console.Write(Single)
  fullName: System.Console.Write(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Console.Write(System.String)
  parent: System.Console
  isExternal: false
  name: Write(String)
  nameWithType: Console.Write(String)
  fullName: System.Console.Write(String)
- uid: System.Console.Write(System.UInt32)
  parent: System.Console
  isExternal: false
  name: Write(UInt32)
  nameWithType: Console.Write(UInt32)
  fullName: System.Console.Write(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Console.Write(System.UInt64)
  parent: System.Console
  isExternal: false
  name: Write(UInt64)
  nameWithType: Console.Write(UInt64)
  fullName: System.Console.Write(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Console.Write(System.String,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object)
  nameWithType: Console.Write(String,Object)
  fullName: System.Console.Write(String,Object)
- uid: System.Console.Write(System.String,System.Object[])
  parent: System.Console
  isExternal: false
  name: Write(String,Object[])
  nameWithType: Console.Write(String,Object[])
  fullName: System.Console.Write(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: Write(Char[],Int32,Int32)
  nameWithType: Console.Write(Char[],Int32,Int32)
  fullName: System.Console.Write(Char[],Int32,Int32)
- uid: System.Console.Write(System.String,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object)
  nameWithType: Console.Write(String,Object,Object)
  fullName: System.Console.Write(String,Object,Object)
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object)
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object,Object)
- uid: System.Console.WriteLine
  parent: System.Console
  isExternal: false
  name: WriteLine()
  nameWithType: Console.WriteLine()
  fullName: System.Console.WriteLine()
- uid: System.Console.WriteLine(System.Boolean)
  parent: System.Console
  isExternal: false
  name: WriteLine(Boolean)
  nameWithType: Console.WriteLine(Boolean)
  fullName: System.Console.WriteLine(Boolean)
- uid: System.Console.WriteLine(System.Char)
  parent: System.Console
  isExternal: false
  name: WriteLine(Char)
  nameWithType: Console.WriteLine(Char)
  fullName: System.Console.WriteLine(Char)
- uid: System.Console.WriteLine(System.Char[])
  parent: System.Console
  isExternal: false
  name: WriteLine(Char[])
  nameWithType: Console.WriteLine(Char[])
  fullName: System.Console.WriteLine(Char[])
- uid: System.Console.WriteLine(System.Decimal)
  parent: System.Console
  isExternal: false
  name: WriteLine(Decimal)
  nameWithType: Console.WriteLine(Decimal)
  fullName: System.Console.WriteLine(Decimal)
- uid: System.Console.WriteLine(System.Double)
  parent: System.Console
  isExternal: false
  name: WriteLine(Double)
  nameWithType: Console.WriteLine(Double)
  fullName: System.Console.WriteLine(Double)
- uid: System.Console.WriteLine(System.Int32)
  parent: System.Console
  isExternal: false
  name: WriteLine(Int32)
  nameWithType: Console.WriteLine(Int32)
  fullName: System.Console.WriteLine(Int32)
- uid: System.Console.WriteLine(System.Int64)
  parent: System.Console
  isExternal: false
  name: WriteLine(Int64)
  nameWithType: Console.WriteLine(Int64)
  fullName: System.Console.WriteLine(Int64)
- uid: System.Console.WriteLine(System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(Object)
  nameWithType: Console.WriteLine(Object)
  fullName: System.Console.WriteLine(Object)
- uid: System.Console.WriteLine(System.Single)
  parent: System.Console
  isExternal: false
  name: WriteLine(Single)
  nameWithType: Console.WriteLine(Single)
  fullName: System.Console.WriteLine(Single)
- uid: System.Console.WriteLine(System.String)
  parent: System.Console
  isExternal: false
  name: WriteLine(String)
  nameWithType: Console.WriteLine(String)
  fullName: System.Console.WriteLine(String)
- uid: System.Console.WriteLine(System.UInt32)
  parent: System.Console
  isExternal: false
  name: WriteLine(UInt32)
  nameWithType: Console.WriteLine(UInt32)
  fullName: System.Console.WriteLine(UInt32)
- uid: System.Console.WriteLine(System.UInt64)
  parent: System.Console
  isExternal: false
  name: WriteLine(UInt64)
  nameWithType: Console.WriteLine(UInt64)
  fullName: System.Console.WriteLine(UInt64)
- uid: System.Console.WriteLine(System.String,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object)
  nameWithType: Console.WriteLine(String,Object)
  fullName: System.Console.WriteLine(String,Object)
- uid: System.Console.WriteLine(System.String,System.Object[])
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object[])
  nameWithType: Console.WriteLine(String,Object[])
  fullName: System.Console.WriteLine(String,Object[])
- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: WriteLine(Char[],Int32,Int32)
  nameWithType: Console.WriteLine(Char[],Int32,Int32)
  fullName: System.Console.WriteLine(Char[],Int32,Int32)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object,Object)
- uid: System.Console.BackgroundColor*
  parent: System.Console
  isExternal: false
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
- uid: System.Console.Beep*
  parent: System.Console
  isExternal: false
  name: Beep
  nameWithType: Console.Beep
- uid: System.Console.BufferHeight*
  parent: System.Console
  isExternal: false
  name: BufferHeight
  nameWithType: Console.BufferHeight
- uid: System.Console.BufferWidth*
  parent: System.Console
  isExternal: false
  name: BufferWidth
  nameWithType: Console.BufferWidth
- uid: System.Console.CapsLock*
  parent: System.Console
  isExternal: false
  name: CapsLock
  nameWithType: Console.CapsLock
- uid: System.Console.Clear*
  parent: System.Console
  isExternal: false
  name: Clear
  nameWithType: Console.Clear
- uid: System.Console.CursorLeft*
  parent: System.Console
  isExternal: false
  name: CursorLeft
  nameWithType: Console.CursorLeft
- uid: System.Console.CursorSize*
  parent: System.Console
  isExternal: false
  name: CursorSize
  nameWithType: Console.CursorSize
- uid: System.Console.CursorTop*
  parent: System.Console
  isExternal: false
  name: CursorTop
  nameWithType: Console.CursorTop
- uid: System.Console.CursorVisible*
  parent: System.Console
  isExternal: false
  name: CursorVisible
  nameWithType: Console.CursorVisible
- uid: System.Console.Error*
  parent: System.Console
  isExternal: false
  name: Error
  nameWithType: Console.Error
- uid: System.Console.ForegroundColor*
  parent: System.Console
  isExternal: false
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
- uid: System.Console.In*
  parent: System.Console
  isExternal: false
  name: In
  nameWithType: Console.In
- uid: System.Console.InputEncoding*
  parent: System.Console
  isExternal: false
  name: InputEncoding
  nameWithType: Console.InputEncoding
- uid: System.Console.IsErrorRedirected*
  parent: System.Console
  isExternal: false
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
- uid: System.Console.IsInputRedirected*
  parent: System.Console
  isExternal: false
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
- uid: System.Console.IsOutputRedirected*
  parent: System.Console
  isExternal: false
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
- uid: System.Console.KeyAvailable*
  parent: System.Console
  isExternal: false
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
- uid: System.Console.LargestWindowHeight*
  parent: System.Console
  isExternal: false
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
- uid: System.Console.LargestWindowWidth*
  parent: System.Console
  isExternal: false
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
- uid: System.Console.MoveBufferArea*
  parent: System.Console
  isExternal: false
  name: MoveBufferArea
  nameWithType: Console.MoveBufferArea
- uid: System.Console.NumberLock*
  parent: System.Console
  isExternal: false
  name: NumberLock
  nameWithType: Console.NumberLock
- uid: System.Console.OpenStandardError*
  parent: System.Console
  isExternal: false
  name: OpenStandardError
  nameWithType: Console.OpenStandardError
- uid: System.Console.OpenStandardInput*
  parent: System.Console
  isExternal: false
  name: OpenStandardInput
  nameWithType: Console.OpenStandardInput
- uid: System.Console.OpenStandardOutput*
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput
  nameWithType: Console.OpenStandardOutput
- uid: System.Console.Out*
  parent: System.Console
  isExternal: false
  name: Out
  nameWithType: Console.Out
- uid: System.Console.OutputEncoding*
  parent: System.Console
  isExternal: false
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
- uid: System.Console.Read*
  parent: System.Console
  isExternal: false
  name: Read
  nameWithType: Console.Read
- uid: System.Console.ReadKey*
  parent: System.Console
  isExternal: false
  name: ReadKey
  nameWithType: Console.ReadKey
- uid: System.Console.ReadLine*
  parent: System.Console
  isExternal: false
  name: ReadLine
  nameWithType: Console.ReadLine
- uid: System.Console.ResetColor*
  parent: System.Console
  isExternal: false
  name: ResetColor
  nameWithType: Console.ResetColor
- uid: System.Console.SetBufferSize*
  parent: System.Console
  isExternal: false
  name: SetBufferSize
  nameWithType: Console.SetBufferSize
- uid: System.Console.SetCursorPosition*
  parent: System.Console
  isExternal: false
  name: SetCursorPosition
  nameWithType: Console.SetCursorPosition
- uid: System.Console.SetError*
  parent: System.Console
  isExternal: false
  name: SetError
  nameWithType: Console.SetError
- uid: System.Console.SetIn*
  parent: System.Console
  isExternal: false
  name: SetIn
  nameWithType: Console.SetIn
- uid: System.Console.SetOut*
  parent: System.Console
  isExternal: false
  name: SetOut
  nameWithType: Console.SetOut
- uid: System.Console.SetWindowPosition*
  parent: System.Console
  isExternal: false
  name: SetWindowPosition
  nameWithType: Console.SetWindowPosition
- uid: System.Console.SetWindowSize*
  parent: System.Console
  isExternal: false
  name: SetWindowSize
  nameWithType: Console.SetWindowSize
- uid: System.Console.Title*
  parent: System.Console
  isExternal: false
  name: Title
  nameWithType: Console.Title
- uid: System.Console.TreatControlCAsInput*
  parent: System.Console
  isExternal: false
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
- uid: System.Console.WindowHeight*
  parent: System.Console
  isExternal: false
  name: WindowHeight
  nameWithType: Console.WindowHeight
- uid: System.Console.WindowLeft*
  parent: System.Console
  isExternal: false
  name: WindowLeft
  nameWithType: Console.WindowLeft
- uid: System.Console.WindowTop*
  parent: System.Console
  isExternal: false
  name: WindowTop
  nameWithType: Console.WindowTop
- uid: System.Console.WindowWidth*
  parent: System.Console
  isExternal: false
  name: WindowWidth
  nameWithType: Console.WindowWidth
- uid: System.Console.Write*
  parent: System.Console
  isExternal: false
  name: Write
  nameWithType: Console.Write
- uid: System.Console.WriteLine*
  parent: System.Console
  isExternal: false
  name: WriteLine
  nameWithType: Console.WriteLine
