### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser
  id: TextFieldParser
  children:
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Close
  - Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  - Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize
  - Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  - Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  - Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd
  - Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])
  - Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])
  - Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  - Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  langs:
  - csharp
  name: TextFieldParser
  nameWithType: TextFieldParser
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser
  type: Class
  summary: "構造化テキストの解析中のメソッドとプロパティを提供するファイル。"
  remarks: "`TextFieldParser`オブジェクトがメソッドを提供し、構造化テキスト ファイルを解析するためのプロパティです。 持つテキスト ファイルの解析、`TextFieldParser`はテキスト ファイルを反復処理に似ています中に、`ReadFields`テキストのフィールドを抽出する方法は、文字列の分割に似ています。       `TextFieldParser`&2; 種類のファイルを解析することができます。 区切り記号または固定幅。 一部のプロパティなど`Delimiters`と`HasFieldsEnclosedInQuotes`のみ意味が区切られたファイルを使用する場合の中に、`FieldWidths`プロパティは、固定幅のファイルを扱うときにのみ意味します。       次の表に、関連するタスクの例については、`Microsoft.VisualBasic.FileIO.TextFieldParser`オブジェクト。      ||参照してください |  |--------|---------|  |区切られたテキスト ファイルからの読み取り |[する方法: コンマ区切りのテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |固定幅テキスト ファイルから読み取る |[する方法: 固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|  |複数の形式を持つテキスト ファイルから読み取る |[する方法: 複数の形式を持つテキスト ファイルからの読み取り](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example parses through a tab-delimited text file, `Bigfile`.  \n  \n [!code-vb[VbVbalrTextFieldParser#17](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._9_1.vb)]"
  syntax:
    content: 'public class TextFieldParser : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream)
  nameWithType: TextFieldParser.TextFieldParser(Stream)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しいインスタンスを初期化、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>クラスです。"
  remarks: "新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。"
  syntax:
    content: public TextFieldParser (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> 解析されるストリーム。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>を読み取ることができません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)
  id: '#ctor(System.IO.TextReader)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(TextReader)
  nameWithType: TextFieldParser.TextFieldParser(TextReader)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(TextReader)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しいインスタンスを初期化、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>クラスです。"
  remarks: "新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`reader`パラメーター。"
  syntax:
    content: public TextFieldParser (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref:System.IO.TextReader>.</xref:System.IO.TextReader> <xref:System.IO.TextReader>解析されるストリーム</xref:System.IO.TextReader>。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(String)
  nameWithType: TextFieldParser.TextFieldParser(String)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しいインスタンスを初期化、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>クラスです。"
  remarks: "新たに作成`TextFieldParser`によって指定されたファイルを解析するオブジェクト、`path`パラメーター。"
  syntax:
    content: public TextFieldParser (string path);
    parameters:
    - id: path
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 解析するファイルの完全なパスです。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>空の文字列です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.Text.Encoding)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しいインスタンスを初期化、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>クラスです。"
  remarks: "新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。      > [!CAUTION] > 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得するときに文字が解釈されないことし、例外をスローする可能性があります。"
  syntax:
    content: public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> 解析されるストリーム。"
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> エンコーディングする場合に使用する文字エンコーディングは、ファイルからは決まっていません。 既定値は<xref:System.Text.Encoding.UTF8*>。</xref:System.Text.Encoding.UTF8*>"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>or <code>defaultEncoding</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>を読み取ることができません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)
  id: '#ctor(System.String,System.Text.Encoding)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(String,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しいインスタンスを初期化、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>クラスです。"
  remarks: "新たに作成`TextFieldParser`によって指定されたファイルを解析するオブジェクト、`path`パラメーター。      > [!CAUTION] > 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得するときに文字が解釈されないことし、例外をスローする可能性があります。"
  syntax:
    content: public TextFieldParser (string path, System.Text.Encoding defaultEncoding);
    parameters:
    - id: path
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 解析するファイルの完全なパスです。"
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> エンコーディングする場合に使用する文字エンコーディングは、ファイルからは決まっていません。 既定値は<xref:System.Text.Encoding.UTF8*>。</xref:System.Text.Encoding.UTF8*>"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>空の文字列または<code>defaultEncoding</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しいインスタンスを初期化、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>クラスです。"
  remarks: "新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。       場合、`detectEncoding`パラメーターは`True`、このコンス トラクターは、ファイルまたはストリームの最初の&3; バイトで確認して、エンコーディングの検出を試みます。 自動的に認識し、utf-8、リトル エンディアン Unicode、ビッグ エンディアン Unicode テキスト ファイルが適切なバイト順マークで始まる場合。 それ以外の場合で指定されたエンコーディング`defaultEncoding`を使用します。      > [!CAUTION] > 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得するときに文字が解釈されないことし、例外をスローする可能性があります。"
  syntax:
    content: public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> 解析されるストリーム。"
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> エンコーディングする場合に使用する文字エンコーディングは、ファイルからは決まっていません。 既定値は<xref:System.Text.Encoding.UTF8*>。</xref:System.Text.Encoding.UTF8*>"
    - id: detectEncoding
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。 既定値は<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>or <code>defaultEncoding</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>を読み取ることができません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.String,System.Text.Encoding,System.Boolean)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(String,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding,Boolean)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しいインスタンスを初期化、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>クラスです。"
  remarks: "新たに作成`TextFieldParser`によって指定されたファイルを解析するオブジェクト、`path`パラメーター。       場合、`detectEncoding`パラメーターは`True`、このコンス トラクターは、ファイルまたはストリームの最初の&3; バイトで確認して、エンコーディングの検出を試みます。 自動的に認識し、utf-8、リトル エンディアン Unicode、ビッグ エンディアン Unicode テキスト ファイルが適切なバイト順マークで始まる場合。 それ以外の場合で指定されたエンコーディング`defaultEncoding`を使用します。      > [!CAUTION] > 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得するときに文字が解釈されないことし、例外をスローする可能性があります。"
  syntax:
    content: public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);
    parameters:
    - id: path
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 解析するファイルの完全なパスです。"
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> エンコーディングする場合に使用する文字エンコーディングは、ファイルからは決まっていません。 既定値は<xref:System.Text.Encoding.UTF8*>。</xref:System.Text.Encoding.UTF8*>"
    - id: detectEncoding
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。 既定値は<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>空の文字列または<code>defaultEncoding</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream,Encoding,Boolean,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しいインスタンスを初期化、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>クラスです。"
  remarks: "新たに作成`TextFieldParser`ファイルを解析またはストリームをオブジェクトとして表されます、`stream`パラメーター。       場合、`detectEncoding`パラメーターは`True`、このコンス トラクターは、ファイルまたはストリームの最初の&3; バイトで確認して、エンコーディングの検出を試みます。 自動的に認識し、utf-8、リトル エンディアン Unicode、ビッグ エンディアン Unicode テキスト ファイルが適切なバイト順マークで始まる場合。 それ以外の場合で指定されたエンコーディング`defaultEncoding`を使用します。      > [!CAUTION] > 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得するときに文字が解釈されないことし、例外をスローする可能性があります。"
  syntax:
    content: public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> 解析されるストリーム。"
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> エンコーディングする場合に使用する文字エンコーディングは、ファイルからは決まっていません。 既定値は<xref:System.Text.Encoding.UTF8*>。</xref:System.Text.Encoding.UTF8*>"
    - id: detectEncoding
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。 既定値は<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>です。"
    - id: leaveOpen
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. ままにするかどうかを示す`stream`開くときに、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>オブジェクトは閉じられます。 既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>or <code>defaultEncoding</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>を読み取ることができません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Close
  id: Close
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Close()
  nameWithType: TextFieldParser.Close()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Close()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "現在の終了<xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref>オブジェクト。"
  remarks: ''
  example:
  - "This example closes the `TextFieldParser``FileReader`.  \n  \n [!code-vb[VbVbalrTextFieldParser#14](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._27_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Close*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  id: CommentTokens
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: CommentTokens
  nameWithType: TextFieldParser.CommentTokens
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "コメント トークンを定義します。 コメント トークンである文字列を行の先頭に配置している場合があること示し行コメント、パーサーによって無視する必要があります。"
  remarks: "これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。       長さ&0; のコメント トークンは無視されます。"
  example:
  - "This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.  \n  \n [!code-vb[VbVbalrTextFieldParser#5](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._69_1.vb)]"
  syntax:
    content: public string[] CommentTokens { get; set; }
    return:
      type: System.String[]
      description: "トークンのすべてのコメントを含む文字列の配列、 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref>オブジェクト。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "コメント トークンには、空白文字が含まれています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  id: Delimiters
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Delimiters
  nameWithType: TextFieldParser.Delimiters
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "テキスト ファイルの区切り記号を定義します。"
  remarks: "このプロパティは意味のある場合にのみ、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>プロパティに設定されている`FieldType.Delimited`</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>。       テキスト ファイルで行うことができますの区切り記号を定義する、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>メソッド</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>。       次の表に、関連するタスクの例、`Delimiters`プロパティです。      ||参照してください |  |--------|---------|  |区切られたテキスト ファイルからの読み取り |[する方法: コンマ区切りのテキスト ファイルからの読み取り](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).  \n  \n [!code-vb[VbVbalrTextFieldParser#9](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._88_1.vb)]"
  syntax:
    content: public string[] Delimiters { get; set; }
    return:
      type: System.String[]
      description: "すべてのフィールドの区切り記号を含む文字列の配列、 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref>オブジェクト。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "改行文字、空の文字列に区切り記号の値が設定されているまたは<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose
  id: Dispose
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Dispose()
  nameWithType: TextFieldParser.Dispose()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "によって使用されるリソースを解放、 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref>オブジェクト。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: TextFieldParser.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "によって使用されるリソースを解放、 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref>オブジェクト。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "ブール値。 <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージの両方のリソースを解放します。<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  id: EndOfData
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: EndOfData
  nameWithType: TextFieldParser.EndOfData
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "返します<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>コメントではないが、現在のカーソル位置と、ファイルの末尾の間で行が空でない場合、します。"
  remarks: "このプロパティは、読み取られるデータの end を特定のファイルから読み取るときに使用できます。       次の表に、関連するタスクの例については、`EndOfData`プロパティです。      ||参照してください |  |--------|---------|  |区切り記号入りファイルから読み取る |[する方法: コンマ区切りのテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |固定幅ファイルからの読み取り |[する方法: 固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.  \n  \n [!code-vb[VbVbalrTextFieldParser#6](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._28_1.vb)]"
  syntax:
    content: public bool EndOfData { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>データを読み取る; がある場合それ以外の場合、 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  id: ErrorLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ErrorLine
  nameWithType: TextFieldParser.ErrorLine
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "最新の原因となったの行を返します<xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;></xref>例外。"
  remarks: "ない場合は<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外がスローされると、空の文字列が返されます</xref:Microsoft.VisualBasic.FileIO.MalformedLineException>。       <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>例外が発生した行の数を表示するプロパティを使用できます</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>。       次の表に、関連するタスクの例については、`ErrorLine`プロパティです。      ||参照してください |  |--------|---------|  |区切り記号入りファイルから読み取る |[する方法: コンマ区切りのテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |固定幅ファイルからの読み取り |[する方法: 固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.  \n  \n [!code-vb[VbVbalrTextFieldParser#1](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._53_1.vb)]"
  syntax:
    content: public string ErrorLine { get; }
    return:
      type: System.String
      description: "最新の原因となった行<xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;></xref>例外。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  id: ErrorLineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ErrorLineNumber
  nameWithType: TextFieldParser.ErrorLineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "最新の原因となった行の数を返します<xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;></xref>例外。"
  remarks: "ない場合は<xref:Microsoft.VisualBasic.FileIO.MalformedLineException>例外がスローされました、-1 が返されます</xref:Microsoft.VisualBasic.FileIO.MalformedLineException>。       <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A>例外が発生した行の数を表示するプロパティを使用できます</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A>。 行番号を調べるときに、空白行とコメントは無視されません。       次の表に、関連するタスクの例については、`ErrorLineNumber`プロパティです。      ||参照してください |  |--------|---------|  |区切り記号入りファイルから読み取る |[する方法: コンマ区切りのテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |固定幅ファイルからの読み取り |[する方法: 固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.  \n  \n [!code-vb[VbVbalrTextFieldParser#3](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._11_1.vb)]"
  syntax:
    content: public long ErrorLineNumber { get; }
    return:
      type: System.Int64
      description: "最新の原因となった行の番号<xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;></xref>例外。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  id: FieldWidths
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: FieldWidths
  nameWithType: TextFieldParser.FieldWidths
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "解析するテキスト ファイル内の各列の幅を表します。"
  remarks: "このプロパティは意味のある場合にのみ、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>プロパティに設定されている`FieldType.FixedWidth`</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>。 配列の最後のエントリが&0; に等しいまたはそれよりも小さい場合は、フィールドが可変幅であると見なされます。       <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>メソッドを使用してのフィールドの幅を設定することもできます</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>。       次の表に、関連するタスクの例については、`FieldWidths`プロパティです。      ||参照してください |  |--------|---------|  |固定幅テキスト ファイルから読み取る |[する方法: 固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width  \n  \n [!code-vb[VbVbalrTextFieldParser#16](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._92_1.vb)]"
  syntax:
    content: public int[] FieldWidths { get; set; }
    return:
      type: System.Int32[]
      description: "解析されたテキスト ファイル内の各列の幅を表す整数の配列。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "幅の値の配列の最後のエントリ以外の任意の場所では、0 に等しいまたはそれよりも小さいです。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize
  id: Finalize
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Finalize()
  nameWithType: TextFieldParser.Finalize()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "により、 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref>リソースを解放し、それがガベージ コレクションによって回収される前に、他のクリーンアップ操作を実行しようとするオブジェクト。"
  syntax:
    content: ~TextFieldParser ();
    parameters: []
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  id: HasFieldsEnclosedInQuotes
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: HasFieldsEnclosedInQuotes
  nameWithType: TextFieldParser.HasFieldsEnclosedInQuotes
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "区切り記号入りファイルの解析されたときに、フィールドを引用符で囲むかどうかを示します。"
  remarks: "これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。       プロパティが場合`True`パーサーは、フィールドが引用符で囲まれていることを想定しています (&quot;&quot;) 行の終わりを含めることができます。       たとえば、フィールドを引用符で囲まれた場合`abc, &quot;field2a,field2b&quot;, field3`し、このプロパティは`True`が引用符で囲まれたすべてのテキストが返されます。 この例と戻り`abc|field2a,field2b|field3`です。 このプロパティを設定`False`と次の例の戻り値、`abc|&quot;field2a|field2b&quot;|field3`です。"
  example:
  - "This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.  \n  \n [!code-vb[VbVbalrTextFieldParser#18](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public bool HasFieldsEnclosedInQuotes { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>フィールドが引用符で囲まれている場合それ以外の場合、 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  id: LineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: LineNumber
  nameWithType: TextFieldParser.LineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "現在の行番号を返します。 または、文字がないが、ストリームで使用可能な場合は-1 を返します。"
  remarks: "これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。       行番号を調べるときに、空白行とコメントは無視されません。"
  example:
  - "This example searches for the name \"Jones\" in the text file and reports what line(s) it occurs on.  \n  \n [!code-vb[VbVbalrTextFieldParser#11](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._89_1.vb)]"
  syntax:
    content: public long LineNumber { get; }
    return:
      type: System.Int64
      description: "現在の行番号。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)
  id: PeekChars(System.Int32)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: PeekChars(Int32)
  nameWithType: TextFieldParser.PeekChars(Int32)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "カーソルを進めずに指定された文字数を読み取ります。"
  remarks: "`numberOfChars`値には、行の文字の合計数より小さくする必要があります。 ない場合は、によって返される文字列`PeekChars`行の長さに切り詰められます。       空白行は無視されます。       行末の文字は返されません。       `PeekChars`解析メソッドは実行されません。 区切られたフィールド内の行末の文字は、行の実際の末尾として解釈されます。       次の表に、関連するタスクの例については、`PeekChars`メソッドです。      ||参照してください |  |--------|---------|  |解析する前に、フィールドの形式を決定 |[する方法: 複数の形式を持つテキスト ファイルからの読み取り](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.  \n  \n [!code-vb[VbVbalrTextFieldParser#8](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._48_1.vb)]"
  syntax:
    content: public string PeekChars (int numberOfChars);
    parameters:
    - id: numberOfChars
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Int32&quot; name=&quot;Int32&quot; href=&quot;&quot;></xref>. 読み取る文字の数です。 必須。"
    return:
      type: System.String
      description: "指定された文字数を表す文字列を読み取る。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>numberOfChars</code>0 未満です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields
  id: ReadFields
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ReadFields()
  nameWithType: TextFieldParser.ReadFields()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "現在の行のすべてのフィールドを読み取り、文字列の配列として返し、データを含む次の行にカーソルを進めます。"
  remarks: "複数の形式でテキスト ファイルを解析できるようにするために、`ReadFields`メソッドの値が調査`TextFieldType`、 `Delimiters`、および`FieldWidths`が指定されている場合が呼び出されるたび。 ユーザーが正しく構成する必要があります、`TextFieldType`と`FieldWidths`または`Delimiters`に応じてのプロパティです。 場合`TextFieldType`éý &quot; è `Delimited`、および`Delimiters`が設定されていない場合、または`TextFieldType`に設定`FixedWidth`と`FieldWidths`例外がスローされます。       場合`ReadFields`、空白行を検出したはスキップされ、次の空白行が返されます。       場合、`ReadFields`メソッドは、現在の行を解析できません、例外が発生し、次の行に移動しません。 これにより、もう一度のコマンドラインを解析しようとするアプリケーション。       次の表に、関連するタスクの例については、`ReadFields`メソッドです。      ||参照してください |  |--------|---------|  |区切り記号入りファイルから読み取る |[する方法: コンマ区切りのテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |固定幅ファイルからの読み取り |[する方法: 固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`. The example writes the fields to `Testfile.txt`.  \n  \n [!code-vb[VbVbalrTextFieldParser#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._242_1.vb)]"
  syntax:
    content: public string[] ReadFields ();
    parameters: []
    return:
      type: System.String[]
      description: "現在の行のフィールド値を含む文字列の配列。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields*
  exceptions:
  - type: Microsoft.VisualBasic.FileIO.MalformedLineException
    commentId: T:Microsoft.VisualBasic.FileIO.MalformedLineException
    description: "指定された形式を使用してフィールドを解析できません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine
  id: ReadLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ReadLine()
  nameWithType: TextFieldParser.ReadLine()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "文字列として現在の行を返し、次の行にカーソルを進めます。"
  remarks: "`ReadLine`解析メソッドは実行されません。 区切られたフィールド内の行末の文字は、行の実際の末尾として解釈されます。       `Nothing`ファイルの末尾に達したかどうかが返されます。"
  example:
  - "This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.  \n  \n [!code-vb[VbVbalrTextFieldParser#15](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._138_1.vb)]  \n  \n If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.  \n  \n This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line."
  syntax:
    content: public string ReadLine ();
    parameters: []
    return:
      type: System.String
      description: "ファイルまたはストリームから現在の行。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd
  id: ReadToEnd
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ReadToEnd()
  nameWithType: TextFieldParser.ReadToEnd()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "テキスト ファイルの残りの部分を読み書きを文字列として返します。"
  remarks: "これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。       項目詳細で、ファイルの末尾に達しているために、読み取ることがない場合`Nothing`が返されます。       `ReadToEnd`メソッドは、空白行とコメントは無視されません。"
  example:
  - "This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.  \n  \n [!code-vb[VbVbalrTextFieldParser#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._200_1.vb)]  \n  \n If `Testfile.txt` does not exist, it is created by the `WriteAllText` method."
  syntax:
    content: public string ReadToEnd ();
    parameters: []
    return:
      type: System.String
      description: "ファイルまたはストリームの残りのテキスト。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])
  id: SetDelimiters(System.String[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: SetDelimiters(String[])
  nameWithType: TextFieldParser.SetDelimiters(String[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "指定された値にリーダーの区切り記号を設定し、フィールドの種類を設定<xref uid=&quot;langword_csharp_Delimited&quot; name=&quot;Delimited&quot; href=&quot;&quot;></xref>です。"
  remarks: "既存の内容、`Delimiters`このメソッドが設定されている場合、プロパティはクリアされます。       このメソッドは、配列を作成せずに区切り記号を設定する方法を提供します。       次の表に、関連するタスクの例、`SetDelimiters`メソッドです。      ||参照してください |  |--------|---------|  |テキスト ファイルを解析 |[TextFieldParser オブジェクトによるテキスト ファイルの解析](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens a text field parser and defines the delimiter as `vbTab`.  \n  \n [!code-vb[VbVbalrTextFieldParser#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._239_1.vb)]  \n  \n Replace the path `C:\\logs\\test.log` with the path and name of the file you wish to parse."
  syntax:
    content: public void SetDelimiters (string[] delimiters);
    parameters:
    - id: delimiters
      type: System.String[]
      description: "型の配列<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "区切り記号は長さゼロです。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])
  id: SetFieldWidths(System.Int32[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: SetFieldWidths(Int32[])
  nameWithType: TextFieldParser.SetFieldWidths(Int32[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(Int32[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "指定された値にリーダーの区切り記号を設定します。"
  remarks: "既存の内容、`Delimiters`プロパティが設定されているときにクリアされます。       このメソッドは、配列を作成せずに区切り記号を設定する方法を提供します。       次の表に、関連するタスクの例として、`SetFieldWidths`メソッドです。      ||参照してください |  |--------|---------|  |テキスト ファイルを解析します |。[TextFieldParser オブジェクトによるテキスト ファイルの解析](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens a text-field parser and defines the field width as `5`.  \n  \n [!code-vb[VbVbalrTextFieldParser#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._56_1.vb)]  \n  \n Replace the path `C:\\logs\\test.log` with the path and name of the file you wish to parse.  \n  \n The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.  \n  \n [!code-vb[VbVbalrTextFieldParser#13](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._56_2.vb)]  \n  \n Replace the path `C:\\logs\\test.log` with the path and name of the file you wish to parse."
  syntax:
    content: public void SetFieldWidths (int[] fieldWidths);
    parameters:
    - id: fieldWidths
      type: System.Int32[]
      description: "Array of <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  id: TextFieldType
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldType
  nameWithType: TextFieldParser.TextFieldType
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "解析するファイルを区切るかどうか、または固定幅を示します。"
  remarks: "このプロパティの既定値は区切られます。       次の表に、関連するタスクの例については、`TextFieldType`プロパティです。      ||参照してください |  |--------|---------|  |区切られたテキスト ファイルからの読み取り |[する方法: コンマ区切りのテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |固定幅テキスト ファイルから読み取る |[する方法: 固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|  |複数の形式を持つテキスト ファイルから読み取る |[する方法: 複数の形式を持つテキスト ファイルからの読み取り](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.  \n  \n [!code-vb[VbVbalrTextFieldParser#19](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._100_1.vb)]  \n  \n This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.  \n  \n [!code-vb[VbVbalrTextFieldParser#20](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._100_2.vb)]"
  syntax:
    content: public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }
    return:
      type: Microsoft.VisualBasic.FileIO.FieldType
      description: "解析するファイルを区切るかどうか、または固定幅を示す TextFieldType 値。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  id: TrimWhiteSpace
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TrimWhiteSpace
  nameWithType: TextFieldParser.TrimWhiteSpace
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "フィールドの値から先頭および末尾の空白文字をトリムするかどうかを示します。"
  remarks: "このプロパティの既定値は`True`します。"
  example:
  - "This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.  \n  \n [!code-vb[VbVbalrTextFieldParser#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._12_1.vb)]"
  syntax:
    content: public bool TrimWhiteSpace { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>先頭および末尾の空白文字をトリムするフィールド値以外の場合それ以外の場合、 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.FileIO.MalformedLineException
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: MalformedLineException
  nameWithType: MalformedLineException
  fullName: Microsoft.VisualBasic.FileIO.MalformedLineException
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream)
  nameWithType: TextFieldParser.TextFieldParser(Stream)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(TextReader)
  nameWithType: TextFieldParser.TextFieldParser(TextReader)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(String)
  nameWithType: TextFieldParser.TextFieldParser(String)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(String,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(String,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding,Boolean)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream,Encoding,Boolean,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Close
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Close()
  nameWithType: TextFieldParser.Close()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Close()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: CommentTokens
  nameWithType: TextFieldParser.CommentTokens
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Delimiters
  nameWithType: TextFieldParser.Delimiters
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Dispose()
  nameWithType: TextFieldParser.Dispose()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TextFieldParser.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(Boolean)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: EndOfData
  nameWithType: TextFieldParser.EndOfData
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLine
  nameWithType: TextFieldParser.ErrorLine
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLineNumber
  nameWithType: TextFieldParser.ErrorLineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: FieldWidths
  nameWithType: TextFieldParser.FieldWidths
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Finalize()
  nameWithType: TextFieldParser.Finalize()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: HasFieldsEnclosedInQuotes
  nameWithType: TextFieldParser.HasFieldsEnclosedInQuotes
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: LineNumber
  nameWithType: TextFieldParser.LineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: PeekChars(Int32)
  nameWithType: TextFieldParser.PeekChars(Int32)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadFields()
  nameWithType: TextFieldParser.ReadFields()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadLine()
  nameWithType: TextFieldParser.ReadLine()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadToEnd()
  nameWithType: TextFieldParser.ReadToEnd()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetDelimiters(String[])
  nameWithType: TextFieldParser.SetDelimiters(String[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(String[])
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetFieldWidths(Int32[])
  nameWithType: TextFieldParser.SetFieldWidths(Int32[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(Int32[])
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldType
  nameWithType: TextFieldParser.TextFieldType
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
- uid: Microsoft.VisualBasic.FileIO.FieldType
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: FieldType
  nameWithType: FieldType
  fullName: Microsoft.VisualBasic.FileIO.FieldType
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TrimWhiteSpace
  nameWithType: TextFieldParser.TrimWhiteSpace
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser
  nameWithType: TextFieldParser.TextFieldParser
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Close*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Close
  nameWithType: TextFieldParser.Close
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: CommentTokens
  nameWithType: TextFieldParser.CommentTokens
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Delimiters
  nameWithType: TextFieldParser.Delimiters
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Dispose
  nameWithType: TextFieldParser.Dispose
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: EndOfData
  nameWithType: TextFieldParser.EndOfData
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLine
  nameWithType: TextFieldParser.ErrorLine
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLineNumber
  nameWithType: TextFieldParser.ErrorLineNumber
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: FieldWidths
  nameWithType: TextFieldParser.FieldWidths
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Finalize
  nameWithType: TextFieldParser.Finalize
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: HasFieldsEnclosedInQuotes
  nameWithType: TextFieldParser.HasFieldsEnclosedInQuotes
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: LineNumber
  nameWithType: TextFieldParser.LineNumber
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: PeekChars
  nameWithType: TextFieldParser.PeekChars
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadFields
  nameWithType: TextFieldParser.ReadFields
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadLine
  nameWithType: TextFieldParser.ReadLine
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadToEnd
  nameWithType: TextFieldParser.ReadToEnd
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetDelimiters
  nameWithType: TextFieldParser.SetDelimiters
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetFieldWidths
  nameWithType: TextFieldParser.SetFieldWidths
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldType
  nameWithType: TextFieldParser.TextFieldType
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TrimWhiteSpace
  nameWithType: TextFieldParser.TrimWhiteSpace
