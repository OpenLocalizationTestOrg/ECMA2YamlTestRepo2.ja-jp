### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA384
  id: HMACSHA384
  children:
  - System.Security.Cryptography.HMACSHA384.#ctor
  - System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])
  - System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  langs:
  - csharp
  name: HMACSHA384
  nameWithType: HMACSHA384
  fullName: System.Security.Cryptography.HMACSHA384
  type: Class
  summary: "計算するハッシュ ベース メッセージ認証コード (HMAC) を使用して、 <xref href=&quot;System.Security.Cryptography.SHA384&quot;> </xref>ハッシュ関数です。"
  remarks: "HMACSHA384 とは、sha-384 ハッシュ関数から作成され、としてするハッシュ ベース メッセージ認証コード (HMAC) を使用するキー付きハッシュ アルゴリズムの一種です。 HMAC プロセスでは、秘密キーと、メッセージ データを合成し、結果をハッシュします。 ハッシュ値は、秘密キーを使用してもう一度、混在し、2 番目の時間をハッシュします。 出力ハッシュは、長さは 384 ビットです。       HMAC を使用して、送信者と受信者に、共有シークレット キーを共有すると、安全でないチャネル経由で送信されたメッセージが改ざんされているかどうかを判断します。 送信者は、元のデータのハッシュ値を計算し、単一のメッセージとしてのハッシュ値と、元のデータの両方を送信します。 受信者は、受信メッセージのハッシュ値を再計算され、計算の HMAC に送信された HMAC が一致することを確認します。       元と計算されたハッシュ値が一致した場合、メッセージが認証されます。 これらが一致しない場合、データまたはハッシュ値のいずれかが変更されました。 Hmac は、改ざん、メッセージを変更し、正しいハッシュ値を再現する秘密キーの知識が必要なためのセキュリティを提供します。       HMACSHA384 では、すべてのキー サイズを確定し、長さは 384 ビットであるハッシュを生成します。"
  example:
  - "The following example shows how to sign a file by using the HMACSHA384 object, and then how to verify the file.  \n  \n [!code-cs[HMACSHA384#1](~/add/codesnippet/csharp/t-system.security.crypto_31_1.cs)]\n [!code-vb[HMACSHA384#1](~/add/codesnippet/visualbasic/t-system.security.crypto_31_1.vb)]\n [!code-cpp[HMACSHA384#1](~/add/codesnippet/cpp/t-system.security.crypto_31_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA384 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA384.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: HMACSHA384()
  nameWithType: HMACSHA384.HMACSHA384()
  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;> </xref>ランダムに生成されたキーを使用してクラスです。"
  remarks: "このコンス トラクターは、64 バイト、ランダムに生成されたキーを使用します。"
  syntax:
    content: public HMACSHA384 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA384.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: HMACSHA384(Byte[])
  nameWithType: HMACSHA384.HMACSHA384(Byte[])
  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;> </xref>クラスを指定したキー データを使用します。"
  remarks: ''
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA384> class.
  syntax:
    content: public HMACSHA384 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "用のシークレット キー <xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;> </xref>暗号化します。 キーは、任意の長さを指定できます。 ただし、推奨されるサイズは、128 バイトです。 (、Sha-384 を使用) がハッシュされてキーが 128 バイトより長い場合は、128 ビット キーを取得します。 長さが 128 バイト未満である場合は 128 バイトに埋められます。"
  overload: System.Security.Cryptography.HMACSHA384.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  id: ProduceLegacyHmacValues
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA384.ProduceLegacyHmacValues
  fullName: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "回避策を提供、[!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)]の実装、 <xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;> </xref>と整合性がありません、アルゴリズム、[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]アルゴリズムの実装です。"
  remarks: "有効にするブール値を ProduceLegacyHmacValues プロパティの目的は、[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]アプリケーションと対話[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]アプリケーションです。 このプロパティを設定すると`true`、<xref:System.Security.Cryptography.HMACSHA384>オブジェクトによって生成される値に一致する値を生成する、 [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]</xref:System.Security.Cryptography.HMACSHA384> 。 HMAC オブジェクトを作成した後は、このプロパティを&1; 回だけ設定する必要があります。 次の例で示すように、その後、キーを再設定する必要があります。      ```   public static void Test()       {       HMACSHA384 hmac = new HMACSHA384();       hmac.ProduceLegacyHmacValues = true;       hmac.Key = // ...Get the HMAC key.       // ...       // Use the HMAC algorithm.       // ...       }   ```"
  syntax:
    content: public bool ProduceLegacyHmacValues { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>有効にする[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]アプリケーションと対話[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]アプリケーション以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA384.#ctor
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HMACSHA384()
  nameWithType: HMACSHA384.HMACSHA384()
  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384()
- uid: System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HMACSHA384(Byte[])
  nameWithType: HMACSHA384.HMACSHA384(Byte[])
  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA384.ProduceLegacyHmacValues
  fullName: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMACSHA384.#ctor*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HMACSHA384
  nameWithType: HMACSHA384.HMACSHA384
- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA384.ProduceLegacyHmacValues
