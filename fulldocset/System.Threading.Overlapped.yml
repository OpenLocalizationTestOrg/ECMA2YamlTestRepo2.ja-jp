### YamlMime:ManagedReference
items:
- uid: System.Threading.Overlapped
  id: Overlapped
  children:
  - System.Threading.Overlapped.#ctor
  - System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
  - System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
  - System.Threading.Overlapped.AsyncResult
  - System.Threading.Overlapped.EventHandle
  - System.Threading.Overlapped.EventHandleIntPtr
  - System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
  - System.Threading.Overlapped.OffsetHigh
  - System.Threading.Overlapped.OffsetLow
  - System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
  - System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
  - System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
  - System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
  - System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  langs:
  - csharp
  name: Overlapped
  nameWithType: Overlapped
  fullName: System.Threading.Overlapped
  type: Class
  summary: "Win32 のマネージ表現を提供`OVERLAPPED`構造体、Overlapped インスタンスから情報を転送する方法など、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>構造体。"
  remarks: "<xref:System.Threading.Overlapped.Pack%2A>と<xref:System.Threading.Overlapped.UnsafePack%2A>メソッドに Overlapped オブジェクトからの情報の転送、<xref:System.Threading.NativeOverlapped>構造を渡すことができますの Win32 API 関数を非同期ファイル I/O</xref:System.Threading.NativeOverlapped> </xref:System.Threading.Overlapped.UnsafePack%2A> </xref:System.Threading.Overlapped.Pack%2A> 。 <xref:System.Threading.Overlapped.Unpack%2A>メソッドの転送については<xref:System.Threading.NativeOverlapped>、Overlapped クラスのインスタンスに構造</xref:System.Threading.NativeOverlapped>から</xref:System.Threading.Overlapped.Unpack%2A>       Overlapped オブジェクトのプロパティへの変更に関連付けられた影響を与える<xref:System.Threading.NativeOverlapped>構造体、またはその逆</xref:System.Threading.NativeOverlapped>。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class Overlapped
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.Overlapped.#ctor
  id: '#ctor'
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Overlapped()
  nameWithType: Overlapped.Overlapped()
  fullName: System.Threading.Overlapped.Overlapped()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Threading.Overlapped&quot;> </xref>クラスです。"
  syntax:
    content: public Overlapped ();
    parameters: []
  overload: System.Threading.Overlapped.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)'
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Overlapped(Int32,Int32,Int32,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Threading.Overlapped&quot;> </xref>指定したファイルを持つクラスの位置、I/O 操作が完了したら、通知されるイベントと操作の結果を返すためのインターフェイスを 32 ビット整数のハンドル。"
  remarks: "<xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName><xref:System.Threading.WaitHandle>クラス</xref:System.Threading.WaitHandle>から派生した任意のマネージ同期イベントのハンドルを取得するプロパティ</xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName>を使用します       実装<xref:System.IAsyncResult>、I/O 操作のステータス情報を提供します</xref:System.IAsyncResult>。 コンス トラクターに渡す、`ar`パラメーターと後でそれを取得し、<xref:System.Threading.Overlapped.AsyncResult%2A>プロパティ</xref:System.Threading.Overlapped.AsyncResult%2A>。 コールバック メソッドが指定されている場合、<xref:System.Threading.Overlapped.Pack%2A>または<xref:System.Threading.Overlapped.UnsafePack%2A>メソッド、コールバックを取得できます、<xref:System.IAsyncResult>をアンパックして、<xref:System.Threading.NativeOverlapped>構造体を受け取る</xref:System.Threading.NativeOverlapped></xref:System.IAsyncResult></xref:System.Threading.Overlapped.UnsafePack%2A></xref:System.Threading.Overlapped.Pack%2A>。"
  syntax:
    content: public Overlapped (int offsetLo, int offsetHi, int hEvent, IAsyncResult ar);
    parameters:
    - id: offsetLo
      type: System.Int32
      description: "転送を開始する位置を示すファイルの位置の下位ワード。"
    - id: offsetHi
      type: System.Int32
      description: "転送を開始する位置を示すファイルの位置の上位ワード。"
    - id: hEvent
      type: System.Int32
      description: "I/O 操作が完了したら通知されるイベント ハンドルです。"
    - id: ar
      type: System.IAsyncResult
      description: "実装するオブジェクト、<xref:System.IAsyncResult>インターフェイスし、I/O 操作のステータス情報を提供します</xref:System.IAsyncResult>。"
  overload: System.Threading.Overlapped.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
  id: '#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)'
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Threading.Overlapped&quot;> </xref>指定したファイルを持つクラスを配置、および操作の結果を返すためのインターフェイスを I/O 操作が完了したら、通知されるイベントを識別するハンドル。"
  remarks: "派生したマネージ同期オブジェクトのハンドルを取得する、<xref:System.Threading.WaitHandle>クラスを使用して、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName>を取得するプロパティ、<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>オブジェクト、およびを呼び出す、<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>メソッド</xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A></xref:Microsoft.Win32.SafeHandles.SafeWaitHandle></xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName></xref:System.Threading.WaitHandle>。       実装<xref:System.IAsyncResult>、I/O 操作のステータス情報を提供します</xref:System.IAsyncResult>。 コンス トラクターに渡す、`ar`パラメーターと後でそれを取得し、<xref:System.Threading.Overlapped.AsyncResult%2A>プロパティ</xref:System.Threading.Overlapped.AsyncResult%2A>。 コールバック メソッドが指定されている場合、<xref:System.Threading.Overlapped.Pack%2A>または<xref:System.Threading.Overlapped.UnsafePack%2A>メソッド、コールバックを取得できます、<xref:System.IAsyncResult>をアンパックして、<xref:System.Threading.NativeOverlapped>構造体を受け取る</xref:System.Threading.NativeOverlapped></xref:System.IAsyncResult></xref:System.Threading.Overlapped.UnsafePack%2A></xref:System.Threading.Overlapped.Pack%2A>。"
  syntax:
    content: public Overlapped (int offsetLo, int offsetHi, IntPtr hEvent, IAsyncResult ar);
    parameters:
    - id: offsetLo
      type: System.Int32
      description: "転送を開始する位置を示すファイルの位置の下位ワード。"
    - id: offsetHi
      type: System.Int32
      description: "転送を開始する位置を示すファイルの位置の上位ワード。"
    - id: hEvent
      type: System.IntPtr
      description: "I/O 操作が完了したら通知されるイベント ハンドルです。"
    - id: ar
      type: System.IAsyncResult
      description: "実装するオブジェクト、<xref:System.IAsyncResult>インターフェイスし、I/O 操作のステータス情報を提供します</xref:System.IAsyncResult>。"
  overload: System.Threading.Overlapped.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.AsyncResult
  id: AsyncResult
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: AsyncResult
  nameWithType: Overlapped.AsyncResult
  fullName: System.Threading.Overlapped.AsyncResult
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得または I/O 操作のステータス情報を提供するオブジェクトを設定します。"
  syntax:
    content: public IAsyncResult AsyncResult { get; set; }
    return:
      type: System.IAsyncResult
      description: "実装するオブジェクト、<xref:System.IAsyncResult>インターフェイス</xref:System.IAsyncResult>。"
  overload: System.Threading.Overlapped.AsyncResult*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.EventHandle
  id: EventHandle
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: EventHandle
  nameWithType: Overlapped.EventHandle
  fullName: System.Threading.Overlapped.EventHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得または I/O 操作が完了したら通知される同期イベントを 32 ビット整数のハンドルを設定します。"
  remarks: "このプロパティは、64 ビット プラットフォームでは使用できません。 使用して、<xref:System.Threading.Overlapped.EventHandleIntPtr%2A>プロパティ代わりにします</xref:System.Threading.Overlapped.EventHandleIntPtr%2A>。       <xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName><xref:System.Threading.WaitHandle>クラス</xref:System.Threading.WaitHandle>から派生した任意のマネージ同期イベントのハンドルを取得するプロパティ</xref:System.Threading.WaitHandle.Handle%2A?displayProperty=fullName>を使用します"
  syntax:
    content: public int EventHandle { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>同期イベントのハンドルを表す値</xref:System.Int32>。"
  overload: System.Threading.Overlapped.EventHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.EventHandleIntPtr
  id: EventHandleIntPtr
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: EventHandleIntPtr
  nameWithType: Overlapped.EventHandleIntPtr
  fullName: System.Threading.Overlapped.EventHandleIntPtr
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得または I/O 操作が完了したら通知される同期イベントをハンドルを設定します。"
  remarks: "派生したマネージ同期オブジェクトのハンドルを取得する、<xref:System.Threading.WaitHandle>クラスを使用して、<xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName>を取得するプロパティ、<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle>オブジェクト、およびを呼び出す、<xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>メソッド</xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A></xref:Microsoft.Win32.SafeHandles.SafeWaitHandle></xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName></xref:System.Threading.WaitHandle>。"
  syntax:
    content: public IntPtr EventHandleIntPtr { get; set; }
    return:
      type: System.IntPtr
      description: "<xref:System.IntPtr>イベントのハンドルを表すします</xref:System.IntPtr>。"
  overload: System.Threading.Overlapped.EventHandleIntPtr*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
  id: Free(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Free(NativeOverlapped*)
  nameWithType: Overlapped.Free(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Free(NativeOverlapped*)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "によって割り当てられたネイティブ オーバー ラップ構造に関連付けられたアンマネージ メモリの解放、<xref:System.Threading.Overlapped.Pack*>メソッド</xref:System.Threading.Overlapped.Pack*>。"
  remarks: "Free メソッドを正確に呼び出す必要がありますにすべて<xref:System.Threading.NativeOverlapped>から受信するポインター、<xref:System.Threading.Overlapped.Pack%2A>メソッド</xref:System.Threading.Overlapped.Pack%2A></xref:System.Threading.NativeOverlapped>。 Free メソッドが呼び出されない場合は、メモリがリークされます。 Free メソッドを複数回呼び出す場合は、メモリが破損します。"
  syntax:
    content: public static void Free (System.Threading.NativeOverlapped* nativeOverlappedPtr);
    parameters:
    - id: nativeOverlappedPtr
      type: System.Threading.NativeOverlapped*
      description: "ポインター、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>解放される構造です。"
  overload: System.Threading.Overlapped.Free*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>nativeOverlappedPtr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Threading.Overlapped.OffsetHigh
  id: OffsetHigh
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: OffsetHigh
  nameWithType: Overlapped.OffsetHigh
  fullName: System.Threading.Overlapped.OffsetHigh
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得または設定の転送を開始する位置を示すファイルの位置の上位ワード。 ファイルの位置は、ファイルの先頭からのバイト オフセットです。"
  syntax:
    content: public int OffsetHigh { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>ファイルの位置の上位ワードを表す値</xref:System.Int32>。"
  overload: System.Threading.Overlapped.OffsetHigh*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.OffsetLow
  id: OffsetLow
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: OffsetLow
  nameWithType: Overlapped.OffsetLow
  fullName: System.Threading.Overlapped.OffsetLow
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得または転送を開始する位置を示すファイルの位置の下位ワードを設定します。 ファイルの位置は、ファイルの先頭からのバイト オフセットです。"
  syntax:
    content: public int OffsetLow { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>ファイル位置の下位ワードを表す値</xref:System.Int32>。"
  overload: System.Threading.Overlapped.OffsetLow*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
  id: Pack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Pack(IOCompletionCallback)
  nameWithType: Overlapped.Pack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "パックの現在のインスタンスに、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>構造体、非同期 I/O 操作が完了したら呼び出されるデリゲートを指定します。"
  remarks: "このメソッドによって返されるアンマネージ ポインターは、オーバー ラップされた I/O 操作で、オペレーティング システムに渡すことができます。 <xref:System.Threading.NativeOverlapped>まで物理メモリ内構造は固定されて<xref:System.Threading.Overlapped.Unpack%2A>と呼びます</xref:System.Threading.Overlapped.Unpack%2A></xref:System.Threading.NativeOverlapped>。      > [!IMPORTANT] > 呼び出し元が、バッファーをピン留めできません。 アプリケーション ドメインがアンロードされた場合、ただし、ピン留めされたバッファーへのハンドルが破棄され、バッファーが解放され、解放されたアドレスへの書き込み I/O 操作。 この理由を使用する方がよい、<xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>メソッドのオーバー ロードをランタイムが、バッファーをピン留めします</xref:System.Threading.Overlapped.Pack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>。"
  syntax:
    content: public System.Threading.NativeOverlapped* Pack (System.Threading.IOCompletionCallback iocb);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref>非同期 I/O 操作が完了したときに呼び出されるコールバック メソッドを表すデリゲート。"
    return:
      type: System.Threading.NativeOverlapped*
      description: "アンマネージ ポインター、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>構造体。"
  overload: System.Threading.Overlapped.Pack*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "現在<xref href=&quot;System.Threading.Overlapped&quot;></xref>は既にパックされています。"
  platform:
  - net462
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
  id: Pack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Pack(IOCompletionCallback,Object)
  nameWithType: Overlapped.Pack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "パックの現在のインスタンスに、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>構造体、非同期 I/O 操作が完了すると呼び出されるデリゲートとバッファーとして機能するマネージ オブジェクトを指定します。"
  remarks: "このメソッドによって返されるアンマネージ ポインターは、オーバー ラップされた I/O 操作で、オペレーティング システムに渡すことができます。 <xref:System.Threading.NativeOverlapped>まで物理メモリ内構造は固定されて<xref:System.Threading.Overlapped.Unpack%2A>と呼びます</xref:System.Threading.Overlapped.Unpack%2A></xref:System.Threading.NativeOverlapped>。       指定されたバッファー、または`userData`非同期 I/O を実行するオペレーティング システムのアンマネージ関数に渡されたものと同じである必要があります。      > [!NOTE] > で指定されたバッファー、またはランタイムがピン留め`userData`I/O 操作の実行中です。 アプリケーション ドメインが読み込まれている場合、ランタイムは、I/O 操作が完了するまでの固定メモリを保持します。"
  syntax:
    content: public System.Threading.NativeOverlapped* Pack (System.Threading.IOCompletionCallback iocb, object userData);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref>非同期 I/O 操作が完了したときに呼び出されるコールバック メソッドを表すデリゲート。"
    - id: userData
      type: System.Object
      description: "オブジェクトまたは操作の入力または出力バッファーを表すオブジェクトの配列。 各オブジェクトは、バッファー、たとえばバイトの配列を表します。"
    return:
      type: System.Threading.NativeOverlapped*
      description: "アンマネージ ポインター、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>構造体。"
  overload: System.Threading.Overlapped.Pack*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "現在<xref href=&quot;System.Threading.Overlapped&quot;></xref>は既にパックされています。"
  platform:
  - net462
- uid: System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
  id: Unpack(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: Unpack(NativeOverlapped*)
  nameWithType: Overlapped.Unpack(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Unpack(NativeOverlapped*)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "指定したアンマネージ アンパック<xref href=&quot;System.Threading.NativeOverlapped&quot;></xref>構造体をマネージ<xref href=&quot;System.Threading.Overlapped&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Threading.NativeOverlapped>が呼び出されるまで、構造体は物理メモリから解放されず、<xref:System.Threading.Overlapped.Free%2A>メソッド</xref:System.Threading.Overlapped.Free%2A></xref:System.Threading.NativeOverlapped>。"
  syntax:
    content: public static System.Threading.Overlapped Unpack (System.Threading.NativeOverlapped* nativeOverlappedPtr);
    parameters:
    - id: nativeOverlappedPtr
      type: System.Threading.NativeOverlapped*
      description: "アンマネージ ポインター、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>構造体。"
    return:
      type: System.Threading.Overlapped
      description: "<xref href=&quot;System.Threading.Overlapped&quot;> </xref>ネイティブ構造体から開梱済みの情報を含むオブジェクトします。"
  overload: System.Threading.Overlapped.Unpack*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>nativeOverlappedPtr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
  id: UnsafePack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: UnsafePack(IOCompletionCallback)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "パックの現在のインスタンスに、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>非同期 I/O 操作の完了時に呼び出すデリゲートを指定する構造体。 呼び出し元のスタックを反映しません。"
  remarks: "このメソッドによって返されるアンマネージ ポインターは、オーバー ラップされた I/O 操作で、オペレーティング システムに渡すことができます。 <xref:System.Threading.NativeOverlapped>まで物理メモリ内構造は固定されて<xref:System.Threading.Overlapped.Unpack%2A>と呼びます</xref:System.Threading.Overlapped.Unpack%2A></xref:System.Threading.NativeOverlapped>。       呼び出し元は、バッファーをピン留めします。 アプリケーション ドメインがアンロードされた場合、ただし、ピン留めされたバッファーへのハンドルが破棄され、バッファーが解放され、解放されたアドレスへの書き込み I/O 操作。 この理由を使用する方がよい、<xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>メソッドのオーバー ロードをランタイムが、バッファーをピン留めします</xref:System.Threading.Overlapped.UnsafePack%28System.Threading.IOCompletionCallback%2CSystem.Object%29>。      > [!CAUTION] > を使用して、<xref:System.Threading.Overlapped.UnsafePack%2A>メソッドは、セキュリティ ホールを誤って開けません</xref:System.Threading.Overlapped.UnsafePack%2A>。 コード アクセス セキュリティは、スタックに基づいて、すべての呼び出し元のアクセス許可をその権限のチェックを行います。 <xref:System.Threading.Overlapped.UnsafePack%2A>メソッドはコール スタックを反映しません</xref:System.Threading.Overlapped.UnsafePack%2A>。 悪意のあるコードは、アクセス許可のチェックを避けるためにこれを利用できる可能性があります。"
  syntax:
    content: public System.Threading.NativeOverlapped* UnsafePack (System.Threading.IOCompletionCallback iocb);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref>非同期 I/O 操作が完了したときに呼び出されるコールバック メソッドを表すデリゲート。"
    return:
      type: System.Threading.NativeOverlapped*
      description: "アンマネージ ポインター、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>構造体。"
  overload: System.Threading.Overlapped.UnsafePack*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "現在<xref href=&quot;System.Threading.Overlapped&quot;></xref>は既にパックされています。"
  platform:
  - net462
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  id: UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  langs:
  - csharp
  name: UnsafePack(IOCompletionCallback,Object)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "パックの現在のインスタンスに、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>構造体、非同期 I/O 操作が完了し、マネージ オブジェクトに呼び出すデリゲートは、バッファーとして機能を指定します。 呼び出し元のスタックを反映しません。"
  remarks: "このメソッドによって返されるアンマネージ ポインターは、オーバー ラップされた I/O 操作で、オペレーティング システムに渡すことができます。 <xref:System.Threading.NativeOverlapped>まで物理メモリ内構造は固定されて<xref:System.Threading.Overlapped.Unpack%2A>と呼びます</xref:System.Threading.Overlapped.Unpack%2A></xref:System.Threading.NativeOverlapped>。       指定されたバッファー、または`userData`非同期 I/O を実行するオペレーティング システムのアンマネージ関数に渡されたものと同じである必要があります。       指定されたバッファー、またはランタイムがピン留め`userData`I/O 操作の実行中です。 アプリケーション ドメインが読み込まれている場合、ランタイムは、I/O 操作が完了するまでの固定メモリを保持します。      > [!CAUTION] > を使用して、UnsafePack メソッドが誤って開きますセキュリティ ホールをします。 コード アクセス セキュリティは、スタックに基づいて、すべての呼び出し元のアクセス許可をその権限のチェックを行います。 UnsafePack メソッドでは、呼び出し元のスタックは反映しません。 悪意のあるコードは、アクセス許可のチェックを避けるためにこれを利用できる可能性があります。"
  syntax:
    content: public System.Threading.NativeOverlapped* UnsafePack (System.Threading.IOCompletionCallback iocb, object userData);
    parameters:
    - id: iocb
      type: System.Threading.IOCompletionCallback
      description: "<xref href=&quot;System.Threading.IOCompletionCallback&quot;> </xref>非同期 I/O 操作が完了したときに呼び出されるコールバック メソッドを表すデリゲート。"
    - id: userData
      type: System.Object
      description: "オブジェクトまたは操作の入力または出力バッファーを表すオブジェクトの配列。 各オブジェクトは、バッファー、たとえばバイトの配列を表します。"
    return:
      type: System.Threading.NativeOverlapped*
      description: "アンマネージ ポインター、 <xref href=&quot;System.Threading.NativeOverlapped&quot;> </xref>構造体。"
  overload: System.Threading.Overlapped.UnsafePack*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "現在<xref href=&quot;System.Threading.Overlapped&quot;></xref>既にパックします。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Threading.Overlapped.#ctor
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped()
  nameWithType: Overlapped.Overlapped()
  fullName: System.Threading.Overlapped.Overlapped()
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.Int32,System.IAsyncResult)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped(Int32,Int32,Int32,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,Int32,IAsyncResult)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Overlapped.#ctor(System.Int32,System.Int32,System.IntPtr,System.IAsyncResult)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  nameWithType: Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
  fullName: System.Threading.Overlapped.Overlapped(Int32,Int32,IntPtr,IAsyncResult)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Threading.Overlapped.AsyncResult
  parent: System.Threading.Overlapped
  isExternal: false
  name: AsyncResult
  nameWithType: Overlapped.AsyncResult
  fullName: System.Threading.Overlapped.AsyncResult
- uid: System.Threading.Overlapped.EventHandle
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandle
  nameWithType: Overlapped.EventHandle
  fullName: System.Threading.Overlapped.EventHandle
- uid: System.Threading.Overlapped.EventHandleIntPtr
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandleIntPtr
  nameWithType: Overlapped.EventHandleIntPtr
  fullName: System.Threading.Overlapped.EventHandleIntPtr
- uid: System.Threading.Overlapped.Free(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Free(NativeOverlapped*)
  nameWithType: Overlapped.Free(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Free(NativeOverlapped*)
- uid: System.Threading.Overlapped.OffsetHigh
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetHigh
  nameWithType: Overlapped.OffsetHigh
  fullName: System.Threading.Overlapped.OffsetHigh
- uid: System.Threading.Overlapped.OffsetLow
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetLow
  nameWithType: Overlapped.OffsetLow
  fullName: System.Threading.Overlapped.OffsetLow
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Pack(IOCompletionCallback)
  nameWithType: Overlapped.Pack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback)
- uid: System.Threading.IOCompletionCallback
  parent: System.Threading
  isExternal: false
  name: IOCompletionCallback
  nameWithType: IOCompletionCallback
  fullName: System.Threading.IOCompletionCallback
- uid: System.Threading.Overlapped.Pack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Pack(IOCompletionCallback,Object)
  nameWithType: Overlapped.Pack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.Pack(IOCompletionCallback,Object)
- uid: System.Threading.Overlapped.Unpack(System.Threading.NativeOverlapped*)
  parent: System.Threading.Overlapped
  isExternal: false
  name: Unpack(NativeOverlapped*)
  nameWithType: Overlapped.Unpack(NativeOverlapped*)
  fullName: System.Threading.Overlapped.Unpack(NativeOverlapped*)
- uid: System.Threading.Overlapped
  parent: System.Threading
  isExternal: false
  name: Overlapped
  nameWithType: Overlapped
  fullName: System.Threading.Overlapped
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback)
  parent: System.Threading.Overlapped
  isExternal: false
  name: UnsafePack(IOCompletionCallback)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback)
- uid: System.Threading.Overlapped.UnsafePack(System.Threading.IOCompletionCallback,System.Object)
  parent: System.Threading.Overlapped
  isExternal: false
  name: UnsafePack(IOCompletionCallback,Object)
  nameWithType: Overlapped.UnsafePack(IOCompletionCallback,Object)
  fullName: System.Threading.Overlapped.UnsafePack(IOCompletionCallback,Object)
- uid: System.Threading.Overlapped.#ctor*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Overlapped
  nameWithType: Overlapped.Overlapped
- uid: System.Threading.Overlapped.AsyncResult*
  parent: System.Threading.Overlapped
  isExternal: false
  name: AsyncResult
  nameWithType: Overlapped.AsyncResult
- uid: System.Threading.Overlapped.EventHandle*
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandle
  nameWithType: Overlapped.EventHandle
- uid: System.Threading.Overlapped.EventHandleIntPtr*
  parent: System.Threading.Overlapped
  isExternal: false
  name: EventHandleIntPtr
  nameWithType: Overlapped.EventHandleIntPtr
- uid: System.Threading.Overlapped.Free*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Free
  nameWithType: Overlapped.Free
- uid: System.Threading.Overlapped.OffsetHigh*
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetHigh
  nameWithType: Overlapped.OffsetHigh
- uid: System.Threading.Overlapped.OffsetLow*
  parent: System.Threading.Overlapped
  isExternal: false
  name: OffsetLow
  nameWithType: Overlapped.OffsetLow
- uid: System.Threading.Overlapped.Pack*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Pack
  nameWithType: Overlapped.Pack
- uid: System.Threading.Overlapped.Unpack*
  parent: System.Threading.Overlapped
  isExternal: false
  name: Unpack
  nameWithType: Overlapped.Unpack
- uid: System.Threading.Overlapped.UnsafePack*
  parent: System.Threading.Overlapped
  isExternal: false
  name: UnsafePack
  nameWithType: Overlapped.UnsafePack
