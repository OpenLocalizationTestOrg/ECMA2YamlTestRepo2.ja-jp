### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RSACryptoServiceProvider
  id: RSACryptoServiceProvider
  children:
  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor
  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)
  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo
  - System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)
  - System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  - System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])
  - System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)
  - System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)
  - System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  - System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])
  - System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  - System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)
  - System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  - System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)
  - System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm
  - System.Security.Cryptography.RSACryptoServiceProvider.KeySize
  - System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp
  - System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly
  - System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm
  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)
  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)
  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)
  - System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  - System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  - System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore
  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])
  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  langs:
  - csharp
  name: RSACryptoServiceProvider
  nameWithType: RSACryptoServiceProvider
  fullName: System.Security.Cryptography.RSACryptoServiceProvider
  type: Class
  summary: "非対称暗号化と復号化の実装を使用して実行、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>暗号化サービス プロバイダー (CSP) によって提供されるアルゴリズム。 このクラスは継承できません。"
  remarks: "This is the default implementation of <xref:System.Security.Cryptography.RSA>.  \n  \n The RSACryptoServiceProvider supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.  \n  \n Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the RSACryptoServiceProvider instance. Windows CSPs enable keys sizes of 384 to 16384 bits for Windows versions prior to [!INCLUDE[win81](~/add/includes/ajax-current-ext-md.md)], and key sizes of 512 to 16384 bits for [!INCLUDE[win81](~/add/includes/ajax-current-ext-md.md)]. For more information, see [CryptGenKey](http://msdn.microsoft.com/library/aa379941\\(v=vs.85\\).aspx) function in the Windows documentation.  \n  \n## Interoperation with the Microsoft Cryptographic API (CAPI)  \n Unlike the RSA implementation in unmanaged CAPI, the RSACryptoServiceProvider class reverses the order of an encrypted array of bytes after encryption and before decryption.  By default, data encrypted by the RSACryptoServiceProvider class cannot be decrypted by the CAPI `CryptDecrypt` function and data encrypted by the CAPI `CryptEncrypt` method cannot be decrypted by the RSACryptoServiceProvider class.  \n  \n If you do not compensate for the reverse ordering when interoperating between APIs, the RSACryptoServiceProvider class throws a <xref:System.Security.Cryptography.CryptographicException>.  \n  \n To interoperate with CAPI, you must manually reverse the order of encrypted bytes before the encrypted data interoperates with another API.  You can easily reverse the order of a managed byte array by calling the <xref:System.Array.Reverse%2A?displayProperty=fullName> method."
  example:
  - "The following code example uses the RSACryptoServiceProvider class to encrypt a string into an array of bytes and then decrypt the bytes back into a string.  \n  \n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider#1](~/add/codesnippet/cpp/t-system.security.crypto_34_1.cpp)]\n [!code-cs[System.Security.Cryptography.RSACryptoServiceProvider#1](~/add/codesnippet/csharp/t-system.security.crypto_34_1.cs)]\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider#1](~/add/codesnippet/visualbasic/t-system.security.crypto_34_1.vb)]  \n  \n The following code example exports the key information created using the RSACryptoServiceProvider into an <xref:System.Security.Cryptography.RSAParameters> object.  \n  \n [!code-cs[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/add/codesnippet/csharp/t-system.security.crypto_34_2.cs)]\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/add/codesnippet/cpp/t-system.security.crypto_34_2.cpp)]\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/add/codesnippet/visualbasic/t-system.security.crypto_34_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class RSACryptoServiceProvider : System.Security.Cryptography.RSA, System.Security.Cryptography.ICspAsymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.RSA
  implements:
  - System.Security.Cryptography.ICspAsymmetricAlgorithm
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.RSA.Create
  - System.Security.Cryptography.RSA.Create(System.String)
  - System.Security.Cryptography.RSA.FromXmlString(System.String)
  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  - System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  - System.Security.Cryptography.RSA.ToXmlString(System.Boolean)
  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  - System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: RSACryptoServiceProvider()
  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider()
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;> </xref>クラスの既定のキーを使用します。"
  remarks: "既定のキーが見つからない場合は、新しいキーが作成されます。       このコンス トラクターを作成、<xref:System.Security.Cryptography.KeyNumber>セッションの暗号化に適切なキーのペアのキーが安全に格納し、他のユーザーと交換できるようにします</xref:System.Security.Cryptography.KeyNumber>。  生成されたキーを使用して生成されたキーに対応して、`AT_KEYEXCHANGE`で、アンマネージ Microsoft 暗号化 API (CAPI) を使用する値。"
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class to encrypt a string into an array of bytes and then decrypt the bytes back into a string.  \n  \n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider#1](~/add/codesnippet/cpp/m-system.security.crypto_117_1.cpp)]\n [!code-cs[System.Security.Cryptography.RSACryptoServiceProvider#1](~/add/codesnippet/csharp/m-system.security.crypto_117_1.cs)]\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider#1](~/add/codesnippet/visualbasic/m-system.security.crypto_117_1.vb)]"
  syntax:
    content: public RSACryptoServiceProvider ();
    parameters: []
  overload: System.Security.Cryptography.RSACryptoServiceProvider.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "暗号化サービス プロバイダー (CSP) を取得できません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: RSACryptoServiceProvider(Int32)
  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;> </xref>指定されたキー サイズを持つクラス。"
  remarks: "既定のキーが見つからない場合は、新しいキーが作成されます。       このコンス トラクターを作成、<xref:System.Security.Cryptography.KeyNumber>セッションの暗号化に適切なキーのペアのキーが安全に格納し、他のユーザーと交換できるようにします</xref:System.Security.Cryptography.KeyNumber>。  生成されたキーを使用して生成されたキーに対応して、`AT_KEYEXCHANGE`で、アンマネージ Microsoft 暗号化 API (CAPI) を使用する値。"
  example:
  - "The following code example creates a <xref:System.Security.Cryptography.RSACryptoServiceProvider>, generates a new key, and stores it in a key container.  \n  \n [!code-cs[Cryptography.RSACSP.ctor-int32-2#1](~/add/codesnippet/csharp/m-system.security.crypto_54_1.cs)]\n [!code-cpp[Cryptography.RSACSP.ctor-int32-2#1](~/add/codesnippet/cpp/m-system.security.crypto_54_1.cpp)]\n [!code-vb[Cryptography.RSACSP.ctor-int32-2#1](~/add/codesnippet/visualbasic/m-system.security.crypto_54_1.vb)]"
  syntax:
    content: public RSACryptoServiceProvider (int dwKeySize);
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "Bits で使用するキーのサイズ。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "暗号化サービス プロバイダー (CSP) を取得できません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: RSACryptoServiceProvider(CspParameters)
  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;> </xref>指定されたパラメーターを持つクラス。"
  remarks: "このコンス トラクターを作成またはを使用して指定のキー コンテナーを再利用、<xref:System.Security.Cryptography.CspParameters>のフィールド、`parameters`パラメーター</xref:System.Security.Cryptography.CspParameters> 。       既定では、このコンス トラクターを作成、<xref:System.Security.Cryptography.KeyNumber>セッションの暗号化に適切なキーのペアのキーが安全に格納し、他のユーザーと交換できるようにします</xref:System.Security.Cryptography.KeyNumber>。  生成されたキーを使用して生成されたキーに対応して、`AT_KEYEXCHANGE`で、アンマネージ Microsoft 暗号化 API (CAPI) を使用する値。       作成することができます、<xref:System.Security.Cryptography.KeyNumber>キー ペアを設定して (デジタル署名された) メッセージやファイルを認証するために適した、<xref:System.Security.Cryptography.CspParameters.KeyNumber>のフィールド、`parameters`パラメーターを<xref:System.Security.Cryptography.KeyNumber>値</xref:System.Security.Cryptography.KeyNumber></xref:System.Security.Cryptography.CspParameters.KeyNumber></xref:System.Security.Cryptography.KeyNumber>。 このタイプのキーに対応、 `AT_SIGNATURE` CAPI で使用される値。       作成する場合、<xref:System.Security.Cryptography.RSACryptoServiceProvider>オブジェクトを<xref:System.Security.Cryptography.KeyNumber>値が指定され、別の作成をする<xref:System.Security.Cryptography.RSACryptoServiceProvider>オブジェクトを<xref:System.Security.Cryptography.KeyNumber>両方のキーは、1 つのコンテナーで両方のオブジェクトが同一のキー コンテナー名を指定した場合、値を指定します</xref:System.Security.Cryptography.KeyNumber></xref:System.Security.Cryptography.RSACryptoServiceProvider></xref:System.Security.Cryptography.KeyNumber></xref:System.Security.Cryptography.RSACryptoServiceProvider>。       厳密に型名を使用する署名と互換性があるキーを作成する、<xref:System.Security.Cryptography.RSACryptoServiceProvider>クラスを作成する必要が、<xref:System.Security.Cryptography.KeyNumber>キーのペア</xref:System.Security.Cryptography.KeyNumber></xref:System.Security.Cryptography.RSACryptoServiceProvider>。"
  example:
  - "The following code example creates an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object, generates a new key, and stores it in a key container.  \n  \n [!code-cpp[Cryptography.RSACSP.ctor-csp#1](~/add/codesnippet/cpp/c05514b0-515d-4fa6-b581-_1.cpp)]\n [!code-vb[Cryptography.RSACSP.ctor-csp#1](~/add/codesnippet/visualbasic/c05514b0-515d-4fa6-b581-_1.vb)]\n [!code-cs[Cryptography.RSACSP.ctor-csp#1](~/add/codesnippet/csharp/c05514b0-515d-4fa6-b581-_1.cs)]"
  syntax:
    content: public RSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "暗号化サービス プロバイダー (CSP) に渡されるパラメーターです。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "CSP を取得することはできません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: RSACryptoServiceProvider(Int32,CspParameters)
  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32,CspParameters)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(Int32,CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;> </xref>指定されたキー サイズとパラメーターを持つクラス。"
  remarks: "このコンス トラクターを作成またはを使用して指定のキー コンテナーを再利用、<xref:System.Security.Cryptography.CspParameters>のフィールド、`parameters`パラメーター</xref:System.Security.Cryptography.CspParameters> 。       既定では、このコンス トラクターを作成、<xref:System.Security.Cryptography.KeyNumber>セッションの暗号化に適切なキーのペアのキーが安全に格納し、他のユーザーと交換できるようにします</xref:System.Security.Cryptography.KeyNumber>。  生成されたキーを使用して生成されたキーに対応して、`AT_KEYEXCHANGE`で、アンマネージ Microsoft 暗号化 API (CAPI) を使用する値。       作成することができます、<xref:System.Security.Cryptography.KeyNumber>キー ペアを設定して (デジタル署名された) メッセージやファイルを認証するために適した、<xref:System.Security.Cryptography.CspParameters.KeyNumber>のフィールド、`parameters`パラメーターを<xref:System.Security.Cryptography.KeyNumber>値</xref:System.Security.Cryptography.KeyNumber></xref:System.Security.Cryptography.CspParameters.KeyNumber></xref:System.Security.Cryptography.KeyNumber>。 このタイプのキーに対応、 `AT_SIGNATURE` CAPI で使用される値。       作成する場合、<xref:System.Security.Cryptography.RSACryptoServiceProvider>オブジェクトを<xref:System.Security.Cryptography.KeyNumber>値が指定され、別の作成をする<xref:System.Security.Cryptography.RSACryptoServiceProvider>オブジェクトを<xref:System.Security.Cryptography.KeyNumber>両方のキーは、1 つのコンテナーで両方のオブジェクトが同一のキー コンテナー名を指定した場合、値を指定します</xref:System.Security.Cryptography.KeyNumber></xref:System.Security.Cryptography.RSACryptoServiceProvider></xref:System.Security.Cryptography.KeyNumber></xref:System.Security.Cryptography.RSACryptoServiceProvider>。       厳密に型名を使用する署名と互換性があるキーを作成する、<xref:System.Security.Cryptography.RSACryptoServiceProvider>クラスを作成する必要が、<xref:System.Security.Cryptography.KeyNumber>キーのペア</xref:System.Security.Cryptography.KeyNumber></xref:System.Security.Cryptography.RSACryptoServiceProvider>。"
  example:
  - "The following code example creates a <xref:System.Security.Cryptography.RSACryptoServiceProvider>, generates a new key, and stores it in a key container.  \n  \n [!code-cpp[Cryptography.RSACSP.ctor-int32-csp#1](~/add/codesnippet/cpp/d6fb023a-3018-4e24-9035-_1.cpp)]\n [!code-cs[Cryptography.RSACSP.ctor-int32-csp#1](~/add/codesnippet/csharp/d6fb023a-3018-4e24-9035-_1.cs)]\n [!code-vb[Cryptography.RSACSP.ctor-int32-csp#1](~/add/codesnippet/visualbasic/d6fb023a-3018-4e24-9035-_1.vb)]"
  syntax:
    content: public RSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "Bits で使用するキーのサイズ。"
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "暗号化サービス プロバイダー (CSP) に渡されるパラメーターです。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "CSP を取得することはできません。       または、キーを作成することはできません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo
  id: CspKeyContainerInfo
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: CspKeyContainerInfo
  nameWithType: RSACryptoServiceProvider.CspKeyContainerInfo
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得、 <xref href=&quot;System.Security.Cryptography.CspKeyContainerInfo&quot;> </xref>暗号化キーの組に関する追加情報を記述するオブジェクト。"
  remarks: "CspKeyContainerInfo プロパティを使用すると、暗号化キーの組に関する追加情報を取得できます。  返された<xref:System.Security.Cryptography.CspKeyContainerInfo>記述かどうか、キーがエクスポート可能なおよびキー コンテナー名、プロバイダーに関する情報およびその他の情報を指定するオブジェクト</xref:System.Security.Cryptography.CspKeyContainerInfo>。       ランダムなキーが生成された場合、キー コンテナーは作成されません、キーを使用するメソッドを呼び出すまでです。  一部のプロパティ、<xref:System.Security.Cryptography.CspKeyContainerInfo>によって返されるオブジェクト、<xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A>プロパティがスローされます、<xref:System.Security.Cryptography.CryptographicException>キー コンテナーが作成されていない場合</xref:System.Security.Cryptography.CryptographicException></xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A></xref:System.Security.Cryptography.CspKeyContainerInfo>。  キー コンテナーが作成されていることを確認するにメソッドを呼び出すよう<xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A>、 <xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A>、 <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A>、<xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>など、呼び出す前に、<xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A>プロパティ</xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A></xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A></xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A></xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A></xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A>。"
  example:
  - "The following code example demonstrates how to call the <xref:System.Security.Cryptography.CspKeyContainerInfo> property.  \n  \n [!code-cpp[Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_35_1.cpp)]\n [!code-vb[Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_35_1.vb)]\n [!code-cs[Cryptography.RsaCryptoServiceProvider.CspKeyContainerInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_35_1.cs)]"
  syntax:
    content: public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }
    return:
      type: System.Security.Cryptography.CspKeyContainerInfo
      description: "A <xref href=&quot;System.Security.Cryptography.CspKeyContainerInfo&quot;> </xref>暗号化キーの組に関する追加情報を記述するオブジェクト。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)
  id: Decrypt(System.Byte[],System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: Decrypt(Byte[],Boolean)
  nameWithType: RSACryptoServiceProvider.Decrypt(Byte[],Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(Byte[],Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "使用してデータを復号化、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>アルゴリズムです。"
  remarks: "使用して<xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A>このメソッドを使用して復号化用のデータを暗号化する</xref:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt%2A>。"
  example:
  - "The following code example encrypts and decrypts data.  \n  \n This example uses the <xref:System.Text.ASCIIEncoding> class; however, the <xref:System.Text.UnicodeEncoding> class may be preferable in large data operations. The encrypted value can be saved as an `nvarchar` data type in Microsoft SQL Server 2005.  \n  \n [!code-cs[Cryptography.RSACSP.Decrypt#1](~/add/codesnippet/csharp/8cfd6fd2-9442-4043-ad36-_1.cs)]\n [!code-cpp[Cryptography.RSACSP.Decrypt#1](~/add/codesnippet/cpp/8cfd6fd2-9442-4043-ad36-_1.cpp)]\n [!code-vb[Cryptography.RSACSP.Decrypt#1](~/add/codesnippet/visualbasic/8cfd6fd2-9442-4043-ad36-_1.vb)]"
  syntax:
    content: public byte[] Decrypt (byte[] rgb, bool fOAEP);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "復号化するデータ。"
    - id: fOAEP
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>直接実行する<xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref> OAEP パディング (Microsoft Windows XP を実行するコンピューターで使用可能なまたはそれ以降のみ) を使用して暗号化解除、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> PKCS&#1; v1.5 パディングを使用します。"
    return:
      type: System.Byte[]
      description: "暗号化する前に元のプレーン テキストである復号化されたデータ。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "暗号化サービス プロバイダー (CSP) を取得できません。       - または -、 <code> fOAEP </code>パラメーターは<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>との長さ、 <code> rgb </code>パラメーターが<xref:System.Security.Cryptography.RSACryptoServiceProvider.KeySize*>.</xref:System.Security.Cryptography.RSACryptoServiceProvider.KeySize*>より大きい       - または -、 <code> fOAEP </code>パラメーターは<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> OAEP がサポートされていません。       または、キーが暗号化されたデータと一致しません。 ただし、例外の記述が正しくない可能性があります。 たとえば、内容が`Not enough storage is available to process this command`です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rgb </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  id: Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: Decrypt(Byte[],RSAEncryptionPadding)
  nameWithType: RSACryptoServiceProvider.Decrypt(Byte[],RSAEncryptionPadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(Byte[],RSAEncryptionPadding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "暗号化されたデータを復号化、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>指定されたパディングを使用して、アルゴリズムです。"
  remarks: '`padding`いずれか<xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName>または<xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName>。</xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName></xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName>にする必要があります。'
  syntax:
    content: public override byte[] Decrypt (byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);
    parameters:
    - id: data
      type: System.Byte[]
      description: "復号化するデータ。"
    - id: padding
      type: System.Security.Cryptography.RSAEncryptionPadding
      description: "パディング。"
    return:
      type: System.Byte[]
      description: "復号化されたデータ。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>padding</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "パディング モードはサポートされていません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])
  id: DecryptValue(System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: DecryptValue(Byte[])
  nameWithType: RSACryptoServiceProvider.DecryptValue(Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "このメソッドは、現在のバージョンではサポートされません。"
  syntax:
    content: public override byte[] DecryptValue (byte[] rgb);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "復号化するデータ。"
    return:
      type: System.Byte[]
      description: "暗号化する前に元のプレーン テキストである復号化されたデータ。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "このメソッドは、現在のバージョンではサポートされません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: RSACryptoServiceProvider.Dispose(Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)
  id: Encrypt(System.Byte[],System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: Encrypt(Byte[],Boolean)
  nameWithType: RSACryptoServiceProvider.Encrypt(Byte[],Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(Byte[],Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "データを暗号化、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>アルゴリズムです。"
  remarks: "次の表に、異なるバージョンの Microsoft Windows との最大長でサポートされている余白`rgb`オペレーティング システムと余白のさまざまな組み合わせで許可されています。      |Padding |サポートされているオペレーティング システム |Rgb パラメーターの最大長 |  |-------------|--------------------------------|-------------------------------------|  |OAEP パディング (PKCS #1 v2) |Windows XP またはそれ以降 |。剰余のサイズを-2-2 * hLen、hLen がハッシュのサイズがします |。  |暗号化を直接 (PKCS 1 v1.5) |Microsoft Windows 2000 以降、高度な暗号化パックがインストールされています |。モジュールのサイズ - 11。 (11 バイトとは、埋め込み可能な最小値です). |  |サポートされていません暗号化と OAEP パディングを直接 |Microsoft Windows 98、Windows Millennium Edition、または Windows 2000 以降、高度な暗号化パックをインストールせず |。対称キーの最大サイズが許可されている |。      使用して<xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A>このメソッドの結果を復号化します</xref:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt%2A>。"
  example:
  - "The following code example initializes an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object to the value of a public key (sent by another party), generates a session key using the <xref:System.Security.Cryptography.RijndaelManaged> algorithm, and then encrypts the session key using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> object.  Using this scheme, the session key could be sent back to the owner of the private RSA key and the two parties could use the session key to exchange encrypted data.  \n  \n [!code-cs[System.Security.Cryptography.RSACryptoServiceProvider.Encrypt#1](~/add/codesnippet/csharp/6b432226-1f8c-408d-a101-_1.cs)]\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider.Encrypt#1](~/add/codesnippet/cpp/6b432226-1f8c-408d-a101-_1.cpp)]\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider.Encrypt#1](~/add/codesnippet/visualbasic/6b432226-1f8c-408d-a101-_1.vb)]"
  syntax:
    content: public byte[] Encrypt (byte[] rgb, bool fOAEP);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "データを暗号化します。"
    - id: fOAEP
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>直接実行する<xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref> OAEP パディング (Windows XP を実行するコンピューターで使用可能なまたはそれ以降のみ) を使用して暗号化をそれ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> PKCS&#1; v1.5 パディングを使用します。"
    return:
      type: System.Byte[]
      description: "暗号化されたデータ。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "暗号化サービス プロバイダー (CSP) を取得できません。       - または - の長さ、 <code> rgb </code>パラメーターが許容最大長を超えています。       - または -、 <code> fOAEP </code>パラメーターは<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> OAEP パディングはサポートされていません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rgb </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  id: Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: Encrypt(Byte[],RSAEncryptionPadding)
  nameWithType: RSACryptoServiceProvider.Encrypt(Byte[],RSAEncryptionPadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(Byte[],RSAEncryptionPadding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "データを暗号化、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>アルゴリズムが指定されたパディングを使用します。"
  remarks: '`padding`いずれか<xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName>または<xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName>。</xref:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1%2A?displayProperty=fullName></xref:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1%2A?displayProperty=fullName>にする必要があります。'
  syntax:
    content: public override byte[] Encrypt (byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding);
    parameters:
    - id: data
      type: System.Byte[]
      description: "暗号化するデータ。"
    - id: padding
      type: System.Security.Cryptography.RSAEncryptionPadding
      description: "パディング。"
    return:
      type: System.Byte[]
      description: "暗号化されたデータ。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>padding</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "パディング モードはサポートされていません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])
  id: EncryptValue(System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: EncryptValue(Byte[])
  nameWithType: RSACryptoServiceProvider.EncryptValue(Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "このメソッドは、現在のバージョンではサポートされません。"
  syntax:
    content: public override byte[] EncryptValue (byte[] rgb);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "データを暗号化します。"
    return:
      type: System.Byte[]
      description: "暗号化されたデータ。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "このメソッドは、現在のバージョンではサポートされません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  id: ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: ExportCspBlob(Boolean)
  nameWithType: RSACryptoServiceProvider.ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "関連付けられたキー情報を含む blob をエクスポート、 <xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;> </xref>オブジェクト。"
  remarks: "ExportCspBlob メソッドで、アンマネージ Microsoft 暗号化 API (CAPI) 互換性のある重要な情報を含む blob を返します。"
  syntax:
    content: public byte[] ExportCspBlob (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>秘密キーを含めるそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Byte[]
      description: "関連付けられたキー情報を格納するバイト配列、 <xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: RSACryptoServiceProvider.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "エクスポート、 <xref href=&quot;System.Security.Cryptography.RSAParameters&quot;></xref>です。"
  remarks: ''
  example:
  - "The following code example exports the key information created using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> into an <xref:System.Security.Cryptography.RSAParameters> object.  \n  \n [!code-cs[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/add/codesnippet/csharp/f018c1e5-b1fd-413d-8285-_1.cs)]\n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/add/codesnippet/cpp/f018c1e5-b1fd-413d-8285-_1.cpp)]\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters#1](~/add/codesnippet/visualbasic/f018c1e5-b1fd-413d-8285-_1.vb)]"
  syntax:
    content: public override System.Security.Cryptography.RSAParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プライベート パラメーターを含めるそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Security.Cryptography.RSAParameters
      description: "パラメーターの<xref href=&quot;System.Security.Cryptography.RSA&quot;></xref>です。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "キーをエクスポートできません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: RSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "追加します。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "追加します。"
    return:
      type: System.Byte[]
      description: "追加します。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: RSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "追加します。"
    - id: offset
      type: System.Int32
      description: "追加します。"
    - id: count
      type: System.Int32
      description: "追加します。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "追加します。"
    return:
      type: System.Byte[]
      description: "追加します。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  id: ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: ImportCspBlob(Byte[])
  nameWithType: RSACryptoServiceProvider.ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "RSA キーの情報を表す blob をインポートします。"
  remarks: "ImportCspBlob メソッドの主要なデータの初期化、<xref:System.Security.Cryptography.RSACryptoServiceProvider>オブジェクトで、アンマネージ Microsoft 暗号化 API (CAPI) 互換性のある blob を使用しています</xref:System.Security.Cryptography.RSACryptoServiceProvider>。"
  syntax:
    content: public void ImportCspBlob (byte[] keyBlob);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "RSA キー blob を表すバイト配列。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)
  id: ImportParameters(System.Security.Cryptography.RSAParameters)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: ImportParameters(RSAParameters)
  nameWithType: RSACryptoServiceProvider.ImportParameters(RSAParameters)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(RSAParameters)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したインポート<xref href=&quot;System.Security.Cryptography.RSAParameters&quot;></xref>です。"
  remarks: ''
  example:
  - "The following code example imports key information created from an <xref:System.Security.Cryptography.RSAParameters> object into an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object.  \n  \n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters#1](~/add/codesnippet/cpp/c5e7ebba-6f05-4c89-be06-_1.cpp)]\n [!code-cs[System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters#1](~/add/codesnippet/csharp/c5e7ebba-6f05-4c89-be06-_1.cs)]\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters#1](~/add/codesnippet/visualbasic/c5e7ebba-6f05-4c89-be06-_1.vb)]"
  syntax:
    content: public override void ImportParameters (System.Security.Cryptography.RSAParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.RSAParameters
      description: "パラメーターの<xref href=&quot;System.Security.Cryptography.RSA&quot;></xref>です。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "暗号化サービス プロバイダー (CSP) を取得できません。       - または -、 <code> parameters </code>パラメーターが存在しないフィールドです。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: RSACryptoServiceProvider.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "この実装で使用可能なキー交換アルゴリズムの名前を取得<xref href=&quot;System.Security.Cryptography.RSA&quot;></xref>です。"
  remarks: "このプロパティは、アルゴリズムではなくの種類の名前を示します。 たとえば、RSA PKCS1-KeyEx はキー交換アルゴリズムの名前です。"
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "存在する場合は、キー交換アルゴリズムの名前それ以外の場合、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeySize
  id: KeySize
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: KeySize
  nameWithType: RSACryptoServiceProvider.KeySize
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在のキーのサイズを取得します。"
  remarks: "The <xref:System.Security.Cryptography.RSACryptoServiceProvider> supports key sizes from 384 bits to 16384 bits in increments of 8 bits if you have the Microsoft Enhanced Cryptographic Provider installed.  It supports key sizes from 384 bits to 512 bits in increments of 8 bits if you have the Microsoft Base Cryptographic Provider installed.  \n  \n Valid key sizes are dependent on the cryptographic service provider (CSP) that is used by the <xref:System.Security.Cryptography.RSACryptoServiceProvider> instance. Windows CSPs enable key sizes of 384 to 16384 bits for Windows versions prior to [!INCLUDE[win81](~/add/includes/ajax-current-ext-md.md)], and key sizes of 512 to 16384 bits for [!INCLUDE[win81](~/add/includes/ajax-current-ext-md.md)]. For more information, see [CryptGenKey](http://msdn.microsoft.com/library/aa379941\\(v=vs.85\\).aspx) function in the Windows documentation.  \n  \n The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class does not allow you to change key sizes using the KeySize property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads."
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "ビットのキーのサイズ。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.KeySize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp
  id: PersistKeyInCsp
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: PersistKeyInCsp
  nameWithType: RSACryptoServiceProvider.PersistKeyInCsp
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得または暗号化サービス プロバイダー (CSP) にキーを永続化するかどうかを示す値を設定します。"
  remarks: "このプロパティを使用して、キー コンテナー内のキーを保持します。       PersistKeyInCsp プロパティに設定が自動的に`true`にキー コンテナー名を指定すると、<xref:System.Security.Cryptography.CspParameters.KeyContainerName>のフィールド、<xref:System.Security.Cryptography.CspParameters>オブジェクトを初期化するために使用、<xref:System.Security.Cryptography.RSACryptoServiceProvider>オブジェクトのコンス トラクターの&1; つを呼び出して、`parameters`パラメーター</xref:System.Security.Cryptography.RSACryptoServiceProvider> </xref:System.Security.Cryptography.CspParameters> </xref:System.Security.Cryptography.CspParameters.KeyContainerName> 。       PersistKeyInCsp プロパティには効果がない場合、<xref:System.Security.Cryptography.RSACryptoServiceProvider>でオブジェクトを作成、`null`キー コンテナー名</xref:System.Security.Cryptography.RSACryptoServiceProvider>。"
  example:
  - "The following code example creates an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object and persists the key to a key container.  \n  \n [!code-cs[Cryptography.RSACSP.PersistKey#1](~/add/codesnippet/csharp/p-system.security.crypto_52_1.cs)]\n [!code-vb[Cryptography.RSACSP.PersistKey#1](~/add/codesnippet/visualbasic/p-system.security.crypto_52_1.vb)]\n [!code-cpp[Cryptography.RSACSP.PersistKey#1](~/add/codesnippet/cpp/p-system.security.crypto_52_1.cpp)]"
  syntax:
    content: public bool PersistKeyInCsp { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>CSP にキーを永続化する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly
  id: PublicOnly
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: PublicOnly
  nameWithType: RSACryptoServiceProvider.PublicOnly
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;> </xref>オブジェクトには、公開キーのみが含まれています。"
  remarks: "<xref:System.Security.Cryptography.RSACryptoServiceProvider>クラスが初期化されたか、公開キーだけで、または両方パブリックとプライベート キーを指定できます</xref:System.Security.Cryptography.RSACryptoServiceProvider>。  PublicOnly プロパティを使用して、現在のインスタンスには、公開キーのみまたは公開および秘密キーの両方が含まれるかどうかを判断します。"
  syntax:
    content: public bool PublicOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;> </xref>オブジェクトには、パブリックのみが含まれています。 キー、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: RSACryptoServiceProvider.SignatureAlgorithm
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "この実装で使用可能な署名アルゴリズムの名前を取得<xref href=&quot;System.Security.Cryptography.RSA&quot;></xref>です。"
  remarks: "このプロパティは、URI のアルゴリズムを示すために XML デジタル署名のクラスで使用します。 この実装でこのプロパティは常に http://www.w3.org/2000/09/xmldsig#rsa-sha1 を返します。"
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "署名アルゴリズムの名前です。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)
  id: SignData(System.Byte[],System.Object)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Byte[],Object)
  nameWithType: RSACryptoServiceProvider.SignData(Byte[],Object)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(Byte[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ アルゴリズムを使用して、指定したバイト配列のハッシュ値を計算し、結果のハッシュ値に署名します。"
  remarks: "このメソッドを使用して確認されるデジタル署名を作成、<xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A>メソッド</xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A>。       `halg`パラメーターに使用できる、 <xref:System.String>、 <xref:System.Security.Cryptography.HashAlgorithm>、または<xref:System.Type>.</xref:System.Type> </xref:System.Security.Cryptography.HashAlgorithm> </xref:System.String>"
  example:
  - "The following code example signs and verifies data.  \n  \n [!code-cpp[Cryptography.RSACSP.SignData2#1](~/add/codesnippet/cpp/ad78ce39-1ac6-4acb-8c2f-_1.cpp)]\n [!code-cs[Cryptography.RSACSP.SignData2#1](~/add/codesnippet/csharp/ad78ce39-1ac6-4acb-8c2f-_1.cs)]\n [!code-vb[Cryptography.RSACSP.SignData2#1](~/add/codesnippet/visualbasic/ad78ce39-1ac6-4acb-8c2f-_1.vb)]"
  syntax:
    content: public byte[] SignData (byte[] buffer, object halg);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "ハッシュを計算する対象の入力データ。"
    - id: halg
      type: System.Object
      description: "使用してハッシュ値を作成するハッシュ アルゴリズム。"
    return:
      type: System.Byte[]
      description: "<xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>指定されたデータの署名。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>halg</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> halg </code>パラメーターが有効な型ではありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)
  id: SignData(System.IO.Stream,System.Object)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Stream,Object)
  nameWithType: RSACryptoServiceProvider.SignData(Stream,Object)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(Stream,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ アルゴリズムを使用して指定された入力ストリームのハッシュ値を計算し、結果のハッシュ値に署名します。"
  remarks: "`halg`パラメーターに使用できる、 <xref:System.String>、 <xref:System.Security.Cryptography.HashAlgorithm>、または<xref:System.Type>.</xref:System.Type> </xref:System.Security.Cryptography.HashAlgorithm> </xref:System.String>"
  example:
  - "The following code example signs and verifies data.  \n  \n [!code-cs[Cryptography.RSACSP.SignData3#1](~/add/codesnippet/csharp/35bfe7e1-edb8-40ab-9df0-_1.cs)]\n [!code-cpp[Cryptography.RSACSP.SignData3#1](~/add/codesnippet/cpp/35bfe7e1-edb8-40ab-9df0-_1.cpp)]\n [!code-vb[Cryptography.RSACSP.SignData3#1](~/add/codesnippet/visualbasic/35bfe7e1-edb8-40ab-9df0-_1.vb)]"
  syntax:
    content: public byte[] SignData (System.IO.Stream inputStream, object halg);
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: "ハッシュを計算する対象の入力データ。"
    - id: halg
      type: System.Object
      description: "使用してハッシュ値を作成するハッシュ アルゴリズム。"
    return:
      type: System.Byte[]
      description: "<xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>指定されたデータの署名。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>halg</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> halg </code>パラメーターが有効な型ではありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Object)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32,Object)
  nameWithType: RSACryptoServiceProvider.SignData(Byte[],Int32,Int32,Object)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(Byte[],Int32,Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ アルゴリズムを使用して、指定したバイト配列のサブセットのハッシュ値を計算し、結果のハッシュ値に署名します。"
  remarks: "このメソッドを使用して確認されるデジタル署名を作成、<xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A>メソッド</xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData%2A>。       `halg`パラメーターに使用できる、 <xref:System.String>、 <xref:System.Security.Cryptography.HashAlgorithm>、または<xref:System.Type>.</xref:System.Type> </xref:System.Security.Cryptography.HashAlgorithm> </xref:System.String> 文字列値は、次のいずれかを指定できます:-オブジェクト識別子 (OID) の名前を使用するハッシュ アルゴリズム、暗号化の構成ファイルまたは Crypto API OID テーブルに&1; つで名かが登録されています。      -OID の値です。 OID は、Crypto API によって認識されるいずれかを指定する必要があります。       たとえば、SignData (新しいバイト [5]、「1.3.14.3.2.26」) または SignData (新しいバイト [5]、&quot;sha1&quot;)、または SignData (新しいバイト [5]、&quot;SHA1&quot;) を使用する可能性があります。"
  example:
  - "The following code example signs and verifies data.  \n  \n [!code-cpp[Cryptography.RSACSP.SignData1#1](~/add/codesnippet/cpp/7bb71f9b-03f8-4e5b-ab7e-_1.cpp)]\n [!code-cs[Cryptography.RSACSP.SignData1#1](~/add/codesnippet/csharp/7bb71f9b-03f8-4e5b-ab7e-_1.cs)]\n [!code-vb[Cryptography.RSACSP.SignData1#1](~/add/codesnippet/visualbasic/7bb71f9b-03f8-4e5b-ab7e-_1.vb)]"
  syntax:
    content: public byte[] SignData (byte[] buffer, int offset, int count, object halg);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "ハッシュを計算する対象の入力データ。"
    - id: offset
      type: System.Int32
      description: "配列内のデータの使用を開始するオフセットです。"
    - id: count
      type: System.Int32
      description: "データとして使用する配列内のバイト数。"
    - id: halg
      type: System.Object
      description: "使用してハッシュ値を作成するハッシュ アルゴリズム。"
    return:
      type: System.Byte[]
      description: "<xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>指定されたデータの署名。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>halg</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> halg </code>パラメーターが有効な型ではありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  id: SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: SignHash(Byte[],String)
  nameWithType: RSACryptoServiceProvider.SignHash(Byte[],String)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[],String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "秘密キーで暗号化することによって、指定したハッシュ値の署名を計算します。"
  remarks: "このメソッドを使用して確認されるデジタル署名を作成、<xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash%2A>メソッド</xref:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash%2A>。       有効なハッシュ アルゴリズムは<xref:System.Security.Cryptography.SHA1>および<xref:System.Security.Cryptography.MD5>。</xref:System.Security.Cryptography.MD5> </xref:System.Security.Cryptography.SHA1> アルゴリズム識別子を使用して、ハッシュ名から派生することができます、<xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A>メソッド</xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A>。"
  example:
  - "The following code example encrypts some data, creates a hash of the encrypted data, and then signs hash with a digital signature.  \n  \n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#1](~/add/codesnippet/cpp/f4f73450-8212-4a5d-b1df-_1.cpp)]\n [!code-cs[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#1](~/add/codesnippet/csharp/f4f73450-8212-4a5d-b1df-_1.cs)]\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#1](~/add/codesnippet/visualbasic/f4f73450-8212-4a5d-b1df-_1.vb)]"
  syntax:
    content: public byte[] SignHash (byte[] rgbHash, string str);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "署名されるデータのハッシュ値。"
    - id: str
      type: System.String
      description: "ハッシュ アルゴリズム識別子 (OID) のデータのハッシュ値を作成するために使用します。"
    return:
      type: System.Byte[]
      description: "<xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>指定したハッシュ値の署名。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "暗号化サービス プロバイダー (CSP) を取得できません。       または、秘密キーがありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  id: SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)
  nameWithType: RSACryptoServiceProvider.SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定されたパディングを使用して、秘密キーで暗号化することによって、指定したハッシュ値の署名を計算します。"
  syntax:
    content: public override byte[] SignHash (byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "署名されるデータのハッシュ値。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "データのハッシュ値を作成するために使用するハッシュ アルゴリズムの名前。"
    - id: padding
      type: System.Security.Cryptography.RSASignaturePadding
      description: "パディング。"
    return:
      type: System.Byte[]
      description: "<xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>指定したハッシュ値の署名。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.SignHash*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hash</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>padding</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>padding</code>等しくない&lt;xref:System.Security.Cryptography.RSASignaturePadding.Pkcs1%2A?displayProperty=fullName&gt;です。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore
  id: UseMachineKeyStore
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: UseMachineKeyStore
  nameWithType: RSACryptoServiceProvider.UseMachineKeyStore
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得またはキーをユーザー プロファイル ストアではなく、コンピューターのキー ストアに永続化するかどうかを示す値を設定します。"
  remarks: "このプロパティを設定`true`は渡すことに相当します<xref:System.Security.Cryptography.CspProviderFlags>フラグを<xref:System.Security.Cryptography.CspParameters>オブジェクト</xref:System.Security.Cryptography.CspParameters></xref:System.Security.Cryptography.CspProviderFlags>。 UseMachineKeyStore プロパティは、一方は、現在のアプリケーション ドメインのすべてのコードに適用されます<xref:System.Security.Cryptography.CspParameters>オブジェクトがそれを明示的に参照をクラスにのみ適用されます</xref:System.Security.Cryptography.CspParameters>。 これらの設定は、偽装するか、ユーザー プロファイルが読み込まれていないアカウントで実行されている場合に便利です。 キー ストアの場所場合にのみ、UseMachineKeyStore の設定に影響<xref:System.Security.Cryptography.RSACryptoServiceProvider>はパラメーターなしで初期化します</xref:System.Security.Cryptography.RSACryptoServiceProvider>。"
  example:
  - "The following code example creates an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object and sets the static UseMachineKeyStore property to use the machine key store instead of the user profile key store.  \n  \n [!code-cs[Cryptography.RSACSP.UseMachineKey#2](~/add/codesnippet/csharp/p-system.security.crypto_91_1.cs)]\n [!code-cpp[Cryptography.RSACSP.UseMachineKey#2](~/add/codesnippet/cpp/p-system.security.crypto_91_1.cpp)]\n [!code-vb[Cryptography.RSACSP.UseMachineKey#2](~/add/codesnippet/visualbasic/p-system.security.crypto_91_1.vb)]"
  syntax:
    content: public static bool UseMachineKeyStore { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>コンピューター キー ストアにキーを永続化する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])
  id: VerifyData(System.Byte[],System.Object,System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyData(Byte[],Object,Byte[])
  nameWithType: RSACryptoServiceProvider.VerifyData(Byte[],Object,Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(Byte[],Object,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "ハッシュを決定することにより、デジタル署名が有効であることを確認、署名の指定した公開キーを使用して、指定されたデータのハッシュ値と比較することの値。"
  remarks: "このメソッドを検証、<xref:System.Security.Cryptography.RSA>によって生成されたデジタル署名、<xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A>メソッド</xref:System.Security.Cryptography.RSACryptoServiceProvider.SignData%2A></xref:System.Security.Cryptography.RSA>。 署名された公開キーを使用して署名からハッシュ値を取得して署名を検証し、その値を指定されたデータのハッシュ値を比較します。       `halg`パラメーターに使用できる、 <xref:System.String>、 <xref:System.Security.Cryptography.HashAlgorithm>、または<xref:System.Type>.</xref:System.Type> </xref:System.Security.Cryptography.HashAlgorithm> </xref:System.String>"
  example:
  - "The following example shows how to use the VerifyData method to verify a signature. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A> method.  \n  \n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/add/codesnippet/cpp/3df3f07d-a09f-413c-b97a-_1.cpp)]\n [!code-cs[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/add/codesnippet/csharp/3df3f07d-a09f-413c-b97a-_1.cs)]\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/add/codesnippet/visualbasic/3df3f07d-a09f-413c-b97a-_1.vb)]"
  syntax:
    content: public bool VerifyData (byte[] buffer, object halg, byte[] signature);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "署名されたデータ。"
    - id: halg
      type: System.Object
      description: "データのハッシュ値を作成するために使用するハッシュ アルゴリズムの名前です。"
    - id: signature
      type: System.Byte[]
      description: "検証する署名データ。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、署名が無効です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>halg</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> halg </code>パラメーターが有効な型ではありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  id: VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyHash(Byte[],String,Byte[])
  nameWithType: RSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "ハッシュを決定することにより、デジタル署名が有効であることを確認、署名の指定した公開キーを使用して、指定したハッシュ値と比較することの値。"
  remarks: "このメソッドを検証、<xref:System.Security.Cryptography.RSA>によって生成されたデジタル署名、<xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A>メソッド</xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A></xref:System.Security.Cryptography.RSA>。 署名された公開キーを使用して署名からハッシュ値を取得して署名を検証し、その値を指定されたデータのハッシュ値を比較します。       有効なハッシュ アルゴリズムは<xref:System.Security.Cryptography.SHA1>および<xref:System.Security.Cryptography.MD5>。</xref:System.Security.Cryptography.MD5> </xref:System.Security.Cryptography.SHA1> アルゴリズム識別子を使用して、ハッシュ名から派生することができます、<xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A>メソッド</xref:System.Security.Cryptography.CryptoConfig.MapNameToOID%2A>。"
  example:
  - "The following example shows how to use the VerifyHash method to verify a signature. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSACryptoServiceProvider.SignHash%2A> method.  \n  \n [!code-cpp[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/add/codesnippet/cpp/2148dfcd-6562-4b9d-a47c-_1.cpp)]\n [!code-cs[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/add/codesnippet/csharp/2148dfcd-6562-4b9d-a47c-_1.cs)]\n [!code-vb[System.Security.Cryptography.RSACryptoServiceProvider ManualHash Example#2](~/add/codesnippet/visualbasic/2148dfcd-6562-4b9d-a47c-_1.vb)]"
  syntax:
    content: public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "署名されたデータのハッシュ値。"
    - id: str
      type: System.String
      description: "ハッシュ アルゴリズム識別子 (OID) のデータのハッシュ値を作成するために使用します。"
    - id: rgbSignature
      type: System.Byte[]
      description: "検証する署名データ。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、署名が無効です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>rgbSignature</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "暗号化サービス プロバイダー (CSP) を取得できません。       または、署名を検証できません。"
  platform:
  - net462
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  id: VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)
  nameWithType: RSACryptoServiceProvider.VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したハッシュを使用して、署名のハッシュ値を決定することにより、デジタル署名が有効であることを検証アルゴリズムとパディング、および指定したハッシュ値と比較することです。"
  syntax:
    content: public override bool VerifyHash (byte[] hash, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "署名されたデータのハッシュ値。"
    - id: signature
      type: System.Byte[]
      description: "検証する署名データ。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "ハッシュ値を作成するために使用するハッシュ アルゴリズムの名前。"
    - id: padding
      type: System.Security.Cryptography.RSASignaturePadding
      description: "パディング。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、署名が無効です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hash</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>padding</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>padding</code>等しくない&lt;xref:System.Security.Cryptography.RSASignaturePadding.Pkcs1%2A?displayProperty=fullName&gt;です。"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.RSA
  isExternal: false
  name: System.Security.Cryptography.RSA
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: RSACryptoServiceProvider()
  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider()
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider()
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: RSACryptoServiceProvider(Int32)
  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: RSACryptoServiceProvider(CspParameters)
  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(CspParameters)
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: RSACryptoServiceProvider(Int32,CspParameters)
  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32,CspParameters)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(Int32,CspParameters)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: RSACryptoServiceProvider.CspKeyContainerInfo
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo
- uid: System.Security.Cryptography.CspKeyContainerInfo
  parent: System.Security.Cryptography
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: CspKeyContainerInfo
  fullName: System.Security.Cryptography.CspKeyContainerInfo
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: Decrypt(Byte[],Boolean)
  nameWithType: RSACryptoServiceProvider.Decrypt(Byte[],Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(Byte[],Boolean)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: Decrypt(Byte[],RSAEncryptionPadding)
  nameWithType: RSACryptoServiceProvider.Decrypt(Byte[],RSAEncryptionPadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(Byte[],RSAEncryptionPadding)
- uid: System.Security.Cryptography.RSAEncryptionPadding
  parent: System.Security.Cryptography
  isExternal: false
  name: RSAEncryptionPadding
  nameWithType: RSAEncryptionPadding
  fullName: System.Security.Cryptography.RSAEncryptionPadding
- uid: System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: DecryptValue(Byte[])
  nameWithType: RSACryptoServiceProvider.DecryptValue(Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(Byte[])
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: RSACryptoServiceProvider.Dispose(Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Dispose(Boolean)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: Encrypt(Byte[],Boolean)
  nameWithType: RSACryptoServiceProvider.Encrypt(Byte[],Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(Byte[],Boolean)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: Encrypt(Byte[],RSAEncryptionPadding)
  nameWithType: RSACryptoServiceProvider.Encrypt(Byte[],RSAEncryptionPadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(Byte[],RSAEncryptionPadding)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: EncryptValue(Byte[])
  nameWithType: RSACryptoServiceProvider.EncryptValue(Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(Byte[])
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: ExportCspBlob(Boolean)
  nameWithType: RSACryptoServiceProvider.ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(Boolean)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: RSACryptoServiceProvider.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(Boolean)
- uid: System.Security.Cryptography.RSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: RSAParameters
  nameWithType: RSAParameters
  fullName: System.Security.Cryptography.RSAParameters
- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: RSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: RSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: ImportCspBlob(Byte[])
  nameWithType: RSACryptoServiceProvider.ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(Byte[])
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: ImportParameters(RSAParameters)
  nameWithType: RSACryptoServiceProvider.ImportParameters(RSAParameters)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(RSAParameters)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: RSACryptoServiceProvider.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeySize
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: KeySize
  nameWithType: RSACryptoServiceProvider.KeySize
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.KeySize
- uid: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: PersistKeyInCsp
  nameWithType: RSACryptoServiceProvider.PersistKeyInCsp
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp
- uid: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: PublicOnly
  nameWithType: RSACryptoServiceProvider.PublicOnly
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: RSACryptoServiceProvider.SignatureAlgorithm
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: SignData(Byte[],Object)
  nameWithType: RSACryptoServiceProvider.SignData(Byte[],Object)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(Byte[],Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: SignData(Stream,Object)
  nameWithType: RSACryptoServiceProvider.SignData(Stream,Object)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(Stream,Object)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: SignData(Byte[],Int32,Int32,Object)
  nameWithType: RSACryptoServiceProvider.SignData(Byte[],Int32,Int32,Object)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(Byte[],Int32,Int32,Object)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: SignHash(Byte[],String)
  nameWithType: RSACryptoServiceProvider.SignHash(Byte[],String)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[],String)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)
  nameWithType: RSACryptoServiceProvider.SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[],HashAlgorithmName,RSASignaturePadding)
- uid: System.Security.Cryptography.RSASignaturePadding
  parent: System.Security.Cryptography
  isExternal: false
  name: RSASignaturePadding
  nameWithType: RSASignaturePadding
  fullName: System.Security.Cryptography.RSASignaturePadding
- uid: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: UseMachineKeyStore
  nameWithType: RSACryptoServiceProvider.UseMachineKeyStore
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: VerifyData(Byte[],Object,Byte[])
  nameWithType: RSACryptoServiceProvider.VerifyData(Byte[],Object,Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(Byte[],Object,Byte[])
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: VerifyHash(Byte[],String,Byte[])
  nameWithType: RSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)
  nameWithType: RSACryptoServiceProvider.VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)
  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(Byte[],Byte[],HashAlgorithmName,RSASignaturePadding)
- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: RSACryptoServiceProvider
  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider
- uid: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: RSACryptoServiceProvider.CspKeyContainerInfo
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: Decrypt
  nameWithType: RSACryptoServiceProvider.Decrypt
- uid: System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: DecryptValue
  nameWithType: RSACryptoServiceProvider.DecryptValue
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Dispose*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: Dispose
  nameWithType: RSACryptoServiceProvider.Dispose
- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: Encrypt
  nameWithType: RSACryptoServiceProvider.Encrypt
- uid: System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: EncryptValue
  nameWithType: RSACryptoServiceProvider.EncryptValue
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: ExportCspBlob
  nameWithType: RSACryptoServiceProvider.ExportCspBlob
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: ExportParameters
  nameWithType: RSACryptoServiceProvider.ExportParameters
- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: HashData
  nameWithType: RSACryptoServiceProvider.HashData
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: ImportCspBlob
  nameWithType: RSACryptoServiceProvider.ImportCspBlob
- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: ImportParameters
  nameWithType: RSACryptoServiceProvider.ImportParameters
- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: RSACryptoServiceProvider.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeySize*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: KeySize
  nameWithType: RSACryptoServiceProvider.KeySize
- uid: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: PersistKeyInCsp
  nameWithType: RSACryptoServiceProvider.PersistKeyInCsp
- uid: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: PublicOnly
  nameWithType: RSACryptoServiceProvider.PublicOnly
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: RSACryptoServiceProvider.SignatureAlgorithm
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: SignData
  nameWithType: RSACryptoServiceProvider.SignData
- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: SignHash
  nameWithType: RSACryptoServiceProvider.SignHash
- uid: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: UseMachineKeyStore
  nameWithType: RSACryptoServiceProvider.UseMachineKeyStore
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: VerifyData
  nameWithType: RSACryptoServiceProvider.VerifyData
- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash*
  parent: System.Security.Cryptography.RSACryptoServiceProvider
  isExternal: false
  name: VerifyHash
  nameWithType: RSACryptoServiceProvider.VerifyHash
