### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyBinding
  id: KeyBinding
  children:
  - System.Windows.Input.KeyBinding.#ctor
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyBinding.CreateInstanceCore
  - System.Windows.Input.KeyBinding.Gesture
  - System.Windows.Input.KeyBinding.Key
  - System.Windows.Input.KeyBinding.KeyProperty
  - System.Windows.Input.KeyBinding.Modifiers
  - System.Windows.Input.KeyBinding.ModifiersProperty
  langs:
  - csharp
  name: KeyBinding
  nameWithType: KeyBinding
  fullName: System.Windows.Input.KeyBinding
  type: Class
  summary: "バインド、 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>を<xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> (または別<xref:System.Windows.Input.ICommand>実装).</xref:System.Windows.Input.ICommand>"
  remarks: "キーの割り当てに関連付けます、<xref:System.Windows.Input.KeyGesture>で、 <xref:System.Windows.Input.ICommand>、 <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand>など</xref:System.Windows.Input.ICommand></xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.RoutedCommand>プライマリの実装、<xref:System.Windows.Input.ICommand>のためのインターフェイス、[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]システムのコマンドを実行します</xref:System.Windows.Input.ICommand>。</xref:System.Windows.Input.RoutedCommand>  通常、<xref:System.Windows.Input.KeyGesture>が実行されるコマンドが呼び出されるコマンドの動作は、さらに影響を受けるコマンド固有の要因によってなどが、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>値</xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A></xref:System.Windows.Input.KeyGesture>。  コマンド実行の詳細については、次を参照してください。、[コマンド実行の概要](~/add/includes/ajax-current-ext-md.md)です。       ファンクション キーと、テンキーのキーを有効なを除き<xref:System.Windows.Input.KeyGesture>1 つだけ含める必要があります<xref:System.Windows.Input.Key>と&1; つまたは複数<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>  ファンクション キーおよびテンキーのキーは必要ありません修飾子キーの有効な<xref:System.Windows.Input.KeyGesture>。</xref:System.Windows.Input.KeyGesture>をするために 無効なを指定することは<xref:System.Windows.Input.KeyGesture>とキーの割り当てに使用するか無効な関連付けられているジェスチャ、[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]またはコード</xref:System.Windows.Input.KeyGesture>。 インスタンスを作成してバインドを妨げる検証は行われません、<xref:System.Windows.Input.KeyGesture>修飾子がキーなし、またはのみ以外キーのみを格納している</xref:System.Windows.Input.KeyGesture>。 このようなキーの割り当ては、その関連付けられたコマンドを呼び出すことはありません試みます。       キーの割り当てを定義するときに[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture>を指定する&2; つの方法 最初の方法でキーの割り当てを確立するために[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]を定義するのには、<xref:System.Windows.Input.KeyBinding.Gesture%2A>により、キーと修飾子を&1; つの文字列、たとえば&quot;CTRL + P&quot;として指定する構文、keybinding を割り当てる要素の属性です</xref:System.Windows.Input.KeyBinding.Gesture%2A>。 2 番目の方法は、定義する、<xref:System.Windows.Input.KeyBinding.Key%2A>属性および<xref:System.Windows.Input.KeyBinding.Modifiers%2A>keybinding を割り当てる要素の属性です</xref:System.Windows.Input.KeyBinding.Modifiers%2A></xref:System.Windows.Input.KeyBinding.Key%2A>。 設定のどちらの方法、<xref:System.Windows.Input.KeyGesture>は同じと同一の基になるオブジェクトの変更がある場合は、両方の競合が使用されます</xref:System.Windows.Input.KeyGesture>。  場合と、 <xref:System.Windows.Input.KeyBinding.Key%2A>、 <xref:System.Windows.Input.KeyBinding.Modifiers%2A>、しこの<xref:System.Windows.Input.KeyBinding.Gesture%2A>属性は、すべて設定、定義されている属性最後が使われます<xref:System.Windows.Input.KeyGesture></xref:System.Windows.Input.KeyGesture></xref:System.Windows.Input.KeyBinding.Gesture%2A></xref:System.Windows.Input.KeyBinding.Modifiers%2A></xref:System.Windows.Input.KeyBinding.Key%2A>。 場所など、状況を持つ可能性のある、<xref:System.Windows.Input.KeyBinding.Key%2A>セット最後はジェスチャを前のキー コンポーネントだけを上書きしますが、同じジェスチャの修飾子のままにします</xref:System.Windows.Input.KeyBinding.Key%2A>。 一般に、お勧めのみに使用する、<xref:System.Windows.Input.KeyBinding.Gesture%2A>属性から[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]ですこのあいまいさを避ける、最も簡潔な構文、説明およびシリアル化の最も簡単な表現を提供します。</xref:System.Windows.Input.KeyBinding.Gesture%2A> 。       キーの割り当て、特定のオブジェクトまたはクラス レベルで登録すると、<xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A><xref:System.Windows.Input.CommandManager>クラス</xref:System.Windows.Input.CommandManager>の</xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>定義します。 コントロール テンプレートの設定内のキーの割り当てを定義する最も一般的な方法は、<xref:System.Windows.UIElement.InputBindings%2A>プロパティ[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]1 つまたは複数を宣言することによって<xref:System.Windows.Input.MouseBinding>または keybinding を割り当てる要素</xref:System.Windows.Input.MouseBinding></xref:System.Windows.UIElement.InputBindings%2A>。"
  example:
  - "The following example creates a KeyBinding and adds it to the <xref:System.Windows.Input.InputBindingCollection> of the root window.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerkeybindingcodebehind)]"
  syntax:
    content: 'public class KeyBinding : System.Windows.Input.InputBinding'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  - System.Windows.Input.InputBinding
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.Command
  - System.Windows.Input.InputBinding.CommandParameter
  - System.Windows.Input.InputBinding.CommandParameterProperty
  - System.Windows.Input.InputBinding.CommandProperty
  - System.Windows.Input.InputBinding.CommandTarget
  - System.Windows.Input.InputBinding.CommandTargetProperty
  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>クラスです。"
  syntax:
    content: public KeyBinding ();
    parameters: []
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>クラス<xref:System.Windows.Input.ICommand>と<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref></xref:System.Windows.Input.ICommand> 。"
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "関連付けるコマンド`gesture`です。"
    - id: gesture
      type: System.Windows.Input.KeyGesture
      description: "キーの組み合わせに関連付ける`command`です。"
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>command</code>or <code>gesture</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Input.KeyBinding&quot;> </xref>クラス<xref:System.Windows.Input.ICommand>と、指定した<xref href=&quot;System.Windows.Input.Key&quot;></xref>と<xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>に変換されますが、 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref></xref:System.Windows.Input.ICommand> 。"
  syntax:
    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "呼び出すコマンド。"
    - id: key
      type: System.Windows.Input.Key
      description: "関連付けられるキー`command`です。"
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "関連付けられる修飾子`command`です。"
  overload: System.Windows.Input.KeyBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "インスタンスを作成、 <xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>です。"
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "新しいオブジェクト。"
  overload: System.Windows.Input.KeyBinding.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Gesture
  id: Gesture
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得または設定に関連付けられたジェスチャ<xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>です。"
  remarks: "ファンクション キーと、テンキーを除いて、<xref:System.Windows.Input.KeyGesture>含める必要があります、<xref:System.Windows.Input.Key>と&1; つまたは複数<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand> using a <xref:System.Windows.Input.KeyBinding> (the markup and code examples specify different keys but are otherwise equivalent).  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public override System.Windows.Input.InputGesture Gesture { get; set; }
    return:
      type: System.Windows.Input.InputGesture
      description: "キーのシーケンス。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Input.KeyBinding.Gesture*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "値<code> gesture </code>に設定されているが、 <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Key
  id: Key
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得または設定、 <xref href=&quot;System.Windows.Input.Key&quot;> </xref>の<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>これに関連付けられている<xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>です。"
  remarks: "ファンクション キーと、テンキーを除いて、<xref:System.Windows.Input.KeyGesture>含める必要があります、<xref:System.Windows.Input.Key>と&1; つまたは複数<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>       定義するときに、<xref:System.Windows.Input.KeyBinding>で[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture>を指定する&2; つの方法がある</xref:System.Windows.Input.KeyBinding> 確立するために最初の方法、<xref:System.Windows.Input.KeyBinding>で[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]を定義するのには、<xref:System.Windows.Input.KeyBinding.Gesture%2A>の属性、<xref:System.Windows.Input.KeyBinding>要素は、キーと修飾子を&1; つの文字列、たとえば&quot;CTRL + P&quot;として指定する構文を使用します</xref:System.Windows.Input.KeyBinding></xref:System.Windows.Input.KeyBinding.Gesture%2A></xref:System.Windows.Input.KeyBinding>。 2 番目の方法は、キー属性を定義して、<xref:System.Windows.Input.KeyBinding.Modifiers%2A>の属性、<xref:System.Windows.Input.KeyBinding>要素</xref:System.Windows.Input.KeyBinding></xref:System.Windows.Input.KeyBinding.Modifiers%2A>。 設定のどちらの方法、<xref:System.Windows.Input.KeyGesture>は同じと同一の基になるオブジェクトの変更がある場合は、両方の競合が使用されます</xref:System.Windows.Input.KeyGesture>。  場合と、キー <xref:System.Windows.Input.KeyBinding.Modifiers%2A>、しこの<xref:System.Windows.Input.KeyBinding.Gesture%2A>属性は、すべて設定、定義されている属性最後が使われます<xref:System.Windows.Input.KeyGesture></xref:System.Windows.Input.KeyGesture></xref:System.Windows.Input.KeyBinding.Gesture%2A></xref:System.Windows.Input.KeyBinding.Modifiers%2A>。 可能性がある場合など、キーのセット最後はジェスチャを前のキー コンポーネントだけを上書きジェスチャの修飾子を同じままことができます。 一般に、お勧めのみに使用する、<xref:System.Windows.Input.KeyBinding.Gesture%2A>属性から[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]ですこのあいまいさを避ける、最も簡潔な構文、説明およびシリアル化の最も簡単な表現を提供します。</xref:System.Windows.Input.KeyBinding.Gesture%2A> 。"
  syntax:
    content: public System.Windows.Input.Key Key { get; set; }
    return:
      type: System.Windows.Input.Key
      description: "重要な部分、 <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。 既定値は<xref href=&quot;System.Windows.Input.Key&quot;></xref>です。"
  overload: System.Windows.Input.KeyBinding.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.KeyProperty
  id: KeyProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別、<xref:System.Windows.Input.KeyBinding.Key*>依存関係プロパティ</xref:System.Windows.Input.KeyBinding.Key*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty KeyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得または設定、 <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>の<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>これに関連付けられている<xref href=&quot;System.Windows.Input.KeyBinding&quot;></xref>です。"
  remarks: "ファンクション キーと、テンキーを除いて、<xref:System.Windows.Input.KeyGesture>含める必要があります、<xref:System.Windows.Input.Key>と&1; つまたは複数<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key> </xref:System.Windows.Input.KeyGesture>       定義するときに、<xref:System.Windows.Input.KeyBinding>で[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture>を指定する&2; つの方法がある</xref:System.Windows.Input.KeyBinding> 確立するために最初の方法、<xref:System.Windows.Input.KeyBinding>で[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]を定義するのには、<xref:System.Windows.Input.KeyBinding.Gesture%2A>の属性、<xref:System.Windows.Input.KeyBinding>要素は、キーと修飾子を&1; つの文字列、たとえば&quot;CTRL + P&quot;として指定する構文を使用します</xref:System.Windows.Input.KeyBinding></xref:System.Windows.Input.KeyBinding.Gesture%2A></xref:System.Windows.Input.KeyBinding>。 2 番目の方法は、定義する、<xref:System.Windows.Input.KeyBinding.Key%2A>属性との修飾子属性、<xref:System.Windows.Input.KeyBinding>要素</xref:System.Windows.Input.KeyBinding></xref:System.Windows.Input.KeyBinding.Key%2A>。 設定のどちらの方法、<xref:System.Windows.Input.KeyGesture>は同じと同一の基になるオブジェクトの変更がある場合は、両方の競合が使用されます</xref:System.Windows.Input.KeyGesture>。  場合と<xref:System.Windows.Input.KeyBinding.Key%2A>、修飾子、およびこの<xref:System.Windows.Input.KeyBinding.Gesture%2A>属性は、すべての設定、 <xref:System.Windows.Input.KeyGesture>.</xref:System.Windows.Input.KeyGesture>の最後に定義されている属性が使用されます</xref:System.Windows.Input.KeyBinding.Gesture%2A></xref:System.Windows.Input.KeyBinding.Key%2A> 場所など、状況を持つ可能性のある、<xref:System.Windows.Input.KeyBinding.Key%2A>セット最後はジェスチャを前のキー コンポーネントだけを上書きしますが、同じジェスチャの修飾子のままにします</xref:System.Windows.Input.KeyBinding.Key%2A>。 一般に、お勧めのみに使用する、<xref:System.Windows.Input.KeyBinding.Gesture%2A>属性から[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]ですこのあいまいさを避ける、最も簡潔な構文、説明およびシリアル化の最も簡単な表現を提供します。</xref:System.Windows.Input.KeyBinding.Gesture%2A> 。      <a name=&quot;xamlAttributeUsage_Modifiers&quot;></a>## XAML 属性の使用```   <object Modifiers=&quot;oneOrMoreModifierKeys&quot;/>      ``` <a name=&quot;xamlValues_Modifiers&quot;> </a> ## XAML 値*oneOrMoreModifierKeys*によって定義された&1; つまたは複数の修飾子キー、<xref:System.Windows.Input.ModifierKeys>列挙型、「+」文字で区切られます</xref:System.Windows.Input.ModifierKeys>。      "
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; set; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "修飾子キー、 <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。  既定値は<xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>です。"
  overload: System.Windows.Input.KeyBinding.Modifiers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  id: ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  langs:
  - csharp
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別、<xref:System.Windows.Input.KeyBinding.Modifiers*>依存関係プロパティ</xref:System.Windows.Input.KeyBinding.Modifiers*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ModifiersProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputBinding
  isExternal: false
  name: System.Windows.Input.InputBinding
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Input.KeyBinding.#ctor
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding()
  nameWithType: KeyBinding.KeyBinding()
  fullName: System.Windows.Input.KeyBinding.KeyBinding()
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,KeyGesture)
  nameWithType: KeyBinding.KeyBinding(ICommand,KeyGesture)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,KeyGesture)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.KeyGesture
  parent: System.Windows.Input
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding(ICommand,Key,ModifierKeys)
  nameWithType: KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
  fullName: System.Windows.Input.KeyBinding.KeyBinding(ICommand,Key,ModifierKeys)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: KeyBinding.CreateInstanceCore()
  fullName: System.Windows.Input.KeyBinding.CreateInstanceCore()
- uid: System.Windows.Freezable
  parent: System.Windows
  isExternal: false
  name: Freezable
  nameWithType: Freezable
  fullName: System.Windows.Freezable
- uid: System.Windows.Input.KeyBinding.Gesture
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
  fullName: System.Windows.Input.KeyBinding.Gesture
- uid: System.Windows.Input.InputGesture
  parent: System.Windows.Input
  isExternal: false
  name: InputGesture
  nameWithType: InputGesture
  fullName: System.Windows.Input.InputGesture
- uid: System.Windows.Input.KeyBinding.Key
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
  fullName: System.Windows.Input.KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.KeyProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyProperty
  nameWithType: KeyBinding.KeyProperty
  fullName: System.Windows.Input.KeyBinding.KeyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.KeyBinding.Modifiers
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
  fullName: System.Windows.Input.KeyBinding.Modifiers
- uid: System.Windows.Input.KeyBinding.ModifiersProperty
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: ModifiersProperty
  nameWithType: KeyBinding.ModifiersProperty
  fullName: System.Windows.Input.KeyBinding.ModifiersProperty
- uid: System.Windows.Input.KeyBinding.#ctor*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: KeyBinding
  nameWithType: KeyBinding.KeyBinding
- uid: System.Windows.Input.KeyBinding.CreateInstanceCore*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: CreateInstanceCore
  nameWithType: KeyBinding.CreateInstanceCore
- uid: System.Windows.Input.KeyBinding.Gesture*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Gesture
  nameWithType: KeyBinding.Gesture
- uid: System.Windows.Input.KeyBinding.Key*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Key
  nameWithType: KeyBinding.Key
- uid: System.Windows.Input.KeyBinding.Modifiers*
  parent: System.Windows.Input.KeyBinding
  isExternal: false
  name: Modifiers
  nameWithType: KeyBinding.Modifiers
