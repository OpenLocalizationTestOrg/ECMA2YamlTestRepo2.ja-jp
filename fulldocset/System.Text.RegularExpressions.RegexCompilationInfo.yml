### YamlMime:ManagedReference
items:
- uid: System.Text.RegularExpressions.RegexCompilationInfo
  id: RegexCompilationInfo
  children:
  - System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)
  - System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)
  - System.Text.RegularExpressions.RegexCompilationInfo.IsPublic
  - System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout
  - System.Text.RegularExpressions.RegexCompilationInfo.Name
  - System.Text.RegularExpressions.RegexCompilationInfo.Namespace
  - System.Text.RegularExpressions.RegexCompilationInfo.Options
  - System.Text.RegularExpressions.RegexCompilationInfo.Pattern
  langs:
  - csharp
  name: RegexCompilationInfo
  nameWithType: RegexCompilationInfo
  fullName: System.Text.RegularExpressions.RegexCompilationInfo
  type: Class
  summary: "スタンドアロンのアセンブリを正規表現のコンパイルに使用される正規表現について説明します。"
  remarks: "RegexCompilationInfo オブジェクトの配列が渡される、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>各正規表現をアセンブリに含まれる情報を提供するメソッド</xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>。 アセンブリに含まれているコンパイル済みの各正規表現は、 <xref:System.Text.RegularExpressions.Regex>。</xref:System.Text.RegularExpressions.Regex>から派生するクラスとして表されます。 RegexCompilationInfo 型のプロパティは、正規表現のクラス名、完全修飾名 (つまり、その名前空間とその型の名前)、正規表現パターン、(かどうか、正規表現が区別されません) などその他のオプションおよび、正規表現エンジンが一致を検索する必要があります期間で指定されたタイムアウト期間を定義します。       クラスのオーバー ロードされたコンス トラクターを呼び出して RegexCompilationInfo オブジェクトをインスタンス化することができます。"
  syntax:
    content: public class RegexCompilationInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)'
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  langs:
  - csharp
  name: RegexCompilationInfo(String,RegexOptions,String,String,Boolean)
  nameWithType: RegexCompilationInfo.RegexCompilationInfo(String,RegexOptions,String,String,Boolean)
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.RegexCompilationInfo(String,RegexOptions,String,String,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Text.RegularExpressions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Text.RegularExpressions.RegexCompilationInfo&quot;> </xref>アセンブリに含まれる正規表現に関する情報を格納するクラス。"
  remarks: "RegexCompilationInfo コンス トラクターの各パラメーターは、<xref:System.Text.RegularExpressions.RegexCompilationInfo>クラス</xref:System.Text.RegularExpressions.RegexCompilationInfo>のプロパティに直接対応します。 すべてのプロパティは読み取り/書き込みであるためは、その値が直接割り当てることもできます。       <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドには、コンパイルされた正規表現を格納するアセンブリが生成されます</xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>。 そのため、指定しないでください<xref:System.Text.RegularExpressions.RegexOptions>の値の&1; つとして`options`</xref:System.Text.RegularExpressions.RegexOptions>。       場合`ispublic`は`true`、コンパイルされた正規表現クラスは、パブリック アクセシビリティを指定します。 つまり、任意のアセンブリで実行するコードからインスタンス化することができます。 場合`ispublic`は`false`、コンパイルされた正規表現クラスが指定された`internal`(C# の場合) または`Friend`(Visual Basic) のアクセシビリティ。 つまり、正規表現クラスと同じアセンブリで実行するコードからのみインスタンス化することができます。"
  example:
  - "The following example creates and uses a compiled regular expression in two steps.  \n  \n In the first step, compile and execute the following code example. The RegexCompilationInfo constructor in the code example defines a compiled regular expression. The result of executing the code is an assembly named FishRegex.dll that contains a compiled regular expression type named `FishRegex`.  \n  \n [!code-cs[sys.txt.rgxCompInfo#1](~/add/codesnippet/csharp/7e273a6c-e154-4435-ab93-_1.cs)]\n [!code-vb[sys.txt.rgxCompInfo#1](~/add/codesnippet/visualbasic/7e273a6c-e154-4435-ab93-_1.vb)]  \n  \n In the second step, compile the following code example using a reference to FishRegex.dll, and then run the resulting executable file. The executable file matches a target string by using the `FishRegex` type, and displays the match, group, capture group, and index position of the matches in the target string.  \n  \n [!code-vb[sys.txt.rgxCompInfo#2](~/add/codesnippet/visualbasic/7e273a6c-e154-4435-ab93-_2.vb)]\n [!code-cs[sys.txt.rgxCompInfo#2](~/add/codesnippet/csharp/7e273a6c-e154-4435-ab93-_2.cs)]"
  syntax:
    content: public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);
    parameters:
    - id: pattern
      type: System.String
      description: "コンパイルする正規表現。"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "正規表現をコンパイルするときに使用する正規表現のオプションです。"
    - id: name
      type: System.String
      description: "コンパイルされた正規表現を表す型の名前です。"
    - id: fullnamespace
      type: System.String
      description: "新しい型が属する名前空間。"
    - id: ispublic
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>コンパイル済みの正規表現をパブリックに表示されるようにするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Text.RegularExpressions.RegexCompilationInfo.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>&lt;xref:System.String?displayProperty=fullName&gt;です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>name</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>fullnamespace</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)
  id: '#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)'
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  langs:
  - csharp
  name: RegexCompilationInfo(String,RegexOptions,String,String,Boolean,TimeSpan)
  nameWithType: RegexCompilationInfo.RegexCompilationInfo(String,RegexOptions,String,String,Boolean,TimeSpan)
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.RegexCompilationInfo(String,RegexOptions,String,String,Boolean,TimeSpan)
  type: Constructor
  assemblies:
  - System
  namespace: System.Text.RegularExpressions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Text.RegularExpressions.RegexCompilationInfo&quot;> </xref>アセンブリに含まれる指定したタイムアウト値を持つ、正規表現に関する情報を格納するクラス。"
  remarks: "各パラメーターの<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>直接コンス トラクターは、<xref:System.Text.RegularExpressions.RegexCompilationInfo>クラス</xref:System.Text.RegularExpressions.RegexCompilationInfo>のプロパティに対応しています</xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> すべてのプロパティは読み取り/書き込みであるためは、その値が直接割り当てることもできます。       <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドには、コンパイルされた正規表現を格納するアセンブリが生成されます</xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>。 そのため、指定しないでください<xref:System.Text.RegularExpressions.RegexOptions>の値の&1; つとして`options`</xref:System.Text.RegularExpressions.RegexOptions>。       場合`ispublic`は`true`、コンパイルされた正規表現クラスは、パブリック アクセシビリティを指定します。 つまり、任意のアセンブリで実行するコードからインスタンス化することができます。 場合`ispublic`は`false`、コンパイルされた正規表現クラスが指定された`internal`(C# の場合) または`Friend`(Visual Basic) のアクセシビリティ。 つまり、正規表現クラスと同じアセンブリで実行するコードからのみインスタンス化することができます。       `matchTimeout`パラメーターは、コンパイルされた正規表現の既定のタイムアウト間隔を定義します。 この値は概算の操作がタイムアウトになると、正規表現エンジンをスローする前に、コンパイルされた正規表現オブジェクトは&1; つの一致操作を実行する時間を表す、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>、次のタイミング チェック中に例外です</xref:System.Text.RegularExpressions.RegexMatchTimeoutException>。 タイムアウト値の詳細については、次を参照してください、<xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>プロパティ。</xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> 。      > [!IMPORTANT] > 常にコンパイルされる正規表現の既定のタイムアウト値を設定することをお勧めします。 渡すことによって、正規表現ライブラリのコンシューマーがそのタイムアウト値をオーバーライドできます、<xref:System.TimeSpan>をこのコンス トラクター オーバー ロードに新しいタイムアウト間隔を表す値</xref:System.TimeSpan>。"
  example:
  - "The following example defines a single compiled regular expression named `DuplicateChars` that identifies two or more occurrences of the same character in an input string. The compiled regular expression has a default time-out of 2 seconds. When you execute the example, it creates a class library named RegexLib.dll that contains the compiled regular expression.  \n  \n [!code-cs[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/add/codesnippet/csharp/caa070a5-44ee-405f-81e7-_1.cs)]\n [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/add/codesnippet/visualbasic/caa070a5-44ee-405f-81e7-_1.vb)]  \n  \n The regular expression pattern `(\\w)\\1+` is defined as shown in the following table.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`(\\w)`|Match any word character and assign it to the first capturing group.|  \n|`\\1+`|Match one or more occurrences of the value of the first captured group.|  \n  \n The following example uses the `DuplicatedChars` regular expression to identify duplicate characters in a string array. When it calls the `DuplicatedChars` constructor, it changes the time-out interval to .5 seconds.  \n  \n [!code-cs[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/add/codesnippet/csharp/caa070a5-44ee-405f-81e7-_2.cs)]\n [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/add/codesnippet/visualbasic/caa070a5-44ee-405f-81e7-_2.vb)]"
  syntax:
    content: public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);
    parameters:
    - id: pattern
      type: System.String
      description: "コンパイルする正規表現。"
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: "正規表現をコンパイルするときに使用する正規表現のオプションです。"
    - id: name
      type: System.String
      description: "コンパイルされた正規表現を表す型の名前です。"
    - id: fullnamespace
      type: System.String
      description: "新しい型が属する名前空間。"
    - id: ispublic
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>コンパイル済みの正規表現をパブリックに表示されるようにするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: matchTimeout
      type: System.TimeSpan
      description: "正規表現の既定のタイムアウト間隔です。"
  overload: System.Text.RegularExpressions.RegexCompilationInfo.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>&lt;xref:System.String?displayProperty=fullName&gt;です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>pattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>name</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>fullnamespace</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>matchTimeout</code>負の値、0、または約 24 日より大きい。"
  platform:
  - net462
- uid: System.Text.RegularExpressions.RegexCompilationInfo.IsPublic
  id: IsPublic
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  langs:
  - csharp
  name: IsPublic
  nameWithType: RegexCompilationInfo.IsPublic
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.IsPublic
  type: Property
  assemblies:
  - System
  namespace: System.Text.RegularExpressions
  summary: "取得またはコンパイルされた正規表現がパブリックな可視性を持つかどうかを示す値を設定します。"
  remarks: "IsPublic プロパティが場合`false`、現在のインスタンスで定義された正規表現クラスは、クラスが含まれているアセンブリで実行されているコードでのみインスタンス化できます。 ただし、ため、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=fullName>コンパイルされる正規表現のみを含み、追加する追加のコードを許可しないアセンブリを生成するメソッド、通常、このプロパティの値を代入する必要はありません`false`</xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=fullName>。"
  syntax:
    content: public bool IsPublic { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、正規表現があるパブリックな可視性です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Text.RegularExpressions.RegexCompilationInfo.IsPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout
  id: MatchTimeout
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  langs:
  - csharp
  name: MatchTimeout
  nameWithType: RegexCompilationInfo.MatchTimeout
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Text.RegularExpressions
  summary: "取得または正規表現の既定のタイムアウト間隔を設定します。"
  remarks: "MatchTimeout プロパティでは、コンパイルされた正規表現の既定のタイムアウト間隔を定義します。 この値は概算の操作がタイムアウトになると、正規表現エンジンをスローする前に、コンパイルされた正規表現は単一の一致操作を実行する時間を表す、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>、次のタイミング チェック中に例外です</xref:System.Text.RegularExpressions.RegexMatchTimeoutException>。      > [!IMPORTANT] > 常にコンパイルされる正規表現の既定のタイムアウト値を設定することをお勧めします。 渡すことによって、正規表現ライブラリのコンシューマーがそのタイムアウト値をオーバーライドできます、<xref:System.TimeSpan>コンパイルされた正規表現のクラスのコンス トラクターへの新しいタイムアウト間隔を表す値</xref:System.TimeSpan>。       既定のタイムアウト値を割り当てることができます、<xref:System.Text.RegularExpressions.RegexCompilationInfo>で、次の方法のいずれかのオブジェクト: - を呼び出して、<xref:System.AppDomain.SetData%2A?displayProperty=fullName>メソッドとの文字列表現を提供する、 <xref:System.TimeSpan>&quot;REGEX_DEFAULT_MATCH_TIMEOUT&quot;プロパティの値</xref:System.TimeSpan></xref:System.AppDomain.SetData%2A?displayProperty=fullName></xref:System.Text.RegularExpressions.RegexCompilationInfo>。      呼び出して、<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29>コンス トラクターとの値を提供する、`matchTimeout`パラメーター</xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> 。      -によってこのプロパティの値を設定します。       妥当なタイムアウトの間隔を設定するには、次の要因を検討してください:-の長さと複雑さ、正規表現パターンです。 時間が長く、複雑な正規表現では、短くてわかりやすいものよりも時間が必要です。      予想されるマシン負荷します。 処理では、CPU およびメモリ使用率が高いシステムでより多くの時間がかかります。"
  example:
  - "The following example defines a single compiled regular expression named `DuplicateChars` that identifies two or more occurrences of the same character in an input string. The compiled regular expression has a default time-out of 2 seconds. When you execute the example, it creates a class library named RegexLib.dll that contains the compiled regular expression.  \n  \n [!code-cs[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/add/codesnippet/csharp/p-system.text.regularexp_1.cs)]\n [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/add/codesnippet/visualbasic/p-system.text.regularexp_1.vb)]  \n  \n The regular expression pattern `(\\w)\\1+` is defined as shown in the following table.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`(\\w)`|Match any word character and assign it to the first capturing group.|  \n|`\\1+`|Match one or more occurrences of the value of the first captured group.|  \n  \n The following example uses the `DuplicatedChars` regular expression to identify duplicate characters in a string array. When it calls the `DuplicatedChars` constructor, it changes the time-out interval to .5 seconds.  \n  \n [!code-cs[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/add/codesnippet/csharp/p-system.text.regularexp_2.cs)]\n [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/add/codesnippet/visualbasic/p-system.text.regularexp_2.vb)]"
  syntax:
    content: public TimeSpan MatchTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "前に、のパターン マッチング操作で経過できる既定の最大時間間隔、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>スローされると、または&lt;xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName&gt;タイムアウトが無効になっている場合</xref:System.Text.RegularExpressions.RegexMatchTimeoutException>。"
  overload: System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Name
  id: Name
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  langs:
  - csharp
  name: Name
  nameWithType: RegexCompilationInfo.Name
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.Name
  type: Property
  assemblies:
  - System
  namespace: System.Text.RegularExpressions
  summary: "取得またはコンパイルされた正規表現を表す型の名前を設定します。"
  remarks: "<xref:System.Text.RegularExpressions.RegexCompilationInfo> <xref:System.Text.RegularExpressions.Regex>。</xref:System.Text.RegularExpressions.Regex>から派生するクラスとして表されますが、コンパイルされた正規表現を定義するクラスを使用</xref:System.Text.RegularExpressions.RegexCompilationInfo>する Name プロパティが、正規表現型のクラス名を定義し、<xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>し、名前のプロパティは一緒に、完全修飾名を定義します</xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>。"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "新しい型の名前です。"
  overload: System.Text.RegularExpressions.RegexCompilationInfo.Name*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "このプロパティの値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "このプロパティの値は、空の文字列です。"
  platform:
  - net462
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Namespace
  id: Namespace
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  langs:
  - csharp
  name: Namespace
  nameWithType: RegexCompilationInfo.Namespace
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.Namespace
  type: Property
  assemblies:
  - System
  namespace: System.Text.RegularExpressions
  summary: "取得または新しい型が属する名前空間を設定します。"
  remarks: "<xref:System.Text.RegularExpressions.RegexCompilationInfo> <xref:System.Text.RegularExpressions.Regex>。</xref:System.Text.RegularExpressions.Regex>から派生するクラスとして表されますが、コンパイルされた正規表現を定義するクラスを使用</xref:System.Text.RegularExpressions.RegexCompilationInfo>する Namespace プロパティを定義、コンパイルされた正規表現の種類、および、Namespace を含む名前空間と<xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>プロパティが同時に、完全修飾名を定義します</xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>。"
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "新しい型の名前空間です。"
  overload: System.Text.RegularExpressions.RegexCompilationInfo.Namespace*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "このプロパティの値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Options
  id: Options
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  langs:
  - csharp
  name: Options
  nameWithType: RegexCompilationInfo.Options
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.Options
  type: Property
  assemblies:
  - System
  namespace: System.Text.RegularExpressions
  summary: "取得または正規表現をコンパイルするときに使用するオプションを設定します。"
  remarks: "<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドには、コンパイルされた正規表現を格納するアセンブリが生成されます</xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>。 そのためを指定する必要はいない<xref:System.Text.RegularExpressions.RegexOptions>としてこのプロパティの値のいずれか</xref:System.Text.RegularExpressions.RegexOptions>。 これが存在する場合、<xref:System.Text.RegularExpressions.RegexOptions>オプションは無視されます</xref:System.Text.RegularExpressions.RegexOptions>。"
  syntax:
    content: public System.Text.RegularExpressions.RegexOptions Options { get; set; }
    return:
      type: System.Text.RegularExpressions.RegexOptions
      description: "列挙値のビットごとの組み合わせ。"
  overload: System.Text.RegularExpressions.RegexCompilationInfo.Options*
  exceptions: []
  platform:
  - net462
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Pattern
  id: Pattern
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  langs:
  - csharp
  name: Pattern
  nameWithType: RegexCompilationInfo.Pattern
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.Pattern
  type: Property
  assemblies:
  - System
  namespace: System.Text.RegularExpressions
  summary: "取得またはコンパイルする正規表現を設定します。"
  remarks: "パターン プロパティは、任意の有効な正規表現を含めることができます。 パターンのプロパティの値が正しい構文の正規表現パターンでは、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドはスロー <xref:System.ArgumentException>。</xref:System.ArgumentException></xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>への呼び出しではない場合"
  syntax:
    content: public string Pattern { get; set; }
    return:
      type: System.String
      description: "コンパイルする正規表現。"
  overload: System.Text.RegularExpressions.RegexCompilationInfo.Pattern*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "このプロパティの値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: RegexCompilationInfo(String,RegexOptions,String,String,Boolean)
  nameWithType: RegexCompilationInfo.RegexCompilationInfo(String,RegexOptions,String,String,Boolean)
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.RegexCompilationInfo(String,RegexOptions,String,String,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.RegularExpressions.RegexOptions
  parent: System.Text.RegularExpressions
  isExternal: true
  name: RegexOptions
  nameWithType: RegexOptions
  fullName: System.Text.RegularExpressions.RegexOptions
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: RegexCompilationInfo(String,RegexOptions,String,String,Boolean,TimeSpan)
  nameWithType: RegexCompilationInfo.RegexCompilationInfo(String,RegexOptions,String,String,Boolean,TimeSpan)
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.RegexCompilationInfo(String,RegexOptions,String,String,Boolean,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Text.RegularExpressions.RegexCompilationInfo.IsPublic
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: IsPublic
  nameWithType: RegexCompilationInfo.IsPublic
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.IsPublic
- uid: System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: MatchTimeout
  nameWithType: RegexCompilationInfo.MatchTimeout
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Name
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: Name
  nameWithType: RegexCompilationInfo.Name
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.Name
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Namespace
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: Namespace
  nameWithType: RegexCompilationInfo.Namespace
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.Namespace
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Options
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: Options
  nameWithType: RegexCompilationInfo.Options
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.Options
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Pattern
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: Pattern
  nameWithType: RegexCompilationInfo.Pattern
  fullName: System.Text.RegularExpressions.RegexCompilationInfo.Pattern
- uid: System.Text.RegularExpressions.RegexCompilationInfo.#ctor*
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: RegexCompilationInfo
  nameWithType: RegexCompilationInfo.RegexCompilationInfo
- uid: System.Text.RegularExpressions.RegexCompilationInfo.IsPublic*
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: IsPublic
  nameWithType: RegexCompilationInfo.IsPublic
- uid: System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout*
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: MatchTimeout
  nameWithType: RegexCompilationInfo.MatchTimeout
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Name*
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: Name
  nameWithType: RegexCompilationInfo.Name
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Namespace*
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: Namespace
  nameWithType: RegexCompilationInfo.Namespace
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Options*
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: Options
  nameWithType: RegexCompilationInfo.Options
- uid: System.Text.RegularExpressions.RegexCompilationInfo.Pattern*
  parent: System.Text.RegularExpressions.RegexCompilationInfo
  isExternal: false
  name: Pattern
  nameWithType: RegexCompilationInfo.Pattern
