### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DSACryptoServiceProvider
  id: DSACryptoServiceProvider
  children:
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  - System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  - System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  - System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  - System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  - System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  - System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: DSACryptoServiceProvider
  nameWithType: DSACryptoServiceProvider
  fullName: System.Security.Cryptography.DSACryptoServiceProvider
  type: Class
  summary: "暗号化サービス プロバイダー (CSP) の実装にアクセスするラッパー オブジェクトの定義、 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>アルゴリズムです。 このクラスは継承できません。"
  remarks: "DSACryptoServiceProvider クラスを使用して、デジタル署名を作成し、データの整合性を保護することができます。       公開キー システムを使用して、メッセージのデジタル署名、送信者はまず、メッセージ ダイジェストを作成するメッセージをハッシュ関数を適用します。 送信者は、送信者の個人用の署名を作成する、送信側の秘密キーで、メッセージ ダイジェストを暗号化します。 メッセージと署名を受信したときに、受信者は、メッセージ ダイジェストを復元する送信者の公開キーを使用して署名を復号化され、送信者が使用されるのと同じハッシュ アルゴリズムを使用してメッセージをハッシュします。 メッセージ ダイジェストが、送信者から受け取ったメッセージ ダイジェストを受信者が完全に一致する計算、受信側はメッセージが転送中に変更されなかったことを確認できます。 送信者の公開キーは、一般的な知識があるため、すべてのユーザーが、署名を検証できることに注意してください。      > [!NOTE] > 新しい非対称アルゴリズムが使用できます。 <xref:System.Security.Cryptography.RSACryptoServiceProvider>DSACryptoServiceProvider クラスではなくクラス</xref:System.Security.Cryptography.RSACryptoServiceProvider>の使用を検討してください。 レガシ アプリケーションとデータとの互換性のみ DSACryptoServiceProvider を使用します。       このアルゴリズムは、64 ビット単位で、1024 ビットから 512 ビットのキー長をサポートします。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class DSACryptoServiceProvider : System.Security.Cryptography.DSA, System.Security.Cryptography.ICspAsymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.DSA
  implements:
  - System.Security.Cryptography.ICspAsymmetricAlgorithm
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.DSA.Create
  - System.Security.Cryptography.DSA.Create(System.String)
  - System.Security.Cryptography.DSA.FromXmlString(System.String)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider()
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref>クラスです。"
  syntax:
    content: public DSACryptoServiceProvider ();
    parameters: []
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(Int32)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref>指定されたキー サイズを持つクラス。"
  syntax:
    content: public DSACryptoServiceProvider (int dwKeySize);
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "ビット単位で非対称アルゴリズムのキーのサイズ。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref>暗号化サービス プロバイダー (CSP) の指定されたパラメーターを持つクラス。"
  syntax:
    content: public DSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "CSP のパラメーターです。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(Int32,CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref>指定されたキー サイズと暗号化サービス プロバイダー (CSP) のパラメーターを持つクラス。"
  syntax:
    content: public DSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "Bits の暗号化アルゴリズムのキーのサイズ。"
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "CSP のパラメーターです。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "CSP を取得することはできません。       または、キーを作成することはできません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>dwKeySize</code>範囲外です。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  id: CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: CreateSignature(Byte[])
  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "作成、 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>指定されたデータの署名。"
  syntax:
    content: public override byte[] CreateSignature (byte[] rgbHash);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "署名されるデータ。"
    return:
      type: System.Byte[]
      description: "指定されたデータのデジタル署名。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  id: CspKeyContainerInfo
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得、 <xref href=&quot;System.Security.Cryptography.CspKeyContainerInfo&quot;> </xref>暗号化キーの組に関する追加情報を記述するオブジェクト。"
  remarks: "CspKeyContainerInfo プロパティを使用すると、暗号化キーの組に関する追加情報を取得できます。  返された<xref:System.Security.Cryptography.CspKeyContainerInfo>記述かどうか、キーがエクスポート可能なおよびキー コンテナー名、プロバイダーに関する情報およびその他の情報を指定するオブジェクト</xref:System.Security.Cryptography.CspKeyContainerInfo>。       ランダムなキーが生成された場合、キー コンテナーは作成されません、キーを使用するメソッドを呼び出すまでです。  一部のプロパティ、 <xref:System.Security.Cryptography.CspKeyContainerInfo>CspKeyContainerInfo プロパティによって返されるオブジェクトがスローされます、<xref:System.Security.Cryptography.CryptographicException>キー コンテナーが作成されていない場合</xref:System.Security.Cryptography.CryptographicException></xref:System.Security.Cryptography.CspKeyContainerInfo>。  キー コンテナーが作成されていることを確認するにメソッドを呼び出すよう<xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>、 <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>、 <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>、<xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>など、CspKeyContainerInfo プロパティを呼び出す前にします</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A></xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A></xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A></xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>。"
  syntax:
    content: public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }
    return:
      type: System.Security.Cryptography.CspKeyContainerInfo
      description: "A <xref href=&quot;System.Security.Cryptography.CspKeyContainerInfo&quot;> </xref>暗号化キーの組に関する追加情報を記述するオブジェクト。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  id: ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ExportCspBlob(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "関連付けられたキー情報を含む blob をエクスポート、 <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref>オブジェクト。"
  remarks: "ExportCspBlob メソッドで、アンマネージ Microsoft 暗号化 API (CAPI) 互換性のある重要な情報を含む blob を返します。"
  syntax:
    content: public byte[] ExportCspBlob (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>秘密キーを含めるそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Byte[]
      description: "関連付けられたキー情報を格納するバイト配列、 <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "エクスポート、 <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;></xref>です。"
  syntax:
    content: public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プライベート パラメーターを含めるそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Security.Cryptography.DSAParameters
      description: "パラメーターの<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>です。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "キーをエクスポートできません。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "追加します。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "追加します。"
    return:
      type: System.Byte[]
      description: "追加します。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "追加します。"
    - id: offset
      type: System.Int32
      description: "追加します。"
    - id: count
      type: System.Int32
      description: "追加します。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "追加します。"
    return:
      type: System.Byte[]
      description: "追加します。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  id: ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ImportCspBlob(Byte[])
  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "DSA キー情報を表す blob をインポートします。"
  remarks: "ImportCspBlob メソッドの主要なデータの初期化、<xref:System.Security.Cryptography.DSACryptoServiceProvider>オブジェクトで、アンマネージ Microsoft 暗号化 API (CAPI) 互換性のある blob を使用しています</xref:System.Security.Cryptography.DSACryptoServiceProvider>。"
  syntax:
    content: public void ImportCspBlob (byte[] keyBlob);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "DSA キー blob を表すバイト配列。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  id: ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ImportParameters(DSAParameters)
  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したインポート<xref href=&quot;System.Security.Cryptography.DSAParameters&quot;></xref>です。"
  syntax:
    content: public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.DSAParameters
      description: "パラメーターの<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>です。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "暗号化サービス プロバイダー (CSP) を取得できません。       - または -、 <code> parameters </code>パラメーターが存在しないフィールドです。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "キー交換アルゴリズムの名前を取得します。"
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "キー交換アルゴリズムの名前。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  id: KeySize
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "ビット単位で非対称アルゴリズムで使用するキーのサイズを取得します。"
  remarks: "このアルゴリズムは、64 ビット単位で、1024 ビットから 512 ビットのキー長をサポートします。       <xref:System.Security.Cryptography.DSACryptoServiceProvider>クラス KeySize プロパティを使用してキーのサイズの変更はできません</xref:System.Security.Cryptography.DSACryptoServiceProvider>。  このプロパティに書き込まれた任意の値は、エラーなしでプロパティを更新できなくなります。  キーのサイズを変更するには、コンス トラクター オーバー ロードのいずれかを使用します。"
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "非対称アルゴリズムで使用するキーのサイズ。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  id: PersistKeyInCsp
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得または暗号化サービス プロバイダー (CSP) にキーを永続化するかどうかを示す値を設定します。"
  remarks: "キー コンテナー内のキーを永続化する場合は、このプロパティを使用します。"
  syntax:
    content: public bool PersistKeyInCsp { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>CSP にキーを永続化する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  id: PublicOnly
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref>オブジェクトには、公開キーのみが含まれています。"
  remarks: "<xref:System.Security.Cryptography.DSACryptoServiceProvider>クラスが初期化されたか、公開キーだけで、または両方パブリックとプライベート キーを指定できます</xref:System.Security.Cryptography.DSACryptoServiceProvider>。  PublicOnly プロパティを使用して、現在のインスタンスには、公開キーのみまたは公開および秘密キーの両方が含まれるかどうかを判断します。"
  syntax:
    content: public bool PublicOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref>オブジェクトには、パブリックのみが含まれています。 キー、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "署名アルゴリズムの名前を取得します。"
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "署名アルゴリズムの名前です。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  id: SignData(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Byte[])
  nameWithType: DSACryptoServiceProvider.SignData(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したバイト配列のハッシュ値を計算し、結果のハッシュ値に署名します。"
  remarks: "このメソッドを使用して確認されるデジタル署名を作成、<xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>メソッド</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>。       <xref:System.Security.Cryptography.DSA>使用して、<xref:System.Security.Cryptography.SHA1>ハッシュ アルゴリズム</xref:System.Security.Cryptography.SHA1>。</xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignData (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "ハッシュを計算する対象の入力データ。"
    return:
      type: System.Byte[]
      description: "<xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>指定されたデータの署名。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  id: SignData(System.IO.Stream)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Stream)
  nameWithType: DSACryptoServiceProvider.SignData(Stream)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定された入力ストリームのハッシュ値を計算し、結果のハッシュ値に署名します。"
  remarks: "<xref:System.Security.Cryptography.DSA>使用して、<xref:System.Security.Cryptography.SHA1>ハッシュ アルゴリズム</xref:System.Security.Cryptography.SHA1>。</xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignData (System.IO.Stream inputStream);
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: "ハッシュを計算する対象の入力データ。"
    return:
      type: System.Byte[]
      description: "<xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>指定されたデータの署名。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  id: SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32)
  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "記号が指定された開始されてからのバイト配列は、指定したエンドポイントをポイントします。"
  remarks: "このメソッドを使用して確認されるデジタル署名を作成、<xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>メソッド</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>。       <xref:System.Security.Cryptography.DSA>使用して、<xref:System.Security.Cryptography.SHA1>ハッシュ アルゴリズム</xref:System.Security.Cryptography.SHA1>。</xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignData (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "入力データに署名します。"
    - id: offset
      type: System.Int32
      description: "配列内のデータの使用を開始するオフセットです。"
    - id: count
      type: System.Int32
      description: "データとして使用する配列内のバイト数。"
    return:
      type: System.Byte[]
      description: "<xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>指定されたデータの署名。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  id: SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignHash(Byte[],String)
  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "秘密キーで暗号化することによって、指定したハッシュ値の署名を計算します。"
  remarks: "このメソッドを使用して確認されるデジタル署名を作成、<xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>メソッド</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>。       <xref:System.Security.Cryptography.DSA>使用して、<xref:System.Security.Cryptography.SHA1>ハッシュ アルゴリズム</xref:System.Security.Cryptography.SHA1>。</xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignHash (byte[] rgbHash, string str);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "署名されるデータのハッシュ値。"
    - id: str
      type: System.String
      description: "データのハッシュ値を作成するために使用するハッシュ アルゴリズムの名前です。"
    return:
      type: System.Byte[]
      description: "<xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>指定したハッシュ値の署名。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "暗号化サービス プロバイダー (CSP) を取得できません。       または、秘密キーがありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  id: UseMachineKeyStore
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得またはキーをユーザー プロファイル ストアではなく、コンピューターのキー ストアに永続化するかどうかを示す値を設定します。"
  remarks: "このプロパティを true に設定することは UseMachineKeyStore フラグを渡すことに相当する<xref:System.Security.Cryptography.CspParameters>オブジェクト</xref:System.Security.Cryptography.CspParameters>。 UseMachineKeyStore プロパティ<xref:System.Security.Cryptography.CspParameters>オブジェクトを明示的に参照クラスにのみ適用</xref:System.Security.Cryptography.CspParameters>中に、現在のアプリケーション ドメインのすべてのコードに適用されます。 これらの設定は、偽装するか、ユーザー プロファイルが読み込まれていないアカウントで実行されている場合に便利です。"
  syntax:
    content: public static bool UseMachineKeyStore { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>コンピューター キー ストアにキーを永続化する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  id: VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定されたデータの計算された署名と比較することによって指定された署名データを確認します。"
  remarks: "このメソッドは、 <xref:System.Security.Cryptography.DSA> <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>。</xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>によって生成されたデジタル署名</xref:System.Security.Cryptography.DSA>を検証します。       <xref:System.Security.Cryptography.DSA>使用して、<xref:System.Security.Cryptography.SHA1>ハッシュ アルゴリズム</xref:System.Security.Cryptography.SHA1>。</xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public bool VerifyData (byte[] rgbData, byte[] rgbSignature);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: "署名されたデータ。"
    - id: rgbSignature
      type: System.Byte[]
      description: "検証する署名データ。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>有効な署名を検証する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  id: VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyHash(Byte[],String,Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ値に対して計算された署名と比較することによって指定された署名データを確認します。"
  remarks: "このメソッドは、 <xref:System.Security.Cryptography.DSA> <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>。</xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>によって生成されたデジタル署名</xref:System.Security.Cryptography.DSA>を検証します。       場合、`str`パラメーターは`null`既定のハッシュ アルゴリズム (SHA1) を使用します。 有効なハッシュ アルゴリズムは<xref:System.Security.Cryptography.SHA1>。</xref:System.Security.Cryptography.SHA1>"
  syntax:
    content: public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "署名されるデータのハッシュ値。"
    - id: str
      type: System.String
      description: "データのハッシュ値を作成するために使用するハッシュ アルゴリズムの名前です。"
    - id: rgbSignature
      type: System.Byte[]
      description: "検証する署名データ。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>有効な署名を検証する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>rgbSignature</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "暗号化サービス プロバイダー (CSP) を取得できません。       または、署名を検証できません。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "検証、 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>指定されたデータの署名。"
  syntax:
    content: public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "データが署名された`rgbSignature`です。"
    - id: rgbSignature
      type: System.Byte[]
      description: "検証する署名`rgbData`です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<code> rgbSignature </code>で、指定したハッシュ アルゴリズムとキーを使用して計算された署名と一致する<code> rgbHash </code>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.DSA
  isExternal: false
  name: System.Security.Cryptography.DSA
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider()
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(Int32)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(Int32,CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CreateSignature(Byte[])
  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
- uid: System.Security.Cryptography.CspKeyContainerInfo
  parent: System.Security.Cryptography
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: CspKeyContainerInfo
  fullName: System.Security.Cryptography.CspKeyContainerInfo
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportCspBlob(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)
- uid: System.Security.Cryptography.DSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: DSAParameters
  nameWithType: DSAParameters
  fullName: System.Security.Cryptography.DSAParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportCspBlob(Byte[])
  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportParameters(DSAParameters)
  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Byte[])
  nameWithType: DSACryptoServiceProvider.SignData(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Stream)
  nameWithType: DSACryptoServiceProvider.SignData(Stream)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Byte[],Int32,Int32)
  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignHash(Byte[],String)
  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyData(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyHash(Byte[],String,Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CreateSignature
  nameWithType: DSACryptoServiceProvider.CreateSignature
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: Dispose
  nameWithType: DSACryptoServiceProvider.Dispose
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportCspBlob
  nameWithType: DSACryptoServiceProvider.ExportCspBlob
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportParameters
  nameWithType: DSACryptoServiceProvider.ExportParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData
  nameWithType: DSACryptoServiceProvider.HashData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportCspBlob
  nameWithType: DSACryptoServiceProvider.ImportCspBlob
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportParameters
  nameWithType: DSACryptoServiceProvider.ImportParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData
  nameWithType: DSACryptoServiceProvider.SignData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignHash
  nameWithType: DSACryptoServiceProvider.SignHash
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyData
  nameWithType: DSACryptoServiceProvider.VerifyData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyHash
  nameWithType: DSACryptoServiceProvider.VerifyHash
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifySignature
  nameWithType: DSACryptoServiceProvider.VerifySignature
