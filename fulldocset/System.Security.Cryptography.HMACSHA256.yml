### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA256
  id: HMACSHA256
  children:
  - System.Security.Cryptography.HMACSHA256.#ctor
  - System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  langs:
  - csharp
  name: HMACSHA256
  nameWithType: HMACSHA256
  fullName: System.Security.Cryptography.HMACSHA256
  type: Class
  summary: "使用してハッシュ ベース メッセージ認証コード (HMAC) を計算、 <xref href=&quot;System.Security.Cryptography.SHA256&quot;> </xref>ハッシュ関数です。"
  remarks: "HMACSHA256 が sha-256 ハッシュ関数から構築され、としてするハッシュ ベース メッセージ認証コード (HMAC) を使用するキー付きハッシュ アルゴリズムの一種です。 HMAC プロセスとメッセージ データの共有キーの合成、結果のハッシュ関数に、秘密キーを使用してそのハッシュ値をもう一度、ミックスし、ハッシュ関数をもう一度します。 出力ハッシュは、256 ビットの長さです。       HMAC を使用して、送信者と受信者に、共有シークレット キーを共有すると、安全でないチャネル経由で送信されたメッセージが改ざんされているかどうかを判断します。 送信者は、元のデータのハッシュ値を計算し、単一のメッセージとして、元のデータとハッシュ値を送信します。 受信者は、受信メッセージのハッシュ値を再計算され、計算の HMAC に送信された HMAC が一致することを確認します。       データや、ハッシュ値を変更をメッセージを変更し、正しいハッシュ値を再現する秘密キーの知識が必要なため、不一致が発生します。 そのため、元と計算されたハッシュ値が一致した場合、メッセージが認証されます。       HMACSHA256 は任意のサイズ、キーを確定し、256 ビット長に一連のハッシュを生成します。"
  example:
  - "The following example shows how to sign a file by using the HMACSHA256 object and then how to verify the file.  \n  \n [!code-cs[HMACSHA256#1](~/add/codesnippet/csharp/t-system.security.crypto_55_1.cs)]\n [!code-cpp[HMACSHA256#1](~/add/codesnippet/cpp/t-system.security.crypto_55_1.cpp)]\n [!code-vb[HMACSHA256#1](~/add/codesnippet/visualbasic/t-system.security.crypto_55_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA256 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA256.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HMACSHA256()
  nameWithType: HMACSHA256.HMACSHA256()
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;> </xref>ランダムに生成されたキーを持つクラス。"
  remarks: "<xref:System.Security.Cryptography.HMACSHA256>sha-256 ハッシュ関数から作成され、としてするハッシュ ベース メッセージ認証コード (HMAC) を使用するキー付きハッシュ アルゴリズムの型です。</xref:System.Security.Cryptography.HMACSHA256> HMAC プロセスとメッセージ データの共有キーの合成、結果のハッシュ関数に、秘密キーを使用してそのハッシュ値をもう一度、ミックスし、ハッシュ関数をもう一度します。 出力ハッシュは、256 ビットの長さです。       このコンス トラクターは、64 バイト、ランダムに生成されたキーを使用します。"
  syntax:
    content: public HMACSHA256 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA256.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HMACSHA256(Byte[])
  nameWithType: HMACSHA256.HMACSHA256(Byte[])
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;> </xref>クラスに指定したキー データ。"
  remarks: "<xref:System.Security.Cryptography.HMACSHA256>sha-256 ハッシュ関数から構築およびハッシュ ベース メッセージ認証コードとして使用されるキー付きハッシュ アルゴリズムの型です。</xref:System.Security.Cryptography.HMACSHA256> HMAC プロセスとメッセージ データの共有キーの合成、結果のハッシュ関数に、秘密キーを使用してそのハッシュ値をもう一度、ミックスし、ハッシュ関数をもう一度します。 出力ハッシュは、256 ビットの長さです。"
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA256> class.
  syntax:
    content: public HMACSHA256 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "用のシークレット キー <xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;> </xref>暗号化します。 キーは、任意の長さを指定できます。 ただし、推奨されるサイズは、64 バイトです。 (Sha-256 を使用した) ハッシュされてキーが 64 バイトより長い場合は、64 バイトのキーを派生させる。 長さは 64 バイト未満である場合は 64 バイトに埋められます。"
  overload: System.Security.Cryptography.HMACSHA256.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA256.#ctor
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256()
  nameWithType: HMACSHA256.HMACSHA256()
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256()
- uid: System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256(Byte[])
  nameWithType: HMACSHA256.HMACSHA256(Byte[])
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA256.#ctor*
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256
  nameWithType: HMACSHA256.HMACSHA256
