### YamlMime:ManagedReference
items:
- uid: System.Web.HttpContext
  id: HttpContext
  children:
  - System.Web.HttpContext.#ctor(System.Web.HttpWorkerRequest)
  - System.Web.HttpContext.#ctor(System.Web.HttpRequest,System.Web.HttpResponse)
  - System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task})
  - System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task},System.Web.WebSockets.AspNetWebSocketOptions)
  - System.Web.HttpContext.AddError(System.Exception)
  - System.Web.HttpContext.AddOnRequestCompleted(System.Action{System.Web.HttpContext})
  - System.Web.HttpContext.AllErrors
  - System.Web.HttpContext.AllowAsyncDuringSyncStages
  - System.Web.HttpContext.Application
  - System.Web.HttpContext.ApplicationInstance
  - System.Web.HttpContext.AsyncPreloadMode
  - System.Web.HttpContext.Cache
  - System.Web.HttpContext.ClearError
  - System.Web.HttpContext.Current
  - System.Web.HttpContext.CurrentHandler
  - System.Web.HttpContext.CurrentNotification
  - System.Web.HttpContext.DisposeOnPipelineCompleted(System.IDisposable)
  - System.Web.HttpContext.Error
  - System.Web.HttpContext.GetAppConfig(System.String)
  - System.Web.HttpContext.GetConfig(System.String)
  - System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String)
  - System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  - System.Web.HttpContext.GetLocalResourceObject(System.String,System.String)
  - System.Web.HttpContext.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  - System.Web.HttpContext.GetSection(System.String)
  - System.Web.HttpContext.Handler
  - System.Web.HttpContext.IsCustomErrorEnabled
  - System.Web.HttpContext.IsDebuggingEnabled
  - System.Web.HttpContext.IsPostNotification
  - System.Web.HttpContext.IsWebSocketRequest
  - System.Web.HttpContext.IsWebSocketRequestUpgrading
  - System.Web.HttpContext.Items
  - System.Web.HttpContext.PageInstrumentation
  - System.Web.HttpContext.PreviousHandler
  - System.Web.HttpContext.Profile
  - System.Web.HttpContext.RemapHandler(System.Web.IHttpHandler)
  - System.Web.HttpContext.Request
  - System.Web.HttpContext.Response
  - System.Web.HttpContext.RewritePath(System.String)
  - System.Web.HttpContext.RewritePath(System.String,System.Boolean)
  - System.Web.HttpContext.RewritePath(System.String,System.String,System.String)
  - System.Web.HttpContext.RewritePath(System.String,System.String,System.String,System.Boolean)
  - System.Web.HttpContext.Server
  - System.Web.HttpContext.Session
  - System.Web.HttpContext.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)
  - System.Web.HttpContext.SkipAuthorization
  - System.Web.HttpContext.System#IServiceProvider#GetService(System.Type)
  - System.Web.HttpContext.ThreadAbortOnTimeout
  - System.Web.HttpContext.Timestamp
  - System.Web.HttpContext.Trace
  - System.Web.HttpContext.User
  - System.Web.HttpContext.WebSocketNegotiatedProtocol
  - System.Web.HttpContext.WebSocketRequestedProtocols
  langs:
  - csharp
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
  type: Class
  summary: "個々 の HTTP 要求に関する HTTP 固有のすべての情報をカプセル化します。"
  remarks: "継承するクラス、<xref:System.Web.IHttpModule>と<xref:System.Web.IHttpHandler>インターフェイスが現在の HTTP 要求に対する HttpContext オブジェクトへの参照が提供されます</xref:System.Web.IHttpHandler></xref:System.Web.IHttpModule>。 このオブジェクトが、組み込みへのアクセスを提供<xref:System.Web.HttpContext.Request%2A>、 <xref:System.Web.HttpContext.Response%2A>、および<xref:System.Web.HttpContext.Server%2A>要求のプロパティ</xref:System.Web.HttpContext.Server%2A></xref:System.Web.HttpContext.Response%2A></xref:System.Web.HttpContext.Request%2A>。"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192422).  \n  \n The following example demonstrates how to access and display properties of the HttpContext object. The context of the current HTTP request is accessed by using the <xref:System.Web.UI.Page.Context%2A> property of the <xref:System.Web.UI.Page> object.  \n  \n [!code-vb[System.Web.HttpContext#1](~/add/codesnippet/visualbasic/t-system.web.httpcontext_1.aspx)]\n [!code-cs[System.Web.HttpContext#1](~/add/codesnippet/csharp/t-system.web.httpcontext_1.aspx)]"
  syntax:
    content: 'public sealed class HttpContext : IServiceProvider'
  inheritance:
  - System.Object
  implements:
  - System.IServiceProvider
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.HttpContext.#ctor(System.Web.HttpWorkerRequest)
  id: '#ctor(System.Web.HttpWorkerRequest)'
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: HttpContext(HttpWorkerRequest)
  nameWithType: HttpContext.HttpContext(HttpWorkerRequest)
  fullName: System.Web.HttpContext.HttpContext(HttpWorkerRequest)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.HttpContext&quot;> </xref>を指定したワーカー要求オブジェクトを使用するクラス。"
  syntax:
    content: public HttpContext (System.Web.HttpWorkerRequest wr);
    parameters:
    - id: wr
      type: System.Web.HttpWorkerRequest
      description: "<xref href=&quot;System.Web.HttpWorkerRequest&quot;> </xref>の現在の HTTP 要求オブジェクト。"
  overload: System.Web.HttpContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.#ctor(System.Web.HttpRequest,System.Web.HttpResponse)
  id: '#ctor(System.Web.HttpRequest,System.Web.HttpResponse)'
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: HttpContext(HttpRequest,HttpResponse)
  nameWithType: HttpContext.HttpContext(HttpRequest,HttpResponse)
  fullName: System.Web.HttpContext.HttpContext(HttpRequest,HttpResponse)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.HttpContext&quot;> </xref>要求と応答の指定したオブジェクトを使用してクラスです。"
  syntax:
    content: public HttpContext (System.Web.HttpRequest request, System.Web.HttpResponse response);
    parameters:
    - id: request
      type: System.Web.HttpRequest
      description: "<xref href=&quot;System.Web.HttpRequest&quot;> </xref>の現在の HTTP 要求オブジェクト。"
    - id: response
      type: System.Web.HttpResponse
      description: "<xref href=&quot;System.Web.HttpResponse&quot;> </xref>の現在の HTTP 要求オブジェクト。"
  overload: System.Web.HttpContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task})
  id: AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task})
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
  nameWithType: HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
  fullName: System.Web.HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "受け付ける、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>指定されたユーザー関数の使用を要求します。"
  remarks: "呼び出すことと同じではこのメソッドを呼び出す、<xref:System.Web.HttpContext.AcceptWebSocketRequest%2A>メソッドのオーバー ロードを渡して`null`の`options`パラメーター</xref:System.Web.HttpContext.AcceptWebSocketRequest%2A> 。"
  syntax:
    content: public void AcceptWebSocketRequest (Func<System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task> userFunc);
    parameters:
    - id: userFunc
      type: System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task}
      description: "ユーザー関数。"
  overload: System.Web.HttpContext.AcceptWebSocketRequest*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>userFunc</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "要求は、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>要求します。"
  platform:
  - net462
- uid: System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task},System.Web.WebSockets.AspNetWebSocketOptions)
  id: AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task},System.Web.WebSockets.AspNetWebSocketOptions)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
  nameWithType: HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
  fullName: System.Web.HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "受け付ける、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>要求、指定されたユーザー関数とオプション オブジェクトを使用します。"
  syntax:
    content: public void AcceptWebSocketRequest (Func<System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task> userFunc, System.Web.WebSockets.AspNetWebSocketOptions options);
    parameters:
    - id: userFunc
      type: System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task}
      description: "ユーザー関数。"
    - id: options
      type: System.Web.WebSockets.AspNetWebSocketOptions
      description: "オプションのオブジェクト。"
  overload: System.Web.HttpContext.AcceptWebSocketRequest*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>userFunc</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "要求は、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>要求します。"
  platform:
  - net462
- uid: System.Web.HttpContext.AddError(System.Exception)
  id: AddError(System.Exception)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AddError(Exception)
  nameWithType: HttpContext.AddError(Exception)
  fullName: System.Web.HttpContext.AddError(Exception)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "現在の HTTP 要求に対する例外コレクションに例外を追加します。"
  syntax:
    content: public void AddError (Exception errorInfo);
    parameters:
    - id: errorInfo
      type: System.Exception
      description: "<xref:System.Exception>例外コレクションに追加する</xref:System.Exception>。"
  overload: System.Web.HttpContext.AddError*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.AddOnRequestCompleted(System.Action{System.Web.HttpContext})
  id: AddOnRequestCompleted(System.Action{System.Web.HttpContext})
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AddOnRequestCompleted(Action<HttpContext>)
  nameWithType: HttpContext.AddOnRequestCompleted(Action<HttpContext>)
  fullName: System.Web.HttpContext.AddOnRequestCompleted(Action<HttpContext>)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "要求の HTTP 部分が終了するときに発生する仮想イベントを発生させます。"
  remarks: "このイベントが発生する前に、<xref:System.Web.WebSockets.AspNetWebSocket>接続を開始します</xref:System.Web.WebSockets.AspNetWebSocket>。"
  syntax:
    content: public System.Web.ISubscriptionToken AddOnRequestCompleted (Action<System.Web.HttpContext> callback);
    parameters:
    - id: callback
      type: System.Action{System.Web.HttpContext}
      description: "HTTP コンテキスト オブジェクト。"
    return:
      type: System.Web.ISubscriptionToken
      description: "サブスクリプション トークン。"
  overload: System.Web.HttpContext.AddOnRequestCompleted*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>callback</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpContext.AllErrors
  id: AllErrors
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AllErrors
  nameWithType: HttpContext.AllErrors
  fullName: System.Web.HttpContext.AllErrors
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "HTTP 要求の処理中に蓄積されたエラーの配列を取得します。"
  syntax:
    content: public Exception[] AllErrors { get; }
    return:
      type: System.Exception[]
      description: "配列<xref:System.Exception>の現在の HTTP 要求に対するオブジェクト</xref:System.Exception>。"
  overload: System.Web.HttpContext.AllErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.AllowAsyncDuringSyncStages
  id: AllowAsyncDuringSyncStages
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AllowAsyncDuringSyncStages
  nameWithType: HttpContext.AllowAsyncDuringSyncStages
  fullName: System.Web.HttpContext.AllowAsyncDuringSyncStages
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得または設定の一部のそれらは予期されていない場合は ASP.NET 要求を処理中に、非同期操作が許可されるかどうかを示す値。"
  remarks: "このフラグは設定されていない場合`true`ASP.NET、非同期 API を悪用して、アプリケーションを検出した場合に例外がスローされます。 これは、要求処理パイプラインでの非同期操作は必要ありませんの一部の中に、非同期メソッドを呼び出すしようとする場合、または非同期のモジュールとハンドラー完了を通知するときにまだ保留中の非同期操作がある場合に発生することができます。 この動作は安全策としてために収まらない非同期コード パターンを想定し、悪影響が出る場合がありますを記述しているかどうかを早い段階で確認できます。"
  syntax:
    content: public bool AllowAsyncDuringSyncStages { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>場合必要はありません。 時に非同期 API を使用する場合に ASP.NET が例外をスローする場合それ以外の場合、 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.AllowAsyncDuringSyncStages*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Application
  id: Application
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Application
  nameWithType: HttpContext.Application
  fullName: System.Web.HttpContext.Application
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref>の現在の HTTP 要求オブジェクト。"
  syntax:
    content: public System.Web.HttpApplicationState Application { get; }
    return:
      type: System.Web.HttpApplicationState
      description: "<xref href=&quot;System.Web.HttpApplicationState&quot;> </xref>の現在の HTTP 要求。       取得する、 <xref href=&quot;System.Web.HttpApplication&quot;> </xref>オブジェクトの現在の HTTP 要求に対する、 <xref:System.Web.HttpContext.ApplicationInstance*>.</xref:System.Web.HttpContext.ApplicationInstance*>の使用 (ASP.NET を使用して<xref uid=&quot;langword_csharp_ApplicationInstance&quot; name=&quot;ApplicationInstance&quot; href=&quot;&quot;></xref>の代わりに<xref uid=&quot;langword_csharp_Application&quot; name=&quot;Application&quot; href=&quot;&quot;></xref>現在を参照するプロパティ名として<xref href=&quot;System.Web.HttpApplication&quot;> </xref> ASP.NET と従来の ASP との混同を避けるためにインスタンス。 従来の ASP で<xref uid=&quot;langword_csharp_Application&quot; name=&quot;Application&quot; href=&quot;&quot;></xref>はグローバル アプリケーション状態のディクショナリを参照します)。"
  overload: System.Web.HttpContext.Application*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.ApplicationInstance
  id: ApplicationInstance
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: ApplicationInstance
  nameWithType: HttpContext.ApplicationInstance
  fullName: System.Web.HttpContext.ApplicationInstance
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得または設定、 <xref href=&quot;System.Web.HttpApplication&quot;> </xref>の現在の HTTP 要求オブジェクト。"
  syntax:
    content: public System.Web.HttpApplication ApplicationInstance { get; set; }
    return:
      type: System.Web.HttpApplication
      description: "<xref href=&quot;System.Web.HttpApplication&quot;> </xref>の現在の HTTP 要求。       ASP.NET を使用して<xref uid=&quot;langword_csharp_ApplicationInstance&quot; name=&quot;ApplicationInstance&quot; href=&quot;&quot;></xref>の代わりに<xref uid=&quot;langword_csharp_Application&quot; name=&quot;Application&quot; href=&quot;&quot;></xref>現在を参照するプロパティ名として<xref href=&quot;System.Web.HttpApplication&quot;> </xref> ASP.NET と従来の ASP との混同を避けるためにインスタンス。 従来の ASP で<xref uid=&quot;langword_csharp_Application&quot; name=&quot;Application&quot; href=&quot;&quot;></xref>はグローバル アプリケーション状態のディクショナリを参照します。"
  overload: System.Web.HttpContext.ApplicationInstance*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Web アプリケーションは、統合モードで IIS 7.0 で実行されていて、プロパティの値に null 以外の値から変更しようとしましたが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Web.HttpContext.AsyncPreloadMode
  id: AsyncPreloadMode
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AsyncPreloadMode
  nameWithType: HttpContext.AsyncPreloadMode
  fullName: System.Web.HttpContext.AsyncPreloadMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得または非同期プリロード モードに関係するフラグを格納しているオブジェクトを設定します。"
  remarks: "このプロパティにアクセスすると、最初に、オブジェクトを非同期プリロード モードのフラグを含むが読み込まれてから、<xref:System.Web.Configuration.HttpRuntimeSection.AsyncPreloadMode%2A>構成ファイルで設定します</xref:System.Web.Configuration.HttpRuntimeSection.AsyncPreloadMode%2A>。       このプロパティは、プログラムで設定できますが、プロパティ値の変更のみが影響する前に、プロパティが設定されている場合、 `ExecuteRequestHandler` ASP.NET 要求パイプライン内のステップします。"
  syntax:
    content: public System.Web.Configuration.AsyncPreloadModeFlags AsyncPreloadMode { get; set; }
    return:
      type: System.Web.Configuration.AsyncPreloadModeFlags
      description: "非同期プリロード モードに関係するフラグを格納するオブジェクト。"
  overload: System.Web.HttpContext.AsyncPreloadMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Cache
  id: Cache
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Cache
  nameWithType: HttpContext.Cache
  fullName: System.Web.HttpContext.Cache
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.Caching.Cache&quot;> </xref>現在のアプリケーション ドメインのオブジェクト。"
  remarks: "インスタンスは&1; つ、<xref:System.Web.Caching.Cache>アプリケーション ドメインごとのクラス</xref:System.Web.Caching.Cache>。 その結果、<xref:System.Web.Caching.Cache>キャッシュ プロパティによって返されるオブジェクトは、<xref:System.Web.Caching.Cache>アプリケーション ドメイン内のすべての要求オブジェクト</xref:System.Web.Caching.Cache></xref:System.Web.Caching.Cache>。"
  syntax:
    content: public System.Web.Caching.Cache Cache { get; }
    return:
      type: System.Web.Caching.Cache
      description: "<xref href=&quot;System.Web.Caching.Cache&quot;> </xref>の現在のアプリケーション ドメイン。"
  overload: System.Web.HttpContext.Cache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.ClearError
  id: ClearError
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: ClearError()
  nameWithType: HttpContext.ClearError()
  fullName: System.Web.HttpContext.ClearError()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "現在の HTTP 要求に対するすべてのエラーをクリアします。"
  syntax:
    content: public void ClearError ();
    parameters: []
  overload: System.Web.HttpContext.ClearError*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Current
  id: Current
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Current
  nameWithType: HttpContext.Current
  fullName: System.Web.HttpContext.Current
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得または設定、 <xref href=&quot;System.Web.HttpContext&quot;> </xref>の現在の HTTP 要求オブジェクト。"
  remarks: "このプロパティは、<xref:System.Web.HttpContext>クラス</xref:System.Web.HttpContext>の静的プロパティです。 プロパティ ストア、<xref:System.Web.HttpContext>インスタンスを現在の要求に適用されます</xref:System.Web.HttpContext>。 このインスタンスのプロパティは、<xref:System.Web.HttpContext>クラス</xref:System.Web.HttpContext>の非静的プロパティ       使用することも、<xref:System.Web.UI.Page.Context%2A?displayProperty=fullName>プロパティへのアクセスを<xref:System.Web.HttpContext>の現在の HTTP 要求オブジェクト</xref:System.Web.HttpContext></xref:System.Web.UI.Page.Context%2A?displayProperty=fullName>。"
  example:
  - "The following code example uses the Current property to access the <xref:System.Web.HttpContext.AddError%2A?displayProperty=fullName> and <xref:System.Web.HttpContext.ClearError%2A?displayProperty=fullName> methods and the <xref:System.Web.HttpContext.AllErrors%2A?displayProperty=fullName> property. The example creates three custom exceptions using the <xref:System.Web.HttpContext.AddError%2A> method and uses the <xref:System.Web.HttpContext.AllErrors%2A> property to load these exceptions to an array. It then writes the array to the containing page and uses the <xref:System.Web.HttpContext.ClearError%2A> method to clear all the errors from the <xref:System.Web.UI.Page.Context%2A> property.  \n  \n```c#  \nprotected void Page_Load(object sender, EventArgs e)  \n{  \n    HttpContext context = HttpContext.Current;  \n    Response.Write(\"<p>HttpContext.Current Example:</p>\");  \n  \n    // Add three custom exceptions.  \n    context.AddError(new Exception(\"New Exception #1\"));  \n    context.AddError(new Exception(\"New Exception #2\"));  \n    context.AddError(new Exception(\"New Exception #3\"));  \n  \n    // Capture all the new Exceptions in an array.  \n    Exception[] errs = context.AllErrors;  \n  \n    foreach (Exception ex in errs)  \n    {  \n        Response.Write(\"<p>\" + Server.HtmlEncode(ex.ToString()) + \"</p>\");  \n    }  \n  \n    // Clear the exceptions so ASP.NET won't handle them.  \n    context.ClearError();  \n}  \n```  \n  \n```vb  \nProtected Sub Page_Load(sender As Object, e As EventArgs)  \nDim context As HttpContext = HttpContext.Current  \nResponse.Write(\"<p>HttpContext.Current Example:</p>\")  \n  \n' Add three custom exceptions.  \ncontext.AddError(New Exception(\"New Exception #1\"))  \ncontext.AddError(New Exception(\"New Exception #2\"))  \ncontext.AddError(New Exception(\"New Exception #3\"))  \n  \n' Capture all the new Exceptions in an array.  \nDim errs As Exception() = context.AllErrors  \n  \nFor Each ex As Exception In errs  \nResponse.Write(\"<p>\" & Server.HtmlEncode(ex.ToString()) & \"</p>\")  \nNext  \n  \n' Clear the exceptions so ASP.NET won't handle them.  \ncontext.ClearError()  \nEnd Sub  \n  \n```"
  syntax:
    content: public static System.Web.HttpContext Current { get; set; }
    return:
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>の現在の HTTP 要求のインスタンス。"
  overload: System.Web.HttpContext.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.CurrentHandler
  id: CurrentHandler
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: CurrentHandler
  nameWithType: HttpContext.CurrentHandler
  fullName: System.Web.HttpContext.CurrentHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.IHttpHandler&quot;> </xref>を現在実行中のハンドラーを表すオブジェクト。"
  remarks: "CurrentHandler プロパティによって参照されている現在実行中のハンドラーによって参照されているハンドラーとは異なる場合があります、<xref:System.Web.HttpContext.Handler%2A>プロパティ</xref:System.Web.HttpContext.Handler%2A>。 これは、問題を使用して別のハンドラーが要求されたときに発生することができます、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドまたは<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド</xref:System.Web.HttpServerUtility.Transfer%2A></xref:System.Web.HttpServerUtility.Execute%2A>。 現在実行中のハンドラーには、処理が完了すると、事前に決定されたハンドラーが復元されます。"
  syntax:
    content: public System.Web.IHttpHandler CurrentHandler { get; }
    return:
      type: System.Web.IHttpHandler
      description: "<xref href=&quot;System.Web.IHttpHandler&quot;> </xref>現在実行中のハンドラーを表すです。"
  overload: System.Web.HttpContext.CurrentHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.CurrentNotification
  id: CurrentNotification
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: CurrentNotification
  nameWithType: HttpContext.CurrentNotification
  fullName: System.Web.HttpContext.CurrentNotification
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.RequestNotification&quot;> </xref>現在を示す値<xref href=&quot;System.Web.HttpApplication&quot;></xref>イベントを処理しています。"
  remarks: "CurrentNotification プロパティには、統合パイプライン モードが必要です。[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]と、少なくとも .NET Framework バージョン 3.0。 プロパティが返す利用可能であれば、<xref:System.Web.RequestNotification>値</xref:System.Web.RequestNotification>。 CurrentNotification プロパティの値にどのイベントを示す、<xref:System.Web.HttpApplication>インスタンスが現在の要求を処理します</xref:System.Web.HttpApplication>。       CurrentNotification プロパティを設定する必要はありません。 設定されます。 代わりに、 [!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)] ASP.NET パイプライン内の要求の処理中にします。 CurrentNotification プロパティを設定すると、コンパイル エラーが発生します。       CurrentNotification は、.NET Framework version 3.5 で導入されました。  詳細については、次を参照してください。[バージョンおよび依存関係](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates how to use the CurrentNotification property to determine what event of the <xref:System.Web.HttpApplication> object that is handling the current request is being processed. In the example, the event handler handles several events of the <xref:System.Web.HttpApplication> object, and the CurrentNotification property determines what code is invoked for each event being handled.  \n  \n [!code-cs[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/csharp/p-system.web.httpcontext_0_1.cs)]\n [!code-vb[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/visualbasic/p-system.web.httpcontext_0_1.vb)]"
  syntax:
    content: public System.Web.RequestNotification CurrentNotification { get; }
    return:
      type: System.Web.RequestNotification
      description: "1 つ、 <xref href=&quot;System.Web.RequestNotification&quot;> </xref>値。"
  overload: System.Web.HttpContext.CurrentNotification*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "操作には、統合パイプライン モードが必要です。[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]と、少なくとも .NET Framework バージョン 3.0。"
  platform:
  - net462
- uid: System.Web.HttpContext.DisposeOnPipelineCompleted(System.IDisposable)
  id: DisposeOnPipelineCompleted(System.IDisposable)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: DisposeOnPipelineCompleted(IDisposable)
  nameWithType: HttpContext.DisposeOnPipelineCompleted(IDisposable)
  fullName: System.Web.HttpContext.DisposeOnPipelineCompleted(IDisposable)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "により、オブジェクトの<xref:System.IDisposable.Dispose*>ときに呼び出されるメソッドを<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>この要求の一部の接続が完了しました</xref:System.IDisposable.Dispose*>。"
  remarks: "<xref:System.IDisposable.Dispose%2A>要求の HTTP 部分の後に、ターゲット オブジェクトのメソッドが呼び出されて、<xref:System.Web.WebSockets.AspNetWebSocket>の接続が終了しました</xref:System.Web.WebSockets.AspNetWebSocket></xref:System.IDisposable.Dispose%2A>。 <xref:System.Web.HttpContext>オブジェクトを検査するために使用できない</xref:System.Web.HttpContext>。"
  syntax:
    content: public System.Web.ISubscriptionToken DisposeOnPipelineCompleted (IDisposable target);
    parameters:
    - id: target
      type: System.IDisposable
      description: "オブジェクトが<xref:System.IDisposable.Dispose*>ときにメソッドが呼び出される必要があります、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>要求の一部の接続が完了しました</xref:System.IDisposable.Dispose*>。"
    return:
      type: System.Web.ISubscriptionToken
      description: "サブスクリプション トークン。"
  overload: System.Web.HttpContext.DisposeOnPipelineCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Error
  id: Error
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Error
  nameWithType: HttpContext.Error
  fullName: System.Web.HttpContext.Error
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "要求の処理を HTTP 中に蓄積された最初のエラー (存在する場合) を取得します。"
  syntax:
    content: public Exception Error { get; }
    return:
      type: System.Exception
      description: "最初の<xref:System.Exception>の現在の HTTP 要求/応答のプロセスですそれ以外の場合、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> HTTP 要求の処理中にエラーが蓄積されなかった場合。</xref:System.Exception> 。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.Error*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.GetAppConfig(System.String)
  id: GetAppConfig(System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetAppConfig(String)
  nameWithType: HttpContext.GetAppConfig(String)
  fullName: System.Web.HttpContext.GetAppConfig(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "要求された、現在のアプリケーションの構成情報を返します。"
  remarks: "GetAppConfig メソッドは廃止されました。 使用して、<xref:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection%2A>のメソッド、<xref:System.Web.Configuration.WebConfigurationManager>クラスを現在のアプリケーションの構成情報を取得します</xref:System.Web.Configuration.WebConfigurationManager></xref:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection%2A>。"
  syntax:
    content: public static object GetAppConfig (string name);
    parameters:
    - id: name
      type: System.String
      description: "情報が要求されたアプリケーションの構成タグ。"
    return:
      type: System.Object
      description: "構成情報を格納するオブジェクト。 (返された構成セクションを使用する前に適切な構成型をキャストします。)"
  overload: System.Web.HttpContext.GetAppConfig*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.GetConfig(System.String)
  id: GetConfig(System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetConfig(String)
  nameWithType: HttpContext.GetConfig(String)
  fullName: System.Web.HttpContext.GetConfig(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "要求された現在の HTTP 要求の構成情報を返します。"
  remarks: "GetConfig メソッドは廃止されました。 使用して、<xref:System.Web.HttpContext.GetSection%2A>現在の HTTP 要求の構成情報を取得するメソッド</xref:System.Web.HttpContext.GetSection%2A>。"
  syntax:
    content: public object GetConfig (string name);
    parameters:
    - id: name
      type: System.String
      description: "情報が要求された構成タグ。"
    return:
      type: System.Object
      description: "指定した<xref href=&quot;System.Configuration.ConfigurationSection&quot;> </xref>、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>セクションが存在しない場合、または実行時に、セクションにアクセスできない場合、内部オブジェクトです。 (返されたオブジェクトを使用する前に適切な構成型をキャストします。)"
  overload: System.Web.HttpContext.GetConfig*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String)
  id: GetGlobalResourceObject(System.String,System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetGlobalResourceObject(String,String)
  nameWithType: HttpContext.GetGlobalResourceObject(String,String)
  fullName: System.Web.HttpContext.GetGlobalResourceObject(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "アプリケーション レベル リソース オブジェクトに基づいて、指定された取得<> *> と<> *> プロパティです。"
  remarks: "GetGlobalResourceObject メソッドで指定されているカルチャを使用してグローバル リソースが返されます、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティ</xref:System.Globalization.CultureInfo.CurrentUICulture%2A>。      > [!NOTE] > 編集環境などいくつかの[!INCLUDE[vwprvw](~/add/includes/vwprvw-md.md)]、エディターがデザイン時をスロー<xref:System.Resources.MissingManifestResourceException>グローバル リソース キー名にピリオド (.) を使用する場合に例外です</xref:System.Resources.MissingManifestResourceException>。 ただし、これには影響しません、機能を編集またはファイルを保存して、エラーを無視することができます。"
  syntax:
    content: public static object GetGlobalResourceObject (string classKey, string resourceKey);
    parameters:
    - id: classKey
      type: System.String
      description: "表す文字列、 <xref:System.Web.Compilation.ResourceExpressionFields.ClassKey*>、要求されたリソース オブジェクトのプロパティ</xref:System.Web.Compilation.ResourceExpressionFields.ClassKey*>。"
    - id: resourceKey
      type: System.String
      description: "表す文字列、 <xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>、要求されたリソース オブジェクトのプロパティ</xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>。"
    return:
      type: System.Object
      description: "<xref:System.Object>要求されたアプリケーション レベル リソース オブジェクトを表すですそれ以外の場合、null のリソース オブジェクトが見つからない場合、またはリソース オブジェクトが見つかってもそれが要求のプロパティを持っていません。</xref:System.Object> 。"
  overload: System.Web.HttpContext.GetGlobalResourceObject*
  exceptions:
  - type: System.Resources.MissingManifestResourceException
    commentId: T:System.Resources.MissingManifestResourceException
    description: "A resource object with the specified <code>classKey</code> parameter was not found.  \n  \n \\- or -  \n  \n The main assembly does not contain the resources for the neutral culture, and these resources are required because the appropriate satellite assembly is missing."
  platform:
  - net462
- uid: System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  id: GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetGlobalResourceObject(String,String,CultureInfo)
  nameWithType: HttpContext.GetGlobalResourceObject(String,String,CultureInfo)
  fullName: System.Web.HttpContext.GetGlobalResourceObject(String,String,CultureInfo)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "アプリケーション レベル リソース オブジェクトに基づいて、指定された取得<> *> と<> *> プロパティ、および、<xref:System.Globalization.CultureInfo>オブジェクト</xref:System.Globalization.CultureInfo>。"
  remarks: "<xref:System.Globalization.CultureInfo>オブジェクトは、リソースのローカライズ対象のカルチャを表します</xref:System.Globalization.CultureInfo>。 リソースは、このカルチャにローカライズされていない、参照は、適切なリソースを検索するフォールバック プロセスを行います。 詳細については、次を参照してください。[パッケージ化と配置リソース](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > エディターは Visual Web Developer など、一部の編集環境でデザイン時をスローする可能性があります<xref:System.Resources.MissingManifestResourceException>グローバル リソース キー名にピリオド (.) を使用する場合に例外です</xref:System.Resources.MissingManifestResourceException>。 ただし、これには影響しません、機能を編集またはファイルを保存して、エラーを無視することができます。"
  syntax:
    content: public static object GetGlobalResourceObject (string classKey, string resourceKey, System.Globalization.CultureInfo culture);
    parameters:
    - id: classKey
      type: System.String
      description: "表す文字列、 <xref:System.Web.Compilation.ResourceExpressionFields.ClassKey*>、要求されたリソース オブジェクトのプロパティ</xref:System.Web.Compilation.ResourceExpressionFields.ClassKey*>。"
    - id: resourceKey
      type: System.String
      description: "表す文字列、 <xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>、要求されたリソース オブジェクトのプロパティ</xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "表す文字列、<xref:System.Globalization.CultureInfo>要求されたリソースのオブジェクト</xref:System.Globalization.CultureInfo>。"
    return:
      type: System.Object
      description: "<xref:System.Object>これは、特定のカルチャにローカライズされたそれ以外の場合、要求されたアプリケーション レベル リソース オブジェクトを表す<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>リソース オブジェクトが見つからない場合、またはリソース オブジェクトが見つかりましたが、要求されたプロパティがない場合</xref:System.Object>。"
  overload: System.Web.HttpContext.GetGlobalResourceObject*
  exceptions:
  - type: System.Resources.MissingManifestResourceException
    commentId: T:System.Resources.MissingManifestResourceException
    description: "A resource object for which the specified <code>classKey</code> parameter was not found.  \n  \n \\- or -  \n  \n The main assembly does not contain the resources for the neutral culture, and these resources are required because the appropriate satellite assembly is missing."
  platform:
  - net462
- uid: System.Web.HttpContext.GetLocalResourceObject(System.String,System.String)
  id: GetLocalResourceObject(System.String,System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetLocalResourceObject(String,String)
  nameWithType: HttpContext.GetLocalResourceObject(String,String)
  fullName: System.Web.HttpContext.GetLocalResourceObject(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ページ レベル リソース オブジェクトに基づいて、指定された取得<> *> と<> *> プロパティです。"
  remarks: "GetLocalResourceObject メソッドで指定されているカルチャを使用して、ローカル リソースが返されます、<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>プロパティ</xref:System.Globalization.CultureInfo.CurrentUICulture%2A>。"
  syntax:
    content: public static object GetLocalResourceObject (string virtualPath, string resourceKey);
    parameters:
    - id: virtualPath
      type: System.String
      description: "<xref:System.Web.Compilation.ExpressionBuilderContext.VirtualPath*>ローカル リソース オブジェクトのプロパティ</xref:System.Web.Compilation.ExpressionBuilderContext.VirtualPath*>。"
    - id: resourceKey
      type: System.String
      description: "<xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>要求されたリソース オブジェクトのプロパティ</xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>を表す文字列"
    return:
      type: System.Object
      description: "<xref:System.Object>要求されたページ レベル リソース オブジェクトを表す、それ以外の<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>しない場合は一致するリソース オブジェクトが見つかった場合、 <code> resourceKey </code>パラメーター</xref:System.Object> 。"
  overload: System.Web.HttpContext.GetLocalResourceObject*
  exceptions:
  - type: System.Resources.MissingManifestResourceException
    commentId: T:System.Resources.MissingManifestResourceException
    description: "リソース オブジェクトが見つかりませんでした。 指定された<code> virtualPath </code>パラメーター。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定した<code> virtualPath </code>現在のアプリケーションのルート ディレクトリではありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ページのリソースのクラスが見つかりませんでした。"
  platform:
  - net462
- uid: System.Web.HttpContext.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  id: GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetLocalResourceObject(String,String,CultureInfo)
  nameWithType: HttpContext.GetLocalResourceObject(String,String,CultureInfo)
  fullName: System.Web.HttpContext.GetLocalResourceObject(String,String,CultureInfo)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ページ レベル リソース オブジェクトに基づいて、指定された取得<> *> と<> *> プロパティ、および、<xref:System.Globalization.CultureInfo>オブジェクト</xref:System.Globalization.CultureInfo>。"
  remarks: "リソースは、このカルチャにローカライズされていない、参照は、適切なリソースを検索するフォールバック プロセスを行います。 詳細については、次を参照してください。[パッケージ化と配置リソース](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static object GetLocalResourceObject (string virtualPath, string resourceKey, System.Globalization.CultureInfo culture);
    parameters:
    - id: virtualPath
      type: System.String
      description: "<xref:System.Web.Compilation.ExpressionBuilderContext.VirtualPath*>ローカル リソース オブジェクトのプロパティ</xref:System.Web.Compilation.ExpressionBuilderContext.VirtualPath*>。"
    - id: resourceKey
      type: System.String
      description: "表す文字列、 <xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>、要求されたリソース オブジェクトのプロパティ</xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "表す文字列、<xref:System.Globalization.CultureInfo>要求されたリソース オブジェクトのオブジェクト</xref:System.Globalization.CultureInfo>。"
    return:
      type: System.Object
      description: "<xref:System.Object>これは、特定のカルチャにローカライズそれ以外の場合、要求されたローカル リソース オブジェクトを表す<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>しない場合は一致するリソース オブジェクトが見つかった場合、 <code> resourceKey </code>パラメーター</xref:System.Object> 。"
  overload: System.Web.HttpContext.GetLocalResourceObject*
  exceptions:
  - type: System.Resources.MissingManifestResourceException
    commentId: T:System.Resources.MissingManifestResourceException
    description: "リソース オブジェクトが見つかりませんでした。 指定された<code> virtualPath </code>パラメーター。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定した<code> virtualPath </code>現在のアプリケーションのルート ディレクトリではありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ページのリソースのクラスが見つかりませんでした。"
  platform:
  - net462
- uid: System.Web.HttpContext.GetSection(System.String)
  id: GetSection(System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetSection(String)
  nameWithType: HttpContext.GetSection(String)
  fullName: System.Web.HttpContext.GetSection(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "現在のアプリケーションの既定の構成の指定した構成セクションを取得します。"
  syntax:
    content: public object GetSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "構成セクション パス (XPath 形式) および構成要素名。"
    return:
      type: System.Object
      description: "指定した<xref href=&quot;System.Configuration.ConfigurationSection&quot;> </xref>、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>セクションが存在しない場合、または実行時に、セクションにアクセスできない場合、内部オブジェクトです。"
  overload: System.Web.HttpContext.GetSection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Handler
  id: Handler
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Handler
  nameWithType: HttpContext.Handler
  fullName: System.Web.HttpContext.Handler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得または設定、 <xref href=&quot;System.Web.IHttpHandler&quot;> </xref>オブジェクトの HTTP 要求を処理します。"
  remarks: "ハンドラーのプロパティには、HTTP 要求を処理するハンドラーへの参照が含まれています。 ハンドラーは、要素を使用して、またはユーザー コードで定義されているカスタム ハンドラーを使用して指定できます。 ハンドラーの詳細については、次を参照してください。 [HTTP ハンドラーと HTTP モジュールの概要](~/add/includes/ajax-current-ext-md.md)です。       ハンドラー プロパティへの参照は同じサーバー側のメソッドによって、現在のページがなどに変更した後も、<xref:System.Web.HttpServerUtility.Execute%2A>メソッドまたは<xref:System.Web.HttpServerUtility.Transfer%2A>メソッド</xref:System.Web.HttpServerUtility.Transfer%2A></xref:System.Web.HttpServerUtility.Execute%2A>。"
  syntax:
    content: public System.Web.IHttpHandler Handler { get; set; }
    return:
      type: System.Web.IHttpHandler
      description: "<xref href=&quot;System.Web.IHttpHandler&quot;> </xref> HTTP 要求を処理します。"
  overload: System.Web.HttpContext.Handler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.IsCustomErrorEnabled
  id: IsCustomErrorEnabled
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: IsCustomErrorEnabled
  nameWithType: HttpContext.IsCustomErrorEnabled
  fullName: System.Web.HttpContext.IsCustomErrorEnabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "現在の HTTP 要求に対してカスタム エラーが有効かどうかを示す値を取得します。"
  syntax:
    content: public bool IsCustomErrorEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム エラーは、有効な場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.IsCustomErrorEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.IsDebuggingEnabled
  id: IsDebuggingEnabled
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: IsDebuggingEnabled
  nameWithType: HttpContext.IsDebuggingEnabled
  fullName: System.Web.HttpContext.IsDebuggingEnabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "現在の HTTP 要求がデバッグ モードであるかどうかを示す値を取得します。"
  syntax:
    content: public bool IsDebuggingEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要求がデバッグ モードである場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.IsDebuggingEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.IsPostNotification
  id: IsPostNotification
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: IsPostNotification
  nameWithType: HttpContext.IsPostNotification
  fullName: System.Web.HttpContext.IsPostNotification
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "現在の値を取得、ASP.NET でのポイントを処理パイプラインの直後に、 <xref href=&quot;System.Web.HttpApplication&quot;> </xref>イベントの処理が完了します。"
  remarks: "IsPostNotification プロパティは、統合モードでのみサポート[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]と、少なくとも .NET Framework 3.0。 プロパティを示すブール値を返す、使用可能な場合のイベントかどうか、<xref:System.Web.HttpApplication>オブジェクトの処理が完了します</xref:System.Web.HttpApplication>。       IsPostNotification プロパティを設定する必要はありません。 によって提供される代わりに、[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]通知ごとに、ASP.NET ランタイムにします。 IsPostNotification プロパティを設定すると、コンパイル エラーが発生します。       シナリオでこの<xref:System.Web.HttpApplication>オブジェクトは、1 つのイベント ハンドラーによって処理される、<xref:System.Web.RequestNotification>正確に現在の要求ままアプリケーション ライフ サイクルの場所を決定する列挙体</xref:System.Web.RequestNotification>と組み合わせて IsPostNotification プロパティを使用できます</xref:System.Web.HttpApplication>の複数のイベント       IsPostNotification は、.NET Framework version 3.5 で導入されました。  詳細については、次を参照してください。[バージョンおよび依存関係](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates how to use the IsPostNotification property to determine when an event of the <xref:System.Web.HttpApplication> object has finished processing all the associated event handlers. The custom event handler in this example handles several events of the <xref:System.Web.HttpApplication> object, and the IsPostNotification property is used to determine what code is invoked after a specific event is handled.  \n  \n [!code-cs[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/csharp/p-system.web.httpcontext_2_1.cs)]\n [!code-vb[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/visualbasic/p-system.web.httpcontext_2_1.vb)]"
  syntax:
    content: public bool IsPostNotification { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カスタム エラーは、有効な場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.IsPostNotification*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "操作には、統合パイプライン モードが必要です。[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]と、少なくとも .NET Framework 3.0。"
  platform:
  - net462
- uid: System.Web.HttpContext.IsWebSocketRequest
  id: IsWebSocketRequest
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: IsWebSocketRequest
  nameWithType: HttpContext.IsWebSocketRequest
  fullName: System.Web.HttpContext.IsWebSocketRequest
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "要求があるかどうかを示す値を取得、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>要求します。"
  remarks: "このメソッドが戻る`true`初期が要求に含まれている場合<xref:System.Web.WebSockets.AspNetWebSocket>ハンドシェイクと`WebSocket`IIS のモジュールがアクティブです</xref:System.Web.WebSockets.AspNetWebSocket>。"
  syntax:
    content: public bool IsWebSocketRequest { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要求がある場合、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>要求です。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.IsWebSocketRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.IsWebSocketRequestUpgrading
  id: IsWebSocketRequestUpgrading
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: IsWebSocketRequestUpgrading
  nameWithType: HttpContext.IsWebSocketRequestUpgrading
  fullName: System.Web.HttpContext.IsWebSocketRequestUpgrading
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "HTTP 接続からの接続がアップグレードするかどうかを示す値を取得、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>接続します。"
  syntax:
    content: public bool IsWebSocketRequestUpgrading { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、接続をアップグレードしています。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.IsWebSocketRequestUpgrading*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Items
  id: Items
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Items
  nameWithType: HttpContext.Items
  fullName: System.Web.HttpContext.Items
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "編成および共有間でデータを使用できるキー/値のコレクションを取得、 <xref href=&quot;System.Web.IHttpModule&quot;> </xref>インターフェイスおよび<xref href=&quot;System.Web.IHttpHandler&quot;> </xref> HTTP 要求時にインターフェイスです。"
  syntax:
    content: public System.Collections.IDictionary Items { get; }
    return:
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>キー/値の指定したキーによって、コレクションの個々 の値へのアクセスを提供するコレクション</xref:System.Collections.IDictionary>。"
  overload: System.Web.HttpContext.Items*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.PageInstrumentation
  id: PageInstrumentation
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: PageInstrumentation
  nameWithType: HttpContext.PageInstrumentation
  fullName: System.Web.HttpContext.PageInstrumentation
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "この要求のページ インストルメンテーション サービス インスタンスへの参照を取得します。"
  syntax:
    content: public System.Web.Instrumentation.PageInstrumentationService PageInstrumentation { get; }
    return:
      type: System.Web.Instrumentation.PageInstrumentationService
      description: "この要求のページ インストルメンテーション サービス インスタンス。"
  overload: System.Web.HttpContext.PageInstrumentation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.PreviousHandler
  id: PreviousHandler
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: PreviousHandler
  nameWithType: HttpContext.PreviousHandler
  fullName: System.Web.HttpContext.PreviousHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.IHttpHandler&quot;> </xref>親ハンドラーのオブジェクト。"
  remarks: "PreviousHandler プロパティは、現在の要求が実行される前に、ハンドラーで対応が最後にします。"
  syntax:
    content: public System.Web.IHttpHandler PreviousHandler { get; }
    return:
      type: System.Web.IHttpHandler
      description: "<xref href=&quot;System.Web.IHttpHandler&quot;> </xref>インスタンス、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>以前のハンドラーが見つからなかった場合です。"
  overload: System.Web.HttpContext.PreviousHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Profile
  id: Profile
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Profile
  nameWithType: HttpContext.Profile
  fullName: System.Web.HttpContext.Profile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.Profile.ProfileBase&quot;> </xref>現在のユーザー プロファイル用のオブジェクト。"
  remarks: "プロファイル プロパティは、タイプ セーフな API を使用して構造化データの永続的な記憶域に使用されます。 ときにプロファイル プロパティへのアクセスが、値が存在しない、空のインスタンスが返されます。`null`は返されません。"
  syntax:
    content: public System.Web.Profile.ProfileBase Profile { get; }
    return:
      type: System.Web.Profile.ProfileBase
      description: "A <xref href=&quot;System.Web.Profile.ProfileBase&quot;> </xref>場合は、アプリケーション構成ファイルには、プロファイルのプロパティの定義が含まれています。 それ以外の場合、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.Profile*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.RemapHandler(System.Web.IHttpHandler)
  id: RemapHandler(System.Web.IHttpHandler)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: RemapHandler(IHttpHandler)
  nameWithType: HttpContext.RemapHandler(IHttpHandler)
  fullName: System.Web.HttpContext.RemapHandler(IHttpHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "要求のハンドラーを指定できます。"
  remarks: "設定した場合`handler`を`null`既定のハンドラーが要求を処理するために使用します。 設定することができます`handler`非同期ハンドラーまたは同期ハンドラー。 ハンドラーを実装する必要があります、<xref:System.Web.IHttpHandler>インターフェイス</xref:System.Web.IHttpHandler>。"
  syntax:
    content: public void RemapHandler (System.Web.IHttpHandler handler);
    parameters:
    - id: handler
      type: System.Web.IHttpHandler
      description: "このオブジェクトは、要求を処理する必要があります。"
  overload: System.Web.HttpContext.RemapHandler*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "RemapHandler メソッドを呼び出した後、 <xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>イベントが発生しました。"
  platform:
  - net462
- uid: System.Web.HttpContext.Request
  id: Request
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpContext.Request
  fullName: System.Web.HttpContext.Request
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.HttpRequest&quot;> </xref>の現在の HTTP 要求オブジェクト。"
  remarks: "要求プロパティは、<xref:System.Web.HttpRequest>クラス</xref:System.Web.HttpRequest>のメソッドとプロパティにプログラムでアクセスを提供します。 ASP.NET ページへの参照を既定値が含まれているため、<xref:System.Web>名前空間 (が含まれている、<xref:System.Web.HttpContext>クラス)、 <xref:System.Web.HttpRequest> <xref:System.Web.HttpContext>.</xref:System.Web.HttpContext>への参照を完全修飾クラスを使用せず、.aspx ページ上</xref:System.Web.HttpRequest>のメンバーを参照できます</xref:System.Web.HttpContext></xref:System.Web> たとえば、使用することができます`Request.Browser`クライアントのブラウザーの機能を取得します。 ただしのメンバーを使用する場合は、 <xref:System.Web.HttpRequest>ASP.NET 分離コード モジュールからへの参照を含める必要があります、<xref:System.Web>モジュールで現在アクティブな要求/応答のコンテキストと内のクラス名の両方への参照を完全修飾名前空間<xref:System.Web>を使用する</xref:System.Web></xref:System.Web></xref:System.Web.HttpRequest>。 たとえば、分離コード ページである必要がありますを指定する完全修飾名`HttpContext.Current.Request.Browser`です。      > [!NOTE] > このプロパティを使用しようとする場合に ASP.NET が例外をスロー時に、<xref:System.Web.HttpRequest>オブジェクトは使用できません</xref:System.Web.HttpRequest>。 たとえば、Global.asax ファイルでは、Application_Start メソッドまたは Application_Start メソッドから呼び出されるメソッドの場合は true になります。 その時点での HTTP 要求がまだ作成されていません。"
  syntax:
    content: public System.Web.HttpRequest Request { get; }
    return:
      type: System.Web.HttpRequest
      description: "<xref href=&quot;System.Web.HttpRequest&quot;> </xref>の現在の HTTP 要求。"
  overload: System.Web.HttpContext.Request*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "Web アプリケーションの統合モードで IIS 7 で実行します。"
  platform:
  - net462
- uid: System.Web.HttpContext.Response
  id: Response
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpContext.Response
  fullName: System.Web.HttpContext.Response
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.HttpResponse&quot;> </xref>の現在の HTTP 応答に対するオブジェクト。"
  remarks: "応答プロパティは、<xref:System.Web.HttpResponse>クラス</xref:System.Web.HttpResponse>のメソッドとプロパティにプログラムでアクセスを提供します。 ASP.NET ページへの参照を既定値が含まれているため、<xref:System.Web>名前空間 (が含まれている、<xref:System.Web.HttpContext>クラス)、 <xref:System.Web.HttpContext> <xref:System.Web.HttpContext>.</xref:System.Web.HttpContext>への参照を完全修飾クラスを使用せず、.aspx ページ上</xref:System.Web.HttpContext>のメンバーを参照できます</xref:System.Web.HttpContext></xref:System.Web> たとえば、使用することができます`Response.Write(&quot;some output&quot;)`HTTP 出力ストリームに出力を書き込む。 ただしのメンバーを使用する場合は、 <xref:System.Web.HttpResponse>ASP.NET 分離コード モジュールからへの参照を含める必要があります、<xref:System.Web>モジュールで現在アクティブな要求/応答のコンテキストと内のクラスへの参照を完全修飾名前空間<xref:System.Web>を使用する</xref:System.Web></xref:System.Web></xref:System.Web.HttpResponse>。 たとえば、分離コード ページである必要がありますを指定する完全修飾名`HttpContext.Current.Response.Write(&quot;some output&quot;)`です。"
  syntax:
    content: public System.Web.HttpResponse Response { get; }
    return:
      type: System.Web.HttpResponse
      description: "<xref href=&quot;System.Web.HttpResponse&quot;> </xref>の現在の HTTP 応答。"
  overload: System.Web.HttpContext.Response*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "Web アプリケーションの統合モードで IIS 7 で実行します。"
  platform:
  - net462
- uid: System.Web.HttpContext.RewritePath(System.String)
  id: RewritePath(System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: RewritePath(String)
  nameWithType: HttpContext.RewritePath(String)
  fullName: System.Web.HttpContext.RewritePath(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "指定されたパスを使用して、URL をリライトします。"
  remarks: "RewritePath メソッドは、要求された URL で示されているものとは異なるパスをリソースの要求をリダイレクトします。 パスをリセットする、仮想サーバー リソースのクライアントからの要求が正しく解決されるようにした場合は、このメソッドのオーバー ロードを使用して、`rebaseClientPath`パラメーター、パラメーターを設定および`false`です。       Web アプリケーションでページを再構築して、古い Url をブックマークしている人ように使用できますのページに移動した後かどうかを確認する場合は、URL の書き換えと便利です。 URL 書き換えには、透過的に新しいページの場所への要求を転送することができます。       検索エンジンがわかりやすいとは、最適化されている Url を使用するサイトを有効にする場合より堅牢な代替手段は、ASP.NET のルーティングを使用するです。 詳細については、次を参照してください。 [ASP.NET ルーティング](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example shows how to use the RewritePath method to enable a Web site to respond to URLs that do not reflect the file structure in the Web site. The first block of code is an ASP.NET Web page that is named RewritePath.aspx. It requires a query string. If the name of your site is WebSite1, the URL `http://localhost/WebSite1/RewritePath.aspx?page=1` displays \"Page 1\" in the browser. The block of code that follows the Web page is the `Application_BeginRequest` event handler in the Global.asax file. This code intercepts requests for URLs such as `http://localhost/WebSite1/page1` and converts them to the form that is required for RewritePath.aspx before they are processed. Therefore, the URL `http://localhost/WebSite1/page1` invokes RewritePath.aspx with the query-string parameter that displays \"Page 1\" in the browser. If a URL such as `http://localhost/WebSite1/page1` is received, an overload of RewritePath is invoked that enables you to provide a value for the <xref:System.Web.HttpRequest.PathInfo%2A> property as well as a query string parameter.  \n  \n [!code-cs[HttpContext_RewritePath#2](~/add/codesnippet/csharp/m-system.web.httpcontext_1.aspx)]\n [!code-vb[HttpContext_RewritePath#2](~/add/codesnippet/visualbasic/m-system.web.httpcontext_1.aspx)]  \n  \n [!code-vb[HttpContext_RewritePath#1](~/add/codesnippet/visualbasic/m-system.web.httpcontext_2.asax)]\n [!code-cs[HttpContext_RewritePath#1](~/add/codesnippet/csharp/m-system.web.httpcontext_2.asax)]"
  syntax:
    content: public void RewritePath (string path);
    parameters:
    - id: path
      type: System.String
      description: "内部リライト パス。"
  overload: System.Web.HttpContext.RewritePath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code> path </code>現在のアプリケーションのルート ディレクトリではありません。"
  platform:
  - net462
- uid: System.Web.HttpContext.RewritePath(System.String,System.Boolean)
  id: RewritePath(System.String,System.Boolean)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: RewritePath(String,Boolean)
  nameWithType: HttpContext.RewritePath(String,Boolean)
  fullName: System.Web.HttpContext.RewritePath(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "指定したパスおよびサーバー リソースの仮想パスを変更するかどうかを指定するブール値を使用して、URL をリライトします。"
  remarks: "RewritePath メソッドによって呼び出されます、<xref:System.Web.HttpContext.RewritePath%28System.String%29?displayProperty=fullName>メソッドを`rebaseClientPath`パラメーターに設定`true`</xref:System.Web.HttpContext.RewritePath%28System.String%29?displayProperty=fullName>。 リソースへのパスを構築するために使用される仮想パスが変更されていないようにするには、設定、`rebaseClientPath`パラメーターを`false`です。 設定する一般的なシナリオ`rebaseClientPath`に`false`は、URL の書き換えする必要があるあり、テーマを使用して、要求されたリソースとは異なるフォルダーにあるリソースへの URL をリダイレクトするときにします。       Web アプリケーションでページを再構築して、古い Url をブックマークしている人ように使用できますのページに移動した後かどうかを確認する場合は、URL の書き換えと便利です。 URL 書き換えには、透過的に新しいページの場所への要求を転送することができます。       検索エンジンがわかりやすいとは、最適化されている Url を使用するサイトを有効にする場合より堅牢な代替手段は、ASP.NET のルーティングを使用するです。 詳細については、次を参照してください。 [ASP.NET ルーティング](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - For a code example, see the <xref:System.Web.HttpContext.RewritePath%28System.String%29> method overload.
  syntax:
    content: public void RewritePath (string path, bool rebaseClientPath);
    parameters:
    - id: path
      type: System.String
      description: "内部リライト パス。"
    - id: rebaseClientPath
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>仮想パスをリセットするには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>仮想パスをそのままにします。"
  overload: System.Web.HttpContext.RewritePath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code> path </code>現在のアプリケーションのルート ディレクトリではありません。"
  platform:
  - net462
- uid: System.Web.HttpContext.RewritePath(System.String,System.String,System.String)
  id: RewritePath(System.String,System.String,System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: RewritePath(String,String,String)
  nameWithType: HttpContext.RewritePath(String,String,String)
  fullName: System.Web.HttpContext.RewritePath(String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "指定したパス、パス情報、およびクエリ文字列情報を使用して、URL をリライトします。"
  remarks: "RewritePath メソッドは、URL を変更することがなく別のリソースへのリソースに対する要求をリダイレクトします。       `filePath`パラメーターを含まない、`pathInfo`パラメーター コンテンツ。 URL http://www.microsoft.com/virdir/page.html/tail の`filePath`パラメーターは http://www.microsoft.com/virdir/page.html、および`pathInfo`パラメーターがの末尾。       Web アプリケーションでページを再構築して、古い Url をブックマークしている人ように使用できますのページに移動した後かどうかを確認する場合は、URL の書き換えと便利です。 URL 書き換えには、透過的に新しいページの場所への要求を転送することができます。       検索エンジンがわかりやすいとは、最適化されている Url を使用するサイトを有効にする場合より堅牢な代替手段は、ASP.NET のルーティングを使用するです。 詳細については、次を参照してください。 [ASP.NET ルーティング](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - For a code example, including an example of this method overload, see the <xref:System.Web.HttpContext.RewritePath%28System.String%29> method overload.
  syntax:
    content: public void RewritePath (string filePath, string pathInfo, string queryString);
    parameters:
    - id: filePath
      type: System.String
      description: "内部リライト パス。"
    - id: pathInfo
      type: System.String
      description: "リソースの追加パス情報。 詳細については、 <xref:System.Web.HttpRequest.PathInfo*>。</xref:System.Web.HttpRequest.PathInfo*>を参照してください。"
    - id: queryString
      type: System.String
      description: "要求クエリ文字列。"
  overload: System.Web.HttpContext.RewritePath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> path </code>現在のアプリケーションのルート ディレクトリではありません。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code> filePath </code>現在のアプリケーションのルート ディレクトリではありません。"
  platform:
  - net462
- uid: System.Web.HttpContext.RewritePath(System.String,System.String,System.String,System.Boolean)
  id: RewritePath(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: RewritePath(String,String,String,Boolean)
  nameWithType: HttpContext.RewritePath(String,String,String,Boolean)
  fullName: System.Web.HttpContext.RewritePath(String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "指定した仮想パス、パス情報、クエリ文字列情報、およびクライアント ファイル パスがリライト パスに設定されているかどうかを指定するブール値を使用して、URL をリライトします。"
  remarks: "`filePath`パラメーターの内容を含まない、`pathInfo`パラメーター。 URL http://www.microsoft.com/virdir/page.html/tail の`filePath`パラメーターは http://www.microsoft.com/virdir/page.html、および`pathInfo`パラメーターがの末尾。       リソースへのパスを構築するために使用される仮想パスが変更されていないようにするには、設定、`setClientFilePath`パラメーターを`false`です。 設定する一般的なシナリオ`setClientFilePath`に`false`は、URL の書き換えする必要があるあり、テーマを使用して、要求されたリソースとは異なるフォルダーにあるリソースへの URL をリダイレクトするときにします。       Web アプリケーションでページを再構築して、古い Url をブックマークしている人ように使用できますのページに移動した後かどうかを確認する場合は、URL の書き換えと便利です。 URL 書き換えには、透過的に新しいページの場所への要求を転送することができます。       検索エンジンがわかりやすいとは、最適化されている Url を使用するサイトを有効にする場合より堅牢な代替手段は、ASP.NET のルーティングを使用するです。 詳細については、次を参照してください。 [ASP.NET ルーティング](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - For a code example, see the <xref:System.Web.HttpContext.RewritePath%28System.String%29> method overload.
  syntax:
    content: public void RewritePath (string filePath, string pathInfo, string queryString, bool setClientFilePath);
    parameters:
    - id: filePath
      type: System.String
      description: "要求を処理するリソースへの仮想パス。"
    - id: pathInfo
      type: System.String
      description: "URL リダイレクトで使用する追加パス情報。 詳細については、 <xref:System.Web.HttpRequest.PathInfo*>。</xref:System.Web.HttpRequest.PathInfo*>を参照してください。"
    - id: queryString
      type: System.String
      description: "URL リダイレクトで使用する要求クエリ文字列。"
    - id: setClientFilePath
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>値をクライアント リソースで使用されるファイル パスを設定する、`filePath`パラメーターです。 それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.RewritePath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> path </code>現在のアプリケーションのルート ディレクトリではありません。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code> filePath </code>現在のアプリケーションのルート ディレクトリではありません。"
  platform:
  - net462
- uid: System.Web.HttpContext.Server
  id: Server
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Server
  nameWithType: HttpContext.Server
  fullName: System.Web.HttpContext.Server
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.HttpServerUtility&quot;> </xref> Web 要求の処理に使用されるメソッドを提供するオブジェクト。"
  remarks: "サーバー プロパティは、<xref:System.Web.HttpServerUtility>クラス</xref:System.Web.HttpServerUtility>のメソッドとプロパティにプログラムでアクセスを提供します。 ASP.NET ページへの参照を既定値が含まれているため、<xref:System.Web>名前空間 (が含まれている、<xref:System.Web.HttpContext>クラス)、 <xref:System.Web.HttpContext> <xref:System.Web.HttpContext>.</xref:System.Web.HttpContext>への参照を完全修飾クラスを使用せず、.aspx ページ上</xref:System.Web.HttpContext>のメンバーを参照できます</xref:System.Web.HttpContext></xref:System.Web> たとえば、使用することができます`Server.CreateObject(&quot;MyCOMComponent&quot;)`サーバー上の COM オブジェクトのインスタンスを作成します。 ただしのメンバーを使用する場合は、 <xref:System.Web.HttpServerUtility>ASP.NET 分離コード モジュールからへの参照を含める必要があります、<xref:System.Web>モジュールで現在アクティブな要求/応答のコンテキストと内のクラス名の両方への参照を完全修飾名前空間<xref:System.Web>を使用する</xref:System.Web></xref:System.Web></xref:System.Web.HttpServerUtility>。 たとえば、分離コード ページである必要がありますを指定する完全修飾名`HttpContext.Current.Server.CreateObject(&quot;MyCOMComponent&quot;)`です。"
  syntax:
    content: public System.Web.HttpServerUtility Server { get; }
    return:
      type: System.Web.HttpServerUtility
      description: "<xref href=&quot;System.Web.HttpServerUtility&quot;> </xref>の現在の HTTP 要求。"
  overload: System.Web.HttpContext.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Session
  id: Session
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Session
  nameWithType: HttpContext.Session
  fullName: System.Web.HttpContext.Session
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref>の現在の HTTP 要求オブジェクト。"
  remarks: "セッション プロパティは、<xref:System.Web.SessionState.HttpSessionState>クラス</xref:System.Web.SessionState.HttpSessionState>のメソッドとプロパティにプログラムでアクセスを提供します。       セッション状態を使用するためには、これを有効にする必要です。 セッション状態を有効にする方法については、次を参照してください。**構成セッション状態**で[ASP.NET セッション状態の概要](~/add/includes/ajax-current-ext-md.md)です。       セッション状態の値を保存する方法については、次を参照してください。[する方法: セッション状態の保存値](~/add/includes/ajax-current-ext-md.md)です。 セッション状態から値を読み取る方法については、次を参照してください。[する方法: セッションの状態からの読み取り値](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following examples show how to save values in session state and how to read values from session state.  \n  \n These examples require:  \n  \n-   An ASP.NET application that has session state enabled.  \n  \n-   A Web Forms page class that has access to the <xref:System.Web.UI.Page.Session%2A?displayProperty=fullName> property, or any class that has access to the <xref:System.Web.HttpContext.Current%2A?displayProperty=fullName> property.  \n  \n```c#  \nstring firstName = \"Jeff\";  \nstring lastName = \"Smith\";  \nstring city = \"Seattle\";  \n  \n// Save to session state in a Web Forms page class.  \nSession[\"FirstName\"] = firstName;  \nSession[\"LastName\"] = lastName;  \nSession[\"City\"] = city;  \n  \n// Read from session state in a Web Forms page class.  \nfirstName = (string)(Session[\"FirstName\"]);  \nlastName = (string)(Session[\"LastName\"]);  \ncity = (string)(Session[\"City\"]);  \n  \n// Outside of Web Forms page class, use HttpContext.Current.  \nHttpContext context = HttpContext.Current;  \ncontext.Session[\"FirstName\"] = firstName;  \nfirstName = (string)(context.Session[\"FirstName\"]);  \n  \n```  \n  \n```vb#  \nDim firstName As String = \"Jeff\"  \nDim lastName As String = \"Smith\"  \nDim city As String = \"Seattle\"  \n  \n' Save to session state in a Web Forms page class.  \nSession(\"FirstName\") = firstName  \nSession(\"LastName\") = lastName  \nSession(\"City\") = city  \n  \n' Read from session state in a Web Forms page class.  \nfirstName = DirectCast(Session(\"FirstName\"), String)  \nlastName = DirectCast(Session(\"LastName\"), String)  \ncity = DirectCast(Session(\"City\"), String)  \n  \n' Outside of Web Forms page class, use HttpContext.Current.  \nDim context As HttpContext = HttpContext.Current  \ncontext.Session(\"FirstName\") = firstName  \nfirstName = DirectCast(context.Session(\"FirstName\"), String)  \n  \n```"
  syntax:
    content: public System.Web.SessionState.HttpSessionState Session { get; }
    return:
      type: System.Web.SessionState.HttpSessionState
      description: "<xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref>の現在の HTTP 要求オブジェクト。"
  overload: System.Web.HttpContext.Session*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)
  id: SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: SetSessionStateBehavior(SessionStateBehavior)
  nameWithType: HttpContext.SetSessionStateBehavior(SessionStateBehavior)
  fullName: System.Web.HttpContext.SetSessionStateBehavior(SessionStateBehavior)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "HTTP 要求をサポートするために必要なセッション状態の動作の種類を設定します。"
  remarks: "要求の HTTP ハンドラーが実装することでセッション状態が必要とするかどうかを示す ASP.NET の既定の実装で、<xref:System.Web.SessionState.IRequiresSessionState>インターフェイスまたは<xref:System.Web.SessionState.IReadOnlySessionState>インターフェイス</xref:System.Web.SessionState.IReadOnlySessionState></xref:System.Web.SessionState.IRequiresSessionState>。 SetSessionStateBehavior メソッドおよび<xref:System.Web.SessionState.SessionStateBehavior>列挙体を使用して、要求を処理するために必要なセッション状態サポートの種類についての詳細を提供できます</xref:System.Web.SessionState.SessionStateBehavior>。 詳細については、次を参照してください、<xref:System.Web.SessionState.SessionStateBehavior>列挙体です。</xref:System.Web.SessionState.SessionStateBehavior> 。       前に、SetSessionStateBehavior メソッドを呼び出す必要があります、<xref:System.Web.HttpApplication.AcquireRequestState>パイプライン イベント</xref:System.Web.HttpApplication.AcquireRequestState>。 呼び出し時に、またはこのイベントの後に発生すると、<xref:System.InvalidOperationException>例外です</xref:System.InvalidOperationException>。"
  syntax:
    content: public void SetSessionStateBehavior (System.Web.SessionState.SessionStateBehavior sessionStateBehavior);
    parameters:
    - id: sessionStateBehavior
      type: System.Web.SessionState.SessionStateBehavior
      description: "セッション状態の動作の種類を指定する列挙値のいずれかが必要です。"
  overload: System.Web.HttpContext.SetSessionStateBehavior*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "後にメソッドが呼び出された、 <xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>イベントが発生しました。"
  platform:
  - net462
- uid: System.Web.HttpContext.SkipAuthorization
  id: SkipAuthorization
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: SkipAuthorization
  nameWithType: HttpContext.SkipAuthorization
  fullName: System.Web.HttpContext.SkipAuthorization
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得または設定を指定する値かどうか、 <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;> </xref>オブジェクトが現在の要求に対する承認チェックをスキップする必要があります。"
  remarks: "SkipAuthorization プロパティは、匿名接続を許可するページにリダイレクトする必要がある認証モジュールによって高度な用途はものです。 フォーム認証モジュールと Passport 認証モジュールの構成済みのログオン ページにリダイレクトするときに SkipAuthorization 両方設定します。 SkipAuthorization を設定する必要があります、`ControlPrincipal`フラグが設定されます。 については、`ControlPrincipal`フラグ<xref:System.Security.Permissions.SecurityPermissionFlag>.</xref:System.Security.Permissions.SecurityPermissionFlag>を参照してください"
  syntax:
    content: public bool SkipAuthorization { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;></xref>承認チェックをスキップする必要があります。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.SkipAuthorization*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.System#IServiceProvider#GetService(System.Type)
  id: System#IServiceProvider#GetService(System.Type)
  isEii: true
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: System.IServiceProvider.GetService(Type)
  nameWithType: HttpContext.System.IServiceProvider.GetService(Type)
  fullName: System.Web.HttpContext.System.IServiceProvider.GetService(Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "現在のサービス型のオブジェクトを返します。"
  remarks: "このメソッドは、基にアクセスするために役立ちます<xref:System.Web.HttpWorkerRequest>オブジェクト</xref:System.Web.HttpWorkerRequest>。"
  syntax:
    content: object IServiceProvider.GetService (Type service);
    parameters:
    - id: service
      type: System.Type
      description: "型<xref href=&quot;System.Web.HttpContext&quot;></xref>サービス プロバイダーに設定するサービスです。"
    return:
      type: System.Object
      description: "A <xref href=&quot;System.Web.HttpContext&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>サービスが見つからない場合。"
  overload: System.Web.HttpContext.System#IServiceProvider#GetService*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.ThreadAbortOnTimeout
  id: ThreadAbortOnTimeout
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: ThreadAbortOnTimeout
  nameWithType: HttpContext.ThreadAbortOnTimeout
  fullName: System.Web.HttpContext.ThreadAbortOnTimeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET ランタイムが呼び出す必要があるかどうかを指定する値の設定を取得または&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;要求がタイムアウトしたときにこの要求を処理するスレッドでします。"
  remarks: "ハンドラーおよびを使用しているモジュールで、 <xref:System.Web.HttpRequest.TimedOutToken%2A?displayProperty=fullName>、連携によるキャンセル処理を実装するプロパティを無効にしておくことも、<xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>要求がタイムアウトしたときに、既定では ASP.NET を実行する動作</xref:System.Threading.Thread.Abort%2A?displayProperty=fullName></xref:System.Web.HttpRequest.TimedOutToken%2A?displayProperty=fullName>。 このプロパティを設定`false`のキャンセル機能とクリーンアップ ルーチンが ASP.NET によって中断されることがなく実行されるかどうかを確認できます。       このプロパティを設定する場合`false`ASP.NET は自動的に表示されない、「要求がタイムアウトしました。」のエラー ページ、タイムアウトが発生したときにします。 アプリケーションは、応答コンテンツを適切に設定します。"
  syntax:
    content: public bool ThreadAbortOnTimeout { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;スレッドのタイムアウト、それ以外のときに呼び出される<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.HttpContext.ThreadAbortOnTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Timestamp
  id: Timestamp
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Timestamp
  nameWithType: HttpContext.Timestamp
  fullName: System.Web.HttpContext.Timestamp
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "現在の HTTP 要求の初期タイムスタンプを取得します。"
  remarks: "タイムスタンプ プロパティから返されたタイムスタンプが、サーバーのローカル時間し、のインスタンス化時に設定され、<xref:System.Web.HttpContext>オブジェクト</xref:System.Web.HttpContext>。 ローカル時刻は UTC 時刻と UTC のオフセットになります。"
  syntax:
    content: public DateTime Timestamp { get; }
    return:
      type: System.DateTime
      description: "現在の HTTP 要求のタイムスタンプ。"
  overload: System.Web.HttpContext.Timestamp*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Trace
  id: Trace
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Trace
  nameWithType: HttpContext.Trace
  fullName: System.Web.HttpContext.Trace
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得、 <xref href=&quot;System.Web.TraceContext&quot;> </xref>の現在の HTTP 応答に対するオブジェクト。"
  syntax:
    content: public System.Web.TraceContext Trace { get; }
    return:
      type: System.Web.TraceContext
      description: "<xref href=&quot;System.Web.TraceContext&quot;> </xref>の現在の HTTP 応答。"
  overload: System.Web.HttpContext.Trace*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.User
  id: User
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: User
  nameWithType: HttpContext.User
  fullName: System.Web.HttpContext.User
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取得または現在の HTTP 要求のセキュリティ情報を設定します。"
  remarks: "ユーザー定義プロパティのメソッドとプロパティにプログラムでアクセスを提供する、<xref:System.Security.Principal.IPrincipal>インターフェイス</xref:System.Security.Principal.IPrincipal>。       ASP.NET ページへの参照を既定値が含まれているため、<xref:System.Web>名前空間 (が含まれている、<xref:System.Web.HttpContext>クラス)、 <xref:System.Web.HttpContext> <xref:System.Web.HttpContext>.</xref:System.Web.HttpContext>への参照を完全修飾クラスを使用せず、.aspx ページ上</xref:System.Web.HttpContext>のメンバーを参照できます</xref:System.Web.HttpContext></xref:System.Web> たとえば、使用することができます`User.Identity.Name`を実行して、現在のプロセスの代わりに、ユーザーの名前を取得します。 ただしのメンバーを使用する場合は、 <xref:System.Security.Principal.IPrincipal>ASP.NET 分離コード モジュールからへの参照を含める必要があります、<xref:System.Web>モジュールで現在アクティブな要求/応答のコンテキストと内のクラス名の両方への参照を完全修飾名前空間<xref:System.Web>を使用する</xref:System.Web></xref:System.Web></xref:System.Security.Principal.IPrincipal>。 たとえば、分離コード ページである必要がありますを指定する完全修飾名`HttpContext.Current.User.Identity.Name`です。"
  example:
  - "The following example shows how to access properties of the current user through the User property. Those properties are used to set the title of the Web page.  \n  \n If the application uses Windows authentication, the user name includes the domain. For example, the page title would be “Home page for DOMAIN\\username”.  \n  \n [!code-cs[System.Web.HttpContext.User#1](~/add/codesnippet/csharp/p-system.web.httpcontext_1_1.cs)]\n [!code-vb[System.Web.HttpContext.User#1](~/add/codesnippet/visualbasic/p-system.web.httpcontext_1_1.vb)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; set; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "現在の HTTP 要求のセキュリティ情報。"
  overload: System.Web.HttpContext.User*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.WebSocketNegotiatedProtocol
  id: WebSocketNegotiatedProtocol
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: WebSocketNegotiatedProtocol
  nameWithType: HttpContext.WebSocketNegotiatedProtocol
  fullName: System.Web.HttpContext.WebSocketNegotiatedProtocol
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "用のクライアントにサーバーから送信されたネゴシエートされたプロトコルを取得、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>接続します。"
  syntax:
    content: public string WebSocketNegotiatedProtocol { get; }
    return:
      type: System.String
      description: "ネゴシエートされたプロトコル。"
  overload: System.Web.HttpContext.WebSocketNegotiatedProtocol*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.WebSocketRequestedProtocols
  id: WebSocketRequestedProtocols
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: WebSocketRequestedProtocols
  nameWithType: HttpContext.WebSocketRequestedProtocols
  fullName: System.Web.HttpContext.WebSocketRequestedProtocols
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "クライアントから要求されたプロトコルの順序付きリストを取得します。"
  syntax:
    content: public System.Collections.Generic.IList<string> WebSocketRequestedProtocols { get; }
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "要求されたプロトコル、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>でない場合は、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>要求またはリストが存在しないかどうか。"
  overload: System.Web.HttpContext.WebSocketRequestedProtocols*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Resources.MissingManifestResourceException
  isExternal: true
  name: System.Resources.MissingManifestResourceException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.HttpContext.#ctor(System.Web.HttpWorkerRequest)
  parent: System.Web.HttpContext
  isExternal: false
  name: HttpContext(HttpWorkerRequest)
  nameWithType: HttpContext.HttpContext(HttpWorkerRequest)
  fullName: System.Web.HttpContext.HttpContext(HttpWorkerRequest)
- uid: System.Web.HttpWorkerRequest
  parent: System.Web
  isExternal: false
  name: HttpWorkerRequest
  nameWithType: HttpWorkerRequest
  fullName: System.Web.HttpWorkerRequest
- uid: System.Web.HttpContext.#ctor(System.Web.HttpRequest,System.Web.HttpResponse)
  parent: System.Web.HttpContext
  isExternal: false
  name: HttpContext(HttpRequest,HttpResponse)
  nameWithType: HttpContext.HttpContext(HttpRequest,HttpResponse)
  fullName: System.Web.HttpContext.HttpContext(HttpRequest,HttpResponse)
- uid: System.Web.HttpRequest
  parent: System.Web
  isExternal: false
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: System.Web.HttpRequest
- uid: System.Web.HttpResponse
  parent: System.Web
  isExternal: false
  name: HttpResponse
  nameWithType: HttpResponse
  fullName: System.Web.HttpResponse
- uid: System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task})
  parent: System.Web.HttpContext
  isExternal: false
  name: AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
  nameWithType: HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
  fullName: System.Web.HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
- uid: System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<AspNetWebSocketContext,Task>
  nameWithType: Func<AspNetWebSocketContext,Task>
  fullName: System.Func<System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.WebSockets.AspNetWebSocketContext
    name: AspNetWebSocketContext
    nameWithType: AspNetWebSocketContext
    fullName: AspNetWebSocketContext
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task},System.Web.WebSockets.AspNetWebSocketOptions)
  parent: System.Web.HttpContext
  isExternal: false
  name: AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
  nameWithType: HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
  fullName: System.Web.HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
- uid: System.Web.WebSockets.AspNetWebSocketOptions
  parent: System.Web.WebSockets
  isExternal: false
  name: AspNetWebSocketOptions
  nameWithType: AspNetWebSocketOptions
  fullName: System.Web.WebSockets.AspNetWebSocketOptions
- uid: System.Web.HttpContext.AddError(System.Exception)
  parent: System.Web.HttpContext
  isExternal: false
  name: AddError(Exception)
  nameWithType: HttpContext.AddError(Exception)
  fullName: System.Web.HttpContext.AddError(Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.HttpContext.AddOnRequestCompleted(System.Action{System.Web.HttpContext})
  parent: System.Web.HttpContext
  isExternal: false
  name: AddOnRequestCompleted(Action<HttpContext>)
  nameWithType: HttpContext.AddOnRequestCompleted(Action<HttpContext>)
  fullName: System.Web.HttpContext.AddOnRequestCompleted(Action<HttpContext>)
- uid: System.Web.ISubscriptionToken
  parent: System.Web
  isExternal: false
  name: ISubscriptionToken
  nameWithType: ISubscriptionToken
  fullName: System.Web.ISubscriptionToken
- uid: System.Action{System.Web.HttpContext}
  parent: System
  isExternal: true
  name: Action<HttpContext>
  nameWithType: Action<HttpContext>
  fullName: System.Action<System.Web.HttpContext>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<System.Web.HttpContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: HttpContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.HttpContext.AllErrors
  parent: System.Web.HttpContext
  isExternal: false
  name: AllErrors
  nameWithType: HttpContext.AllErrors
  fullName: System.Web.HttpContext.AllErrors
- uid: System.Exception[]
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception[]
  spec.csharp:
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.HttpContext.AllowAsyncDuringSyncStages
  parent: System.Web.HttpContext
  isExternal: false
  name: AllowAsyncDuringSyncStages
  nameWithType: HttpContext.AllowAsyncDuringSyncStages
  fullName: System.Web.HttpContext.AllowAsyncDuringSyncStages
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpContext.Application
  parent: System.Web.HttpContext
  isExternal: false
  name: Application
  nameWithType: HttpContext.Application
  fullName: System.Web.HttpContext.Application
- uid: System.Web.HttpApplicationState
  parent: System.Web
  isExternal: false
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
- uid: System.Web.HttpContext.ApplicationInstance
  parent: System.Web.HttpContext
  isExternal: false
  name: ApplicationInstance
  nameWithType: HttpContext.ApplicationInstance
  fullName: System.Web.HttpContext.ApplicationInstance
- uid: System.Web.HttpApplication
  parent: System.Web
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
- uid: System.Web.HttpContext.AsyncPreloadMode
  parent: System.Web.HttpContext
  isExternal: false
  name: AsyncPreloadMode
  nameWithType: HttpContext.AsyncPreloadMode
  fullName: System.Web.HttpContext.AsyncPreloadMode
- uid: System.Web.Configuration.AsyncPreloadModeFlags
  parent: System.Web.Configuration
  isExternal: false
  name: AsyncPreloadModeFlags
  nameWithType: AsyncPreloadModeFlags
  fullName: System.Web.Configuration.AsyncPreloadModeFlags
- uid: System.Web.HttpContext.Cache
  parent: System.Web.HttpContext
  isExternal: false
  name: Cache
  nameWithType: HttpContext.Cache
  fullName: System.Web.HttpContext.Cache
- uid: System.Web.Caching.Cache
  parent: System.Web.Caching
  isExternal: false
  name: Cache
  nameWithType: Cache
  fullName: System.Web.Caching.Cache
- uid: System.Web.HttpContext.ClearError
  parent: System.Web.HttpContext
  isExternal: false
  name: ClearError()
  nameWithType: HttpContext.ClearError()
  fullName: System.Web.HttpContext.ClearError()
- uid: System.Web.HttpContext.Current
  parent: System.Web.HttpContext
  isExternal: false
  name: Current
  nameWithType: HttpContext.Current
  fullName: System.Web.HttpContext.Current
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.HttpContext.CurrentHandler
  parent: System.Web.HttpContext
  isExternal: false
  name: CurrentHandler
  nameWithType: HttpContext.CurrentHandler
  fullName: System.Web.HttpContext.CurrentHandler
- uid: System.Web.IHttpHandler
  parent: System.Web
  isExternal: false
  name: IHttpHandler
  nameWithType: IHttpHandler
  fullName: System.Web.IHttpHandler
- uid: System.Web.HttpContext.CurrentNotification
  parent: System.Web.HttpContext
  isExternal: false
  name: CurrentNotification
  nameWithType: HttpContext.CurrentNotification
  fullName: System.Web.HttpContext.CurrentNotification
- uid: System.Web.RequestNotification
  parent: System.Web
  isExternal: false
  name: RequestNotification
  nameWithType: RequestNotification
  fullName: System.Web.RequestNotification
- uid: System.Web.HttpContext.DisposeOnPipelineCompleted(System.IDisposable)
  parent: System.Web.HttpContext
  isExternal: false
  name: DisposeOnPipelineCompleted(IDisposable)
  nameWithType: HttpContext.DisposeOnPipelineCompleted(IDisposable)
  fullName: System.Web.HttpContext.DisposeOnPipelineCompleted(IDisposable)
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Web.HttpContext.Error
  parent: System.Web.HttpContext
  isExternal: false
  name: Error
  nameWithType: HttpContext.Error
  fullName: System.Web.HttpContext.Error
- uid: System.Web.HttpContext.GetAppConfig(System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetAppConfig(String)
  nameWithType: HttpContext.GetAppConfig(String)
  fullName: System.Web.HttpContext.GetAppConfig(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.HttpContext.GetConfig(System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetConfig(String)
  nameWithType: HttpContext.GetConfig(String)
  fullName: System.Web.HttpContext.GetConfig(String)
- uid: System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetGlobalResourceObject(String,String)
  nameWithType: HttpContext.GetGlobalResourceObject(String,String)
  fullName: System.Web.HttpContext.GetGlobalResourceObject(String,String)
- uid: System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetGlobalResourceObject(String,String,CultureInfo)
  nameWithType: HttpContext.GetGlobalResourceObject(String,String,CultureInfo)
  fullName: System.Web.HttpContext.GetGlobalResourceObject(String,String,CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Web.HttpContext.GetLocalResourceObject(System.String,System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetLocalResourceObject(String,String)
  nameWithType: HttpContext.GetLocalResourceObject(String,String)
  fullName: System.Web.HttpContext.GetLocalResourceObject(String,String)
- uid: System.Web.HttpContext.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetLocalResourceObject(String,String,CultureInfo)
  nameWithType: HttpContext.GetLocalResourceObject(String,String,CultureInfo)
  fullName: System.Web.HttpContext.GetLocalResourceObject(String,String,CultureInfo)
- uid: System.Web.HttpContext.GetSection(System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetSection(String)
  nameWithType: HttpContext.GetSection(String)
  fullName: System.Web.HttpContext.GetSection(String)
- uid: System.Web.HttpContext.Handler
  parent: System.Web.HttpContext
  isExternal: false
  name: Handler
  nameWithType: HttpContext.Handler
  fullName: System.Web.HttpContext.Handler
- uid: System.Web.HttpContext.IsCustomErrorEnabled
  parent: System.Web.HttpContext
  isExternal: false
  name: IsCustomErrorEnabled
  nameWithType: HttpContext.IsCustomErrorEnabled
  fullName: System.Web.HttpContext.IsCustomErrorEnabled
- uid: System.Web.HttpContext.IsDebuggingEnabled
  parent: System.Web.HttpContext
  isExternal: false
  name: IsDebuggingEnabled
  nameWithType: HttpContext.IsDebuggingEnabled
  fullName: System.Web.HttpContext.IsDebuggingEnabled
- uid: System.Web.HttpContext.IsPostNotification
  parent: System.Web.HttpContext
  isExternal: false
  name: IsPostNotification
  nameWithType: HttpContext.IsPostNotification
  fullName: System.Web.HttpContext.IsPostNotification
- uid: System.Web.HttpContext.IsWebSocketRequest
  parent: System.Web.HttpContext
  isExternal: false
  name: IsWebSocketRequest
  nameWithType: HttpContext.IsWebSocketRequest
  fullName: System.Web.HttpContext.IsWebSocketRequest
- uid: System.Web.HttpContext.IsWebSocketRequestUpgrading
  parent: System.Web.HttpContext
  isExternal: false
  name: IsWebSocketRequestUpgrading
  nameWithType: HttpContext.IsWebSocketRequestUpgrading
  fullName: System.Web.HttpContext.IsWebSocketRequestUpgrading
- uid: System.Web.HttpContext.Items
  parent: System.Web.HttpContext
  isExternal: false
  name: Items
  nameWithType: HttpContext.Items
  fullName: System.Web.HttpContext.Items
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.HttpContext.PageInstrumentation
  parent: System.Web.HttpContext
  isExternal: false
  name: PageInstrumentation
  nameWithType: HttpContext.PageInstrumentation
  fullName: System.Web.HttpContext.PageInstrumentation
- uid: System.Web.Instrumentation.PageInstrumentationService
  parent: System.Web.Instrumentation
  isExternal: false
  name: PageInstrumentationService
  nameWithType: PageInstrumentationService
  fullName: System.Web.Instrumentation.PageInstrumentationService
- uid: System.Web.HttpContext.PreviousHandler
  parent: System.Web.HttpContext
  isExternal: false
  name: PreviousHandler
  nameWithType: HttpContext.PreviousHandler
  fullName: System.Web.HttpContext.PreviousHandler
- uid: System.Web.HttpContext.Profile
  parent: System.Web.HttpContext
  isExternal: false
  name: Profile
  nameWithType: HttpContext.Profile
  fullName: System.Web.HttpContext.Profile
- uid: System.Web.Profile.ProfileBase
  parent: System.Web.Profile
  isExternal: false
  name: ProfileBase
  nameWithType: ProfileBase
  fullName: System.Web.Profile.ProfileBase
- uid: System.Web.HttpContext.RemapHandler(System.Web.IHttpHandler)
  parent: System.Web.HttpContext
  isExternal: false
  name: RemapHandler(IHttpHandler)
  nameWithType: HttpContext.RemapHandler(IHttpHandler)
  fullName: System.Web.HttpContext.RemapHandler(IHttpHandler)
- uid: System.Web.HttpContext.Request
  parent: System.Web.HttpContext
  isExternal: false
  name: Request
  nameWithType: HttpContext.Request
  fullName: System.Web.HttpContext.Request
- uid: System.Web.HttpContext.Response
  parent: System.Web.HttpContext
  isExternal: false
  name: Response
  nameWithType: HttpContext.Response
  fullName: System.Web.HttpContext.Response
- uid: System.Web.HttpContext.RewritePath(System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: RewritePath(String)
  nameWithType: HttpContext.RewritePath(String)
  fullName: System.Web.HttpContext.RewritePath(String)
- uid: System.Web.HttpContext.RewritePath(System.String,System.Boolean)
  parent: System.Web.HttpContext
  isExternal: false
  name: RewritePath(String,Boolean)
  nameWithType: HttpContext.RewritePath(String,Boolean)
  fullName: System.Web.HttpContext.RewritePath(String,Boolean)
- uid: System.Web.HttpContext.RewritePath(System.String,System.String,System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: RewritePath(String,String,String)
  nameWithType: HttpContext.RewritePath(String,String,String)
  fullName: System.Web.HttpContext.RewritePath(String,String,String)
- uid: System.Web.HttpContext.RewritePath(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.HttpContext
  isExternal: false
  name: RewritePath(String,String,String,Boolean)
  nameWithType: HttpContext.RewritePath(String,String,String,Boolean)
  fullName: System.Web.HttpContext.RewritePath(String,String,String,Boolean)
- uid: System.Web.HttpContext.Server
  parent: System.Web.HttpContext
  isExternal: false
  name: Server
  nameWithType: HttpContext.Server
  fullName: System.Web.HttpContext.Server
- uid: System.Web.HttpServerUtility
  parent: System.Web
  isExternal: false
  name: HttpServerUtility
  nameWithType: HttpServerUtility
  fullName: System.Web.HttpServerUtility
- uid: System.Web.HttpContext.Session
  parent: System.Web.HttpContext
  isExternal: false
  name: Session
  nameWithType: HttpContext.Session
  fullName: System.Web.HttpContext.Session
- uid: System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: false
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.HttpContext.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)
  parent: System.Web.HttpContext
  isExternal: false
  name: SetSessionStateBehavior(SessionStateBehavior)
  nameWithType: HttpContext.SetSessionStateBehavior(SessionStateBehavior)
  fullName: System.Web.HttpContext.SetSessionStateBehavior(SessionStateBehavior)
- uid: System.Web.SessionState.SessionStateBehavior
  parent: System.Web.SessionState
  isExternal: false
  name: SessionStateBehavior
  nameWithType: SessionStateBehavior
  fullName: System.Web.SessionState.SessionStateBehavior
- uid: System.Web.HttpContext.SkipAuthorization
  parent: System.Web.HttpContext
  isExternal: false
  name: SkipAuthorization
  nameWithType: HttpContext.SkipAuthorization
  fullName: System.Web.HttpContext.SkipAuthorization
- uid: System.Web.HttpContext.System#IServiceProvider#GetService(System.Type)
  parent: System.Web.HttpContext
  isExternal: false
  name: System.IServiceProvider.GetService(Type)
  nameWithType: HttpContext.System.IServiceProvider.GetService(Type)
  fullName: System.Web.HttpContext.System.IServiceProvider.GetService(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.HttpContext.ThreadAbortOnTimeout
  parent: System.Web.HttpContext
  isExternal: false
  name: ThreadAbortOnTimeout
  nameWithType: HttpContext.ThreadAbortOnTimeout
  fullName: System.Web.HttpContext.ThreadAbortOnTimeout
- uid: System.Web.HttpContext.Timestamp
  parent: System.Web.HttpContext
  isExternal: false
  name: Timestamp
  nameWithType: HttpContext.Timestamp
  fullName: System.Web.HttpContext.Timestamp
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Web.HttpContext.Trace
  parent: System.Web.HttpContext
  isExternal: false
  name: Trace
  nameWithType: HttpContext.Trace
  fullName: System.Web.HttpContext.Trace
- uid: System.Web.TraceContext
  parent: System.Web
  isExternal: false
  name: TraceContext
  nameWithType: TraceContext
  fullName: System.Web.TraceContext
- uid: System.Web.HttpContext.User
  parent: System.Web.HttpContext
  isExternal: false
  name: User
  nameWithType: HttpContext.User
  fullName: System.Web.HttpContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.HttpContext.WebSocketNegotiatedProtocol
  parent: System.Web.HttpContext
  isExternal: false
  name: WebSocketNegotiatedProtocol
  nameWithType: HttpContext.WebSocketNegotiatedProtocol
  fullName: System.Web.HttpContext.WebSocketNegotiatedProtocol
- uid: System.Web.HttpContext.WebSocketRequestedProtocols
  parent: System.Web.HttpContext
  isExternal: false
  name: WebSocketRequestedProtocols
  nameWithType: HttpContext.WebSocketRequestedProtocols
  fullName: System.Web.HttpContext.WebSocketRequestedProtocols
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.HttpContext.#ctor*
  parent: System.Web.HttpContext
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext.HttpContext
- uid: System.Web.HttpContext.AcceptWebSocketRequest*
  parent: System.Web.HttpContext
  isExternal: false
  name: AcceptWebSocketRequest
  nameWithType: HttpContext.AcceptWebSocketRequest
- uid: System.Web.HttpContext.AddError*
  parent: System.Web.HttpContext
  isExternal: false
  name: AddError
  nameWithType: HttpContext.AddError
- uid: System.Web.HttpContext.AddOnRequestCompleted*
  parent: System.Web.HttpContext
  isExternal: false
  name: AddOnRequestCompleted
  nameWithType: HttpContext.AddOnRequestCompleted
- uid: System.Web.HttpContext.AllErrors*
  parent: System.Web.HttpContext
  isExternal: false
  name: AllErrors
  nameWithType: HttpContext.AllErrors
- uid: System.Web.HttpContext.AllowAsyncDuringSyncStages*
  parent: System.Web.HttpContext
  isExternal: false
  name: AllowAsyncDuringSyncStages
  nameWithType: HttpContext.AllowAsyncDuringSyncStages
- uid: System.Web.HttpContext.Application*
  parent: System.Web.HttpContext
  isExternal: false
  name: Application
  nameWithType: HttpContext.Application
- uid: System.Web.HttpContext.ApplicationInstance*
  parent: System.Web.HttpContext
  isExternal: false
  name: ApplicationInstance
  nameWithType: HttpContext.ApplicationInstance
- uid: System.Web.HttpContext.AsyncPreloadMode*
  parent: System.Web.HttpContext
  isExternal: false
  name: AsyncPreloadMode
  nameWithType: HttpContext.AsyncPreloadMode
- uid: System.Web.HttpContext.Cache*
  parent: System.Web.HttpContext
  isExternal: false
  name: Cache
  nameWithType: HttpContext.Cache
- uid: System.Web.HttpContext.ClearError*
  parent: System.Web.HttpContext
  isExternal: false
  name: ClearError
  nameWithType: HttpContext.ClearError
- uid: System.Web.HttpContext.Current*
  parent: System.Web.HttpContext
  isExternal: false
  name: Current
  nameWithType: HttpContext.Current
- uid: System.Web.HttpContext.CurrentHandler*
  parent: System.Web.HttpContext
  isExternal: false
  name: CurrentHandler
  nameWithType: HttpContext.CurrentHandler
- uid: System.Web.HttpContext.CurrentNotification*
  parent: System.Web.HttpContext
  isExternal: false
  name: CurrentNotification
  nameWithType: HttpContext.CurrentNotification
- uid: System.Web.HttpContext.DisposeOnPipelineCompleted*
  parent: System.Web.HttpContext
  isExternal: false
  name: DisposeOnPipelineCompleted
  nameWithType: HttpContext.DisposeOnPipelineCompleted
- uid: System.Web.HttpContext.Error*
  parent: System.Web.HttpContext
  isExternal: false
  name: Error
  nameWithType: HttpContext.Error
- uid: System.Web.HttpContext.GetAppConfig*
  parent: System.Web.HttpContext
  isExternal: false
  name: GetAppConfig
  nameWithType: HttpContext.GetAppConfig
- uid: System.Web.HttpContext.GetConfig*
  parent: System.Web.HttpContext
  isExternal: false
  name: GetConfig
  nameWithType: HttpContext.GetConfig
- uid: System.Web.HttpContext.GetGlobalResourceObject*
  parent: System.Web.HttpContext
  isExternal: false
  name: GetGlobalResourceObject
  nameWithType: HttpContext.GetGlobalResourceObject
- uid: System.Web.HttpContext.GetLocalResourceObject*
  parent: System.Web.HttpContext
  isExternal: false
  name: GetLocalResourceObject
  nameWithType: HttpContext.GetLocalResourceObject
- uid: System.Web.HttpContext.GetSection*
  parent: System.Web.HttpContext
  isExternal: false
  name: GetSection
  nameWithType: HttpContext.GetSection
- uid: System.Web.HttpContext.Handler*
  parent: System.Web.HttpContext
  isExternal: false
  name: Handler
  nameWithType: HttpContext.Handler
- uid: System.Web.HttpContext.IsCustomErrorEnabled*
  parent: System.Web.HttpContext
  isExternal: false
  name: IsCustomErrorEnabled
  nameWithType: HttpContext.IsCustomErrorEnabled
- uid: System.Web.HttpContext.IsDebuggingEnabled*
  parent: System.Web.HttpContext
  isExternal: false
  name: IsDebuggingEnabled
  nameWithType: HttpContext.IsDebuggingEnabled
- uid: System.Web.HttpContext.IsPostNotification*
  parent: System.Web.HttpContext
  isExternal: false
  name: IsPostNotification
  nameWithType: HttpContext.IsPostNotification
- uid: System.Web.HttpContext.IsWebSocketRequest*
  parent: System.Web.HttpContext
  isExternal: false
  name: IsWebSocketRequest
  nameWithType: HttpContext.IsWebSocketRequest
- uid: System.Web.HttpContext.IsWebSocketRequestUpgrading*
  parent: System.Web.HttpContext
  isExternal: false
  name: IsWebSocketRequestUpgrading
  nameWithType: HttpContext.IsWebSocketRequestUpgrading
- uid: System.Web.HttpContext.Items*
  parent: System.Web.HttpContext
  isExternal: false
  name: Items
  nameWithType: HttpContext.Items
- uid: System.Web.HttpContext.PageInstrumentation*
  parent: System.Web.HttpContext
  isExternal: false
  name: PageInstrumentation
  nameWithType: HttpContext.PageInstrumentation
- uid: System.Web.HttpContext.PreviousHandler*
  parent: System.Web.HttpContext
  isExternal: false
  name: PreviousHandler
  nameWithType: HttpContext.PreviousHandler
- uid: System.Web.HttpContext.Profile*
  parent: System.Web.HttpContext
  isExternal: false
  name: Profile
  nameWithType: HttpContext.Profile
- uid: System.Web.HttpContext.RemapHandler*
  parent: System.Web.HttpContext
  isExternal: false
  name: RemapHandler
  nameWithType: HttpContext.RemapHandler
- uid: System.Web.HttpContext.Request*
  parent: System.Web.HttpContext
  isExternal: false
  name: Request
  nameWithType: HttpContext.Request
- uid: System.Web.HttpContext.Response*
  parent: System.Web.HttpContext
  isExternal: false
  name: Response
  nameWithType: HttpContext.Response
- uid: System.Web.HttpContext.RewritePath*
  parent: System.Web.HttpContext
  isExternal: false
  name: RewritePath
  nameWithType: HttpContext.RewritePath
- uid: System.Web.HttpContext.Server*
  parent: System.Web.HttpContext
  isExternal: false
  name: Server
  nameWithType: HttpContext.Server
- uid: System.Web.HttpContext.Session*
  parent: System.Web.HttpContext
  isExternal: false
  name: Session
  nameWithType: HttpContext.Session
- uid: System.Web.HttpContext.SetSessionStateBehavior*
  parent: System.Web.HttpContext
  isExternal: false
  name: SetSessionStateBehavior
  nameWithType: HttpContext.SetSessionStateBehavior
- uid: System.Web.HttpContext.SkipAuthorization*
  parent: System.Web.HttpContext
  isExternal: false
  name: SkipAuthorization
  nameWithType: HttpContext.SkipAuthorization
- uid: System.Web.HttpContext.System#IServiceProvider#GetService*
  parent: System.Web.HttpContext
  isExternal: false
  name: System.IServiceProvider.GetService
  nameWithType: HttpContext.System.IServiceProvider.GetService
- uid: System.Web.HttpContext.ThreadAbortOnTimeout*
  parent: System.Web.HttpContext
  isExternal: false
  name: ThreadAbortOnTimeout
  nameWithType: HttpContext.ThreadAbortOnTimeout
- uid: System.Web.HttpContext.Timestamp*
  parent: System.Web.HttpContext
  isExternal: false
  name: Timestamp
  nameWithType: HttpContext.Timestamp
- uid: System.Web.HttpContext.Trace*
  parent: System.Web.HttpContext
  isExternal: false
  name: Trace
  nameWithType: HttpContext.Trace
- uid: System.Web.HttpContext.User*
  parent: System.Web.HttpContext
  isExternal: false
  name: User
  nameWithType: HttpContext.User
- uid: System.Web.HttpContext.WebSocketNegotiatedProtocol*
  parent: System.Web.HttpContext
  isExternal: false
  name: WebSocketNegotiatedProtocol
  nameWithType: HttpContext.WebSocketNegotiatedProtocol
- uid: System.Web.HttpContext.WebSocketRequestedProtocols*
  parent: System.Web.HttpContext
  isExternal: false
  name: WebSocketRequestedProtocols
  nameWithType: HttpContext.WebSocketRequestedProtocols
