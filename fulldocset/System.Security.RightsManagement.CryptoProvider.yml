### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.CryptoProvider
  id: CryptoProvider
  children:
  - System.Security.RightsManagement.CryptoProvider.BlockSize
  - System.Security.RightsManagement.CryptoProvider.BoundGrants
  - System.Security.RightsManagement.CryptoProvider.CanDecrypt
  - System.Security.RightsManagement.CryptoProvider.CanEncrypt
  - System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  - System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])
  - System.Security.RightsManagement.CryptoProvider.Dispose
  - System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)
  - System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])
  - System.Security.RightsManagement.CryptoProvider.Finalize
  langs:
  - csharp
  name: CryptoProvider
  nameWithType: CryptoProvider
  fullName: System.Security.RightsManagement.CryptoProvider
  type: Class
  summary: "デジタル著作権管理サービスを保護されたコンテンツを暗号化および暗号化を提供します。"
  remarks: "CryptoProvider は<xref:System.Security.RightsManagement.UseLicense.Bind%2A>、権限管理<xref:System.Security.RightsManagement.UseLicense><xref:System.Security.RightsManagement.SecureEnvironment>.</xref:System.Security.RightsManagement.SecureEnvironment>に</xref:System.Security.RightsManagement.UseLicense>バインドするときに、メソッド</xref:System.Security.RightsManagement.UseLicense.Bind%2A>の結果として作成します。       その他の同様<xref:System.Security.RightsManagement>型、CryptoProvider は完全信頼アプリケーションでは使用できません</xref:System.Security.RightsManagement>。"
  example:
  - "The following example shows how to use the CryptoProvider class to create an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class CryptoProvider : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.BlockSize
  id: BlockSize
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: BlockSize
  nameWithType: CryptoProvider.BlockSize
  fullName: System.Security.RightsManagement.CryptoProvider.BlockSize
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "暗号ブロック サイズをバイト単位で取得します。"
  remarks: "`clearText`と`cipherText`に渡されるバッファー<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>と<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>n をする必要があります * BlockSize バイトの長さ、場所 &quot;n&quot; より大きいかを 1 に等しい整数値は、</xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> 。       場合<xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>は`false`、バッファーが<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A><xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>.</xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>に渡されるバッファーと同じ長さにする必要があります</xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>に渡される</xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>       場合<xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>は`true`に渡されるバッファー<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>に渡されるバッファーから別の長さを指定できます<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>(すべてのバッファー サイズもは常にブロック サイズのバイトの長さの倍数).</xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>       1 のブロック サイズの場合、暗号文がストリーム暗号; であることを示します2 以上のブロック サイズでは、ブロック暗号を示します。"
  example:
  - "The following example shows how to use the BlockSize property in converting clear-text data to encrypted-text data.  \n  \n [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/visualbasic/rmcontentpublish/window1.xaml.vb#rmcontpubencrypt)]\n [!code-cs[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/csharp/RmContentPublish/Window1.xaml.cs#rmcontpubencrypt)]"
  syntax:
    content: public int BlockSize { get; }
    return:
      type: System.Int32
      description: "暗号ブロック サイズ (バイト単位)。  既定のブロック サイズ[!INCLUDE[TLA#tla_aes](~/add/includes/tlasharptla-aes-md.md)]は 8 です。"
  overload: System.Security.RightsManagement.CryptoProvider.BlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.BoundGrants
  id: BoundGrants
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: BoundGrants
  nameWithType: CryptoProvider.BoundGrants
  fullName: System.Security.RightsManagement.CryptoProvider.BoundGrants
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "検証に合格し、ユーザーに付与される権限を一覧表示するコレクションを取得します。"
  remarks: ''
  example:
  - "The following example shows how to use the BoundGrants property to obtain a list rights granted through a <xref:System.Security.RightsManagement.UseLicense>.  \n  \n [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/visualbasic/rmcontentviewer/window1.xaml.vb#rmcontviewuselicense)]\n [!code-cs[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/csharp/RmContentViewer/Window1.xaml.cs#rmcontviewuselicense)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentGrant> BoundGrants { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentGrant}
      description: "検証に合格し、する権限を列挙するコレクションは、ユーザーに付与されます。"
  overload: System.Security.RightsManagement.CryptoProvider.BoundGrants*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.CanDecrypt
  id: CanDecrypt
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: CanDecrypt
  nameWithType: CryptoProvider.CanDecrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanDecrypt
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "ユーザーが暗号化を解除する権限を持っているかどうかを示す値を取得します。"
  remarks: "CanDecrypt 返します**true**場合、<xref:System.Security.RightsManagement.UseLicense>をこのバインド<xref:System.Security.RightsManagement.CryptoProvider>表示、編集、印刷、または所有者などの読み取りアクセス権をユーザーに付与します</xref:System.Security.RightsManagement.CryptoProvider></xref:System.Security.RightsManagement.UseLicense>。"
  example:
  - "The following example shows how to use the CanDecrypt property to determine if decryption is allowed.  \n  \n [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/visualbasic/rmcontentviewer/window1.xaml.vb#rmcontviewuselicense)]\n [!code-cs[RightsManagedContentViewer#RmContViewUseLicense](~/add/codesnippet/csharp/RmContentViewer/Window1.xaml.cs#rmcontviewuselicense)]"
  syntax:
    content: public bool CanDecrypt { get; }
    return:
      type: System.Boolean
      description: '**true**場合、 <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref> ; の暗号化を解除するユーザー権限を付与それ以外の場合、 **false**です。'
  overload: System.Security.RightsManagement.CryptoProvider.CanDecrypt*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.CanEncrypt
  id: CanEncrypt
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: CanEncrypt
  nameWithType: CryptoProvider.CanEncrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanEncrypt
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "ユーザーが暗号化する権限を持っているかどうかを示す値を取得します。"
  remarks: "<xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A>返します**true**場合、<xref:System.Security.RightsManagement.UseLicense>をこのバインド<xref:System.Security.RightsManagement.CryptoProvider>編集または所有者などの書き込みアクセス権をユーザーに付与します</xref:System.Security.RightsManagement.CryptoProvider></xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A>"
  syntax:
    content: public bool CanEncrypt { get; }
    return:
      type: System.Boolean
      description: '**true**場合、 <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref> ; の暗号化にユーザー権限を付与それ以外の場合、 **false**です。'
  overload: System.Security.RightsManagement.CryptoProvider.CanEncrypt*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  id: CanMergeBlocks
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: CanMergeBlocks
  nameWithType: CryptoProvider.CanMergeBlocks
  fullName: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "示す値を取得するかどうか<> *> と<> *> とは異なるバッファー ブロック サイズの長さを受け取ることができます。"
  remarks: "`clearText`と`cipherText`に渡されるバッファー<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>と<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>n をする必要があります*<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>バイトの長さ、場所 &quot;n&quot; より大きいかを 1 に等しい整数値は、</xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> </xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> 。     CanMergeBlocks 場合* *false**、バッファーが<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A><xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>.</xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>に渡されるバッファーと同じ長さにする必要があります</xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>に渡される     CanMergeBlocks 場合* *true** に渡されるバッファー<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>に渡されるバッファーから別の長さを指定できます<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>(すべてのバッファー サイズの倍数である必要がありますが常に<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>バイトの長さ).</xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> </xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> </xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>"
  syntax:
    content: public bool CanMergeBlocks { get; }
    return:
      type: System.Boolean
      description: '**true**に渡されたバッファー場合<> *> に渡されたバッファーから別の長さを指定できます<> *>、それ以外の**false**に渡されたバッファー場合<> *> と<> *> 完全に同じ長さにする必要があります。  [!INCLUDE[TLA#tla_aes](~/add/includes/tlasharptla-aes-md.md)]既定値は**true**です。'
  overload: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])
  id: Decrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Decrypt(Byte[])
  nameWithType: CryptoProvider.Decrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Decrypt(Byte[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "暗号テキストをクリア テキストを復号化します。"
  remarks: ''
  example:
  - "The following example shows how to use the Decrypt method to convert encrypted data to unencrypted data.  \n  \n [!code-vb[RightsManagedContentViewer#RmContViewDecrypt](~/add/codesnippet/visualbasic/rmcontentviewer/window1.xaml.vb#rmcontviewdecrypt)]\n [!code-cs[RightsManagedContentViewer#RmContViewDecrypt](~/add/codesnippet/csharp/RmContentViewer/Window1.xaml.cs#rmcontviewdecrypt)]"
  syntax:
    content: public byte[] Decrypt (byte[] cryptoText);
    parameters:
    - id: cryptoText
      type: System.Byte[]
      description: "暗号化を解除する暗号テキスト。"
    return:
      type: System.Byte[]
      description: "テキストをオフに、暗号化が解除された<code> cryptoText</code>です。"
  overload: System.Security.RightsManagement.CryptoProvider.Decrypt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>cipherText</code>null です。"
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "権限を与えない暗号化を解除します。"
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Dispose
  id: Dispose
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Dispose()
  nameWithType: CryptoProvider.Dispose()
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.RightsManagement.CryptoProvider&quot;></xref>です。"
  remarks: "Dispose の実行<xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(~/add/includes/ajax-current-ext-md.md).</xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>       <xref:System.Security.RightsManagement.CryptoProvider>。</xref:System.Security.RightsManagement.CryptoProvider>使用が終了したときに、Dispose を呼び出す Dispose メソッドは、<xref:System.Security.RightsManagement.CryptoProvider>使用不可の状態</xref:System.Security.RightsManagement.CryptoProvider>。 Dispose を呼び出した後は、すべての参照を解放する必要があります、<xref:System.Security.RightsManagement.CryptoProvider>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Security.RightsManagement.CryptoProvider>占有されていた</xref:System.Security.RightsManagement.CryptoProvider></xref:System.Security.RightsManagement.CryptoProvider>。 詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] ><xref:System.Security.RightsManagement.CryptoProvider></xref:System.Security.RightsManagement.CryptoProvider>の最後の参照を解放する前に常に呼び出しが破棄。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Security.RightsManagement.CryptoProvider>オブジェクトの`Finalize`メソッド</xref:System.Security.RightsManagement.CryptoProvider>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.RightsManagement.CryptoProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: CryptoProvider.Dispose(Boolean)
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Security.RightsManagement.CryptoProvider&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A>。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`にパラメーターが設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Security.RightsManagement.CryptoProvider>参照。</xref:System.Security.RightsManagement.CryptoProvider> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Security.RightsManagement.CryptoProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])
  id: Encrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Encrypt(Byte[])
  nameWithType: CryptoProvider.Encrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Encrypt(Byte[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "暗号テキストをクリア テキストを暗号化します。"
  remarks: "バイト長、`clearText`バッファーは、暗号の倍数である必要があります<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>プロパティ</xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>。       デジタル rights management システム使用[!INCLUDE[TLA#tla_aes](~/add/includes/tlasharptla-aes-md.md)]暗号をブロックします。  [!INCLUDE[TLA2#tla_aes](~/add/includes/tla2sharptla-aes-md.md)]ブロックが暗号化されていない個別に同じクリア テキストの&2; つのブロックと同じ暗号化テキストの結果を生成するようにします。  独立したブロック暗号化からの復号化脅威を最小限に抑えるにアプリケーションが同じクリア テキストのブロックの暗号化を回避する、圧縮などのコンテンツを変更する方法を使用する必要があります。"
  example:
  - "The following example shows how to use the Encrypt method to convert clear-text data to encrypted-text data.  \n  \n [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/visualbasic/rmcontentpublish/window1.xaml.vb#rmcontpubencrypt)]\n [!code-cs[RightsManagedContentPublish#RmContPubEncrypt](~/add/codesnippet/csharp/RmContentPublish/Window1.xaml.cs#rmcontpubencrypt)]"
  syntax:
    content: public byte[] Encrypt (byte[] clearText);
    parameters:
    - id: clearText
      type: System.Byte[]
      description: "暗号化するクリア テキスト コンテンツ。"
    return:
      type: System.Byte[]
      description: "暗号化された暗号化テキストの指定された<code> clearText</code>です。"
  overload: System.Security.RightsManagement.CryptoProvider.Encrypt*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>clearText</code>null です。"
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "暗号化は許可されていません。"
  platform:
  - net462
- uid: System.Security.RightsManagement.CryptoProvider.Finalize
  id: Finalize
  parent: System.Security.RightsManagement.CryptoProvider
  langs:
  - csharp
  name: Finalize()
  nameWithType: CryptoProvider.Finalize()
  fullName: System.Security.RightsManagement.CryptoProvider.Finalize()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "リソースを解放し、インスタンスがガベージ コレクションによって回収される前に、内部のクリーンアップを実行します。"
  remarks: "最終処理を実行<xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(~/add/includes/ajax-current-ext-md.md).</xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>       このメソッドは<xref:System.Object.Finalize%2A>。</xref:System.Object.Finalize%2A> アプリケーション コードではこのメソッドを呼び出す必要がありますいません。オブジェクトの`Finalize`への呼び出しによって、ガベージ コレクターによって終了処理が無効になっていない限り、ガベージ コレクション中にメソッドが自動的に起動、<xref:System.GC.SuppressFinalize%2A>メソッド</xref:System.GC.SuppressFinalize%2A>。       詳細については、次を参照してください。 [Finalize メソッドおよびデストラクター](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)、[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)、および[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。"
  syntax:
    content: ~CryptoProvider ();
    parameters: []
  overload: System.Security.RightsManagement.CryptoProvider.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.RightsManagement.RightsManagementException
  parent: System.Security.RightsManagement
  isExternal: false
  name: RightsManagementException
  nameWithType: RightsManagementException
  fullName: System.Security.RightsManagement.RightsManagementException
- uid: System.Security.RightsManagement.CryptoProvider.BlockSize
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BlockSize
  nameWithType: CryptoProvider.BlockSize
  fullName: System.Security.RightsManagement.CryptoProvider.BlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.RightsManagement.CryptoProvider.BoundGrants
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BoundGrants
  nameWithType: CryptoProvider.BoundGrants
  fullName: System.Security.RightsManagement.CryptoProvider.BoundGrants
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentGrant}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ContentGrant>
  nameWithType: ReadOnlyCollection<ContentGrant>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentGrant>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.RightsManagement.ContentGrant>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.RightsManagement.ContentGrant
    name: ContentGrant
    nameWithType: ContentGrant
    fullName: ContentGrant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.RightsManagement.CryptoProvider.CanDecrypt
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanDecrypt
  nameWithType: CryptoProvider.CanDecrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanDecrypt
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.RightsManagement.CryptoProvider.CanEncrypt
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanEncrypt
  nameWithType: CryptoProvider.CanEncrypt
  fullName: System.Security.RightsManagement.CryptoProvider.CanEncrypt
- uid: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanMergeBlocks
  nameWithType: CryptoProvider.CanMergeBlocks
  fullName: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks
- uid: System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Decrypt(Byte[])
  nameWithType: CryptoProvider.Decrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Decrypt(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.RightsManagement.CryptoProvider.Dispose
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Dispose()
  nameWithType: CryptoProvider.Dispose()
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose()
- uid: System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: CryptoProvider.Dispose(Boolean)
  fullName: System.Security.RightsManagement.CryptoProvider.Dispose(Boolean)
- uid: System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Encrypt(Byte[])
  nameWithType: CryptoProvider.Encrypt(Byte[])
  fullName: System.Security.RightsManagement.CryptoProvider.Encrypt(Byte[])
- uid: System.Security.RightsManagement.CryptoProvider.Finalize
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Finalize()
  nameWithType: CryptoProvider.Finalize()
  fullName: System.Security.RightsManagement.CryptoProvider.Finalize()
- uid: System.Security.RightsManagement.CryptoProvider.BlockSize*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BlockSize
  nameWithType: CryptoProvider.BlockSize
- uid: System.Security.RightsManagement.CryptoProvider.BoundGrants*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: BoundGrants
  nameWithType: CryptoProvider.BoundGrants
- uid: System.Security.RightsManagement.CryptoProvider.CanDecrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanDecrypt
  nameWithType: CryptoProvider.CanDecrypt
- uid: System.Security.RightsManagement.CryptoProvider.CanEncrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanEncrypt
  nameWithType: CryptoProvider.CanEncrypt
- uid: System.Security.RightsManagement.CryptoProvider.CanMergeBlocks*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: CanMergeBlocks
  nameWithType: CryptoProvider.CanMergeBlocks
- uid: System.Security.RightsManagement.CryptoProvider.Decrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Decrypt
  nameWithType: CryptoProvider.Decrypt
- uid: System.Security.RightsManagement.CryptoProvider.Dispose*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Dispose
  nameWithType: CryptoProvider.Dispose
- uid: System.Security.RightsManagement.CryptoProvider.Encrypt*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Encrypt
  nameWithType: CryptoProvider.Encrypt
- uid: System.Security.RightsManagement.CryptoProvider.Finalize*
  parent: System.Security.RightsManagement.CryptoProvider
  isExternal: false
  name: Finalize
  nameWithType: CryptoProvider.Finalize
