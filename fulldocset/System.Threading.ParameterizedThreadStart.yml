### YamlMime:ManagedReference
items:
- uid: System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  langs:
  - csharp
  name: ParameterizedThreadStart
  nameWithType: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  summary: "実行するメソッドを表す、 <xref href=&quot;System.Threading.Thread&quot;></xref>です。"
  remarks: "マネージ スレッドが作成されると、スレッド上で実行するメソッドがで表される: -<xref:System.Threading.ThreadStart>デリゲートに渡される、<xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName>コンス トラクター</xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> </xref:System.Threading.ThreadStart> 。  任意のメソッド パラメーターを持たずを返す`void`(C#) または、 `Sub` Visual Basic のプロシージャは、デリゲートを表すことができます。      -ParameterizedThreadStart デリゲートに渡される、<xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName>コンス トラクター</xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> 。 型の&1; つのパラメーターを持つ任意のメソッド<xref:System.Object>し、c# では、void を返しますまたは、Visual Basic では Sub プロシージャは、デリゲートを表すことができます</xref:System.Object>。       スレッドがまで実行を開始していない、<xref:System.Threading.Thread.Start%2A?displayProperty=fullName>メソッドが呼び出されます</xref:System.Threading.Thread.Start%2A?displayProperty=fullName>。 <xref:System.Threading.ThreadStart>または ParameterizedThreadStart デリゲートが、スレッドで呼び出され、デリゲートによって表されるメソッドの最初の行で実行を開始します</xref:System.Threading.ThreadStart>。 ParameterizedThreadStart デリゲートに渡されるオブジェクトの場合、<xref:System.Threading.Thread.Start%28System.Object%29>メソッドは、デリゲートに渡されます</xref:System.Threading.Thread.Start%28System.Object%29>。      > [!NOTE] > Visual Basic および c# のユーザーを省略できます、<xref:System.Threading.ThreadStart>またはスレッドを作成するときの ParameterizedThreadStart デリゲート コンス トラクター</xref:System.Threading.ThreadStart> 。 Visual Basic を使用して、`AddressOf`演算子が、メソッドに渡すときに、<xref:System.Threading.Thread.%23ctor%2A>コンス トラクターたとえば、 `Dim t As New Thread(AddressOf ThreadProc)`。</xref:System.Threading.Thread.%23ctor%2A> 。 C# の場合は、単にスレッド プロシージャの名前を指定します。 コンパイラは、適切なデリゲート コンス トラクターを選択します。      > [!NOTE] > コンス トラクターの最初のパラメーターが、インスタンス変数を C++ では、インスタンス メソッドの ParameterizedThreadStart デリゲートを作成するときにします。 静的メソッドは、コンス トラクターの最初のパラメーターは&0; です。 静的メソッドでは、デリゲート コンス トラクターには、1 つだけのパラメーターが必要です。 クラス名で修飾して、コールバック メソッドのアドレス。       ParameterizedThreadStart デリゲートと<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>簡単にデータをスレッド プロシージャが、この手法を渡すにはタイプ セーフではない<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>。</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>任意のオブジェクトを渡すことができますのでメソッド オーバー ロードします。</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> データをスレッド プロシージャに渡すより堅牢な方法は、ワーカーのオブジェクトをスレッド プロシージャと、データ フィールドの両方にです。 詳細については、次を参照してください。[スレッドの作成と開始時にデータを渡す](~/add/includes/ajax-current-ext-md.md)です。       ParameterizedThreadStart デリゲートには、1 つのパラメーターのみがサポートしています。 次のいずれかのパラメーターをすることにより、ParameterizedThreadStart に複数のデータ項目を渡すことができます: の配列。      コレクション型の場合、同じ種類のすべてのデータ項目の場合。      は、タプル型、<xref:System.Tuple%602>または<xref:System.Tuple%604>。</xref:System.Tuple%604></xref:System.Tuple%602>など"
  example:
  - "The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \n  \n> [!NOTE]\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \n  \n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public delegate void ParameterizedThreadStart(object obj);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
