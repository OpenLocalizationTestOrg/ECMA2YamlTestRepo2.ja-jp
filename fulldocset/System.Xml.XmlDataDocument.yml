### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlDataDocument
  id: XmlDataDocument
  children:
  - System.Xml.XmlDataDocument.#ctor
  - System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  - System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  - System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  - System.Xml.XmlDataDocument.DataSet
  - System.Xml.XmlDataDocument.GetElementById(System.String)
  - System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  - System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  - System.Xml.XmlDataDocument.Load(System.IO.Stream)
  - System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDataDocument.Load(System.String)
  - System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  langs:
  - csharp
  name: XmlDataDocument
  nameWithType: XmlDataDocument
  fullName: System.Xml.XmlDataDocument
  type: Class
  summary: "により、構造化データを格納、取得、およびリレーショナルを通じて操作<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "このクラス拡張<xref:System.Xml.XmlDocument>.</xref:System.Xml.XmlDocument> リレーショナル データまたは XML データを読み込むし、World Wide Web Consortium (W3C) ドキュメント オブジェクト モデル (DOM) を使用してデータを操作することができます。 DOM は、ノード オブジェクトの階層としてデータを表示します。 `XmlDataDocument`を実装する、<xref:System.Xml.XPath.IXPathNavigable>インターフェイスをソース ドキュメントとして使用して、<xref:System.Xml.Xsl.XslTransform>クラス</xref:System.Xml.Xsl.XslTransform>のことができますもされる</xref:System.Xml.XPath.IXPathNavigable>       `XmlDataDocument`閉じる、会社名を持つ、`DataSet`読み込まれた XML データのリレーショナル ビューを提供するクラス。 加えられた変更、`XmlDataDocument`に反映されますが、`DataSet`およびその逆です。       読み込みに、 `DataSet` XML データを使用して<xref:System.Data.DataSet.ReadXmlSchema%2A>リレーショナルのマッピングを作成する</xref:System.Data.DataSet.ReadXmlSchema%2A>。 XML データの<xref:System.Xml.XmlDataDocument.Load%2A>または<xref:System.Xml.XmlDocument.LoadXml%2A>。</xref:System.Xml.XmlDocument.LoadXml%2A></xref:System.Xml.XmlDataDocument.Load%2A>を使用して読み込みし、       リレーショナル データを読み込むには、指定、`DataSet`でパラメーターとしてそのリレーショナル データを含む、<xref:System.Xml.XmlDataDocument.%23ctor%2A>コンス トラクター</xref:System.Xml.XmlDataDocument.%23ctor%2A> 。"
  syntax:
    content: >-
      [System.Obsolete("XmlDataDocument class will be removed in a future release.")]

      public class XmlDataDocument : System.Xml.XmlDocument
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  - System.Xml.XmlDocument
  implements: []
  inheritedMembers:
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateNavigator
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.DocumentType
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.String)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.SchemaInfo
  - System.Xml.XmlDocument.Schemas
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.XmlResolver
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: XmlDataDocument()
  nameWithType: XmlDataDocument.XmlDataDocument()
  fullName: System.Xml.XmlDataDocument.XmlDataDocument()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref>クラスです。"
  remarks: "空<xref:System.Data.DataSet>作成され、関連付け、 `XmlDataDocument`</xref:System.Data.DataSet> 。"
  syntax:
    content: public XmlDataDocument ();
    parameters: []
  overload: System.Xml.XmlDataDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  id: '#ctor(System.Data.DataSet)'
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: XmlDataDocument(DataSet)
  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)
  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> 、指定したクラス<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "`XmlDataDocument`が同期されている、指定した`DataSet`です。 内のデータ、`DataSet`はから直ちに使用できる、`XmlDataDocument`です。 変更、`DataSet`で反映されますが、`XmlDataDocument`です。 行った変更、`XmlDataDocument`と一致していれば、`DataSet`スキーマ内で伝達される、`DataSet`です。"
  example:
  - "The following example loads a customer table into an `XmlDataDocument`.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_0_1.cpp)]\n [!code-cs[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_0_1.cs)]\n [!code-vb[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_0_1.vb)]"
  syntax:
    content: public XmlDataDocument (System.Data.DataSet dataset);
    parameters:
    - id: dataset
      type: System.Data.DataSet
      description: "The <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref> to load into <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDataDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlDataDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "現在のノードの複製を作成します。"
  remarks: "複製、`XmlDataDocument`ものクローンを作成、<xref:System.Data.DataSet>スキーマ</xref:System.Data.DataSet>。       場合`deep`に設定されている`false`、複製された`DataSet`持ち、データがありません; である行はありません。       場合`deep`に設定されている`true`、複製された`DataSet`がスキーマに設定され、データが設定されます。       参照してください<xref:System.Xml.XmlNode.CloneNode%2A>で、`XmlNode`クラスの別のノードの種類ごとにこのメソッドの動作について説明した表を参照してください</xref:System.Xml.XmlNode.CloneNode%2A>。"
  example:
  - "The following example loads a `DataSet` into an `XmlDataDocument` and then creates a shallow clone of the `XmlDataDocument`.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_4_1.cpp)]\n [!code-vb[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_4_1.vb)]\n [!code-cs[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_4_1.cs)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>再帰的に指定されたノードの下のサブツリーのクローンを作成します。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>したノードだけのクローンを作成します。"
    return:
      type: System.Xml.XmlNode
      description: "複製されたノード。"
  overload: System.Xml.XmlDataDocument.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateElement(String,String,String)
  nameWithType: XmlDataDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "指定した要素を作成する<> *>、 <> </> *>、 <xref:System.Xml.XmlNode.NamespaceURI*></xref:System.Xml.XmlNode.NamespaceURI*> 。"
  remarks: "`Note to Inheritors`この関数をオーバー ロードする場合は、拡張機能を使用できません。 代わりに、この場合、基本クラスによって作成された要素を返すことができます`XmlDataDocument`です。 次の例を参照してください。      ```   class MyXmlDataDocument : XmlDataDocument {    public override XmlElement CreateElement(string prefix, string localName, string nsURI) {      //Ensure we are returning the base class implementation of element.      XmlElement e = base.CreateElement(prefix, localName, nsURI);      //Add additional code here.      return e;    //Return the element created by XmlDataDocument.    }       }   ```"
  syntax:
    content: public override System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "新しい要素のプレフィックス。 場合は String.Empty または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>プレフィックスはありません。"
    - id: localName
      type: System.String
      description: "新しい要素のローカル名。"
    - id: namespaceURI
      type: System.String
      description: "名前空間 Uniform Resource Identifier () の新しい要素。 場合は String.Empty または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>namespaceURI がありません。"
    return:
      type: System.Xml.XmlElement
      description: "A new <xref href=&quot;System.Xml.XmlElement&quot;></xref>."
  overload: System.Xml.XmlDataDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  id: CreateEntityReference(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateEntityReference(String)
  nameWithType: XmlDataDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "作成、 <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref>指定した名前です。"
  remarks: "<xref:System.Xml.XmlEntityReference>ノードを作成できません<xref:System.Xml.XmlDataDocument>オブジェクト</xref:System.Xml.XmlDataDocument>。</xref:System.Xml.XmlEntityReference> このメソッドを呼び出すと、例外をスローします。"
  syntax:
    content: public override System.Xml.XmlEntityReference CreateEntityReference (string name);
    parameters:
    - id: name
      type: System.String
      description: "エンティティ参照の名前です。"
    return:
      type: System.Xml.XmlEntityReference
      description: "<xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref>指定した名前です。"
  overload: System.Xml.XmlDataDocument.CreateEntityReference*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "このメソッドを呼び出します。"
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  id: CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "新たに作成<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>このドキュメントを移動するためのオブジェクト。 <xref uid=&quot;langword_csharp_XPathNavigator&quot; name=&quot;XPathNavigator&quot; href=&quot;&quot;> </xref>で指定されたノードに配置されて、 <code> node </code>パラメーター。"
  remarks: "`XPathNavigator`データへの読み取り専用で、ランダム アクセスを提供します。 XSLT 変換用に最適化された、利点がパフォーマンスに入力メカニズムとして使用する場合、<xref:System.Xml.Xsl.XslTransform.Transform%2A>メソッド</xref:System.Xml.Xsl.XslTransform.Transform%2A>。"
  example:
  - To see an XSLT transformation using `XmlDataDocument` and an `XPathNavigator`, see the <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=fullName> method.
  syntax:
    content: protected override System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>ナビゲーターを最初に配置します。"
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref uid=&quot;langword_csharp_XPathNavigator&quot; name=&quot;XPathNavigator&quot; href=&quot;&quot;> </xref>文書内を移動するために使用します。"
  overload: System.Xml.XmlDataDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.DataSet
  id: DataSet
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
  fullName: System.Xml.XmlDataDocument.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "取得、 <xref href=&quot;System.Data.DataSet&quot;> </xref>内のデータのリレーショナル表現を提供する、 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;></xref>です。"
  remarks: "`DataSet`データにアクセスすることができます、`XmlDataDocument`リレーショナル モデルを使用します。 つまり、テーブル、ビュー、行、列、リレーション、として、データを処理およびにことができます。 行われた変更によって、`DataSet`にすぐに表示されて、`XmlDataDocument`です。"
  example:
  - "The following example modifies the price of a book using the `DataSet` methods.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/cpp/p-system.xml.xmldatadocu_1.cpp)]\n [!code-cs[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/csharp/p-system.xml.xmldatadocu_1.cs)]\n [!code-vb[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldatadocu_1.vb)]  \n  \n The example uses the following two files as input.  \n  \n `2books.xml`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/p-system.xml.xmldatadocu_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/p-system.xml.xmldatadocu_3.xml)]"
  syntax:
    content: public System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "A <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>内のデータへのアクセスに使用できる、 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref>リレーショナル モデルを使用します。"
  overload: System.Xml.XmlDataDocument.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: XmlDataDocument.GetElementById(String)
  fullName: System.Xml.XmlDataDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "取得、 <xref href=&quot;System.Xml.XmlElement&quot;> </xref>指定した ID に置き換えます。 このメソッドでサポートされていない、 <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref>クラスです。 このメソッドを呼び出すと、例外をスローします。"
  remarks: "このメソッドは、<xref:System.Xml.XmlDataDocument>クラス</xref:System.Xml.XmlDataDocument>によってサポートされていません"
  syntax:
    content: public override System.Xml.XmlElement GetElementById (string elemId);
    parameters:
    - id: elemId
      type: System.String
      description: "一致する属性 ID。"
    return:
      type: System.Xml.XmlElement
      description: "<xref href=&quot;System.Xml.XmlElement&quot;> </xref>指定した ID に置き換えます。"
  overload: System.Xml.XmlDataDocument.GetElementById*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "このメソッドを呼び出します。"
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  id: GetElementFromRow(System.Data.DataRow)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementFromRow(DataRow)
  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)
  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "取得、 <xref href=&quot;System.Xml.XmlElement&quot;> </xref>に指定された関連付けられている<xref href=&quot;System.Data.DataRow&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example loads a `DataSet` into an `XmlDataDocument` and then creates an `XmlElement` representing the first customer record.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cs[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_1_1.cs)]\n [!code-cpp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_1_1.cpp)]\n [!code-vb[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_1_1.vb)]"
  syntax:
    content: public System.Xml.XmlElement GetElementFromRow (System.Data.DataRow r);
    parameters:
    - id: r
      type: System.Data.DataRow
      description: "<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref>が関連付けられている<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>取得します。"
    return:
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> 、指定の表現を含む<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xml.XmlDataDocument.GetElementFromRow*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlDataDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "返します、 <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref>指定<xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*>に一致するすべての子孫要素の一覧を含む"
  remarks: >-
    > [!NOTE]

    >  It is recommended that you use the <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> or <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> method instead of the GetElementsByTagName method.
  syntax:
    content: public override System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "一致する限定名。 一致、 <> </> *> 一致するノードのプロパティです。特殊な値&quot;*&quot;すべてのタグに一致します。"
    return:
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref>すべて一致するノードの一覧を格納します。"
  overload: System.Xml.XmlDataDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  id: GetRowFromElement(System.Xml.XmlElement)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetRowFromElement(XmlElement)
  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)
  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>に指定された関連付けられている<xref href=&quot;System.Xml.XmlElement&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example modifies the price of the first book.  \n  \n [!code-cs[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_2_1.cs)]\n [!code-cpp[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_2_1.cpp)]\n [!code-vb[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_2_1.vb)]  \n  \n The example uses the following input files:  \n  \n `2books.xml`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_3.xml)]"
  syntax:
    content: public System.Data.DataRow GetRowFromElement (System.Xml.XmlElement e);
    parameters:
    - id: e
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>が関連付けられている<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;></xref>取得します。"
    return:
      type: System.Data.DataRow
      description: "<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref>の表現を含む、 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>です。<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>場合があるない<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;></xref>に関連付けられている、 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xml.XmlDataDocument.GetRowFromElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XmlDataDocument.Load(Stream)
  fullName: System.Xml.XmlDataDocument.Load(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "読み込み、 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref>指定したストリームからです。"
  remarks: "`XmlDataDocument`作成元のエンティティ参照はサポートされません。 データには、エンティティ参照が含まれている場合、`Load`メソッドを解決し、任意のエンティティ参照を展開します。      > [!NOTE] > リレーション形式を XML データを表示するためにデータのマッピングに使用するスキーマを最初に指定する必要があります。 これに呼び出すか、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドまたは内の列とテーブルを作成することで、`DataSet`手動でします</xref:System.Data.DataSet.ReadXmlSchema%2A>。 この手順を呼び出す前に行う必要があります`Load`です。"
  syntax:
    content: public override void Load (System.IO.Stream inStream);
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "読み込む XML ドキュメントを含むストリーム。"
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XmlDataDocument.Load(TextReader)
  fullName: System.Xml.XmlDataDocument.Load(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "読み込み、 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref>指定<xref:System.IO.TextReader></xref:System.IO.TextReader>。"
  remarks: "`XmlDataDocument`作成元のエンティティ参照はサポートされません。 データには、エンティティ参照が含まれている場合、`Load`メソッドを解決し、任意のエンティティ参照を展開します。      > [!NOTE] > リレーション形式を XML データを表示するためにデータのマッピングに使用するスキーマを最初に指定する必要があります。 これに呼び出すか、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドまたは内の列とテーブルを作成することで、`DataSet`手動でします</xref:System.Data.DataSet.ReadXmlSchema%2A>。 この手順を呼び出す前に行う必要があります`Load`です。"
  syntax:
    content: public override void Load (System.IO.TextReader txtReader);
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "<xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref>ドキュメントに XML データをフィードするために使用します。"
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(String)
  nameWithType: XmlDataDocument.Load(String)
  fullName: System.Xml.XmlDataDocument.Load(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "読み込み、 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref>指定した URL を使用します。"
  remarks: "`XmlDataDocument`作成元のエンティティ参照はサポートされません。 データには、エンティティ参照が含まれている場合、`Load`メソッドを解決し、任意のエンティティ参照を展開します。      > [!NOTE] > リレーション形式を XML データを表示するためにデータのマッピングに使用するスキーマを最初に指定する必要があります。 これに呼び出すか、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドまたは内の列とテーブルを作成することで、`DataSet`手動でします</xref:System.Data.DataSet.ReadXmlSchema%2A>。 この手順を呼び出す前に行う必要があります`Load`です。"
  syntax:
    content: public override void Load (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "読み込む XML ドキュメントを含むファイルの URL。"
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XmlDataDocument.Load(XmlReader)
  fullName: System.Xml.XmlDataDocument.Load(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "読み込み、 <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref>指定<xref:System.Xml.XmlReader></xref:System.Xml.XmlReader>。"
  remarks: "`XmlDataDocument`作成元のエンティティ参照はサポートされません。 作成する必要がありますが、データ ソースにエンティティ参照が含まれている場合、<xref:System.Xml.XmlValidatingReader>で、<xref:System.Xml.XmlValidatingReader.EntityHandling%2A>プロパティ (これは、既定の動作です) で entityhandling.expandentities が使用する設定し、を渡す、`XmlValidatingReader`を`Load`メソッド</xref:System.Xml.XmlValidatingReader.EntityHandling%2A></xref:System.Xml.XmlValidatingReader>。 使用しない場合、 `XmlValidatingReader`、`Load`メソッドが例外をスローします。       `Load`メソッドは、有意の空白を常に保存します。 <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>プロパティは、空白文字は保持されているかどうかを決定します</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>。 既定値は`false`、空白文字は保持されません。       リーダーが初期状態 (つまり、ReadState=ReadState.Initial) の場合`Load`リーダーの内容全体を使用して、検出した内容からの DOM をビルドします。       深さ&quot;n&quot;の一部のノードには、既に、リーダーが配置されて、そのノードと&quot;n&quot;の深さを閉じる終了タグまで後続のすべての兄弟このメソッドが読み込みます。 これは、次の結果です。       現在のノードと、次の兄弟の外観が次のような場合: ```   <!--comment--><element1>one</element1><element2>two</element2>   ``` `Load`ドキュメントは&2; つのルート レベル要素ではできないため、例外がスローされます。        現在のノードと、次の兄弟の外観が次のような場合: ```   <!--comment--><?process       instruction?><!--comment--></endtag>   ``` `Load`は成功します。 ただし、する必要が、不完全な DOM ツリーに、ルート レベル要素が存在しないためです。        ドキュメントを保存する前に、ルート レベルの要素を追加する必要があります。それ以外の場合、<xref:System.Xml.XmlDocument.Save%2A>メソッドが例外をスローします</xref:System.Xml.XmlDocument.Save%2A>。       リーダーが配置されているまで読み取りを続行して、リーダーがドキュメント (たとえば、白い領域または属性ノード) のルート レベルとして無効なリーフ ノードに配置されている場合、ルートとして使用することができますをノード上。 ドキュメントでは、この時点での読み込みを開始します。"
  example:
  - "The following example modifies the price of a book using the `DataSet` methods.  \n  \n [!code-cpp[XmlDataDocument.Load#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_3_1.cpp)]\n [!code-cs[XmlDataDocument.Load#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_3_1.cs)]\n [!code-vb[XmlDataDocument.Load#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_3_1.vb)]  \n  \n The example uses the following two input files.  \n  \n `2books.xml`  \n  \n [!code-xml[XmlDataDocument.Load#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[XmlDataDocument.Load#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_3.xsd)]"
  syntax:
    content: public override void Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref uid=&quot;langword_csharp_XmlReader&quot; name=&quot;XmlReader&quot; href=&quot;&quot;> </xref>読み込む XML ドキュメントを格納します。"
  overload: System.Xml.XmlDataDocument.Load*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "読み込まれている XML は、エンティティ参照を含み、リーダーがエンティティを解決できません。"
  platform:
  - net462
references:
- uid: System.Xml.XmlDocument
  isExternal: false
  name: System.Xml.XmlDocument
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Xml.XmlDataDocument.#ctor
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument()
  nameWithType: XmlDataDocument.XmlDataDocument()
  fullName: System.Xml.XmlDataDocument.XmlDataDocument()
- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument(DataSet)
  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)
  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlDataDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateElement(String,String,String)
  nameWithType: XmlDataDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateEntityReference(String)
  nameWithType: XmlDataDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)
- uid: System.Xml.XmlEntityReference
  parent: System.Xml
  isExternal: false
  name: XmlEntityReference
  nameWithType: XmlEntityReference
  fullName: System.Xml.XmlEntityReference
- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlDataDocument.DataSet
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
  fullName: System.Xml.XmlDataDocument.DataSet
- uid: System.Xml.XmlDataDocument.GetElementById(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: XmlDataDocument.GetElementById(String)
  fullName: System.Xml.XmlDataDocument.GetElementById(String)
- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementFromRow(DataRow)
  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)
  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlDataDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetRowFromElement(XmlElement)
  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)
  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)
- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(Stream)
  nameWithType: XmlDataDocument.Load(Stream)
  fullName: System.Xml.XmlDataDocument.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(TextReader)
  nameWithType: XmlDataDocument.Load(TextReader)
  fullName: System.Xml.XmlDataDocument.Load(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlDataDocument.Load(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(String)
  nameWithType: XmlDataDocument.Load(String)
  fullName: System.Xml.XmlDataDocument.Load(String)
- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XmlDataDocument.Load(XmlReader)
  fullName: System.Xml.XmlDataDocument.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XmlDataDocument.#ctor*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument
  nameWithType: XmlDataDocument.XmlDataDocument
- uid: System.Xml.XmlDataDocument.CloneNode*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CloneNode
  nameWithType: XmlDataDocument.CloneNode
- uid: System.Xml.XmlDataDocument.CreateElement*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateElement
  nameWithType: XmlDataDocument.CreateElement
- uid: System.Xml.XmlDataDocument.CreateEntityReference*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateEntityReference
  nameWithType: XmlDataDocument.CreateEntityReference
- uid: System.Xml.XmlDataDocument.CreateNavigator*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlDataDocument.CreateNavigator
- uid: System.Xml.XmlDataDocument.DataSet*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
- uid: System.Xml.XmlDataDocument.GetElementById*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementById
  nameWithType: XmlDataDocument.GetElementById
- uid: System.Xml.XmlDataDocument.GetElementFromRow*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementFromRow
  nameWithType: XmlDataDocument.GetElementFromRow
- uid: System.Xml.XmlDataDocument.GetElementsByTagName*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlDataDocument.GetElementsByTagName
- uid: System.Xml.XmlDataDocument.GetRowFromElement*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetRowFromElement
  nameWithType: XmlDataDocument.GetRowFromElement
- uid: System.Xml.XmlDataDocument.Load*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load
  nameWithType: XmlDataDocument.Load
