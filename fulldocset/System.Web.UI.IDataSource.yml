### YamlMime:ManagedReference
items:
- uid: System.Web.UI.IDataSource
  id: IDataSource
  children:
  - System.Web.UI.IDataSource.DataSourceChanged
  - System.Web.UI.IDataSource.GetView(System.String)
  - System.Web.UI.IDataSource.GetViewNames
  langs:
  - csharp
  name: IDataSource
  nameWithType: IDataSource
  fullName: System.Web.UI.IDataSource
  type: Interface
  summary: "データ バインド コントロールにバインドする抽象データ ソースを表します。"
  remarks: "ASP.NET には、Web サーバー コントロールの一貫した方法でデータをバインドできるようにするコントロールのデータ バインディング アーキテクチャがサポートされています。 データにバインドする web サーバー コントロールは、データ バインド コントロールとバインディングは、という名前のデータ ソース コントロールを促進するクラスと呼ばれます。 データ ソース コントロールが任意のデータ ソースを表すことができます。 リレーショナル データベース、ファイル、ストリーム、ビジネス オブジェクト、およびなどです。 データ ソースは、ソースまたは基になるデータの形式に関係なく、データ バインド コントロールに一貫した方法でデータ表示を制御します。       独自のカスタム ASP.NET データ ソースの管理を実装するときは、IDataSource インターフェイスを実装します。       IDataSource インターフェイスを実装する任意のクラスは、データ ソース コントロールです。 IDataSource インターフェイスとして機能する ASP.NET のすべてのデータ ソースの基盤コントロールし、その&2; つの方法で基本的なデータ バインディング アーキテクチャ概念の&1; つを定義します、<xref:System.Web.UI.IDataSource.GetView%2A>メソッドおよび<xref:System.Web.UI.IDataSource.GetViewNames%2A>メソッド。</xref:System.Web.UI.IDataSource.GetViewNames%2A> </xref:System.Web.UI.IDataSource.GetView%2A> 。 この概念は、すべてのデータ ソース コントロールが、データの&1; つまたは複数の名前付きビューをサポートします。 データ ソース ビュー オブジェクトがに似ていますが、<xref:System.Data.DataView>で抽象化、<xref:System.Data>名前空間: データ バインド可能な並べ替え、フィルター、およびビューを定義するその他のデータ操作用のデータのビューをカスタマイズします</xref:System.Data></xref:System.Data.DataView>。 基本的に、データ ソースは何も制御を超えるデータのビューを取得します。       データ ソース コントロールには、1 つまたは複数の関連するデータ ソース ビュー オブジェクトを持つことができます。 一部のデータ ソースなどのリレーショナル データベースを表すものも含め、コントロール<xref:System.Web.UI.WebControls.SqlDataSource>と<xref:System.Web.UI.WebControls.AccessDataSource>、1 つのビューをサポートします</xref:System.Web.UI.WebControls.AccessDataSource></xref:System.Web.UI.WebControls.SqlDataSource>。 その他のデータ ソース コントロールなどの階層的なデータ ソース コントロールを含む<xref:System.Web.UI.WebControls.SiteMapDataSource>、多くのビューをサポートします</xref:System.Web.UI.WebControls.SiteMapDataSource>。 データ ソース ビューでは、データ ソースとサポートしている操作の機能を定義します。       要約すると、データ ソース コントロールは IDataSource インターフェイスを実装して、表していると常にそれらが表すデータ ソースからデータの取得をサポートするデータを&1; つまたは複数の名前付きのビューをサポートします。 データ ソース コントロールが常に場合など、要求時にデータを取得`DataBind`データ バインド コントロールで呼び出されるとします。"
  example:
  - "The following code example demonstrates how a class can implement the methods defined by the IDataSource interface to provide data to data-bound controls. The data source control in this example acts as a data source on a comma-separated value file, and can be used by any data-bound control to display comma-separated file data. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.idatasou_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.idatasou_1.vb)]"
  syntax:
    content: public interface IDataSource
  implements: []
  platform:
  - net462
- uid: System.Web.UI.IDataSource.DataSourceChanged
  id: DataSourceChanged
  parent: System.Web.UI.IDataSource
  langs:
  - csharp
  name: DataSourceChanged
  nameWithType: IDataSource.DataSourceChanged
  fullName: System.Web.UI.IDataSource.DataSourceChanged
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "データ ソース コントロールがデータ バインド コントロールに影響を与えるいくつかの方法で変更されたときに発生します。"
  remarks: "DataSourceChanged このイベントは、データ バインド コントロールとそのデータ間のデータ バインドに影響を与えるいくつかの方法でデータ バインド コントロールまたは基になるデータのプロパティが変更されたとき。 など、イベントは、ファイルの名前プロパティになど、<xref:System.Web.UI.WebControls.AccessDataSource.DataFile%2A>ファイル ベースのデータ ソース コントロールでプロパティが変更された</xref:System.Web.UI.WebControls.AccessDataSource.DataFile%2A>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  syntax:
    content: public event EventHandler DataSourceChanged;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.IDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: IDataSource.GetView(String)
  fullName: System.Web.UI.IDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "データ ソース コントロールに関連付けられている名前付きのデータ ソース ビューを取得します。"
  remarks: "データ ソース コントロール クラスには、その基になるデータの&1; つまたは複数のビューをサポートできます。 これらのビューは、<xref:System.Web.UI.DataSourceView>クラス</xref:System.Web.UI.DataSourceView>のインスタンスによって表されます データ ソース ビューでは、データ ソース コントロールの機能を定義し、基になるデータ ストアからデータを取得し、並べ替え、挿入、削除、および更新などの操作を実行するために必要なすべての作業を実行します。       データ ソース コントロールを実装するクラスの<xref:System.Web.UI.IDataSource>インターフェイスを実装 GetView メソッドをクラスに関連付けられた厳密に型指定されたビュー オブジェクトを返します</xref:System.Web.UI.IDataSource>"
  example:
  - "The following code example demonstrates how a data source control class that implements the <xref:System.Web.UI.IDataSource> interface implements the GetView method, returning a strongly typed instance of the <xref:System.Web.UI.DataSourceView> class. Because the data source control supports only one view, it ignores the name and returns a view named with the default view name. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#3](~/add/codesnippet/csharp/m-system.web.ui.idatasou_0_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#3](~/add/codesnippet/visualbasic/m-system.web.ui.idatasou_0_1.vb)]"
  syntax:
    content: public System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "取得するビューの名前。"
    return:
      type: System.Web.UI.DataSourceView
      description: "名前付き返します<xref href=&quot;System.Web.UI.DataSourceView&quot;></xref>に関連付けられている、 <xref href=&quot;System.Web.UI.IDataSource&quot;></xref>です。"
  overload: System.Web.UI.IDataSource.GetView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.IDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: IDataSource.GetViewNames()
  fullName: System.Web.UI.IDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "関連付けられているビュー オブジェクトの一覧を表す名のコレクションを取得、 <xref href=&quot;System.Web.UI.IDataSource&quot;> </xref>インターフェイスです。"
  remarks: "データ ソース コントロール クラスには、その基になるデータの&1; つまたは複数の名前付きビューをサポートできます。 GetViewNames メソッドでは、データ ソース コントロールのインスタンスに関連付けられている表示名のコレクションを返します。 呼び出し元はビュー名のコレクションを反復処理して、個々 の取得<xref:System.Web.UI.DataSourceView>オブジェクトと、<xref:System.Web.UI.IDataSource.GetView%2A>メソッド</xref:System.Web.UI.IDataSource.GetView%2A></xref:System.Web.UI.DataSourceView>。       データ ソース コントロールの実装<xref:System.Web.UI.IDataSource>を表すすべてのデータ ソース名のコレクションを返す GetViewNames 方法、データ ソース コントロールのクラスに関連付けられているオブジェクトを表示するインターフェイスを実装</xref:System.Web.UI.IDataSource>するクラス"
  example:
  - "The following code example demonstrates how a data source control that implements the <xref:System.Web.UI.IDataSource> interface implements the GetViewNames method, returning an <xref:System.Collections.ICollection> collection of names. Because the data source supports only one view, the method returns a collection of one element using the default name for the view. This code example is part of a larger example provided for the <xref:System.Web.UI.DataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.CsvDataSource_1#4](~/add/codesnippet/csharp/m-system.web.ui.idatasou_1_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#4](~/add/codesnippet/visualbasic/m-system.web.ui.idatasou_1_1.vb)]"
  syntax:
    content: public System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>に関連付けられているビューの名前を格納している、 <xref href=&quot;System.Web.UI.IDataSource&quot;> </xref></xref:System.Collections.ICollection> 。"
  overload: System.Web.UI.IDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.IDataSource.DataSourceChanged
  parent: System.Web.UI.IDataSource
  isExternal: false
  name: DataSourceChanged
  nameWithType: IDataSource.DataSourceChanged
  fullName: System.Web.UI.IDataSource.DataSourceChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.UI.IDataSource.GetView(System.String)
  parent: System.Web.UI.IDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: IDataSource.GetView(String)
  fullName: System.Web.UI.IDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.IDataSource.GetViewNames
  parent: System.Web.UI.IDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: IDataSource.GetViewNames()
  fullName: System.Web.UI.IDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.IDataSource.GetView*
  parent: System.Web.UI.IDataSource
  isExternal: false
  name: GetView
  nameWithType: IDataSource.GetView
- uid: System.Web.UI.IDataSource.GetViewNames*
  parent: System.Web.UI.IDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: IDataSource.GetViewNames
