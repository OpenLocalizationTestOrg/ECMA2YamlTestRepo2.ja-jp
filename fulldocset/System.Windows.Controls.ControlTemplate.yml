### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.ControlTemplate
  id: ControlTemplate
  children:
  - System.Windows.Controls.ControlTemplate.#ctor
  - System.Windows.Controls.ControlTemplate.#ctor(System.Type)
  - System.Windows.Controls.ControlTemplate.TargetType
  - System.Windows.Controls.ControlTemplate.Triggers
  - System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)
  langs:
  - csharp
  name: ControlTemplate
  nameWithType: ControlTemplate
  fullName: System.Windows.Controls.ControlTemplate
  type: Class
  summary: "視覚的な構造とさまざまな動作を指定、 <xref href=&quot;System.Windows.Controls.Control&quot;> </xref>コントロールの複数のインスタンスを共有することができます。"
  remarks: "ControlTemplate では、コントロールの視覚的な構造を指定することができます。 コントロールの作成者が ControlTemplate 既定値を定義し、アプリケーション作成者がコントロールの視覚的な構造を再構築に ControlTemplate をオーバーライドできます。       コントロール テンプレートは、多数の機能によって提供される、[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]スタイルとテンプレートのモデル。 スタイルとテンプレート モデルを使用する優れた柔軟性が備わっている多くの場合必要はありません、独自のコントロールを作成します。 アプリケーションの作成者が、コントロールの視覚エフェクトを変更したり、既存のコントロールの ControlTemplate を置き換えるを参照してください。 する場合は、[スタイルとテンプレート](~/add/includes/ajax-current-ext-md.md)例とについて詳しく説明するトピックです。       独自のコントロールを作成している場合に「カスタム コントロールを作成する」を参照してください、[コントロールの作成の概要](~/add/includes/ajax-current-ext-md.md)です。       ControlTemplate は、ユーザーと、スタイルを含むオブジェクトの外側に表示される実装の詳細の自己完結型の単位。 同じコントロール テンプレート内では、コントロール テンプレートの内容を操作する唯一の方法です。      <a name=&quot;xamlObjectElementUsage_VisualTree&quot;></a>## XAML プロパティ要素の使用```   <ControlTemplate>     <VisualTreeRootNode > VisualTreeNodeContents     </VisualTreeRootNode >   </ControlTemplate>   ``` <a name=&quot;xamlValues_VisualTree&quot;> </a> ## XAML 値*ControlTemplate* ControlTemplate または派生クラスのオブジェクト要素。             *VisualTreeRootNode*単一[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]ControlTemplate (または派生クラス) のすぐ下の子として要素。 テンプレートには、単一のルート ノードが必要です。 有効なテンプレートとして選択した要素を生成するために*VisualTreeRootNode*が多くの場合、複数の子要素をサポートするモデルで、独自のコンテンツ モデルをサポートするために必要です。       *VisualTreeNodeContents*目的のテンプレートを完了する&1; つまたは複数の要素。 場合として選択された*VisualTreeRootNode*のみサポートしている&1; つの子、ことがありますのみとして宣言されている&1; つの要素*VisualTreeNodeContents*です。 可能です (ただし、一般的ではない) 場合は、テキスト コンテンツを提供する、選択した*VisualTreeRootNode*テキスト コンテンツ プロパティをサポートします。"
  example:
  - "The following shows a <xref:System.Windows.Controls.Button> <xref:System.Windows.Style> that sets the ControlTemplate of a <xref:System.Windows.Controls.Button>:  \n  \n [!code-xml[StylingIntroSample_snip#ButtonCT](~/add/codesnippet/xaml/t-system.windows.control_3_1.xaml)]  \n  \n When this gets applied, the <xref:System.Windows.Controls.Button> appears as an <xref:System.Windows.Shapes.Ellipse>:  \n  \n ![Button ControlTemplate sample](~/add/media/stylingintro-buttoncontroltemplate.png \"Button ControlTemplate sample\")  \n  \n When you set the <xref:System.Windows.Controls.Control.Template%2A> property of a <xref:System.Windows.Controls.Control> to a new ControlTemplate as in the above example, you are replacing the entire template. What the <xref:System.Windows.Controls.Button> looks like when it is in focus or pressed is all part of the default appearance of the button that you are replacing. Therefore, depending on your needs, you may want to put in your definition what your button should look like when it is pressed, and so on, as in the following example:  \n  \n [!code-xml[ControlTemplateExamples#1](~/add/codesnippet/xaml/controltemplateexamples/resources/button.xaml#1)]  \n  \n Note that this example references resources that are not shown here. For the complete sample, see [Styling with ControlTemplates Sample](http://go.microsoft.com/fwlink/?LinkID=160041). That sample provides examples of control templates for many controls and is the best way for you to get started with creating control templates."
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)]

      [System.Windows.Markup.DictionaryKeyProperty("TargetType")]

      public class ControlTemplate : System.Windows.FrameworkTemplate
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.FrameworkTemplate
  implements: []
  inheritedMembers:
  - System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)
  - System.Windows.FrameworkTemplate.HasContent
  - System.Windows.FrameworkTemplate.IsSealed
  - System.Windows.FrameworkTemplate.LoadContent
  - System.Windows.FrameworkTemplate.RegisterName(System.String,System.Object)
  - System.Windows.FrameworkTemplate.Resources
  - System.Windows.FrameworkTemplate.Seal
  - System.Windows.FrameworkTemplate.ShouldSerializeResources(System.Windows.Markup.XamlDesignerSerializationManager)
  - System.Windows.FrameworkTemplate.ShouldSerializeVisualTree
  - System.Windows.FrameworkTemplate.System#Windows#Markup#INameScope#FindName(System.String)
  - System.Windows.FrameworkTemplate.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.FrameworkTemplate.Template
  - System.Windows.FrameworkTemplate.UnregisterName(System.String)
  - System.Windows.FrameworkTemplate.VisualTree
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Controls.ControlTemplate.#ctor
  id: '#ctor'
  parent: System.Windows.Controls.ControlTemplate
  langs:
  - csharp
  name: ControlTemplate()
  nameWithType: ControlTemplate.ControlTemplate()
  fullName: System.Windows.Controls.ControlTemplate.ControlTemplate()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Controls.ControlTemplate&quot;> </xref>クラスです。"
  syntax:
    content: public ControlTemplate ();
    parameters: []
  overload: System.Windows.Controls.ControlTemplate.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Controls.ControlTemplate.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Windows.Controls.ControlTemplate
  langs:
  - csharp
  name: ControlTemplate(Type)
  nameWithType: ControlTemplate.ControlTemplate(Type)
  fullName: System.Windows.Controls.ControlTemplate.ControlTemplate(Type)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Controls.ControlTemplate&quot;> </xref>指定された対象の型を持つクラス。"
  syntax:
    content: public ControlTemplate (Type targetType);
    parameters:
    - id: targetType
      type: System.Type
      description: "このテンプレートの対象の型。"
  overload: System.Windows.Controls.ControlTemplate.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Controls.ControlTemplate.TargetType
  id: TargetType
  parent: System.Windows.Controls.ControlTemplate
  langs:
  - csharp
  name: TargetType
  nameWithType: ControlTemplate.TargetType
  fullName: System.Windows.Controls.ControlTemplate.TargetType
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: "対象の種類の設定を取得または<xref href=&quot;System.Windows.Controls.ControlTemplate&quot;></xref>が対象としています。"
  remarks: "スタンドアロンがあれば<xref:System.Windows.Controls.ControlTemplate>TargetType プロパティが型に設定されたリソース セクションで、<xref:System.Windows.Controls.ControlTemplate>はいないその型に自動的に適用される</xref:System.Windows.Controls.ControlTemplate></xref:System.Windows.Controls.ControlTemplate>。 代わりに、指定する必要があります、`x:Key`テンプレートを明示的に適用します。       TargetType プロパティが<xref:System.Windows.Controls.ControlTemplate>、テンプレート定義に<xref:System.Windows.Controls.ContentPresenter>。</xref:System.Windows.Controls.ContentPresenter>が含まれているかどうか</xref:System.Windows.Controls.ControlTemplate>に必要なことにも注意してください。      <a name=&quot;xamlAttributeUsage_TargetType&quot;></a>## XAML 属性の使用```   <object  TargetType=&quot;typeName&quot;/>   ``` <a name=&quot;xamlValues_TargetType&quot;> </a> ## XAML 値*typeName*クラスの型名。       参照する、<xref:System.Type>を使用して、クラスの名前、[マークアップ拡張機能と WPF XAML](~/add/includes/ajax-current-ext-md.md)</xref:System.Type> 。"
  example:
  - "The following example demonstrates the use of this property:  \n  \n [!code-xml[ControlTemplateExamples#Label](~/add/codesnippet/xaml/controltemplateexamples/resources/label.xaml#label)]  \n  \n The above example uses the following resource:  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n For the complete sample, see [Styling with ControlTemplates Sample](http://go.microsoft.com/fwlink/?LinkID=160041)."
  syntax:
    content: public Type TargetType { get; set; }
    return:
      type: System.Type
      description: "既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Controls.ControlTemplate.TargetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "TargetType プロパティがありますいない<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>テンプレートの定義がある場合、 <xref href=&quot;System.Windows.Controls.ContentPresenter&quot;></xref>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定した型を使用することはできません。 TargetType、 <xref href=&quot;System.Windows.Controls.ControlTemplate&quot;> </xref>するか、それから継承する必要があります、 <xref href=&quot;System.Windows.Controls.Control&quot;> </xref>、 <xref href=&quot;System.Windows.Controls.Page&quot;> </xref>、または<xref href=&quot;System.Windows.Navigation.PageFunctionBase&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Controls.ControlTemplate.Triggers
  id: Triggers
  parent: System.Windows.Controls.ControlTemplate
  langs:
  - csharp
  name: Triggers
  nameWithType: ControlTemplate.Triggers
  fullName: System.Windows.Controls.ControlTemplate.Triggers
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: "コレクションを取得<xref href=&quot;System.Windows.TriggerBase&quot;></xref>プロパティの変更を適用またはに基づいてアクションを実行するオブジェクトが条件を指定します。"
  remarks: "<a name=&quot;xamlPropertyElementUsage_Triggers&quot;></a>## XAML プロパティ要素の使用```   <object>     <object.Triggers>       oneOrMoreTriggers     </object.Triggers>   </object>   ``` <a name=&quot;xamlValues_Triggers&quot;> </a> ## XAML 値*oneOrMoreTriggers*&1; つまたは複数<xref:System.Windows.TriggerBase>オブジェクト (これらは通常、 <xref:System.Windows.Trigger>).</xref:System.Windows.Trigger> </xref:System.Windows.TriggerBase>      "
  example:
  - "The following example demonstrates the use of this property:  \n  \n [!code-xml[ControlTemplateExamples#ToolTip](~/add/codesnippet/xaml/controltemplateexamples/resources/tooltip.xaml#tooltip)]  \n  \n The above example uses the following resources:  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n For the complete sample, see [Styling with ControlTemplates Sample](http://go.microsoft.com/fwlink/?LinkID=160041)."
  syntax:
    content: public System.Windows.TriggerCollection Triggers { get; }
    return:
      type: System.Windows.TriggerCollection
      description: "コレクション<xref href=&quot;System.Windows.TriggerBase&quot;></xref>オブジェクト。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Controls.ControlTemplate.Triggers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)
  id: ValidateTemplatedParent(System.Windows.FrameworkElement)
  parent: System.Windows.Controls.ControlTemplate
  langs:
  - csharp
  name: ValidateTemplatedParent(FrameworkElement)
  nameWithType: ControlTemplate.ValidateTemplatedParent(FrameworkElement)
  fullName: System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: "一連のルールに対してテンプレートの親を確認します。"
  remarks: "メソッドは、次の規則を使用します。 1。 `templatedParent`型<xref:System.Windows.FrameworkContentElement>.</xref:System.Windows.FrameworkContentElement>のすることはできません       2. `templatedParent`型<xref:System.Windows.FrameworkElement>はありません、 <xref:System.Windows.Controls.Control>。</xref:System.Windows.Controls.Control></xref:System.Windows.FrameworkElement>することはできません。       3. `templatedParent` <xref:System.Windows.Controls.Control>いない<xref:System.Windows.Controls.ControlTemplate>.</xref:System.Windows.Controls.ControlTemplate>に関連付けられている</xref:System.Windows.Controls.Control>ことはできません"
  syntax:
    content: protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);
    parameters:
    - id: templatedParent
      type: System.Windows.FrameworkElement
      description: "要素にこのテンプレートが適用されます。"
  overload: System.Windows.Controls.ControlTemplate.ValidateTemplatedParent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>templatedParent</code> must not be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "関連付ける必要があります、 <xref href=&quot;System.Windows.Controls.ControlTemplate&quot;> </xref>で、 <xref href=&quot;System.Windows.Controls.Control&quot;> </xref>を設定して、 &lt;xref:System.Windows.Controls.Control.Template%2A?displayProperty=fullName&gt;プロパティを使用する前に、 <xref href=&quot;System.Windows.Controls.ControlTemplate&quot;> </xref>上、 <xref href=&quot;System.Windows.Controls.Control&quot;></xref>です。"
  platform:
  - net462
references:
- uid: System.Windows.FrameworkTemplate
  isExternal: false
  name: System.Windows.FrameworkTemplate
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Controls.ControlTemplate.#ctor
  parent: System.Windows.Controls.ControlTemplate
  isExternal: false
  name: ControlTemplate()
  nameWithType: ControlTemplate.ControlTemplate()
  fullName: System.Windows.Controls.ControlTemplate.ControlTemplate()
- uid: System.Windows.Controls.ControlTemplate.#ctor(System.Type)
  parent: System.Windows.Controls.ControlTemplate
  isExternal: false
  name: ControlTemplate(Type)
  nameWithType: ControlTemplate.ControlTemplate(Type)
  fullName: System.Windows.Controls.ControlTemplate.ControlTemplate(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Controls.ControlTemplate.TargetType
  parent: System.Windows.Controls.ControlTemplate
  isExternal: false
  name: TargetType
  nameWithType: ControlTemplate.TargetType
  fullName: System.Windows.Controls.ControlTemplate.TargetType
- uid: System.Windows.Controls.ControlTemplate.Triggers
  parent: System.Windows.Controls.ControlTemplate
  isExternal: false
  name: Triggers
  nameWithType: ControlTemplate.Triggers
  fullName: System.Windows.Controls.ControlTemplate.Triggers
- uid: System.Windows.TriggerCollection
  parent: System.Windows
  isExternal: false
  name: TriggerCollection
  nameWithType: TriggerCollection
  fullName: System.Windows.TriggerCollection
- uid: System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)
  parent: System.Windows.Controls.ControlTemplate
  isExternal: false
  name: ValidateTemplatedParent(FrameworkElement)
  nameWithType: ControlTemplate.ValidateTemplatedParent(FrameworkElement)
  fullName: System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(FrameworkElement)
- uid: System.Windows.FrameworkElement
  parent: System.Windows
  isExternal: false
  name: FrameworkElement
  nameWithType: FrameworkElement
  fullName: System.Windows.FrameworkElement
- uid: System.Windows.Controls.ControlTemplate.#ctor*
  parent: System.Windows.Controls.ControlTemplate
  isExternal: false
  name: ControlTemplate
  nameWithType: ControlTemplate.ControlTemplate
- uid: System.Windows.Controls.ControlTemplate.TargetType*
  parent: System.Windows.Controls.ControlTemplate
  isExternal: false
  name: TargetType
  nameWithType: ControlTemplate.TargetType
- uid: System.Windows.Controls.ControlTemplate.Triggers*
  parent: System.Windows.Controls.ControlTemplate
  isExternal: false
  name: Triggers
  nameWithType: ControlTemplate.Triggers
- uid: System.Windows.Controls.ControlTemplate.ValidateTemplatedParent*
  parent: System.Windows.Controls.ControlTemplate
  isExternal: false
  name: ValidateTemplatedParent
  nameWithType: ControlTemplate.ValidateTemplatedParent
