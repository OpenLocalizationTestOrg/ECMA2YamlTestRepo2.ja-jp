### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.ObjectChangeConflict
  id: ObjectChangeConflict
  children:
  - System.Data.Linq.ObjectChangeConflict.IsDeleted
  - System.Data.Linq.ObjectChangeConflict.IsResolved
  - System.Data.Linq.ObjectChangeConflict.MemberConflicts
  - System.Data.Linq.ObjectChangeConflict.Object
  - System.Data.Linq.ObjectChangeConflict.Resolve
  - System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)
  - System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)
  langs:
  - csharp
  name: ObjectChangeConflict
  nameWithType: ObjectChangeConflict
  fullName: System.Data.Linq.ObjectChangeConflict
  type: Class
  summary: "1 つまたは複数のオプティミスティック同時実行の競合している更新の試行を表します。"
  remarks: "このシナリオでは、データベース内の値は、クライアントによる最後の読み取り以降に更新されているために失敗した更新の試行です。       次の例では、競合しているオブジェクトに関する情報を取得する方法を示します。"
  example:
  - >-
    [!code-cs[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/csharp/objconflict/program.cs#1)]
     [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/visualbasic/objconflict/module1.vb#1)]
  syntax:
    content: public sealed class ObjectChangeConflict
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.IsDeleted
  id: IsDeleted
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: IsDeleted
  nameWithType: ObjectChangeConflict.IsDeleted
  fullName: System.Data.Linq.ObjectChangeConflict.IsDeleted
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "競合しているオブジェクトがデータベースから削除されたかどうかを示す値を取得します。"
  syntax:
    content: public bool IsDeleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>場合は、オブジェクトが削除されました。"
  overload: System.Data.Linq.ObjectChangeConflict.IsDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.IsResolved
  id: IsResolved
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: IsResolved
  nameWithType: ObjectChangeConflict.IsResolved
  fullName: System.Data.Linq.ObjectChangeConflict.IsResolved
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "このオブジェクトの競合が既に解決されているかどうかを示す値を取得します。"
  remarks: "このプロパティは読み取り専用と、競合が解決済みとして自動的に更新します。"
  syntax:
    content: public bool IsResolved { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>場合は、競合が解決されました。"
  overload: System.Data.Linq.ObjectChangeConflict.IsResolved*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.MemberConflicts
  id: MemberConflicts
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: MemberConflicts
  nameWithType: ObjectChangeConflict.MemberConflicts
  fullName: System.Data.Linq.ObjectChangeConflict.MemberConflicts
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "更新は失敗の原因となったすべてのメンバーの競合のコレクションを取得します。"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.MemberChangeConflict> MemberConflicts { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.MemberChangeConflict}
      description: "メンバーの競合のコレクション。"
  overload: System.Data.Linq.ObjectChangeConflict.MemberConflicts*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.Object
  id: Object
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: Object
  nameWithType: ObjectChangeConflict.Object
  fullName: System.Data.Linq.ObjectChangeConflict.Object
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "競合しているオブジェクトを取得します。"
  syntax:
    content: public object Object { get; }
    return:
      type: System.Object
      description: "競合しているオブジェクト。"
  overload: System.Data.Linq.ObjectChangeConflict.Object*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.Resolve
  id: Resolve
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: Resolve()
  nameWithType: ObjectChangeConflict.Resolve()
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "現在の値を保持しより新しいデータベース値に一致する基準の元の値をリセットすることでメンバーの競合を解決します。"
  syntax:
    content: public void Resolve ();
    parameters: []
  overload: System.Data.Linq.ObjectChangeConflict.Resolve*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)
  id: Resolve(System.Data.Linq.RefreshMode)
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: Resolve(RefreshMode)
  nameWithType: ObjectChangeConflict.Resolve(RefreshMode)
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve(RefreshMode)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "指定されたを使用してメンバーの競合を解決<xref href=&quot;System.Data.Linq.RefreshMode&quot;></xref>です。"
  remarks: "次の例では、表示<xref:System.Data.Linq.RefreshMode>。</xref:System.Data.Linq.RefreshMode>のさまざまな値を使用して、どのような結果が生成されます。"
  example:
  - "The following example overwrites current values with values from the database.  \n  \n [!code-cs[System.Data.Linq.RefreshMode#1](~/add/codesnippet/csharp/refreshmode/program.cs#1)]\n [!code-vb[System.Data.Linq.RefreshMode#1](~/add/codesnippet/visualbasic/refreshmode/module1.vb#1)]  \n  \n The following example shows how to swap the original value with the values retrieved from the dtabase. No current value is modified.  \n  \n [!code-cs[System.Data.Linq.RefreshMode#2](~/add/codesnippet/csharp/refreshmode/program.cs#2)]\n [!code-vb[System.Data.Linq.RefreshMode#2](~/add/codesnippet/visualbasic/refreshmode/module1.vb#2)]  \n  \n The following example keeps the current values that have been changed, but updates the other values with database values.  \n  \n [!code-cs[System.Data.Linq.RefreshMode#3](~/add/codesnippet/csharp/refreshmode/program.cs#3)]\n [!code-vb[System.Data.Linq.RefreshMode#3](~/add/codesnippet/visualbasic/refreshmode/module1.vb#3)]"
  syntax:
    content: public void Resolve (System.Data.Linq.RefreshMode refreshMode);
    parameters:
    - id: refreshMode
      type: System.Data.Linq.RefreshMode
      description: "該当するオプション<xref href=&quot;System.Data.Linq.RefreshMode&quot;></xref>です。"
  overload: System.Data.Linq.ObjectChangeConflict.Resolve*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)
  id: Resolve(System.Data.Linq.RefreshMode,System.Boolean)
  parent: System.Data.Linq.ObjectChangeConflict
  langs:
  - csharp
  name: Resolve(RefreshMode,Boolean)
  nameWithType: ObjectChangeConflict.Resolve(RefreshMode,Boolean)
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve(RefreshMode,Boolean)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "現在の値を保持し、ベースラインの元の値をリセットするメンバーの競合を解決するには。"
  syntax:
    content: public void Resolve (System.Data.Linq.RefreshMode refreshMode, bool autoResolveDeletes);
    parameters:
    - id: refreshMode
      type: System.Data.Linq.RefreshMode
      description: "該当するオプション<xref href=&quot;System.Data.Linq.RefreshMode&quot;></xref>です。"
    - id: autoResolveDeletes
      type: System.Boolean
      description: "ときに<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>、自動的に解決される発生する競合変更されたデータベースではなくなったオブジェクトです。"
  overload: System.Data.Linq.ObjectChangeConflict.Resolve*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.ObjectChangeConflict.IsDeleted
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: IsDeleted
  nameWithType: ObjectChangeConflict.IsDeleted
  fullName: System.Data.Linq.ObjectChangeConflict.IsDeleted
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.ObjectChangeConflict.IsResolved
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: IsResolved
  nameWithType: ObjectChangeConflict.IsResolved
  fullName: System.Data.Linq.ObjectChangeConflict.IsResolved
- uid: System.Data.Linq.ObjectChangeConflict.MemberConflicts
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: MemberConflicts
  nameWithType: ObjectChangeConflict.MemberConflicts
  fullName: System.Data.Linq.ObjectChangeConflict.MemberConflicts
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.MemberChangeConflict}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<MemberChangeConflict>
  nameWithType: ReadOnlyCollection<MemberChangeConflict>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.MemberChangeConflict>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Data.Linq.MemberChangeConflict>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.MemberChangeConflict
    name: MemberChangeConflict
    nameWithType: MemberChangeConflict
    fullName: MemberChangeConflict
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.ObjectChangeConflict.Object
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Object
  nameWithType: ObjectChangeConflict.Object
  fullName: System.Data.Linq.ObjectChangeConflict.Object
- uid: System.Data.Linq.ObjectChangeConflict.Resolve
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Resolve()
  nameWithType: ObjectChangeConflict.Resolve()
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve()
- uid: System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Resolve(RefreshMode)
  nameWithType: ObjectChangeConflict.Resolve(RefreshMode)
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve(RefreshMode)
- uid: System.Data.Linq.RefreshMode
  parent: System.Data.Linq
  isExternal: false
  name: RefreshMode
  nameWithType: RefreshMode
  fullName: System.Data.Linq.RefreshMode
- uid: System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Resolve(RefreshMode,Boolean)
  nameWithType: ObjectChangeConflict.Resolve(RefreshMode,Boolean)
  fullName: System.Data.Linq.ObjectChangeConflict.Resolve(RefreshMode,Boolean)
- uid: System.Data.Linq.ObjectChangeConflict.IsDeleted*
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: IsDeleted
  nameWithType: ObjectChangeConflict.IsDeleted
- uid: System.Data.Linq.ObjectChangeConflict.IsResolved*
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: IsResolved
  nameWithType: ObjectChangeConflict.IsResolved
- uid: System.Data.Linq.ObjectChangeConflict.MemberConflicts*
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: MemberConflicts
  nameWithType: ObjectChangeConflict.MemberConflicts
- uid: System.Data.Linq.ObjectChangeConflict.Object*
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Object
  nameWithType: ObjectChangeConflict.Object
- uid: System.Data.Linq.ObjectChangeConflict.Resolve*
  parent: System.Data.Linq.ObjectChangeConflict
  isExternal: false
  name: Resolve
  nameWithType: ObjectChangeConflict.Resolve
