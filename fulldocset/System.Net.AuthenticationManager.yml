### YamlMime:ManagedReference
items:
- uid: System.Net.AuthenticationManager
  id: AuthenticationManager
  children:
  - System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)
  - System.Net.AuthenticationManager.CredentialPolicy
  - System.Net.AuthenticationManager.CustomTargetNameDictionary
  - System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)
  - System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)
  - System.Net.AuthenticationManager.RegisteredModules
  - System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)
  - System.Net.AuthenticationManager.Unregister(System.String)
  langs:
  - csharp
  name: AuthenticationManager
  nameWithType: AuthenticationManager
  fullName: System.Net.AuthenticationManager
  type: Class
  summary: "クライアントの認証プロセス中に呼び出された認証モジュールを管理します。"
  remarks: "AuthenticationManager は、アプリケーションで使用される認証モジュールを管理する静的クラスです。 保護されたリソース、AuthenticationManager 呼び出しの場合、要求が行われる、<xref:System.Net.AuthenticationManager.Authenticate%2A>取得するメソッド、<xref:System.Net.Authorization>後続の要求で使用するインスタンス</xref:System.Net.Authorization></xref:System.Net.AuthenticationManager.Authenticate%2A>。       AuthenticationManager を呼び出して各登録済みの認証モジュールのクエリ、<xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=fullName>各モジュールのメソッド</xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=fullName>。 1 つ目の認証モジュールを返す、<xref:System.Net.Authorization>のインスタンスが要求の認証に使用します</xref:System.Net.Authorization>。       、基本、ダイジェストを提供するモジュールのネゴシエート、NTLM、Kerberos 認証の種類は、AuthenticationManager 既定で登録されるとします。 実装する追加の認証モジュール、<xref:System.Net.IAuthenticationModule>を使用してインターフェイスを追加することができます、<xref:System.Net.AuthenticationManager.Register%2A>メソッド</xref:System.Net.AuthenticationManager.Register%2A></xref:System.Net.IAuthenticationModule>。 認証モジュールは、一覧に追加された順序で呼び出されます。      > [!NOTE] >、Kerberos ネゴシエーションと認証の種類は Windows 95/98 または Windows NT 4.0 ではサポートされていません。"
  example:
  - >-
    [!code-cs[System.Net.Authentication#1](~/add/codesnippet/csharp/t-system.net.authenticat_0_1.cs)]
     [!code-cpp[System.Net.Authentication#1](~/add/codesnippet/cpp/t-system.net.authenticat_0_1.cpp)]
     [!code-vb[System.Net.Authentication#1](~/add/codesnippet/visualbasic/t-system.net.authenticat_0_1.vb)]
  syntax:
    content: public class AuthenticationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)
  id: Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)
  parent: System.Net.AuthenticationManager
  langs:
  - csharp
  name: Authenticate(String,WebRequest,ICredentials)
  nameWithType: AuthenticationManager.Authenticate(String,WebRequest,ICredentials)
  fullName: System.Net.AuthenticationManager.Authenticate(String,WebRequest,ICredentials)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "認証要求に応答できる&1; つ目のモジュールを検索するには、各登録済みの認証モジュールが呼び出されます。"
  remarks: "この認証メソッドの呼び出し、<xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=fullName>メソッドで、モジュールのいずれかが応答するまでは、各登録済みの認証モジュールを<xref:System.Net.Authorization>インスタンス</xref:System.Net.Authorization></xref:System.Net.IAuthenticationModule.Authenticate%2A?displayProperty=fullName>。       最初の<xref:System.Net.Authorization>返されたインスタンスは、要求を認証に使用します</xref:System.Net.Authorization>。 認証メソッドが返されますかどうか認証モジュール要求を認証できるなし、`null`です。       認証モジュールが<xref:System.Net.AuthenticationManager>。</xref:System.Net.AuthenticationManager>で登録されている順序で呼び出されます"
  syntax:
    content: public static System.Net.Authorization Authenticate (string challenge, System.Net.WebRequest request, System.Net.ICredentials credentials);
    parameters:
    - id: challenge
      type: System.String
      description: "インターネット リソースから返されるチャレンジします。"
    - id: request
      type: System.Net.WebRequest
      description: "<xref:System.Net.WebRequest>認証チャレンジを開始する</xref:System.Net.WebRequest>。"
    - id: credentials
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>この要求に関連付けられている</xref:System.Net.ICredentials>。"
    return:
      type: System.Net.Authorization
      description: "インスタンス、 <xref href=&quot;System.Net.Authorization&quot;> </xref>認証試行の結果を含むクラスです。 このメソッドが戻るかどうかは認証モジュールがチャレンジに応答することはありません、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.AuthenticationManager.Authenticate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>challenge</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>request</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>credentials</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.AuthenticationManager.CredentialPolicy
  id: CredentialPolicy
  parent: System.Net.AuthenticationManager
  langs:
  - csharp
  name: CredentialPolicy
  nameWithType: AuthenticationManager.CredentialPolicy
  fullName: System.Net.AuthenticationManager.CredentialPolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "<xref:System.Net.HttpWebRequest>クラス</xref:System.Net.HttpWebRequest>を使用して行われるリソース要求に使用する資格情報のポリシー取得または設定"
  remarks: "資格情報のポリシーでは、Web ページの内容などのネットワーク リソースに対する要求を送信するときに資格情報を送信するかどうかを判断します。 資格情報が送信される場合は、クライアント認証を必要とするサーバーがクライアントの資格情報が必要であることを示す応答を送信する代わりに、要求が受信したときに、クライアントの認証を試行できます。 これによりサーバーへのラウンド トリップを削減できますが、これがネットワーク経由で資格情報を送信する際に固有のセキュリティ リスクに対する分散する必要があります。 移行先サーバーにクライアント認証が必要としない場合は、資格情報を送信することをお勧めします。       資格情報のポリシーが使用または資格情報を指定した要求に対してのみ呼び出される、<xref:System.Net.WebProxy>資格情報を指定するオブジェクト</xref:System.Net.WebProxy>。"
  example:
  - "The following code example demonstrates setting the credential policy.  \n  \n [!code-cpp[NclCredPolicy#2](~/add/codesnippet/cpp/p-system.net.authenticat_1_1.cpp)]\n [!code-cs[NclCredPolicy#2](~/add/codesnippet/csharp/p-system.net.authenticat_1_1.cs)]"
  syntax:
    content: public static System.Net.ICredentialPolicy CredentialPolicy { get; set; }
    return:
      type: System.Net.ICredentialPolicy
      description: "実装するオブジェクト、 <xref href=&quot;System.Net.ICredentialPolicy&quot;> </xref>資格情報が要求と共に送信されるかどうかを決定するインターフェイスです。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.AuthenticationManager.CredentialPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.AuthenticationManager.CustomTargetNameDictionary
  id: CustomTargetNameDictionary
  parent: System.Net.AuthenticationManager
  langs:
  - csharp
  name: CustomTargetNameDictionary
  nameWithType: AuthenticationManager.CustomTargetNameDictionary
  fullName: System.Net.AuthenticationManager.CustomTargetNameDictionary
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Kerberos 認証を使用して行われる要求の中にホストを識別するために使用するサービス プリンシパル名 (Spn) を含んでいるディクショナリを取得<xref:System.Net.WebRequest>とその派生クラス</xref:System.Net.WebRequest>。"
  remarks: "SPN は、クライアント一意に識別するサービスまたはアプリケーションの相互認証の目的で、サーバー上のインスタンスの名前です。 既定では、相互認証が要求され、設定することを要求できます<xref:System.Net.WebRequest.AuthenticationLevel%2A?displayProperty=fullName>に<xref:System.Net.Security.AuthenticationLevel>を要求します</xref:System.Net.Security.AuthenticationLevel></xref:System.Net.WebRequest.AuthenticationLevel%2A?displayProperty=fullName>。       ときに、<xref:System.Net.WebRequest>クライアントが、変換先を指定する必要があります、SPN の相互認証が必要です</xref:System.Net.WebRequest>。 SPN がわかっている場合は、要求を送信する前に、CustomTargetNameDictionary を追加することができます。 このディクショナリに SPN の情報を追加していない場合、<xref:System.Net.AuthenticationManager>を使用して、<xref:System.Net.WebRequest.RequestUri%2A>メソッドです最も可能性の高い、SPN を作成するただし、これは、計算された値であり適切でない可能性があります。</xref:System.Net.WebRequest.RequestUri%2A> </xref:System.Net.AuthenticationManager> 。 相互認証が試行され、失敗した場合は、計算の SPN を決定するディクショナリを確認できます。 コンソール アプリケーションは、認証プロトコルが相互認証をサポートしていない場合、ディクショナリに、SPN は入力されません。       このディクショナリには、SPN 値を追加するには、使用、<xref:System.Uri.AbsoluteUri%2A>の<xref:System.Net.WebRequest.RequestUri%2A>キーとして</xref:System.Net.WebRequest.RequestUri%2A></xref:System.Uri.AbsoluteUri%2A>。 キーが含まれるように切り捨ては内部的には、 <xref:System.Uri.Scheme%2A>、 <xref:System.Uri.Host%2A>、および<xref:System.Uri.Port%2A>場合は既定ではないポート</xref:System.Uri.Port%2A></xref:System.Uri.Host%2A></xref:System.Uri.Scheme%2A>      > [!NOTE] > 無制限<xref:System.Net.WebPermission>.</xref:System.Net.WebPermission>メソッドと、CustomTargetNameDictionary のプロパティへのアクセスが必要です      > [!NOTE] > プロキシを介してときに Kerberos 認証が実行される、プロキシと最終的なホスト名の両方の SPN を解決する必要があります。 プロキシの名前解決は、タイムアウトによって保護されます。 SPN を最終的なホスト名の解決 DNS 参照が必要ですし、この操作に直接関連付けられているタイムアウトはありません。 そのため同期操作の時間がかかるタイムアウトにします。 これをなくすためには、SPN キャッシュに対して要求を行う前に最終的なホストの URI のプレフィックスを追加します。       Version 3.5 SP1 は、今すぐ CustomTargetNameDictionary プロパティが設定されていないときに、NTLM (NT LAN Manager) 認証の交換での SPN で要求の URL で使用されるホスト名を指定する既定値です。 要求 URL で使用されるホスト名で指定されたホスト ヘッダーと異なる場合があります、<xref:System.Net.HttpRequestHeader?displayProperty=fullName>クライアント要求</xref:System.Net.HttpRequestHeader?displayProperty=fullName>。 要求 URL で使用されるホスト名は、サーバーの実際のホスト名、サーバー、コンピューターの IP アドレス、またはループバック アドレスのコンピューター名に異なる可能性があります。 このような場合は、Windows には、認証要求は失敗します。 問題に対処する、ホスト名が使用される Windows に通知する必要があります、クライアントで要求の URL (&quot;contoso&quot;、たとえば) の要求は実際には、ローカル コンピューターの代替名です。"
  example:
  - "The following code example demonstrates displaying the contents of the CustomTargetNameDictionary.  \n  \n [!code-cpp[NclCredPolicy#5](~/add/codesnippet/cpp/p-system.net.authenticat_0_1.cpp)]\n [!code-cs[NclCredPolicy#5](~/add/codesnippet/csharp/p-system.net.authenticat_0_1.cs)]"
  syntax:
    content: public static System.Collections.Specialized.StringDictionary CustomTargetNameDictionary { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "書き込み可能な<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;></xref>ホスト情報のキーで構成されるは、SPN 値を含むです。"
  overload: System.Net.AuthenticationManager.CustomTargetNameDictionary*
  exceptions: []
  platform:
  - net462
- uid: System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)
  id: PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)
  parent: System.Net.AuthenticationManager
  langs:
  - csharp
  name: PreAuthenticate(WebRequest,ICredentials)
  nameWithType: AuthenticationManager.PreAuthenticate(WebRequest,ICredentials)
  fullName: System.Net.AuthenticationManager.PreAuthenticate(WebRequest,ICredentials)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "要求を事前認証を行います。"
  remarks: "認証モジュールは、要求を事前認証を PreAuthenticate メソッドは認証インスタンスを返し、チャレンジを発行するリソースを待機しているのではなく、プリエンプティブ サーバーに認証情報を送信します。 この動作が RFC 2617 のセクション 3.3 で説明されている (HTTP Authentication: Basic and Digest アクセス Authentication)。 事前認証をサポートする認証モジュールを使用すると、クライアント認証チャレンジによる追加のラウンド トリップを回避することで、サーバーの効率性を向上させることです。       セットを要求することができますを事前認証の承認モジュール、<xref:System.Net.IAuthenticationModule.CanPreAuthenticate%2A?displayProperty=fullName>プロパティを`true`</xref:System.Net.IAuthenticationModule.CanPreAuthenticate%2A?displayProperty=fullName>。"
  syntax:
    content: public static System.Net.Authorization PreAuthenticate (System.Net.WebRequest request, System.Net.ICredentials credentials);
    parameters:
    - id: request
      type: System.Net.WebRequest
      description: "A<xref:System.Net.WebRequest>インターネット リソースに対する</xref:System.Net.WebRequest>。"
    - id: credentials
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>要求に関連付けられている</xref:System.Net.ICredentials>。"
    return:
      type: System.Net.Authorization
      description: "インスタンス、 <xref href=&quot;System.Net.Authorization&quot;> </xref>到着、それ以外の要求を指定できる場合にクラス<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。 If <code>credentials</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, this method returns <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Net.AuthenticationManager.PreAuthenticate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>request</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)
  id: Register(System.Net.IAuthenticationModule)
  parent: System.Net.AuthenticationManager
  langs:
  - csharp
  name: Register(IAuthenticationModule)
  nameWithType: AuthenticationManager.Register(IAuthenticationModule)
  fullName: System.Net.AuthenticationManager.Register(IAuthenticationModule)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "認証マネージャーでの認証モジュールを登録します。"
  remarks: "Register メソッドによって呼び出されるモジュールの一覧の末尾に認証モジュールを追加する、<xref:System.Net.AuthenticationManager.Authenticate%2A>メソッド</xref:System.Net.AuthenticationManager.Authenticate%2A>。 認証モジュールは、一覧に追加された順序で呼び出されます。 場合、同じモジュール<xref:System.Net.IAuthenticationModule.AuthenticationType%2A>は既に登録されている、このメソッドは、登録済みモジュールを削除し、追加`authenticationModule`リストの末尾にします</xref:System.Net.IAuthenticationModule.AuthenticationType%2A>。"
  example:
  - "The following example registers an authentication module with the authentication manager. For a complete example, refer to the <xref:System.Net.AuthenticationManager> class.  \n  \n [!code-cs[System.Net.Sockets.Authentication#2](~/add/codesnippet/csharp/m-system.net.authenticat_2_1.cs)]\n [!code-cpp[System.Net.Sockets.Authentication#2](~/add/codesnippet/cpp/m-system.net.authenticat_2_1.cpp)]\n [!code-vb[System.Net.Sockets.Authentication#2](~/add/codesnippet/visualbasic/m-system.net.authenticat_2_1.vb)]"
  syntax:
    content: public static void Register (System.Net.IAuthenticationModule authenticationModule);
    parameters:
    - id: authenticationModule
      type: System.Net.IAuthenticationModule
      description: "<xref href=&quot;System.Net.IAuthenticationModule&quot;> </xref>認証マネージャーに登録します。"
  overload: System.Net.AuthenticationManager.Register*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>authenticationModule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.AuthenticationManager.RegisteredModules
  id: RegisteredModules
  parent: System.Net.AuthenticationManager
  langs:
  - csharp
  name: RegisteredModules
  nameWithType: AuthenticationManager.RegisteredModules
  fullName: System.Net.AuthenticationManager.RegisteredModules
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "認証マネージャーに登録されている認証モジュールの一覧を取得します。"
  remarks: "RegisteredModules プロパティでは、<xref:System.Collections.IEnumerator>の一覧を有効にするインスタンスが読み込まれる認証モジュールを登録します</xref:System.Collections.IEnumerator>。 <xref:System.Net.AuthenticationManager.Register%2A>メソッドは、一覧、および<xref:System.Net.AuthenticationManager.Unregister%2A>メソッドは、それからモジュールを削除</xref:System.Net.AuthenticationManager.Unregister%2A>するモジュールを追加します。</xref:System.Net.AuthenticationManager.Register%2A>"
  example:
  - "The following example uses the RegisteredModules property to get a list of authentication modules that are registered with the authentication manager. For a complete example, refer to the <xref:System.Net.AuthenticationManager> class.  \n  \n [!code-cs[System.Net.Authentication#8](~/add/codesnippet/csharp/p-system.net.authenticat_2_1.cs)]\n [!code-cpp[System.Net.Authentication#8](~/add/codesnippet/cpp/p-system.net.authenticat_2_1.cpp)]\n [!code-vb[System.Net.Authentication#8](~/add/codesnippet/visualbasic/p-system.net.authenticat_2_1.vb)]"
  syntax:
    content: public static System.Collections.IEnumerator RegisteredModules { get; }
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>読み取られる登録済みの認証モジュールを有効にする</xref:System.Collections.IEnumerator>。"
  overload: System.Net.AuthenticationManager.RegisteredModules*
  exceptions: []
  platform:
  - net462
- uid: System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)
  id: Unregister(System.Net.IAuthenticationModule)
  parent: System.Net.AuthenticationManager
  langs:
  - csharp
  name: Unregister(IAuthenticationModule)
  nameWithType: AuthenticationManager.Unregister(IAuthenticationModule)
  fullName: System.Net.AuthenticationManager.Unregister(IAuthenticationModule)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "登録されているモジュールの一覧から、指定された認証モジュールを削除します。"
  remarks: "登録解除メソッド呼び出された認証モジュールの一覧から、指定された認証モジュールを削除する、<xref:System.Net.AuthenticationManager.Authenticate%2A>メソッド</xref:System.Net.AuthenticationManager.Authenticate%2A>。 モジュールを使用して、一覧に追加する必要があります、<xref:System.Net.AuthenticationManager.Register%2A>メソッドの一覧から削除する前にします</xref:System.Net.AuthenticationManager.Register%2A>。"
  example:
  - "The following example uses the Unregister method to remove the specified authentication module from the list of registered modules. For a complete example, refer to the <xref:System.Net.AuthenticationManager> class.  \n  \n [!code-cs[System.Net.Sockets.Authentication#2](~/add/codesnippet/csharp/m-system.net.authenticat_0_1.cs)]\n [!code-cpp[System.Net.Sockets.Authentication#2](~/add/codesnippet/cpp/m-system.net.authenticat_0_1.cpp)]\n [!code-vb[System.Net.Sockets.Authentication#2](~/add/codesnippet/visualbasic/m-system.net.authenticat_0_1.vb)]"
  syntax:
    content: public static void Unregister (System.Net.IAuthenticationModule authenticationModule);
    parameters:
    - id: authenticationModule
      type: System.Net.IAuthenticationModule
      description: "<xref href=&quot;System.Net.IAuthenticationModule&quot;> </xref>する登録済みモジュールの一覧から削除します。"
  overload: System.Net.AuthenticationManager.Unregister*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>authenticationModule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定した<xref href=&quot;System.Net.IAuthenticationModule&quot;></xref>が登録されていません。"
  platform:
  - net462
- uid: System.Net.AuthenticationManager.Unregister(System.String)
  id: Unregister(System.String)
  parent: System.Net.AuthenticationManager
  langs:
  - csharp
  name: Unregister(String)
  nameWithType: AuthenticationManager.Unregister(String)
  fullName: System.Net.AuthenticationManager.Unregister(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "登録されているモジュールの一覧から、指定された認証方式の認証モジュールを削除します。"
  remarks: "<xref:System.Net.AuthenticationManager.Unregister%2A>メソッド呼び出された認証モジュールの一覧から、指定された認証方式の認証モジュールを削除する、<xref:System.Net.AuthenticationManager.Authenticate%2A>メソッド</xref:System.Net.AuthenticationManager.Authenticate%2A></xref:System.Net.AuthenticationManager.Unregister%2A>。 モジュールを使用して、一覧に追加する必要があります、<xref:System.Net.AuthenticationManager.Register%2A>メソッドの一覧から削除する前にします</xref:System.Net.AuthenticationManager.Register%2A>。"
  example:
  - "The following example uses the <xref:System.Net.AuthenticationManager.Unregister%2A> method to remove an authentication module with the specified authentication scheme from the list of registered modules.  \n  \n [!code-vb[AuthenticationManager_UnRegister2#2](~/add/codesnippet/visualbasic/m-system.net.authenticat_1_1.vb)]\n [!code-cpp[AuthenticationManager_UnRegister2#2](~/add/codesnippet/cpp/m-system.net.authenticat_1_1.cpp)]\n [!code-cs[AuthenticationManager_UnRegister2#2](~/add/codesnippet/csharp/m-system.net.authenticat_1_1.cs)]"
  syntax:
    content: public static void Unregister (string authenticationScheme);
    parameters:
    - id: authenticationScheme
      type: System.String
      description: "削除するモジュールの認証方式です。"
  overload: System.Net.AuthenticationManager.Unregister*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>authenticationScheme</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "この認証スキーム用のモジュールが登録されていません。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: Authenticate(String,WebRequest,ICredentials)
  nameWithType: AuthenticationManager.Authenticate(String,WebRequest,ICredentials)
  fullName: System.Net.AuthenticationManager.Authenticate(String,WebRequest,ICredentials)
- uid: System.Net.Authorization
  parent: System.Net
  isExternal: false
  name: Authorization
  nameWithType: Authorization
  fullName: System.Net.Authorization
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: true
  name: WebRequest
  nameWithType: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.AuthenticationManager.CredentialPolicy
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: CredentialPolicy
  nameWithType: AuthenticationManager.CredentialPolicy
  fullName: System.Net.AuthenticationManager.CredentialPolicy
- uid: System.Net.ICredentialPolicy
  parent: System.Net
  isExternal: false
  name: ICredentialPolicy
  nameWithType: ICredentialPolicy
  fullName: System.Net.ICredentialPolicy
- uid: System.Net.AuthenticationManager.CustomTargetNameDictionary
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: CustomTargetNameDictionary
  nameWithType: AuthenticationManager.CustomTargetNameDictionary
  fullName: System.Net.AuthenticationManager.CustomTargetNameDictionary
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: PreAuthenticate(WebRequest,ICredentials)
  nameWithType: AuthenticationManager.PreAuthenticate(WebRequest,ICredentials)
  fullName: System.Net.AuthenticationManager.PreAuthenticate(WebRequest,ICredentials)
- uid: System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: Register(IAuthenticationModule)
  nameWithType: AuthenticationManager.Register(IAuthenticationModule)
  fullName: System.Net.AuthenticationManager.Register(IAuthenticationModule)
- uid: System.Net.IAuthenticationModule
  parent: System.Net
  isExternal: false
  name: IAuthenticationModule
  nameWithType: IAuthenticationModule
  fullName: System.Net.IAuthenticationModule
- uid: System.Net.AuthenticationManager.RegisteredModules
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: RegisteredModules
  nameWithType: AuthenticationManager.RegisteredModules
  fullName: System.Net.AuthenticationManager.RegisteredModules
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: Unregister(IAuthenticationModule)
  nameWithType: AuthenticationManager.Unregister(IAuthenticationModule)
  fullName: System.Net.AuthenticationManager.Unregister(IAuthenticationModule)
- uid: System.Net.AuthenticationManager.Unregister(System.String)
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: Unregister(String)
  nameWithType: AuthenticationManager.Unregister(String)
  fullName: System.Net.AuthenticationManager.Unregister(String)
- uid: System.Net.AuthenticationManager.Authenticate*
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: Authenticate
  nameWithType: AuthenticationManager.Authenticate
- uid: System.Net.AuthenticationManager.CredentialPolicy*
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: CredentialPolicy
  nameWithType: AuthenticationManager.CredentialPolicy
- uid: System.Net.AuthenticationManager.CustomTargetNameDictionary*
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: CustomTargetNameDictionary
  nameWithType: AuthenticationManager.CustomTargetNameDictionary
- uid: System.Net.AuthenticationManager.PreAuthenticate*
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: PreAuthenticate
  nameWithType: AuthenticationManager.PreAuthenticate
- uid: System.Net.AuthenticationManager.Register*
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: Register
  nameWithType: AuthenticationManager.Register
- uid: System.Net.AuthenticationManager.RegisteredModules*
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: RegisteredModules
  nameWithType: AuthenticationManager.RegisteredModules
- uid: System.Net.AuthenticationManager.Unregister*
  parent: System.Net.AuthenticationManager
  isExternal: false
  name: Unregister
  nameWithType: AuthenticationManager.Unregister
