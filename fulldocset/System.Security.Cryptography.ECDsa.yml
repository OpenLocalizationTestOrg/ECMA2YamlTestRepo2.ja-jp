### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDsa
  id: ECDsa
  children:
  - System.Security.Cryptography.ECDsa.#ctor
  - System.Security.Cryptography.ECDsa.Create
  - System.Security.Cryptography.ECDsa.Create(System.String)
  - System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDsa.SignatureAlgorithm
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
  type: Class
  summary: "楕円曲線デジタル署名アルゴリズム (ECDSA) をカプセル化する抽象基本クラスを提供します。"
  remarks: "このクラスの抽象基本クラスとして機能<xref:System.Security.Cryptography.ECDsaCng>派生</xref:System.Security.Cryptography.ECDsaCng>。"
  syntax:
    content: 'public abstract class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: System.Security.Cryptography.ECDsa.ECDsa()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.ECDsa&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターは<xref:System.Security.Cryptography.ECDsa>クラス</xref:System.Security.Cryptography.ECDsa>から派生したクラスによって呼び出されます <xref:System.Security.Cryptography.ECDsaCng>クラスは、現在サポートしている唯一の実装、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]</xref:System.Security.Cryptography.ECDsaCng> 。 独自のカスタム実装を提供する可能性があります。"
  syntax:
    content: protected ECDsa ();
    parameters: []
  overload: System.Security.Cryptography.ECDsa.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.Create
  id: Create
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: System.Security.Cryptography.ECDsa.Create()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "既定の実装の楕円曲線デジタル署名アルゴリズム (ECDSA) の新しいインスタンスを作成します。"
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.ECDsa
      description: "既定の実装の新しいインスタンス (<xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref>) このクラスのです。"
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: System.Security.Cryptography.ECDsa.Create(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定した実装の楕円曲線デジタル署名アルゴリズム (ECDSA) の新しいインスタンスを作成します。"
  remarks: "独自の実装を開発する場合、<xref:System.Security.Cryptography.ECDsa>オブジェクトを作成するメソッドのオーバー ロードを使用するには、カスタムを作成する`algorithm`実装を指定する文字列</xref:System.Security.Cryptography.ECDsa>。       カスタム値を指定する場合、 `algorithm` 、パラメーター、 <xref:System.Security.Cryptography.CryptoConfig>ECDSA オブジェクトを作成できるかどうかを決定する、オブジェクトで使用されます</xref:System.Security.Cryptography.CryptoConfig>。"
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]:  \n  \n \\- \"ECDsa\"  \n  \n \\- \"ECDsaCng\"  \n  \n \\- \"System.Security.Cryptography.ECDsaCng\"  \n  \n You can also provide the name of a custom ECDSA implementation."
    return:
      type: System.Security.Cryptography.ECDsa
      description: "このクラスの指定した実装の新しいインスタンス。 このメソッドが戻るかどうかは、指定したアルゴリズム名は ECDSA 実装にマップされていない、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>algorithm</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、指定したハッシュ アルゴリズムを使用して、指定したバイナリ ストリームのハッシュ値を計算します。"
  syntax:
    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "ハッシュするバイナリ ストリーム。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "データのハッシュに使用するアルゴリズム。"
    return:
      type: System.Byte[]
      description: "ハッシュされたデータ。"
  overload: System.Security.Cryptography.ECDsa.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "派生クラスでは、このメソッドをオーバーライドする必要があります。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、指定したハッシュ アルゴリズムを使用してバイト配列の指定した部分のハッシュ値を計算します。"
  syntax:
    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "ハッシュされるデータ。"
    - id: offset
      type: System.Int32
      description: "最初のバイトのインデックス`data`ハッシュされます。"
    - id: count
      type: System.Int32
      description: "ハッシュするバイト数。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "データのハッシュに使用するアルゴリズム。"
    return:
      type: System.Byte[]
      description: "ハッシュされたデータ。"
  overload: System.Security.Cryptography.ECDsa.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "派生クラスでは、このメソッドをオーバーライドする必要があります。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "キー交換アルゴリズムの名前を取得します。"
  remarks: "このプロパティは、<xref:System.Security.Cryptography.AsymmetricAlgorithm>基底クラス</xref:System.Security.Cryptography.AsymmetricAlgorithm>から継承します。       楕円曲線デジタル署名アルゴリズム (ECDSA) がデジタル署名の生成に使用されます。したがって使用されることはありません、このプロパティを返します`null`です。"
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "署名アルゴリズムの名前を取得します。"
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "文字列&quot;ECDsa&quot;です。"
  overload: System.Security.Cryptography.ECDsa.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ アルゴリズムを使用して、指定したバイト配列のハッシュ値を計算し、結果のハッシュ値に署名します。"
  syntax:
    content: public virtual byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "ハッシュを計算する対象の入力データ。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "使用してハッシュ値を作成するハッシュ アルゴリズム。"
    return:
      type: System.Byte[]
      description: "指定されたデータの ECDSA 署名。"
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ アルゴリズムを使用して、指定したストリームのハッシュ値を計算し、結果のハッシュ値に署名します。"
  syntax:
    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "ハッシュを計算する対象の入力ストリーム。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "使用してハッシュ値を作成するハッシュ アルゴリズム。"
    return:
      type: System.Byte[]
      description: "指定されたデータの ECDSA 署名。"
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ アルゴリズムを使用して、指定したバイト配列の一部分のハッシュ値を計算し、結果のハッシュ値に署名します。"
  syntax:
    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "ハッシュを計算する対象の入力データ。"
    - id: offset
      type: System.Int32
      description: "データの使用を開始する位置を示す配列へのオフセット。"
    - id: count
      type: System.Int32
      description: "データとして使用する配列内のバイト数。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "使用してハッシュ値を作成するハッシュ アルゴリズム。"
    return:
      type: System.Byte[]
      description: "指定されたデータの ECDSA 署名。"
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>0 未満です。       - または -<code>count</code>が&0; 未満です。       - または - <code>offset</code>  + <code>count</code> – 1 の上限を超えるインデックス<code>data</code>です。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  id: SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ値のデジタル署名を生成します。"
  syntax:
    content: public abstract byte[] SignHash (byte[] hash);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "署名されたデータのハッシュ値。"
    return:
      type: System.Byte[]
      description: "秘密キーで暗号化された指定したハッシュ値で構成されるデジタル署名。"
  overload: System.Security.Cryptography.ECDsa.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>hash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定して、指定したデータのハッシュ値を計算することによって、デジタル署名が有効であることを確認ハッシュ アルゴリズムおよび指定した署名と比較することです。"
  syntax:
    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "署名されるデータ。"
    - id: signature
      type: System.Byte[]
      description: "検証する署名データ。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "データのハッシュ値を作成するために使用するハッシュ アルゴリズム。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、署名が無効です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ値を計算することによって、デジタル署名が有効であることを確認ストリーム、指定したハッシュ アルゴリズムを使用して、指定した署名と比較することです。"
  syntax:
    content: public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "署名されるデータ。"
    - id: signature
      type: System.Byte[]
      description: "検証する署名データ。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "データのハッシュ値を作成するために使用するハッシュ アルゴリズム。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、署名が無効です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "バイトの部分にあるデータのハッシュ値を計算することによって、デジタル署名が有効であることを確認配列の指定したハッシュ アルゴリズムを使用して、指定した署名と比較することです。"
  syntax:
    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "署名されるデータ。"
    - id: offset
      type: System.Int32
      description: "ハッシュを計算する位置を示す開始インデックス。"
    - id: count
      type: System.Int32
      description: "ハッシュするバイト数。"
    - id: signature
      type: System.Byte[]
      description: "検証する署名データ。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "データのハッシュ値を作成するために使用するハッシュ アルゴリズム。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、署名が無効です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>0 未満です。       - または -<code>count</code>が&0; 未満です。       - または - <code>offset</code>  + <code>count</code> – 1 の上限を超えるインデックス<code>data</code>です。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  id: VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyHash(Byte[],Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ値に対してデジタル署名を確認します。"
  remarks: "署名が、公開キーを使用して暗号化解除し、検証のハッシュ値と比較されます。"
  syntax:
    content: public abstract bool VerifyHash (byte[] hash, byte[] signature);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "データ ブロックのハッシュ値。"
    - id: signature
      type: System.Byte[]
      description: "検証するデジタル署名。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ハッシュ値が、暗号化が解除された署名と等しい場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.ECDsa.VerifyHash*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ECDsa.#ctor
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: System.Security.Cryptography.ECDsa.ECDsa()
- uid: System.Security.Cryptography.ECDsa.Create
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: System.Security.Cryptography.ECDsa.Create()
- uid: System.Security.Cryptography.ECDsa
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: System.Security.Cryptography.ECDsa.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyHash(Byte[],Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])
- uid: System.Security.Cryptography.ECDsa.#ctor*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa.ECDsa
- uid: System.Security.Cryptography.ECDsa.Create*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create
  nameWithType: ECDsa.Create
- uid: System.Security.Cryptography.ECDsa.HashData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData
  nameWithType: ECDsa.HashData
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData
  nameWithType: ECDsa.SignData
- uid: System.Security.Cryptography.ECDsa.SignHash*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignHash
  nameWithType: ECDsa.SignHash
- uid: System.Security.Cryptography.ECDsa.VerifyData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData
  nameWithType: ECDsa.VerifyData
- uid: System.Security.Cryptography.ECDsa.VerifyHash*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyHash
  nameWithType: ECDsa.VerifyHash
