### YamlMime:ManagedReference
items:
- uid: System.Net.Security.SslStream
  id: SslStream
  children:
  - System.Net.Security.SslStream.#ctor(System.IO.Stream)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)
  - System.Net.Security.SslStream.AuthenticateAsClient(System.String)
  - System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)
  - System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.CanRead
  - System.Net.Security.SslStream.CanSeek
  - System.Net.Security.SslStream.CanTimeout
  - System.Net.Security.SslStream.CanWrite
  - System.Net.Security.SslStream.CheckCertRevocationStatus
  - System.Net.Security.SslStream.CipherAlgorithm
  - System.Net.Security.SslStream.CipherStrength
  - System.Net.Security.SslStream.Dispose(System.Boolean)
  - System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)
  - System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)
  - System.Net.Security.SslStream.EndRead(System.IAsyncResult)
  - System.Net.Security.SslStream.EndWrite(System.IAsyncResult)
  - System.Net.Security.SslStream.Flush
  - System.Net.Security.SslStream.HashAlgorithm
  - System.Net.Security.SslStream.HashStrength
  - System.Net.Security.SslStream.IsAuthenticated
  - System.Net.Security.SslStream.IsEncrypted
  - System.Net.Security.SslStream.IsMutuallyAuthenticated
  - System.Net.Security.SslStream.IsServer
  - System.Net.Security.SslStream.IsSigned
  - System.Net.Security.SslStream.KeyExchangeAlgorithm
  - System.Net.Security.SslStream.KeyExchangeStrength
  - System.Net.Security.SslStream.Length
  - System.Net.Security.SslStream.LocalCertificate
  - System.Net.Security.SslStream.Position
  - System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.SslStream.ReadTimeout
  - System.Net.Security.SslStream.RemoteCertificate
  - System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.SslStream.SetLength(System.Int64)
  - System.Net.Security.SslStream.SslProtocol
  - System.Net.Security.SslStream.TransportContext
  - System.Net.Security.SslStream.Write(System.Byte[])
  - System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.SslStream.WriteTimeout
  langs:
  - csharp
  name: SslStream
  nameWithType: SslStream
  fullName: System.Net.Security.SslStream
  type: Class
  summary: "Secure Socket Layer (SSL) セキュリティ プロトコルを使用して、サーバーと、必要に応じて、クライアントの認証にクライアント サーバー通信のために使用されるストリームを提供します。"
  remarks: "SSL プロトコルは、機密性と整合性チェック、SslStream を使用して送信されるメッセージを提供するのに役立ちます。 クライアントとサーバー間で機密情報を通信するときに、SslStream、によって提供される、SSL 接続を使用してください。 SslStream を使用して読み取りや、ネットワーク上を転送中にある間に情報が改ざんされるはだれに役立ちます。       SslStream インスタンスは、SslStream を作成するときに指定するストリームを使用してデータを送信します。 この基になるストリームを指定するときに、SslStream を終了すると、基になるストリームも閉じるかどうかを指定するオプションがあります。 通常、SslStream クラスが使用されて、<xref:System.Net.Sockets.TcpClient>と<xref:System.Net.Sockets.TcpListener>クラス</xref:System.Net.Sockets.TcpListener></xref:System.Net.Sockets.TcpClient>。 <xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、 <xref:System.Net.Sockets.NetworkStream>SslStream クラスで使用するのに適した</xref:System.Net.Sockets.NetworkStream>を提供</xref:System.Net.Sockets.TcpClient.GetStream%2A>する       SslStream を作成した後、サーバーと、必要に応じて、クライアントを認証する必要があります。 X509 を提供する必要があります、サーバー証明書をその id を確立しするクライアントもように要求できます。 認証は、SslStream を使用して情報を送信する前に実行する必要があります。 クライアントは、同期を使用して認証を開始<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>メソッドで、認証が完了するまでブロック、または非同期<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>メソッドで、認証が完了するための待機をブロックしません</xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A></xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。 サーバーは、同期を使用して認証を開始<xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>または非同期<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッド</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A></xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>。 クライアントとサーバーの両方が認証を行う必要があります。       認証は、セキュリティ サポート プロバイダー (SSPI) チャネル プロバイダーによって処理されます。 クライアントを指定することで、サーバーの証明書の検証を制御する機会が与えられます、 <xref:System.Net.Security.RemoteCertificateValidationCallback>、SslStream を作成するときに委任します</xref:System.Net.Security.RemoteCertificateValidationCallback>。 サーバーでは検証を指定することによっても制御できます、<xref:System.Net.Security.RemoteCertificateValidationCallback>委任します</xref:System.Net.Security.RemoteCertificateValidationCallback>。 デリゲートによって参照されるメソッドには、リモート パーティの証明書および証明書の検証中に発生した SSPI エラーが含まれます。 サーバーは、デリゲートを指定した場合、デリゲートのメソッドが呼び出されること、サーバーがクライアント認証を要求するかどうかに関係なくに注意してください。 サーバーがクライアント認証を要求していない場合、サーバーのデリゲート メソッドは、null の証明書と証明書のエラーの空の配列を受け取ります。       サーバーは、クライアント認証を必要とする場合、クライアントは認証用の&1; つまたは複数の証明書を指定する必要があります。 クライアントが提供できるクライアントに複数の証明書がある場合、<xref:System.Net.Security.LocalCertificateSelectionCallback>デリゲートをサーバーの正しい証明書を選択します</xref:System.Net.Security.LocalCertificateSelectionCallback>。 クライアントの証明書は、現在のユーザーの&quot;My&quot;証明書ストアにある必要があります。 証明書を使用してクライアント認証はサポートされていません、 <xref:System.Security.Authentication.SslProtocols>SSL バージョン 2 プロトコル</xref:System.Security.Authentication.SslProtocols>。       受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、SslStream が使用可能になりました</xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。       SSL ハンドシェイクとも呼ばれる、認証プロセスが成功した場合、サーバー (および必要に応じて、クライアント) の id を確立し、SslStream は、メッセージを交換するクライアントとサーバーで使用できます。 情報を送受信する前に、クライアントとサーバーくださいセキュリティ サービスとプロトコル、アルゴリズム、およびオン長所が整合性および機密性が実現するための要件を満たしているかどうかを判断する SslStream によって提供されるレベル。 現在の設定が十分なされていない場合は、ストリームが閉じている必要があります。 SslStream を使用して、によって提供されるセキュリティ サービスを確認することができます、<xref:System.Net.Security.SslStream.IsEncrypted%2A>と<xref:System.Net.Security.SslStream.IsSigned%2A>プロパティ</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A>。 次の表は、認証、暗号化、およびデータの署名に使用される暗号化の設定を報告する要素を示しています。      |要素 |メンバー |  |-------------|-------------|  |サーバーと、必要に応じて、クライアントの認証に使用されるセキュリティ プロトコルです |。<xref:System.Net.Security.SslStream.SslProtocol%2A>プロパティと関連付けられている<xref:System.Security.Authentication.SslProtocols>列挙します |。  |キー交換アルゴリズムです |。<xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A>プロパティと関連付けられている<xref:System.Security.Authentication.ExchangeAlgorithmType>列挙します |。  |メッセージの整合性アルゴリズムです |。<xref:System.Net.Security.SslStream.HashAlgorithm%2A>プロパティと関連付けられている<xref:System.Security.Authentication.HashAlgorithmType>列挙します |。  |メッセージの機密性アルゴリズムです |。<xref:System.Net.Security.SslStream.CipherAlgorithm%2A>プロパティと関連付けられている<xref:System.Security.Authentication.CipherAlgorithmType>列挙します |。  |選択したアルゴリズムの強さ |。<xref:System.Net.Security.SslStream.KeyExchangeStrength%2A> <xref:System.Net.Security.SslStream.HashStrength%2A>、および<xref:System.Net.Security.SslStream.CipherStrength%2A>プロパティです |。      認証が成功した後、同期を使用してデータを送信することができます<xref:System.Net.Security.SslStream.Write%2A>または非同期<xref:System.Net.Security.SslStream.BeginWrite%2A>メソッド</xref:System.Net.Security.SslStream.BeginWrite%2A></xref:System.Net.Security.SslStream.Write%2A></xref:System.Net.Security.SslStream.CipherStrength%2A></xref:System.Net.Security.SslStream.HashStrength%2A></xref:System.Net.Security.SslStream.KeyExchangeStrength%2A></xref:System.Security.Authentication.CipherAlgorithmType></xref:System.Net.Security.SslStream.CipherAlgorithm%2A></xref:System.Security.Authentication.HashAlgorithmType></xref:System.Net.Security.SslStream.HashAlgorithm%2A></xref:System.Security.Authentication.ExchangeAlgorithmType></xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A></xref:System.Security.Authentication.SslProtocols></xref:System.Net.Security.SslStream.SslProtocol%2A>。 同期を使用してデータを受信できる<xref:System.Net.Security.SslStream.Read%2A>または非同期<xref:System.Net.Security.SslStream.BeginRead%2A>メソッド</xref:System.Net.Security.SslStream.BeginRead%2A></xref:System.Net.Security.SslStream.Read%2A>。       指定した場合、<xref:System.Net.Security.SslStream.%23ctor%2A>基になるストリームを開いたままにするが完了したら、そのストリームを終了する必要がある使用</xref:System.Net.Security.SslStream.%23ctor%2A>      > [!NOTE] > SslStream オブジェクトを作成するアプリケーションは、通常のユーザーの資格情報で実行している場合、アプリケーションはアクセス許可が明示的に指定されてユーザーにこれを行う場合を除き、ローカル コンピューター ストアにインストールされている証明書にアクセスできません。       SslStream が想定すると共に、他のタイムアウト<xref:System.IO.IOException>内部ストリームからスローされた&1; つは処理されます、致命的な呼び出し元によって</xref:System.IO.IOException>。 タイムアウトはガベージを返します後 SslStream インスタンスを再利用されます。 アプリケーションにする必要があります<xref:System.IO.Stream.Close%2A>SslStream とこのような場合は例外をスローします</xref:System.IO.Stream.Close%2A>。       .NET Framework 4.6 には、安全性の低い暗号およびハッシュ アルゴリズムの接続をブロックする新しいセキュリティ機能が含まれています。 HttpClient、HttpWebRequest、FTPClient、SmtpClient、SslStream などの Api を介した TLS と SSL を使用して、.NET Framework 4.6 を対象とするアプリケーションでは、既定では、セキュリティが強化された動作を取得します。       開発者は、既存 SSL3 サービスまたは TLS で RC4 サービスと相互運用性を維持するために、この動作を除外する必要あります。 [この記事](https://support.microsoft.com/kb/3069494)新しい動作を無効にするように、コードを変更する方法について説明します。       .NET Framework 4.6.3 SslStreams、TLS バージョンを指定しないが、代わりにシステムの既定値として定義されている TLS バージョンを使用する認証のあるメソッドに対して新しいオーバー ロードを追加する[SCHANNEL](https://msdn.microsoft.com/library/windows/desktop/aa380123.aspx)です。 後で、長期にわたって TLS バージョンのベスト プラクティスの変更として、既定の設定を変更できる手段として、アプリでこれらのメソッドを使用リビルドして、アプリを再配置する必要はありません。"
  example:
  - "The following code example demonstrates creating an <xref:System.Net.Sockets.TcpListener> that uses the SslStream class to communicate with clients.  \n  \n [!code-cpp[NclSslServerSync#0](~/add/codesnippet/cpp/t-system.net.security.ss_1.cpp)]\n [!code-cs[NclSslServerSync#0](~/add/codesnippet/csharp/t-system.net.security.ss_1.cs)]  \n  \n The following code example demonstrates creating a <xref:System.Net.Sockets.TcpClient> that uses the SslStream class to communicate with a server.  \n  \n [!code-cpp[NclSslClientSync#0](~/add/codesnippet/cpp/t-system.net.security.ss_2.cpp)]\n [!code-cs[NclSslClientSync#0](~/add/codesnippet/csharp/t-system.net.security.ss_2.cs)]"
  syntax:
    content: 'public class SslStream : System.Net.Security.AuthenticatedStream'
  inheritance:
  - System.IO.Stream
  - System.Net.Security.AuthenticatedStream
  implements: []
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream)
  nameWithType: SslStream.SslStream(Stream)
  fullName: System.Net.Security.SslStream.SslStream(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>指定<xref:System.IO.Stream>.</xref:System.IO.Stream>を使用してクラス"
  remarks: "暗号化ポリシーですの構成ファイルで値が指定されていない場合、<xref:System.Net.Security.EncryptionPolicy>の既定値は<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>の<xref:System.Net.Security.SslStream>を構築するインスタンス</xref:System.Net.Security.SslStream></xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName></xref:System.Net.Security.EncryptionPolicy>。       <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>暗号化ポリシーが設定されている場合は、Null 暗号の使用が必要"
  syntax:
    content: public SslStream (System.IO.Stream innerStream);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>によって使用されるオブジェクト、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>データを送受信するためです</xref:System.IO.Stream>。"
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code>読み取りができません。       - または -<code>innerStream</code>書き込み禁止になっています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>innerStream</code>と等しい<xref:System.IO.Stream.Null>です。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean)
  nameWithType: SslStream.SslStream(Stream,Boolean)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>クラスの指定して<xref:System.IO.Stream>およびクロージャの動作をストリーミングします</xref:System.IO.Stream>。"
  remarks: "指定すると`true`の`leaveStreamOpen`パラメーター、閉じる、<xref:System.Net.Security.SslStream>に影響を与えません、`innerStream`ストリーム; 明示的に閉じる必要があります`innerStream`とそれが不要になった</xref:System.Net.Security.SslStream>       暗号化ポリシーですの構成ファイルで値が指定されていない場合、<xref:System.Net.Security.EncryptionPolicy>の既定値は<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>の<xref:System.Net.Security.SslStream>を構築するインスタンス</xref:System.Net.Security.SslStream></xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName></xref:System.Net.Security.EncryptionPolicy>。       <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>暗号化ポリシーが設定されている場合は、Null 暗号の使用が必要"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/m-system.net.security.ss_5_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/m-system.net.security.ss_5_1.cs)]"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>によって使用されるオブジェクト、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>データを送受信するためです</xref:System.IO.Stream>。"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "クロージャ動作を示すブール値、<xref:System.IO.Stream>によって使用されるオブジェクト、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>データを送受信するためです</xref:System.IO.Stream>。 このパラメーターは、内部ストリームが開いたままかどうかを示します。"
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code>読み取りができません。       - または -<code>innerStream</code>書き込み禁止になっています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>innerStream</code>と等しい<xref:System.IO.Stream.Null>です。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)
  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>クラス<xref:System.IO.Stream>クロージャの動作をストリーム配信、および証明書の検証のデリゲート</xref:System.IO.Stream>。"
  remarks: "指定すると`true`の`leaveStreamOpen`パラメーター、閉じる、<xref:System.Net.Security.SslStream>に影響を与えません、`innerStream`ストリーム; 明示的に閉じる必要があります`innerStream`とそれが不要になった</xref:System.Net.Security.SslStream>       `userCertificateValidationCallback`デリゲートの`certificateErrors`引数には、チャネルのセキュリティ サポート プロバイダー インターフェイス (SSPI) によって返される Windows エラー コードが含まれています。 によって呼び出されるメソッドの戻り値、`userCertificateValidationCallback`デリゲートは、認証が成功したかどうかを決定します。       セキュリティ プロトコルおよび暗号アルゴリズムが既に選択されているときに、`userCertificateValidationCallback`デリゲートのメソッドが呼び出されます。 メソッドを使用すると、選択した暗号アルゴリズムと長所がアプリケーションのための十分なのかを判断します。 場合は、メソッドが返す必要があります、`false`を防ぐために、<xref:System.Net.Security.SslStream>作成されない</xref:System.Net.Security.SslStream>。       暗号化ポリシーですの構成ファイルで値が指定されていない場合、<xref:System.Net.Security.EncryptionPolicy>の既定値は<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>の<xref:System.Net.Security.SslStream>を構築するインスタンス</xref:System.Net.Security.SslStream></xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName></xref:System.Net.Security.EncryptionPolicy>。       <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>暗号化ポリシーが設定されている場合は、Null 暗号の使用が必要      > [!NOTE] > The Framework SSL セッションが作成されるキャッシュし、新しい要求のキャッシュされているセッションを再利用可能であればしようとしています。 フレームワークでの最初の要素を使用するときに、SSL セッションを再利用する、 <xref:System.Net.HttpWebRequest.ClientCertificates%2A>(かどうかがある&1; つ)、匿名のセッションを再利用を試みる<xref:System.Net.HttpWebRequest.ClientCertificates%2A>が空です</xref:System.Net.HttpWebRequest.ClientCertificates%2A></xref:System.Net.HttpWebRequest.ClientCertificates%2A>。      > [!NOTE] > SSL バージョン 2 プロトコルでは、クライアント証明書はサポートされていません。"
  example:
  - "The following code example creates an <xref:System.Net.Security.SslStream> and initiates the client portion of the authentication.  \n  \n [!code-cpp[NclSslClientSync#4](~/add/codesnippet/cpp/9eaa69b2-6619-41cf-8f97-_1.cpp)]\n [!code-cs[NclSslClientSync#4](~/add/codesnippet/csharp/9eaa69b2-6619-41cf-8f97-_1.cs)]"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>によって使用されるオブジェクト、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>データを送受信するためです</xref:System.IO.Stream>。"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "クロージャ動作を示すブール値、<xref:System.IO.Stream>によって使用されるオブジェクト、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>データを送受信するためです</xref:System.IO.Stream>。 このパラメーターは、内部ストリームが開いたままかどうかを示します。"
    - id: userCertificateValidationCallback
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;> </xref>リモート パーティによって提供された証明書を検証します。"
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code>読み取りができません。       - または -<code>innerStream</code>書き込み禁止になっています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>innerStream</code>と等しい<xref:System.IO.Stream.Null>です。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)
  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>クラス<xref:System.IO.Stream>、クロージャの動作、ストリーム、証明書検証デリゲート証明書の選択のデリゲート</xref:System.IO.Stream>。"
  remarks: "指定すると`true`の`leaveStreamOpen`パラメーター、閉じる、<xref:System.Net.Security.SslStream>に影響を与えません、`innerStream`ストリーム; 明示的に閉じる必要があります`innerStream`とそれが不要になった</xref:System.Net.Security.SslStream>       `userCertificateValidationCallback`デリゲートの`certificateErrors`引数には、チャネルのセキュリティ サポート プロバイダー インターフェイス (SSPI) によって返される Windows エラー コードが含まれています。 によって呼び出されるメソッドの戻り値、`userCertificateValidationCallback`デリゲートは、認証が成功したかどうかを決定します。       セキュリティ プロトコルおよび暗号アルゴリズムが既に選択されているときに、`userCertificateValidationCallback`デリゲートのメソッドが呼び出されます。 メソッドを使用すると、選択した暗号アルゴリズムと長所がアプリケーションのための十分なのかを判断します。 場合は、メソッドが返す必要があります、`false`を防ぐために、<xref:System.Net.Security.SslStream>作成されない</xref:System.Net.Security.SslStream>。       `userCertificateSelectionCallback`デリゲートは、アプリケーションが複数の証明書と証明書を動的に選択する必要がある場合に便利です。 &quot;MY&quot;ストアに証明書は、デリゲートが呼び出されるメソッドに渡されます。       暗号化ポリシーですの構成ファイルで値が指定されていない場合、<xref:System.Net.Security.EncryptionPolicy>の既定値は<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>の<xref:System.Net.Security.SslStream>を構築するインスタンス</xref:System.Net.Security.SslStream></xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName></xref:System.Net.Security.EncryptionPolicy>。       <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>暗号化ポリシーが設定されている場合は、Null 暗号の使用が必要      > [!NOTE] > The Framework SSL セッションが作成されるキャッシュし、新しい要求のキャッシュされているセッションを再利用可能であればしようとしています。 フレームワークが P:System.Net.HttpWebRequest.ClientCertificates (存在する場合) の最初の要素を使用するときに、SSL セッションを再利用する、または P:System.Net.HttpWebRequest.ClientCertificates がある場合は、匿名のセッションを再利用する試行が空です。"
  example:
  - "The following code example demonstrates calling this constructor. This example is part of a larger example provided for the <xref:System.Net.Security.SslStream> class.  \n  \n [!code-cpp[NclSslClientAsync#6](~/add/codesnippet/cpp/dc8fc9af-8c2a-4c30-be77-_1.cpp)]\n [!code-cs[NclSslClientAsync#6](~/add/codesnippet/csharp/dc8fc9af-8c2a-4c30-be77-_1.cs)]"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>によって使用されるオブジェクト、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>データを送受信するためです</xref:System.IO.Stream>。"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "クロージャ動作を示すブール値、<xref:System.IO.Stream>によって使用されるオブジェクト、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>データを送受信するためです</xref:System.IO.Stream>。 このパラメーターは、内部ストリームが開いたままかどうかを示します。"
    - id: userCertificateValidationCallback
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;> </xref>リモート パーティによって提供された証明書を検証します。"
    - id: userCertificateSelectionCallback
      type: System.Net.Security.LocalCertificateSelectionCallback
      description: "A <xref href=&quot;System.Net.Security.LocalCertificateSelectionCallback&quot;> </xref>書を認証に使用する証明書を選択します。"
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code>読み取りができません。       - または -<code>innerStream</code>書き込み禁止になっています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>innerStream</code>と等しい<xref:System.IO.Stream.Null>です。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)
  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>クラス<xref:System.IO.Stream></xref:System.IO.Stream>"
  remarks: "Null 暗号の使用が必要なときに、 `encryptionPolicy` <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName></xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>パラメーターが設定されている。"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback, System.Net.Security.EncryptionPolicy encryptionPolicy);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>によって使用されるオブジェクト、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>データを送受信するためです</xref:System.IO.Stream>。"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "クロージャ動作を示すブール値、<xref:System.IO.Stream>によって使用されるオブジェクト、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>データを送受信するためです</xref:System.IO.Stream>。 このパラメーターは、内部ストリームが開いたままかどうかを示します。"
    - id: userCertificateValidationCallback
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;> </xref>リモート パーティによって提供された証明書を検証します。"
    - id: userCertificateSelectionCallback
      type: System.Net.Security.LocalCertificateSelectionCallback
      description: "A <xref href=&quot;System.Net.Security.LocalCertificateSelectionCallback&quot;> </xref>書を認証に使用する証明書を選択します。"
    - id: encryptionPolicy
      type: System.Net.Security.EncryptionPolicy
      description: "The <xref href=&quot;System.Net.Security.EncryptionPolicy&quot;></xref> to use."
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code>読み取りができません。       - または -<code>innerStream</code>書き込み禁止になっています。       - または -<code>encryptionPolicy</code>が無効です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>innerStream</code>と等しい<xref:System.IO.Stream.Null>です。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String)
  id: AuthenticateAsClient(System.String)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClient(String)
  nameWithType: SslStream.AuthenticateAsClient(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "サーバーの認証にクライアントと、必要に応じて、クライアント サーバー接続でクライアントによって呼び出されます。"
  remarks: "このメソッドが<xref:System.Security.Authentication.SslProtocols>。</xref:System.Security.Authentication.SslProtocols>を使用して認証します。 認証では、クライアント証明書は使用されません。 証明書失効リストは、認証時にチェックされません。 指定された値`targetHost`サーバーの証明書の名前が一致する必要があります。       認証に成功した場合<xref:System.Net.Security.SslStream.IsEncrypted%2A>および<xref:System.Net.Security.SslStream.IsSigned%2A>プロパティ</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A>をチェックする必要があります。 チェック、<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティ</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>。       受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、され、この<xref:System.Net.Security.SslStream>、使用できなくします</xref:System.Net.Security.SslStream></xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。"
  syntax:
    content: public virtual void AuthenticateAsClient (string targetHost);
    parameters:
    - id: targetHost
      type: System.String
      description: "これを共有しているサーバーの名前<xref href=&quot;System.Net.Security.SslStream&quot;></xref>です。"
  overload: System.Net.Security.SslStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が既に発生しました。       - または - これを使用するサーバー認証<xref href=&quot;System.Net.Security.SslStream&quot;></xref>が以前に試行します。       - または - 認証が既に進行中です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "サーバーの認証にクライアントと、必要に応じて、クライアント サーバー接続でクライアントによって呼び出されます。 認証プロセスでは、指定された証明書のコレクションと SSL プロトコルを使用します。"
  remarks: "認証に成功した場合<xref:System.Net.Security.SslStream.IsEncrypted%2A>および<xref:System.Net.Security.SslStream.IsSigned%2A>プロパティ</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A>をチェックする必要があります。 チェック、<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティ</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>。       受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、され、この<xref:System.Net.Security.SslStream>、使用できなくします</xref:System.Net.Security.SslStream></xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。      > [!NOTE] > SSL バージョン 2 プロトコルでは、クライアント証明書はサポートされていません。"
  syntax:
    content: public virtual void AuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: targetHost
      type: System.String
      description: "これを共有するサーバーの名前<xref href=&quot;System.Net.Security.SslStream&quot;></xref>です。"
    - id: clientCertificates
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;> </xref>クライアント証明書を格納しています。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>認証に使用されるプロトコルを表す値</xref:System.Security.Authentication.SslProtocols>。"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>認証時に証明書失効リストをチェックするかどうかを指定する値</xref:System.Boolean>。"
  overload: System.Net.Security.SslStream.AuthenticateAsClient*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)
  id: AuthenticateAsClientAsync(System.String)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(String)
  nameWithType: SslStream.AuthenticateAsClientAsync(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "サーバーの認証にクライアントと、必要に応じて、非同期操作としてクライアント サーバー接続でクライアントによって呼び出されます。"
  remarks: "このメソッドが<xref:System.Security.Authentication.SslProtocols>。</xref:System.Security.Authentication.SslProtocols>を使用して認証します。 認証では、クライアント証明書は使用されません。 証明書失効リストは、認証時にチェックされません。 指定された値`targetHost`サーバーの証明書の名前が一致する必要があります。       認証に成功した場合<xref:System.Net.Security.SslStream.IsEncrypted%2A>および<xref:System.Net.Security.SslStream.IsSigned%2A>プロパティ</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A>をチェックする必要があります。 チェック、<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティ</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>。       受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、され、この<xref:System.Net.Security.SslStream>、使用できなくします</xref:System.Net.Security.SslStream></xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost);
    parameters:
    - id: targetHost
      type: System.String
      description: "これを共有しているサーバーの名前<xref href=&quot;System.Net.Security.SslStream&quot;></xref>です。"
    return:
      type: System.Threading.Tasks.Task
      description: "返します<xref:System.Threading.Tasks.Task>非同期操作を表すタスク オブジェクト</xref:System.Threading.Tasks.Task>。"
  overload: System.Net.Security.SslStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が既に発生しました。       - または - これを使用するサーバー認証<xref href=&quot;System.Net.Security.SslStream&quot;></xref>が以前に試行します。       - または - 認証が既に進行中です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "サーバーの認証にクライアントと、必要に応じて、非同期操作としてクライアント サーバー接続でクライアントによって呼び出されます。 認証プロセスでは、指定された証明書のコレクションと SSL プロトコルを使用します。"
  remarks: "認証に成功した場合<xref:System.Net.Security.SslStream.IsEncrypted%2A>および<xref:System.Net.Security.SslStream.IsSigned%2A>プロパティ</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A>をチェックする必要があります。 チェック、<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティ</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>。       受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、され、この<xref:System.Net.Security.SslStream>、使用できなくします</xref:System.Net.Security.SslStream></xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。      > [!NOTE] > SSL バージョン 2 プロトコルでは、クライアント証明書はサポートされていません。"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: targetHost
      type: System.String
      description: "これを共有するサーバーの名前<xref href=&quot;System.Net.Security.SslStream&quot;></xref>です。"
    - id: clientCertificates
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;> </xref>クライアント証明書を格納しています。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>認証に使用されるプロトコルを表す値</xref:System.Security.Authentication.SslProtocols>。"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>認証時に証明書失効リストをチェックするかどうかを指定する値</xref:System.Boolean>。"
    return:
      type: System.Threading.Tasks.Task
      description: "返します<xref:System.Threading.Tasks.Task>非同期操作を表すタスク オブジェクト</xref:System.Threading.Tasks.Task>。"
  overload: System.Net.Security.SslStream.AuthenticateAsClientAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServer(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "サーバーと、必要に応じて指定された証明書を使用するクライアントとサーバー接続でクライアントを認証するサーバーによって呼び出されます。"
  remarks: "このメソッドが<xref:System.Security.Authentication.SslProtocols>。</xref:System.Security.Authentication.SslProtocols>を使用して認証します。 証明書失効リストは、認証時にチェックされません。 クライアントは、認証用証明書を提供する必要はありません。       このメソッドは、操作が完了するまでブロックします。 操作が完了するまでブロックを防ぐためには、いずれかの操作を使用して、<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッドのオーバー ロード</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>。       受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、され、この<xref:System.Net.Security.SslStream>、使用できなくします</xref:System.Net.Security.SslStream></xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。"
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "サーバーの認証に使用される証明書。"
  overload: System.Net.Security.SslStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が既に発生しました。       - または - これを使用してクライアント認証<xref href=&quot;System.Net.Security.SslStream&quot;></xref>が以前に試行します。       - または - 認証が既に進行中です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref:System.Net.Security.SslStream.AuthenticateAsServer*>メソッドは、Windows 95、Windows 98 または Windows Millennium でサポートされていません</xref:System.Net.Security.SslStream.AuthenticateAsServer*>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "サーバーと、必要に応じて、指定された証明書の要件、セキュリティ プロトコルを使用するクライアントとサーバー接続でクライアントを認証するサーバーによって呼び出されます。"
  remarks: "このメソッドは、操作が完了するまでブロックします。 操作が完了するまでブロックを防ぐためには、いずれかの操作を使用して、<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッドのオーバー ロード</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>。       受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、され、この<xref:System.Net.Security.SslStream>、使用できなくします</xref:System.Net.Security.SslStream></xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。"
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "X509certificate からサーバーを認証するために使用します。"
    - id: clientCertificateRequired
      type: System.Boolean
      description: "A<xref:System.Boolean>クライアントが認証用証明書を要求するかどうかを指定する値</xref:System.Boolean>。 証明書が提供されない場合、サーバーがまだ接続要求を受け入れる--要求だけであるに注意してください。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>認証に使用されるプロトコルを表す値</xref:System.Security.Authentication.SslProtocols>。"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>認証時に証明書失効リストをチェックするかどうかを指定する値</xref:System.Boolean>。"
  overload: System.Net.Security.SslStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>enabledSslProtocols</code>有効ではありません<xref:System.Security.Authentication.SslProtocols>値。"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が既に発生しました。       - または - これを使用してクライアント認証<xref href=&quot;System.Net.Security.SslStream&quot;></xref>が以前に試行します。       - または - 認証が既に進行中です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref:System.Net.Security.SslStream.AuthenticateAsServer*>メソッドは、Windows 95、Windows 98 または Windows Millennium でサポートされていません</xref:System.Net.Security.SslStream.AuthenticateAsServer*>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "サーバーと、必要に応じて、非同期操作として指定された証明書を使用するクライアントとサーバー接続でクライアントを認証するサーバーによって呼び出されます。"
  remarks: "このメソッドが<xref:System.Security.Authentication.SslProtocols>。</xref:System.Security.Authentication.SslProtocols>を使用して認証します。 証明書失効リストは、認証時にチェックされません。 クライアントは、認証用証明書を提供する必要はありません。       受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、され、この<xref:System.Net.Security.SslStream>、使用できなくします</xref:System.Net.Security.SslStream></xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "サーバーの認証に使用される証明書。"
    return:
      type: System.Threading.Tasks.Task
      description: "返します<xref:System.Threading.Tasks.Task>非同期操作を表すタスク オブジェクト</xref:System.Threading.Tasks.Task>。"
  overload: System.Net.Security.SslStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が既に発生しました。       - または - これを使用してクライアント認証<xref href=&quot;System.Net.Security.SslStream&quot;></xref>が以前に試行します。       - または - 認証が既に進行中です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref:System.Net.Security.SslStream.AuthenticateAsServerAsync*>メソッドは、Windows 95、Windows 98 または Windows Millennium でサポートされていません</xref:System.Net.Security.SslStream.AuthenticateAsServerAsync*>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "サーバーと、必要に応じて、非同期操作として、指定された証明書の要件、セキュリティ プロトコルを使用するクライアントとサーバー接続でクライアントを認証するサーバーによって呼び出されます。"
  remarks: "受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、され、この<xref:System.Net.Security.SslStream>、使用できなくします</xref:System.Net.Security.SslStream></xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "X509certificate からサーバーを認証するために使用します。"
    - id: clientCertificateRequired
      type: System.Boolean
      description: "A<xref:System.Boolean>クライアントが認証用証明書を要求するかどうかを指定する値</xref:System.Boolean>。 証明書が提供されない場合、サーバーがまだ接続要求を受け入れる--要求だけであるに注意してください。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>認証に使用されるプロトコルを表す値</xref:System.Security.Authentication.SslProtocols>。"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>認証時に証明書失効リストをチェックするかどうかを指定する値</xref:System.Boolean>。"
    return:
      type: System.Threading.Tasks.Task
      description: "返します<xref:System.Threading.Tasks.Task>非同期操作を表すタスク オブジェクト</xref:System.Threading.Tasks.Task>。"
  overload: System.Net.Security.SslStream.AuthenticateAsServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(String,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "クライアントがサーバーを認証する非同期操作を開始して、必要に応じて、クライアントによって呼び出されます。"
  remarks: "このメソッドが<xref:System.Security.Authentication.SslProtocols>。</xref:System.Security.Authentication.SslProtocols>を使用して認証します。 認証では、クライアント証明書は使用されません。 証明書失効リストは、認証時にチェックされません。       指定された値`targetHost`サーバーの証明書の名前が一致する必要があります。       呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A>メソッド</xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A>。 通常、このメソッドはによって、`asyncCallback`を委任します。       このメソッドは、操作が完了するにはブロックされません。 操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>メソッドのオーバー ロード</xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)を受け取った場合、 <xref:System.Security.Authentication.AuthenticationException>、この<xref:System.Net.Security.SslStream>、使用できなくします。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: targetHost
      type: System.String
      description: "これを共有しているサーバーの名前<xref href=&quot;System.Net.Security.SslStream&quot;></xref>です。"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>、認証が完了したときに呼び出されるメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: asyncState
      type: System.Object
      description: "操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、`asyncCallback`操作の完了時に委任します。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期操作の状態を示すオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.Security.SslStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が既に発生しました。       - または - これを使用するサーバー認証<xref href=&quot;System.Net.Security.SslStream&quot;></xref>が以前に試行します。       - または - 認証が既に進行中です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "クライアントがサーバーを認証する非同期操作を開始して、必要に応じて、指定された証明書およびセキュリティ プロトコルを使用して、クライアントによって呼び出されます。"
  remarks: "指定された値`targetHost`サーバーの証明書の名前が一致する必要があります。       呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A>メソッド</xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A>。 通常、このメソッドはによって、`asyncCallback`を委任します。       このメソッドは、操作が完了するにはブロックされません。 操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>メソッドのオーバー ロード</xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)を受け取った場合、 <xref:System.Security.Authentication.AuthenticationException>、この<xref:System.Net.Security.SslStream>、使用できなくします。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。      > [!NOTE] > SSL バージョン 2 プロトコルでは、クライアント証明書はサポートされていません。"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: targetHost
      type: System.String
      description: "これを共有しているサーバーの名前<xref href=&quot;System.Net.Security.SslStream&quot;></xref>です。"
    - id: clientCertificates
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;> </xref>クライアント証明書を格納します。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>認証に使用されるプロトコルを表す値</xref:System.Security.Authentication.SslProtocols>。"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>認証時に証明書失効リストをチェックするかどうかを指定する値</xref:System.Boolean>。"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>、認証が完了したときに呼び出されるメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: asyncState
      type: System.Object
      description: "操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、`asyncCallback`操作の完了時に委任します。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期操作の状態を示すオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.Security.SslStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>enabledSslProtocols</code>有効ではありません<xref:System.Security.Authentication.SslProtocols>値。"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が既に発生しました。       - または - これを使用するサーバー認証<xref href=&quot;System.Net.Security.SslStream&quot;></xref>が以前に試行します。       - または - 認証が既に進行中です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "クライアントを認証する非同期操作を開始するサーバーと必要に応じてクライアント サーバー接続で、サーバーによって呼び出されます。"
  remarks: "このメソッドが<xref:System.Security.Authentication.SslProtocols>。</xref:System.Security.Authentication.SslProtocols>を使用して認証します。 証明書失効リストは、認証時にチェックされません。 クライアントは、認証用証明書を提供する必要はありません。       呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A>メソッド</xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A>。 通常、このメソッドはによって、`asyncCallback`を委任します。       このメソッドは、操作が完了するにはブロックされません。 操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>メソッドのオーバー ロード</xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)を受け取った場合、 <xref:System.Security.Authentication.AuthenticationException>、この<xref:System.Net.Security.SslStream>、使用できなくします。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "X509certificate からサーバーを認証するために使用します。"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>、認証が完了したときに呼び出されるメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: asyncState
      type: System.Object
      description: "操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、`asyncCallback`操作の完了時に委任します。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期操作の状態を示すオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.Security.SslStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が既に発生しました。       - または - これを使用してクライアント認証<xref href=&quot;System.Net.Security.SslStream&quot;></xref>が以前に試行します。       - または - 認証が既に進行中です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>メソッドは、Windows 95、Windows 98 または Windows Millennium でサポートされていません</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "サーバーと、必要に応じて、指定された証明書の要件、セキュリティ プロトコルを使用してクライアントを認証する非同期操作を開始するサーバーによって呼び出されます。"
  remarks: "呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A>メソッド</xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A>。 通常、このメソッドはによって、`asyncCallback`を委任します。       このメソッドは、操作が完了するにはブロックされません。 操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>メソッドのオーバー ロード</xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)を受け取った場合、 <xref:System.Security.Authentication.AuthenticationException>、この<xref:System.Net.Security.SslStream>、使用できなくします。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "X509certificate からサーバーを認証するために使用します。"
    - id: clientCertificateRequired
      type: System.Boolean
      description: "A<xref:System.Boolean>クライアントが認証用証明書を要求するかどうかを指定する値</xref:System.Boolean>。 証明書が提供されない場合、サーバーがまだ接続要求を受け入れる--要求だけであるに注意してください。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>認証に使用されるプロトコルを表す値</xref:System.Security.Authentication.SslProtocols>。"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>認証時に証明書失効リストをチェックするかどうかを指定する値</xref:System.Boolean>。"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>、認証が完了したときに呼び出されるメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: asyncState
      type: System.Object
      description: "操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、`asyncCallback`操作の完了時に委任します。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期操作の状態を示すオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.Security.SslStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>enabledSslProtocols</code>有効ではありません<xref:System.Security.Authentication.SslProtocols>値。"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が既に発生しました。       - または - これを使用するサーバー認証<xref href=&quot;System.Net.Security.SslStream&quot;></xref>が以前に試行します。       - または - 認証が既に進行中です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>メソッドは、Windows 95、Windows 98 または Windows Millennium でサポートされていません</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "ストリームからデータを読み取り、指定した配列に格納する非同期読み取り操作を開始します。"
  remarks: "暗号化や署名が有効になっている場合、読み取り操作が基になるストリームからデータを読み取り、データの整合性をチェックおよび復号化できます。 非同期の読み取り操作を呼び出すことによって完了する必要があります、<xref:System.Net.Security.SslStream.EndRead%2A>メソッド</xref:System.Net.Security.SslStream.EndRead%2A>。 通常、このメソッドはによって、`asyncCallback`を委任します。       このメソッドは、操作が完了するにはブロックされません。 使用して、操作が完了するまで、禁止する、<xref:System.Net.Security.SslStream.Read%2A>メソッド</xref:System.Net.Security.SslStream.Read%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)、<xref:System.Net.Security.SslStream>クラスが複数の同時読み取り操作をサポートしていません。</xref:System.Net.Security.SslStream> 。       正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 いずれかの呼び出しを認証するために、 <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>、または<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>、<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッド</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A></xref:System.Net.Security.SslStream.AuthenticateAsServer%2A></xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A></xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。"
  example:
  - "The following code example demonstrates starting an asynchronous read operation.  \n  \n [!code-cpp[NclSslClientAsync#8](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_1.cpp)]\n [!code-cs[NclSslClientAsync#8](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_1.cs)]  \n  \n [!code-cpp[NclSslClientAsync#4](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_2.cpp)]\n [!code-cs[NclSslClientAsync#4](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_2.cs)]  \n  \n The following method is called when the read completes.  \n  \n [!code-cpp[NclSslClientAsync#5](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_3.cpp)]\n [!code-cs[NclSslClientAsync#5](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_3.cs)]"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A<xref:System.Byte>ストリームから読み取ったバイトを受け取る配列</xref:System.Byte>。"
    - id: offset
      type: System.Int32
      description: "内の&0; から始まる場所`buffer`このストリームから読み取ったデータの格納を開始する位置。"
    - id: count
      type: System.Int32
      description: "ストリームから読み取るバイトの最大数。"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>読み取り操作の完了時に呼び出すメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: asyncState
      type: System.Object
      description: "読み取り操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、`asyncCallback`操作の完了時に委任します。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期操作の状態を示すオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.Security.SslStream.BeginRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code>&gt;の長さ<code>buffer</code>です。       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "読み取り操作が失敗しました。       - または - 暗号化を使用していますが、データの暗号化を解除できませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "実行中の読み取り操作が既に存在します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が行われていません。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "書き込む非同期の書き込み操作を開始<xref:System.Byte>ストリームに指定されたバッファーから s</xref:System.Byte> 。"
  remarks: ''
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cs[NclSslServerAsync#5](~/add/codesnippet/csharp/7192cc61-a256-4249-aafa-_1.cs)]\n [!code-cpp[NclSslServerAsync#5](~/add/codesnippet/cpp/7192cc61-a256-4249-aafa-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A<xref:System.Byte>をストリームに書き込まれるバイト数を提供します</xref:System.Byte>。"
    - id: offset
      type: System.Int32
      description: "内の&0; から始まる場所`buffer`ストリームに書き込まれるバイトの読み取りを開始する位置。"
    - id: count
      type: System.Int32
      description: "<xref:System.Int32>から読み取るバイト数を指定する値`buffer`</xref:System.Int32>。"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>書き込み操作の完了時に呼び出すメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: asyncState
      type: System.Object
      description: "書き込み操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、`asyncCallback`操作の完了時に委任します。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期操作の状態を示すオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.Security.SslStream.BeginWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code>&gt;の長さ<code>buffer</code>です。       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "書き込み操作に失敗しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "実行中の書き込み操作が既に存在します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が行われていません。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanRead
  id: CanRead
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanRead
  nameWithType: SslStream.CanRead
  fullName: System.Net.Security.SslStream.CanRead
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Boolean>を基になるストリームが読み取り可能かどうかを示す値</xref:System.Boolean>。"
  remarks: "成功した認証が発生した場合、このプロパティは呼び出しによって返される値を返します<xref:System.IO.Stream.CanRead%2A>基になるストリーム</xref:System.IO.Stream.CanRead%2A>。       <xref:System.Net.Security.SslStream>クラス</xref:System.Net.Security.SslStream>のインスタンスを作成するときに、基になるストリームが指定されています。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_14_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_14_1.cs)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>認証が行われ、基になるストリームが読み取り可能な場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Security.SslStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: SslStream.CanSeek
  fullName: System.Net.Security.SslStream.CanSeek
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Boolean>を基になるストリームがシーク可能かどうかを示す値</xref:System.Boolean>。"
  remarks: "位置を設定しないでください、<xref:System.Net.Security.SslStream>オブジェクトまたはその基になるストリーム</xref:System.Net.Security.SslStream>。       <xref:System.Net.Security.SslStream>クラス</xref:System.Net.Security.SslStream>のインスタンスを作成するときに、基になるストリームが指定されています。"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "このプロパティは常に返します<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Security.SslStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanTimeout
  nameWithType: SslStream.CanTimeout
  fullName: System.Net.Security.SslStream.CanTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Boolean>基になるストリームがタイムアウトをサポートするかどうかを示す値</xref:System.Boolean>。"
  remarks: "このプロパティを呼び出すことによって返される値を返します<xref:System.IO.Stream.CanTimeout%2A>基になるストリーム</xref:System.IO.Stream.CanTimeout%2A>。       <xref:System.Net.Security.SslStream>クラス</xref:System.Net.Security.SslStream>のインスタンスを作成するときに、基になるストリームが指定されています。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_8_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_8_1.cs)]"
  syntax:
    content: public override bool CanTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>基になるストリームがタイムアウトをサポートしている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Security.SslStream.CanTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: SslStream.CanWrite
  fullName: System.Net.Security.SslStream.CanWrite
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Boolean>を基になるストリームが書き込み可能かどうかを示す値</xref:System.Boolean>。"
  remarks: "成功した認証が発生した場合、このプロパティは呼び出しによって返される値を返します<xref:System.IO.Stream.CanWrite%2A>基になるストリーム</xref:System.IO.Stream.CanWrite%2A>。       <xref:System.Net.Security.SslStream>クラス</xref:System.Net.Security.SslStream>のインスタンスを作成するときに、基になるストリームが指定されています。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_17_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_17_1.cs)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>認証が行われ、基になるストリームが書き込み可能な場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Security.SslStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CheckCertRevocationStatus
  id: CheckCertRevocationStatus
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CheckCertRevocationStatus
  nameWithType: SslStream.CheckCertRevocationStatus
  fullName: System.Net.Security.SslStream.CheckCertRevocationStatus
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Boolean>証明書の検証プロセス中に証明書失効リストを確認するかどうかを示す値</xref:System.Boolean>。"
  remarks: "証明書失効リストには、発行元によって失効した証明書が含まれています。 悪影響を及ぼす一覧を確認すると、パフォーマンスに影響を与えますが、アプリケーションのセキュリティが向上します。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_4_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_4_1.cs)]"
  syntax:
    content: public virtual bool CheckCertRevocationStatus { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>証明書失効リストがチェックされている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Security.SslStream.CheckCertRevocationStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CipherAlgorithm
  id: CipherAlgorithm
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CipherAlgorithm
  nameWithType: SslStream.CipherAlgorithm
  fullName: System.Net.Security.SslStream.CipherAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "これによって使用される一括暗号化アルゴリズムを識別する値を取得<xref href=&quot;System.Net.Security.SslStream&quot;></xref>です。"
  remarks: "値<xref:System.Security.Authentication.CipherAlgorithmType>CipherAlgorithm プロパティに必要なときに、<xref:System.Net.Security.EncryptionPolicy>列挙値が構築するために使用される、<xref:System.Net.Security.SslStream>インスタンス</xref:System.Net.Security.SslStream></xref:System.Net.Security.EncryptionPolicy></xref:System.Security.Authentication.CipherAlgorithmType>。       [!INCLUDE[winxpsvr](~/add/includes/winxpsvr-md.md)]および[!INCLUDE[winxp](~/add/includes/winxp-md.md)]サポートしていない、<xref:System.Security.Authentication.CipherAlgorithmType>値</xref:System.Security.Authentication.CipherAlgorithmType>。 場合でも、<xref:System.Security.Authentication.CipherAlgorithmType>値がこの<xref:System.Net.Security.SslStream>インスタンスの<xref:System.Net.Security.EncryptionPolicy>プロパティに<xref:System.Security.Authentication.CipherAlgorithmType>.</xref:System.Security.Authentication.CipherAlgorithmType>なる</xref:System.Net.Security.EncryptionPolicy></xref:System.Net.Security.SslStream>を構築するために使用</xref:System.Security.Authentication.CipherAlgorithmType>する <xref:System.Security.Authentication.CipherAlgorithmType>Windows Vista 以降でのみ値が返されます</xref:System.Security.Authentication.CipherAlgorithmType>。"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_10_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_10_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.CipherAlgorithmType CipherAlgorithm { get; }
    return:
      type: System.Security.Authentication.CipherAlgorithmType
      description: "A<xref:System.Security.Authentication.CipherAlgorithmType>値</xref:System.Security.Authentication.CipherAlgorithmType>。"
  overload: System.Net.Security.SslStream.CipherAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証プロセスや、認証プロセスの完了前に、CipherAlgorithm プロパティがアクセスされました。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.CipherStrength
  id: CipherStrength
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CipherStrength
  nameWithType: SslStream.CipherStrength
  fullName: System.Net.Security.SslStream.CipherStrength
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "これで使用される暗号アルゴリズムの強度を識別する値を取得<xref href=&quot;System.Net.Security.SslStream&quot;></xref>です。"
  remarks: "認証が行われるまで、このプロパティの値は&0; です。       このプロパティは、次の値のいずれかを返します: - 0 - 40-56-80 128-168 192 - 256"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_6_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_6_1.cs)]"
  syntax:
    content: public virtual int CipherStrength { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>、アルゴリズムの強度をビット単位で指定する値</xref:System.Int32>。"
  overload: System.Net.Security.SslStream.CipherStrength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SslStream.Dispose(Boolean)
  fullName: System.Net.Security.SslStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Net.Security.SslStream&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A>。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Net.Security.SslStream>参照。</xref:System.Net.Security.SslStream> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Net.Security.SslStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)
  id: EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>を前回呼び出したときに開始された保留中の非同期サーバー認証操作を終了します。"
  remarks: "操作が完了していない場合、このメソッドはそれまでブロックします。 認証に成功した場合、必要がありますをチェックする<xref:System.Net.Security.SslStream.IsEncrypted%2A><xref:System.Net.Security.SslStream>。</xref:System.Net.Security.SslStream>が使用されるセキュリティ サービスの種類を決定して<xref:System.Net.Security.SslStream.IsSigned%2A>プロパティ</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A> チェック、<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティ</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>。       受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、され、この<xref:System.Net.Security.SslStream>、使用できなくします</xref:System.Net.Security.SslStream></xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。       この操作を同期的に実行するには、いずれかの操作を使用して、<xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>メソッド</xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>。"
  syntax:
    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "の<xref:System.IAsyncResult>インスタンスは<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>への呼び出しによって返されます。</xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.EndAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>呼び出しによって作成されていない<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>です。"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "保留中のサーバー認証が完了することはありません。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)
  id: EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>。</xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>を前回呼び出したときに開始された保留中の非同期クライアントの認証操作を終了します。"
  remarks: "操作が完了していない場合、このメソッドはそれまでブロックします。 認証に成功した場合、必要がありますをチェックする<xref:System.Net.Security.SslStream.IsEncrypted%2A><xref:System.Net.Security.SslStream>。</xref:System.Net.Security.SslStream>が使用されるセキュリティ サービスの種類を決定して<xref:System.Net.Security.SslStream.IsSigned%2A>プロパティ</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A> チェック、<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティ</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>。       受信した認証に失敗した場合、 <xref:System.Security.Authentication.AuthenticationException>、され、この<xref:System.Net.Security.SslStream>、使用できなくします</xref:System.Net.Security.SslStream></xref:System.Security.Authentication.AuthenticationException>。 このオブジェクトを閉じるし、ガベージ コレクターによって収集できるように、すべての参照を削除する必要があります。       この操作を同期的に実行するには、いずれかの操作を使用して、<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>メソッド</xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。"
  syntax:
    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "の<xref:System.IAsyncResult>インスタンスは<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>。</xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>への呼び出しによって返されます。</xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.EndAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>呼び出しによって作成されていない<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>です。"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "認証が失敗し、このオブジェクトを使用できない状態のままです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "保留中のクライアント認証が完了することはありません。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: SslStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "<xref:System.Net.Security.SslStream.BeginRead*>。</xref:System.Net.Security.SslStream.BeginRead*>を前回呼び出したときの使用を開始して、非同期読み取り操作を終了します。"
  remarks: "操作が完了していない場合、このメソッドはそれまでブロックします。       この操作を同期的に実行するを使用して、<xref:System.Net.Security.SslStream.Read%2A>メソッド</xref:System.Net.Security.SslStream.Read%2A>。       正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 いずれかの呼び出しを認証するために、 <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>、または<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>、<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッド</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A></xref:System.Net.Security.SslStream.AuthenticateAsServer%2A></xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A></xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。"
  example:
  - "The following code example demonstrates ending an asynchronous read operation.  \n  \n [!code-cpp[NclSslClientAsync#5](~/add/codesnippet/cpp/m-system.net.security.ss_0_1.cpp)]\n [!code-cs[NclSslClientAsync#5](~/add/codesnippet/csharp/m-system.net.security.ss_0_1.cs)]"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返されるインスタンス<xref:System.Net.Security.SslStream.BeginRead*></xref:System.Net.Security.SslStream.BeginRead*></xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "A<xref:System.Int32>基になるストリームから読み取ったバイト数を指定する値</xref:System.Int32>。"
  overload: System.Net.Security.SslStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>呼び出しによって作成されていない<xref:System.Net.Security.SslStream.BeginRead*>です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が行われていません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "読み取り操作が失敗しました。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: SslStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "<xref:System.Net.Security.SslStream.BeginWrite*>。</xref:System.Net.Security.SslStream.BeginWrite*>を前回呼び出したときに開始された非同期の書き込み操作を終了します。"
  remarks: "操作が完了していない場合、このメソッドはそれまでブロックします。       アプリケーションは、正常に認証が完了するまで、このメソッドを呼び出すことはできません。 を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>、または<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>、<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッド。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>       この操作を同期的に実行するを使用して、<xref:System.Net.Security.SslStream.Write%2A>メソッド</xref:System.Net.Security.SslStream.Write%2A>。"
  example:
  - "The following code example demonstrates ending an asynchronous write operation.  \n  \n [!code-cs[NclSslServerAsync#4](~/add/codesnippet/csharp/m-system.net.security.ss_1_1.cs)]\n [!code-cpp[NclSslServerAsync#4](~/add/codesnippet/cpp/m-system.net.security.ss_1_1.cpp)]"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返されるインスタンス<xref:System.Net.Security.SslStream.BeginWrite*></xref:System.Net.Security.SslStream.BeginWrite*></xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>呼び出しによって作成されていない<xref:System.Net.Security.SslStream.BeginWrite*>です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が行われていません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "書き込み操作に失敗しました。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.Flush
  id: Flush
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Flush()
  nameWithType: SslStream.Flush()
  fullName: System.Net.Security.SslStream.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "基になるデバイスに書き込まれるバッファー内のデータが発生します。"
  remarks: "このメソッドを呼び出して<xref:System.IO.Stream.Flush%2A>基になるストリーム</xref:System.IO.Stream.Flush%2A>。"
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cpp[NclSslClientSync#5](~/add/codesnippet/cpp/m-system.net.security.ss_4_1.cpp)]\n [!code-cs[NclSslClientSync#5](~/add/codesnippet/csharp/m-system.net.security.ss_4_1.cs)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Net.Security.SslStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.HashAlgorithm
  id: HashAlgorithm
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: SslStream.HashAlgorithm
  fullName: System.Net.Security.SslStream.HashAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "メッセージ認証コード (Mac) を生成するために使用されるアルゴリズムを取得します。"
  remarks: "メッセージ認証アルゴリズムは、メッセージのハッシュと改ざんとフォージェリを検出するために使用する署名を生成します。"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_9_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_9_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.HashAlgorithmType HashAlgorithm { get; }
    return:
      type: System.Security.Authentication.HashAlgorithmType
      description: "A<xref:System.Security.Authentication.HashAlgorithmType>値</xref:System.Security.Authentication.HashAlgorithmType>。"
  overload: System.Net.Security.SslStream.HashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証プロセスや、認証プロセスの完了前に、ハッシュ アルゴリズム プロパティがアクセスされました。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.HashStrength
  id: HashStrength
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: HashStrength
  nameWithType: SslStream.HashStrength
  fullName: System.Net.Security.SslStream.HashStrength
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "このインスタンスで使用されるハッシュ アルゴリズムの強度を識別する値を取得します。"
  remarks: "認証が行われるまで、このプロパティの値は&0; です。"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_2_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_2_1.cs)]"
  syntax:
    content: public virtual int HashStrength { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>の強さを示す値、<xref:System.Security.Authentication.HashAlgorithmType>ビット単位のアルゴリズム</xref:System.Security.Authentication.HashAlgorithmType></xref:System.Int32>。 有効な値は 128 160 です。"
  overload: System.Net.Security.SslStream.HashStrength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: SslStream.IsAuthenticated
  fullName: System.Net.Security.SslStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Boolean>認証が成功したかどうかを示す値</xref:System.Boolean>。"
  remarks: "クライアントの認証を呼び出して、<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>または<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>メソッド</xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A></xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。 呼び出してサーバーに認証、<xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>または<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッド</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A></xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_3_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_3_1.cs)]"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>認証成功した場合です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Security.SslStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: SslStream.IsEncrypted
  fullName: System.Net.Security.SslStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Boolean>を示す値かどうかこの<xref href=&quot;System.Net.Security.SslStream&quot;></xref>データの暗号化を使用します</xref:System.Boolean>。"
  remarks: "暗号化は、データのプライバシーを保護すること、つまり役に立つことデータは、転送中は、サード パーティが解読できないことを確認してください。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_0_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_0_1.cs)]"
  syntax:
    content: public override bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>データがネットワーク経由で送信される前に暗号化および復号化する場合に着いたときに、リモート エンドポイントです。それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Security.SslStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: SslStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.SslStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Boolean>サーバーとクライアントの両方が認証されているかどうかを示す値</xref:System.Boolean>。"
  remarks: "相互認証は、サーバーが、クライアント認証証明書を提供するときに、サーバーによって指定されます。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_11_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_11_1.cs)]"
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>サーバーが認証されている場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Security.SslStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsServer
  id: IsServer
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsServer
  nameWithType: SslStream.IsServer
  fullName: System.Net.Security.SslStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Boolean>この接続のローカル側が使用するかどうかを示す値<xref href=&quot;System.Net.Security.SslStream&quot;></xref>サーバーとして認証されました</xref:System.Boolean>。"
  remarks: "認証失敗または発生しなかった、このプロパティを返します`false`です。       サーバーで、認証に呼び出して、<xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>または<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッド</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A></xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_13_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_13_1.cs)]"
  syntax:
    content: public override bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、ローカル エンドポイントは、認証された接続のサーバー側として正常に認証されましたそれ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Security.SslStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: SslStream.IsSigned
  fullName: System.Net.Security.SslStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Boolean>をこのストリームを使用して送信されるデータが署名されているかどうかを示す値</xref:System.Boolean>。"
  remarks: "署名によって、データの整合性を保護するデータ、つまりなります、受信者、データが転送中に改ざんされているかどうかを特定します。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_19_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_19_1.cs)]"
  syntax:
    content: public override bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>送信する前に、データが署名されている場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Security.SslStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: SslStream.KeyExchangeAlgorithm
  fullName: System.Net.Security.SslStream.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "これによって使用されるキー交換アルゴリズムを取得<xref href=&quot;System.Net.Security.SslStream&quot;></xref>です。"
  remarks: "このプロパティの値が<xref:System.Security.Authentication.ExchangeAlgorithmType>認証が行われるまで</xref:System.Security.Authentication.ExchangeAlgorithmType>。       キー交換アルゴリズムは、共有キーを生成するための情報を保護します。"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_16_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_16_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
    return:
      type: System.Security.Authentication.ExchangeAlgorithmType
      description: "<xref:System.Security.Authentication.ExchangeAlgorithmType>値</xref:System.Security.Authentication.ExchangeAlgorithmType>。"
  overload: System.Net.Security.SslStream.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.KeyExchangeStrength
  id: KeyExchangeStrength
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: KeyExchangeStrength
  nameWithType: SslStream.KeyExchangeStrength
  fullName: System.Net.Security.SslStream.KeyExchangeStrength
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "このインスタンスで使用されるキー交換アルゴリズムの強度を識別する値を取得します。"
  remarks: "認証が行われるまで、このプロパティの値は&0; です。       このプロパティの値では、一般的なシナリオでは、次のいずれかの: - 512 768-1024 2048"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_5_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_5_1.cs)]"
  syntax:
    content: public virtual int KeyExchangeStrength { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>の強さを示す値、<xref:System.Security.Authentication.ExchangeAlgorithmType>ビット単位のアルゴリズム</xref:System.Security.Authentication.ExchangeAlgorithmType></xref:System.Int32>。"
  overload: System.Net.Security.SslStream.KeyExchangeStrength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.Length
  id: Length
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Length
  nameWithType: SslStream.Length
  fullName: System.Net.Security.SslStream.Length
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "基になるストリームの長さを取得します。"
  remarks: "このプロパティを呼び出すことによって返される値を返します<xref:System.IO.Stream.Length%2A>基になるストリーム</xref:System.IO.Stream.Length%2A>。 基になるストリームがシーク可能でない場合は、このメソッドは通常、例外をスローします。 基になるストリームの実行時の型では、スローされる例外の実行時の型を決定します。"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "A <xref:System.Int64>.</xref:System.Int64>       基になるストリームの長さ。"
  overload: System.Net.Security.SslStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "このプロパティの値を取得することはできません基になるストリームが、 <xref href=&quot;System.Net.Sockets.NetworkStream&quot;></xref>です。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.LocalCertificate
  id: LocalCertificate
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: LocalCertificate
  nameWithType: SslStream.LocalCertificate
  fullName: System.Net.Security.SslStream.LocalCertificate
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "ローカル エンドポイントの認証に使用する証明書を取得します。"
  remarks: ''
  example:
  - "The following code example demonstrates displaying the certificate returned by this property.  \n  \n [!code-cpp[NclSslServerSync#6](~/add/codesnippet/cpp/p-system.net.security.ss_1_1.cpp)]\n [!code-cs[NclSslServerSync#6](~/add/codesnippet/csharp/p-system.net.security.ss_1_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "認証に指定された証明書を表す X509Certificate オブジェクトまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>証明書が指定されていない場合。"
  overload: System.Net.Security.SslStream.LocalCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が失敗したかが発生していません。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.Position
  id: Position
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Position
  nameWithType: SslStream.Position
  fullName: System.Net.Security.SslStream.Position
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得または基になるストリーム内の現在位置を設定します。"
  remarks: "このプロパティを呼び出すことによって返される値を返します<xref:System.IO.Stream.Position%2A>基になるストリーム</xref:System.IO.Stream.Position%2A>。 基になるストリームがシーク可能でない場合は、このメソッドは通常、例外をスローします。 基になるストリームの実行時の型では、スローされる例外の実行時の型を決定します。"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "A <xref:System.Int64>.</xref:System.Int64>       基になるストリームの現在の位置。"
  overload: System.Net.Security.SslStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "このプロパティを設定することはできません。       または、このプロパティの値を取得することはできません基になるストリームが、 <xref href=&quot;System.Net.Sockets.NetworkStream&quot;></xref>です。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: SslStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "このストリームからデータを読み取り、指定した配列に格納します。"
  remarks: "メソッドは、最大数を読み取ります`count`ストリームからバイトに格納`buffer`始点`offset`です。 複数の同時読み取り操作を行うことはできません。       正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 いずれかの呼び出しを認証するために、 <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>、または<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>、<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッド</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A></xref:System.Net.Security.SslStream.AuthenticateAsServer%2A></xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A></xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。       この操作を非同期的に実行するを使用して、<xref:System.Net.Security.SslStream.BeginRead%2A>メソッド</xref:System.Net.Security.SslStream.BeginRead%2A>。"
  example:
  - "The following code example demonstrates reading from an <xref:System.Net.Security.SslStream>.  \n  \n [!code-cpp[NclSslClientSync#6](~/add/codesnippet/cpp/m-system.net.security.ss_2_1.cpp)]\n [!code-cs[NclSslClientSync#6](~/add/codesnippet/csharp/m-system.net.security.ss_2_1.cs)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A<xref:System.Byte>このストリームから読み取ったバイトを受け取る配列</xref:System.Byte>。"
    - id: offset
      type: System.Int32
      description: "A<xref:System.Int32>内の&0; から始まる位置を表す`buffer`このストリームから読み取ったデータの格納を開始する位置</xref:System.Int32>。"
    - id: count
      type: System.Int32
      description: "A<xref:System.Int32>を現在のストリームから読み取るバイト数の最大数を格納している</xref:System.Int32>。"
    return:
      type: System.Int32
      description: "A<xref:System.Int32>読み取られたバイト数を指定する値</xref:System.Int32>。 読み取られるデータがある場合は、0 を返します。"
  overload: System.Net.Security.SslStream.Read*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code>&gt;の長さ<code>buffer</code>です。       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "読み取り操作が失敗しました。 エラーの原因を特定するのには存在する場合は、内部例外を確認します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "実行中の読み取り操作が既に存在します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が行われていません。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: SslStream.ReadTimeout
  fullName: System.Net.Security.SslStream.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得または読み取り操作がブロックのデータ待機時間を設定します。"
  remarks: "このプロパティを呼び出すことによって返される値を返します<xref:System.IO.Stream.ReadTimeout%2A>基になるストリーム</xref:System.IO.Stream.ReadTimeout%2A>。 このプロパティを設定すると、<xref:System.IO.Stream.ReadTimeout%2A>基になるストリームの値が指定した値に設定します</xref:System.IO.Stream.ReadTimeout%2A>。       基になるストリームがある場合、 <xref:System.Net.Sockets.NetworkStream>、ReadTimeout (ミリ秒単位) に設定されている<xref:System.Threading.Timeout.Infinite>既定では読み取ることの操作はタイムアウトにならないようにします</xref:System.Threading.Timeout.Infinite></xref:System.Net.Sockets.NetworkStream>。"
  example:
  - "The following code example demonstrates setting the value of this property.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/p-system.net.security.ss_18_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/p-system.net.security.ss_18_1.cs)]"
  syntax:
    content: public override int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "A<xref:System.Int32>同期読み取り操作が失敗する前に経過した時間の大きさを指定します</xref:System.Int32>。"
  overload: System.Net.Security.SslStream.ReadTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.RemoteCertificate
  id: RemoteCertificate
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: RemoteCertificate
  nameWithType: SslStream.RemoteCertificate
  fullName: System.Net.Security.SslStream.RemoteCertificate
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "リモート エンドポイントの認証に使用する証明書を取得します。"
  remarks: ''
  example:
  - "The following code example demonstrates displaying the certificate returned by this property.  \n  \n [!code-cpp[NclSslServerSync#6](~/add/codesnippet/cpp/p-system.net.security.ss_15_1.cpp)]\n [!code-cs[NclSslServerSync#6](~/add/codesnippet/csharp/p-system.net.security.ss_15_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.X509Certificates.X509Certificate RemoteCertificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "認証に指定された証明書を表す X509Certificate オブジェクトまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>証明書が指定されていない場合。"
  overload: System.Net.Security.SslStream.RemoteCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が失敗したかが発生していません。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: SslStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.SslStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "<xref:System.NotSupportedException>。</xref:System.NotSupportedException>がスローされます。"
  remarks: "このメソッドを呼び出さないでください。 関数は、継承されますが、<xref:System.Net.Security.SslStream>クラス</xref:System.Net.Security.SslStream>でサポートされていません"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "この値は無視されます。"
    - id: origin
      type: System.IO.SeekOrigin
      description: "この値は無視されます。"
    return:
      type: System.Int64
      description: "<xref:System.NotSupportedException>。</xref:System.NotSupportedException>は常にスローします。"
  overload: System.Net.Security.SslStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "シークはサポートされていない<xref href=&quot;System.Net.Security.SslStream&quot;></xref>オブジェクト。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: SslStream.SetLength(Int64)
  fullName: System.Net.Security.SslStream.SetLength(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "基になるストリームの長さを設定します。"
  remarks: "このメソッドを呼び出して<xref:System.IO.Stream.SetLength%2A?displayProperty=fullName>ときに指定した基になるストリームこの<xref:System.Net.Security.SslStream>作成されました</xref:System.Net.Security.SslStream></xref:System.IO.Stream.SetLength%2A?displayProperty=fullName>。"
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "<xref:System.Int64>ストリームの長さを指定する値</xref:System.Int64>。"
  overload: System.Net.Security.SslStream.SetLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.SslProtocol
  id: SslProtocol
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslProtocol
  nameWithType: SslStream.SslProtocol
  fullName: System.Net.Security.SslStream.SslProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "この接続の認証に使用されるセキュリティ プロトコルを示す値を取得します。"
  remarks: "サポートされているセキュリティ プロトコルが指定されたときに、<xref:System.Net.Security.SslStream>を作成します</xref:System.Net.Security.SslStream>。 <xref:System.Security.Authentication.SslProtocols>。</xref:System.Security.Authentication.SslProtocols>を使用して、インスタンスを作成する場合は、コンス トラクターに渡されたセキュリティ プロトコルはありません、 クライアントとサーバーでサポートされるプロトコルに基づく認証に使用される実際のプロトコルが選択されます。"
  example:
  - "The following example displays the security properties of the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_7_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_7_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.SslProtocols SslProtocol { get; }
    return:
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>認証に使用されるプロトコルを表す値</xref:System.Security.Authentication.SslProtocols>。"
  overload: System.Net.Security.SslStream.SslProtocol*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.TransportContext
  id: TransportContext
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: TransportContext
  nameWithType: SslStream.TransportContext
  fullName: System.Net.Security.SslStream.TransportContext
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得、<xref:System.Net.TransportContext>拡張保護を使用する認証のために使用します</xref:System.Net.TransportContext>。"
  syntax:
    content: public System.Net.TransportContext TransportContext { get; }
    return:
      type: System.Net.TransportContext
      description: "<xref:System.Net.TransportContext>拡張保護のために使用するチャネル バインディング トークン (CBT) を含むオブジェクトです</xref:System.Net.TransportContext>。"
  overload: System.Net.Security.SslStream.TransportContext*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.Write(System.Byte[])
  id: Write(System.Byte[])
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Write(Byte[])
  nameWithType: SslStream.Write(Byte[])
  fullName: System.Net.Security.SslStream.Write(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "このストリームに指定されたデータを書き込みます。"
  remarks: "このメソッドは、操作が完了するまでブロックします。 操作が完了するまでブロックを回避するには<xref:System.Net.Security.SslStream.BeginWrite%2A>メソッド</xref:System.Net.Security.SslStream.BeginWrite%2A>。       正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 いずれかの呼び出しを認証するために、 <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>、または<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>、<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッド</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A></xref:System.Net.Security.SslStream.AuthenticateAsServer%2A></xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A></xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。       <xref:System.Net.Security.SslStream>クラスが複数の同時書き込み操作をサポートしていません</xref:System.Net.Security.SslStream>。"
  example:
  - "The following code example demonstrates writing to an authenticated <xref:System.Net.Security.SslStream>.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/m-system.net.security.ss_3_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/m-system.net.security.ss_3_1.cs)]"
  syntax:
    content: public void Write (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A<xref:System.Byte>をストリームに書き込まれたバイトを提供します</xref:System.Byte>。"
  overload: System.Net.Security.SslStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "書き込み操作に失敗しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "実行中の書き込み操作が既に存在します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が行われていません。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: SslStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "指定した数を書き込む<xref:System.Byte>、指定されたバッファーとオフセットを使用して、基になるストリームにします</xref:System.Byte>。"
  remarks: "このメソッドは、操作が完了するまでブロックします。 操作は、操作を完了するまでブロックされないように、完了すると、使用して、<xref:System.Net.Security.SslStream.BeginWrite%2A>メソッド</xref:System.Net.Security.SslStream.BeginWrite%2A>。       正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 いずれかの呼び出しを認証するために、 <xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>、または<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>、<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>メソッド</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A></xref:System.Net.Security.SslStream.AuthenticateAsServer%2A></xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A></xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>。       <xref:System.Net.Security.SslStream>クラスが複数の同時書き込み操作をサポートしていません</xref:System.Net.Security.SslStream>。"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A<xref:System.Byte>をストリームに書き込まれたバイトを提供します</xref:System.Byte>。"
    - id: offset
      type: System.Int32
      description: "A<xref:System.Int32>内の&0; から始まる位置を表す`buffer`ストリームに書き込まれるバイトの読み取りを開始する位置</xref:System.Int32>。"
    - id: count
      type: System.Int32
      description: "A<xref:System.Int32>から読み取るバイト数が含まれる`buffer`</xref:System.Int32>。"
  overload: System.Net.Security.SslStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code>&gt;の長さ<code>buffer</code>です。       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "書き込み操作に失敗しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "実行中の書き込み操作が既に存在します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが閉じられました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "認証が行われていません。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: SslStream.WriteTimeout
  fullName: System.Net.Security.SslStream.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "取得または書き込み操作がブロックのデータ待機時間を設定します。"
  remarks: "このプロパティを呼び出すことによって返される値を返します<xref:System.IO.Stream.WriteTimeout%2A>基になるストリーム</xref:System.IO.Stream.WriteTimeout%2A>。 指定された値の設定、集合演算、<xref:System.IO.Stream.WriteTimeout%2A>基になるストリームの値</xref:System.IO.Stream.WriteTimeout%2A>。       基になるストリームがある場合、 <xref:System.Net.Sockets.NetworkStream>、WriteTimeout (ミリ秒単位) に設定されている<xref:System.Threading.Timeout.Infinite>既定では書き込み操作はタイムアウトにならないようにします</xref:System.Threading.Timeout.Infinite></xref:System.Net.Sockets.NetworkStream>。"
  example:
  - "The following code example demonstrates setting the value of this property.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/p-system.net.security.ss_12_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/p-system.net.security.ss_12_1.cs)]"
  syntax:
    content: public override int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "A<xref:System.Int32>同期書き込み操作が失敗する前に経過した時間の大きさを指定します</xref:System.Int32>。"
  overload: System.Net.Security.SslStream.WriteTimeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: System.Net.Security.AuthenticatedStream
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Authentication.AuthenticationException
  parent: System.Security.Authentication
  isExternal: false
  name: AuthenticationException
  nameWithType: AuthenticationException
  fullName: System.Security.Authentication.AuthenticationException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream)
  nameWithType: SslStream.SslStream(Stream)
  fullName: System.Net.Security.SslStream.SslStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean)
  nameWithType: SslStream.SslStream(Stream,Boolean)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
- uid: System.Net.Security.LocalCertificateSelectionCallback
  parent: System.Net.Security
  isExternal: false
  name: LocalCertificateSelectionCallback
  nameWithType: LocalCertificateSelectionCallback
  fullName: System.Net.Security.LocalCertificateSelectionCallback
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClient(String)
  nameWithType: SslStream.AuthenticateAsClient(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Security.Authentication.SslProtocols
  parent: System.Security.Authentication
  isExternal: true
  name: SslProtocols
  nameWithType: SslProtocols
  fullName: System.Security.Authentication.SslProtocols
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClientAsync(String)
  nameWithType: SslStream.AuthenticateAsClientAsync(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServer(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServerAsync(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate)
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsClient(String,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.CanRead
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanRead
  nameWithType: SslStream.CanRead
  fullName: System.Net.Security.SslStream.CanRead
- uid: System.Net.Security.SslStream.CanSeek
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanSeek
  nameWithType: SslStream.CanSeek
  fullName: System.Net.Security.SslStream.CanSeek
- uid: System.Net.Security.SslStream.CanTimeout
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanTimeout
  nameWithType: SslStream.CanTimeout
  fullName: System.Net.Security.SslStream.CanTimeout
- uid: System.Net.Security.SslStream.CanWrite
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanWrite
  nameWithType: SslStream.CanWrite
  fullName: System.Net.Security.SslStream.CanWrite
- uid: System.Net.Security.SslStream.CheckCertRevocationStatus
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CheckCertRevocationStatus
  nameWithType: SslStream.CheckCertRevocationStatus
  fullName: System.Net.Security.SslStream.CheckCertRevocationStatus
- uid: System.Net.Security.SslStream.CipherAlgorithm
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherAlgorithm
  nameWithType: SslStream.CipherAlgorithm
  fullName: System.Net.Security.SslStream.CipherAlgorithm
- uid: System.Security.Authentication.CipherAlgorithmType
  parent: System.Security.Authentication
  isExternal: true
  name: CipherAlgorithmType
  nameWithType: CipherAlgorithmType
  fullName: System.Security.Authentication.CipherAlgorithmType
- uid: System.Net.Security.SslStream.CipherStrength
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherStrength
  nameWithType: SslStream.CipherStrength
  fullName: System.Net.Security.SslStream.CipherStrength
- uid: System.Net.Security.SslStream.Dispose(System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SslStream.Dispose(Boolean)
  fullName: System.Net.Security.SslStream.Dispose(Boolean)
- uid: System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult)
- uid: System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult)
- uid: System.Net.Security.SslStream.EndRead(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: SslStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndRead(IAsyncResult)
- uid: System.Net.Security.SslStream.EndWrite(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: SslStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndWrite(IAsyncResult)
- uid: System.Net.Security.SslStream.Flush
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Flush()
  nameWithType: SslStream.Flush()
  fullName: System.Net.Security.SslStream.Flush()
- uid: System.Net.Security.SslStream.HashAlgorithm
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashAlgorithm
  nameWithType: SslStream.HashAlgorithm
  fullName: System.Net.Security.SslStream.HashAlgorithm
- uid: System.Security.Authentication.HashAlgorithmType
  parent: System.Security.Authentication
  isExternal: true
  name: HashAlgorithmType
  nameWithType: HashAlgorithmType
  fullName: System.Security.Authentication.HashAlgorithmType
- uid: System.Net.Security.SslStream.HashStrength
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashStrength
  nameWithType: SslStream.HashStrength
  fullName: System.Net.Security.SslStream.HashStrength
- uid: System.Net.Security.SslStream.IsAuthenticated
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: SslStream.IsAuthenticated
  fullName: System.Net.Security.SslStream.IsAuthenticated
- uid: System.Net.Security.SslStream.IsEncrypted
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsEncrypted
  nameWithType: SslStream.IsEncrypted
  fullName: System.Net.Security.SslStream.IsEncrypted
- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: SslStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.SslStream.IsMutuallyAuthenticated
- uid: System.Net.Security.SslStream.IsServer
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsServer
  nameWithType: SslStream.IsServer
  fullName: System.Net.Security.SslStream.IsServer
- uid: System.Net.Security.SslStream.IsSigned
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsSigned
  nameWithType: SslStream.IsSigned
  fullName: System.Net.Security.SslStream.IsSigned
- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: SslStream.KeyExchangeAlgorithm
  fullName: System.Net.Security.SslStream.KeyExchangeAlgorithm
- uid: System.Security.Authentication.ExchangeAlgorithmType
  parent: System.Security.Authentication
  isExternal: true
  name: ExchangeAlgorithmType
  nameWithType: ExchangeAlgorithmType
  fullName: System.Security.Authentication.ExchangeAlgorithmType
- uid: System.Net.Security.SslStream.KeyExchangeStrength
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeStrength
  nameWithType: SslStream.KeyExchangeStrength
  fullName: System.Net.Security.SslStream.KeyExchangeStrength
- uid: System.Net.Security.SslStream.Length
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Length
  nameWithType: SslStream.Length
  fullName: System.Net.Security.SslStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Security.SslStream.LocalCertificate
  parent: System.Net.Security.SslStream
  isExternal: false
  name: LocalCertificate
  nameWithType: SslStream.LocalCertificate
  fullName: System.Net.Security.SslStream.LocalCertificate
- uid: System.Net.Security.SslStream.Position
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Position
  nameWithType: SslStream.Position
  fullName: System.Net.Security.SslStream.Position
- uid: System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: SslStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Read(Byte[],Int32,Int32)
- uid: System.Net.Security.SslStream.ReadTimeout
  parent: System.Net.Security.SslStream
  isExternal: false
  name: ReadTimeout
  nameWithType: SslStream.ReadTimeout
  fullName: System.Net.Security.SslStream.ReadTimeout
- uid: System.Net.Security.SslStream.RemoteCertificate
  parent: System.Net.Security.SslStream
  isExternal: false
  name: RemoteCertificate
  nameWithType: SslStream.RemoteCertificate
  fullName: System.Net.Security.SslStream.RemoteCertificate
- uid: System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: SslStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.SslStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Net.Security.SslStream.SetLength(System.Int64)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: SslStream.SetLength(Int64)
  fullName: System.Net.Security.SslStream.SetLength(Int64)
- uid: System.Net.Security.SslStream.SslProtocol
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslProtocol
  nameWithType: SslStream.SslProtocol
  fullName: System.Net.Security.SslStream.SslProtocol
- uid: System.Net.Security.SslStream.TransportContext
  parent: System.Net.Security.SslStream
  isExternal: false
  name: TransportContext
  nameWithType: SslStream.TransportContext
  fullName: System.Net.Security.SslStream.TransportContext
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Security.SslStream.Write(System.Byte[])
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Write(Byte[])
  nameWithType: SslStream.Write(Byte[])
  fullName: System.Net.Security.SslStream.Write(Byte[])
- uid: System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: SslStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Write(Byte[],Int32,Int32)
- uid: System.Net.Security.SslStream.WriteTimeout
  parent: System.Net.Security.SslStream
  isExternal: false
  name: WriteTimeout
  nameWithType: SslStream.WriteTimeout
  fullName: System.Net.Security.SslStream.WriteTimeout
- uid: System.Net.Security.SslStream.#ctor*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream
  nameWithType: SslStream.SslStream
- uid: System.Net.Security.SslStream.AuthenticateAsClient*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClient
  nameWithType: SslStream.AuthenticateAsClient
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClientAsync
  nameWithType: SslStream.AuthenticateAsClientAsync
- uid: System.Net.Security.SslStream.AuthenticateAsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServer
  nameWithType: SslStream.AuthenticateAsServer
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServerAsync
  nameWithType: SslStream.AuthenticateAsServerAsync
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsClient
  nameWithType: SslStream.BeginAuthenticateAsClient
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsServer
  nameWithType: SslStream.BeginAuthenticateAsServer
- uid: System.Net.Security.SslStream.BeginRead*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginRead
  nameWithType: SslStream.BeginRead
- uid: System.Net.Security.SslStream.BeginWrite*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginWrite
  nameWithType: SslStream.BeginWrite
- uid: System.Net.Security.SslStream.CanRead*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanRead
  nameWithType: SslStream.CanRead
- uid: System.Net.Security.SslStream.CanSeek*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanSeek
  nameWithType: SslStream.CanSeek
- uid: System.Net.Security.SslStream.CanTimeout*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanTimeout
  nameWithType: SslStream.CanTimeout
- uid: System.Net.Security.SslStream.CanWrite*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanWrite
  nameWithType: SslStream.CanWrite
- uid: System.Net.Security.SslStream.CheckCertRevocationStatus*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CheckCertRevocationStatus
  nameWithType: SslStream.CheckCertRevocationStatus
- uid: System.Net.Security.SslStream.CipherAlgorithm*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherAlgorithm
  nameWithType: SslStream.CipherAlgorithm
- uid: System.Net.Security.SslStream.CipherStrength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherStrength
  nameWithType: SslStream.CipherStrength
- uid: System.Net.Security.SslStream.Dispose*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Dispose
  nameWithType: SslStream.Dispose
- uid: System.Net.Security.SslStream.EndAuthenticateAsClient*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsClient
  nameWithType: SslStream.EndAuthenticateAsClient
- uid: System.Net.Security.SslStream.EndAuthenticateAsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsServer
  nameWithType: SslStream.EndAuthenticateAsServer
- uid: System.Net.Security.SslStream.EndRead*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndRead
  nameWithType: SslStream.EndRead
- uid: System.Net.Security.SslStream.EndWrite*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndWrite
  nameWithType: SslStream.EndWrite
- uid: System.Net.Security.SslStream.Flush*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Flush
  nameWithType: SslStream.Flush
- uid: System.Net.Security.SslStream.HashAlgorithm*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashAlgorithm
  nameWithType: SslStream.HashAlgorithm
- uid: System.Net.Security.SslStream.HashStrength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashStrength
  nameWithType: SslStream.HashStrength
- uid: System.Net.Security.SslStream.IsAuthenticated*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: SslStream.IsAuthenticated
- uid: System.Net.Security.SslStream.IsEncrypted*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsEncrypted
  nameWithType: SslStream.IsEncrypted
- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: SslStream.IsMutuallyAuthenticated
- uid: System.Net.Security.SslStream.IsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsServer
  nameWithType: SslStream.IsServer
- uid: System.Net.Security.SslStream.IsSigned*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsSigned
  nameWithType: SslStream.IsSigned
- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: SslStream.KeyExchangeAlgorithm
- uid: System.Net.Security.SslStream.KeyExchangeStrength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeStrength
  nameWithType: SslStream.KeyExchangeStrength
- uid: System.Net.Security.SslStream.Length*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Length
  nameWithType: SslStream.Length
- uid: System.Net.Security.SslStream.LocalCertificate*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: LocalCertificate
  nameWithType: SslStream.LocalCertificate
- uid: System.Net.Security.SslStream.Position*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Position
  nameWithType: SslStream.Position
- uid: System.Net.Security.SslStream.Read*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Read
  nameWithType: SslStream.Read
- uid: System.Net.Security.SslStream.ReadTimeout*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: ReadTimeout
  nameWithType: SslStream.ReadTimeout
- uid: System.Net.Security.SslStream.RemoteCertificate*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: RemoteCertificate
  nameWithType: SslStream.RemoteCertificate
- uid: System.Net.Security.SslStream.Seek*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Seek
  nameWithType: SslStream.Seek
- uid: System.Net.Security.SslStream.SetLength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SetLength
  nameWithType: SslStream.SetLength
- uid: System.Net.Security.SslStream.SslProtocol*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslProtocol
  nameWithType: SslStream.SslProtocol
- uid: System.Net.Security.SslStream.TransportContext*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: TransportContext
  nameWithType: SslStream.TransportContext
- uid: System.Net.Security.SslStream.Write*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Write
  nameWithType: SslStream.Write
- uid: System.Net.Security.SslStream.WriteTimeout*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: WriteTimeout
  nameWithType: SslStream.WriteTimeout
