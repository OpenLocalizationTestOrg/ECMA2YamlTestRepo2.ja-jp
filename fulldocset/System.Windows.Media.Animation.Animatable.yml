### YamlMime:ManagedReference
items:
- uid: System.Windows.Media.Animation.Animatable
  id: Animatable
  children:
  - System.Windows.Media.Animation.Animatable.#ctor
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.Clone
  - System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  - System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  - System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  langs:
  - csharp
  name: Animatable
  nameWithType: Animatable
  fullName: System.Windows.Media.Animation.Animatable
  type: Class
  summary: "アニメーションのサポートを提供する抽象クラスです。"
  syntax:
    content: 'public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  implements:
  - System.Windows.Media.Animation.IAnimatable
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.CloneCore(System.Windows.Freezable)
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.CreateInstanceCore
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.#ctor
  id: '#ctor'
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: Animatable()
  nameWithType: Animatable.Animatable()
  fullName: System.Windows.Media.Animation.Animatable.Animatable()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref>クラスです。"
  syntax:
    content: protected Animatable ();
    parameters: []
  overload: System.Windows.Media.Animation.Animatable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "適用される、 <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;> </xref>を指定した<xref href=&quot;System.Windows.DependencyProperty&quot;></xref>です。 プロパティが既にアニメーション化されている場合、 <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref>ハンドオフ動作が使用されます。"
  remarks: "このメソッドを使用して、プロパティからクロックを削除しても、クロックは停止しません注意してください。"
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "アニメーション化するプロパティです。"
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "指定したプロパティをアニメーション化するときに使用するクロック。 場合`clock`は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、すべてのアニメーションは、指定したプロパティから削除 (しますが、停止されません)。"
  overload: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "適用される、 <xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;> </xref>を指定した<xref href=&quot;System.Windows.DependencyProperty&quot;></xref>です。 プロパティが既にアニメーション化されている場合、指定した<xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref>を使用します。"
  remarks: "このメソッドを使用して、プロパティからクロックを削除しても、クロックは停止しませんに注意してください。      ## 使用して、作成 HandoffBehavior を適用する、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior><xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前そのプロパティに関連付けられているオブジェクトがシステム リソースを消費引き続き; タイミング システムはこれらの時計を自動的に削除されません</xref:System.Windows.Media.Animation.Clock></xref:System.Windows.Media.Animation.HandoffBehavior></xref:System.Windows.Media.Animation.HandoffBehavior></xref:System.Windows.Media.Animation.AnimationClock></xref:System.Windows.Media.Animation.AnimationTimeline></xref:System.Windows.Media.Animation.Storyboard>。       使用してクロックの数が多いを適用するときに、パフォーマンスの問題を回避する<xref:System.Windows.Media.Animation.HandoffBehavior>、完了した後、アニメーションのプロパティから作成クロックを削除する必要があります</xref:System.Windows.Media.Animation.HandoffBehavior>。 クロックを削除するいくつかの方法はあります。      、すべてのクロック プロパティからを削除するには使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション オブジェクトのメソッド</xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29></xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>。 最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null`&2; つ目として。 これにより、すべてのアニメーション クロックが、プロパティから削除されます。      -特定<xref:System.Windows.Media.Animation.AnimationClock>のクロックの一覧から、使用して<xref:System.Windows.Media.Animation.Clock.Controller%2A><xref:System.Windows.Media.Animation.AnimationClock><xref:System.Windows.Media.Animation.ClockController><xref:System.Windows.Media.Animation.ClockController.Remove%2A><xref:System.Windows.Media.Animation.ClockController>。</xref:System.Windows.Media.Animation.ClockController>のメソッド</xref:System.Windows.Media.Animation.ClockController.Remove%2A>を呼び出して、</xref:System.Windows.Media.Animation.ClockController>取得する</xref:System.Windows.Media.Animation.AnimationClock>プロパティ</xref:System.Windows.Media.Animation.Clock.Controller%2A></xref:System.Windows.Media.Animation.AnimationClock>を削除するには これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー</xref:System.Windows.Media.Animation.Clock.Completed> 。 唯一のルート クロックできますで制御されることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`</xref:System.Windows.Media.Animation.Clock.Controller%2A></xref:System.Windows.Media.Animation.ClockController>。 なお、 <xref:System.Windows.Media.Animation.Clock.Completed>、クロックの有効期間が forever の場合、イベントは呼び出されません</xref:System.Windows.Media.Animation.Clock.Completed>。  ユーザーの必要がありますを<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。</xref:System.Windows.Media.Animation.ClockController.Remove%2A>を呼び出すタイミングを決定する場合は、       これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックは切断されても、ガベージ コレクションします。       クロック オブジェクトに関する詳細については、次を参照してください。、[アニメーションおよびタイミング システムの概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - The following example shows how to apply animation clocks using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "アニメーション化するプロパティです。"
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "指定したプロパティをアニメーション化するときに使用するクロック。 場合`handoffBehavior`は<xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref>と`clock`は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、すべてのアニメーションは、指定したプロパティから削除 (しますが、停止されません)。 場合`handoffBehavior`は<xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref>時計と<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、このメソッドは影響を与えません。"
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "新しいアニメーションは既にプロパティの値に影響する、現在のアニメーションと対話する方法を指定する値。"
  overload: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "指定されたアニメーションを適用<xref href=&quot;System.Windows.DependencyProperty&quot;></xref>です。 次のフレームがレンダリングされるときに、アニメーションが開始されます。 指定したプロパティが既にアニメーション化されている場合、 <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref>ハンドオフ動作が使用されます。"
  remarks: "アニメーションがある場合、 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>0 より大きい値である、期間が次のフレームがレンダリング時から経過した後に、アニメーションが開始します</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>。"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "アニメーション化するプロパティです。"
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "指定したプロパティをアニメーション化するために使用するアニメーション。       場合、アニメーションの<xref:System.Windows.Media.Animation.Timeline.BeginTime*>は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>と、現在のアニメーションが削除され、プロパティの現在の値が保持されます</xref:System.Windows.Media.Animation.Timeline.BeginTime*>。       場合`animation`は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、すべてのアニメーションがプロパティから削除され、プロパティの値がその基本値に戻します。"
  overload: System.Windows.Media.Animation.Animatable.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "指定されたアニメーションを適用<xref href=&quot;System.Windows.DependencyProperty&quot;></xref>です。 次のフレームがレンダリングされるときに、アニメーションが開始されます。 指定したプロパティが既にアニメーション化されている場合、指定した<xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref>を使用します。"
  remarks: "アニメーションがある場合、 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>0 より大きい値である、期間が次のフレームがレンダリング時から経過した後に、アニメーションが開始します</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>。      ## 使用して、作成 HandoffBehavior を適用する、 <xref:System.Windows.Media.Animation.Storyboard>、 <xref:System.Windows.Media.Animation.AnimationTimeline>、または<xref:System.Windows.Media.Animation.AnimationClock>を使用してプロパティを<xref:System.Windows.Media.Animation.HandoffBehavior><xref:System.Windows.Media.Animation.HandoffBehavior>、any<xref:System.Windows.Media.Animation.Clock>以前そのプロパティに関連付けられているオブジェクトがシステム リソースを消費引き続き; タイミング システムはこれらの時計を自動的に削除されません</xref:System.Windows.Media.Animation.Clock></xref:System.Windows.Media.Animation.HandoffBehavior></xref:System.Windows.Media.Animation.HandoffBehavior></xref:System.Windows.Media.Animation.AnimationClock></xref:System.Windows.Media.Animation.AnimationTimeline></xref:System.Windows.Media.Animation.Storyboard>。       使用してクロックの数が多いを適用するときに、パフォーマンスの問題を回避する<xref:System.Windows.Media.Animation.HandoffBehavior>、完了した後、アニメーションのプロパティから作成クロックを削除する必要があります</xref:System.Windows.Media.Animation.HandoffBehavior>。 クロックを削除するいくつかの方法はあります。      、すべてのクロック プロパティからを削除するには使用、<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>または<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>アニメーション オブジェクトのメソッド</xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29></xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>。 最初のパラメーターとしてアニメーション化されているプロパティを指定し、 `null`&2; つ目として。 これにより、すべてのアニメーション クロックが、プロパティから削除されます。      -特定<xref:System.Windows.Media.Animation.AnimationClock>のクロックの一覧から、使用して<xref:System.Windows.Media.Animation.Clock.Controller%2A><xref:System.Windows.Media.Animation.AnimationClock><xref:System.Windows.Media.Animation.ClockController><xref:System.Windows.Media.Animation.ClockController.Remove%2A><xref:System.Windows.Media.Animation.ClockController>。</xref:System.Windows.Media.Animation.ClockController>のメソッド</xref:System.Windows.Media.Animation.ClockController.Remove%2A>を呼び出して、</xref:System.Windows.Media.Animation.ClockController>取得する</xref:System.Windows.Media.Animation.AnimationClock>プロパティ</xref:System.Windows.Media.Animation.Clock.Controller%2A></xref:System.Windows.Media.Animation.AnimationClock>を削除するには これは、通常、<xref:System.Windows.Media.Animation.Clock.Completed>クロックのイベント ハンドラー</xref:System.Windows.Media.Animation.Clock.Completed> 。 唯一のルート クロックできますで制御されることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>子クロックのプロパティを返します`null`</xref:System.Windows.Media.Animation.Clock.Controller%2A></xref:System.Windows.Media.Animation.ClockController>。 なお、 <xref:System.Windows.Media.Animation.Clock.Completed>、クロックの有効期間が forever の場合、イベントは呼び出されません</xref:System.Windows.Media.Animation.Clock.Completed>。  ユーザーの必要がありますを<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。</xref:System.Windows.Media.Animation.ClockController.Remove%2A>を呼び出すタイミングを決定する場合は、       これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックは切断されても、ガベージ コレクションします。       クロック オブジェクトに関する詳細については、次を参照してください。、[アニメーションおよびタイミング システムの概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example shows how to apply animations using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.  \n  \n [!code-cpp[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/cpp/animagionproperty_cpp/InteractiveExample.cpp#interactiveanimationexamplewholepage)]\n [!code-cs[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/csharp/animateproperty_csharp/InteractiveExample.cs#interactiveanimationexamplewholepage)]\n [!code-vb[animateproperty#InteractiveAnimationExampleWholePage](~/add/codesnippet/visualbasic/animateproperty_vb/InteractiveExample.vb#interactiveanimationexamplewholepage)]"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "アニメーション化するプロパティです。"
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "指定したプロパティをアニメーション化するために使用するアニメーション。       場合`handoffBehavior`は<xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref>およびアニメーションの<> *> は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>と、現在のアニメーションが削除され、プロパティの現在の値が保持されます。     場合`handoffBehavior`は<xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;></xref>と`animation`は、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>リファレンス、すべてのアニメーションは、プロパティから削除されますおよびプロパティの値がその基本値に戻ります。     場合`handoffBehavior`は<xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref>、このメソッドは効果がなく場合は、アニメーションやその<> *> は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "新しいアニメーションは既にプロパティの値に影響する、現在のアニメーションと対話する方法を指定する値。"
  overload: System.Windows.Media.Animation.Animatable.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.Clone
  id: Clone
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: Clone()
  nameWithType: Animatable.Clone()
  fullName: System.Windows.Media.Animation.Animatable.Clone()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "この変更可能な複製を作成<xref href=&quot;System.Windows.Media.Animation.Animatable&quot;> </xref>、このオブジェクトの値の詳細コピーを作成します。 このオブジェクトの依存関係プロパティをコピーするときにこのメソッドは、リソースの参照とデータ バインディングをコピー (ただし、解決できなくなる可能性があります)、アニメーションやその現在の値ではありません。"
  remarks: "Clone メソッドの変更可能なコピーを生成するために使用できます固定<xref:System.Windows.Freezable>オブジェクト</xref:System.Windows.Freezable>。 便宜上、このメソッドは、継承されたシャドウ<xref:System.Windows.Freezable.Clone%2A>厳密に型指定された実装を提供するメソッド</xref:System.Windows.Freezable.Clone%2A>。"
  syntax:
    content: public System.Windows.Media.Animation.Animatable Clone ();
    parameters: []
    return:
      type: System.Windows.Media.Animation.Animatable
      description: "このインスタンスの変更可能な複製。 返される複製は、現在のオブジェクトのディープ コピーでは効果的です。 複製の<> *> プロパティは* *false** です。"
  overload: System.Windows.Media.Animation.Animatable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  id: FreezeCore(System.Boolean)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: FreezeCore(Boolean)
  nameWithType: Animatable.FreezeCore(Boolean)
  fullName: System.Windows.Media.Animation.Animatable.FreezeCore(Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "この<xref href=&quot;System.Windows.Media.Animation.Animatable&quot;></xref>不可能な状態のオブジェクトまたはかどうか、変更不可能にできるを判断します。"
  remarks: "このメソッドは**false**とき<xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A>は**true**</xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A> 。       直接 (呼び出す場合を除きますベースの実装で) このメソッドを呼び出さないでください。 このメソッドがによって内部的に呼び出されます<xref:System.Windows.Freezable.CanFreeze%2A>(で`isChecking`と等しい`true`) および<xref:System.Windows.Freezable.Freeze%2A>(で`isChecking`と等しい`false`).</xref:System.Windows.Freezable.Freeze%2A> </xref:System.Windows.Freezable.CanFreeze%2A>"
  syntax:
    content: protected override bool FreezeCore (bool isChecking);
    parameters:
    - id: isChecking
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメソッドは、このインスタンスが固定されるかどうかを簡単に確認する必要がある場合。 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>このメソッドが呼び出されたときに、このインスタンスは自身を固定実際にする必要がある場合。"
    return:
      type: System.Boolean
      description: "場合<code> isChecking </code>は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>、このメソッドが戻る<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、この<xref href=&quot;System.Windows.Media.Animation.Animatable&quot;></xref>できます変更不可能にできる、または<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>にできない変更不可能になっている場合。       場合<code> isChecking </code>は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>、このメソッドが戻る<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合場合に、この<xref href=&quot;System.Windows.Media.Animation.Animatable&quot;></xref>は変更できますが、または<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>にできない不可能な状態で、このオブジェクトの固定された状態を変更する始めたことの副作用の場合。"
  overload: System.Windows.Media.Animation.Animatable.FreezeCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  id: GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: Animatable.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(DependencyProperty)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "指定したアニメーション化されていない値を返します<xref href=&quot;System.Windows.DependencyProperty&quot;></xref>です。"
  remarks: "指定したプロパティをアニメーション化しない場合、このメソッドは<xref:System.Windows.DependencyObject.GetValue%2A>。</xref:System.Windows.DependencyObject.GetValue%2A>と同じ結果を返します"
  example:
  - "In the following example, the non-animated values of animated properties are retrieved and displayed.  \n  \n [!code-cs[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/add/codesnippet/csharp/TimingBehavior_csharp/GetAnimationBaseValueExample.cs#getanimationbasevalueexamplewholepage)]\n [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/add/codesnippet/visualbasic/timingbehavior_vb/getanimationbasevalueexample.vb#getanimationbasevalueexamplewholepage)]"
  syntax:
    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "基本 (アニメーション化されていない) 値を取得するプロパティを識別します。"
    return:
      type: System.Object
      description: "指定したプロパティのアニメーション化されていない場合に返される値。"
  overload: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  id: HasAnimatedProperties
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
  fullName: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "示す値を取得するかどうか&1; つまたは複数<xref href=&quot;System.Windows.Media.Animation.AnimationClock&quot;></xref>オブジェクトはこのオブジェクトの依存関係プロパティのいずれかに関連付けられています。"
  remarks: "このプロパティは、このオブジェクトがアニメーション化されたサブオブジェクトを含むかどうかを示すものではありません。"
  syntax:
    content: public bool HasAnimatedProperties { get; }
    return:
      type: System.Boolean
      description: '**true** if one or more <xref href="System.Windows.Media.Animation.AnimationClock"></xref> objects is associated with any of this object''s dependency properties; otherwise, **false**.'
  overload: System.Windows.Media.Animation.Animatable.HasAnimatedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  id: ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Animatable
  langs:
  - csharp
  name: ShouldSerializeStoredWeakReference(DependencyObject)
  nameWithType: Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  fullName: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "依存関係オブジェクトをシリアル化するかどうかを指定します。"
  remarks: "<xref:System.ComponentModel.TypeDescriptor>クラスでは、ShouldSerializeStoredWeakReference メソッドを使用して、プロパティをシリアル化するかどうかを判断します</xref:System.ComponentModel.TypeDescriptor>。"
  syntax:
    content: public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "依存関係プロパティ システムに参加しているオブジェクトを表します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>to serialize <code>target</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Freezable
  isExternal: false
  name: System.Windows.Freezable
- uid: System.Windows.Media.Animation.Animatable.#ctor
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Animatable()
  nameWithType: Animatable.Animatable()
  fullName: System.Windows.Media.Animation.Animatable.Animatable()
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Media.Animation.AnimationClock
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationClock
  nameWithType: AnimationClock
  fullName: System.Windows.Media.Animation.AnimationClock
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline)
- uid: System.Windows.Media.Animation.AnimationTimeline
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationTimeline
  nameWithType: AnimationTimeline
  fullName: System.Windows.Media.Animation.AnimationTimeline
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Animatable.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
- uid: System.Windows.Media.Animation.Animatable.Clone
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Clone()
  nameWithType: Animatable.Clone()
  fullName: System.Windows.Media.Animation.Animatable.Clone()
- uid: System.Windows.Media.Animation.Animatable
  parent: System.Windows.Media.Animation
  isExternal: false
  name: Animatable
  nameWithType: Animatable
  fullName: System.Windows.Media.Animation.Animatable
- uid: System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: FreezeCore(Boolean)
  nameWithType: Animatable.FreezeCore(Boolean)
  fullName: System.Windows.Media.Animation.Animatable.FreezeCore(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: Animatable.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(DependencyProperty)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
  fullName: System.Windows.Media.Animation.Animatable.HasAnimatedProperties
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ShouldSerializeStoredWeakReference(DependencyObject)
  nameWithType: Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
  fullName: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Media.Animation.Animatable.#ctor*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Animatable
  nameWithType: Animatable.Animatable
- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ApplyAnimationClock
  nameWithType: Animatable.ApplyAnimationClock
- uid: System.Windows.Media.Animation.Animatable.BeginAnimation*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: BeginAnimation
  nameWithType: Animatable.BeginAnimation
- uid: System.Windows.Media.Animation.Animatable.Clone*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: Clone
  nameWithType: Animatable.Clone
- uid: System.Windows.Media.Animation.Animatable.FreezeCore*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: FreezeCore
  nameWithType: Animatable.FreezeCore
- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: GetAnimationBaseValue
  nameWithType: Animatable.GetAnimationBaseValue
- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: Animatable.HasAnimatedProperties
- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference*
  parent: System.Windows.Media.Animation.Animatable
  isExternal: false
  name: ShouldSerializeStoredWeakReference
  nameWithType: Animatable.ShouldSerializeStoredWeakReference
