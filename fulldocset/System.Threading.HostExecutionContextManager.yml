### YamlMime:ManagedReference
items:
- uid: System.Threading.HostExecutionContextManager
  id: HostExecutionContextManager
  children:
  - System.Threading.HostExecutionContextManager.#ctor
  - System.Threading.HostExecutionContextManager.Capture
  - System.Threading.HostExecutionContextManager.Revert(System.Object)
  - System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)
  langs:
  - csharp
  name: HostExecutionContextManager
  nameWithType: HostExecutionContextManager
  fullName: System.Threading.HostExecutionContextManager
  type: Class
  summary: "フロー、または、実行コンテキストの移行に参加する共通言語ランタイムのホストを可能にする機能を提供します。"
  remarks: "場合、現在<xref:System.AppDomainManager>で HostExecutionContextManager への参照がその<xref:System.AppDomainManager.HostExecutionContextManager%2A>プロパティを共通言語ランタイム マネージャーを呼び出し、毎回の呼び出しを<xref:System.Threading.ExecutionContext.Run%2A?displayProperty=fullName>メソッド発生すると、ホストが、実行コンテキストのフローに参加できるようにする</xref:System.Threading.ExecutionContext.Run%2A?displayProperty=fullName></xref:System.AppDomainManager.HostExecutionContextManager%2A></xref:System.AppDomainManager>。"
  syntax:
    content: public class HostExecutionContextManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.#ctor
  id: '#ctor'
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: HostExecutionContextManager()
  nameWithType: HostExecutionContextManager.HostExecutionContextManager()
  fullName: System.Threading.HostExecutionContextManager.HostExecutionContextManager()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Threading.HostExecutionContextManager&quot;> </xref>クラスです。"
  syntax:
    content: public HostExecutionContextManager ();
    parameters: []
  overload: System.Threading.HostExecutionContextManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.Capture
  id: Capture
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: Capture()
  nameWithType: HostExecutionContextManager.Capture()
  fullName: System.Threading.HostExecutionContextManager.Capture()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "現在のスレッドからホストの実行コンテキストをキャプチャします。"
  remarks: "<xref:System.Threading.HostExecutionContext>を表すセーフ ハンドルを使用して作成された、`IUnknown`現在のスレッドを実行しているホストへのポインター</xref:System.Threading.HostExecutionContext> 。"
  syntax:
    content: public virtual System.Threading.HostExecutionContext Capture ();
    parameters: []
    return:
      type: System.Threading.HostExecutionContext
      description: "A <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref>を現在のスレッドのホストの実行コンテキストを表すオブジェクト。"
  overload: System.Threading.HostExecutionContextManager.Capture*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.Revert(System.Object)
  id: Revert(System.Object)
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: Revert(Object)
  nameWithType: HostExecutionContextManager.Revert(Object)
  fullName: System.Threading.HostExecutionContextManager.Revert(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "ホストの実行コンテキストを以前の状態に復元します。"
  remarks: '`previousState`オブジェクトによって返される、<xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A>メソッド</xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A>。'
  syntax:
    content: public virtual void Revert (object previousState);
    parameters:
    - id: previousState
      type: System.Object
      description: "戻すには以前のコンテキスト状態。"
  overload: System.Threading.HostExecutionContextManager.Revert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>previousState</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>previousState</code>現在のスレッドは作成されませんでした。       - または -<code>previousState</code>が最新の状態を<xref href=&quot;System.Threading.HostExecutionContext&quot;></xref>です。"
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)
  id: SetHostExecutionContext(System.Threading.HostExecutionContext)
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: SetHostExecutionContext(HostExecutionContext)
  nameWithType: HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
  fullName: System.Threading.HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "指定したホストの実行コンテキストを現在のホストの実行コンテキストを設定します。"
  remarks: "SetHostExecutionContext メソッドは、現在<xref:System.Threading.HostExecutionContext>。</xref:System.Threading.HostExecutionContext>のホストの実行コンテキストを設定します。  A<xref:System.Threading.HostExecutionContext>でこのメソッドのパラメーターとして渡すことはできません別 SetHostExecutionContext メソッドの呼び出しに引数として使用されている</xref:System.Threading.HostExecutionContext>。 代わりに、使用、<xref:System.Threading.HostExecutionContext.CreateCopy%2A?displayProperty=fullName>のコピーを作成する方法、<xref:System.Threading.HostExecutionContext>オブジェクトし、コピーを使用して、ホストの実行コンテキストを設定します</xref:System.Threading.HostExecutionContext></xref:System.Threading.HostExecutionContext.CreateCopy%2A?displayProperty=fullName>。       呼び出す、<xref:System.Threading.HostExecutionContextManager.Revert%2A>このメソッドによって返されるオブジェクトを使用して復元する方法、<xref:System.Threading.HostExecutionContext>を以前の状態</xref:System.Threading.HostExecutionContext></xref:System.Threading.HostExecutionContextManager.Revert%2A>。"
  syntax:
    content: public virtual object SetHostExecutionContext (System.Threading.HostExecutionContext hostExecutionContext);
    parameters:
    - id: hostExecutionContext
      type: System.Threading.HostExecutionContext
      description: "<xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref>を設定します。"
    return:
      type: System.Object
      description: "オブジェクトを復元するため、 <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref>を以前の状態。"
  overload: System.Threading.HostExecutionContextManager.SetHostExecutionContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>hostExecutionContext</code>キャプチャ操作で取得されませんでした。       - または -<code>hostExecutionContext</code>以前 SetHostExecutionContext メソッドの呼び出しに引数がされました。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Threading.HostExecutionContextManager.#ctor
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: HostExecutionContextManager()
  nameWithType: HostExecutionContextManager.HostExecutionContextManager()
  fullName: System.Threading.HostExecutionContextManager.HostExecutionContextManager()
- uid: System.Threading.HostExecutionContextManager.Capture
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Capture()
  nameWithType: HostExecutionContextManager.Capture()
  fullName: System.Threading.HostExecutionContextManager.Capture()
- uid: System.Threading.HostExecutionContext
  parent: System.Threading
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
- uid: System.Threading.HostExecutionContextManager.Revert(System.Object)
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Revert(Object)
  nameWithType: HostExecutionContextManager.Revert(Object)
  fullName: System.Threading.HostExecutionContextManager.Revert(Object)
- uid: System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: SetHostExecutionContext(HostExecutionContext)
  nameWithType: HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
  fullName: System.Threading.HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
- uid: System.Threading.HostExecutionContextManager.#ctor*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: HostExecutionContextManager
  nameWithType: HostExecutionContextManager.HostExecutionContextManager
- uid: System.Threading.HostExecutionContextManager.Capture*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Capture
  nameWithType: HostExecutionContextManager.Capture
- uid: System.Threading.HostExecutionContextManager.Revert*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Revert
  nameWithType: HostExecutionContextManager.Revert
- uid: System.Threading.HostExecutionContextManager.SetHostExecutionContext*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: SetHostExecutionContext
  nameWithType: HostExecutionContextManager.SetHostExecutionContext
