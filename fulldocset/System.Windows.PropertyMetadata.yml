### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "登録時の条件など、特定の型に適用されるときに、依存関係プロパティの動作を定義します。"
  remarks: "プロパティのメタデータを定義しを呼び出すときに、依存関係プロパティの登録中に使用される、<xref:System.Windows.DependencyProperty.Register%2A>メソッド (または、アタッチされるプロパティまたは読み取り専用の依存関係プロパティのバリエーション) 以降の呼び出し時に元の所有者の登録、<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>メソッド</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.Register%2A>。 <xref:System.Windows.DependencyProperty.AddOwner%2A>プロパティのメタデータを受け取ります。</xref:System.Windows.DependencyProperty.AddOwner%2A>       このクラスは、それらの各呼び出しで使用できる具象基底クラスです。 ただしは、ごく一般的<xref:System.Windows.FrameworkPropertyMetadata>。</xref:System.Windows.FrameworkPropertyMetadata>などの派生クラスのいずれかを使用してメタデータを指定するには これらの派生クラスを検出するか、いくつか、プロパティに動作でのみ実装されているシステムとレイアウトを有効にするのに便利ですが、ブール型プロパティ値として実行されます。 詳細なメタデータをサポートする、[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]フレームワーク レベル。       このクラスのいくつかのプロパティは、オブジェクト モデルへの読み取り/書き込みが<xref:System.Windows.DependencyProperty.Register%2A>や<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.Register%2A>などのプロパティのシステム操作で使用されているインスタンスの前にのみ記述できます これらの各プロパティ コンス トラクターによって設定されてもでしたが、公開されるように<xref:System.Windows.PropertyMetadata.Merge%2A>メソッドの実装が設定できます</xref:System.Windows.PropertyMetadata.Merge%2A>。      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a>## XAML テキストの使用方法、この型と、この型のメンバーは、通常は使用されません[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref>クラスです。"
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref>にこのメタデータが適用される依存関係プロパティの指定された既定値を持つクラス。"
  remarks: "指定された値の型`defaultValue`一致する必要がありますか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。 (この不一致は実行時の例外が発生) コンパイル時に、不一致が検出できないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。       パラメーターなしのコンス トラクターごとの既定値は、`defaultValue`の<xref:System.Windows.DependencyProperty.UnsetValue>は指定できません</xref:System.Windows.DependencyProperty.UnsetValue>。 しようとすると、例外が発生します。"
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "いくつか特定の型の値として通常提供される、依存関係プロパティを指定する既定値です。"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>値に設定することはできません<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> 、指定したクラス<xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref>の参照を実装します。"
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムによって呼び出されるハンドラーの実装への参照。"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref>指定された既定値を持つクラスと<xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref>の参照を実装します。"
  remarks: "指定された値の型`defaultValue`一致する必要がありますか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。 (この不一致は実行時の例外が発生) コンパイル時に、不一致が検出できないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。       パラメーターなしのコンス トラクターごとの既定値は、`defaultValue`の<xref:System.Windows.DependencyProperty.UnsetValue>は指定できません</xref:System.Windows.DependencyProperty.UnsetValue>。 しようとすると、例外が発生します。"
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "依存関係プロパティをいくつか特定の型の値として提供される通常の既定値。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムによって呼び出されるハンドラーの実装への参照。"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>値に設定することはできません<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref>コールバックと指定された既定値を持つクラス。"
  remarks: "指定する場合、<xref:System.Windows.CoerceValueCallback>ではなく、<xref:System.Windows.PropertyChangedCallback>を渡すことができます`null`の`propertyChangedCallback`パラメーター</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback> 。       指定された値の型`defaultValue`一致する必要がありますか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。 (この不一致は実行時の例外が発生) コンパイル時に、不一致が検出できないために、既定値の型のメタデータと適用される依存関係プロパティの型の間の不一致は、デバッグが困難できます。       パラメーターなしのコンス トラクターごとの既定値は、`defaultValue`の<xref:System.Windows.DependencyProperty.UnsetValue>は指定できません</xref:System.Windows.DependencyProperty.UnsetValue>。 しようとすると、例外が発生します。"
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "依存関係プロパティをいくつか特定の型の値として提供される通常の既定値。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "プロパティの有効な値が変更されるたびに、プロパティのシステムによって呼び出されるハンドラーの実装への参照。"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "プロパティのシステムが呼び出すたびに呼び出されるハンドラーの実装への参照を<xref:System.Windows.DependencyObject.CoerceValue*>このプロパティに対して</xref:System.Windows.DependencyObject.CoerceValue*>。"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>値に設定することはできません<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得または設定の参照、 <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref>このメタデータに指定された実装。"
  remarks: "プロパティのメタデータでコールバックは、このプロパティの値が同じ既存の依存関係プロパティのメタデータを使用するほとんどのシナリオの重要ではありませんので、型は、通常のパブリック メンバーではありません。 このプロパティが公開されている理由の&1; つがメタデータ サブクラスは基本のメタデータとメタデータをオーバーライドする追加の両方で指定<xref:System.Windows.CoerceValueCallback>。</xref:System.Windows.CoerceValueCallback>場合、マージが必要なロジックを実行できるようにするには 、既定のマージ ロジックを CoerceValueCallback が&1; つ前の置換します。       CoerceValueCallback は、読み取り/書き込みとしてオブジェクト モデルで定義されます。 これは CoerceValueCallback の初期化後に調整できるため、<xref:System.Windows.PropertyMetadata>オブジェクト自体です</xref:System.Windows.PropertyMetadata>。 ただし、メタデータがへの呼び出しの一部として使用された後<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 CoerceValueCallback を&1; 回だけ設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。"
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "A <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref>の参照を実装します。"
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "依存関係プロパティの操作に適用された後、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得または依存関係プロパティの既定値を設定します。"
  remarks: "既定値は、読み取り/書き込みとしてオブジェクト モデルで定義されます。 これは、DefaultValue の初期化後に調整できるため、<xref:System.Windows.PropertyMetadata>オブジェクト自体です</xref:System.Windows.PropertyMetadata>。 ただし、メタデータがへの呼び出しの一部として使用された後<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 一度 DefaultValue を設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。       パラメーターなしのコンス トラクターごとの既定値は、`defaultValue`の<xref:System.Windows.DependencyProperty.UnsetValue>DefaultValue またはコンス トラクターを使用して設定することはできません</xref:System.Windows.DependencyProperty.UnsetValue>。 しようとすると、例外が発生します。      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a>## この型の XAML テキスト使用状況のメンバーは、通常では使用されない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "プロパティの既定値です。 既定値、 <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref>パラメーターなしのコンス トラクターで作成されたインスタンスになります<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>です。「解説」を参照してください。"
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "値に設定することはできません<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>作成後は、「解説」を参照してください。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "依存関係プロパティの操作に適用された後、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "結果としてそのメタデータ インスタンスの変更できない状態の何らかの方法では、プロパティにメタデータが適用されているかどうかを決定する値を取得します。"
  remarks: "さまざまなプロパティ<xref:System.Windows.PropertyMetadata>など<xref:System.Windows.PropertyMetadata.DefaultValue%2A>、読み取り/書き込みとしてオブジェクト モデルで定義されています</xref:System.Windows.PropertyMetadata.DefaultValue%2A></xref:System.Windows.PropertyMetadata>。 これは、これらのプロパティの初期化後に調整できるように、<xref:System.Windows.PropertyMetadata>オブジェクト自体です</xref:System.Windows.PropertyMetadata>。 ただしへの呼び出しの一部として、依存関係プロパティに適用するメタデータ<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 これらの呼び出しのいずれかの時点で<xref:System.Windows.PropertyMetadata.OnApply%2A>が呼び出されるにこのプロパティの値を設定および`true`</xref:System.Windows.PropertyMetadata.OnApply%2A>。"
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>メタデータ インスタンスは不変であり場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "このメタデータと基本メタデータをマージします。"
  remarks: "メタデータが上書きされているときに、このメソッドは内部的に使用 (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>メソッド).</xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "このインスタンスの値とマージする基本のメタデータ。"
    - id: dp
      type: System.Windows.DependencyProperty
      description: "このメタデータが適用されている依存関係プロパティ。"
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "このメタデータは、メタデータがシールされていることを示すプロパティに適用されたときに呼び出されます。"
  remarks: "サブクラスはことを保証のデータ構造のすべての変更可能性、<xref:System.Windows.PropertyMetadata>サブクラスとマークするか変更不可として後もが呼び出されるとします</xref:System.Windows.PropertyMetadata>。 プロパティのシステム操作にメタデータが適用されると呼び出されます (登録、所有者を追加、メタデータをオーバーライドする)。"
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "メタデータが適用されている依存関係プロパティ。"
    - id: targetType
      type: System.Type
      description: "型固有のメタデータは、この場合、このメタデータに関連付けられている型。 これが既定のメタデータである場合は、この値は、null 参照です。"
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得または設定の参照、 <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref>このメタデータに指定された実装。"
  remarks: "プロパティのメタデータでコールバックは、このプロパティの値が同じ既存の依存関係プロパティのメタデータを使用するほとんどのシナリオの重要ではありませんので、型の定義、通常のパブリック メンバーではありません。 このプロパティが公開されている理由の&1; つがメタデータ クラスは基本のメタデータとメタデータをオーバーライドする追加の両方で指定<xref:System.Windows.PropertyChangedCallback>。</xref:System.Windows.PropertyChangedCallback>場合、マージが必要なロジックを実行できるようにするには 既定のマージ ロジックは、テーブル内のすべての PropertyChangedCallback 実装を維持し、それらの各最初を実行している階層の最下位のクラスによって確立されたコールバックを呼び出すには。       PropertyChangedCallback は、読み取り/書き込みとしてオブジェクト モデルで定義されます。 これは PropertyChangedCallback の初期化後に調整できるため、<xref:System.Windows.PropertyMetadata>オブジェクト自体です</xref:System.Windows.PropertyMetadata>。 ただし、メタデータがへの呼び出しの一部として使用された後<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>プロパティ システムはそのメタデータ インスタンスをシール、およびプロパティを変更できないと見なされますようになりました</xref:System.Windows.DependencyProperty.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.DependencyProperty.Register%2A>。 PropertyChangedCallback を&1; 回だけ設定しようとしています<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`このメタデータをインスタンスで例外が発生します。</xref:System.Windows.PropertyMetadata.IsSealed%2A> 。"
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "A <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref>の参照を実装します。"
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "依存関係プロパティの操作に適用された後、メタデータのプロパティを設定することはできません。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
