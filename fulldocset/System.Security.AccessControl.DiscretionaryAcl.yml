### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.DiscretionaryAcl
  id: DiscretionaryAcl
  children:
  - System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Int32)
  - System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)
  - System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)
  - System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  - System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  - System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  - System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  - System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  - System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  langs:
  - csharp
  name: DiscretionaryAcl
  nameWithType: DiscretionaryAcl
  fullName: System.Security.AccessControl.DiscretionaryAcl
  type: Class
  summary: "随意アクセス制御リスト (DACL) を表します。"
  syntax:
    content: 'public sealed class DiscretionaryAcl : System.Security.AccessControl.CommonAcl'
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAcl
  - System.Security.AccessControl.CommonAcl
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonAcl.BinaryLength
  - System.Security.AccessControl.CommonAcl.Count
  - System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.CommonAcl.IsCanonical
  - System.Security.AccessControl.CommonAcl.IsContainer
  - System.Security.AccessControl.CommonAcl.IsDS
  - System.Security.AccessControl.CommonAcl.Item(System.Int32)
  - System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)
  - System.Security.AccessControl.CommonAcl.RemoveInheritedAces
  - System.Security.AccessControl.CommonAcl.Revision
  - System.Security.AccessControl.GenericAcl.AclRevision
  - System.Security.AccessControl.GenericAcl.AclRevisionDS
  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  - System.Security.AccessControl.GenericAcl.GetEnumerator
  - System.Security.AccessControl.GenericAcl.IsSynchronized
  - System.Security.AccessControl.GenericAcl.MaxBinaryLength
  - System.Security.AccessControl.GenericAcl.SyncRoot
  - System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Int32)
  id: '#ctor(System.Boolean,System.Boolean,System.Int32)'
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: DiscretionaryAcl(Boolean,Boolean,Int32)
  nameWithType: DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,Int32)
  fullName: System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;> </xref>値を指定しています。"
  syntax:
    content: public DiscretionaryAcl (bool isContainer, bool isDS, int capacity);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、新しい<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクトがコンテナーです。"
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、新しい<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクトがディレクトリ オブジェクトのアクセス制御リスト (ACL)。"
    - id: capacity
      type: System.Int32
      description: "アクセス制御エントリ (Ace) の数この<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクトを含めることができます。 この番号は、ヒントとしてのみ使用するのには。"
  overload: System.Security.AccessControl.DiscretionaryAcl.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)
  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)'
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: DiscretionaryAcl(Boolean,Boolean,RawAcl)
  nameWithType: DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,RawAcl)
  fullName: System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,RawAcl)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;> </xref>から、指定した値を指定して<xref href=&quot;System.Security.AccessControl.RawAcl&quot;></xref>オブジェクト。"
  remarks: "アクセス制御エントリ (Ace)、<xref:System.Security.AccessControl.RawAcl>オブジェクトを複製します</xref:System.Security.AccessControl.RawAcl>。"
  syntax:
    content: public DiscretionaryAcl (bool isContainer, bool isDS, System.Security.AccessControl.RawAcl rawAcl);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、新しい<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクトがコンテナーです。"
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、新しい<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクトがディレクトリ オブジェクトのアクセス制御リスト (ACL)。"
    - id: rawAcl
      type: System.Security.AccessControl.RawAcl
      description: "基になる<xref href=&quot;System.Security.AccessControl.RawAcl&quot;> </xref> 、新しいオブジェクト<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。 指定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>を空の ACL を作成します。"
  overload: System.Security.AccessControl.DiscretionaryAcl.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)
  id: '#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)'
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: DiscretionaryAcl(Boolean,Boolean,Byte,Int32)
  nameWithType: DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,Byte,Int32)
  fullName: System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,Byte,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;> </xref>値を指定しています。"
  syntax:
    content: public DiscretionaryAcl (bool isContainer, bool isDS, byte revision, int capacity);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、新しい<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクトがコンテナーです。"
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、新しい<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクトがディレクトリ オブジェクトのアクセス制御リスト (ACL)。"
    - id: revision
      type: System.Byte
      description: "新しいリビジョン レベル<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。"
    - id: capacity
      type: System.Int32
      description: "アクセス制御エントリ (Ace) の数この<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクトを含めることができます。 この番号は、ヒントとしてのみ使用するのには。"
  overload: System.Security.AccessControl.DiscretionaryAcl.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  id: AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: AddAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  nameWithType: DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  fullName: System.Security.AccessControl.DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "現在、アクセス制御エントリ (ACE) で指定した設定を追加<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。"
  syntax:
    content: public void AddAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を追加します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ACE を追加します。"
    - id: rule
      type: System.Security.AccessControl.ObjectAccessRule
      description: "<xref href=&quot;System.Security.AccessControl.ObjectAccessRule&quot;> </xref>の新しいアクセスします。"
  overload: System.Security.AccessControl.DiscretionaryAcl.AddAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  id: AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  nameWithType: DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  fullName: System.Security.AccessControl.DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "現在、アクセス制御エントリ (ACE) で指定した設定を追加<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。"
  remarks: "このメソッドには、既存の Ace がマージされる可能性があります。"
  syntax:
    content: public void AddAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を追加します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ACE を追加します。"
    - id: accessMask
      type: System.Int32
      description: "新しい ACE のアクセス規則。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "新しい ACE の継承プロパティを指定するフラグ。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "新しい ACE の継承の反映プロパティを指定するフラグ。"
  overload: System.Security.AccessControl.DiscretionaryAcl.AddAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  id: AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  nameWithType: DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  fullName: System.Security.AccessControl.DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "現在、アクセス制御エントリ (ACE) で指定した設定を追加<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。 新しい ACE をオブジェクトの種類または継承されたオブジェクトの種類を指定する場合は、ディレクトリ オブジェクトのアクセス制御リスト (Acl) に対してこのメソッドを使用します。"
  remarks: "このメソッドには、既存の Ace がマージされる可能性があります。"
  syntax:
    content: public void AddAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を追加します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ACE を追加します。"
    - id: accessMask
      type: System.Int32
      description: "新しい ACE のアクセス規則。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "新しい ACE の継承プロパティを指定するフラグ。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "新しい ACE の継承の反映プロパティを指定するフラグ。"
    - id: objectFlags
      type: System.Security.AccessControl.ObjectAceFlags
      description: "場合を指定するフラグ、`objectType`と`inheritedObjectType`パラメーターが含まれていない<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>値。"
    - id: objectType
      type: System.Guid
      description: "新しい ACE を適用するオブジェクトのクラスの id。"
    - id: inheritedObjectType
      type: System.Guid
      description: "新しい ACE を継承できる子オブジェクトのクラスの id。"
  overload: System.Security.AccessControl.DiscretionaryAcl.AddAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  id: RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: RemoveAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  nameWithType: DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "現在の指定したアクセス制御規則を削除<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。"
  syntax:
    content: public bool RemoveAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を削除します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>アクセス制御規則を削除します。"
    - id: rule
      type: System.Security.AccessControl.ObjectAccessRule
      description: "<xref href=&quot;System.Security.AccessControl.ObjectAccessRule&quot;> </xref>アクセスを削除します。"
    return:
      type: System.Boolean
      description: "返します<xref:System.Boolean>。</xref:System.Boolean>"
  overload: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  id: RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  nameWithType: DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "現在の指定したアクセス制御規則を削除<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。"
  remarks: "アクセスの削除は、それらを削除するだけでなく、アクセス制御エントリ (Ace) を追加する複雑なアルゴリズムを使用して行われます。"
  syntax:
    content: public bool RemoveAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を削除します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>アクセス制御規則を削除します。"
    - id: accessMask
      type: System.Int32
      description: "削除する規則のアクセス マスク。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "削除する規則の継承プロパティを指定するフラグ。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "削除する規則の継承の反映プロパティを指定するフラグ。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメソッドは、指定したアクセスを正常に削除される場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  id: RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  nameWithType: DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "現在の指定したアクセス制御規則を削除<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。 オブジェクトの種類または継承されたオブジェクトの種類を指定する場合は、ディレクトリ オブジェクトのアクセス制御リスト (Acl) に対してこのメソッドを使用します。"
  remarks: "アクセスの削除は、それらを削除するだけでなく、アクセス制御エントリ (Ace) を追加する複雑なアルゴリズムを使用して行われます。"
  syntax:
    content: public bool RemoveAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を削除します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>アクセス制御規則を削除します。"
    - id: accessMask
      type: System.Int32
      description: "削除するアクセス制御規則のアクセス マスク。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "削除するアクセス制御規則の継承プロパティを指定するフラグ。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "削除するアクセス制御規則の継承の反映プロパティを指定するフラグ。"
    - id: objectFlags
      type: System.Security.AccessControl.ObjectAceFlags
      description: "場合を指定するフラグ、`objectType`と`inheritedObjectType`パラメーターが含まれていない<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>値。"
    - id: objectType
      type: System.Guid
      description: "削除されたアクセス制御規則を適用するオブジェクトのクラスの id。"
    - id: inheritedObjectType
      type: System.Guid
      description: "削除されたアクセス制御規則を継承できる子オブジェクトのクラスの id。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このメソッドは、指定したアクセスを正常に削除される場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  id: RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: RemoveAccessSpecific(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  nameWithType: DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "現在の指定したアクセス制御エントリ (ACE) を削除<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。"
  syntax:
    content: public void RemoveAccessSpecific (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を削除します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ACE を削除します。"
    - id: rule
      type: System.Security.AccessControl.ObjectAccessRule
      description: "<xref href=&quot;System.Security.AccessControl.ObjectAccessRule&quot;> </xref>アクセスを削除します。"
  overload: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  id: RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  nameWithType: DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "現在の指定したアクセス制御エントリ (ACE) を削除<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。"
  syntax:
    content: public void RemoveAccessSpecific (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を削除します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ACE を削除します。"
    - id: accessMask
      type: System.Int32
      description: "削除する ACE のアクセス マスク。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "削除する ACE の継承プロパティを指定するフラグ。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "削除する ACE の継承の反映プロパティを指定するフラグ。"
  overload: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  id: RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  nameWithType: DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "現在の指定したアクセス制御エントリ (ACE) を削除<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。 このメソッドを削除するオブジェクトの種類または ACE の継承されたオブジェクトの種類を指定するときに、アクセス制御リスト (Acl) ディレクトリ オブジェクトに対して使用します。"
  syntax:
    content: public void RemoveAccessSpecific (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を削除します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ACE を削除します。"
    - id: accessMask
      type: System.Int32
      description: "削除する ACE のアクセス マスク。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "削除する ACE の継承プロパティを指定するフラグ。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "削除する ACE の継承の反映プロパティを指定するフラグ。"
    - id: objectFlags
      type: System.Security.AccessControl.ObjectAceFlags
      description: "場合を指定するフラグ、`objectType`と`inheritedObjectType`パラメーターが含まれていない<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>値。"
    - id: objectType
      type: System.Guid
      description: "削除された ACE を適用するオブジェクトのクラスの id。"
    - id: inheritedObjectType
      type: System.Guid
      description: "削除された ACE を継承できる子オブジェクトのクラスの id。"
  overload: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  id: SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: SetAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  nameWithType: DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  fullName: System.Security.AccessControl.DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "指定された指定のアクセス制御を設定<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>オブジェクト。"
  syntax:
    content: public void SetAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を設定します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ACE を設定します。"
    - id: rule
      type: System.Security.AccessControl.ObjectAccessRule
      description: "<xref href=&quot;System.Security.AccessControl.ObjectAccessRule&quot;> </xref>アクセスを設定します。"
  overload: System.Security.AccessControl.DiscretionaryAcl.SetAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  id: SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  nameWithType: DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  fullName: System.Security.AccessControl.DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "指定された指定のアクセス制御を設定<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>オブジェクト。"
  remarks: "両方指定するすべて既存のアクセス制御エントリ (Ace) と一致するメソッドを削除します<xref:System.Security.Principal.SecurityIdentifier>オブジェクトと指定したアクセス修飾子 (許可または拒否).</xref:System.Security.Principal.SecurityIdentifier>"
  syntax:
    content: public void SetAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を設定します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ACE を設定します。"
    - id: accessMask
      type: System.Int32
      description: "新しい ACE のアクセス規則。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "新しい ACE の継承プロパティを指定するフラグ。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "新しい ACE の継承の反映プロパティを指定するフラグ。"
  overload: System.Security.AccessControl.DiscretionaryAcl.SetAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  id: SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  parent: System.Security.AccessControl.DiscretionaryAcl
  langs:
  - csharp
  name: SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  nameWithType: DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  fullName: System.Security.AccessControl.DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "指定された指定のアクセス制御を設定<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>オブジェクト。"
  remarks: "両方指定するすべて既存のアクセス制御エントリ (Ace) と一致するメソッドを削除します<xref:System.Security.Principal.SecurityIdentifier>オブジェクトと指定したアクセス修飾子 (許可または拒否).</xref:System.Security.Principal.SecurityIdentifier>"
  syntax:
    content: public void SetAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    parameters:
    - id: accessType
      type: System.Security.AccessControl.AccessControlType
      description: "アクセス制御の種類 (許可または拒否) を設定します。"
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ACE を設定します。"
    - id: accessMask
      type: System.Int32
      description: "新しい ACE のアクセス規則。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "新しい ACE の継承プロパティを指定するフラグ。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "新しい ACE の継承の反映プロパティを指定するフラグ。"
    - id: objectFlags
      type: System.Security.AccessControl.ObjectAceFlags
      description: "場合を指定するフラグ、`objectType`と`inheritedObjectType`パラメーターが含まれていない<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>値。"
    - id: objectType
      type: System.Guid
      description: "新しい ACE を適用するオブジェクトのクラスの id。"
    - id: inheritedObjectType
      type: System.Guid
      description: "新しい ACE を継承できる子オブジェクトのクラスの id。"
  overload: System.Security.AccessControl.DiscretionaryAcl.SetAccess*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: System.Security.AccessControl.CommonAcl
- uid: System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Int32)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: DiscretionaryAcl(Boolean,Boolean,Int32)
  nameWithType: DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,Int32)
  fullName: System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: DiscretionaryAcl(Boolean,Boolean,RawAcl)
  nameWithType: DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,RawAcl)
  fullName: System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,RawAcl)
- uid: System.Security.AccessControl.RawAcl
  parent: System.Security.AccessControl
  isExternal: false
  name: RawAcl
  nameWithType: RawAcl
  fullName: System.Security.AccessControl.RawAcl
- uid: System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: DiscretionaryAcl(Boolean,Boolean,Byte,Int32)
  nameWithType: DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,Byte,Int32)
  fullName: System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(Boolean,Boolean,Byte,Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: AddAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  nameWithType: DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  fullName: System.Security.AccessControl.DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.AccessControl.ObjectAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: ObjectAccessRule
  nameWithType: ObjectAccessRule
  fullName: System.Security.AccessControl.ObjectAccessRule
- uid: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  nameWithType: DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  fullName: System.Security.AccessControl.DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  nameWithType: DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  fullName: System.Security.AccessControl.DiscretionaryAcl.AddAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
- uid: System.Security.AccessControl.ObjectAceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: ObjectAceFlags
  nameWithType: ObjectAceFlags
  fullName: System.Security.AccessControl.ObjectAceFlags
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: RemoveAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  nameWithType: DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  nameWithType: DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  nameWithType: DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: RemoveAccessSpecific(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  nameWithType: DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,ObjectAccessRule)
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  nameWithType: DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  nameWithType: DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
- uid: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: SetAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  nameWithType: DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
  fullName: System.Security.AccessControl.DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,ObjectAccessRule)
- uid: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  nameWithType: DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
  fullName: System.Security.AccessControl.DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags)
- uid: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  nameWithType: DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
  fullName: System.Security.AccessControl.DiscretionaryAcl.SetAccess(AccessControlType,SecurityIdentifier,Int32,InheritanceFlags,PropagationFlags,ObjectAceFlags,Guid,Guid)
- uid: System.Security.AccessControl.DiscretionaryAcl.#ctor*
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: DiscretionaryAcl
  nameWithType: DiscretionaryAcl.DiscretionaryAcl
- uid: System.Security.AccessControl.DiscretionaryAcl.AddAccess*
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: AddAccess
  nameWithType: DiscretionaryAcl.AddAccess
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess*
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: RemoveAccess
  nameWithType: DiscretionaryAcl.RemoveAccess
- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific*
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: RemoveAccessSpecific
  nameWithType: DiscretionaryAcl.RemoveAccessSpecific
- uid: System.Security.AccessControl.DiscretionaryAcl.SetAccess*
  parent: System.Security.AccessControl.DiscretionaryAcl
  isExternal: false
  name: SetAccess
  nameWithType: DiscretionaryAcl.SetAccess
