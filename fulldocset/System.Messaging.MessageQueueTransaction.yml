### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueTransaction
  id: MessageQueueTransaction
  children:
  - System.Messaging.MessageQueueTransaction.#ctor
  - System.Messaging.MessageQueueTransaction.Abort
  - System.Messaging.MessageQueueTransaction.Begin
  - System.Messaging.MessageQueueTransaction.Commit
  - System.Messaging.MessageQueueTransaction.Dispose
  - System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  - System.Messaging.MessageQueueTransaction.Finalize
  - System.Messaging.MessageQueueTransaction.Status
  langs:
  - csharp
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
  type: Class
  summary: "メッセージ キューの内部トランザクションを提供します。"
  remarks: "トランザクションの一部としてメッセージを送受信するトランザクションを作成しのオーバー ロードに渡す MessageQueueTransaction クラスを使用することができます、<xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>メソッドまたは<xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>を受け取るメソッド、`transaction`パラメーター</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> 。 トランザクションの一部として送信されたメッセージは、トランザクション キューに送信する必要があります。 指定したトランザクションを使用して、トランザクション キューから受信したメッセージを受信する必要があります。       加え、<xref:System.Messaging.MessageQueue.Receive%2A>メソッドを指定した識別子または指定された関連付け識別子とメッセージを受信することができます</xref:System.Messaging.MessageQueue.Receive%2A>。 参照してください、<xref:System.Messaging.MessageQueue.ReceiveById%2A>と<xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>方法の詳細については、選択的にトランザクション キューからメッセージを受信します</xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A></xref:System.Messaging.MessageQueue.ReceiveById%2A>。       トランザクションがコミットされた場合、トランザクション キューに送信されるメッセージは削除されます。 同様に、トランザクションがロールバックされた場合、トランザクション キューから受信したメッセージはキューに返されます。       MessageQueueTransaction のインスタンスを作成し、<xref:System.Messaging.MessageQueue.Send%2A>メソッドまたは<xref:System.Messaging.MessageQueue.Receive%2A>メソッドを非トランザクション キューにメッセージを送信またはメソッドの非トランザクション キューからメッセージを受信「間違ったトランザクションの使用率」を示す例外をスロー</xref:System.Messaging.MessageQueue.Receive%2A></xref:System.Messaging.MessageQueue.Send%2A>の該当するオーバー ロードに渡す場合       [Visual Basic]      MessageQueueTransaction はスレッドのアパートメントに対応する、ので、アパートメント状態が`STA`、複数のスレッドで、トランザクションを使用することはできません。 Visual Basic にメイン スレッドの状態を設定する`STA`適用する必要がありますので、<xref:System.MTAThreadAttribute>で、`Main`サブルーチン</xref:System.MTAThreadAttribute>。 別のスレッドを使用してトランザクション メッセージを返しますそれ以外の場合、送信、<xref:System.Messaging.MessageQueueException>例外です。</xref:System.Messaging.MessageQueueException> 。 適用する、<xref:System.MTAThreadAttribute>次のフラグメントを使用しています</xref:System.MTAThreadAttribute>。      ```   <System.MTAThreadAttribute>    public sub Main()   ```      ```vb#      ```"
  syntax:
    content: 'public class MessageQueueTransaction : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.#ctor
  id: '#ctor'
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターを設定、<xref:System.Messaging.MessageQueueTransaction.Status%2A>プロパティを`Initialized`</xref:System.Messaging.MessageQueueTransaction.Status%2A>。"
  syntax:
    content: public MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Abort
  id: Abort
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "保留中の内部トランザクションをロールバックします。"
  remarks: "中止<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</xref:System.Messaging.MessageQueueTransaction.Begin%2A>への呼び出しで開始されたプロセスが正常に完了をマークします。       通常への呼び出し<xref:System.Messaging.MessageQueueTransaction.Begin%2A>内で、`Try...Catch`への呼び出しを配置する例外処理ブロック<xref:System.Messaging.MessageQueueTransaction.Commit%2A>で、`Try`句、および中止操作の呼び出し、`Catch`句</xref:System.Messaging.MessageQueueTransaction.Commit%2A></xref:System.Messaging.MessageQueueTransaction.Begin%2A>。       中止は、トランザクション全体をロールバックします。 これにより、送信または受信<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</xref:System.Messaging.MessageQueueTransaction.Begin%2A>への呼び出し後のすべてのメッセージが含まれます。"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ロールバックしようとして内部トランザクションが開始されていません。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "メッセージ キューの内部エラーが発生します。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Begin
  id: Begin
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "新しいメッセージがキューの内部トランザクションを開始します。"
  remarks: "処理の開始をコミットまたはロールバックされたトランザクションが成功したが、マークを開始します。 処理中に例外が発生した、トランザクション全体がロールバックされます。 これには、送信または受信開始への呼び出し後のすべてのメッセージが含まれます。       通常は、内の開始を呼び出し、`Try...Catch`への呼び出しを配置する例外処理ブロック<xref:System.Messaging.MessageQueueTransaction.Commit%2A>で、`Try`を呼び出すと、句<xref:System.Messaging.MessageQueueTransaction.Abort%2A>で、`Catch`句</xref:System.Messaging.MessageQueueTransaction.Abort%2A></xref:System.Messaging.MessageQueueTransaction.Commit%2A>。"
  syntax:
    content: public void Begin ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Begin*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "トランザクションは既に開始されています。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "メッセージ キューの内部エラーが発生します。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Commit
  id: Commit
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "保留中の内部トランザクションをコミットします。"
  remarks: "コミット<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</xref:System.Messaging.MessageQueueTransaction.Begin%2A>への呼び出しで開始された処理が正常に完了をマークします。 呼び出しの間、例外が発生した場合、<xref:System.Messaging.MessageQueueTransaction.Begin%2A>されコミットへの呼び出し、トランザクション全体がロールバックされます</xref:System.Messaging.MessageQueueTransaction.Begin%2A>。 これにより、送信または受信<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</xref:System.Messaging.MessageQueueTransaction.Begin%2A>への呼び出し後のすべてのメッセージが含まれます。       通常への呼び出し<xref:System.Messaging.MessageQueueTransaction.Begin%2A>内で、`Try...Catch`例外処理ブロック、コミットが存在する、`Try`を呼び出すと、句<xref:System.Messaging.MessageQueueTransaction.Abort%2A>で、`Catch`句</xref:System.Messaging.MessageQueueTransaction.Abort%2A></xref:System.Messaging.MessageQueueTransaction.Begin%2A>。"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Commit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "コミットしようとしているトランザクションが開始されていません。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "メッセージ キューの内部エラーが発生します。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;></xref>です。"
  remarks: "Dispose を呼び出すことによりで使用されるリソース、<xref:System.Messaging.MessageQueueTransaction>を他の目的に再割り当てされます</xref:System.Messaging.MessageQueueTransaction>。 詳細については`Dispose`を参照してください[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)です。       保留中の内部トランザクションが Dispose がロールバックされます。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック<xref:System.Messaging.MessageQueueTransaction.Dispose%2A>メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A></xref:System.Messaging.MessageQueueTransaction.Dispose%2A>。 `Dispose`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Messaging.MessageQueueTransaction>参照。</xref:System.Messaging.MessageQueueTransaction> 。 このメソッドを呼び出して、`Dispose`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Finalize
  id: Finalize
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "現在のインスタンスによって保持されているリソースを解放します。"
  remarks: "このメソッドは<xref:System.Object.Finalize%2A?displayProperty=fullName>。</xref:System.Object.Finalize%2A?displayProperty=fullName> アプリケーション コードではこのメソッドを呼び出す必要がありますいません。オブジェクトの Finalize メソッドは自動的に呼び出される、ガベージ コレクション中にへの呼び出しによって、ガベージ コレクターによって終了処理が無効になっていない限り、<xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>メソッド</xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>。       詳細については、次を参照してください。 [Finalize メソッドおよびデストラクター](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)、[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)、および[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。"
  syntax:
    content: ~MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Status
  id: Status
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "トランザクションの状態を取得します。"
  remarks: "インスタンス、<xref:System.Messaging.MessageQueueTransaction>クラスが作成されたら、コンス トラクターによって状態が設定されて`Initialized`</xref:System.Messaging.MessageQueueTransaction>。 呼び出しの後に<xref:System.Messaging.MessageQueueTransaction.Begin%2A>への呼び出しの前に<xref:System.Messaging.MessageQueueTransaction.Commit%2A>または<xref:System.Messaging.MessageQueueTransaction.Abort%2A>、状態が`Pending`</xref:System.Messaging.MessageQueueTransaction.Abort%2A></xref:System.Messaging.MessageQueueTransaction.Commit%2A></xref:System.Messaging.MessageQueueTransaction.Begin%2A>。"
  syntax:
    content: public System.Messaging.MessageQueueTransactionStatus Status { get; }
    return:
      type: System.Messaging.MessageQueueTransactionStatus
      description: "1 つ、 <xref href=&quot;System.Messaging.MessageQueueTransactionStatus&quot;> </xref>トランザクションがコミット済み、中止、初期化、かが保留されているかどうかを示す値。"
  overload: System.Messaging.MessageQueueTransaction.Status*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.MessageQueueTransaction.#ctor
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
- uid: System.Messaging.MessageQueueTransaction.Abort
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
- uid: System.Messaging.MessageQueueTransaction.Begin
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
- uid: System.Messaging.MessageQueueTransaction.Commit
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
- uid: System.Messaging.MessageQueueTransaction.Dispose
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueTransaction.Finalize
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
- uid: System.Messaging.MessageQueueTransaction.Status
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
- uid: System.Messaging.MessageQueueTransactionStatus
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionStatus
  nameWithType: MessageQueueTransactionStatus
  fullName: System.Messaging.MessageQueueTransactionStatus
- uid: System.Messaging.MessageQueueTransaction.#ctor*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction.MessageQueueTransaction
- uid: System.Messaging.MessageQueueTransaction.Abort*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort
  nameWithType: MessageQueueTransaction.Abort
- uid: System.Messaging.MessageQueueTransaction.Begin*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin
  nameWithType: MessageQueueTransaction.Begin
- uid: System.Messaging.MessageQueueTransaction.Commit*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit
  nameWithType: MessageQueueTransaction.Commit
- uid: System.Messaging.MessageQueueTransaction.Dispose*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueTransaction.Dispose
- uid: System.Messaging.MessageQueueTransaction.Finalize*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize
  nameWithType: MessageQueueTransaction.Finalize
- uid: System.Messaging.MessageQueueTransaction.Status*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
