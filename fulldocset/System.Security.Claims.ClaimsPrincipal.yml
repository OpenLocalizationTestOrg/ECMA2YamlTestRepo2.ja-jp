### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.ClaimsPrincipal
  id: ClaimsPrincipal
  children:
  - System.Security.Claims.ClaimsPrincipal.#ctor
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsPrincipal.Claims
  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  - System.Security.Claims.ClaimsPrincipal.Clone
  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.Current
  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  - System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsPrincipal.Identities
  - System.Security.Claims.ClaimsPrincipal.Identity
  - System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
  type: Class
  summary: "<xref:System.Security.Principal.IPrincipal>複数のクレーム ベース id をサポートする実装</xref:System.Security.Principal.IPrincipal>。"
  remarks: ".NET Framework 4.5 以降、Windows Identity Foundation (WIF) とクレーム ベース id が完全に統合されて、.NET Framework。 つまり、多くのクラスを .NET Framework 内のプリンシパルを表すようになりましたがだけを実装するのではなく、ClaimsPrincipal から派生する、<xref:System.Security.Principal.IPrincipal>インターフェイス</xref:System.Security.Principal.IPrincipal>。 実装するだけでなく、<xref:System.Security.Principal.IPrincipal>インターフェイス、ClaimsPrincipal は、プロパティとクレームを操作するための便利なメソッドを公開します</xref:System.Security.Principal.IPrincipal>。       ClaimsPrincipal <xref:System.Security.Claims.ClaimsIdentity>。</xref:System.Security.Claims.ClaimsIdentity>それぞれが、id のコレクションを公開します。 共通の場合、このコレクションからアクセスできる、<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>プロパティは&1; つの要素のみを持つ</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>。       ClaimsPrincipal 最もプリンシパル クラスを派生させる元のプリンシパルとして .NET 4.5 での導入は、id で処理する方法で何も変更することを強制しません。 ただし詳細可能性を開きアクセスを細かく機会を提供します。 例:-アプリケーション コード自体が認証、承認、および個人用設定の追加のタスクをドライブに、現在のプリンシパルに含まれる要求を直接操作できます。      自分のリソースをフロント-の方向の要求を処理パイプラインで、まで、コードを実行する前であってもに、、認証要求と承認ポリシーを処理できます。 Web ベースのアプリケーションまたはサービスを構成、カスタム クレーム認証マネージャーは、<xref:System.Security.Claims.ClaimsAuthenticationManager>クラス</xref:System.Security.Claims.ClaimsAuthenticationManager>から派生したクラスのインスタンスとするなど、 要求処理パイプラインを呼び出すように設定すると、<xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>メソッドを要求認証マネージャーの受信要求のコンテキストを表す ClaimsPrincipal を渡します</xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>。 信頼性情報、認証マネージャーは、入力方向の要求の値に基づく認証を実行できます。 できますもフィルター処理、変換、または入力方向の要求セットに要求を追加します。 たとえばをローカル ユーザー プロファイルなどのローカル データ ソースから作成された新しい要求を含む設定の入力方向の要求を強化するために使用できません -、カスタム クレーム承認マネージャーは、<xref:System.Security.Claims.ClaimsAuthorizationManager>クラス</xref:System.Security.Claims.ClaimsAuthorizationManager>から派生したクラスのインスタンスで web ベースのアプリケーションを構成することができます。 要求処理パイプラインが受信の ClaimsPrincipal にパッケージ化ように設定すると、<xref:System.Security.Claims.AuthorizationContext>を呼び出すと、<xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>要求、承認マネージャーのメソッド</xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A></xref:System.Security.Claims.AuthorizationContext>。 要求承認マネージャーは、入力方向の要求に基づいて承認を適用できます。      認証マネージャーといずれかを使用してインラインのカスタム アプリケーションを構成することによって信頼性情報ベースのコード アクセス チェックを実行できますが信頼性情報、<xref:System.IdentityModel.Services.ClaimsPrincipalPermission>強制アクセス チェックを実行するクラスまたは<xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>チェックを宣言型のアクセスを実行する</xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute></xref:System.IdentityModel.Services.ClaimsPrincipalPermission>。 コードのクレームに基づくアクセス チェックは、処理パイプラインの外部で、インラインで実行されると、要求承認マネージャーが構成されている限り、すべてのアプリケーションで使用できるようにします。       RP アプリケーション (またはスレッドを実行するプリンシパル) の要求に関連付けられたプリンシパルの ClaimsPrincipal インスタンスを取得するにはキャストを<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>ClaimsPrincipal するプロパティ</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>。 使用可能な ClaimsPrincipal オブジェクトに関連付けられているクレームの<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>プロパティ</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>。 <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>プロパティには、すべてのプリンシパルに関連付けられている id に含まれる要求を返します</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>。 ClaimsPrincipal に複数が含まれている一般的でない場合は、の<xref:System.Security.Claims.ClaimsIdentity>インスタンス、行うこともできます、<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>プロパティかがプライマリ id を使用してアクセスできる、<xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>プロパティ</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A></xref:System.Security.Claims.ClaimsPrincipal.Identities%2A></xref:System.Security.Claims.ClaimsIdentity>。 ClaimsPrincipal では、これらのクレームを検索することがありますをいくつかのメソッドを提供し、言語統合クエリ (LINQ) を完全にサポートします。 使用して、プリンシパルに id を追加することができます、<xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A>または<xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A>メソッド</xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A></xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A>。      > [!NOTE] > の ClaimsPrincipal に id を追加する、呼び出し元が完全な信頼をいる必要があります。       既定では、WIF 優先順位を付けます<xref:System.Security.Principal.WindowsIdentity>オブジェクトから返されるプライマリ id を選択するときに、<xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>プロパティ</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A></xref:System.Security.Principal.WindowsIdentity>。 を通じてデリゲートを指定することによってこの動作を変更することができます、<xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>プロパティを選択します</xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>。 <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>プロパティに対して同様の機能を提供する、<xref:System.Security.Claims.ClaimsPrincipal.Current%2A>プロパティ</xref:System.Security.Claims.ClaimsPrincipal.Current%2A></xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>。       クレームに基づくモデルでは、プリンシパルが指定されたロールがかどうかは、基になるユーザーによって提示されるクレームによって決まります。 <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A>メソッドは、本質的に指定されたロール値を持つクレームが存在しているかどうかを決定するプリンシパルに関連付けられた各 id を検査します</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A>。 要求の種類 (によって表される、<xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>プロパティ) 要求を調べる必要がありますを決定するために使用ロールの中に、チェックがを通じて id で指定されたその<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>プロパティ</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName></xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>。 したがって、ロールのチェック中に検証したクレームは、別の種類別の id のプリンシパルに関連付けられていることができます。"
  example:
  - "The following example extracts the claims presented by a user in an HTTP request and writes them to the HTTP response. The current user is read from the <xref:System.Web.HttpContext> as a ClaimsPrincipal. The claims are then read from it and then are written to the response.  \n  \n```  \n  \nClaimsPrincipal principal = HttpContext.Current.User as ClaimsPrincipal;  \nif (null != principal)  \n{  \n   foreach (Claim claim in principal.Claims)  \n   {  \n      Response.Write(\"CLAIM TYPE: \" + claim.Type + \"; CLAIM VALUE: \" + claim.Value + \"</br>\");  \n   }  \n}  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ClaimsPrincipal : System.Security.Principal.IPrincipal
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IPrincipal
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal()
  nameWithType: ClaimsPrincipal.ClaimsPrincipal()
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>クラスです。"
  remarks: "ユーザーの新しいインスタンスに関連付けはありません。 (、<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>コレクションが空です).</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public ClaimsPrincipal ();
    parameters: []
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>クラスの指定された要求 id を使用します。"
  remarks: "<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>指定した id を持つコレクションを初期化します</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>。"
  syntax:
    content: public ClaimsPrincipal (System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "新しい要求プリンシパルの初期化元 id。"
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identities</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(BinaryReader)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public ClaimsPrincipal (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "追加します。"
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IIdentity)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>クラス指定された id から。"
  remarks: "指定された id から割り当てることが場合<xref:System.Security.Claims.ClaimsIdentity>、初期化に使用されます、<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>コレクションです</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A></xref:System.Security.Claims.ClaimsIdentity>。 それ以外の場合、<xref:System.Security.Claims.ClaimsIdentity>指定された id を使用して作成され、コレクションを初期化するために使用します</xref:System.Security.Claims.ClaimsIdentity>。"
  syntax:
    content: public ClaimsPrincipal (System.Security.Principal.IIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "新しい要求プリンシパルの初期化元 id。"
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  id: '#ctor(System.Security.Principal.IPrincipal)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IPrincipal)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>指定されたプリンシパルからのクラスです。"
  remarks: "指定されたプリンシパルから割り当てることが場合<xref:System.Security.Claims.ClaimsPrincipal>、その id のすべてに追加されます、<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>コレクションです</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A></xref:System.Security.Claims.ClaimsPrincipal>。 指定されたプリンシパルはから割り当てることがない場合<xref:System.Security.Claims.ClaimsPrincipal>、新しい<xref:System.Security.Claims.ClaimsIdentity>から作成された、<xref:System.Security.Principal.IIdentity>でその<xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>プロパティに追加し、<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>コレクションです</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A></xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName></xref:System.Security.Principal.IIdentity></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsPrincipal>。"
  syntax:
    content: public ClaimsPrincipal (System.Security.Principal.IPrincipal principal);
    parameters:
    - id: principal
      type: System.Security.Principal.IPrincipal
      description: "新しい要求プリンシパルの初期化に元のプリンシパル。"
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>principal</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>クラスを使用して作成されたシリアル化されたストリームから<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;></xref>です。"
  syntax:
    content: protected ClaimsPrincipal (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "シリアル化されたデータ。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "シリアル化のコンテキスト。"
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求プリンシパルには、指定された要求 id を追加します。"
  remarks: "追加の id、<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>コレクションです</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>。"
  syntax:
    content: public virtual void AddIdentities (System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "追加する要求 id。"
  overload: System.Security.Claims.ClaimsPrincipal.AddIdentities*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identities</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  id: AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: AddIdentity(ClaimsIdentity)
  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求プリンシパルには、指定された要求の id を追加します。"
  remarks: "Id を追加、<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>コレクションです</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>。"
  syntax:
    content: public virtual void AddIdentity (System.Security.Claims.ClaimsIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
      description: "追加する要求の id。"
  overload: System.Security.Claims.ClaimsPrincipal.AddIdentity*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
  fullName: System.Security.Claims.ClaimsPrincipal.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求プリンシパルに関連付けられたすべての要求 id のすべてのクレームを含むコレクションを取得します。"
  remarks: "要求プリンシパルのコレクションを持ちます<xref:System.Security.Claims.ClaimsIdentity>の Id プロパティを通じてアクセスできるオブジェクト</xref:System.Security.Claims.ClaimsIdentity>。 各<xref:System.Security.Claims.ClaimsIdentity>コレクション内で&1; つまたは複数のクレームが含まれています</xref:System.Security.Claims.ClaimsIdentity>。 要求プロパティは、このコレクション内でクレーム id のすべてからすべての要求を返します。       カスタム実装して信頼性情報のプロパティを調べることができます、<xref:System.Security.Claims.ClaimsAuthenticationManager>認証決定を行うまたはフィルター処理、変換、または受信のクレーム セット; を強化するクラスのカスタム実装によって、<xref:System.Security.Claims.ClaimsAuthorizationManager>コレクションに存在する要求に基づいて承認決定を行うカスタマイズしたりするユーザーのアプリケーション コードによって発生または承認ポリシーを適用するクラス</xref:System.Security.Claims.ClaimsAuthorizationManager></xref:System.Security.Claims.ClaimsAuthenticationManager>。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "このプリンシパルに関連付けられた要求。"
  overload: System.Security.Claims.ClaimsPrincipal.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  id: ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得し、によって返される要求プリンシパルの選択に使用されるデリゲートを設定、<xref:System.Security.Claims.ClaimsPrincipal.Current*>プロパティ</xref:System.Security.Claims.ClaimsPrincipal.Current*>。"
  remarks: "既定の動作をオーバーライドするには、このプロパティを設定することができます、<xref:System.Security.Claims.ClaimsPrincipal.Current%2A>プロパティ</xref:System.Security.Claims.ClaimsPrincipal.Current%2A>。"
  syntax:
    content: public static Func<System.Security.Claims.ClaimsPrincipal> ClaimsPrincipalSelector { get; set; }
    return:
      type: System.Func{System.Security.Claims.ClaimsPrincipal}
      description: "デリゲート。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Clone()
  nameWithType: ClaimsPrincipal.Clone()
  fullName: System.Security.Claims.ClaimsPrincipal.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "このインスタンスのコピーを返します。"
  syntax:
    content: public virtual System.Security.Claims.ClaimsPrincipal Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "新しいコピー、 <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>オブジェクト。"
  overload: System.Security.Claims.ClaimsPrincipal.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  id: CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: CreateClaimsIdentity(BinaryReader)
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しい要求の id を作成します。"
  syntax:
    content: protected virtual System.Security.Claims.ClaimsIdentity CreateClaimsIdentity (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "バイナリ リーダー。"
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "作成された要求の id。"
  overload: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Current
  id: Current
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Current
  nameWithType: ClaimsPrincipal.Current
  fullName: System.Security.Claims.ClaimsPrincipal.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "現在の要求プリンシパルを取得します。"
  remarks: "既定では、<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>が返されます</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>。 この動作を変更するには設定して、<xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>プロパティを現在のプリンシパルを決定するために呼び出すデリゲートを指定する</xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>。"
  syntax:
    content: public static System.Security.Claims.ClaimsPrincipal Current { get; }
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "現在の要求プリンシパル。"
  overload: System.Security.Claims.ClaimsPrincipal.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "追加します。"
  overload: System.Security.Claims.ClaimsPrincipal.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "すべての指定された述語と一致する要求を取得します。"
  remarks: "要求プリンシパルに関連付けられているすべての id から信頼性情報を返します。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "一致するロジックを実行する関数。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "一致する要求。"
  overload: System.Security.Claims.ClaimsPrincipal.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindAll(String)
  nameWithType: ClaimsPrincipal.FindAll(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "すべてを取得またはを指定したクレームを持つ信頼性情報を入力します。"
  remarks: "要求プリンシパルに関連付けられているすべての id から信頼性情報を返します。 序数に基づく大文字と小文字の区別の比較が行われた`type`です。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (string type);
    parameters:
    - id: type
      type: System.String
      description: "信頼性情報と一致するクレームの種類。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "一致する要求。"
  overload: System.Security.Claims.ClaimsPrincipal.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "指定された述語と一致した最初の要求を取得します。"
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "一致するロジックを実行する関数。"
    return:
      type: System.Security.Claims.Claim
      description: "最初の一致する要求または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>一致が検出されない場合。"
  overload: System.Security.Claims.ClaimsPrincipal.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindFirst(String)
  nameWithType: ClaimsPrincipal.FindFirst(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "指定したクレームの種類で初回要求を取得します。"
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (string type);
    parameters:
    - id: type
      type: System.String
      description: "一致するクレームの種類。"
    return:
      type: System.Security.Claims.Claim
      description: "最初の一致する要求または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>一致が検出されない場合。"
  overload: System.Security.Claims.ClaimsPrincipal.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "追加、 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> 、現在のシリアル化に必要なデータと<xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;></xref>オブジェクト。"
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "データを設定するオブジェクト。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "このシリアル化のシリアル化先。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Claims.ClaimsPrincipal.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求プリンシパルが指定された述語と一致するクレームを含むクレーム id のいずれかに関連付けられているかどうかを判断します。"
  syntax:
    content: public virtual bool HasClaim (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "一致するロジックを実行する関数。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>一致する要求が存在する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Claims.ClaimsPrincipal.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: HasClaim(String,String)
  nameWithType: ClaimsPrincipal.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求プリンシパルが指定された要求の種類と値を持つクレームを含むクレーム id のいずれかに関連付けられているかどうかを判断します。"
  remarks: "チェックしません、<xref:System.Security.Claims.Claim.Issuer%2A>または<xref:System.Security.Claims.Claim.OriginalIssuer%2A>プロパティ</xref:System.Security.Claims.Claim.OriginalIssuer%2A></xref:System.Security.Claims.Claim.Issuer%2A>。 値の大文字小文字を区別、序数を使用して、比較が行われます型に依存で大文字にします。"
  syntax:
    content: public virtual bool HasClaim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "一致する要求の種類。"
    - id: value
      type: System.String
      description: "一致する要求の値。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>一致する要求が存在する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Claims.ClaimsPrincipal.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**.       -or-       <code>value</code> is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  id: Identities
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
  fullName: System.Security.Claims.ClaimsPrincipal.Identities
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求プリンシパルに関連付けられているクレーム id のすべてを含むコレクションを取得します。"
  remarks: "一般的なケースでは、コレクションには、1 つの要素のみが含まれています。       コレクションにはいくつかの要素を含めることが`null`です。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> Identities { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "クレーム id のコレクションです。"
  overload: System.Security.Claims.ClaimsPrincipal.Identities*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Identity
  id: Identity
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
  fullName: System.Security.Claims.ClaimsPrincipal.Identity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得、プライマリは、このクレーム プリンシパルと関連付けられている id を要求します。"
  remarks: "既定では、フレームワークが型の id を優先<xref:System.Security.Principal.WindowsIdentity>id を返すときにします</xref:System.Security.Principal.WindowsIdentity>。 最初の<xref:System.Security.Principal.WindowsIdentity>で見つかった、<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>コレクションが返されます</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A></xref:System.Security.Principal.WindowsIdentity>。 ある場合ありません<xref:System.Security.Principal.WindowsIdentity>から割り当て可能な最初の id、コレクションの<xref:System.Security.Claims.ClaimsIdentity>が返されます</xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Principal.WindowsIdentity>。 ある場合ありません<xref:System.Security.Claims.ClaimsIdentity>、`null`が返されます</xref:System.Security.Claims.ClaimsIdentity>。 場合、<xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>コレクションは空では、<xref:System.ArgumentNullException>がスローされます</xref:System.ArgumentNullException></xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>。       設定して、既定の動作を変更することができます、<xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>プロパティを識別するために呼び出すデリゲートを指定する</xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>。"
  syntax:
    content: public virtual System.Security.Principal.IIdentity Identity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "この要求プリンシパルに関連付けられたプライマリ要求 id。"
  overload: System.Security.Claims.ClaimsPrincipal.Identity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: IsInRole(String)
  nameWithType: ClaimsPrincipal.IsInRole(String)
  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求プリンシパルで表されるエンティティ (ユーザー) が指定したロールがかどうかを示す値を返します。"
  remarks: "IsInRole メソッドでは、この要求プリンシパルが所有する id が種類のクレームを含むかどうかをチェック<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>要求の値がで指定された値と等しい、`role`パラメーター</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> 。      > [!NOTE] > 各<xref:System.Security.Claims.ClaimsIdentity>はクレームの種類、ロールを表す独自の定義を持ちます</xref:System.Security.Claims.ClaimsIdentity>。 この要求の種類がアクセスしてを使用して設定することができます、<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>プロパティ</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>。"
  syntax:
    content: public virtual bool IsInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: "チェックするためのロール。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要求プリンシパルが指定されたロールの場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Claims.ClaimsPrincipal.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  id: PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得および設定によって返されるクレーム id を選択するために使用する、デリゲート、<xref:System.Security.Claims.ClaimsPrincipal.Identity*>プロパティ</xref:System.Security.Claims.ClaimsPrincipal.Identity*>。"
  remarks: "既定の動作をオーバーライドするには、このプロパティを設定することができます、<xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>プロパティ</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>。"
  syntax:
    content: public static Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity> PrimaryIdentitySelector { get; set; }
    return:
      type: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
      description: "デリゲート。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "追加します。"
  overload: System.Security.Claims.ClaimsPrincipal.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "追加します。"
    - id: userData
      type: System.Byte[]
      description: "追加します。"
  overload: System.Security.Claims.ClaimsPrincipal.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Claims.ClaimsPrincipal.#ctor
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal()
  nameWithType: ClaimsPrincipal.ClaimsPrincipal()
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ClaimsIdentity>
  nameWithType: IEnumerable<ClaimsIdentity>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(BinaryReader)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IIdentity)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IIdentity)
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IPrincipal)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentity(ClaimsIdentity)
  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
  fullName: System.Security.Claims.ClaimsPrincipal.Claims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
- uid: System.Func{System.Security.Claims.ClaimsPrincipal}
  parent: System
  isExternal: true
  name: Func<ClaimsPrincipal>
  nameWithType: Func<ClaimsPrincipal>
  fullName: System.Func<System.Security.Claims.ClaimsPrincipal>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Security.Claims.ClaimsPrincipal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    nameWithType: ClaimsPrincipal
    fullName: ClaimsPrincipal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Clone()
  nameWithType: ClaimsPrincipal.Clone()
  fullName: System.Security.Claims.ClaimsPrincipal.Clone()
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CreateClaimsIdentity(BinaryReader)
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
- uid: System.Security.Claims.ClaimsPrincipal.Current
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Current
  nameWithType: ClaimsPrincipal.Current
  fullName: System.Security.Claims.ClaimsPrincipal.Current
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(Predicate<Claim>)
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  isExternal: true
  name: Predicate<Claim>
  nameWithType: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll(String)
  nameWithType: ClaimsPrincipal.FindAll(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(Predicate<Claim>)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst(String)
  nameWithType: ClaimsPrincipal.FindFirst(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(String)
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(Predicate<Claim>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim(String,String)
  nameWithType: ClaimsPrincipal.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(String,String)
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
  fullName: System.Security.Claims.ClaimsPrincipal.Identities
- uid: System.Security.Claims.ClaimsPrincipal.Identity
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
  fullName: System.Security.Claims.ClaimsPrincipal.Identity
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: IsInRole(String)
  nameWithType: ClaimsPrincipal.IsInRole(String)
  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(String)
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
- uid: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
  parent: System
  isExternal: true
  name: Func<IEnumerable<ClaimsIdentity>,ClaimsIdentity>
  nameWithType: Func<IEnumerable<ClaimsIdentity>,ClaimsIdentity>
  fullName: System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.ClaimsPrincipal.#ctor*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal.ClaimsPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentities
  nameWithType: ClaimsPrincipal.AddIdentities
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentity
  nameWithType: ClaimsPrincipal.AddIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Claims*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
- uid: System.Security.Claims.ClaimsPrincipal.Clone*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Clone
  nameWithType: ClaimsPrincipal.Clone
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CreateClaimsIdentity
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Current*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Current
  nameWithType: ClaimsPrincipal.Current
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
- uid: System.Security.Claims.ClaimsPrincipal.FindAll*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll
  nameWithType: ClaimsPrincipal.FindAll
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst
  nameWithType: ClaimsPrincipal.FindFirst
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: GetObjectData
  nameWithType: ClaimsPrincipal.GetObjectData
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim
  nameWithType: ClaimsPrincipal.HasClaim
- uid: System.Security.Claims.ClaimsPrincipal.Identities*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
- uid: System.Security.Claims.ClaimsPrincipal.Identity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: IsInRole
  nameWithType: ClaimsPrincipal.IsInRole
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo
  nameWithType: ClaimsPrincipal.WriteTo
