### YamlMime:ManagedReference
items:
- uid: System.Web.UI.ClientScriptManager
  id: ClientScriptManager
  children:
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  - System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  - System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  langs:
  - csharp
  name: ClientScriptManager
  nameWithType: ClientScriptManager
  fullName: System.Web.UI.ClientScriptManager
  type: Class
  summary: "Web アプリケーションでクライアント スクリプトを管理するためのメソッドを定義します。"
  remarks: "ClientScriptManager クラスは、Web アプリケーションに追加のクライアント スクリプトの管理に使用します。 ClientScriptManager クラスへの参照を取得することができます、<xref:System.Web.UI.Page.ClientScript%2A>のプロパティ、<xref:System.Web.UI.Page>オブジェクト</xref:System.Web.UI.Page></xref:System.Web.UI.Page.ClientScript%2A>。       できるスクリプトを追加するクライアント Web ページに宣言によって、ページの HTML マークアップに、スクリプトを含めることで。 ただし、クライアント スクリプトを動的に追加することが必要な場合もあります。 スクリプトを動的に追加するにはこの<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドは、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッド<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド、または<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>、スクリプトを追加するタイミングと方法に応じて、メソッド</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A></xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A></xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A></xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>を使用します。 詳細については、次を参照してください。[する方法: 追加クライアント スクリプト動的に ASP.NET Web Pages を](~/add/includes/ajax-current-ext-md.md)です。       ClientScriptManager クラスは、キー<xref:System.String>と<xref:System.Type>。</xref:System.Type></xref:System.String>でスクリプトを一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。 スクリプトの種類を使用して、ページ上で使用可能性のある別のユーザー コントロールからのようなスクリプトの混乱を避けるために役立ちます。       ときに呼び出される状況でのクライアント コールバック ポストバックを実行せず、クライアントからサーバー コードを実行することが望ましい ClientScriptManager クラスを使用できます。 これは、サーバーへの帯域外のコールバックの実行と呼ばれます。 クライアント コールバックでは、クライアント スクリプト関数は、ASP.NET Web ページへの非同期要求を送信します。 Web ページには、コールバックを処理する通常のライフ サイクルの変更済みバージョンが実行されます。 使用して、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>呼び出されると、クライアント関数への参照を取得するメソッドは、サーバー イベントへのクライアント コールバックを開始します</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>。 詳細については、次を参照してください。[ポストバックなしクライアント コールバックの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > スクリプト コールバックが、ドキュメント オブジェクト モデル (DOM) をサポートしていない古いブラウザーでは機能しなくなり、ECMAScript がクライアントで有効になっている必要です。 確認するには、ブラウザーがコールバックをサポートしているかどうかを使用して、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>経由でアクセスできるは、プロパティ、<xref:System.Web.HttpRequest.Browser%2A>組み込みの ASP.NET のプロパティ<xref:System.Web.HttpContext.Request%2A>オブジェクト</xref:System.Web.HttpContext.Request%2A></xref:System.Web.HttpRequest.Browser%2A></xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>。       使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドおよび<xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>クライアント ポストバック イベントを定義するメソッド</xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。 これらのメソッドは、発生するページへのポストバックをサーバーに、呼び出されたときに、クライアント スクリプト関数を有効にします。 クライアントのポストバック イベントは、Web ページには、クライアントのポストバック イベントをプロセスに通常のライフ サイクルが完了することで、クライアント コールバックと異なります。      > [!NOTE] > を使用している場合、<xref:System.Web.UI.WebControls.Button>コントロールと<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティに設定されている`false`を使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>クライアントを返すメソッドをポストバック イベントを<xref:System.Web.UI.WebControls.Button>コントロール</xref:System.Web.UI.WebControls.Button></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A></xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A></xref:System.Web.UI.WebControls.Button>。       <xref:System.Web.UI.WebControls.Button.OnClientClick%2A>のプロパティ、<xref:System.Web.UI.WebControls.Button>コントロール、<xref:System.Web.UI.WebControls.ImageButton>コントロール、および<xref:System.Web.UI.WebControls.LinkButton>コントロールを使用してクライアントを実行するスクリプト</xref:System.Web.UI.WebControls.LinkButton></xref:System.Web.UI.WebControls.ImageButton></xref:System.Web.UI.WebControls.Button></xref:System.Web.UI.WebControls.Button.OnClientClick%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the ClientScriptManager class. Two client scripts are defined in the page: `PopupScript`, which displays an alert message when the page is loaded, and `ButtonClickScript`, which defines a client handler for an HTML button's `onClick` event.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/t-system.web.ui.clientsc_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/t-system.web.ui.clientsc_1.aspx)]"
  syntax:
    content: public sealed class ClientScriptManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "クライアント関数が、呼び出されると、クライアントの開始にコールバックして、サーバー イベントへの参照を取得します。 このオーバー ロードされたメソッドのクライアント機能には、指定したコントロール、引数、クライアント スクリプト、およびコンテキストが含まれています。"
  remarks: "GetCallbackEventReference メソッドでは、ページの通常の有効期間の変更済みバージョンをあるサーバーに、帯域外のコールバックを実行します。 詳細については、次を参照してください。[ポストバックなしクライアント コールバックの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > ブラウザーは、Microsoft Internet Explorer (バージョン 5.0 以降) が、スクリプトのコールバック機構はよう COM オブジェクトによって実装されし、ブラウザーで ActiveX コントロールの実行を設定する必要があります。 その他のブラウザーでは、ブラウザーのローカル ドキュメント オブジェクト モデル (DOM) を使用して、XMLHttpRequest を使用します。 確認するには、ブラウザーがクライアントのコールバックをサポートしているかどうかを使用して、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>プロパティ</xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>。 確認するには、ブラウザーが HTTP 経由での XML をサポートしているかどうかを使用して、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A>プロパティ</xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A>。 両方のプロパティが経由でアクセスできる、<xref:System.Web.HttpRequest.Browser%2A>組み込みの ASP.NET のプロパティ<xref:System.Web.HttpContext.Request%2A>オブジェクト</xref:System.Web.HttpContext.Request%2A></xref:System.Web.HttpRequest.Browser%2A>。       GetCallbackEventReference オーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが HTTP 経由で同期的に XML を使用してコールバックを実行します</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>。 コールバックのシナリオでデータを同期的に送信するとき、同期コールバックはすぐに返すし、ブラウザーはブロックされません。 2 つの同期コールバックをブラウザーで同時に実行することはできます。 1 つは現在保留中、2 つ目の同期コールバックが発生した場合は、2 つ目の同期のコールバックが最初をキャンセルし、2 番目のコールバックのみが返されます。       データを非同期的に送信するを取るオーバー ロードのいずれかの操作を使用して、`useAsync`パラメーターで、ブール値は、この動作を制御する値。 非同期のシナリオでは、保留中の複数のコールバック; を持つことができます。ただし、返される順序は、開始された順序と一致するは保証されません。       さらに、このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドは、クライアントを処理する関数によって生成されたエラー状態の場合の指定なし、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッド</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A></xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>。 クライアント エラー コールバック ハンドラーを指定するを取るオーバー ロードのいずれかの操作を使用して、`clientErrorCallback`のパラメーターです。       GetCallbackEventReference メソッドは省略可能な文字列`argument`パラメーター文字列を返します。 渡す、または複数の値を受信するには、入力内の値を連結したり、それぞれの文字列を返します。      > [!NOTE] > スクリプトのコールバック操作中に更新する必要があるページまたはコントロールのプロパティの実装での表示状態を使用しないでください。 プロパティは、ページ要求からの復旧は、セッション状態を使用することができます。"
  example:
  - "The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.  \n  \n Two callback mechanisms are shown; the difference between them is the use of the `context` parameter. A `ReceiveServerData1` client callback function is provided using the `context` parameter. In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string. If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the `ProcessCallBackError` client function is called.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/csharp/0153bfa5-9a40-4257-b817-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/visualbasic/0153bfa5-9a40-4257-b817-_1.aspx)]"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "サーバー <xref href=&quot;System.Web.UI.Control&quot;> </xref>クライアント コールバックを処理します。 コントロールを実装する必要があります、 <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref>インターフェイスし、提供、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>メソッド</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>。"
    - id: argument
      type: System.String
      description: "サーバーにクライアント スクリプトから渡される引数<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>メソッド</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>。"
    - id: clientCallback
      type: System.String
      description: "成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。"
    - id: context
      type: System.String
      description: "コールバックを開始する前に、クライアント上で評価されるクライアント スクリプトです。 スクリプトの結果は、クライアントのイベント ハンドラーに渡されます。"
    return:
      type: System.String
      description: "クライアント コールバックを呼び出すクライアント関数の名前。"
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref>指定を実装しません、 <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref>インターフェイスです。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "クライアント関数が、呼び出されると、クライアントが初期化にコールバックするサーバー イベントへの参照を取得します。 このオーバー ロードされたメソッドのクライアント機能には、指定したコントロール、引数、クライアント スクリプト、コンテキスト、およびブール値が含まれています。"
  remarks: "このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが必要な`useAsync`値を設定して、クライアント コールバックを非同期的に実行することができます、パラメーター `true`</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 。 このメソッドのオーバー ロード バージョンを必要としない、`useAsync`パラメーターに値を設定する`false`既定です。       このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッド。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "サーバー <xref href=&quot;System.Web.UI.Control&quot;> </xref>クライアント コールバックを処理します。 コントロールを実装する必要があります、 <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref>インターフェイスし、提供、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>メソッド</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>。"
    - id: argument
      type: System.String
      description: "サーバーにクライアント スクリプトから渡される引数<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>メソッド</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>。"
    - id: clientCallback
      type: System.String
      description: "成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。"
    - id: context
      type: System.String
      description: "コールバックを開始する前に、クライアント上で評価されるクライアント スクリプトです。 スクリプトの結果は、クライアントのイベント ハンドラーに渡されます。"
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>コールバックを非同期的に実行するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>コールバックを同期的に実行します。"
    return:
      type: System.String
      description: "クライアント コールバックを呼び出すクライアント関数の名前。"
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref>指定を実装しません、 <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref>インターフェイスです。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(String,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "クライアント関数が、呼び出されると、クライアントが初期化にコールバックするサーバー イベントへの参照を取得します。 このオーバー ロードされたメソッドのクライアント機能には、指定されたターゲット、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれています。"
  remarks: "このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドは、`target`文字列パラメーターの代わりに、<xref:System.Web.UI.Control>のパラメーターです</xref:System.Web.UI.Control></xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>。 コールバックを含む文字列以外にする場合は、このオーバー ロードを使用して、<xref:System.Web.UI.Control.UniqueID%2A>コントロールの</xref:System.Web.UI.Control.UniqueID%2A>。       さらに、このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが必要な`useAsync`と`clientErrorCallback`パラメーター</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> 。 `useAsync`パラメーター値を設定して、クライアント コールバックを非同期的に実行できます。`true`です。 このメソッドのオーバー ロード バージョンを必要としない、`useAsync`パラメーターに値を設定する`false`既定です。 `clientErrorCallback`パラメーターを使用する場合に呼び出されるクライアント関数の名前を定義するサーバー ハンドラー、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッド、エラーが返されます</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>。 このメソッドのオーバー ロード バージョンを必要としない、`clientErrorCallback`パラメーターは、値を null に設定します。       このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッド。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  example:
  - "The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.  \n  \n Two callback mechanisms are shown; the difference between them is the use of the `context` parameter. A `ReceiveServerData1` client callback function is provided using the `context` parameter. In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string. If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the client function `ProcessCallBackError` is called.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/csharp/b09113ee-01c3-4887-82a1-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/visualbasic/b09113ee-01c3-4887-82a1-_1.aspx)]"
  syntax:
    content: public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);
    parameters:
    - id: target
      type: System.String
      description: "サーバーの名前<xref href=&quot;System.Web.UI.Control&quot;></xref>クライアント コールバックを処理します。 コントロールを実装する必要があります、 <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref>インターフェイスし、提供、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>メソッド</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>。"
    - id: argument
      type: System.String
      description: "サーバーにクライアント スクリプトから渡される引数<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>メソッド</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>。"
    - id: clientCallback
      type: System.String
      description: "成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。"
    - id: context
      type: System.String
      description: "コールバックを開始する前に、クライアント上で評価されるクライアント スクリプトです。 スクリプトの結果は、クライアントのイベント ハンドラーに渡されます。"
    - id: clientErrorCallback
      type: System.String
      description: "サーバー イベント ハンドラーでエラーが発生したときに、結果を受け取るクライアントのイベント ハンドラーの名前。"
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true &quot; name=&quot;true &quot; href=&quot;&quot;></xref>コールバックを非同期的に実行するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>コールバックを同期的に実行します。"
    return:
      type: System.String
      description: "クライアント コールバックを呼び出すクライアント関数の名前。"
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "クライアント関数が、呼び出されると、クライアントが初期化にコールバックするサーバー イベントへの参照を取得します。 このオーバー ロードされたメソッドのクライアント機能には、指定したコントロール、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれています。"
  remarks: "このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが必要な`useAsync`と`clientErrorCallback`のパラメーターです</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>。 `useAsync`パラメーター値を設定して、クライアント コールバックを非同期的に実行できます。`true`です。 このメソッドのオーバー ロード バージョンを必要としない、`useAsync`パラメーターに値を設定する`false`既定です。 `clientErrorCallback`パラメーターを使用する場合に呼び出されるクライアント関数の名前を定義するサーバー ハンドラー (、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッド) はエラーを返します</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>。 このメソッドのオーバー ロード バージョンを必要としない、`clientErrorCallback`パラメーターは、値を null に設定します。       このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッド。</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "サーバー <xref href=&quot;System.Web.UI.Control&quot;> </xref>クライアント コールバックを処理します。 コントロールを実装する必要があります、 <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref>インターフェイスし、提供、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>メソッド</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>。"
    - id: argument
      type: System.String
      description: "サーバーにクライアント スクリプトから渡される引数<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>メソッド</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>。"
    - id: clientCallback
      type: System.String
      description: "成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。"
    - id: context
      type: System.String
      description: "コールバックを開始する前に、クライアント上で評価されるクライアント スクリプトです。 スクリプトの結果は、クライアントのイベント ハンドラーに渡されます。"
    - id: clientErrorCallback
      type: System.String
      description: "サーバー イベント ハンドラーでエラーが発生したときに、結果を受け取るクライアントのイベント ハンドラーの名前。"
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true &quot; name=&quot;true &quot; href=&quot;&quot;></xref>コールバックを非同期的に実行するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>コールバックを同期的に実行します。"
    return:
      type: System.String
      description: "クライアント コールバックを呼び出すクライアント関数の名前。"
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref>指定を実装しません、 <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref>インターフェイスです。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  id: GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackClientHyperlink(Control,String)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "参照を取得<xref uid=&quot;langword_csharp_javascript:&quot; name=&quot;javascript:&quot; href=&quot;&quot;></xref>クライアント イベントで指定されたイベント引数を使用して、指定したコントロールのサーバーへのポストバックを使用できるの先頭に追加されます。"
  remarks: "使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを実装するポストバックを処理するコントロールが必要です、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス</xref:System.Web.UI.IPostBackEventHandler></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。 実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイス、 <xref:System.Web.UI.Page>、ディレクティブを使用します</xref:System.Web.UI.Page></xref:System.Web.UI.IPostBackEventHandler>。"
  example:
  - "The following code example demonstrates the use of the GetPostBackClientHyperlink method. The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface. When the HTML anchor element on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/visualbasic/366d34c0-2826-48a7-a56d-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/csharp/366d34c0-2826-48a7-a56d-_1.aspx)]  \n  \n The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/csharp/366d34c0-2826-48a7-a56d-_2.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/visualbasic/366d34c0-2826-48a7-a56d-_2.aspx)]"
  syntax:
    content: public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "ポストバックを処理するサーバー コントロール。"
    - id: argument
      type: System.String
      description: "サーバー コントロールに、パラメーターが渡されます。"
    return:
      type: System.String
      description: "対象のコントロールの ID とイベントの引数を含むポストバック関数に JavaScript の呼び出しを表す文字列。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  id: GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackClientHyperlink(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "参照を取得<xref uid=&quot;langword_csharp_javascript:&quot; name=&quot;javascript:&quot; href=&quot;&quot;></xref>を指定したコントロールを指定されたイベント引数とブール値を示す値イベントの検証を通知を登録するかどうかのサーバーにポスト クライアント イベントで使用できるの先頭に追加されます。"
  remarks: "使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを実装するポストバックを処理するコントロールが必要です、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス</xref:System.Web.UI.IPostBackEventHandler></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。 実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイス、 <xref:System.Web.UI.Page>、ディレクティブを使用します</xref:System.Web.UI.Page></xref:System.Web.UI.IPostBackEventHandler>。"
  syntax:
    content: public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "ポストバックを処理するサーバー コントロール。"
    - id: argument
      type: System.String
      description: "サーバー コントロールに、パラメーターが渡されます。"
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>検証のポストバック イベントを登録するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>に検証のためにポストバック イベントを登録できません。"
    return:
      type: System.String
      description: "対象のコントロールの ID とイベントの引数を含むポストバック関数に JavaScript の呼び出しを表す文字列。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  id: GetPostBackEventReference(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(PostBackOptions)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "サーバーへのポストバックが発生するクライアント イベントで使用できる文字列を返します。 参照文字列が定義されている指定した<xref href=&quot;System.Web.UI.PostBackOptions&quot;></xref>インスタンス。"
  remarks: "実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイス、 <xref:System.Web.UI.Page>、ディレクティブを使用します</xref:System.Web.UI.Page></xref:System.Web.UI.IPostBackEventHandler>。       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A></xref:System.Web.UI.WebControls.Button></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。 このシナリオでは、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを返しますが、クライアントのポストバック イベントを<xref:System.Web.UI.WebControls.Button>コントロール</xref:System.Web.UI.WebControls.Button></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "A <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>ポストバックを定義します。"
    return:
      type: System.String
      description: "文字列をクライアントでスクリプトとして扱われたときに、クライアントのポストバックを開始します。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>パラメーターは、<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  id: GetPostBackEventReference(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(Control,String)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "サーバーへのポストバックが発生するクライアント イベントで使用できる文字列を返します。 参照文字列は、ポストバックおよびその他のイベント情報の文字列引数を処理する指定されたコントロールによって定義されます。"
  remarks: "実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイス、 <xref:System.Web.UI.Page>、ディレクティブを使用します</xref:System.Web.UI.Page></xref:System.Web.UI.IPostBackEventHandler>。       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A></xref:System.Web.UI.WebControls.Button></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。 このシナリオでは、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを返しますが、クライアントのポストバック イベントを<xref:System.Web.UI.WebControls.Button>コントロール</xref:System.Web.UI.WebControls.Button></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。"
  example:
  - "The following code example demonstrates the use of the GetPostBackEventReference method. The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface. When the button on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/visualbasic/13f44f5d-33c0-40e6-bb2f-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/csharp/13f44f5d-33c0-40e6-bb2f-_1.aspx)]  \n  \n The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/csharp/13f44f5d-33c0-40e6-bb2f-_2.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/visualbasic/13f44f5d-33c0-40e6-bb2f-_2.aspx)]"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.Control control, string argument);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "サーバー <xref href=&quot;System.Web.UI.Control&quot;> </xref>サーバーにポストバックを処理します。"
    - id: argument
      type: System.String
      description: "省略可能なポストバックを処理するコントロールに渡す引数の文字列。"
    return:
      type: System.String
      description: "文字列をクライアントでは、スクリプトとして扱われたとき、ポストバックが開始します。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified <xref href=&quot;System.Web.UI.Control&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  id: GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(PostBackOptions,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "サーバーへのポストバックが発生するクライアント イベントで使用できる文字列を返します。 参照文字列が定義されている指定した<xref href=&quot;System.Web.UI.PostBackOptions&quot;></xref>オブジェクト。 必要に応じて、検証のためのイベントの参照を登録します。"
  remarks: "実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイス、<xref:System.Web.UI.Page>オブジェクト、ディレクティブを使用します</xref:System.Web.UI.Page></xref:System.Web.UI.IPostBackEventHandler>。       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A></xref:System.Web.UI.WebControls.Button></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。 このシナリオでは、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを返しますが、クライアントのポストバック イベントを<xref:System.Web.UI.WebControls.Button>コントロール</xref:System.Web.UI.WebControls.Button></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。       場合`registerForEventValidation`は`true`、GetPostBackEventReference メソッドの呼び出し、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>イベントを生成するクライアントのコントロールを表す一意のコントロール id の検証イベントの参照を登録するメソッド</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>。"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "A <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>ポストバックを定義します。"
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>イベントの参照を検証; に登録するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.String
      description: "文字列をクライアントでスクリプトとして扱われたときに、クライアントのポストバックを開始します。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.PostBackOptions&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  id: GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "サーバーへのポストバックが発生するクライアントのイベントで使用する文字列を返します。 参照文字列は、ポストバックおよびその他のイベント情報の文字列引数を処理する指定されたコントロールによって定義されます。 必要に応じて、検証のためのイベントの参照を登録します。"
  remarks: "実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイス、 <xref:System.Web.UI.Page>、ディレクティブを使用します</xref:System.Web.UI.Page></xref:System.Web.UI.IPostBackEventHandler>。       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A></xref:System.Web.UI.WebControls.Button></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。 このシナリオでは、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを返しますが、クライアントのポストバック イベントを<xref:System.Web.UI.WebControls.Button>コントロール</xref:System.Web.UI.WebControls.Button></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>。       場合`registerForEventValidation`が true の場合、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>メソッドの呼び出し、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>イベントを生成するクライアントのコントロールを表す一意のコントロール id の検証イベントの参照を登録するメソッド</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29></xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>。"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "サーバー <xref href=&quot;System.Web.UI.Control&quot;> </xref>サーバーにポストバックを処理します。"
    - id: argument
      type: System.String
      description: "渡される省略可能な引数の文字列`control`です。"
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>イベントの参照を検証; に登録するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.String
      description: "文字列をクライアントでは、スクリプトとして扱われたとき、ポストバックが開始します。"
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified <xref href=&quot;System.Web.UI.Control&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  id: GetWebResourceUrl(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetWebResourceUrl(Type,String)
  nameWithType: ClientScriptManager.GetWebResourceUrl(Type,String)
  fullName: System.Web.UI.ClientScriptManager.GetWebResourceUrl(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "アセンブリ内のリソースへの URL 参照を取得します。"
  remarks: "GetWebResourceUrl メソッドでは、アセンブリに埋め込まれているリソースへの URL 参照を返します。 返される参照は、エンコードされた URL ではありません。 リソースは、スクリプト ファイル、画像、または、静的ファイルを使用できます。 リソースにアクセスするオブジェクトに基づく種類を指定します。       ページに登録されている Web リソースは、その型と名前によって一意に識別します。 渡された型と名前のペアを持つ&1; つだけのリソースは、ページを登録することができます。 既に登録されているリソースを登録しようとして、登録済みのリソースの複製が作成されることはできません。       組み合わせて GetWebResourceUrl メソッドを使用、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>アセンブリに埋め込まれているリソースにアクセスするメソッド</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>。 アプリケーションでリソースの使用の詳細については、次を参照してください。 [ASP.NET Web ページのリソースの概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates the use of the GetWebResourceUrl method. The *type* parameter in this example is set to the type of class in the assembly containing the resource. The `resourceName` parameter is specified with the fully qualified path to the resource, which includes the default namespace.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_2_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/csharp/m-system.web.ui.clientsc_2_1.aspx)]  \n  \n The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served. Compile the following class in a class library with a default namespace set to `Samples.AspNet.CS.Controls` or `Samples.AspNet.VB.Controls`, depending on what language you are using.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_2_2.vb)]\n [!code-cs[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_2_2.cs)]  \n  \n This example requires a JavaScript file named `Script_include.js`. The .js file is an embedded resource in the assembly that contains the `ClientScriptResourceLabel` object. If you are using [!INCLUDE[vs_current_short](~/add/includes/ajax-current-ext-md.md)], in the Properties window of the class library project, set **Build Action** to **Embedded Resource** when the script file is selected. If you are compiling the library at the command line, use the  switch to embed the resource.  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from resource script.'}  \n```"
  syntax:
    content: public string GetWebResourceUrl (Type type, string resourceName);
    parameters:
    - id: type
      type: System.Type
      description: "リソースの種類。"
    - id: resourceName
      type: System.String
      description: "アセンブリ内のリソースの完全修飾名。"
    return:
      type: System.String
      description: "リソースへの URL 参照します。"
  overload: System.Web.UI.ClientScriptManager.GetWebResourceUrl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The web resource name is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The web resource name has a length of zero."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  id: IsClientScriptBlockRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptBlockRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "クライアント スクリプト ブロックに登録されているかどうかを判断、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの指定のキーを使用します。"
  remarks: "このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>スクリプトが重複する登録を回避するためです</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>。 これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。       クライアント スクリプトは、そのキーとその型で一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。       このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドは、両方を受け取るオーバー ロードを呼び出し、`key`と`type`<xref:System.Web.UI.Page>オブジェクト</xref:System.Web.UI.Page>として、型を持つパラメーターが設定</xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>"
  example:
  - >-
    [!code-cs[System.Web.UI.ClientScriptManager1#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_0_1.aspx)]
     [!code-vb[System.Web.UI.ClientScriptManager1#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_0_1.aspx)]
  syntax:
    content: public bool IsClientScriptBlockRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "検索対象のクライアント スクリプト ブロックのキー。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>クライアント スクリプト ブロックの場合は登録します。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  id: IsClientScriptBlockRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptBlockRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "クライアント スクリプト ブロックに登録されているかどうかを判断、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトのキーおよび種類を使用します。"
  remarks: "このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>スクリプトが重複する登録を回避するためです</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>。 これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。       クライアント スクリプトは、そのキーとその型で一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。 リソースにアクセスするオブジェクトに基づく種類を指定します。 インスタンスを使用する場合、`Page`を指定する、リソースにアクセスするインスタンス、`Page`型です。"
  example:
  - "The following code example demonstrates the use of the IsClientScriptBlockRegistered method. Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/b20ef5ac-aa44-4132-8ad3-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/b20ef5ac-aa44-4132-8ad3-_1.aspx)]"
  syntax:
    content: public bool IsClientScriptBlockRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "検索対象のクライアント スクリプト ブロックの型。"
    - id: key
      type: System.String
      description: "検索対象のクライアント スクリプト ブロックのキー。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>クライアント スクリプト ブロックの場合は登録します。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "クライアント スクリプトの種類は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  id: IsClientScriptIncludeRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptIncludeRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "決定に登録されているが、クライアント スクリプトを含めるかどうか、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの指定のキーを使用します。"
  remarks: "このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>スクリプトが重複する登録を回避するためです</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>。 これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。       クライアント スクリプトは、そのキーとその型では一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。       このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドは、両方を受け取るオーバー ロードを呼び出し、`key`と`type`、型のパラメーターを設定、<xref:System.Web.UI.Page>オブジェクト</xref:System.Web.UI.Page></xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>。"
  syntax:
    content: public bool IsClientScriptIncludeRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "検索するクライアント スクリプトのキーが含まれます。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>クライアント スクリプトに含める場合は登録です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  id: IsClientScriptIncludeRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptIncludeRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "決定クライアント スクリプトに含めるかどうかに登録されて、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトのキーおよび種類を使用しています。"
  remarks: "このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>重複しているクライアント スクリプトを登録しないようにするメソッドが含まれています</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>。 これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。       クライアント スクリプトは、そのキーとその型では一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。 リソースにアクセスするオブジェクトに基づく種類を指定します。 たとえば、ページ インスタンスを使用して、リソースにアクセスする、指定した、`Page`型です。"
  example:
  - "The following code example demonstrates the use of the IsClientScriptIncludeRegistered method. Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/csharp/1a97f23b-4196-4af6-89d9-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/visualbasic/1a97f23b-4196-4af6-89d9-_1.aspx)]  \n  \n This example requires a JavaScript file named `Script_include.js`, with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from include script.'}  \n```"
  syntax:
    content: public bool IsClientScriptIncludeRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "検索するクライアント スクリプトの種類が含まれます。"
    - id: key
      type: System.String
      description: "検索するクライアント スクリプトのキーが含まれます。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>クライアント スクリプトに含める場合は登録です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "クライアント スクリプトに含める型は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  id: IsOnSubmitStatementRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsOnSubmitStatementRegistered(String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "OnSubmit ステートメントに登録されているかどうかを判断、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの指定のキーを使用します。"
  remarks: "このメソッドを呼び出す前に、 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>OnSubmit ステートメントが重複する登録を回避するためです</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>。 これは、ステートメントを作成するサーバーのリソースの消費量が必要な場合に特に重要です。       ステートメントは、そのキーとその型で一意に識別します。 同じキーと型指定されたステートメントは、重複と見なされます。       このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>メソッドは、両方を受け取るオーバー ロードを呼び出し、`key`と`type`型とパラメーターの設定を<xref:System.Web.UI.Page>オブジェクト</xref:System.Web.UI.Page>として</xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>"
  syntax:
    content: public bool IsOnSubmitStatementRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "検索する OnSubmit ステートメントのキー。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>OnSubmit ステートメントは、登録されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  id: IsOnSubmitStatementRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsOnSubmitStatementRegistered(Type,String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "OnSubmit ステートメントに登録されているかどうかを判断、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの指定したキーと型を使用します。"
  remarks: "このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>ステートメントが重複する登録を回避するためです</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>。 これは、ステートメントを作成するサーバーのリソースの消費量が必要な場合に特に重要です。       ステートメントは、そのキーとその型で一意に識別します。 同じキーと型指定されたステートメントは、重複と見なされます。 リソースにアクセスするオブジェクトに基づく種類を指定します。 インスタンスを使用する場合、`Page`を指定する、リソースにアクセスするインスタンス、`Page`型です。"
  example:
  - "The following code example demonstrates the use of the IsOnSubmitStatementRegistered method. A script named `OnSubmitScript` is registered with the <xref:System.Web.UI.Page> so that when the page's form is submitted the script is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/visualbasic/081fc7d2-9213-49e8-ad42-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/csharp/081fc7d2-9213-49e8-ad42-_1.aspx)]"
  syntax:
    content: public bool IsOnSubmitStatementRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "検索する OnSubmit ステートメントの種類。"
    - id: key
      type: System.String
      description: "検索する OnSubmit ステートメントのキー。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>OnSubmit ステートメントは、登録されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "OnSubmit ステートメントの種類は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  id: IsStartupScriptRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsStartupScriptRegistered(String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "スタートアップ スクリプトに登録されているかどうかを判断、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの指定のキーを使用します。"
  remarks: "このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>スクリプトが重複する登録を回避するためです</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>。 これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。       スタートアップ スクリプトは、そのキーとその型で一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。       このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドは、両方の文字列を受け取るオーバー ロードを呼び出す`key`と`type`<xref:System.Web.UI.Page>オブジェクト</xref:System.Web.UI.Page>として、型を持つパラメーターが設定</xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>"
  syntax:
    content: public bool IsStartupScriptRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "検索対象のスタートアップ スクリプトのキー。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>スタートアップ スクリプトは、登録されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  id: IsStartupScriptRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsStartupScriptRegistered(Type,String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "スタートアップ スクリプトに登録されているかどうかを判断、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの指定したキーと型を使用します。"
  remarks: "このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>スクリプトが重複する登録を回避するためです</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>。 これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。       クライアントのスタートアップ スクリプトは、そのキーとその型で一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。"
  example:
  - "The following code example demonstrates the use of the IsStartupScriptRegistered method. Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/31c56db0-942d-4a34-be1e-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/31c56db0-942d-4a34-be1e-_1.aspx)]"
  syntax:
    content: public bool IsStartupScriptRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "検索対象のスタートアップ スクリプトの種類。"
    - id: key
      type: System.String
      description: "検索対象のスタートアップ スクリプトのキー。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>スタートアップ スクリプトは、登録されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "スタートアップ スクリプトの種類が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  id: RegisterArrayDeclaration(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterArrayDeclaration(String,String)
  nameWithType: ClientScriptManager.RegisterArrayDeclaration(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "JavaScript 配列宣言を登録、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの配列の名前と配列の値を使用します。"
  remarks: "The RegisterArrayDeclaration checks to see whether a registered array exists with the same name as the name specified in the `arrayName` parameter and, if so, adds the values specified in the `arrayValue` parameter. Because the underlying storage mechanism is based on an <xref:System.Collections.ArrayList>, duplicates are allowed. If a registered array with the same name as the `arrayName` parameter does not exist, it is created and the values in the `arrayValue` parameter added to it.  \n  \n If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (\\\\\") in the `arrayValue` parameter. The value of the `arrayValue` parameter should be a single element. If more than one value needs to be added to the array, make multiple calls using the RegisterArrayDeclaration method."
  example:
  - "The following code example demonstrates the use of the RegisterArrayDeclaration and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods. The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/csharp/fb15aead-cb5d-4924-8be4-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/visualbasic/fb15aead-cb5d-4924-8be4-_1.aspx)]"
  syntax:
    content: public void RegisterArrayDeclaration (string arrayName, string arrayValue);
    parameters:
    - id: arrayName
      type: System.String
      description: "登録する配列の名前。"
    - id: arrayValue
      type: System.String
      description: "配列の値または値を登録します。"
  overload: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>arrayName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  id: RegisterClientScriptBlock(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptBlock(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "クライアントを使用してスクリプトを登録、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの種類、キー、およびスクリプト リテラルを使用します。"
  remarks: "クライアント スクリプトは、そのキーとその型で一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。 ページには、指定された型とキー ペアを持つ&1; つだけのスクリプトを登録できます。 既に登録されているスクリプトを登録しようとしています。 重複したスクリプトは作成されません。       呼び出す、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>所定のキーと型のペアを持つクライアント スクリプトかどうかを判断するメソッドは既に登録されてしスクリプトを追加しようとしてが不必要に回避します。</xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>       このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッド、する必要がありますでスクリプトが指定されていることを確認して、`script`にパラメーターがラップされて、`<script>`要素ブロック</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>。       <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドは、レンダリングされるページの上部にスクリプト ブロックを追加します</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>。 スクリプト ブロックは、登録されている順序で出力されるとは限りません。 スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを&1; つの文字列で、スクリプトを収集し、それらすべてを&1; つのクライアント スクリプト ブロック内に登録します</xref:System.Text.StringBuilder>。"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptBlock method.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager12#1](~/add/codesnippet/csharp/41f57bff-a479-4a3c-91bb-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager12#1](~/add/codesnippet/visualbasic/41f57bff-a479-4a3c-91bb-_1.aspx)]"
  syntax:
    content: public void RegisterClientScriptBlock (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "登録するクライアント スクリプトの種類。"
    - id: key
      type: System.String
      description: "登録するクライアント スクリプトのキー。"
    - id: script
      type: System.String
      description: "クライアント スクリプトを登録するリテラルです。"
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  id: RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptBlock(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "クライアントを使用してスクリプトを登録、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの種類、キー、スクリプト タグを追加するかどうかを示すスクリプト リテラル、およびブール値を使用します。"
  remarks: "クライアント スクリプトは、そのキーとその型で一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。 ページには、指定された型とキー ペアを持つ&1; つだけのスクリプトを登録できます。 既に登録されているスクリプトを登録しようとしています。 重複したスクリプトは作成されません。       呼び出す、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>指定したキーおよび種類のペアでクライアント スクリプトは既に登録されているかどうかを調べます</xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>。 これにより、スクリプトを追加しようとしてが不必要に回避できます。       このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドを示すことができます、スクリプトがで提供されるかどうか、`script`でパラメーターをラップ、`<script>`要素ブロックを使用して、`addScriptTags`パラメーター</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 。 設定`addScriptTags`に`true`スクリプト タグが自動的に追加することを示します。       <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドは、レンダリングされるページの上部にスクリプト ブロックを追加します</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>。 スクリプト ブロックは、登録されている順序で出力されるとは限りません。 スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを&1; つの文字列で、スクリプトを収集し、それらすべてを&1; つのクライアント スクリプト ブロック内に登録します</xref:System.Text.StringBuilder>。"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptBlock method. Note that the `addScriptTags` parameter is set to `true` so the beginning and closing script tags are not included with the `script` parameter.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/e4221441-a348-44c8-8a15-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/e4221441-a348-44c8-8a15-_1.aspx)]"
  syntax:
    content: public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);
    parameters:
    - id: type
      type: System.Type
      description: "登録するクライアント スクリプトの種類。"
    - id: key
      type: System.String
      description: "登録するクライアント スクリプトのキー。"
    - id: script
      type: System.String
      description: "クライアント スクリプトを登録するリテラルです。"
    - id: addScriptTags
      type: System.Boolean
      description: "スクリプト タグを追加するかどうかを示すブール値。"
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "クライアント スクリプト ブロックの型は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  id: RegisterClientScriptInclude(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptInclude(String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "クライアントを使用してスクリプトを登録、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクト キーと、URL では、により、クライアントから呼び出されるスクリプトを使用します。"
  remarks: "クライアント スクリプトは、そのキーとその型では一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。 ページには、指定された型とキー ペアを持つ&1; つだけのスクリプトを登録できます。 既に登録されているスクリプトを登録しようとしています。 重複したスクリプトは作成されません。       <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>クライアント スクリプトを指定したキーに含めるかどうかと型のペアは既に登録されているし、スクリプトを追加しようとしてが不必要に回避するを判断するメソッド</xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>を呼び出す      > [!NOTE] > クライアント URL を解決するを使用して、<xref:System.Web.UI.Control.ResolveClientUrl%2A>メソッド</xref:System.Web.UI.Control.ResolveClientUrl%2A>。 このメソッドは、これが呼び出されるパスを解決するのには、URL のコンテキストを使用します。       このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッド呼び出しを受け取るオーバー ロード、 `key`、 `URL`、および`type`パラメーター</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> 。       メソッドは、レンダリングされたページの上部にあるスクリプト ブロックを追加します。"
  example:
  - For related information, including syntax, usage, and an example, see <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.
  syntax:
    content: public void RegisterClientScriptInclude (string key, string url);
    parameters:
    - id: key
      type: System.String
      description: "登録するクライアント スクリプトのキーが含まれます。"
    - id: url
      type: System.String
      description: "登録するクライアント スクリプトの URL が含まれます。"
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  id: RegisterClientScriptInclude(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptInclude(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "レジスタとクライアント スクリプトに含める、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの種類、キー、および URL を使用します。"
  remarks: "このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドは*キー*と*url* 、スクリプトを識別するパラメーターと同様に、`type`クライアント スクリプトの id を指定するパラメーターが含まれます</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>。 リソースにアクセスするオブジェクトに基づく種類を指定します。 インスタンスを使用する場合、`Page`を指定する、リソースにアクセスするインスタンス、`Page`型です。      > [!NOTE] > クライアント URL を解決するを使用して、<xref:System.Web.UI.Control.ResolveClientUrl%2A>メソッド</xref:System.Web.UI.Control.ResolveClientUrl%2A>。 このメソッドは、これが呼び出されるパスを解決するのには、URL のコンテキストを使用します。       このメソッドは、レンダリングされたページの上部にあるスクリプト ブロックを追加します。"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptInclude method. Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/csharp/cbae2904-30a8-438b-9fac-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/visualbasic/cbae2904-30a8-438b-9fac-_1.aspx)]  \n  \n This example requires a JavaScript file named Script_include.js with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from include script.'}  \n```"
  syntax:
    content: public void RegisterClientScriptInclude (Type type, string key, string url);
    parameters:
    - id: type
      type: System.Type
      description: "登録するクライアント スクリプトの種類が含まれます。"
    - id: key
      type: System.String
      description: "登録するクライアント スクリプトのキーが含まれます。"
    - id: url
      type: System.String
      description: "登録するクライアント スクリプトの URL が含まれます。"
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "クライアント スクリプトに含める型は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The URL is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The URL is empty."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  id: RegisterClientScriptResource(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptResource(Type,String)
  nameWithType: ClientScriptManager.RegisterClientScriptResource(Type,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "クライアント スクリプト リソースの登録、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの型およびリソース名を使用します。"
  remarks: "RegisterClientScriptResource メソッドは、WebResource.axd HTTP ハンドラーのアセンブリのコンパイル時のリソースにアクセスする場合に使用されます。 RegisterClientScriptResource メソッドを使用してスクリプトを登録する、<xref:System.Web.UI.Page>オブジェクトし、重複するスクリプトを防止します</xref:System.Web.UI.Page>。 このメソッドを使用してリソースの URL の内容をラップする、`<script>`要素ブロックします。"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptResource method.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/visualbasic/e804ef10-67d2-47bd-8da2-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/csharp/e804ef10-67d2-47bd-8da2-_1.aspx)]  \n  \n The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/visualbasic/e804ef10-67d2-47bd-8da2-_2.vb)]\n [!code-cs[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/csharp/e804ef10-67d2-47bd-8da2-_2.cs)]  \n  \n This example requires a JavaScript file named `Script_include.js`, with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from resource script.'}  \n```  \n  \n Compile the `Script_include.js` file as a resource in the `Samples.AspNet.CS.Controls` assembly that contains the `ClientScriptResourceLabel` class."
  syntax:
    content: public void RegisterClientScriptResource (Type type, string resourceName);
    parameters:
    - id: type
      type: System.Type
      description: "リソースの種類、クライアント スクリプトを登録します。"
    - id: resourceName
      type: System.String
      description: "登録するクライアント スクリプト リソースの名前。"
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptResource*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The client resource name is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The client resource name has a length of zero."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  id: RegisterExpandoAttribute(System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterExpandoAttribute(String,String,String)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "コントロールの ID、属性名、および属性値を指定して指定したコントロールのカスタム (expando) 属性として名前/値ペアを登録します。"
  remarks: "RegisterExpandoAttribute メソッドは、指定した<xref:System.Web.UI.Control>。</xref:System.Web.UI.Control>カスタム (expando) 属性として名前/値ペアを登録します。 Expando 属性が、レンダリングされたコントロールのマークアップの XHTML 互換性を保つための JavaScript から動的に設定されます。 引用符と円記号のカスタム (expando) 属性の値はエスケープされます。 引用符と円記号をエスケープするためにしたくない場合、<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>メソッドをオーバー ロードされ、設定、`encode`にパラメーター `false`</xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> 。       Expando 属性が見つからない、または expando 属性を追加するコントロールが見つからない場合は、クライアント スクリプトが生成されますが、コントロールには影響しません。"
  syntax:
    content: public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);
    parameters:
    - id: controlId
      type: System.String
      description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref>カスタム属性を含むページにします。"
    - id: attributeName
      type: System.String
      description: "登録するカスタム属性の名前。"
    - id: attributeValue
      type: System.String
      description: "カスタム属性の値です。"
  overload: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  id: RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterExpandoAttribute(String,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "コントロールの ID、属性名、属性値、および属性値をエンコードするかどうかを示すブール値を指定して指定したコントロールのカスタム (expando) 属性として名前/値ペアを登録します。"
  remarks: "RegisterExpandoAttribute メソッドは、指定した<xref:System.Web.UI.Control>。</xref:System.Web.UI.Control>カスタム (expando) 属性として名前/値ペアを登録します。 Expando 属性が、レンダリングされたコントロールのマークアップの XHTML 互換性を保つための JavaScript から動的に設定されます。 設定、`encode`にパラメーター`true`引用符と expando 属性の値にバック スラッシュをエスケープする必要がある場合。       Expando 属性が見つからない、または expando 属性を追加するコントロールが見つからない場合は、クライアント スクリプトが生成されますが、コントロールには影響しません。"
  example:
  - "The following code example demonstrates how to use the RegisterExpandoAttribute method of the <xref:System.Web.UI.ClientScriptManager> class. The client script in the rendered page sets the `title` attribute of a `<span>` element.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager6#1](~/add/codesnippet/visualbasic/fbe2457b-d4ba-44a2-ac6e-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager6#1](~/add/codesnippet/csharp/fbe2457b-d4ba-44a2-ac6e-_1.aspx)]"
  syntax:
    content: public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);
    parameters:
    - id: controlId
      type: System.String
      description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref>カスタム属性を含むページにします。"
    - id: attributeName
      type: System.String
      description: "登録するカスタム属性の名前。"
    - id: attributeValue
      type: System.String
      description: "カスタム属性の値です。"
    - id: encode
      type: System.Boolean
      description: "登録するカスタム属性をエンコードするかどうかを示すブール値。"
  overload: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  id: RegisterForEventValidation(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "イベントを生成するクライアントのコントロールを表す一意のコントロール ID を検証用のイベントの参照を登録します。"
  remarks: "詳細と例については、次を参照してください、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッド。</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> 。"
  example:
  - "The following example shows how to use the RegisterForEventValidation method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method in order to register a callback for validation, and how to validate that the callback originated from the page.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager9#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_1_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager9#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_1_1.aspx)]"
  syntax:
    content: public void RegisterForEventValidation (string uniqueId);
    parameters:
    - id: uniqueId
      type: System.String
      description: "イベントを生成するクライアントのコントロールを表す一意の ID。"
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  id: RegisterForEventValidation(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(PostBackOptions)
  nameWithType: ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "登録、イベントの参照を使用して検証<xref href=&quot;System.Web.UI.PostBackOptions&quot;></xref>です。"
  remarks: "詳細と例については、次を参照してください、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッド。</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> 。"
  syntax:
    content: public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "A <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>ポストバック イベントを開始するクライアントの JavaScript を生成する方法を指定するオブジェクト。"
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  id: RegisterForEventValidation(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(String,String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "イベントを生成するクライアントのコントロールを表す一意のコントロール ID とイベント引数を使用して、イベントの参照の検証を登録します。"
  remarks: ''
  example:
  - "The following code example demonstrates using the RegisterForEventValidation method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown in the example, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role  \n  \n [!code-vb[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/visualbasic/b1669fea-2f0d-4c7f-a7ff-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/csharp/b1669fea-2f0d-4c7f-a7ff-_1.aspx)]  \n  \n The following code example demonstrates using the RegisterForEventValidation method to register a callback for validation.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager10#1](~/add/codesnippet/visualbasic/b1669fea-2f0d-4c7f-a7ff-_2.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager10#1](~/add/codesnippet/csharp/b1669fea-2f0d-4c7f-a7ff-_2.aspx)]"
  syntax:
    content: public void RegisterForEventValidation (string uniqueId, string argument);
    parameters:
    - id: uniqueId
      type: System.String
      description: "イベントを生成するクライアントのコントロールを表す一意の ID。"
    - id: argument
      type: System.String
      description: "クライアント イベントにイベント引数に渡されます。"
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メソッドは前に、<xref:System.Web.UI.Page.Render*>メソッド</xref:System.Web.UI.Page.Render*>。"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  id: RegisterHiddenField(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterHiddenField(String,String)
  nameWithType: ClientScriptManager.RegisterHiddenField(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterHiddenField(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "非表示の値を登録、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクト。"
  remarks: "RegisterHiddenField メソッドが非表示を作成`<input>`レンダリングされた HTML ページ上の要素。"
  example:
  - "The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and RegisterHiddenField methods. The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/csharp/0defa6d5-d8c8-43f1-af03-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/visualbasic/0defa6d5-d8c8-43f1-af03-_1.aspx)]"
  syntax:
    content: public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);
    parameters:
    - id: hiddenFieldName
      type: System.String
      description: "登録する隠しフィールドの名前。"
    - id: hiddenFieldInitialValue
      type: System.String
      description: "登録するフィールドの初期値。"
  overload: System.Web.UI.ClientScriptManager.RegisterHiddenField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hiddenFieldName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  id: RegisterOnSubmitStatement(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterOnSubmitStatement(Type,String,String)
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "登録 OnSubmit ステートメントを<xref href=&quot;System.Web.UI.Page&quot;></xref>オブジェクトの種類、キー、およびスクリプトのリテラルを使用します。 ステートメントを実行したときに、 <xref href=&quot;System.Web.UI.HtmlControls.HtmlForm&quot;> </xref>が送信されます。"
  remarks: "OnSubmit ステートメントは、そのキーとその型で一意に識別します。 同じキーと型指定されたステートメントは、重複と見なされます。 指定された型とキー ペアを持つ&1; つだけのステートメントは、ページを登録することができます。 既に登録されているステートメントを登録しようとしても、ステートメントの重複は作成されません。       <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>OnSubmit ステートメントが指定されたキーと型のペアに既に登録されているかどうかを確認し、スクリプトを追加しようとしてが不必要に回避するメソッド</xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>を呼び出す       `script` RegisterOnSubmitStatement メソッドのパラメーターが適切にセミコロン (;) で区切られている限り、複数のスクリプト コマンドを含めることができます。       RegisterOnSubmitStatement は、ページが送信され、送信を取り消す機会が与えられます前に実行されるスクリプトを追加します。       HTML フォームの詳細については、`OnSubmit`属性を参照してください、 [World Wide Web コンソーシアム (W3C) の Web サイト](http://go.microsoft.com/fwlink/?linkid=37125)です。"
  example:
  - "The following code example demonstrates the use of the RegisterOnSubmitStatement method.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/visualbasic/597b1063-1251-4d00-82f9-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/csharp/597b1063-1251-4d00-82f9-_1.aspx)]"
  syntax:
    content: public void RegisterOnSubmitStatement (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "登録する OnSubmit ステートメントの種類。"
    - id: key
      type: System.String
      description: "登録する OnSubmit ステートメントのキー。"
    - id: script
      type: System.String
      description: "登録する OnSubmit ステートメントのスクリプト リテラルです。"
  overload: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  id: RegisterStartupScript(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterStartupScript(Type,String,String)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "使用してスタートアップ スクリプトを登録、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの種類、キー、およびスクリプトのリテラルを使用します。"
  remarks: "クライアント スクリプトは、そのキーとその型で一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。 ページには、指定された型とキー ペアを持つ&1; つだけのスクリプトを登録できます。 既に登録されているスクリプトを登録しようとしています。 重複したスクリプトは作成されません。       呼び出す、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>所定のキーと型のペアを持つスタートアップ スクリプトかどうかを判断するメソッドは既に登録されてしスクリプトを追加しようとしてが不必要に回避します。</xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>       このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド、する必要がありますでスクリプトが指定されていることを確認して、`script`でパラメーターがラップされて、`<script>`要素ブロック</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>。       によって追加されたスクリプト ブロック、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>ページ読み込みが完了したときに、ページの前に、メソッドが実行される<xref:System.Web.UI.Control.OnLoad%2A>イベントが発生します</xref:System.Web.UI.Control.OnLoad%2A></xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>。 スクリプト ブロックは、登録されている順序で出力されるとは限りません。 スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを&1; つの文字列で、スクリプトを収集し、それらすべてを&1; つのクライアント スクリプト ブロック内に登録します</xref:System.Text.StringBuilder>。"
  example:
  - "The following code example demonstrates the use of the RegisterStartupScript method. Note that the beginning and closing script tags are included within the `script` parameter. To have the script tags added based on an additional parameter setting, see the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager11#1](~/add/codesnippet/csharp/77e56a73-ddd0-4c6d-99c5-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager11#1](~/add/codesnippet/visualbasic/77e56a73-ddd0-4c6d-99c5-_1.aspx)]"
  syntax:
    content: public void RegisterStartupScript (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "登録するスタートアップ スクリプトの種類。"
    - id: key
      type: System.String
      description: "登録するスタートアップ スクリプトのキー。"
    - id: script
      type: System.String
      description: "スタートアップ スクリプトを登録するリテラルです。"
  overload: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  id: RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterStartupScript(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "使用してスタートアップ スクリプトを登録、 <xref href=&quot;System.Web.UI.Page&quot;> </xref>オブジェクトの種類、キーをスクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用します。"
  remarks: "スタートアップ スクリプトは、そのキーとその型で一意に識別します。 同じキーおよび種類を使用してスクリプトは、重複と見なされます。 ページには、指定された型とキー ペアを持つ&1; つだけのスクリプトを登録できます。 既に登録されているスクリプトを登録しようとしています。 重複したスクリプトは作成されません。       呼び出す、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>所定のキーと型のペアを持つスタートアップ スクリプトかどうかを判断するメソッドは既に登録されてしスクリプトを追加しようとしてが不必要に回避します。</xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>       このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドを示すことができます、スクリプトがで提供されるかどうか、`script`でパラメーターをラップ、`<script>`要素ブロックを使用して、`addScriptTags`パラメーター</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 。 設定`addScriptTags`に`true`スクリプト タグが自動的に追加することを示します。       によって追加されたスクリプト ブロック、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>ページ読み込みが完了したときに、ページの前に、メソッドが実行される<xref:System.Web.UI.Control.OnLoad%2A>イベントが発生します</xref:System.Web.UI.Control.OnLoad%2A></xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>。 スクリプト ブロックは、登録されている順序で出力されるとは限りません。 スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを&1; つの文字列で、スクリプトを収集し、それらすべてを&1; つのクライアント スクリプト ブロック内に登録します</xref:System.Text.StringBuilder>。"
  example:
  - "The following code example demonstrates the use of the RegisterStartupScript method. Note that the `addScriptTags` parameter is set to `false` so the beginning and closing script tags are included with the `script` parameter.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/8a83f4c8-e8ef-4a4a-b8c6-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/8a83f4c8-e8ef-4a4a-b8c6-_1.aspx)]"
  syntax:
    content: public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);
    parameters:
    - id: type
      type: System.Type
      description: "登録するスタートアップ スクリプトの種類。"
    - id: key
      type: System.String
      description: "登録するスタートアップ スクリプトのキー。"
    - id: script
      type: System.String
      description: "スタートアップ スクリプトを登録するリテラルです。"
    - id: addScriptTags
      type: System.Boolean
      description: "スクリプト タグを追加するかどうかを示すブール値。"
  overload: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  id: ValidateEvent(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: ValidateEvent(String)
  nameWithType: ClientScriptManager.ValidateEvent(String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "イベントの検証を使用するために登録されたクライアント イベントを検証、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>メソッド</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>。"
  syntax:
    content: public void ValidateEvent (string uniqueId);
    parameters:
    - id: uniqueId
      type: System.String
      description: "イベントを生成するクライアントのコントロールを表す一意の ID。"
  overload: System.Web.UI.ClientScriptManager.ValidateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  id: ValidateEvent(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: ValidateEvent(String,String)
  nameWithType: ClientScriptManager.ValidateEvent(String,String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "イベントの検証を使用するために登録されたクライアント イベントを検証、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>メソッド</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>。"
  remarks: ''
  example:
  - "The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the ValidateEvent method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown here, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role  \n  \n [!code-vb[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_3_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/csharp/m-system.web.ui.clientsc_3_1.aspx)]"
  syntax:
    content: public void ValidateEvent (string uniqueId, string argument);
    parameters:
    - id: uniqueId
      type: System.String
      description: "イベントを生成するクライアントのコントロールを表す一意の ID。"
    - id: argument
      type: System.String
      description: "クライアント イベントにイベント引数に渡されます。"
  overload: System.Web.UI.ClientScriptManager.ValidateEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>uniqueId</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または空の文字列 (&quot;&quot;) です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(String,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink(Control,String)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String)
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(PostBackOptions)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions)
- uid: System.Web.UI.PostBackOptions
  parent: System.Web.UI
  isExternal: false
  name: PostBackOptions
  nameWithType: PostBackOptions
  fullName: System.Web.UI.PostBackOptions
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(Control,String)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(PostBackOptions,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetWebResourceUrl(Type,String)
  nameWithType: ClientScriptManager.GetWebResourceUrl(Type,String)
  fullName: System.Web.UI.ClientScriptManager.GetWebResourceUrl(Type,String)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered(String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered(Type,String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered(String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered(Type,String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterArrayDeclaration(String,String)
  nameWithType: ClientScriptManager.RegisterArrayDeclaration(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude(String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptResource(Type,String)
  nameWithType: ClientScriptManager.RegisterClientScriptResource(Type,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(Type,String)
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute(String,String,String)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute(String,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(PostBackOptions)
  nameWithType: ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(PostBackOptions)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(String,String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterHiddenField(String,String)
  nameWithType: ClientScriptManager.RegisterHiddenField(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterHiddenField(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterOnSubmitStatement(Type,String,String)
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript(Type,String,String)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent(String)
  nameWithType: ClientScriptManager.ValidateEvent(String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String)
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent(String,String)
  nameWithType: ClientScriptManager.ValidateEvent(String,String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String,String)
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference
  nameWithType: ClientScriptManager.GetCallbackEventReference
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference
  nameWithType: ClientScriptManager.GetPostBackEventReference
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetWebResourceUrl
  nameWithType: ClientScriptManager.GetWebResourceUrl
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered
  nameWithType: ClientScriptManager.IsStartupScriptRegistered
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterArrayDeclaration
  nameWithType: ClientScriptManager.RegisterArrayDeclaration
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock
  nameWithType: ClientScriptManager.RegisterClientScriptBlock
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude
  nameWithType: ClientScriptManager.RegisterClientScriptInclude
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptResource
  nameWithType: ClientScriptManager.RegisterClientScriptResource
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute
  nameWithType: ClientScriptManager.RegisterExpandoAttribute
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation
  nameWithType: ClientScriptManager.RegisterForEventValidation
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterHiddenField
  nameWithType: ClientScriptManager.RegisterHiddenField
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterOnSubmitStatement
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript
  nameWithType: ClientScriptManager.RegisterStartupScript
- uid: System.Web.UI.ClientScriptManager.ValidateEvent*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent
  nameWithType: ClientScriptManager.ValidateEvent
