### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ManipulationDeltaEventArgs
  id: ManipulationDeltaEventArgs
  children:
  - System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  - System.Windows.Input.ManipulationDeltaEventArgs.Complete
  - System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  - System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  - System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  - System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  - System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  - System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  - System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  langs:
  - csharp
  name: ManipulationDeltaEventArgs
  nameWithType: ManipulationDeltaEventArgs
  fullName: System.Windows.Input.ManipulationDeltaEventArgs
  type: Class
  summary: "データを提供、 <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;> </xref>イベント。"
  remarks: "ManipulationDeltaEventArgs クラスには、操作の位置の変更に関するデータが含まれています。 <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>プロパティには、最後に発生した変更が含まれています<xref:System.Windows.UIElement.ManipulationDelta>イベントが発生しました。</xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> 。 <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>プロパティには、現在の操作で発生した合計の変更が含まれています</xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>。 これらのプロパティのいずれかを使用して、操作のオブジェクトを変換します。       操作を終了するには、呼び出すことによって、<xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A>メソッドまたは操作を呼び出して慣性を強制的に、<xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A>メソッド</xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A></xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A>。"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: 'public sealed class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  id: Cancel
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Cancel()
  nameWithType: ManipulationDeltaEventArgs.Cancel()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Cancel()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "操作をキャンセルします。"
  remarks: "メソッドが成功すると、既定値<xref:System.Windows.Input.TouchDevice>以前送信タッチ イベント マウスとしてマウス移動イベント要素や将来の操作イベントは発生しません</xref:System.Windows.Input.TouchDevice>。 タッチの場合、マウス イベントに昇格できません、<xref:System.Windows.UIElement.ManipulationCompleted>慣性中にイベントが発生します</xref:System.Windows.UIElement.ManipulationCompleted>。"
  syntax:
    content: public bool Cancel ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>操作が正常にキャンセルされた場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete
  id: Complete
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Complete()
  nameWithType: ManipulationDeltaEventArgs.Complete()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Complete()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "慣性なし操作を完了します。"
  remarks: "操作を終了する完全なメソッドを呼び出すことができます。 たとえば、オブジェクトには、ウィンドウの端に達すると、画面の外に送られるオブジェクトを防ぐために完了を呼び出すことができます。"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Complete*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  id: CumulativeManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "現在の操作の累積された変更を取得します。"
  remarks: "CumulativeManipulation プロパティには、現在の操作で発生した合計の変更が含まれています。 CumulativeManipulation を使用して、操作のオブジェクトを変換することができます。"
  syntax:
    content: public System.Windows.Input.ManipulationDelta CumulativeManipulation { get; }
    return:
      type: System.Windows.Input.ManipulationDelta
      description: "現在の操作の累積された変更します。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  id: DeltaManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "現在の操作の最新の変更を取得します。"
  remarks: "DeltaManipulation プロパティには、最後に発生した変更が含まれています<xref:System.Windows.UIElement.ManipulationDelta>イベントが発生しました。</xref:System.Windows.UIElement.ManipulationDelta> 。 このプロパティを使用して、操作のオブジェクトを変換することができます。"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the DeltaManipulation property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public System.Windows.Input.ManipulationDelta DeltaManipulation { get; }
    return:
      type: System.Windows.Input.ManipulationDelta
      description: "現在の操作の最新の変更。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "追加します。"
    - id: genericTarget
      type: System.Object
      description: "追加します。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  id: IsInertial
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;> </xref>慣性中にイベントが発生します。"
  remarks: "決定するこのメソッドを使用するかどうか、<xref:System.Windows.UIElement.ManipulationDelta>慣性のユーザーが連絡先を受け取る要素があるときに、またはイベントが発生、<xref:System.Windows.UIElement.ManipulationDelta>イベント</xref:System.Windows.UIElement.ManipulationDelta></xref:System.Windows.UIElement.ManipulationDelta>。"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public bool IsInertial { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;> </xref>慣性; 中に発生するイベント<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> 、ユーザーが連絡先があるときにイベントが発生したかどうか、 <xref href=&quot;System.Windows.UIElement&quot;></xref>です。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  id: ManipulationContainer
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "操作の座標を定義するコンテナーを取得します。"
  syntax:
    content: public System.Windows.IInputElement ManipulationContainer { get; }
    return:
      type: System.Windows.IInputElement
      description: "操作の座標を定義するコンテナー。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  id: ManipulationOrigin
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "操作の発生元となるポイントを取得します。"
  syntax:
    content: public System.Windows.Point ManipulationOrigin { get; }
    return:
      type: System.Windows.Point
      description: "操作の発生元となるポイントです。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  id: Manipulators
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "操作のタッチの連絡先を表すオブジェクトのコレクションを取得します。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}
      description: "操作のタッチの連絡先を表すオブジェクトのコレクションです。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  id: ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ReportBoundaryFeedback(ManipulationDelta)
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "操作が特定の境界を越えてになったことを指定します。"
  remarks: "要素が特定の境界を越えて移動されたことを示すために、ReportBoundaryFeedback メソッドを使用します。  たとえば、ユーザーが要素の境界外に移動、 <xref:System.Windows.Window>、ウィンドウを報告するには、このメソッドを呼び出すことができます</xref:System.Windows.Window>。  ReportBoundaryFeedback を呼び出すとき、<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>イベントが発生します</xref:System.Windows.UIElement.ManipulationBoundaryFeedback>。  既定では、<xref:System.Windows.Window>をサブスクライブしている、<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>境界に達していることをユーザーに視覚的なフィードバックを提供するイベントです</xref:System.Windows.UIElement.ManipulationBoundaryFeedback></xref:System.Windows.Window>。  サブスクライブする<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>カスタム動作を実装します</xref:System.Windows.UIElement.ManipulationBoundaryFeedback>。"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event that calls the ReportBoundaryFeedback method when the user moves the element over the edge of its container.  To test this example, follow the steps in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md) and replace the code in step 5 with this code.  \n  \n [!code-cs[BasicManipulation#ReportBoundaryFeedback](~/add/codesnippet/csharp/basicmanipulation/reportboundaryfeedbackexample.xaml.cs#reportboundaryfeedback)]\n [!code-vb[BasicManipulation#ReportBoundaryFeedback](~/add/codesnippet/visualbasic/basicmanipulation/reportboundaryfeedbackexample.xaml.vb#reportboundaryfeedback)]"
  syntax:
    content: public void ReportBoundaryFeedback (System.Windows.Input.ManipulationDelta unusedManipulation);
    parameters:
    - id: unusedManipulation
      type: System.Windows.Input.ManipulationDelta
      description: "操作の部分を表す境界の外側に移動します。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>unusedManipulation</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  id: StartInertia
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: StartInertia()
  nameWithType: ManipulationDeltaEventArgs.StartInertia()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "後続の連絡先の動きを無視して、発生して操作に慣性を起動、 <xref href=&quot;System.Windows.UIElement.ManipulationInertiaStarting&quot;> </xref>イベント。"
  syntax:
    content: public void StartInertia ();
    parameters: []
  overload: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  id: Velocities
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "操作に対する最新の変更の速度を取得します。"
  syntax:
    content: public System.Windows.Input.ManipulationVelocities Velocities { get; }
    return:
      type: System.Windows.Input.ManipulationVelocities
      description: "操作に対する最新の変更の速度です。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputEventArgs
  isExternal: false
  name: System.Windows.Input.InputEventArgs
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Cancel()
  nameWithType: ManipulationDeltaEventArgs.Cancel()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Cancel()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Complete()
  nameWithType: ManipulationDeltaEventArgs.Complete()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Complete()
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
- uid: System.Windows.Input.ManipulationDelta
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationDelta
  nameWithType: ManipulationDelta
  fullName: System.Windows.Input.ManipulationDelta
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<IManipulator>
  nameWithType: IEnumerable<IManipulator>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.IManipulator>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.IManipulator
    name: IManipulator
    nameWithType: IManipulator
    fullName: IManipulator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ReportBoundaryFeedback(ManipulationDelta)
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: StartInertia()
  nameWithType: ManipulationDeltaEventArgs.StartInertia()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia()
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
- uid: System.Windows.Input.ManipulationVelocities
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationVelocities
  nameWithType: ManipulationVelocities
  fullName: System.Windows.Input.ManipulationVelocities
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Cancel
  nameWithType: ManipulationDeltaEventArgs.Cancel
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Complete
  nameWithType: ManipulationDeltaEventArgs.Complete
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ReportBoundaryFeedback
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: StartInertia
  nameWithType: ManipulationDeltaEventArgs.StartInertia
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
