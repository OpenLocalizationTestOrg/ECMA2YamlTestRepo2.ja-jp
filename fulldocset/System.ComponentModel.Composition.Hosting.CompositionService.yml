### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Composition.Hosting.CompositionService
  id: CompositionService
  children:
  - System.ComponentModel.Composition.Hosting.CompositionService.Dispose
  - System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)
  langs:
  - csharp
  name: CompositionService
  nameWithType: CompositionService
  fullName: System.ComponentModel.Composition.Hosting.CompositionService
  type: Class
  summary: "既存のパーツ インスタンスのインポートを満たすためにメソッドを提供します。"
  remarks: >-
    > [!IMPORTANT]

    >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.
  syntax:
    content: 'public class CompositionService : IDisposable, System.ComponentModel.Composition.ICompositionService'
  inheritance:
  - System.Object
  implements:
  - System.ComponentModel.Composition.ICompositionService
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.CompositionService.Dispose
  id: Dispose
  parent: System.ComponentModel.Composition.Hosting.CompositionService
  langs:
  - csharp
  name: Dispose()
  nameWithType: CompositionService.Dispose()
  fullName: System.ComponentModel.Composition.Hosting.CompositionService.Dispose()
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "現在のインスタンスによって使用されるすべてのリソースを解放、 <xref href=&quot;System.ComponentModel.Composition.Hosting.CompositionContainer&quot;> </xref>クラスです。"
  remarks: "呼び出す`Dispose` <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>.</xref:System.ComponentModel.Composition.Hosting.CompositionContainer>の使用が終了したときに `Dispose`メソッドによって、<xref:System.ComponentModel.Composition.Hosting.CompositionContainer>使用不可の状態</xref:System.ComponentModel.Composition.Hosting.CompositionContainer>。 呼び出した後`Dispose`へのすべての参照を解放する必要があります、<xref:System.ComponentModel.Composition.Hosting.CompositionContainer>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.ComponentModel.Composition.Hosting.CompositionContainer>占有されていた</xref:System.ComponentModel.Composition.Hosting.CompositionContainer></xref:System.ComponentModel.Composition.Hosting.CompositionContainer>。       詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 常に呼び出し`Dispose`<xref:System.ComponentModel.Composition.Hosting.CompositionContainer></xref:System.ComponentModel.Composition.Hosting.CompositionContainer>の最後の参照を解放する前に。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.ComponentModel.Composition.Hosting.CompositionContainer>オブジェクトの`Finalize`メソッド</xref:System.ComponentModel.Composition.Hosting.CompositionContainer>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ComponentModel.Composition.Hosting.CompositionService.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)
  id: SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)
  parent: System.ComponentModel.Composition.Hosting.CompositionService
  langs:
  - csharp
  name: SatisfyImportsOnce(ComposablePart)
  nameWithType: CompositionService.SatisfyImportsOnce(ComposablePart)
  fullName: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(ComposablePart)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "再構成と検証を無効になっている、指定した部分を構成します。"
  syntax:
    content: public void SatisfyImportsOnce (System.ComponentModel.Composition.Primitives.ComposablePart part);
    parameters:
    - id: part
      type: System.ComponentModel.Composition.Primitives.ComposablePart
      description: "合成するパーツ。"
  overload: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ComponentModel.Composition.Hosting.CompositionService.Dispose
  parent: System.ComponentModel.Composition.Hosting.CompositionService
  isExternal: false
  name: Dispose()
  nameWithType: CompositionService.Dispose()
  fullName: System.ComponentModel.Composition.Hosting.CompositionService.Dispose()
- uid: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)
  parent: System.ComponentModel.Composition.Hosting.CompositionService
  isExternal: false
  name: SatisfyImportsOnce(ComposablePart)
  nameWithType: CompositionService.SatisfyImportsOnce(ComposablePart)
  fullName: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce(ComposablePart)
- uid: System.ComponentModel.Composition.Primitives.ComposablePart
  parent: System.ComponentModel.Composition.Primitives
  isExternal: false
  name: ComposablePart
  nameWithType: ComposablePart
  fullName: System.ComponentModel.Composition.Primitives.ComposablePart
- uid: System.ComponentModel.Composition.Hosting.CompositionService.Dispose*
  parent: System.ComponentModel.Composition.Hosting.CompositionService
  isExternal: false
  name: Dispose
  nameWithType: CompositionService.Dispose
- uid: System.ComponentModel.Composition.Hosting.CompositionService.SatisfyImportsOnce*
  parent: System.ComponentModel.Composition.Hosting.CompositionService
  isExternal: false
  name: SatisfyImportsOnce
  nameWithType: CompositionService.SatisfyImportsOnce
