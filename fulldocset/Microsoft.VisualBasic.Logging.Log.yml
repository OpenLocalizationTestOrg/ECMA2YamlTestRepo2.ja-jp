### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Logging.Log
  id: Log
  children:
  - Microsoft.VisualBasic.Logging.Log.#ctor
  - Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  - Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  - Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  - Microsoft.VisualBasic.Logging.Log.TraceSource
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  langs:
  - csharp
  name: Log
  nameWithType: Log
  fullName: Microsoft.VisualBasic.Logging.Log
  type: Class
  summary: "プロパティとイベントと例外の情報をアプリケーションのログ リスナーに書き込むためのメソッドを提供します。"
  remarks: "`My.Application.Log`オブジェクトにアクセスするための簡単なエントリ ポイントを提供する、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]services のログ記録します。 `WriteEntry`と`WriteException`メソッドは、アプリケーションのログ リスナーにメッセージを書き込みます。 リスナーは、アプリケーションの構成ファイルで構成できます。 詳細については、次を参照してください。[チュートリアル: 変更場所 My.Application.Log 書き込みます情報](~/add/includes/ajax-current-ext-md.md)と[アプリケーション ログの使用](~/add/includes/ajax-current-ext-md.md)です。       `My.Application.Log`オブジェクトはクライアント アプリケーションでのみ使用できます。 Web アプリケーションを使用して`My.Log`です。 詳細については、 <xref:Microsoft.VisualBasic.Logging.AspLog>。</xref:Microsoft.VisualBasic.Logging.AspLog>を参照してください。       次の表に、関連するタスクの例については、`My.Application.Log`オブジェクト。      ||参照してください |  |--------|---------|  |イベント情報をアプリケーションのログ リスナーに書き込む |[する方法: ログ メッセージを書き込む](~/add/includes/ajax-current-ext-md.md)|  |例外情報をアプリケーションのログ リスナーに書き込む |[する方法: 例外をログ](~/add/includes/ajax-current-ext-md.md)|  |場所を特定する`My.Application.Log`情報の書き込み |[チュートリアル: My.Application.Log による情報の書き込み先の確認](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]"
  syntax:
    content: public class Log
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: Log()
  nameWithType: Log.Log()
  fullName: Microsoft.VisualBasic.Logging.Log.Log()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;Microsoft.VisualBasic.Logging.Log&quot;> </xref>クラスです。"
  syntax:
    content: public Log ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.Log.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: Log(String)
  nameWithType: Log.Log(String)
  fullName: Microsoft.VisualBasic.Logging.Log.Log(String)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;Microsoft.VisualBasic.Logging.Log&quot;> </xref>クラスです。"
  syntax:
    content: public Log (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>.</xref:System.String> 指定する名前、<xref:Microsoft.VisualBasic.Logging.Log.TraceSource*>プロパティ オブジェクト</xref:Microsoft.VisualBasic.Logging.Log.TraceSource*>。"
  overload: Microsoft.VisualBasic.Logging.Log.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  id: DefaultFileLogWriter
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
  fullName: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "ファイルを取得、 <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref>の基になるオブジェクト、 <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref>オブジェクト。"
  remarks: "このプロパティを使用するには現在の構成を決定する、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>オブジェクト</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>。       クライアント アプリケーションで、`Log`オブジェクトは、を通じて利用、`My.Application.Log`オブジェクト。 Web アプリケーションで、`Log`オブジェクトは、を通じて利用、`My.Log`オブジェクト。"
  syntax:
    content: public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }
    return:
      type: Microsoft.VisualBasic.Logging.FileLogTraceListener
      description: "返します、 <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref>の基になるオブジェクト、 <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref>オブジェクト。"
  overload: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  id: InitializeWithDefaultsSinceNoConfigExists
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: InitializeWithDefaultsSinceNoConfigExists()
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()
  fullName: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "新たに作成<xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;></xref>オブジェクトを追加して、<xref:System.Diagnostics.TraceSource.Listeners*>コレクションです</xref:System.Diagnostics.TraceSource.Listeners*>。"
  remarks: "このメソッドが新たに作成<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>、その名前に設定`FileLog`、重大度レベルとメッセージをログに記録するように構成および<xref:System.Diagnostics.SourceLevels>およびそれ以降</xref:System.Diagnostics.SourceLevels></xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>。 新しい<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>オブジェクトに追加し、<xref:System.Diagnostics.TraceSource.Listeners%2A>コレクションです</xref:System.Diagnostics.TraceSource.Listeners%2A></xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>。       <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A>場合、メソッドを呼び出して、<xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A>プロパティが構成されていません</xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A></xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A>。 トレース ソースは、アプリケーションの構成ファイルで構成できます。"
  syntax:
    content: protected virtual void InitializeWithDefaultsSinceNoConfigExists ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource
  id: TraceSource
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: TraceSource
  nameWithType: Log.TraceSource
  fullName: Microsoft.VisualBasic.Logging.Log.TraceSource
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "取得、 <xref href=&quot;System.Diagnostics.TraceSource&quot;> </xref>の基になるオブジェクト、 <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref>オブジェクト。"
  remarks: "このプロパティを使用するには現在の構成を決定する、`Log`オブジェクト。       クライアント アプリケーションで、`Log`オブジェクトは、を通じて利用、`My.Application.Log`オブジェクト。 Web アプリケーションで、`Log`オブジェクトは、を通じて利用、`My.Log`オブジェクト。       これは、高度なメンバーの場合です。選択しないと、IntelliSense が表示されない、**すべて**タブです。       次の表に、関連するタスクの例、`TraceSource`プロパティです。      ||参照してください |  |--------|---------|  |各情報の取得、`Log`オブジェクトのログ リスナー |。[のトラブルシューティング: ログ リスナー](~/add/includes/ajax-current-ext-md.md)|     ## プロジェクトの種類によって可用性 |プロジェクトの種類 |使用可能な |  |------------------|---------------|  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |いいえ |  |Windows サービス |**Yes**|  |Web サイト |**Yes**|"
  syntax:
    content: public System.Diagnostics.TraceSource TraceSource { get; }
    return:
      type: System.Diagnostics.TraceSource
      description: "返します、 <xref href=&quot;System.Diagnostics.TraceSource&quot;> </xref>の基になるオブジェクト、 <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref>オブジェクト。"
  overload: Microsoft.VisualBasic.Logging.Log.TraceSource*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  id: WriteEntry(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String)
  nameWithType: Log.WriteEntry(String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "アプリケーションのログ リスナーにメッセージを書き込みます。"
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message);
    parameters:
    - id: message
      type: System.String
      description: "必須。 記録するメッセージ。 場合`message`は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、空の文字列を使用します。"
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  id: WriteEntry(System.String,System.Diagnostics.TraceEventType)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String,TraceEventType)
  nameWithType: Log.WriteEntry(String,TraceEventType)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "アプリケーションのログ リスナーにメッセージを書き込みます。"
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);
    parameters:
    - id: message
      type: System.String
      description: "必須。 記録するメッセージ。 場合`message`は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、空の文字列を使用します。"
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "メッセージの種類。 既定では、 <xref uid=&quot;langword_csharp_TraceEventType.Information&quot; name=&quot;TraceEventType.Information&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "メッセージの種類がのいずれか、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>列挙値。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  id: WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String,TraceEventType,Int32)
  nameWithType: Log.WriteEntry(String,TraceEventType,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "アプリケーションのログ リスナーにメッセージを書き込みます。"
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);
    parameters:
    - id: message
      type: System.String
      description: "必須。 記録するメッセージ。 場合`message`は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、空の文字列を使用します。"
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "メッセージの種類。 既定では、 <xref uid=&quot;langword_csharp_TraceEventType.Information&quot; name=&quot;TraceEventType.Information&quot; href=&quot;&quot;></xref>です。"
    - id: id
      type: System.Int32
      description: "関連付けに使用される通常のメッセージ識別子です。 関連する既定では、`entryType`表で説明します。"
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "メッセージの種類がのいずれか、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>列挙値。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  id: WriteException(System.Exception)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception)
  nameWithType: Log.WriteException(Exception)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "例外情報をアプリケーションのログ リスナーに書き込みます。"
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex);
    parameters:
    - id: ex
      type: System.Exception
      description: "必須。 ログに記録する例外。"
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ex</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception,TraceEventType,String)
  nameWithType: Log.WriteException(Exception,TraceEventType,String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "例外情報をアプリケーションのログ リスナーに書き込みます。"
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);
    parameters:
    - id: ex
      type: System.Exception
      description: "必須。 ログに記録する例外。"
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "メッセージの種類。 既定では、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;></xref>です。"
    - id: additionalInfo
      type: System.String
      description: "メッセージに追加する文字列。 既定では、これは、空の文字列です。"
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ex</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "メッセージの種類がのいずれか、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>列挙値。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception,TraceEventType,String,Int32)
  nameWithType: Log.WriteException(Exception,TraceEventType,String,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "例外情報をアプリケーションのログ リスナーに書き込みます。"
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);
    parameters:
    - id: ex
      type: System.Exception
      description: "必須。 ログに記録する例外。"
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "メッセージの種類。 既定では、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;></xref>です。"
    - id: additionalInfo
      type: System.String
      description: "メッセージに追加する文字列。 既定では、これは、空の文字列です。"
    - id: id
      type: System.Int32
      description: "関連付けに使用される通常のメッセージ識別子です。 関連する既定では、 `entryType` 「解説」セクションの表で説明します。"
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ex</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "メッセージの種類がのいずれか、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>列挙値。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Logging.Log.#ctor
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log()
  nameWithType: Log.Log()
  fullName: Microsoft.VisualBasic.Logging.Log.Log()
- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log(String)
  nameWithType: Log.Log(String)
  fullName: Microsoft.VisualBasic.Logging.Log.Log(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
  fullName: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: FileLogTraceListener
  nameWithType: FileLogTraceListener
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: InitializeWithDefaultsSinceNoConfigExists()
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()
  fullName: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists()
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: TraceSource
  nameWithType: Log.TraceSource
  fullName: Microsoft.VisualBasic.Logging.Log.TraceSource
- uid: System.Diagnostics.TraceSource
  parent: System.Diagnostics
  isExternal: false
  name: TraceSource
  nameWithType: TraceSource
  fullName: System.Diagnostics.TraceSource
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String)
  nameWithType: Log.WriteEntry(String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String)
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String,TraceEventType)
  nameWithType: Log.WriteEntry(String,TraceEventType)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType)
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String,TraceEventType,Int32)
  nameWithType: Log.WriteEntry(String,TraceEventType,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception)
  nameWithType: Log.WriteException(Exception)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception,TraceEventType,String)
  nameWithType: Log.WriteException(Exception,TraceEventType,String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String)
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception,TraceEventType,String,Int32)
  nameWithType: Log.WriteException(Exception,TraceEventType,String,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String,Int32)
- uid: Microsoft.VisualBasic.Logging.Log.#ctor*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log
  nameWithType: Log.Log
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: InitializeWithDefaultsSinceNoConfigExists
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: TraceSource
  nameWithType: Log.TraceSource
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry
  nameWithType: Log.WriteEntry
- uid: Microsoft.VisualBasic.Logging.Log.WriteException*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException
  nameWithType: Log.WriteException
