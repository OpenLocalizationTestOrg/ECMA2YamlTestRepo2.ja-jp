### YamlMime:ManagedReference
items:
- uid: System.Data.IDbCommand
  id: IDbCommand
  children:
  - System.Data.IDbCommand.Cancel
  - System.Data.IDbCommand.CommandText
  - System.Data.IDbCommand.CommandTimeout
  - System.Data.IDbCommand.CommandType
  - System.Data.IDbCommand.Connection
  - System.Data.IDbCommand.CreateParameter
  - System.Data.IDbCommand.ExecuteNonQuery
  - System.Data.IDbCommand.ExecuteReader
  - System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)
  - System.Data.IDbCommand.ExecuteScalar
  - System.Data.IDbCommand.Parameters
  - System.Data.IDbCommand.Prepare
  - System.Data.IDbCommand.Transaction
  - System.Data.IDbCommand.UpdatedRowSource
  langs:
  - csharp
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
  type: Interface
  summary: "データ ソースに接続しているときに実行され、リレーショナル データベースにアクセスする .NET Framework データ プロバイダーによって実装される SQL ステートメントを表します。"
  remarks: "IDbCommand インターフェイスにより、データ ソースで実行される SQL ステートメントを表すコマンド クラスの実装、継承したクラスです。 コマンド クラスの詳細については、次を参照してください。[コマンドを実行する](~/add/includes/ajax-current-ext-md.md)です。       アプリケーションでは、直接、IDbCommand インターフェイスのインスタンスは作成されませんが、IDbCommand を継承するクラスのインスタンスを作成します。       IDbCommand を継承するクラスは、継承されたすべてのメンバーを実装し、通常プロバイダー固有の機能を追加するその他のメンバーを定義する必要があります。 IDbCommand インターフェイスの定義など、<xref:System.Data.IDbCommand.ExecuteNonQuery%2A>メソッド</xref:System.Data.IDbCommand.ExecuteNonQuery%2A>。 さらに、<xref:System.Data.SqlClient.SqlCommand>クラスは、このメソッドを継承しも定義、<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>メソッド</xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A></xref:System.Data.SqlClient.SqlCommand>。"
  example:
  - "The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection>, <xref:System.Data.SqlClient.SqlCommand>, and <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it to the console. Finally, the example closes the <xref:System.Data.SqlClient.SqlDataReader>, then the <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-cs[Classic WebData SqlCommand Example#1](~/add/codesnippet/csharp/t-system.data.idbcommand_1.cs)]\n [!code-vb[Classic WebData SqlCommand Example#1](~/add/codesnippet/visualbasic/t-system.data.idbcommand_1.vb)]"
  syntax:
    content: 'public interface IDbCommand : IDisposable'
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Data.IDbCommand.Cancel
  id: Cancel
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Cancel()
  nameWithType: IDbCommand.Cancel()
  fullName: System.Data.IDbCommand.Cancel()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "実行を取り消しますしようとすると、 <xref href=&quot;System.Data.IDbCommand&quot;></xref>です。"
  remarks: "[キャンセル] を何も行われませんが、何も起こりません。 ただし、プロセスでは、コマンドが、キャンセルの試行が失敗した場合は、例外は生成されません。"
  syntax:
    content: public void Cancel ();
    parameters: []
  overload: System.Data.IDbCommand.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.CommandText
  id: CommandText
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CommandText
  nameWithType: IDbCommand.CommandText
  fullName: System.Data.IDbCommand.CommandText
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得またはデータ ソースに対して実行するテキスト コマンドを設定します。"
  remarks: "ときに、<xref:System.Data.IDbCommand.CommandType%2A>プロパティに設定されている`StoredProcedure`、ストアド プロシージャの名前に、CommandText プロパティを設定します</xref:System.Data.IDbCommand.CommandType%2A>。 ユーザーが、ストアド プロシージャ名に特殊文字が含まれている場合は、エスケープ文字構文を使用する必要あります。 コマンドは、Execute メソッドの&1; つを呼び出すときに、このストアド プロシージャを呼び出します。"
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData IDbCommand.CommandText Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_2_1.vb)]\n [!code-cs[Classic WebData IDbCommand.CommandText Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_2_1.cs)]"
  syntax:
    content: public string CommandText { get; set; }
    return:
      type: System.String
      description: "実行するテキスト コマンドです。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Data.IDbCommand.CommandText*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.CommandTimeout
  id: CommandTimeout
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CommandTimeout
  nameWithType: IDbCommand.CommandTimeout
  fullName: System.Data.IDbCommand.CommandTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得またはコマンドを実行する試行を終了し、エラーを生成するまでの待機時間を設定します。"
  remarks: ''
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_0_1.vb)]\n [!code-cs[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_0_1.cs)]"
  syntax:
    content: public int CommandTimeout { get; set; }
    return:
      type: System.Int32
      description: "時間 (秒) コマンドの実行を待機します。 既定値は 30 秒です。"
  overload: System.Data.IDbCommand.CommandTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "割り当てられているプロパティの値が 0 未満です。"
  platform:
  - net462
- uid: System.Data.IDbCommand.CommandType
  id: CommandType
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CommandType
  nameWithType: IDbCommand.CommandType
  fullName: System.Data.IDbCommand.CommandType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "表示または指定方法、<xref:System.Data.IDbCommand.CommandText*>プロパティが解釈されます</xref:System.Data.IDbCommand.CommandText*>。"
  remarks: "CommandType プロパティに設定すると`StoredProcedure`、設定する必要があります、<xref:System.Data.IDbCommand.CommandText%2A>プロパティをストアド プロシージャの名前にします</xref:System.Data.IDbCommand.CommandText%2A>。 コマンドは、Execute メソッドの&1; つを呼び出すときに、このストアド プロシージャを実行します。"
  syntax:
    content: public System.Data.CommandType CommandType { get; set; }
    return:
      type: System.Data.CommandType
      description: "1 つ、 <xref href=&quot;System.Data.CommandType&quot;> </xref>値。 既定値は<xref uid=&quot;langword_csharp_Text&quot; name=&quot;Text&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.IDbCommand.CommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.Connection
  id: Connection
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Connection
  nameWithType: IDbCommand.Connection
  fullName: System.Data.IDbCommand.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定、 <xref href=&quot;System.Data.IDbConnection&quot;> </xref>のこのインスタンスによって使用される、 <xref href=&quot;System.Data.IDbCommand&quot;></xref>です。"
  syntax:
    content: public System.Data.IDbConnection Connection { get; set; }
    return:
      type: System.Data.IDbConnection
      description: "データ ソースに接続します。"
  overload: System.Data.IDbCommand.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.CreateParameter
  id: CreateParameter
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: CreateParameter()
  nameWithType: IDbCommand.CreateParameter()
  fullName: System.Data.IDbCommand.CreateParameter()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "新しいインスタンスを作成、 <xref href=&quot;System.Data.IDbDataParameter&quot;> </xref>オブジェクト。"
  remarks: "継承する場合<xref:System.Data.IDbCommand>、.NET Framework データ プロバイダーは、厳密に型指定されたバージョンの CreateParameter を実装します</xref:System.Data.IDbCommand>。"
  syntax:
    content: public System.Data.IDbDataParameter CreateParameter ();
    parameters: []
    return:
      type: System.Data.IDbDataParameter
      description: "<xref uid=&quot;langword_csharp_IDbDataParameter&quot; name=&quot;IDbDataParameter&quot; href=&quot;&quot;> </xref>オブジェクト。"
  overload: System.Data.IDbCommand.CreateParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteNonQuery
  id: ExecuteNonQuery
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteNonQuery()
  nameWithType: IDbCommand.ExecuteNonQuery()
  fullName: System.Data.IDbCommand.ExecuteNonQuery()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "に対して SQL ステートメントを実行、 <xref uid=&quot;langword_csharp_Connection&quot; name=&quot;Connection&quot; href=&quot;&quot;> </xref>オブジェクト、.NET Framework データ プロバイダーと影響を受ける行の数を返します。"
  remarks: "カタログ操作 (データベースの構造をクエリやテーブルなどのデータベース オブジェクトを作成するなど) を実行する、またはデータベース内のデータの変更を使用せずに、ExecuteNonQuery を使用することができます、 <xref:System.Data.DataSet>UPDATE、INSERT、または DELETE ステートメントを実行しています</xref:System.Data.DataSet>。       ExecuteNonQuery に行が返されませんが、出力パラメーターまたは戻り値のパラメーターにマップ データが挿入されます。       UPDATE、INSERT、および DELETE ステートメントでは、戻り値は、コマンドによって影響を受ける行の数にします。 その他のすべての種類のステートメントでは、戻り値は-1 です。"
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.OleDb.OleDbCommand>, and then executes it. To accomplish this, the method is passed a string that is a SQL SELECT statement and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData OleDbCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/m-system.data.idbcommand_1_1.cs)]\n [!code-vb[Classic WebData OleDbCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_1_1.vb)]"
  syntax:
    content: public int ExecuteNonQuery ();
    parameters: []
    return:
      type: System.Int32
      description: "影響を受ける行の数。"
  overload: System.Data.IDbCommand.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続が存在しません。       または、接続が開いていません。"
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteReader
  id: ExecuteReader
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteReader()
  nameWithType: IDbCommand.ExecuteReader()
  fullName: System.Data.IDbCommand.ExecuteReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "実行、 <> </> *> に対して、 <> </> *> をビルドし、 <xref href=&quot;System.Data.IDataReader&quot;></xref>です。"
  syntax:
    content: public System.Data.IDataReader ExecuteReader ();
    parameters: []
    return:
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>オブジェクト。"
  overload: System.Data.IDbCommand.ExecuteReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)
  id: ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteReader(CommandBehavior)
  nameWithType: IDbCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.IDbCommand.ExecuteReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "実行、 <> </> *> に対して、 <> </> *>、およびビルド、 <xref href=&quot;System.Data.IDataReader&quot;> </xref>のいずれかを使用して、 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>値。"
  remarks: "呼び出し元が呼び出す必要があります、<xref:System.Data.IDbConnection.Open%2A>のメソッド、<xref:System.Data.IDbCommand.Connection%2A>プロパティ</xref:System.Data.IDbCommand.Connection%2A></xref:System.Data.IDbConnection.Open%2A>。       ときに、<xref:System.Data.IDbCommand.CommandType%2A>プロパティに設定されている`StoredProcedure`、<xref:System.Data.IDbCommand.CommandText%2A>プロパティは、ストアド プロシージャの名前に設定する必要があります</xref:System.Data.IDbCommand.CommandText%2A></xref:System.Data.IDbCommand.CommandType%2A>。 コマンドは、 <xref:System.Data.IDbCommand.ExecuteReader%2A>。</xref:System.Data.IDbCommand.ExecuteReader%2A>を呼び出すときにこのストアド プロシージャを実行します。      > [!NOTE] > 使用<xref:System.Data.CommandBehavior>大きな値やバイナリ データを取得します</xref:System.Data.CommandBehavior>。 それ以外の場合、<xref:System.OutOfMemoryException>が発生して、接続は閉じられます</xref:System.OutOfMemoryException>。       While<xref:System.Data.IDataReader><xref:System.Data.IDbConnection>ビジー状態で提供している<xref:System.Data.IDataReader>.</xref:System.Data.IDataReader>が</xref:System.Data.IDbConnection>関連付けられている使用中で</xref:System.Data.IDataReader> この状態で他の操作はありません<xref:System.Data.IDbConnection>それを閉じる以外</xref:System.Data.IDbConnection> これは、まで続きます、 <xref:System.Data.IDataReader.Close%2A>、DataReader のメソッドが呼び出されます</xref:System.Data.IDataReader.Close%2A>。 DataReader が作成された場合<xref:System.Data.CommandBehavior>&quot;éý&quot; `CloseConnection`DataReader の終了、接続が自動的に終了します</xref:System.Data.CommandBehavior>。"
  syntax:
    content: public System.Data.IDataReader ExecuteReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "1 つ、 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>値。"
    return:
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>オブジェクト。"
  overload: System.Data.IDbCommand.ExecuteReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.ExecuteScalar
  id: ExecuteScalar
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: ExecuteScalar()
  nameWithType: IDbCommand.ExecuteScalar()
  fullName: System.Data.IDbCommand.ExecuteScalar()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "クエリを実行し、クエリによって返される結果セットの最初の行の最初の列を返します。 余分な列または行は無視されます。"
  remarks: "ExecuteScalar メソッドを使用すると、データベースから&1; つの値 (たとえば、集計値) を取得できます。 <xref:System.Data.IDbCommand.ExecuteReader%2A>メソッド、および&1; つの値を生成するために必要な操作を実行することは、 <xref:System.Data.IDataReader>。</xref:System.Data.IDataReader>によって返されるデータを使用して</xref:System.Data.IDbCommand.ExecuteReader%2A>を使用するよりも少ないコードが必要です。       一般的な ExecuteScalar クエリは、次の c# の例のように形式指定できる:```   CommandText = &quot;select count(*) as NumberOfRegions from region&quot;;   Int32 count = (int) ExecuteScalar();   ```結果セットの最初の行の最初の列が見つからない場合、null 参照 (`Nothing` Visual Basic で) が返されます。 データベース内の値が場合`null`、クエリを返します`DBNull.Value`です。"
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.SqlClient.SqlCommand>, and then executes it using <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>. The example is passed a string that is a Transact-SQL statement that returns an aggregate result, and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteScalar#1](~/add/codesnippet/csharp/m-system.data.idbcommand_0_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteScalar#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_0_1.vb)]"
  syntax:
    content: public object ExecuteScalar ();
    parameters: []
    return:
      type: System.Object
      description: "結果セットの最初の行の最初の列。"
  overload: System.Data.IDbCommand.ExecuteScalar*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.Parameters
  id: Parameters
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Parameters
  nameWithType: IDbCommand.Parameters
  fullName: System.Data.IDbCommand.Parameters
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets the <xref href=&quot;System.Data.IDataParameterCollection&quot;></xref>."
  remarks: ''
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.SqlClient.SqlCommand>, and displays its parameters. In the example, the application passes a <xref:System.Data.SqlClient.SqlConnection>, a query string that is a Transact-SQL SELECT statement, and an array of <xref:System.Data.SqlClient.SqlParameter> objects.  \n  \n [!code-cs[Classic WebData IDbCommand.Parameters Example#1](~/add/codesnippet/csharp/p-system.data.idbcommand_1_1.cs)]\n [!code-vb[Classic WebData IDbCommand.Parameters Example#1](~/add/codesnippet/visualbasic/p-system.data.idbcommand_1_1.vb)]"
  syntax:
    content: public System.Data.IDataParameterCollection Parameters { get; }
    return:
      type: System.Data.IDataParameterCollection
      description: "SQL ステートメントまたはストアド プロシージャのパラメーターです。"
  overload: System.Data.IDbCommand.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.Prepare
  id: Prepare
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Prepare()
  nameWithType: IDbCommand.Prepare()
  fullName: System.Data.IDbCommand.Prepare()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "データ ソースにコマンドの準備 (またはコンパイル済み) のバージョンを作成します。"
  remarks: "場合、<xref:System.Data.IDbCommand.CommandType%2A>プロパティに設定されている`TableDirect`準備が何も行われません</xref:System.Data.IDbCommand.CommandType%2A>。 場合<xref:System.Data.IDbCommand.CommandType%2A>に設定されている`StoredProcedure`、場合する可能性がありますが、準備する呼び出しは成功する必要があります</xref:System.Data.IDbCommand.CommandType%2A> サーバーに自動的に必要に応じて; を再利用のプランがキャッシュします。そのため、クライアント アプリケーションで直接このメソッドを呼び出す必要はありません。"
  example:
  - "The following example creates an instance of the derived class, <xref:System.Data.OleDb.OleDbCommand>, and opens the connection. The example then prepares a stored procedure on the data source by passing a string that is a SQL Select statement and a string to use to connect to the data source.  \n  \n [!code-vb[Classic WebData OleDbCommand.Prepare Example#1](~/add/codesnippet/visualbasic/m-system.data.idbcommand_2_1.vb)]\n [!code-cs[Classic WebData OleDbCommand.Prepare Example#1](~/add/codesnippet/csharp/m-system.data.idbcommand_2_1.cs)]"
  syntax:
    content: public void Prepare ();
    parameters: []
  overload: System.Data.IDbCommand.Prepare*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *> が設定されていません。      -or-       The <>*> is not <xref:System.Data.OleDb.OleDbConnection.Open*>.</xref:System.Data.OleDb.OleDbConnection.Open*>"
  platform:
  - net462
- uid: System.Data.IDbCommand.Transaction
  id: Transaction
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: Transaction
  nameWithType: IDbCommand.Transaction
  fullName: System.Data.IDbCommand.Transaction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定するトランザクション、 <xref uid=&quot;langword_csharp_Command&quot; name=&quot;Command&quot; href=&quot;&quot;> </xref>の .NET Framework データ プロバイダー オブジェクトを実行します。"
  syntax:
    content: public System.Data.IDbTransaction Transaction { get; set; }
    return:
      type: System.Data.IDbTransaction
      description: "<xref uid=&quot;langword_csharp_Command&quot; name=&quot;Command&quot; href=&quot;&quot;> </xref>の .NET Framework データ プロバイダー オブジェクトを実行します。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.IDbCommand.Transaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbCommand.UpdatedRowSource
  id: UpdatedRowSource
  parent: System.Data.IDbCommand
  langs:
  - csharp
  name: UpdatedRowSource
  nameWithType: IDbCommand.UpdatedRowSource
  fullName: System.Data.IDbCommand.UpdatedRowSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定にコマンドの結果を適用する方法、 <xref href=&quot;System.Data.DataRow&quot;> </xref>で使用された場合、<xref:System.Data.IDataAdapter.Update*>方法、 <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref></xref:System.Data.IDataAdapter.Update*> 。"
  syntax:
    content: public System.Data.UpdateRowSource UpdatedRowSource { get; set; }
    return:
      type: System.Data.UpdateRowSource
      description: "1 つ、 <xref href=&quot;System.Data.UpdateRowSource&quot;> </xref>値。 既定値は<xref uid=&quot;langword_csharp_Both&quot; name=&quot;Both&quot; href=&quot;&quot;></xref>コマンドが自動的に生成される場合を除き、します。 既定値は、 <xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.IDbCommand.UpdatedRowSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "入力された値は、のいずれかでがない、 <xref href=&quot;System.Data.UpdateRowSource&quot;> </xref>値。"
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.IDbCommand.Cancel
  parent: System.Data.IDbCommand
  isExternal: false
  name: Cancel()
  nameWithType: IDbCommand.Cancel()
  fullName: System.Data.IDbCommand.Cancel()
- uid: System.Data.IDbCommand.CommandText
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandText
  nameWithType: IDbCommand.CommandText
  fullName: System.Data.IDbCommand.CommandText
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.IDbCommand.CommandTimeout
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: IDbCommand.CommandTimeout
  fullName: System.Data.IDbCommand.CommandTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand.CommandType
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandType
  nameWithType: IDbCommand.CommandType
  fullName: System.Data.IDbCommand.CommandType
- uid: System.Data.CommandType
  parent: System.Data
  isExternal: false
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Data.IDbCommand.Connection
  parent: System.Data.IDbCommand
  isExternal: false
  name: Connection
  nameWithType: IDbCommand.Connection
  fullName: System.Data.IDbCommand.Connection
- uid: System.Data.IDbConnection
  parent: System.Data
  isExternal: false
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data.IDbCommand.CreateParameter
  parent: System.Data.IDbCommand
  isExternal: false
  name: CreateParameter()
  nameWithType: IDbCommand.CreateParameter()
  fullName: System.Data.IDbCommand.CreateParameter()
- uid: System.Data.IDbDataParameter
  parent: System.Data
  isExternal: false
  name: IDbDataParameter
  nameWithType: IDbDataParameter
  fullName: System.Data.IDbDataParameter
- uid: System.Data.IDbCommand.ExecuteNonQuery
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteNonQuery()
  nameWithType: IDbCommand.ExecuteNonQuery()
  fullName: System.Data.IDbCommand.ExecuteNonQuery()
- uid: System.Data.IDbCommand.ExecuteReader
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteReader()
  nameWithType: IDbCommand.ExecuteReader()
  fullName: System.Data.IDbCommand.ExecuteReader()
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteReader(CommandBehavior)
  nameWithType: IDbCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.IDbCommand.ExecuteReader(CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.IDbCommand.ExecuteScalar
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteScalar()
  nameWithType: IDbCommand.ExecuteScalar()
  fullName: System.Data.IDbCommand.ExecuteScalar()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.IDbCommand.Parameters
  parent: System.Data.IDbCommand
  isExternal: false
  name: Parameters
  nameWithType: IDbCommand.Parameters
  fullName: System.Data.IDbCommand.Parameters
- uid: System.Data.IDataParameterCollection
  parent: System.Data
  isExternal: false
  name: IDataParameterCollection
  nameWithType: IDataParameterCollection
  fullName: System.Data.IDataParameterCollection
- uid: System.Data.IDbCommand.Prepare
  parent: System.Data.IDbCommand
  isExternal: false
  name: Prepare()
  nameWithType: IDbCommand.Prepare()
  fullName: System.Data.IDbCommand.Prepare()
- uid: System.Data.IDbCommand.Transaction
  parent: System.Data.IDbCommand
  isExternal: false
  name: Transaction
  nameWithType: IDbCommand.Transaction
  fullName: System.Data.IDbCommand.Transaction
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.IDbCommand.UpdatedRowSource
  parent: System.Data.IDbCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: IDbCommand.UpdatedRowSource
  fullName: System.Data.IDbCommand.UpdatedRowSource
- uid: System.Data.UpdateRowSource
  parent: System.Data
  isExternal: false
  name: UpdateRowSource
  nameWithType: UpdateRowSource
  fullName: System.Data.UpdateRowSource
- uid: System.Data.IDbCommand.Cancel*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Cancel
  nameWithType: IDbCommand.Cancel
- uid: System.Data.IDbCommand.CommandText*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandText
  nameWithType: IDbCommand.CommandText
- uid: System.Data.IDbCommand.CommandTimeout*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: IDbCommand.CommandTimeout
- uid: System.Data.IDbCommand.CommandType*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CommandType
  nameWithType: IDbCommand.CommandType
- uid: System.Data.IDbCommand.Connection*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Connection
  nameWithType: IDbCommand.Connection
- uid: System.Data.IDbCommand.CreateParameter*
  parent: System.Data.IDbCommand
  isExternal: false
  name: CreateParameter
  nameWithType: IDbCommand.CreateParameter
- uid: System.Data.IDbCommand.ExecuteNonQuery*
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteNonQuery
  nameWithType: IDbCommand.ExecuteNonQuery
- uid: System.Data.IDbCommand.ExecuteReader*
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteReader
  nameWithType: IDbCommand.ExecuteReader
- uid: System.Data.IDbCommand.ExecuteScalar*
  parent: System.Data.IDbCommand
  isExternal: false
  name: ExecuteScalar
  nameWithType: IDbCommand.ExecuteScalar
- uid: System.Data.IDbCommand.Parameters*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Parameters
  nameWithType: IDbCommand.Parameters
- uid: System.Data.IDbCommand.Prepare*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Prepare
  nameWithType: IDbCommand.Prepare
- uid: System.Data.IDbCommand.Transaction*
  parent: System.Data.IDbCommand
  isExternal: false
  name: Transaction
  nameWithType: IDbCommand.Transaction
- uid: System.Data.IDbCommand.UpdatedRowSource*
  parent: System.Data.IDbCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: IDbCommand.UpdatedRowSource
