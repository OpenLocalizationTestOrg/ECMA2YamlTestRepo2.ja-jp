### YamlMime:ManagedReference
items:
- uid: System.Web.ApplicationServices.AuthenticationService
  id: AuthenticationService
  children:
  - System.Web.ApplicationServices.AuthenticationService.#ctor
  - System.Web.ApplicationServices.AuthenticationService.Authenticating
  - System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  - System.Web.ApplicationServices.AuthenticationService.IsLoggedIn
  - System.Web.ApplicationServices.AuthenticationService.Login(System.String,System.String,System.String,System.Boolean)
  - System.Web.ApplicationServices.AuthenticationService.Logout
  - System.Web.ApplicationServices.AuthenticationService.ValidateUser(System.String,System.String,System.String)
  langs:
  - csharp
  name: AuthenticationService
  nameWithType: AuthenticationService
  fullName: System.Web.ApplicationServices.AuthenticationService
  type: Class
  summary: "Web サービスとして ASP.NET フォーム認証にアクセスできます。"
  remarks: "認証サービス オブジェクトを使用してユーザーを認証することができます、[!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)]サービス。 WCF 認証サービスを使用するは、ユーザーの資格情報を格納する Web アプリケーションの外部であるアプリケーションからの ASP.NET メンバーシップを使用してユーザーを認証する必要があります。 アプリケーションは、送信および SOAP 形式のメッセージを処理できる必要があります。 認証サービス クラスを通じたにユーザーをログイン、ユーザーをログアウト、資格情報の検証、認証状態を確認、カスタマイズ認証では、して認証クッキーを設定します。       認証サービス クラスには、WCF サービスを通じてのみにアクセスする必要がある&4; つのメソッドが含まれています。 <xref:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn%2A>、 <xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>、 <xref:System.Web.ApplicationServices.AuthenticationService.Logout%2A>、および<xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>メソッド</xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A></xref:System.Web.ApplicationServices.AuthenticationService.Logout%2A></xref:System.Web.ApplicationServices.AuthenticationService.Login%2A></xref:System.Web.ApplicationServices.AuthenticationService.IsLoggedIn%2A>。 これらのメソッドを呼び出すには、Web サーバーに認証サービスを有効にして、Web サービスに WCF と互換性のあるクライアント アプリケーションを接続します。 認証サービスを構成する方法については、次を参照してください。[する方法: WCF 認証サービスを有効にする](~/add/includes/ajax-current-ext-md.md)です。       ユーザーのログオンにユーザーの資格情報を渡す、<xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>メソッド</xref:System.Web.ApplicationServices.AuthenticationService.Login%2A>。 資格情報が有効な場合は、認証サービス クラスは、認証 cookie を作成します。 認証 cookie の期限が切れていない場合、ユーザーの資格情報が認証済みであり、資格情報を再度検証する必要はありませんがわかっています。 (Cookie のない認証は、認証サービス クラスを使用できません) です。     認証サービスは、次の&2; つのイベントを発生させることができます: <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie></xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie> </xref:System.Web.ApplicationServices.AuthenticationService.Authenticating> 。 <xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>イベント、ユーザーの資格情報は検証されているときに発生します</xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>。 イベント ハンドラーを作成、<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>ユーザーの資格情報を検証する方法をカスタマイズするイベントです</xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>。 <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>ユーザーの資格情報が検証された後、認証 cookie が設定されるときに発生します</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>。 イベント ハンドラーを作成、<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>認証クッキーをカスタマイズするイベントです</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>。       <xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>メソッドが、認証用のユーザーの資格情報を確認しますが、認証チケットを返すことはできません</xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>。 使用して<xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>と、ユーザーがログイン前に、新しいアプリケーションのセッションの開始時の資格情報が有効であることを確認する必要があります</xref:System.Web.ApplicationServices.AuthenticationService.ValidateUser%2A>。       例については、コンソール アプリケーションから WCF 認証サービスを使用して、次を参照してください。[チュートリアル: ASP.NET アプリケーション サービスを使用する](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: >-
      [System.ServiceModel.Activation.AspNetCompatibilityRequirements(RequirementsMode=System.ServiceModel.Activation.AspNetCompatibilityRequirementsMode.Required)]

      [System.ServiceModel.ServiceBehavior(ConcurrencyMode=System.ServiceModel.ConcurrencyMode.Multiple, InstanceContextMode=System.ServiceModel.InstanceContextMode.Single, Namespace="http://asp.net/ApplicationServices/v200")]

      [System.ServiceModel.ServiceContract(Namespace="http://asp.net/ApplicationServices/v200")]

      public class AuthenticationService
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.#ctor
  id: '#ctor'
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: AuthenticationService()
  nameWithType: AuthenticationService.AuthenticationService()
  fullName: System.Web.ApplicationServices.AuthenticationService.AuthenticationService()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.ApplicationServices.AuthenticationService&quot;> </xref>クラスです。"
  syntax:
    content: public AuthenticationService ();
    parameters: []
  overload: System.Web.ApplicationServices.AuthenticationService.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.Authenticating
  id: Authenticating
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: Authenticating
  nameWithType: AuthenticationService.Authenticating
  fullName: System.Web.ApplicationServices.AuthenticationService.Authenticating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "ユーザーの資格情報が検証されると発生します。"
  remarks: "ユーザーの資格情報の検証中は、認証イベントが発生します。 ユーザーの資格情報を検証する方法をカスタマイズする認証イベントのイベント ハンドラーを作成します。"
  example:
  - "The following example shows how to bind an event handler for the Authenticating event in the `Application_Start` method of the Global.asax file.  \n  \n [!code-cs[System.Web.Security.LoginService_MultipleCredentials#1](~/add/codesnippet/csharp/e-system.web.application_0_1.asax)]\n [!code-vb[System.Web.Security.LoginService_MultipleCredentials#1](~/add/codesnippet/visualbasic/e-system.web.application_0_1.asax)]  \n  \n The following example shows an event handler for the Authenticating event in the Global.asax file. The event handler reads two authentication values from the <xref:System.Web.ApplicationServices.AuthenticatingEventArgs.CustomCredential%2A> property and passes them together with the user name and password to a custom authentication class named `StudentAuthentication`.  \n  \n [!code-cs[System.Web.Security.LoginService_MultipleCredentials#2](~/add/codesnippet/csharp/e-system.web.application_0_2.asax)]\n [!code-vb[System.Web.Security.LoginService_MultipleCredentials#2](~/add/codesnippet/visualbasic/e-system.web.application_0_2.asax)]"
  syntax:
    content: public static event EventHandler<System.Web.ApplicationServices.AuthenticatingEventArgs> Authenticating;
    return:
      type: System.EventHandler{System.Web.ApplicationServices.AuthenticatingEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  id: CreatingCookie
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: CreatingCookie
  nameWithType: AuthenticationService.CreatingCookie
  fullName: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "認証 cookie が設定されているときに発生します。"
  remarks: "CreatingCookie イベントは、ユーザーの資格情報が検証された後、認証 cookie が設定されるときに発生します。 認証 cookie をカスタマイズする CreatingCookie イベントのイベント ハンドラーを作成します。"
  example:
  - "The following example shows how to bind an event handler to the CreatingCookie event in the `Application_Start` method of the Global.asax file.  \n  \n [!code-cs[System.Web.Security.LoginService.CreatingCookieEventArgs#1](~/add/codesnippet/csharp/e-system.web.application_1_1.asax)]\n [!code-vb[System.Web.Security.LoginService.CreatingCookieEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.application_1_1.asax)]  \n  \n The following example shows an event handler for the CreatingCookie event in the Global.asax file. The event handler customizes the authentication cookie by adding the value in the <xref:System.Web.ApplicationServices.CreatingCookieEventArgs.CustomCredential%2A> property to the <xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A> property. Store the <xref:System.Web.ApplicationServices.CreatingCookieEventArgs.CustomCredential%2A> property in a cookie only if you know that the data in the property is not sensitive. Malicious users can access the values in the cookie.  \n  \n [!code-cs[System.Web.Security.LoginService.CreatingCookieEventArgs#2](~/add/codesnippet/csharp/e-system.web.application_1_2.asax)]\n [!code-vb[System.Web.Security.LoginService.CreatingCookieEventArgs#2](~/add/codesnippet/visualbasic/e-system.web.application_1_2.asax)]"
  syntax:
    content: public static event EventHandler<System.Web.ApplicationServices.CreatingCookieEventArgs> CreatingCookie;
    return:
      type: System.EventHandler{System.Web.ApplicationServices.CreatingCookieEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn
  id: IsLoggedIn
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: IsLoggedIn()
  nameWithType: AuthenticationService.IsLoggedIn()
  fullName: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "現在のユーザーが認証されたかどうかを判断します。"
  remarks: "IsLoggedIn メソッドでは、チェックして、現在のユーザーが認証されたかどうかを確認、 <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A>.property</xref:System.Security.Principal.IIdentity.IsAuthenticated%2A> 。      > [!NOTE] > Web サーバーで実行されているコードから IsLoggedIn メソッドを呼び出さないでください。 WCF サービスの一部としてのみ IsLoggedIn メソッドを呼び出します。"
  syntax:
    content: public bool IsLoggedIn ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザーが認証されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.Login(System.String,System.String,System.String,System.Boolean)
  id: Login(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: Login(String,String,String,Boolean)
  nameWithType: AuthenticationService.Login(String,String,String,Boolean)
  fullName: System.Web.ApplicationServices.AuthenticationService.Login(String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "ユーザーの資格情報し、資格情報が有効な場合は、認証チケット (クッキー) を作成を確認します。"
  remarks: "ログイン方法は、メンバーシップ プロバイダーを通じてユーザーの資格情報を検証します。 既定のメンバーシップ プロバイダーを使用したり、実行時にカスタム メンバーシップ プロバイダーを指定することができます。 <xref:System.Web.ApplicationServices.AuthenticationService>クラス パス`userName`と`password`をメンバーシップ プロバイダーの<xref:System.Web.Security.MembershipProvider.ValidateUser%2A>メソッド、にもかかわらずが通過しない`customCredential`</xref:System.Web.Security.MembershipProvider.ValidateUser%2A></xref:System.Web.ApplicationServices.AuthenticationService>。 場合<xref:System.Web.Security.MembershipProvider.ValidateUser%2A>返します`true`、 <xref:System.Web.ApplicationServices.AuthenticationService>cookie として認証チケットを作成します</xref:System.Web.ApplicationServices.AuthenticationService></xref:System.Web.Security.MembershipProvider.ValidateUser%2A>。 設定、`isPersistent`パラメーターを`true`を現在のセッション以降存続する認証チケットを作成します。      > [!NOTE] > 常に secure socket layer (SSL を HTTPS を使用して) と共に認証サービスを使用して機密データを保護します。       ログインにメソッド、<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>イベントおよび<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>イベント</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie></xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>。 イベント ハンドラーを作成<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>値のチェックインなどの認証をカスタマイズする`customCredential`または既定以外のメンバーシップ プロバイダーを通じて資格情報を検証します</xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>。 内の値`customCredential`既定のメンバーシップ プロバイダーでは検証されません。 認証 cookie をカスタマイズするには、 <xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>。</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>のイベント ハンドラーを作成します。      > [!NOTE] > Web サーバーで実行されているコードからログイン メソッドを呼び出さないでください。 WCF サービスの一部としてのみログイン メソッドを呼び出します。 詳細については、次を参照してください。 [ASP.NET 認証](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public bool Login (string username, string password, string customCredential, bool isPersistent);
    parameters:
    - id: username
      type: System.String
      description: "検証に使用するユーザー名。"
    - id: password
      type: System.String
      description: "指定したユーザーのパスワードです。"
    - id: customCredential
      type: System.String
      description: "他に、検証する値`userName`と`password`存在する場合、します。"
    - id: isPersistent
      type: System.Boolean
      description: "複数のセッションでの認証チケットが有効であるかどうかを示す値。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザーの資格情報が有効な場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.ApplicationServices.AuthenticationService.Login*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>userName</code>or <code>password</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.Logout
  id: Logout
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: Logout()
  nameWithType: AuthenticationService.Logout()
  fullName: System.Web.ApplicationServices.AuthenticationService.Logout()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "ブラウザーでの認証チケット (クッキー) を消去します。"
  remarks: "Logout メソッドでは、ブラウザーのクッキー コレクションから、認証 cookie を消去します。 ユーザーは、認証を受けるもう一度ログインする必要があります。       <xref:System.Web.ApplicationServices.AuthenticationService>クラスには、どの認証のチケットがクリアされているサーバーの情報は保存されません</xref:System.Web.ApplicationServices.AuthenticationService>。      > [!NOTE] > Web サーバーで実行されているコードから Logout メソッドを呼び出さないでください。 WCF サービスの一部としてのみ Logout メソッドを呼び出します。 詳細については、次を参照してください。 [ASP.NET 認証](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void Logout ();
    parameters: []
  overload: System.Web.ApplicationServices.AuthenticationService.Logout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.ApplicationServices.AuthenticationService.ValidateUser(System.String,System.String,System.String)
  id: ValidateUser(System.String,System.String,System.String)
  parent: System.Web.ApplicationServices.AuthenticationService
  langs:
  - csharp
  name: ValidateUser(String,String,String)
  nameWithType: AuthenticationService.ValidateUser(String,String,String)
  fullName: System.Web.ApplicationServices.AuthenticationService.ValidateUser(String,String,String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.ApplicationServices
  summary: "認証チケットを発行することがなく、ユーザーの資格情報を認証します。"
  remarks: "ValidateUser メソッドは、ユーザーの資格情報の認証を行いますが、認証クッキーを設定しません。 認証 cookie、せず、ユーザーは記録されません資格情報が有効な場合でも。       認証 cookie を受けることがなく、ユーザーの資格情報が有効かどうかをチェックする必要がありますと ValidateUser メソッドを使用します。 たとえば、これを行います認証 cookie がクライアント アプリケーションに既に格納されても、新しいセッションを開始するときに、ユーザーの資格情報がまだ有効であることを確認する場合。       TheValidateUser メソッド、<xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>イベントは発生しませんが、<xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie>イベント</xref:System.Web.ApplicationServices.AuthenticationService.CreatingCookie></xref:System.Web.ApplicationServices.AuthenticationService.Authenticating>。      > [!NOTE] > Web サーバーで実行されているコードから ValidateUser メソッドを呼び出さないでください。 WCF サービスの一部としてのみ ValidateUser メソッドを呼び出します。 詳細については、次を参照してください。 [ASP.NET 認証](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public bool ValidateUser (string username, string password, string customCredential);
    parameters:
    - id: username
      type: System.String
      description: "検証に使用するユーザー名。"
    - id: password
      type: System.String
      description: "指定したユーザーのパスワードです。"
    - id: customCredential
      type: System.String
      description: "他に、検証する値`userName`と`password`存在する場合、します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザーの資格情報が有効な場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.ApplicationServices.AuthenticationService.ValidateUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>userName</code>or <code>password</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.ApplicationServices.AuthenticationService.#ctor
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: AuthenticationService()
  nameWithType: AuthenticationService.AuthenticationService()
  fullName: System.Web.ApplicationServices.AuthenticationService.AuthenticationService()
- uid: System.Web.ApplicationServices.AuthenticationService.Authenticating
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Authenticating
  nameWithType: AuthenticationService.Authenticating
  fullName: System.Web.ApplicationServices.AuthenticationService.Authenticating
- uid: System.EventHandler{System.Web.ApplicationServices.AuthenticatingEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<AuthenticatingEventArgs>
  nameWithType: EventHandler<AuthenticatingEventArgs>
  fullName: System.EventHandler<System.Web.ApplicationServices.AuthenticatingEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.ApplicationServices.AuthenticatingEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.ApplicationServices.AuthenticatingEventArgs
    name: AuthenticatingEventArgs
    nameWithType: AuthenticatingEventArgs
    fullName: AuthenticatingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: CreatingCookie
  nameWithType: AuthenticationService.CreatingCookie
  fullName: System.Web.ApplicationServices.AuthenticationService.CreatingCookie
- uid: System.EventHandler{System.Web.ApplicationServices.CreatingCookieEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<CreatingCookieEventArgs>
  nameWithType: EventHandler<CreatingCookieEventArgs>
  fullName: System.EventHandler<System.Web.ApplicationServices.CreatingCookieEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.ApplicationServices.CreatingCookieEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.ApplicationServices.CreatingCookieEventArgs
    name: CreatingCookieEventArgs
    nameWithType: CreatingCookieEventArgs
    fullName: CreatingCookieEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: IsLoggedIn()
  nameWithType: AuthenticationService.IsLoggedIn()
  fullName: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.ApplicationServices.AuthenticationService.Login(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Login(String,String,String,Boolean)
  nameWithType: AuthenticationService.Login(String,String,String,Boolean)
  fullName: System.Web.ApplicationServices.AuthenticationService.Login(String,String,String,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.ApplicationServices.AuthenticationService.Logout
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Logout()
  nameWithType: AuthenticationService.Logout()
  fullName: System.Web.ApplicationServices.AuthenticationService.Logout()
- uid: System.Web.ApplicationServices.AuthenticationService.ValidateUser(System.String,System.String,System.String)
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: ValidateUser(String,String,String)
  nameWithType: AuthenticationService.ValidateUser(String,String,String)
  fullName: System.Web.ApplicationServices.AuthenticationService.ValidateUser(String,String,String)
- uid: System.Web.ApplicationServices.AuthenticationService.#ctor*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: AuthenticationService
  nameWithType: AuthenticationService.AuthenticationService
- uid: System.Web.ApplicationServices.AuthenticationService.IsLoggedIn*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: IsLoggedIn
  nameWithType: AuthenticationService.IsLoggedIn
- uid: System.Web.ApplicationServices.AuthenticationService.Login*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Login
  nameWithType: AuthenticationService.Login
- uid: System.Web.ApplicationServices.AuthenticationService.Logout*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: Logout
  nameWithType: AuthenticationService.Logout
- uid: System.Web.ApplicationServices.AuthenticationService.ValidateUser*
  parent: System.Web.ApplicationServices.AuthenticationService
  isExternal: false
  name: ValidateUser
  nameWithType: AuthenticationService.ValidateUser
