### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Devices.Keyboard
  id: Keyboard
  children:
  - Microsoft.VisualBasic.Devices.Keyboard.#ctor
  - Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  - Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  - Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  - Microsoft.VisualBasic.Devices.Keyboard.NumLock
  - Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  - Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  - Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  - Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  langs:
  - csharp
  name: Keyboard
  nameWithType: Keyboard
  fullName: Microsoft.VisualBasic.Devices.Keyboard
  type: Class
  summary: "キーが現在、押されているし、キーストロークをアクティブなウィンドウに送信するためのメソッドを提供する新機能など、キーボードの現在の状態にアクセスするためには、プロパティを提供します。"
  remarks: "`My.Computer.Keyboard`オブジェクトは、コンピューターのキーボード インターフェイスを提供します。 プロパティ、`My.Computer.Keyboard`いくつかの特殊なキーの状態に関する情報を提供します。 `My.Computer.Keyboard.SendKeys`メソッドにより、キーボードで型指定されているかのようにキーをアクティブなウィンドウに送信できます。      ## 関連するタスクの例を次の表のタスク、`My.Computer.Keyboard`オブジェクト。      |||  |-|-|  ||参照してください |  |アプリケーションにキーストロークを送信 |[する方法: アプリケーションを起動してキーストロークを送る (Visual Basic)](~/add/includes/ajax-current-ext-md.md)|     ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |いいえ |  |Windows サービス |**Yes**|  |Web サイト |いいえ |"
  example:
  - "This example uses the `My.Computer.Keyboard.CtrlKeyDown` property to determine if the computer's CTRL key is pressed.  \n  \n [!code-vb[VbVbalrMyComputer#36](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#36)]"
  syntax:
    content: public class Keyboard
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: Keyboard()
  nameWithType: Keyboard.Keyboard()
  fullName: Microsoft.VisualBasic.Devices.Keyboard.Keyboard()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "新しいインスタンスを初期化、 <xref href=&quot;Microsoft.VisualBasic.Devices.Keyboard&quot;> </xref>クラスです。"
  syntax:
    content: public Keyboard ();
    parameters: []
  overload: Microsoft.VisualBasic.Devices.Keyboard.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  id: AltKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "取得、 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> ALT キーが押されてかどうかを示すです。"
  remarks: "`My.Computer.Keyboard.AltKeyDown`プロパティと同様の機能を提供する、<xref:System.Windows.Forms.Control.ModifierKeys%2A>プロパティ</xref:System.Windows.Forms.Control.ModifierKeys%2A>。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |いいえ |  |Windows サービス |**Yes**|  |Web サイト |いいえ |"
  example:
  - "This example uses the `My.Computer.Keyboard.AltKeyDown` property to determine if the computer's ALT key is down.  \n  \n [!code-vb[VbVbalrMyComputer#23](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#23)]"
  syntax:
    content: public bool AltKeyDown { get; }
    return:
      type: System.Boolean
      description: 'A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref>値: <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> 、ALT キーがダウンして、それ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。'
  overload: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  id: CapsLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: CapsLock
  nameWithType: Keyboard.CapsLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "取得、 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> CAPS LOCK がオンになっているかどうかを示すです。"
  remarks: "CAPS LOCK の状態のみが返されます。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |いいえ |  |Windows サービス |**Yes**|  |Web サイト |いいえ |"
  example:
  - "This example uses the `My.Computer.Keyboard.CapsLock` property to determine if the computer's CAPS LOCK is turned on.  \n  \n [!code-vb[VbVbalrMyComputer#50](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#50)]"
  syntax:
    content: public bool CapsLock { get; }
    return:
      type: System.Boolean
      description: 'A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref>値: <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> CAPS LOCK がオンです。 それ以外の場合になっている場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。'
  overload: Microsoft.VisualBasic.Devices.Keyboard.CapsLock*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  id: CtrlKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "取得、 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> CTRL キーが押されてかどうかを示すです。"
  remarks: "`My.Computer.Keyboard.CtrlKeyDown`プロパティと同様の機能を提供する、<xref:System.Windows.Forms.Control.ModifierKeys%2A>プロパティ</xref:System.Windows.Forms.Control.ModifierKeys%2A>。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |いいえ |  |Windows サービス |**Yes**|  |Web サイト |いいえ |"
  example:
  - "This example uses the `My.Computer.Keyboard.CtrlKeyDown` property to determine if the computer's CTRL key is down.  \n  \n [!code-vb[VbVbalrMyComputer#34](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#34)]"
  syntax:
    content: public bool CtrlKeyDown { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>CTRL キーが; ダウンした場合それ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  id: NumLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: NumLock
  nameWithType: Keyboard.NumLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "取得、 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> NUM LOCK キーがかどうかを示すです。"
  remarks: "NUM LOCK キーの状態のみが返されます。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |いいえ |  |Windows サービス |**Yes**|  |Web サイト |いいえ |"
  example:
  - "This example uses the `My.Computer.Keyboard.NumLock` property to determine if the computer's NUM LOCK key is on.  \n  \n [!code-vb[VbVbalrMyComputer#48](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#48)]"
  syntax:
    content: public bool NumLock { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>NUMLOCK が; にある場合それ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.NumLock*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  id: ScrollLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "取得、 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> SCROLL LOCK キーがオンかどうかを示すです。"
  remarks: "SCROLL LOCK キーの状態のみが返されます。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |いいえ |  |Windows サービス |**Yes**|  |Web サイト |いいえ |"
  example:
  - "This example uses the `My.Computer.Keyboard.ScrollLock` property to determine if the computer's SCROLL LOCK key is on.  \n  \n [!code-vb[VbVbalrMyComputer#31](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#31)]"
  syntax:
    content: public bool ScrollLock { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>スクロール ロックが; にある場合それ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  id: SendKeys(System.String)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: SendKeys(String)
  nameWithType: Keyboard.SendKeys(String)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "キーボードで入力する&1; つまたは複数のキーストロークをアクティブなウィンドウに送信します。"
  remarks: "`My.Computer.Keyboard.SendKeys`メソッドと同様の機能を提供する、<xref:System.Windows.Forms.SendKeys.Send%2A>と<xref:System.Windows.Forms.SendKeys.SendWait%2A>メソッド</xref:System.Windows.Forms.SendKeys.SendWait%2A></xref:System.Windows.Forms.SendKeys.Send%2A>。       `wait`引数は、アプリケーションを続行する前に、他のアプリケーションが終了した場合に便利です。      > [!NOTE] > 別のアプリケーションをアクティブ化するマネージ メソッドがないため、現在のアプリケーション内でこのクラスを使用して、手動で、キーを送信するウィンドウを選択かなど、Windows API のメソッドを使用して`FindWindow`と`SetForegroundWindow`、他のアプリケーションにフォーカスを設定します。 詳細については、次を参照してください。[チュートリアル: Windows Api の呼び出し](~/add/includes/ajax-current-ext-md.md)です。       `keys`引数は、いずれか&1; つのキーまたは alt キーを押し、CTRL、shift キーを押し (またはそれらのキーの任意の組み合わせ) と組み合わせて使用する任意のキーを指定できます。 各キーがなどの&1; つ以上の文字で表される`a`の文字&quot;a&quot;、または`{ENTER}`ENTER キーをします。       SHIFT キーを組み合わせて、コードで`+`(プラス記号) です。 CTRL キーを組み合わせて、コードで`^`(キャレット)。 ALT キーを組み合わせて、コードで`%`(パーセント)。 繰り返しのキーを指定するには、フォームを使用して`{`*キー数*`}`です。 間にスペースを配置する必要があります*キー*と*数*です。 たとえば、`{LEFT 42}`意味&quot;左方向キーを押して 42 時間&quot;です。`{h 10}`手段&quot;&quot;h&quot; 10 回押します&quot;。       次の表は、(ENTER キーまたは TAB) などの対応するキーを押したときに表示されていない文字を指定するために使用するコードを示します。      |||  |-|-|  |キー |コード |  |BACKSPACE |{BACKSPACE} または {BS} |  |中断 |{中断} |  |CAPS LOCK |{CAPSLOCK} |  |オフ |{オフ} |  |削除 |{削除} または {DEL} |  |下向きの矢印 |{ダウン} |  |終了 |{終了} |  |入力 (テンキー) |{に入力} |  |入力してください | ~ |  |ESC |{エスケープ} または {ESC} |  |ヘルプ |{ヘルプ} |  |ホーム |{ホーム} |  |INS |{挿入} |  |左矢印 |{LEFT} が |  |NUM LOCK |{NUMLOCK} |  |1 ページ下 |{した} |  |ページ上に |{PGUP} |  |返す |{返す} |  |右矢印 |{右} |  |SCROLL LOCK |{SCROLLLOCK} |  |タブ |{タブ} |  |上向き矢印 |{最大} |  |F1 ~ F15 |{F1} {F15} を通じて |     ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |いいえ |  |Windows サービス |**Yes**|  |Web サイト |いいえ |"
  example:
  - "This example uses the `My.Computer.Keyboard.SendKeys` method to send keystrokes to an external application, the Calculator application, started by the `Shell` function.  \n  \n [!code-vb[VbVbalrMyComputer#25](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#25)]  \n  \n A <xref:System.ArgumentException> exception is raised if an application with the requested process identifier cannot be found.  \n  \n The call to the `Shell` function requires full trust (<xref:System.Security.SecurityException> class)."
  syntax:
    content: public void SendKeys (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>送信するキーを定義します。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "部分的に信頼された状況では、ユーザーが必要なアクセス許可を持っていない存在しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  id: SendKeys(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: SendKeys(String,Boolean)
  nameWithType: Keyboard.SendKeys(String,Boolean)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "キーボードで入力する&1; つまたは複数のキーストロークをアクティブなウィンドウに送信します。"
  remarks: "`My.Computer.Keyboard.SendKeys`メソッドと同様の機能を提供する、<xref:System.Windows.Forms.SendKeys.Send%2A>と<xref:System.Windows.Forms.SendKeys.SendWait%2A>メソッド</xref:System.Windows.Forms.SendKeys.SendWait%2A></xref:System.Windows.Forms.SendKeys.Send%2A>。       `wait`引数は、アプリケーションを続行する前に、他のアプリケーションが終了した場合に便利です。      > [!NOTE] > 別のアプリケーションをアクティブ化するマネージ メソッドがないため、現在のアプリケーション内でこのクラスを使用して、手動で、キーを送信するウィンドウを選択かなど、Windows API のメソッドを使用して`FindWindow`と`SetForegroundWindow`、他のアプリケーションにフォーカスを設定します。 詳細については、次を参照してください。[チュートリアル: Windows Api の呼び出し](~/add/includes/ajax-current-ext-md.md)です。       `keys`引数は、いずれか&1; つのキーまたは alt キーを押し、CTRL、shift キーを押し (またはそれらのキーの任意の組み合わせ) と組み合わせて使用する任意のキーを指定できます。 各キーがなどの&1; つ以上の文字で表される`a`の文字&quot;a&quot;、または`{ENTER}`ENTER キーをします。       SHIFT キーを組み合わせて、コードで`+`(プラス記号) です。 CTRL キーを組み合わせて、コードで`^`(キャレット)。 ALT キーを組み合わせて、コードで`%`(パーセント)。 繰り返しのキーを指定するには、フォームを使用して`{`*キー数*`}`です。 間にスペースを配置する必要があります*キー*と*数*です。 たとえば、`{LEFT 42}`意味&quot;左方向キーを押して 42 時間&quot;です。`{h 10}`手段&quot;&quot;h&quot; 10 回押します&quot;。       次の表は、(ENTER キーまたは TAB) などの対応するキーを押したときに表示されていない文字を指定するために使用するコードを示します。      |||  |-|-|  |キー |コード |  |BACKSPACE |{BACKSPACE} または {BS} |  |中断 |{中断} |  |CAPS LOCK |{CAPSLOCK} |  |オフ |{オフ} |  |削除 |{削除} または {DEL} |  |下向きの矢印 |{ダウン} |  |終了 |{終了} |  |入力 (テンキー) |{に入力} |  |入力してください | ~ |  |ESC |{エスケープ} または {ESC} |  |ヘルプ |{ヘルプ} |  |ホーム |{ホーム} |  |INS |{挿入} |  |左矢印 |{LEFT} が |  |NUM LOCK |{NUMLOCK} |  |1 ページ下 |{した} |  |ページ上に |{PGUP} |  |返す |{返す} |  |右矢印 |{右} |  |SCROLL LOCK |{SCROLLLOCK} |  |タブ |{タブ} |  |上向き矢印 |{最大} |  |F1 ~ F15 |{F1} {F15} を通じて |     ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |いいえ |  |Windows サービス |**Yes**|  |Web サイト |いいえ |"
  example:
  - "This example uses the `My.Computer.Keyboard.SendKeys` method to send keystrokes to an external application, the Calculator application, started by the `Shell` function.  \n  \n [!code-vb[VbVbalrMyComputer#25](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#25)]  \n  \n A <xref:System.ArgumentException> exception is raised if an application with the requested process identifier cannot be found.  \n  \n The call to the `Shell` function requires full trust (<xref:System.Security.SecurityException> class)."
  syntax:
    content: public void SendKeys (string keys, bool wait);
    parameters:
    - id: keys
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>送信するキーを定義します。"
    - id: wait
      type: System.Boolean
      description: "任意。 A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref>キーボード操作を行って、アプリケーションを続行する前に処理されるまで待機するかどうかを指定します。 <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>既定では。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "部分的に信頼された状況では、ユーザーが必要なアクセス許可を持っていない存在しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  id: ShiftKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "取得、 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> SHIFT キーが押されてかどうかを示すです。"
  remarks: "`My.Computer.Keyboard.ShiftKeyDown`プロパティと同様の機能を提供する、<xref:System.Windows.Forms.Control.ModifierKeys%2A>プロパティ</xref:System.Windows.Forms.Control.ModifierKeys%2A>。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |いいえ |  |Windows サービス |**Yes**|  |Web サイト |いいえ |"
  example:
  - "This example uses the `My.Computer.Keyboard.ShiftKeyDown` property to determine if one of the computer's SHIFT keys is down.  \n  \n [!code-vb[VbVbalrMyComputer#47](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#47)]"
  syntax:
    content: public bool ShiftKeyDown { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>場合は、SHIFT キーを押したです。それ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: Keyboard()
  nameWithType: Keyboard.Keyboard()
  fullName: Microsoft.VisualBasic.Devices.Keyboard.Keyboard()
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CapsLock
  nameWithType: Keyboard.CapsLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: NumLock
  nameWithType: Keyboard.NumLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.NumLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys(String)
  nameWithType: Keyboard.SendKeys(String)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys(String,Boolean)
  nameWithType: Keyboard.SendKeys(String,Boolean)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String,Boolean)
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: Keyboard
  nameWithType: Keyboard.Keyboard
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CapsLock
  nameWithType: Keyboard.CapsLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: NumLock
  nameWithType: Keyboard.NumLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys
  nameWithType: Keyboard.SendKeys
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
