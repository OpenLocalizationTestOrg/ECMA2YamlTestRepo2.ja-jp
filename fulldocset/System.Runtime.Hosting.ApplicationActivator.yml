### YamlMime:ManagedReference
items:
- uid: System.Runtime.Hosting.ApplicationActivator
  id: ApplicationActivator
  children:
  - System.Runtime.Hosting.ApplicationActivator.#ctor
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  - System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  langs:
  - csharp
  name: ApplicationActivator
  nameWithType: ApplicationActivator
  fullName: System.Runtime.Hosting.ApplicationActivator
  type: Class
  summary: "アセンブリのマニフェストに基づくのライセンス認証の基本クラスを提供します。"
  remarks: "各 ApplicationActivator クラスの&1; つの指定されたインスタンスがある<xref:System.AppDomain>呼び出しをルーティングするすべてのアクティブ化します</xref:System.AppDomain>。 <xref:System.AppDomainManager>現在の<xref:System.AppDomain>この目的のため、独自のカスタム ApplicationActivator を提供することができます</xref:System.AppDomain></xref:System.AppDomainManager>。 カスタム ApplicationActivator が指定されていない場合、既定のインスタンス ApplicationActivator が作成されます。       次の手順は、既定の動作を記述<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>メソッドの実装: 1</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> 。  場合にチェック、<xref:System.ActivationContext>のアドインをアクティブ化された一致する、 <xref:System.ActivationContext>、現在のドメインですない場合、手順 2. に進みます。</xref:System.ActivationContext> </xref:System.ActivationContext> 。 それ以外の場合、アセンブリを実行し、オブジェクト ハンドルでラップした結果を返します。      2.  新しい<xref:System.AppDomain>。</xref:System.AppDomain>でアドインをアクティブ化します。 次の手順は<xref:System.AppDomain><xref:System.Runtime.Hosting.ActivationArguments>、アドインを</xref:System.Runtime.Hosting.ActivationArguments>使用して</xref:System.AppDomain>新しいを初期化するために実行します。          1.  新しい<xref:System.AppDomainSetup><xref:System.Runtime.Hosting.ActivationArguments>オブジェクトを含むアドインのアクティブ化コンテキスト</xref:System.Runtime.Hosting.ActivationArguments>を使用してオブジェクト</xref:System.AppDomainSetup>を作成します。          2.  呼び出し、<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>メソッドを使用して新しいドメインを作成、<xref:System.AppDomainSetup>オブジェクト</xref:System.AppDomainSetup></xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>。          3.  <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>メソッドは<xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName><xref:System.Security.Policy.ApplicationTrust>、アドインのオブジェクト</xref:System.Security.Policy.ApplicationTrust>を取得するメソッド</xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName>を呼び出します</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 場合、<xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A>プロパティから返される`true`、アドインを実行します</xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A>。 ない場合は、<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>スロー、<xref:System.Security.Policy.PolicyException>を示す実行アクセス許可を取得できませんでした</xref:System.Security.Policy.PolicyException></xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>。          4.  アドインを実行し、新しい信頼できる場合に<xref:System.AppDomain>が作成され、構成されている、 <xref:System.ActivationContext>、アドインのアドインの読み込みし、実行されるとします</xref:System.ActivationContext></xref:System.AppDomain>。          5.  オブジェクト ハンドルにラップされて、アドインのアクティブ化の結果が返されます。       カスタム アクティベータは、特定の一連の状況にアドインのアクティブ化を調整できます。 たとえば、カスタムのアクティベーターが見つかりませんでした既存<xref:System.AppDomain>たびに新しいドメインを作成する代わりのこのアドインのアクティブ化する</xref:System.AppDomain>。       次の手順を既存のアドインをアクティブにするカスタム ApplicationActivator の動作を記述する<xref:System.AppDomain>: 1</xref:System.AppDomain> 。  カスタムのアクティベーターが同じドメインを検索する<xref:System.ActivationContext>アドインをアクティブ化するとします</xref:System.ActivationContext>。      2.  場合の<xref:System.ActivationContext>プロセスでは、カスタムのアクティベーターを作成、新しい<xref:System.AppDomain>この<xref:System.ActivationContext>呼び出すことによって<xref:System.AppDomain.CreateDomain%2A>メソッドを直接、または委任するのには、<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>基本クラスの</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>このアクティビティ</xref:System.AppDomain.CreateDomain%2A></xref:System.ActivationContext>の</xref:System.AppDomain>前に表示されていることはありません</xref:System.ActivationContext>      3.  同じ既存のドメインがある場合<xref:System.ActivationContext>、アクティベーターを委任することができ、<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>メソッドの呼び出しでターゲット ドメイン ApplicationActivator を</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A></xref:System.ActivationContext>。 これは、ターゲット<xref:System.AppDomain>。</xref:System.AppDomain>内にある ApplicationActivator へのクロス ドメイン呼び出しであることに注意してください。"
  example:
  - "The following code example shows how to obtain an ApplicationActivator object from the current <xref:System.AppDomain.DomainManager%2A> for a manifest-based application.  \n  \n [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/visualbasic/t-system.runtime.hosting_0_1.vb)]\n [!code-cs[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/csharp/t-system.runtime.hosting_0_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ApplicationActivator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  id: '#ctor'
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Runtime.Hosting.ApplicationActivator&quot;> </xref>クラスです。"
  syntax:
    content: public ApplicationActivator ();
    parameters: []
  overload: System.Runtime.Hosting.ApplicationActivator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  id: CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "指定したアクティベーション コンテキストを使用して、アクティブ化するアプリケーションのインスタンスを作成します。"
  remarks: "このメソッドはアプリケーションのマニフェストに基づくアクティベーションものです。"
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref>をアクティブ化アプリケーションを識別します。"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref>されているアプリケーションの実行の戻り値のラッパー。 戻り値は、ラップを実際のオブジェクトにアクセスすることがあります。"
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  id: CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "指定したアクティベーション コンテキストおよびカスタム アクティベーション データを使用して、アクティブ化するアプリケーションのインスタンスを作成します。"
  remarks: "このメソッドはアプリケーションのマニフェストに基づくアクティベーションものです。 ライセンス認証データは、URL のクエリ文字列部分などの情報で構成されます。"
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref>をアクティブ化アプリケーションを識別します。"
    - id: activationCustomData
      type: System.String[]
      description: "カスタム アクティベーション データ。"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref>されているアプリケーションの実行の戻り値のラッパー。 戻り値は、ラップを実際のオブジェクトにアクセスすることがあります。"
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  id: CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "指定されたを使用するアプリケーションのインスタンスを作成<xref href=&quot;System.AppDomainSetup&quot;></xref>オブジェクト。"
  remarks: "このメソッドはアプリケーションのマニフェストに基づくアクティベーションものです。"
  syntax:
    content: protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);
    parameters:
    - id: adSetup
      type: System.AppDomainSetup
      description: "<xref href=&quot;System.AppDomainSetup&quot;> </xref>オブジェクト<xref:System.AppDomainSetup.ActivationArguments*>プロパティがアクティブにするアプリケーションを識別します</xref:System.AppDomainSetup.ActivationArguments*>。"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref>されているアプリケーションの実行の戻り値のラッパー。 戻り値は、ラップを実際のオブジェクトにアクセスすることがあります。"
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.AppDomainSetup.ActivationArguments*> property of <code>adSetup </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.</xref:System.AppDomainSetup.ActivationArguments*>"
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "アプリケーション インスタンスは、現在のアプリケーション ドメインのポリシー設定は、このアプリケーションを実行するアクセス許可を提供しないのでを実行できませんでした。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
- uid: System.AppDomainSetup
  parent: System
  isExternal: false
  name: AppDomainSetup
  nameWithType: AppDomainSetup
  fullName: System.AppDomainSetup
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator
  nameWithType: ApplicationActivator.ApplicationActivator
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance
  nameWithType: ApplicationActivator.CreateInstance
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper
  nameWithType: ApplicationActivator.CreateInstanceHelper
