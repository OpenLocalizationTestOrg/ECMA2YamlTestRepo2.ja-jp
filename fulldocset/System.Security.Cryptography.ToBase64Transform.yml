### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ToBase64Transform
  id: ToBase64Transform
  children:
  - System.Security.Cryptography.ToBase64Transform.#ctor
  - System.Security.Cryptography.ToBase64Transform.CanReuseTransform
  - System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks
  - System.Security.Cryptography.ToBase64Transform.Clear
  - System.Security.Cryptography.ToBase64Transform.Dispose
  - System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)
  - System.Security.Cryptography.ToBase64Transform.Finalize
  - System.Security.Cryptography.ToBase64Transform.InputBlockSize
  - System.Security.Cryptography.ToBase64Transform.OutputBlockSize
  - System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: ToBase64Transform
  nameWithType: ToBase64Transform
  fullName: System.Security.Cryptography.ToBase64Transform
  type: Class
  summary: "変換、 <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref>を base 64。"
  remarks: "人間ではありません、フォーム内の任意のビット シーケンスを表す base 64 コンテンツ転送エンコード読み取り可能です。"
  example:
  - "The following code example demonstrates how to use members of the ToBase64Transform class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/csharp/t-system.security.crypto_103_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/visualbasic/t-system.security.crypto_103_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/cpp/t-system.security.crypto_103_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ToBase64Transform : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: ToBase64Transform()
  nameWithType: ToBase64Transform.ToBase64Transform()
  fullName: System.Security.Cryptography.ToBase64Transform.ToBase64Transform()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;> </xref>クラスです。"
  syntax:
    content: public ToBase64Transform ();
    parameters: []
  overload: System.Security.Cryptography.ToBase64Transform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: ToBase64Transform.CanReuseTransform
  fullName: System.Security.Cryptography.ToBase64Transform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在の変換を再利用できるかどうかを示す値を取得します。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the CanReuseTransform property to determine if the current transform can be reused. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/csharp/p-system.security.crypto_75_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/visualbasic/p-system.security.crypto_75_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/cpp/p-system.security.crypto_75_1.cpp)]"
  syntax:
    content: public virtual bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ToBase64Transform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: ToBase64Transform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "複数のブロックを変換できるかどうかを示す値を取得します。"
  remarks: "現在の実装では&1; ブロックだけ変換できる、一度にため、このプロパティは常に`false`です。"
  example:
  - "The following code example demonstrates how to call the CanTransformMultipleBlocks method to verify that multiple blocks can be transformed. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/csharp/p-system.security.crypto_69_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/visualbasic/p-system.security.crypto_69_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/cpp/p-system.security.crypto_69_1.cpp)]"
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.Clear
  id: Clear
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: Clear()
  nameWithType: ToBase64Transform.Clear()
  fullName: System.Security.Cryptography.ToBase64Transform.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;></xref>です。"
  remarks: "このメソッドは、単純な<xref:System.IDisposable.Dispose%2A?displayProperty=fullName>。</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       呼び出す`Dispose`により、リソースで使用される、<xref:System.Security.Cryptography.ToBase64Transform>を他の目的を再割り当てする</xref:System.Security.Cryptography.ToBase64Transform>。 詳細については`Dispose`を参照してください[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to call the Clear method to free up unused resources by the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/csharp/m-system.security.crypto_100_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/visualbasic/m-system.security.crypto_100_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/cpp/m-system.security.crypto_100_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.ToBase64Transform.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.Dispose
  id: Dispose
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: Dispose()
  nameWithType: ToBase64Transform.Dispose()
  fullName: System.Security.Cryptography.ToBase64Transform.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在のインスタンスによって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;> </xref>クラスです。"
  remarks: "呼び出す`Dispose` <xref:System.Security.Cryptography.ToBase64Transform>.</xref:System.Security.Cryptography.ToBase64Transform>の使用が終了したときに `Dispose`メソッドによって、<xref:System.Security.Cryptography.ToBase64Transform>使用不可の状態</xref:System.Security.Cryptography.ToBase64Transform>。 呼び出した後`Dispose`へのすべての参照を解放する必要があります、<xref:System.Security.Cryptography.ToBase64Transform>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Security.Cryptography.ToBase64Transform>占有されていた</xref:System.Security.Cryptography.ToBase64Transform></xref:System.Security.Cryptography.ToBase64Transform>。       詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 常に呼び出し`Dispose`<xref:System.Security.Cryptography.ToBase64Transform></xref:System.Security.Cryptography.ToBase64Transform>の最後の参照を解放する前に。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Security.Cryptography.ToBase64Transform>オブジェクトの`Finalize`メソッド</xref:System.Security.Cryptography.ToBase64Transform>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.ToBase64Transform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ToBase64Transform.Dispose(Boolean)
  fullName: System.Security.Cryptography.ToBase64Transform.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび`Finalize`メソッドです。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`disposing パラメーター設定したメソッド`true`です。 `Finalize`呼び出す`Dispose`するメソッドと`false`です。       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Security.Cryptography.ToBase64Transform>参照。</xref:System.Security.Cryptography.ToBase64Transform> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Security.Cryptography.ToBase64Transform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.Finalize
  id: Finalize
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: Finalize()
  nameWithType: ToBase64Transform.Finalize()
  fullName: System.Security.Cryptography.ToBase64Transform.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;></xref>です。"
  syntax:
    content: ~ToBase64Transform ();
    parameters: []
  overload: System.Security.Cryptography.ToBase64Transform.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: ToBase64Transform.InputBlockSize
  fullName: System.Security.Cryptography.ToBase64Transform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "入力ブロック サイズを取得します。"
  remarks: "この変換の入力ブロック サイズは、3 バイトです。"
  example:
  - "The following code example demonstrates how to call the InputBlockSize property to retrieve the input block size of the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/csharp/p-system.security.crypto_70_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/visualbasic/p-system.security.crypto_70_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/cpp/p-system.security.crypto_70_1.cpp)]"
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "入力データのサイズ (バイト単位) をブロックします。"
  overload: System.Security.Cryptography.ToBase64Transform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: ToBase64Transform.OutputBlockSize
  fullName: System.Security.Cryptography.ToBase64Transform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "出力ブロック サイズを取得します。"
  remarks: "この変換の出力ブロック サイズは、4 バイトです。"
  example:
  - "The following code example demonstrates how to call the OutputBlockSize property to create a new byte array with the size of the output block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/csharp/p-system.security.crypto_8_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/visualbasic/p-system.security.crypto_8_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/cpp/p-system.security.crypto_8_1.cpp)]"
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "出力データ ブロックのサイズ (バイト単位)。"
  overload: System.Security.Cryptography.ToBase64Transform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Base 64 入力バイト配列の指定した領域に変換し、結果を出力バイト配列の指定した領域にコピーします。"
  remarks: "<xref:System.Security.Cryptography.ToBase64Transform>クラスは、ブロックのアルゴリズムの 3 バイトの入力ブロックを処理し、4 バイトの出力ブロックが作成されます</xref:System.Security.Cryptography.ToBase64Transform>。  TransformBlock メソッドは、32 ビットの文字データに 24 ビットの入力のブロックを変換します。  ブロックの変換を一致させるために 4 バイトの出力の境界に 3 バイトの入力境界を維持する必要があります。"
  example:
  - "The following code example demonstrates how to call the TransformBlock method to iterate through `inputBytes` transforming by `blockSize`. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/csharp/918bcb0d-40f9-46ec-886b-_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/visualbasic/918bcb0d-40f9-46ec-886b-_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/cpp/918bcb0d-40f9-46ec-886b-_1.cpp)]"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "Base 64 に変換する入力。"
    - id: inputOffset
      type: System.Int32
      description: "データの使用を開始位置を示す入力バイト配列へのオフセット。"
    - id: inputCount
      type: System.Int32
      description: "データとして使用する入力バイト配列内のバイト数。"
    - id: outputBuffer
      type: System.Byte[]
      description: "結果の書き込み先に出力します。"
    - id: outputOffset
      type: System.Int32
      description: "データの書き込み開始位置を示す出力バイト配列へのオフセット。"
    return:
      type: System.Int32
      description: "書き込まれたバイト数。"
  overload: System.Security.Cryptography.ToBase64Transform.TransformBlock*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "現在<xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;></xref>オブジェクトは既に破棄されています。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "データのサイズが正しくありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> inputBuffer </code>パラメーターには、無効なオフセットの長さが含まれています。       - または -、 <code> inputCount </code>パラメーターに無効な値が含まれています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> inputBuffer </code>パラメーターには、負でない値が必要です。"
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したバイト配列を base 64 の指定した領域に変換します。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the TransformFinalBlock method to transform the final block of data. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/csharp/028d2418-e06c-423a-a777-_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/visualbasic/028d2418-e06c-423a-a777-_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/cpp/028d2418-e06c-423a-a777-_1.cpp)]"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "Base 64 に変換する入力します。"
    - id: inputOffset
      type: System.Int32
      description: "データの使用を開始するバイト配列へのオフセット。"
    - id: inputCount
      type: System.Int32
      description: "データとして使用するバイト配列内のバイト数。"
    return:
      type: System.Byte[]
      description: "計算ベース 64 変換します。"
  overload: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "現在<xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;></xref>オブジェクトは既に破棄されています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> inputBuffer </code>パラメーターには、無効なオフセットの長さが含まれています。       - または -、 <code> inputCount </code>パラメーターに無効な値が含まれています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> inputBuffer </code>パラメーターには、負でない値が必要です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ToBase64Transform.#ctor
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: ToBase64Transform()
  nameWithType: ToBase64Transform.ToBase64Transform()
  fullName: System.Security.Cryptography.ToBase64Transform.ToBase64Transform()
- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: CanReuseTransform
  nameWithType: ToBase64Transform.CanReuseTransform
  fullName: System.Security.Cryptography.ToBase64Transform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: ToBase64Transform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ToBase64Transform.Clear
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Clear()
  nameWithType: ToBase64Transform.Clear()
  fullName: System.Security.Cryptography.ToBase64Transform.Clear()
- uid: System.Security.Cryptography.ToBase64Transform.Dispose
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Dispose()
  nameWithType: ToBase64Transform.Dispose()
  fullName: System.Security.Cryptography.ToBase64Transform.Dispose()
- uid: System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ToBase64Transform.Dispose(Boolean)
  fullName: System.Security.Cryptography.ToBase64Transform.Dispose(Boolean)
- uid: System.Security.Cryptography.ToBase64Transform.Finalize
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Finalize()
  nameWithType: ToBase64Transform.Finalize()
  fullName: System.Security.Cryptography.ToBase64Transform.Finalize()
- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: InputBlockSize
  nameWithType: ToBase64Transform.InputBlockSize
  fullName: System.Security.Cryptography.ToBase64Transform.InputBlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: OutputBlockSize
  nameWithType: ToBase64Transform.OutputBlockSize
  fullName: System.Security.Cryptography.ToBase64Transform.OutputBlockSize
- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.ToBase64Transform.#ctor*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: ToBase64Transform
  nameWithType: ToBase64Transform.ToBase64Transform
- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: CanReuseTransform
  nameWithType: ToBase64Transform.CanReuseTransform
- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: ToBase64Transform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ToBase64Transform.Clear*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Clear
  nameWithType: ToBase64Transform.Clear
- uid: System.Security.Cryptography.ToBase64Transform.Dispose*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Dispose
  nameWithType: ToBase64Transform.Dispose
- uid: System.Security.Cryptography.ToBase64Transform.Finalize*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Finalize
  nameWithType: ToBase64Transform.Finalize
- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: InputBlockSize
  nameWithType: ToBase64Transform.InputBlockSize
- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: OutputBlockSize
  nameWithType: ToBase64Transform.OutputBlockSize
- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: TransformBlock
  nameWithType: ToBase64Transform.TransformBlock
- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: ToBase64Transform.TransformFinalBlock
