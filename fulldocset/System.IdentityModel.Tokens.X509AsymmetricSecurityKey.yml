### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  id: X509AsymmetricSecurityKey
  children:
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureDeformatter(System.String)
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureFormatter(System.String)
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.HasPrivateKey
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.X509AsymmetricSecurityKey.KeySize
  langs:
  - csharp
  name: X509AsymmetricSecurityKey
  nameWithType: X509AsymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  type: Class
  summary: "X.509 証明書の非対称キーを表します。"
  syntax:
    content: 'public class X509AsymmetricSecurityKey : System.IdentityModel.Tokens.AsymmetricSecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  - System.IdentityModel.Tokens.AsymmetricSecurityKey
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)'
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: X509AsymmetricSecurityKey(X509Certificate2)
  nameWithType: X509AsymmetricSecurityKey.X509AsymmetricSecurityKey(X509Certificate2)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.X509AsymmetricSecurityKey(X509Certificate2)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IdentityModel.Tokens.X509AsymmetricSecurityKey&quot;> </xref>クラスの指定した X.509 証明書を使用します。"
  syntax:
    content: public X509AsymmetricSecurityKey (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> X.509 証明書を表すです。"
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>certificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  id: DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: DecryptKey(String,Byte[])
  nameWithType: X509AsymmetricSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.DecryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "指定した暗号アルゴリズムを使用して、指定した暗号化キーの暗号化を解除します。"
  remarks: "使用して、<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url>または<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl>アルゴリズムを指定するフィールド</xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl></xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url>。"
  syntax:
    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "キーの暗号化を解除する暗号アルゴリズム。"
    - id: keyData
      type: System.Byte[]
      description: "配列<xref:System.Byte>暗号化されたキーを格納している</xref:System.Byte>。"
    return:
      type: System.Byte[]
      description: "配列<xref:System.Byte>復号化されたキーを格納する</xref:System.Byte>。"
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.DecryptKey*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "コンス トラクターで指定された X.509 証明書に秘密キーがありません。       - または -、X.509 証明書は秘密キーですがこれは生成されませんでしたを使用して、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>アルゴリズムです。       - または -、X.509 証明書が秘密キーを使用して生成された、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>アルゴリズムが、<xref:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*>プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref></xref:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*> 。       - または -、 <code> algorithm </code>パラメーターはサポートされていません。 サポートされるアルゴリズムは<xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url&quot;></xref>と<xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl&quot;></xref>です。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  id: EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: EncryptKey(String,Byte[])
  nameWithType: X509AsymmetricSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.EncryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "指定した暗号アルゴリズムを使用して、指定した暗号化キーを暗号化します。"
  remarks: "使用して、<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url>または<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl>アルゴリズムを指定するフィールド</xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl></xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url>。"
  syntax:
    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "キーを暗号化する暗号アルゴリズム。"
    - id: keyData
      type: System.Byte[]
      description: "配列<xref:System.Byte>を暗号化するキーを格納している</xref:System.Byte>。"
    return:
      type: System.Byte[]
      description: "配列<xref:System.Byte>暗号化されたキーを格納している</xref:System.Byte>。"
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.EncryptKey*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "コンス トラクターで指定された X.509 証明書が、公開キーを使用して生成されていない、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>アルゴリズムです。       - または -、 <code> algorithm </code>パラメーターはサポートされていません。 サポートされるアルゴリズムは<xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url&quot;></xref>と<xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl&quot;></xref>です。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  id: GetAsymmetricAlgorithm(System.String,System.Boolean)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: GetAsymmetricAlgorithm(String,Boolean)
  nameWithType: X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "指定した非対称暗号アルゴリズムを取得します。"
  remarks: "使用して、 <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl>、 <xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url>、 <xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl>、<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url>または<xref:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature>を指定するフィールド、`algorithm`パラメーター</xref:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url> </xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl> </xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl> 。"
  syntax:
    content: public override System.Security.Cryptography.AsymmetricAlgorithm GetAsymmetricAlgorithm (string algorithm, bool privateKey);
    parameters:
    - id: algorithm
      type: System.String
      description: "非対称アルゴリズムを作成します。"
    - id: privateKey
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>秘密キーが必要になるアルゴリズム; を作成するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref>を表す、指定した非対称暗号アルゴリズム。"
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>privateKey</code><xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>コンス トラクターで指定された X.509 証明書に秘密キーがありません。       - または -<code>algorithm</code>は<xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl&quot;></xref>コンス トラクターで指定された X.509 証明書のパブリックまたはプライベートのキーの種類ではありませんし<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>です。       - または -<code>algorithm</code>は<xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url&quot;> </xref>、 <xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl&quot;> </xref>、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url&quot;> </xref>または<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature&quot;></xref>コンス トラクターで指定された X.509 証明書のパブリックまたはプライベートのキーの種類ではありませんし<xref href=&quot;System.Security.Cryptography.RSA&quot;></xref>です。       - または -<code>algorithm</code>はサポートされていません。 The supported algorithms are <xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl&quot;></xref>, <xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url&quot;></xref>, <xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl&quot;></xref>, <xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)
  id: GetHashAlgorithmForSignature(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: GetHashAlgorithmForSignature(String)
  nameWithType: X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "デジタル署名のハッシュを生成する暗号アルゴリズムを取得します。"
  remarks: "使用して、 <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl>、<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url>または<xref:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature>を指定するフィールド、`algorithm`パラメーター</xref:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl> 。"
  syntax:
    content: public override System.Security.Cryptography.HashAlgorithm GetHashAlgorithmForSignature (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "ハッシュ アルゴリズム。"
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref>ハッシュ デジタル署名を生成します。"
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>algorithm</code>サポートされていません。 サポートされるアルゴリズムは<xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl&quot;> </xref>、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url&quot;> </xref>、および<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature&quot;></xref>です。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureDeformatter(System.String)
  id: GetSignatureDeformatter(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: GetSignatureDeformatter(String)
  nameWithType: X509AsymmetricSecurityKey.GetSignatureDeformatter(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureDeformatter(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "デジタル署名のデフォーマッタ アルゴリズムを取得します。"
  remarks: "使用して、 <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl>、<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url>または<xref:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature>を指定するフィールド、`algorithm`パラメーター</xref:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl> 。"
  syntax:
    content: public override System.Security.Cryptography.AsymmetricSignatureDeformatter GetSignatureDeformatter (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "インスタンスを取得するデジタル署名のデフォーマッタ アルゴリズム。"
    return:
      type: System.Security.Cryptography.AsymmetricSignatureDeformatter
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricSignatureDeformatter&quot;> </xref>デジタル署名のデフォーマッタ アルゴリズムを表すです。"
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureDeformatter*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>algorithm</code><xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl&quot;> </xref>コンス トラクターで指定された X.509 証明書の公開キーの種類ではありませんし<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>です。       - または -<code>algorithm</code>は<xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url&quot;></xref>または<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature&quot;></xref>コンス トラクターで指定された X.509 証明書の公開キーの種類ではありませんし<xref href=&quot;System.Security.Cryptography.RSA&quot;></xref>です。       - または -<code>algorithm</code>はサポートされていません。 サポートされるアルゴリズムは<xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl&quot;> </xref>、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url&quot;> </xref>、および<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature&quot;></xref>です。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureFormatter(System.String)
  id: GetSignatureFormatter(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: GetSignatureFormatter(String)
  nameWithType: X509AsymmetricSecurityKey.GetSignatureFormatter(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureFormatter(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "デジタル署名のフォーマッタ アルゴリズムを取得します。"
  remarks: "使用して、 <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl>、<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url>または<xref:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature>を指定するフィールド、`algorithm`パラメーター</xref:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl> 。"
  syntax:
    content: public override System.Security.Cryptography.AsymmetricSignatureFormatter GetSignatureFormatter (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "インスタンスを取得するデジタル署名のフォーマッタ アルゴリズム。"
    return:
      type: System.Security.Cryptography.AsymmetricSignatureFormatter
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricSignatureDeformatter&quot;> </xref>デジタル署名のフォーマッタ アルゴリズムを表すです。"
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureFormatter*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "コンス トラクターで指定された X.509 証明書に秘密キーがありません。       - または - <code> algorithm </code>は<xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl&quot;></xref>コンス トラクターで指定された X.509 証明書の秘密キーの種類ではありませんし<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>です。       - または - <code> algorithm </code>は<xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url&quot;></xref>または<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature&quot;></xref>コンス トラクターで指定された X.509 証明書の秘密キーの種類ではありませんし<xref href=&quot;System.Security.Cryptography.RSA&quot;></xref>です。       - または - <code> algorithm </code>はサポートされていません。 サポートされるアルゴリズムは<xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl&quot;> </xref>、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url&quot;> </xref>、および<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature&quot;></xref>です。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.HasPrivateKey
  id: HasPrivateKey
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: HasPrivateKey()
  nameWithType: X509AsymmetricSecurityKey.HasPrivateKey()
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.HasPrivateKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "秘密キーが使用可能かどうかを示す値を取得します。"
  syntax:
    content: public override bool HasPrivateKey ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>秘密キーが使用可能な場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.HasPrivateKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  id: IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: IsAsymmetricAlgorithm(String)
  nameWithType: X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "指定したアルゴリズムが非対称キーを使用するかどうかを示す値を取得します。"
  syntax:
    content: public override bool IsAsymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "暗号アルゴリズム。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>when the specified algorithm is <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.DsaSha1Signature&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha1Signature&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap&quot;></xref>, or <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  id: IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: IsSupportedAlgorithm(String)
  nameWithType: X509AsymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSupportedAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "このクラスで指定したアルゴリズムがサポートされているかどうかを示す値を取得します。"
  remarks: "IsSupportedAlgorithm メソッドを返します`true`、次のいずれかが true の場合: -`algorithm`パラメーターが<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl>ありコンス トラクターで指定された X.509 証明書の公開キーが<xref:System.Security.Cryptography.DSA>.</xref:System.Security.Cryptography.DSA>の種類</xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl>      -`algorithm`パラメーターは<xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url><xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl>、<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url>または<xref:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature>種類<xref:System.Security.Cryptography.RSA>.</xref:System.Security.Cryptography.RSA>がコンス トラクターで指定された X.509 証明書の公開キー</xref:System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature> </xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url> </xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl> </xref:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url>"
  syntax:
    content: public override bool IsSupportedAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "暗号アルゴリズム。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ときに、指定したアルゴリズムが<xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl&quot;> </xref>、 <xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url&quot;> </xref>、 <xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl&quot;> </xref>、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url&quot;> </xref>、または<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature&quot;></xref>公開キーが適切な種類と、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 詳細については、「解説」を参照してください。"
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSupportedAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  id: IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: IsSymmetricAlgorithm(String)
  nameWithType: X509AsymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "指定したアルゴリズムが対称キーを使用するかどうかを示す値を取得します。"
  syntax:
    content: public override bool IsSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "暗号アルゴリズム。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>when the specified algorithm is <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, or <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.KeySize
  id: KeySize
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  langs:
  - csharp
  name: KeySize
  nameWithType: X509AsymmetricSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.KeySize
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "X.509 証明書に関連付けられている公開キーのビット単位のサイズを取得します。"
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "X.509 証明書に関連付けられている公開キーのビット単位のサイズ。"
  overload: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.KeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.AsymmetricSecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.AsymmetricSecurityKey
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: X509AsymmetricSecurityKey(X509Certificate2)
  nameWithType: X509AsymmetricSecurityKey.X509AsymmetricSecurityKey(X509Certificate2)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.X509AsymmetricSecurityKey(X509Certificate2)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: DecryptKey(String,Byte[])
  nameWithType: X509AsymmetricSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.DecryptKey(String,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: EncryptKey(String,Byte[])
  nameWithType: X509AsymmetricSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.EncryptKey(String,Byte[])
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: GetAsymmetricAlgorithm(String,Boolean)
  nameWithType: X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm(String,Boolean)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: GetHashAlgorithmForSignature(String)
  nameWithType: X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(String)
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureDeformatter(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureDeformatter(String)
  nameWithType: X509AsymmetricSecurityKey.GetSignatureDeformatter(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureDeformatter(String)
- uid: System.Security.Cryptography.AsymmetricSignatureDeformatter
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricSignatureDeformatter
  nameWithType: AsymmetricSignatureDeformatter
  fullName: System.Security.Cryptography.AsymmetricSignatureDeformatter
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureFormatter(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureFormatter(String)
  nameWithType: X509AsymmetricSecurityKey.GetSignatureFormatter(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureFormatter(String)
- uid: System.Security.Cryptography.AsymmetricSignatureFormatter
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricSignatureFormatter
  nameWithType: AsymmetricSignatureFormatter
  fullName: System.Security.Cryptography.AsymmetricSignatureFormatter
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.HasPrivateKey
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: HasPrivateKey()
  nameWithType: X509AsymmetricSecurityKey.HasPrivateKey()
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.HasPrivateKey()
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm(String)
  nameWithType: X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm(String)
  nameWithType: X509AsymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSupportedAlgorithm(String)
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm(String)
  nameWithType: X509AsymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.KeySize
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: X509AsymmetricSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: X509AsymmetricSecurityKey
  nameWithType: X509AsymmetricSecurityKey.X509AsymmetricSecurityKey
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.DecryptKey*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: DecryptKey
  nameWithType: X509AsymmetricSecurityKey.DecryptKey
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.EncryptKey*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: EncryptKey
  nameWithType: X509AsymmetricSecurityKey.EncryptKey
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: GetAsymmetricAlgorithm
  nameWithType: X509AsymmetricSecurityKey.GetAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: GetHashAlgorithmForSignature
  nameWithType: X509AsymmetricSecurityKey.GetHashAlgorithmForSignature
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureDeformatter*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureDeformatter
  nameWithType: X509AsymmetricSecurityKey.GetSignatureDeformatter
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetSignatureFormatter*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: GetSignatureFormatter
  nameWithType: X509AsymmetricSecurityKey.GetSignatureFormatter
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.HasPrivateKey*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: HasPrivateKey
  nameWithType: X509AsymmetricSecurityKey.HasPrivateKey
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm
  nameWithType: X509AsymmetricSecurityKey.IsAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSupportedAlgorithm*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm
  nameWithType: X509AsymmetricSecurityKey.IsSupportedAlgorithm
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.IsSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm
  nameWithType: X509AsymmetricSecurityKey.IsSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.X509AsymmetricSecurityKey.KeySize*
  parent: System.IdentityModel.Tokens.X509AsymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: X509AsymmetricSecurityKey.KeySize
