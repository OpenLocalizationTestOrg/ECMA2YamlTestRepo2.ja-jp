### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DES
  id: DES
  children:
  - System.Security.Cryptography.DES.#ctor
  - System.Security.Cryptography.DES.Create
  - System.Security.Cryptography.DES.Create(System.String)
  - System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  - System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  - System.Security.Cryptography.DES.Key
  langs:
  - csharp
  name: DES
  nameWithType: DES
  fullName: System.Security.Cryptography.DES
  type: Class
  summary: "すべての DES 実装の派生元となるデータ暗号化標準 (DES) アルゴリズムの基底クラスを表します。"
  remarks: "このアルゴリズムには、64 ビットのキー長がサポートされています。      > [!NOTE] > 新しい非対称暗号化アルゴリズムでは、Advanced Encryption Standard (AES) では使用できます。 <xref:System.Security.Cryptography.Aes>DES クラスではなくクラス</xref:System.Security.Cryptography.Aes>の使用を検討してください。 レガシ アプリケーションとデータと互換性のためだけには、DES を使用します。"
  example:
  - "The following code example uses <xref:System.Security.Cryptography.DESCryptoServiceProvider> (an implementation of DES) to encrypt a string to an in-memory buffer. It then decrypts and displays the round-tripped string.  \n  \n [!code-vb[TripleDESCryptoServiceProvider#1](~/add/codesnippet/visualbasic/t-system.security.crypto_29_1.vb)]\n [!code-cs[TripleDESCryptoServiceProvider#1](~/add/codesnippet/csharp/t-system.security.crypto_29_1.cs)]  \n  \n Decryption can be handled in the same way; use <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor%2A> instead of <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor%2A>. The same key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) used to encrypt the file must be used to decrypt it."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DES : System.Security.Cryptography.SymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.SymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  platform:
  - net462
- uid: System.Security.Cryptography.DES.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: DES()
  nameWithType: DES.DES()
  fullName: System.Security.Cryptography.DES.DES()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.DES&quot;> </xref>クラスです。"
  remarks: "抽象クラスのインスタンスを作成することはできません。 アプリケーション コードでは、派生クラスの新しいインスタンスが作成されます。       このメソッドは、保護対象のフィールドを初期化、<xref:System.Security.Cryptography.SymmetricAlgorithm>クラスを次の表に示すように既定値です</xref:System.Security.Cryptography.SymmetricAlgorithm>。      |フィールド |既定値 |  |-----------|-------------------|  |<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|&64; |  |<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|&64; |  |<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|</xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue></xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue></xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>"
  syntax:
    content: protected DES ();
    parameters: []
  overload: System.Security.Cryptography.DES.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Create
  id: Create
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Create()
  nameWithType: DES.Create()
  fullName: System.Security.Cryptography.DES.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "データ暗号化標準を実行する暗号オブジェクトのインスタンスを作成 (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) アルゴリズム。"
  remarks: "インスタンスを作成、<xref:System.Security.Cryptography.DES>のデータを暗号化および暗号化のために使用できるオブジェクト</xref:System.Security.Cryptography.DES>。"
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  \n  \n [!code-vb[Cryptography.DES.Create.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_69_1.vb)]\n [!code-cpp[Cryptography.DES.Create.File#1](~/add/codesnippet/cpp/m-system.security.crypto_69_1.cpp)]\n [!code-cs[Cryptography.DES.Create.File#1](~/add/codesnippet/csharp/m-system.security.crypto_69_1.cs)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  \n  \n [!code-cs[Cryptography.DES.Create.Memory#1](~/add/codesnippet/csharp/m-system.security.crypto_69_2.cs)]\n [!code-cpp[Cryptography.DES.Create.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_69_2.cpp)]\n [!code-vb[Cryptography.DES.Create.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_69_2.vb)]"
  syntax:
    content: public static System.Security.Cryptography.DES Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.DES
      description: "暗号オブジェクト。"
  overload: System.Security.Cryptography.DES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Create(String)
  nameWithType: DES.Create(String)
  fullName: System.Security.Cryptography.DES.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "データ暗号化標準の指定した実装を実行する暗号オブジェクトのインスタンスを作成 (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) アルゴリズム。"
  remarks: ''
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  \n  \n [!code-cs[Cryptography.DES.Createstring.File#1](~/add/codesnippet/csharp/m-system.security.crypto_27_1.cs)]\n [!code-vb[Cryptography.DES.Createstring.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_27_1.vb)]\n [!code-cpp[Cryptography.DES.Createstring.File#1](~/add/codesnippet/cpp/m-system.security.crypto_27_1.cpp)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  \n  \n [!code-cs[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/csharp/m-system.security.crypto_27_2.cs)]\n [!code-cpp[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_27_2.cpp)]\n [!code-vb[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_27_2.vb)]"
  syntax:
    content: public static System.Security.Cryptography.DES Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "特定の実装の名前<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>を使用します。"
    return:
      type: System.Security.Cryptography.DES
      description: "暗号オブジェクト。"
  overload: System.Security.Cryptography.DES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  id: IsSemiWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: IsSemiWeakKey(Byte[])
  nameWithType: DES.IsSemiWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsSemiWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したキーが半脆弱であるかどうかを判断します。"
  remarks: "半脆弱なキーは、暗号を解読しやすいで生成するキーのペアです。 テキストが半脆弱なキーで暗号化されている場合に、元のテキストを部分的に弱いキーのパートナーと結果の暗号の暗号化を返します。 6 つ既知半脆弱なキーのペアがありますのデータ暗号化標準 (<xref:System.Security.Cryptography.DES>) アルゴリズムですこのメソッドは、これらの半脆弱なキーをチェックします。</xref:System.Security.Cryptography.DES> 。       <xref:System.Security.Cryptography.CryptographicException>。</xref:System.Security.Cryptography.CryptographicException>半脆弱キー結果を設定しようとしています。 ときに<xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>ランダムなキー、キーは返されません、セミコロン弱を作成するために呼び出される</xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>。"
  syntax:
    content: public static bool IsSemiWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "半脆弱性をテストする共有キー。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、キーが半脆弱です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.DES.IsSemiWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "サイズ、 <code> rgbKey </code>パラメーターが無効です。"
  platform:
  - net462
- uid: System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  id: IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: IsWeakKey(Byte[])
  nameWithType: DES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したキーが脆弱なであるかどうかを判断します。"
  remarks: "弱いキーは、キーの暗号を解読しやすい結果です。 テキストが弱いキーで暗号化されている場合は、元のテキストを返します同じ弱いキーで結果の暗号を再度暗号化します。 データ暗号化標準の&4; つの既知の弱いキーがある (<xref:System.Security.Cryptography.DES>) アルゴリズムですこのメソッドは、これらの弱いキーを確認します。</xref:System.Security.Cryptography.DES> 。       <xref:System.Security.Cryptography.CryptographicException>。</xref:System.Security.Cryptography.CryptographicException>弱いキー結果を設定しようとしています。 ときに<xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>が呼び出された、ランダムなキーを作成するには、弱いキーが返されません</xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>。"
  syntax:
    content: public static bool IsWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "脆弱性をテストする共有キー。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、キーは弱です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.DES.IsWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "サイズ、 <code> rgbKey </code>パラメーターが無効です。"
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Key
  id: Key
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Key
  nameWithType: DES.Key
  fullName: System.Security.Cryptography.DES.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得または設定、秘密キーのデータ暗号化標準 (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) アルゴリズム。"
  remarks: "このプロパティは、する場合`null`に使用すると、<xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>新しいランダムな値を作成するために呼び出される</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>。       キーの長さは<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>.</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>と同じである必要があります。       このアルゴリズムには、64 ビットのキー長がサポートされています。"
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "秘密キーを<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>アルゴリズムです。"
  overload: System.Security.Cryptography.DES.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "キーを設定しようとしましたが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "長さと等しいキーを設定しようとした<xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue&quot;></xref>です。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "弱いキーを設定しようとしました (を参照してください<> *>) または部分的に弱いキー (を参照してください<> *>)。"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.DES.#ctor
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: DES()
  nameWithType: DES.DES()
  fullName: System.Security.Cryptography.DES.DES()
- uid: System.Security.Cryptography.DES.Create
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create()
  nameWithType: DES.Create()
  fullName: System.Security.Cryptography.DES.Create()
- uid: System.Security.Cryptography.DES
  parent: System.Security.Cryptography
  isExternal: false
  name: DES
  nameWithType: DES
  fullName: System.Security.Cryptography.DES
- uid: System.Security.Cryptography.DES.Create(System.String)
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create(String)
  nameWithType: DES.Create(String)
  fullName: System.Security.Cryptography.DES.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsSemiWeakKey(Byte[])
  nameWithType: DES.IsSemiWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsSemiWeakKey(Byte[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsWeakKey(Byte[])
  nameWithType: DES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsWeakKey(Byte[])
- uid: System.Security.Cryptography.DES.Key
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Key
  nameWithType: DES.Key
  fullName: System.Security.Cryptography.DES.Key
- uid: System.Security.Cryptography.DES.#ctor*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: DES
  nameWithType: DES.DES
- uid: System.Security.Cryptography.DES.Create*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create
  nameWithType: DES.Create
- uid: System.Security.Cryptography.DES.IsSemiWeakKey*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsSemiWeakKey
  nameWithType: DES.IsSemiWeakKey
- uid: System.Security.Cryptography.DES.IsWeakKey*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsWeakKey
  nameWithType: DES.IsWeakKey
- uid: System.Security.Cryptography.DES.Key*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Key
  nameWithType: DES.Key
