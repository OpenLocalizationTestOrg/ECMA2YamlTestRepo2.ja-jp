### YamlMime:ManagedReference
items:
- uid: System.Data.DataRow
  id: DataRow
  children:
  - System.Data.DataRow.#ctor(System.Data.DataRowBuilder)
  - System.Data.DataRow.AcceptChanges
  - System.Data.DataRow.BeginEdit
  - System.Data.DataRow.CancelEdit
  - System.Data.DataRow.ClearErrors
  - System.Data.DataRow.Delete
  - System.Data.DataRow.EndEdit
  - System.Data.DataRow.GetChildRows(System.Data.DataRelation)
  - System.Data.DataRow.GetChildRows(System.String)
  - System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)
  - System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)
  - System.Data.DataRow.GetColumnError(System.Data.DataColumn)
  - System.Data.DataRow.GetColumnError(System.Int32)
  - System.Data.DataRow.GetColumnError(System.String)
  - System.Data.DataRow.GetColumnsInError
  - System.Data.DataRow.GetParentRow(System.Data.DataRelation)
  - System.Data.DataRow.GetParentRow(System.String)
  - System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)
  - System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)
  - System.Data.DataRow.GetParentRows(System.Data.DataRelation)
  - System.Data.DataRow.GetParentRows(System.String)
  - System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)
  - System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)
  - System.Data.DataRow.HasErrors
  - System.Data.DataRow.HasVersion(System.Data.DataRowVersion)
  - System.Data.DataRow.IsNull(System.Data.DataColumn)
  - System.Data.DataRow.IsNull(System.Int32)
  - System.Data.DataRow.IsNull(System.String)
  - System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)
  - System.Data.DataRow.Item(System.Data.DataColumn)
  - System.Data.DataRow.Item(System.Int32)
  - System.Data.DataRow.Item(System.String)
  - System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)
  - System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)
  - System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)
  - System.Data.DataRow.ItemArray
  - System.Data.DataRow.RejectChanges
  - System.Data.DataRow.RowError
  - System.Data.DataRow.RowState
  - System.Data.DataRow.SetAdded
  - System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)
  - System.Data.DataRow.SetColumnError(System.Int32,System.String)
  - System.Data.DataRow.SetColumnError(System.String,System.String)
  - System.Data.DataRow.SetModified
  - System.Data.DataRow.SetNull(System.Data.DataColumn)
  - System.Data.DataRow.SetParentRow(System.Data.DataRow)
  - System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)
  - System.Data.DataRow.Table
  langs:
  - csharp
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
  type: Class
  summary: "内のデータの行を表し、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。"
  remarks: "DataRow および<xref:System.Data.DataColumn>オブジェクトが<xref:System.Data.DataTable>。</xref:System.Data.DataTable>の主要なコンポーネント</xref:System.Data.DataColumn> DataRow オブジェクトとそのプロパティおよびメソッドを使用して取得し、評価されます。挿入、削除、および<xref:System.Data.DataTable>。</xref:System.Data.DataTable>の値を更新し、 <xref:System.Data.DataRowCollection>で実際の DataRow オブジェクトを表す、 <xref:System.Data.DataTable>、 <xref:System.Data.DataColumnCollection> <xref:System.Data.DataColumn> <xref:System.Data.DataTable>.</xref:System.Data.DataTable>のスキーマを記述するオブジェクト</xref:System.Data.DataColumn>を格納</xref:System.Data.DataColumnCollection>および</xref:System.Data.DataTable></xref:System.Data.DataRowCollection> オーバー ロードされた<xref:System.Data.DataRow.Item%2A><xref:System.Data.DataColumn>。</xref:System.Data.DataColumn>の値を設定するプロパティ</xref:System.Data.DataRow.Item%2A>を使用します       使用して、<xref:System.Data.DataRow.HasVersion%2A>特定の行値、および<xref:System.Data.DataRow.RowState%2A>親<xref:System.Data.DataTable>。</xref:System.Data.DataTable>に対して行の状態を決定するプロパティ</xref:System.Data.DataRow.RowState%2A>の状態を確認して<xref:System.Data.DataRow.IsNull%2A>プロパティ</xref:System.Data.DataRow.IsNull%2A></xref:System.Data.DataRow.HasVersion%2A>       新しい DataRow を作成するには、使用、<xref:System.Data.DataTable.NewRow%2A>のメソッド、<xref:System.Data.DataTable>オブジェクト</xref:System.Data.DataTable></xref:System.Data.DataTable.NewRow%2A>。 新しい DataRow を作成すると、<xref:System.Data.DataRowCollection.Add%2A>新しい DataRow <xref:System.Data.DataRowCollection>。</xref:System.Data.DataRowCollection>を追加するメソッド</xref:System.Data.DataRowCollection.Add%2A>を使用してください。 最後を呼び出して、<xref:System.Data.DataRow.AcceptChanges%2A>のメソッド、<xref:System.Data.DataTable>追加を確認するオブジェクト</xref:System.Data.DataTable></xref:System.Data.DataRow.AcceptChanges%2A>。 データの追加の詳細については、<xref:System.Data.DataTable>を参照してください[DataTable にデータを追加する](~/add/includes/ajax-current-ext-md.md)</xref:System.Data.DataTable>。       データベースからの DataRow を削除することができます、<xref:System.Data.DataRowCollection>を呼び出して、<xref:System.Data.DataRowCollection.Remove%2A>のメソッド、 <xref:System.Data.DataRowCollection>、または呼び出すことによって、 <xref:System.Data.DataRow.Delete%2A>DataRow オブジェクトのメソッド</xref:System.Data.DataRow.Delete%2A></xref:System.Data.DataRowCollection></xref:System.Data.DataRowCollection.Remove%2A></xref:System.Data.DataRowCollection>。 <xref:System.Data.DataRowCollection.Remove%2A>メソッドによってコレクションから行を削除します</xref:System.Data.DataRowCollection.Remove%2A>。 これに対し、 <xref:System.Data.DataRow.Delete%2A>DataRow の削除のマークを付けます</xref:System.Data.DataRow.Delete%2A>。 呼び出すときに実際の削除が行われます<xref:System.Data.DataRow.AcceptChanges%2A>メソッド</xref:System.Data.DataRow.AcceptChanges%2A>。 呼び出して<xref:System.Data.DataRow.Delete%2A>、どの行が実際に削除する前に削除用にマークをプログラムで確認できます</xref:System.Data.DataRow.Delete%2A>。 詳細については、次を参照してください。 [DataRow の削除](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example creates a new DataRow by calling the <xref:System.Data.DataTable.NewRow%2A> method of the <xref:System.Data.DataTable> object.  \n  \n [!code-vb[Classic WebData DataRow Example#1](~/add/codesnippet/visualbasic/t-system.data.datarow_1.vb)]\n [!code-cs[Classic WebData DataRow Example#1](~/add/codesnippet/csharp/t-system.data.datarow_1.cs)]"
  syntax:
    content: public class DataRow
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.DataRow.#ctor(System.Data.DataRowBuilder)
  id: '#ctor(System.Data.DataRowBuilder)'
  parent: System.Data.DataRow
  langs:
  - csharp
  name: DataRow(DataRowBuilder)
  nameWithType: DataRow.DataRow(DataRowBuilder)
  fullName: System.Data.DataRow.DataRow(DataRowBuilder)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "DataRow の新しいインスタンスを初期化します。 ビルダーから行を構築します。 内部でのみ使用."
  syntax:
    content: protected DataRow (System.Data.DataRowBuilder builder);
    parameters:
    - id: builder
      type: System.Data.DataRowBuilder
      description: "ビルダー"
  overload: System.Data.DataRow.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataRow
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataRow.AcceptChanges()
  fullName: System.Data.DataRow.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "前回 AcceptChanges が呼び出された後、この行に行われたすべての変更をコミットします。"
  remarks: "、AcceptChanges を呼び出すときに、<xref:System.Data.DataRow.EndEdit%2A>メソッドが暗黙的にすべての編集を終了すると呼ばれる。</xref:System.Data.DataRow.EndEdit%2A> 場合、<xref:System.Data.DataRow.RowState%2A>が追加または変更、行の<xref:System.Data.DataRow.RowState%2A>なります Unchanged</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.DataRow.RowState%2A> 。 場合、<xref:System.Data.DataRow.RowState%2A>が削除されると、その行は削除されます</xref:System.Data.DataRow.RowState%2A>。       参照してください、<xref:System.Data.DataRow.BeginEdit%2A>方法の詳細</xref:System.Data.DataRow.BeginEdit%2A>。       <xref:System.Data.DataTable>クラスもあります、<xref:System.Data.DataTable.AcceptChanges%2A>テーブル全体に加えられた変更に影響を与えるメソッド</xref:System.Data.DataTable.AcceptChanges%2A></xref:System.Data.DataTable>。 そのまま使用し、個々 のデータ行への変更を拒否する方法を示すコード例および詳細については、次を参照してください。 [Acceptchange と Rejectchange](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example first creates a new <xref:System.Data.DataTable> with one column, and then creates a single <xref:System.Data.DataRow>. As the <xref:System.Data.DataRow> is created, added, modified, and deleted, its <xref:System.Data.DataRow.RowState%2A> is printed.  \n  \n [!code-cs[Classic WebData DataRow.AcceptChanges Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ac_1.cs)]\n [!code-vb[Classic WebData DataRow.AcceptChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ac_1.vb)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataRow.AcceptChanges*
  exceptions:
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  platform:
  - net462
- uid: System.Data.DataRow.BeginEdit
  id: BeginEdit
  parent: System.Data.DataRow
  langs:
  - csharp
  name: BeginEdit()
  nameWithType: DataRow.BeginEdit()
  fullName: System.Data.DataRow.BeginEdit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "編集操作を開始、 <xref href=&quot;System.Data.DataRow&quot;> </xref>オブジェクト。"
  remarks: "BeginEdit メソッド put を使用して、<xref:System.Data.DataRow>編集モードにします</xref:System.Data.DataRow>。 このモードでイベントが一時的に中断ため、ユーザーは、検証規則をトリガーに複数の行を変更します。 たとえば、合計金額の列の値が借方の値に等しいかどうかを確認し、クレジットの行を列にする必要がある場合、は、編集モード、ユーザーが値をコミットするまで、行の値の検証を中断するために各行を配置することができます。       BeginEdit メソッドは、ユーザーには、データ バインド コントロールの値が変更されたときに暗黙的に呼び出されます。<xref:System.Data.DataRow.EndEdit%2A>を呼び出すときは、メソッドが暗黙的に呼び出されます、<xref:System.Data.DataTable.AcceptChanges%2A>のメソッド、<xref:System.Data.DataTable>オブジェクト</xref:System.Data.DataTable></xref:System.Data.DataTable.AcceptChanges%2A></xref:System.Data.DataRow.EndEdit%2A>。 この編集モードで、<xref:System.Data.DataRow>提案された値の元と新しい表現を格納します</xref:System.Data.DataRow>。 したがって、限り、<xref:System.Data.DataRow.EndEdit%2A>メソッドが呼び出されておらず、元のまたは提案されたバージョンのいずれかを取得するにはいずれかを渡すことによって`DataRowVersion.Original`または`DataRowVersion.Proposed`の`version`のパラメーター、<xref:System.Data.DataRow.Item%2A>プロパティ</xref:System.Data.DataRow.Item%2A></xref:System.Data.DataRow.EndEdit%2A>。 呼び出すことによって、この時点でのすべての編集をキャンセルすることも、<xref:System.Data.DataRow.CancelEdit%2A>メソッド</xref:System.Data.DataRow.CancelEdit%2A>。       表示する行に、元のまたは提案された値が含まれるかどうか、呼び出し、<xref:System.Data.DataRow.HasVersion%2A>メソッド</xref:System.Data.DataRow.HasVersion%2A>。      > [!NOTE] >、BeginEdit メソッドを一時的に中断<xref:System.Data.DataTable.RowChanging>イベントが、`delete`操作ではありません</xref:System.Data.DataTable.RowChanging>。"
  example:
  - "The example creates a simple <xref:System.Data.DataTable> with one <xref:System.Data.DataColumn> and five <xref:System.Data.DataRow> objects, and a <xref:System.Data.UniqueConstraint>. A <xref:System.Data.DataTable.RowChanged> event handler is also added to monitor when the row's value is changing. After invoking BeginEdit on the existing rows, the constraint and event are temporarily disabled and the original and proposed values are printed. The BeginEdit is again invoked to set two rows to the same value. When <xref:System.Data.DataRow.EndEdit%2A> is called, the <xref:System.Data.UniqueConstraint> is enforced on the identical values.  \n  \n [!code-vb[Classic WebData DataRow.BeginEdit Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.be_1.vb)]\n [!code-cs[Classic WebData DataRow.BeginEdit Example#1](~/add/codesnippet/csharp/m-system.data.datarow.be_1.cs)]"
  syntax:
    content: public void BeginEdit ();
    parameters: []
  overload: System.Data.DataRow.BeginEdit*
  exceptions:
  - type: System.Data.InRowChangingEventException
    commentId: T:System.Data.InRowChangingEventException
    description: "内部メソッドが呼び出された、 <xref href=&quot;System.Data.DataTable.RowChanging&quot;> </xref>イベント。"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "メソッドは、削除された行によって呼び出されました。"
  platform:
  - net462
- uid: System.Data.DataRow.CancelEdit
  id: CancelEdit
  parent: System.Data.DataRow
  langs:
  - csharp
  name: CancelEdit()
  nameWithType: DataRow.CancelEdit()
  fullName: System.Data.DataRow.CancelEdit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "行の現在の編集をキャンセルします。"
  remarks: "参照してください、<xref:System.Data.DataRow.BeginEdit%2A>方法の詳細</xref:System.Data.DataRow.BeginEdit%2A>。"
  example:
  - "The following example edits the value of one column in the last row of a <xref:System.Windows.Forms.DataGrid> control. The example uses the <xref:System.Data.DataRow.BeginEdit%2A>, <xref:System.Data.DataRow.EndEdit%2A>, methods to edit the column's value and commit the change to the row.  \n  \n [!code-vb[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ca_1.vb)]\n [!code-cs[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ca_1.cs)]"
  syntax:
    content: public void CancelEdit ();
    parameters: []
  overload: System.Data.DataRow.CancelEdit*
  exceptions:
  - type: System.Data.InRowChangingEventException
    commentId: T:System.Data.InRowChangingEventException
    description: "内部メソッドが呼び出された、 <xref href=&quot;System.Data.DataTable.RowChanging&quot;> </xref>イベント。"
  platform:
  - net462
- uid: System.Data.DataRow.ClearErrors
  id: ClearErrors
  parent: System.Data.DataRow
  langs:
  - csharp
  name: ClearErrors()
  nameWithType: DataRow.ClearErrors()
  fullName: System.Data.DataRow.ClearErrors()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "行のエラーをクリアします。 これが含まれています、 <> </> *> で設定されたエラーと<> *> です。"
  remarks: "使用して<xref:System.Data.DataRow.SetColumnError%2A>と<xref:System.Data.DataRow.GetColumnError%2A>を設定し、個々 の列に対するエラーを返します</xref:System.Data.DataRow.GetColumnError%2A></xref:System.Data.DataRow.SetColumnError%2A>。       設定、<xref:System.Data.DataRow.RowError%2A>行全体に適用されるエラーを設定するプロパティ</xref:System.Data.DataRow.RowError%2A>。       Columns コレクションにエラーがあるかどうかを確認するには<xref:System.Data.DataRow.HasErrors%2A>メソッド</xref:System.Data.DataRow.HasErrors%2A>。 したがって、使用することができます、<xref:System.Data.DataRow.GetColumnsInError%2A>エラーのあるすべての列を取得するメソッド</xref:System.Data.DataRow.GetColumnsInError%2A>。"
  example:
  - "The following example uses the <xref:System.Data.DataRow.HasErrors%2A> to look for errors. If the row has errors, the <xref:System.Data.DataRow.GetColumnsInError%2A> method returns the array of columns with errors that can then be resolved. The ClearErrors method is then called to clear all errors.  \n  \n [!code-cs[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/csharp/m-system.data.datarow.cl_1.cs)]\n [!code-vb[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.cl_1.vb)]"
  syntax:
    content: public void ClearErrors ();
    parameters: []
  overload: System.Data.DataRow.ClearErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.Delete
  id: Delete
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Delete()
  nameWithType: DataRow.Delete()
  fullName: System.Data.DataRow.Delete()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "削除、 <xref href=&quot;System.Data.DataRow&quot;></xref>です。"
  remarks: "場合、<xref:System.Data.DataRow.RowState%2A>の行が追加されると、<xref:System.Data.DataRow.RowState%2A>なります`Detached` <xref:System.Data.DataRow.AcceptChanges%2A>.</xref:System.Data.DataRow.AcceptChanges%2A>を呼び出すときに、行がテーブルから削除されると</xref:System.Data.DataRow.RowState%2A></xref:System.Data.DataRow.RowState%2A>       <xref:System.Data.DataRow.RowState%2A>なります`Deleted`Delete メソッドを使用して、既存の<xref:System.Data.DataRow></xref:System.Data.DataRow>後</xref:System.Data.DataRow.RowState%2A>。 これは、まま`Deleted` <xref:System.Data.DataRow.AcceptChanges%2A>.</xref:System.Data.DataRow.AcceptChanges%2A>が呼び出されるまで この時点で、<xref:System.Data.DataRow>は、テーブルから削除します</xref:System.Data.DataRow>。       反復処理するときに、削除、foreach ループでの呼び出すことはできません、<xref:System.Data.DataRowCollection>オブジェクト</xref:System.Data.DataRowCollection>。 Delete では、コレクションの状態を変更します。       <xref:System.Data.DataRow.RejectChanges%2A>。</xref:System.Data.DataRow.RejectChanges%2A>を呼び出すことによって削除された行を戻すできます。      > [!NOTE] >、<xref:System.Data.DataRow.BeginEdit%2A>メソッドを一時的に中断<xref:System.Data.DataTable.RowChanging>イベントが削除操作はありません</xref:System.Data.DataTable.RowChanging></xref:System.Data.DataRow.BeginEdit%2A>。"
  example:
  - "The following example creates a simple <xref:System.Data.DataTable> with two columns and ten rows. After deleting several <xref:System.Data.DataRow> items with the Delete method, one of the rows is undeleted by invoking <xref:System.Data.DataRow.RejectChanges%2A>.  \n  \n [!code-vb[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.de_1.vb)]\n [!code-cs[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/csharp/m-system.data.datarow.de_1.cs)]"
  syntax:
    content: public void Delete ();
    parameters: []
  overload: System.Data.DataRow.Delete*
  exceptions:
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "<xref href=&quot;System.Data.DataRow&quot;> </xref>は既に削除されています。"
  platform:
  - net462
- uid: System.Data.DataRow.EndEdit
  id: EndEdit
  parent: System.Data.DataRow
  langs:
  - csharp
  name: EndEdit()
  nameWithType: DataRow.EndEdit()
  fullName: System.Data.DataRow.EndEdit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "行で実行中の編集を終了します。"
  remarks: "例外が発生した場合、例外が生成されるプロパティを設定すると、<xref:System.Data.DataTable.RowChanging>イベント</xref:System.Data.DataTable.RowChanging>。"
  example:
  - "The following example uses the EndEdit method to end the edit of a <xref:System.Data.DataRow> value if the validation function returns true.  \n  \n [!code-vb[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.en_1.vb)]\n [!code-cs[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/csharp/m-system.data.datarow.en_1.cs)]"
  syntax:
    content: public void EndEdit ();
    parameters: []
  overload: System.Data.DataRow.EndEdit*
  exceptions:
  - type: System.Data.InRowChangingEventException
    commentId: T:System.Data.InRowChangingEventException
    description: "内部メソッドが呼び出された、 <xref href=&quot;System.Data.DataTable.RowChanging&quot;> </xref>イベント。"
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "編集が制約に違反します。"
  - type: System.Data.ReadOnlyException
    commentId: T:System.Data.ReadOnlyException
    description: "テーブルに行が属している、編集が読み取り専用の列の値を変更しようとしました。"
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "編集が、列に null 値を格納しようとしていますここで<xref:System.Data.DataColumn.AllowDBNull*>は false。</xref:System.Data.DataColumn.AllowDBNull*> 。"
  platform:
  - net462
- uid: System.Data.DataRow.GetChildRows(System.Data.DataRelation)
  id: GetChildRows(System.Data.DataRelation)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetChildRows(DataRelation)
  nameWithType: DataRow.GetChildRows(DataRelation)
  fullName: System.Data.DataRow.GetChildRows(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "この行の子を取得<xref href=&quot;System.Data.DataRow&quot;></xref>指定して<xref href=&quot;System.Data.DataRelation&quot;></xref>です。"
  remarks: "<xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ChildRelations%2A>プロパティ</xref:System.Data.DataTable.ChildRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetChildRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  \n  \n [!code-cs[Classic WebData DataRow.GetChildRows2 Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_8_1.cs)]\n [!code-vb[Classic WebData DataRow.GetChildRows2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_8_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] GetChildRows (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    return:
      type: System.Data.DataRow[]
      description: "配列<xref href=&quot;System.Data.DataRow&quot;></xref>オブジェクトまたは長さ&0; の配列。"
  overload: System.Data.DataRow.GetChildRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "リレーションシップと行は、同じテーブルに属していません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "リレーションシップは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "行には、このバージョンのデータはありません。"
  platform:
  - net462
- uid: System.Data.DataRow.GetChildRows(System.String)
  id: GetChildRows(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetChildRows(String)
  nameWithType: DataRow.GetChildRows(String)
  fullName: System.Data.DataRow.GetChildRows(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "子の行を取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref:System.Data.DataRelation.RelationName*>の<xref href=&quot;System.Data.DataRelation&quot;> </xref></xref:System.Data.DataRelation.RelationName*> 。"
  remarks: "<xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ChildRelations%2A>プロパティ</xref:System.Data.DataTable.ChildRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。"
  syntax:
    content: public System.Data.DataRow[] GetChildRows (string relationName);
    parameters:
    - id: relationName
      type: System.String
      description: "<xref:System.Data.DataRelation.RelationName*>の<xref href=&quot;System.Data.DataRelation&quot;></xref>を使用する</xref:System.Data.DataRelation.RelationName*>。"
    return:
      type: System.Data.DataRow[]
      description: "配列<xref href=&quot;System.Data.DataRow&quot;></xref>オブジェクトまたは長さ&0; の配列。"
  overload: System.Data.DataRow.GetChildRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "リレーションシップと行は、同じテーブルに属していません。"
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  platform:
  - net462
- uid: System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)
  id: GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetChildRows(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetChildRows(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetChildRows(DataRelation,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "子の行を取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref href=&quot;System.Data.DataRelation&quot;> </xref>、および<xref href=&quot;System.Data.DataRowVersion&quot;></xref>です。"
  remarks: "<xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ChildRelations%2A>プロパティ</xref:System.Data.DataTable.ChildRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。       使用して、<xref:System.Data.DataRow.HasVersion%2A>プロパティを決定するかどうか、<xref:System.Data.DataRowVersion>が存在する</xref:System.Data.DataRowVersion></xref:System.Data.DataRow.HasVersion%2A>。       場合<xref:System.Data.DataRowVersion>が指定されているために使用されるバージョンに依存して、<xref:System.Data.DataRow.RowState%2A>なる行の`GetChildRows`が呼び出されます</xref:System.Data.DataRow.RowState%2A></xref:System.Data.DataRowVersion>。 場合、行を`GetChildRows`が呼び出されますが、`RowState`の`Modified`、 `New`、または`Unchanged`、<xref:System.Data.DataRowVersion>現在のバージョンに一致する値を持つ関連する子の行をフェッチするため、行のバージョンを使用します</xref:System.Data.DataRowVersion>。 場合、行を`GetChildRows`が呼び出されますが、`RowState`の`Deleted`、<xref:System.Data.DataRowVersion>を元のバージョンに一致する値を持つ関連する子の行をフェッチするため、行のバージョンを使用します</xref:System.Data.DataRowVersion>。"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetChildRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column with the specified version in the row is then printed.  \n  \n [!code-vb[Classic WebData DataRow.GetChildRows3 Example#1](~/add/codesnippet/visualbasic/47f0f4a3-cc08-456d-98cc-_1.vb)]\n [!code-cs[Classic WebData DataRow.GetChildRows3 Example#1](~/add/codesnippet/csharp/47f0f4a3-cc08-456d-98cc-_1.cs)]"
  syntax:
    content: public System.Data.DataRow[] GetChildRows (System.Data.DataRelation relation, System.Data.DataRowVersion version);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>取得するデータのバージョンを指定する値。 Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Data.DataRow[]
      description: "配列<xref href=&quot;System.Data.DataRow&quot;></xref>オブジェクト。"
  overload: System.Data.DataRow.GetChildRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "リレーションシップと行は、同じテーブルに属していません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>relation</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "行は、要求されたが<xref href=&quot;System.Data.DataRowVersion&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)
  id: GetChildRows(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetChildRows(String,DataRowVersion)
  nameWithType: DataRow.GetChildRows(String,DataRowVersion)
  fullName: System.Data.DataRow.GetChildRows(String,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "子の行を取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref:System.Data.DataRelation.RelationName*>の<xref href=&quot;System.Data.DataRelation&quot;> </xref>、および<xref href=&quot;System.Data.DataRowVersion&quot;> </xref></xref:System.Data.DataRelation.RelationName*> 。"
  remarks: "<xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ChildRelations%2A>プロパティ</xref:System.Data.DataTable.ChildRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。       使用して、<xref:System.Data.DataRow.HasVersion%2A>プロパティを決定するかどうか、<xref:System.Data.DataRowVersion>が存在する</xref:System.Data.DataRowVersion></xref:System.Data.DataRow.HasVersion%2A>。       場合<xref:System.Data.DataRowVersion>が指定されているために使用されるバージョンに依存して、<xref:System.Data.DataRow.RowState%2A>なる行の`GetChildRows`が呼び出されます</xref:System.Data.DataRow.RowState%2A></xref:System.Data.DataRowVersion>。 場合、行を`GetChildRows`が呼び出されますが、`RowState`の`Modified`、 `New`、または`Unchanged`、<xref:System.Data.DataRowVersion>現在のバージョンに一致する値を持つ関連する子の行をフェッチするため、行のバージョンを使用します</xref:System.Data.DataRowVersion>。 場合、行を`GetChildRows`が呼び出されますが、`RowState`の`Deleted`、<xref:System.Data.DataRowVersion>を元のバージョンに一致する値を持つ関連する子の行をフェッチするため、行のバージョンを使用します</xref:System.Data.DataRowVersion>。"
  syntax:
    content: public System.Data.DataRow[] GetChildRows (string relationName, System.Data.DataRowVersion version);
    parameters:
    - id: relationName
      type: System.String
      description: "<xref:System.Data.DataRelation.RelationName*>の<xref href=&quot;System.Data.DataRelation&quot;></xref>を使用する</xref:System.Data.DataRelation.RelationName*>。"
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>取得するデータのバージョンを指定する値。 Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Data.DataRow[]
      description: "配列<xref href=&quot;System.Data.DataRow&quot;></xref>オブジェクトまたは長さ&0; の配列。"
  overload: System.Data.DataRow.GetChildRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "リレーションシップと行は、同じテーブルに属していません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>relation</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "行は、要求されたが<xref href=&quot;System.Data.DataRowVersion&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataRow.GetColumnError(System.Data.DataColumn)
  id: GetColumnError(System.Data.DataColumn)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetColumnError(DataColumn)
  nameWithType: DataRow.GetColumnError(DataColumn)
  fullName: System.Data.DataRow.GetColumnError(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定したエラーの説明を取得<xref href=&quot;System.Data.DataColumn&quot;></xref>です。"
  remarks: "使用して、<xref:System.Data.DataRow.SetColumnError%2A>列エラーを設定します</xref:System.Data.DataRow.SetColumnError%2A>。       Columns コレクションにエラーがあるかどうかを確認するには<xref:System.Data.DataRow.HasErrors%2A>メソッド</xref:System.Data.DataRow.HasErrors%2A>。 したがって、使用することができます、<xref:System.Data.DataRow.GetColumnsInError%2A>エラーのあるすべての列を取得するメソッド</xref:System.Data.DataRow.GetColumnsInError%2A>。 または、<xref:System.Data.DataTable.GetErrors%2A>のメソッド、<xref:System.Data.DataTable>エラーのあるすべての行を返します</xref:System.Data.DataTable></xref:System.Data.DataTable.GetErrors%2A>。       列コレクションのすべてのエラーをクリアする、<xref:System.Data.DataRow.ClearErrors%2A>メソッド</xref:System.Data.DataRow.ClearErrors%2A>。"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_1_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_1_1.vb)]"
  syntax:
    content: public string GetColumnError (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;></xref>."
    return:
      type: System.String
      description: "エラーの説明のテキストです。"
  overload: System.Data.DataRow.GetColumnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.GetColumnError(System.Int32)
  id: GetColumnError(System.Int32)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetColumnError(Int32)
  nameWithType: DataRow.GetColumnError(Int32)
  fullName: System.Data.DataRow.GetColumnError(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "インデックスによって指定された列のエラーの説明を取得します。"
  remarks: "使用して、<xref:System.Data.DataRow.SetColumnError%2A>列エラーを設定します</xref:System.Data.DataRow.SetColumnError%2A>。       Columns コレクションにエラーがあるかどうかを確認するには<xref:System.Data.DataRow.HasErrors%2A>メソッド</xref:System.Data.DataRow.HasErrors%2A>。 したがって、使用することができます、<xref:System.Data.DataRow.GetColumnsInError%2A>エラーのあるすべての列を取得するメソッド</xref:System.Data.DataRow.GetColumnsInError%2A>。       列コレクションのすべてのエラーをクリアする、<xref:System.Data.DataRow.ClearErrors%2A>メソッド</xref:System.Data.DataRow.ClearErrors%2A>。"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_6_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_6_1.vb)]"
  syntax:
    content: public string GetColumnError (int columnIndex);
    parameters:
    - id: columnIndex
      type: System.Int32
      description: "列の&0; から始まるインデックス。"
    return:
      type: System.String
      description: "エラーの説明のテキストです。"
  overload: System.Data.DataRow.GetColumnError*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> columnIndex </code>引数が範囲外です。"
  platform:
  - net462
- uid: System.Data.DataRow.GetColumnError(System.String)
  id: GetColumnError(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetColumnError(String)
  nameWithType: DataRow.GetColumnError(String)
  fullName: System.Data.DataRow.GetColumnError(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "名前で指定された列のエラーの説明を取得します。"
  remarks: "使用して、<xref:System.Data.DataRow.SetColumnError%2A>列エラーを設定します</xref:System.Data.DataRow.SetColumnError%2A>。       Columns コレクションにエラーがあるかどうかを確認するには<xref:System.Data.DataRow.HasErrors%2A>メソッド</xref:System.Data.DataRow.HasErrors%2A>。 したがって、使用することができます、<xref:System.Data.DataRow.GetColumnsInError%2A>エラーのあるすべての列を取得するメソッド</xref:System.Data.DataRow.GetColumnsInError%2A>。       列コレクションのすべてのエラーをクリアする、<xref:System.Data.DataRow.ClearErrors%2A>メソッド</xref:System.Data.DataRow.ClearErrors%2A>。"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_0_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_0_1.vb)]"
  syntax:
    content: public string GetColumnError (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "列の名前。"
    return:
      type: System.String
      description: "エラーの説明のテキストです。"
  overload: System.Data.DataRow.GetColumnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.GetColumnsInError
  id: GetColumnsInError
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetColumnsInError()
  nameWithType: DataRow.GetColumnsInError()
  fullName: System.Data.DataRow.GetColumnsInError()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "エラーが発生した列の配列を取得します。"
  remarks: "GetColumnsInError の数を削減できます<xref:System.Data.DataColumn>オブジェクトをエラーである列のみを返すことによってエラーを処理する必要があります。</xref:System.Data.DataColumn> 。 エラーを使用して個々 の列に設定する、<xref:System.Data.DataRow.SetColumnError%2A>メソッド</xref:System.Data.DataRow.SetColumnError%2A>。 処理の数をさらに削減するには、確認、<xref:System.Data.DataRow.HasErrors%2A>のプロパティ、<xref:System.Data.DataRow>クラスを決定するかどうか、 <xref:System.Data.DataRow>GetColumnsInError を呼び出す前にエラーが発生します</xref:System.Data.DataRow></xref:System.Data.DataRow></xref:System.Data.DataRow.HasErrors%2A>。       使用して、<xref:System.Data.DataRow.ClearErrors%2A>行のすべてのエラーをクリアします</xref:System.Data.DataRow.ClearErrors%2A>。 これにより、 <xref:System.Data.DataRow.RowError%2A>。</xref:System.Data.DataRow.RowError%2A>が含まれます。"
  example:
  - "The following example uses the <xref:System.Data.DataRow.HasErrors%2A> to look for errors. If the row has errors, the GetColumnsInError method returns the array of columns with errors that can then be resolved. The <xref:System.Data.DataRow.ClearErrors%2A> method is then called to clear all errors.  \n  \n [!code-cs[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_5_1.cs)]\n [!code-vb[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_5_1.vb)]"
  syntax:
    content: public System.Data.DataColumn[] GetColumnsInError ();
    parameters: []
    return:
      type: System.Data.DataColumn[]
      description: "配列<xref href=&quot;System.Data.DataColumn&quot;></xref>エラーが含まれているオブジェクト。"
  overload: System.Data.DataRow.GetColumnsInError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRow(System.Data.DataRelation)
  id: GetParentRow(System.Data.DataRelation)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRow(DataRelation)
  nameWithType: DataRow.GetParentRow(DataRelation)
  fullName: System.Data.DataRow.GetParentRow(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "親行の取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref href=&quot;System.Data.DataRelation&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet>、すべての親のコレクション<xref:System.Data.DataRelation>によってデータ セットが返されるオブジェクト、<xref:System.Data.DataRow.GetParentRows%2A>メソッド</xref:System.Data.DataRow.GetParentRows%2A></xref:System.Data.DataRelation></xref:System.Data.DataSet>。       <xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ParentRelations%2A>プロパティ</xref:System.Data.DataTable.ParentRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetParentRow%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  \n  \n [!code-cs[Classic WebData DataRow.GetParentRow2 Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_3_1.cs)]\n [!code-vb[Classic WebData DataRow.GetParentRow2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_3_1.vb)]"
  syntax:
    content: public System.Data.DataRow GetParentRow (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    return:
      type: System.Data.DataRow
      description: "親<xref href=&quot;System.Data.DataRow&quot;></xref>の現在の行。"
  overload: System.Data.DataRow.GetParentRow*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> relation </code>に属さない、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。       The row is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "子の行は、複数の親を持ちます。"
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "この行の子テーブルに属していません、 <xref href=&quot;System.Data.DataRelation&quot;> </xref>オブジェクト。"
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRow(System.String)
  id: GetParentRow(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRow(String)
  nameWithType: DataRow.GetParentRow(String)
  fullName: System.Data.DataRow.GetParentRow(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "親行の取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref:System.Data.DataRelation.RelationName*>の<xref href=&quot;System.Data.DataRelation&quot;> </xref></xref:System.Data.DataRelation.RelationName*> 。"
  remarks: "<xref:System.Data.DataSet>、すべての親のコレクション<xref:System.Data.DataRelation>によってデータ セットが返されるオブジェクト、<xref:System.Data.DataRow.GetParentRows%2A>メソッド</xref:System.Data.DataRow.GetParentRows%2A></xref:System.Data.DataRelation></xref:System.Data.DataSet>。       <xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ParentRelations%2A>プロパティ</xref:System.Data.DataTable.ParentRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。"
  example:
  - "The following example uses the GetParentRow to print a value from each parent row of each <xref:System.Data.DataRow> in a <xref:System.Data.DataTable>.  \n  \n [!code-cs[Classic WebData DataRow.GetParentRow Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_4_1.cs)]\n [!code-vb[Classic WebData DataRow.GetParentRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_4_1.vb)]"
  syntax:
    content: public System.Data.DataRow GetParentRow (string relationName);
    parameters:
    - id: relationName
      type: System.String
      description: "The <xref:System.Data.DataRelation.RelationName*> of a <xref href=&quot;System.Data.DataRelation&quot;></xref>.</xref:System.Data.DataRelation.RelationName*>"
    return:
      type: System.Data.DataRow
      description: "親<xref href=&quot;System.Data.DataRow&quot;></xref>の現在の行。"
  overload: System.Data.DataRow.GetParentRow*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "リレーションシップと行は、同じテーブルに属していません。"
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "子の行は、複数の親を持ちます。"
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)
  id: GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRow(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetParentRow(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRow(DataRelation,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "親行の取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref href=&quot;System.Data.DataRelation&quot;> </xref>、および<xref href=&quot;System.Data.DataRowVersion&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet>、すべての親のコレクション<xref:System.Data.DataRelation>によってデータ セットが返されるオブジェクト、<xref:System.Data.DataRow.GetParentRows%2A>メソッド</xref:System.Data.DataRow.GetParentRows%2A></xref:System.Data.DataRelation></xref:System.Data.DataSet>。       <xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ParentRelations%2A>プロパティ</xref:System.Data.DataTable.ParentRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。       使用して、<xref:System.Data.DataRow.HasVersion%2A>プロパティを決定するかどうか、<xref:System.Data.DataRowVersion>が存在する</xref:System.Data.DataRowVersion></xref:System.Data.DataRow.HasVersion%2A>。"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetParentRow%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  \n  \n [!code-vb[Classic WebData DataRow.GetParentRow3 Example#1](~/add/codesnippet/visualbasic/a16d1012-4e05-4bd8-9275-_1.vb)]\n [!code-cs[Classic WebData DataRow.GetParentRow3 Example#1](~/add/codesnippet/csharp/a16d1012-4e05-4bd8-9275-_1.cs)]"
  syntax:
    content: public System.Data.DataRow GetParentRow (System.Data.DataRelation relation, System.Data.DataRowVersion version);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>取得するデータのバージョンを指定する値。"
    return:
      type: System.Data.DataRow
      description: "親<xref href=&quot;System.Data.DataRow&quot;></xref>の現在の行。"
  overload: System.Data.DataRow.GetParentRow*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The row is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       <code> relation </code>はこのテーブルの親リレーションに属していません。"
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "子の行は、複数の親を持ちます。"
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "リレーションシップの子テーブルは、行が属するテーブルではありません。"
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "行には、このバージョンのデータはありません。"
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)
  id: GetParentRow(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRow(String,DataRowVersion)
  nameWithType: DataRow.GetParentRow(String,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRow(String,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "親行の取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref:System.Data.DataRelation.RelationName*>の<xref href=&quot;System.Data.DataRelation&quot;> </xref>、および<xref href=&quot;System.Data.DataRowVersion&quot;> </xref></xref:System.Data.DataRelation.RelationName*> 。"
  remarks: "<xref:System.Data.DataSet>、すべての親のコレクション<xref:System.Data.DataRelation>によってデータ セットが返されるオブジェクト、<xref:System.Data.DataRow.GetParentRows%2A>メソッド</xref:System.Data.DataRow.GetParentRows%2A></xref:System.Data.DataRelation></xref:System.Data.DataSet>。       <xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ParentRelations%2A>プロパティ</xref:System.Data.DataTable.ParentRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。       使用して、<xref:System.Data.DataRow.HasVersion%2A>プロパティを決定するかどうか、<xref:System.Data.DataRowVersion>が存在する</xref:System.Data.DataRowVersion></xref:System.Data.DataRow.HasVersion%2A>。"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetParentRow%2A> to print a value from each parent row of each <xref:System.Data.DataRow> in a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DataRow.GetParentRow1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_7_1.vb)]\n [!code-cs[Classic WebData DataRow.GetParentRow1 Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_7_1.cs)]"
  syntax:
    content: public System.Data.DataRow GetParentRow (string relationName, System.Data.DataRowVersion version);
    parameters:
    - id: relationName
      type: System.String
      description: "The <xref:System.Data.DataRelation.RelationName*> of a <xref href=&quot;System.Data.DataRelation&quot;></xref>.</xref:System.Data.DataRelation.RelationName*>"
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>値。"
    return:
      type: System.Data.DataRow
      description: "親<xref href=&quot;System.Data.DataRow&quot;></xref>の現在の行。"
  overload: System.Data.DataRow.GetParentRow*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "リレーションシップと行は、同じテーブルに属していません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>relation</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "子の行は、複数の親を持ちます。"
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "行は、要求されたが<xref href=&quot;System.Data.DataRowVersion&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRows(System.Data.DataRelation)
  id: GetParentRows(System.Data.DataRelation)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRows(DataRelation)
  nameWithType: DataRow.GetParentRows(DataRelation)
  fullName: System.Data.DataRow.GetParentRows(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "親の行を取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref href=&quot;System.Data.DataRelation&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet>、すべての親のコレクション<xref:System.Data.DataRelation>によってデータ セットが返されるオブジェクト、<xref:System.Data.DataRow.GetParentRows%2A>メソッド</xref:System.Data.DataRow.GetParentRows%2A></xref:System.Data.DataRelation></xref:System.Data.DataSet>。       <xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ParentRelations%2A>プロパティ</xref:System.Data.DataTable.ParentRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetParentRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  \n  \n [!code-vb[Classic WebData DataRow.GetParentRows2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_2_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] GetParentRows (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    return:
      type: System.Data.DataRow[]
      description: "配列<xref href=&quot;System.Data.DataRow&quot;></xref>オブジェクトまたは長さ&0; の配列。"
  overload: System.Data.DataRow.GetParentRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Data.DataRelation&quot;> </xref>この行に属さない<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The row is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "リレーションシップの子テーブルは、行が属するテーブルではありません。"
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行に属さない、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRows(System.String)
  id: GetParentRows(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRows(String)
  nameWithType: DataRow.GetParentRows(String)
  fullName: System.Data.DataRow.GetParentRows(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "親の行を取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref:System.Data.DataRelation.RelationName*>の<xref href=&quot;System.Data.DataRelation&quot;> </xref></xref:System.Data.DataRelation.RelationName*> 。"
  remarks: "<xref:System.Data.DataSet>、すべての親のコレクション<xref:System.Data.DataRelation>GetParentRows メソッドによって、データ セットが返されるオブジェクトします</xref:System.Data.DataRelation></xref:System.Data.DataSet>。       <xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ParentRelations%2A>プロパティ</xref:System.Data.DataTable.ParentRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。"
  syntax:
    content: public System.Data.DataRow[] GetParentRows (string relationName);
    parameters:
    - id: relationName
      type: System.String
      description: "The <xref:System.Data.DataRelation.RelationName*> of a <xref href=&quot;System.Data.DataRelation&quot;></xref>.</xref:System.Data.DataRelation.RelationName*>"
    return:
      type: System.Data.DataRow[]
      description: "配列<xref href=&quot;System.Data.DataRow&quot;></xref>オブジェクトまたは長さ&0; の配列。"
  overload: System.Data.DataRow.GetParentRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "リレーションシップと行は、同じテーブルに属していません。"
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)
  id: GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRows(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetParentRows(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRows(DataRelation,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "親の行を取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref href=&quot;System.Data.DataRelation&quot;> </xref>、および<xref href=&quot;System.Data.DataRowVersion&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet>、すべての親のコレクション<xref:System.Data.DataRelation>によってデータ セットが返されるオブジェクト、<xref:System.Data.DataRow.GetParentRows%2A>メソッド</xref:System.Data.DataRow.GetParentRows%2A></xref:System.Data.DataRelation></xref:System.Data.DataSet>。       <xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ParentRelations%2A>プロパティ</xref:System.Data.DataTable.ParentRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。       使用して、<xref:System.Data.DataRow.HasVersion%2A>プロパティを決定するかどうか、<xref:System.Data.DataRowVersion>が存在する</xref:System.Data.DataRowVersion></xref:System.Data.DataRow.HasVersion%2A>。"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetParentRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  \n  \n [!code-vb[Classic WebData DataRow.GetParentRows3 Example#1](~/add/codesnippet/visualbasic/14f3e3ca-84f4-434d-94fa-_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] GetParentRows (System.Data.DataRelation relation, System.Data.DataRowVersion version);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>取得するデータのバージョンを指定する値。"
    return:
      type: System.Data.DataRow[]
      description: "配列<xref href=&quot;System.Data.DataRow&quot;></xref>オブジェクトまたは長さ&0; の配列。"
  overload: System.Data.DataRow.GetParentRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Data.DataRelation&quot;> </xref>この行に属さない<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The row is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "リレーションシップの子テーブルは、行が属するテーブルではありません。"
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行に属さない、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。"
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "行は、要求されたが<xref href=&quot;System.Data.DataRowVersion&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)
  id: GetParentRows(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRows(String,DataRowVersion)
  nameWithType: DataRow.GetParentRows(String,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRows(String,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "親の行を取得、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定して<xref:System.Data.DataRelation.RelationName*>の<xref href=&quot;System.Data.DataRelation&quot;> </xref>、および<xref href=&quot;System.Data.DataRowVersion&quot;> </xref></xref:System.Data.DataRelation.RelationName*> 。"
  remarks: "<xref:System.Data.DataSet>、すべての親のコレクション<xref:System.Data.DataRelation>によってデータ セットが返されるオブジェクト、<xref:System.Data.DataRow.GetParentRows%2A>メソッド</xref:System.Data.DataRow.GetParentRows%2A></xref:System.Data.DataRelation></xref:System.Data.DataSet>。       <xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.DataRelation>によって返されるオブジェクト、<xref:System.Data.DataTable.ParentRelations%2A>プロパティ</xref:System.Data.DataTable.ParentRelations%2A></xref:System.Data.DataRelation></xref:System.Data.DataTable>。       使用して、<xref:System.Data.DataRow.HasVersion%2A>プロパティを決定するかどうか、<xref:System.Data.DataRowVersion>が存在する</xref:System.Data.DataRowVersion></xref:System.Data.DataRow.HasVersion%2A>。"
  syntax:
    content: public System.Data.DataRow[] GetParentRows (string relationName, System.Data.DataRowVersion version);
    parameters:
    - id: relationName
      type: System.String
      description: "The <xref:System.Data.DataRelation.RelationName*> of a <xref href=&quot;System.Data.DataRelation&quot;></xref>.</xref:System.Data.DataRelation.RelationName*>"
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>取得するデータのバージョンを指定する値。 Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Data.DataRow[]
      description: "配列<xref href=&quot;System.Data.DataRow&quot;></xref>オブジェクトまたは長さ&0; の配列。"
  overload: System.Data.DataRow.GetParentRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "リレーションシップと行は、同じテーブルに属していません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>relation</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "行は、要求されたが<xref href=&quot;System.Data.DataRowVersion&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataRow.HasErrors
  id: HasErrors
  parent: System.Data.DataRow
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataRow.HasErrors
  fullName: System.Data.DataRow.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "行にエラーがあるかどうかを示す値を取得します。"
  remarks: "`HasErrors`返します`true`存在する場合<xref:System.Data.DataColumn>行内のオブジェクトには、エラーが含まれていますまたは、<xref:System.Data.DataRow.RowError%2A>のプロパティ、<xref:System.Data.DataRow>は空の文字列ではありません。</xref:System.Data.DataRow> </xref:System.Data.DataRow.RowError%2A> </xref:System.Data.DataColumn> 。       データを検証する場合は、行の列に対するエラーを設定できます。 このような列に表示される場合、<xref:System.Windows.Forms.DataGrid?displayProperty=fullName>コントロールを列がエラーであることをユーザーに通知を赤色の感嘆符が付いています</xref:System.Windows.Forms.DataGrid?displayProperty=fullName>。       使用して<xref:System.Data.DataRow.SetColumnError%2A>を任意の列でエラーを設定します</xref:System.Data.DataRow.SetColumnError%2A>。       使用して、<xref:System.Data.DataRow.GetColumnError%2A>と`GetColumnsInError`エラーのある列を返すメソッド</xref:System.Data.DataRow.GetColumnError%2A>。       <xref:System.Data.DataRow.ClearErrors%2A>メソッドは、行のすべてのエラーをクリアします</xref:System.Data.DataRow.ClearErrors%2A>。"
  example:
  - "The following example uses the HasErrors to look for errors. If the row has errors, the <xref:System.Data.DataRow.GetColumnsInError%2A> method returns the array of columns with errors that can then be resolved. The <xref:System.Data.DataRow.ClearErrors%2A> method is then called to clear all errors.  \n  \n [!code-cs[Classic WebData DataRow.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ha_1.cs)]\n [!code-vb[Classic WebData DataRow.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ha_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>行にエラーが含まれている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataRow.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.HasVersion(System.Data.DataRowVersion)
  id: HasVersion(System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: HasVersion(DataRowVersion)
  nameWithType: DataRow.HasVersion(DataRowVersion)
  fullName: System.Data.DataRow.HasVersion(DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定したバージョンが存在するかどうかを示す値を取得します。"
  remarks: "参照してください、<xref:System.Data.DataRow.BeginEdit%2A>方法の詳細</xref:System.Data.DataRow.BeginEdit%2A>。"
  example:
  - "The following example uses the HasVersion method to determine whether the current value of a column and the proposed value are the same. If so, the edit is canceled. Otherwise, the <xref:System.Data.DataRow.AcceptChanges%2A> method is called to end the edit.  \n  \n [!code-vb[Classic WebData DataRow.HasVersion Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ha_1.vb)]"
  syntax:
    content: public bool HasVersion (System.Data.DataRowVersion version);
    parameters:
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>行のバージョンを指定する値。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>バージョンが存在する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataRow.HasVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.IsNull(System.Data.DataColumn)
  id: IsNull(System.Data.DataColumn)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: IsNull(DataColumn)
  nameWithType: DataRow.IsNull(DataColumn)
  fullName: System.Data.DataRow.IsNull(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "示す値を取得するかどうか、指定した<xref href=&quot;System.Data.DataColumn&quot;> </xref> null 値が含まれています。"
  remarks: ''
  example:
  - "The following example prints each column of each row in each table of a <xref:System.Data.DataSet>. If the row is set to a null value, the value is not printed.  \n  \n [!code-vb[Classic WebData DataRow.IsNull2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.is_2_1.vb)]"
  syntax:
    content: public bool IsNull (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列に null 値が含まれている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataRow.IsNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.IsNull(System.Int32)
  id: IsNull(System.Int32)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: IsNull(Int32)
  nameWithType: DataRow.IsNull(Int32)
  fullName: System.Data.DataRow.IsNull(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定したインデックス位置にある列が null 値を含むかどうかを示す値を取得します。"
  remarks: ''
  example:
  - "The following example changes the value of a column to a null value, and then uses the IsNull method to determine whether the value is null.  \n  \n [!code-vb[Classic WebData DataRow.IsNull Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.is_1_1.vb)]"
  syntax:
    content: public bool IsNull (int columnIndex);
    parameters:
    - id: columnIndex
      type: System.Int32
      description: "列の&0; から始まるインデックス。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列に null 値が含まれている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataRow.IsNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.IsNull(System.String)
  id: IsNull(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: IsNull(String)
  nameWithType: DataRow.IsNull(String)
  fullName: System.Data.DataRow.IsNull(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "名前付きの列に null 値が含まれるかどうかを示す値を取得します。"
  remarks: ''
  example:
  - "The following example changes the value of a column to a null value, and then uses the <xref:System.Data.DataRow.IsNull%2A> method to determine whether the value is null.  \n  \n [!code-vb[Classic WebData DataRow.IsNull1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.is_0_1.vb)]"
  syntax:
    content: public bool IsNull (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "列の名前。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列に null 値が含まれている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataRow.IsNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)
  id: IsNull(System.Data.DataColumn,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: IsNull(DataColumn,DataRowVersion)
  nameWithType: DataRow.IsNull(DataColumn,DataRowVersion)
  fullName: System.Data.DataRow.IsNull(DataColumn,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "示す値を取得するかどうか、指定した<xref href=&quot;System.Data.DataColumn&quot;></xref>と<xref href=&quot;System.Data.DataRowVersion&quot;> </xref> null 値が含まれています。"
  syntax:
    content: public bool IsNull (System.Data.DataColumn column, System.Data.DataRowVersion version);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;></xref>."
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>行のバージョンを指定する値。 Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列に null 値が含まれている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataRow.IsNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.Data.DataColumn)
  id: Item(System.Data.DataColumn)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(DataColumn)
  nameWithType: DataRow.Item(DataColumn)
  fullName: System.Data.DataRow.Item(DataColumn)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定した格納されたデータを取得または<xref href=&quot;System.Data.DataColumn&quot;></xref>です。"
  remarks: "例外が発生した場合、例外が生成されるプロパティを設定すると、<xref:System.Data.DataTable.ColumnChanging>イベント</xref:System.Data.DataTable.ColumnChanging>。       直前の編集の場合を参照してください<xref:System.Data.DataRow.EndEdit%2A>、生成される例外。</xref:System.Data.DataRow.EndEdit%2A> 。"
  example:
  - "The following examples demonstrate the use of the <xref:System.Data.DataRow.Item%2A> property to get and set the value of a specific column index. The first example gets the value of the first column in any row that a user clicks in a <xref:System.Windows.Forms.DataGrid> control. The second sets a value passed as an argument to the method.  \n  \n [!code-vb[Classic WebData DataRow.this2 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_3_1.vb)]"
  syntax:
    content: public object this[System.Data.DataColumn column] { get; set; }
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;> </xref>データが含まれています。"
    return:
      type: System.Object
      description: "<xref:System.Object>データが含まれています</xref:System.Object>。"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "列は、このテーブルには属していません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>column</code> is null."
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "削除された行に値を設定しようとしました。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "値と列のデータ型が一致しませんしないでください。"
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: DataRow.Item(Int32)
  fullName: System.Data.DataRow.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得またはインデックスによって指定された列に格納されたデータを設定します。"
  remarks: "例外が発生した場合、例外が生成されるプロパティを設定すると、<xref:System.Data.DataTable.ColumnChanging>イベント</xref:System.Data.DataTable.ColumnChanging>。       編集する場合を参照してください<xref:System.Data.DataRow.EndEdit%2A>、生成される例外。</xref:System.Data.DataRow.EndEdit%2A> 。"
  example:
  - "The following examples demonstrate the use of the Item property to get and set the value of a specific column index. The first example gets the value of the first column in any row that a user clicks in a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-vb[Classic WebData DataRow.this Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_0_1.vb)]\n [!code-cs[Classic WebData DataRow.this Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_0_1.cs)]"
  syntax:
    content: public object this[int columnIndex] { get; set; }
    parameters:
    - id: columnIndex
      type: System.Int32
      description: "列の&0; から始まるインデックス。"
    return:
      type: System.Object
      description: "<xref:System.Object>データが含まれています</xref:System.Object>。"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "削除された行に値を設定しようとしたときに発生します。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> columnIndex </code>引数が範囲外です。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "値と新しい値の<xref:System.Type><xref:System.Data.DataColumn.DataType*>。</xref:System.Data.DataColumn.DataType*>と一致しません</xref:System.Type>を設定するときに発生します。"
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.String)
  id: Item(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(String)
  nameWithType: DataRow.Item(String)
  fullName: System.Data.DataRow.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または名前で指定された列に格納されたデータを設定します。"
  remarks: "例外が発生した場合、例外が生成されるプロパティを設定すると、<xref:System.Data.DataTable.ColumnChanging>イベント</xref:System.Data.DataTable.ColumnChanging>。       直前の編集の場合を参照してください<xref:System.Data.DataRow.EndEdit%2A>、生成される例外。</xref:System.Data.DataRow.EndEdit%2A> 。"
  example:
  - "The following examples demonstrate the use of the <xref:System.Data.DataRow.Item%2A> property to get and set the value of a specific column index. The first example gets the value of the first column in any row that a user clicks in a <xref:System.Windows.Forms.DataGrid> control. The second sets a value passed as an argument to the method.  \n  \n [!code-vb[Classic WebData DataRow.this1 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_2_1.vb)]\n [!code-cs[Classic WebData DataRow.this1 Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_2_1.cs)]"
  syntax:
    content: public object this[string columnName] { get; set; }
    parameters:
    - id: columnName
      type: System.String
      description: "列の名前。"
    return:
      type: System.Object
      description: "<xref:System.Object>データが含まれています</xref:System.Object>。"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された列<code> columnName </code>が見つかりません。"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "削除された行に値を設定しようとしたときに発生します。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "値とその<xref:System.Type><xref:System.Data.DataColumn.DataType*>。</xref:System.Data.DataColumn.DataType*>と一致しません</xref:System.Type>を設定するときに発生します。"
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "列に null 値を挿入しようとしたときに発生場所<xref:System.Data.DataColumn.AllowDBNull*>に設定されている<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Data.DataColumn.AllowDBNull*> 。"
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)
  id: Item(System.Data.DataColumn,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(DataColumn,DataRowVersion)
  nameWithType: DataRow.Item(DataColumn,DataRowVersion)
  fullName: System.Data.DataRow.Item(DataColumn,DataRowVersion)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定した格納されているデータの指定したバージョンを取得<xref href=&quot;System.Data.DataColumn&quot;></xref>です。"
  remarks: "`version`と混同しないで、<xref:System.Data.DataRow.RowState%2A>プロパティ</xref:System.Data.DataRow.RowState%2A>。 `version`引数が列の元の値の基準とした列に格納されているデータの状態を説明します。       例外が発生した場合、例外が生成されるプロパティを設定すると、<xref:System.Data.DataTable.ColumnChanging>イベント</xref:System.Data.DataTable.ColumnChanging>。       直前の編集の場合を参照してください<xref:System.Data.DataRow.EndEdit%2A>、生成される例外。</xref:System.Data.DataRow.EndEdit%2A> 。"
  example:
  - "The following example gets the current value of a clicked cell in the <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-cs[Classic WebData DataRow.this5 Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_6_1.cs)]\n [!code-vb[Classic WebData DataRow.this5 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_6_1.vb)]"
  syntax:
    content: public object this[System.Data.DataColumn column, System.Data.DataRowVersion version] { get; }
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;> </xref>列に関する情報を格納します。"
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>する行のバージョンを指定する値。 Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "<xref:System.Object>データが含まれています</xref:System.Object>。"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "列は、テーブルには属していません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> column </code>引数に null が含まれています。"
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "行には、このバージョンのデータはありません。"
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)
  id: Item(System.Int32,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(Int32,DataRowVersion)
  nameWithType: DataRow.Item(Int32,DataRowVersion)
  fullName: System.Data.DataRow.Item(Int32,DataRowVersion)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "インデックスおよび取得するデータのバージョンを指定して、列に格納されたデータを取得します。"
  remarks: "のみを作成したり、<xref:System.Data.DataRow.BeginEdit%2A>メソッドは<xref:System.Data.DataRow.EndEdit%2A>編集をコミットするメソッドを呼び出す必要があります</xref:System.Data.DataRow.EndEdit%2A>同様に、</xref:System.Data.DataRow.BeginEdit%2A>呼び出した後に行を更新 呼び出した後、<xref:System.Data.DataRow.EndEdit%2A>メソッドを呼び出す前に、<xref:System.Data.DataRow.AcceptChanges%2A>値が格納されている提案されたメソッド、および新しい、元の内部表現</xref:System.Data.DataRow.AcceptChanges%2A></xref:System.Data.DataRow.EndEdit%2A>。 そのため、呼び出すまで、 <xref:System.Data.DataRow.AcceptChanges%2A>、使用することができます、`version`列の値のバージョンを必要があるかを指定する引数、`DataRowVersion.Original`または`DataRowVersion.Proposed`</xref:System.Data.DataRow.AcceptChanges%2A>。 ただし、すぐを呼び出すと、<xref:System.Data.DataRow.AcceptChanges%2A>メソッドに、列のバージョンを元に戻します`DataRowVersion.Original`</xref:System.Data.DataRow.AcceptChanges%2A>。 行が新しい場合は、渡すこともできます`DataRowVersion.Default`パラメーターには、列の既定値を取得します。 渡すとき`DataRowVersion.Current`プロパティは、現在を返します。 値の任意のバージョンもあります。      > [!NOTE] >、<xref:System.Data.DataRow.BeginEdit%2A>メソッドは、データ バインド コントロールの値を変更するとき、または暗黙的に呼び出されます、<xref:System.Data.DataRow>にオブジェクトが追加、<xref:System.Data.DataRowCollection>以外の場合は、<xref:System.Data.DataRow.EndEdit%2A>メソッドは、次のメソッドを呼び出すときに暗黙的に呼び出されます。<xref:System.Data.DataRow.AcceptChanges%2A>のメソッド、<xref:System.Data.DataRow>オブジェクト、<xref:System.Data.DataTable.AcceptChanges%2A>のメソッド、<xref:System.Data.DataTable>オブジェクト、または<xref:System.Data.DataRow.CancelEdit%2A>メソッド</xref:System.Data.DataRow.CancelEdit%2A></xref:System.Data.DataTable></xref:System.Data.DataTable.AcceptChanges%2A></xref:System.Data.DataRow></xref:System.Data.DataRow.AcceptChanges%2A></xref:System.Data.DataRow.EndEdit%2A></xref:System.Data.DataRowCollection></xref:System.Data.DataRow></xref:System.Data.DataRow.BeginEdit%2A>。       これに対し、<xref:System.Data.DataRowVersion>列挙`Current`後のデータのバージョンを返します、<xref:System.Data.DataRow.EndEdit%2A>メソッドが呼び出されました</xref:System.Data.DataRow.EndEdit%2A></xref:System.Data.DataRowVersion>。       `version`の引数がないと混同しないでください、<xref:System.Data.DataRow.RowState%2A>プロパティ</xref:System.Data.DataRow.RowState%2A>。 `version`引数が列の元の値の基準とした列に格納されているデータの状態を説明します。 <xref:System.Data.DataRow.RowState%2A>プロパティは、その親<xref:System.Data.DataTable>。</xref:System.Data.DataTable>行全体の状態を説明します。</xref:System.Data.DataRow.RowState%2A>       例外が発生した場合、例外が生成されるプロパティを設定すると、<xref:System.Data.DataTable.ColumnChanging>イベント</xref:System.Data.DataTable.ColumnChanging>。       直前の編集の場合を参照してください<xref:System.Data.DataRow.EndEdit%2A>、生成される例外。</xref:System.Data.DataRow.EndEdit%2A> 。"
  example:
  - "The following example gets the current value of a column through the <xref:System.Data.DataRow.Item%2A> property of the <xref:System.Data.DataRow> object.  \n  \n [!code-vb[Classic WebData DataRow.this3 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_4_1.vb)]"
  syntax:
    content: public object this[int columnIndex, System.Data.DataRowVersion version] { get; }
    parameters:
    - id: columnIndex
      type: System.Int32
      description: "列の&0; から始まるインデックス。"
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>する行のバージョンを指定する値。 Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "<xref:System.Object>データが含まれています</xref:System.Object>。"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> columnIndex </code>引数が範囲外です。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "値と列のデータ型が一致しませんしないでください。"
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "行には、このバージョンのデータはありません。"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "削除された行に値を設定しようとしました。"
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)
  id: Item(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(String,DataRowVersion)
  nameWithType: DataRow.Item(String,DataRowVersion)
  fullName: System.Data.DataRow.Item(String,DataRowVersion)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定されたバージョンの名前付きの列に格納されたデータを取得します。"
  remarks: "バージョンがないと混同しないでください、<xref:System.Data.DataRow.RowState%2A>プロパティ</xref:System.Data.DataRow.RowState%2A>。 `version`引数が列の元の値の基準とした列に格納されているデータの状態を説明します。 <xref:System.Data.DataRow.RowState%2A>プロパティは、その親<xref:System.Data.DataTable>。</xref:System.Data.DataTable>行全体の状態を説明します。</xref:System.Data.DataRow.RowState%2A>       例外が発生した場合、例外が生成されるプロパティを設定すると、<xref:System.Data.DataTable.ColumnChanging>イベント</xref:System.Data.DataTable.ColumnChanging>。       直前の編集の場合を参照してください<xref:System.Data.DataRow.EndEdit%2A>、生成される例外。</xref:System.Data.DataRow.EndEdit%2A> 。"
  example:
  - "The following example gets the current version of data at a clicked cell of a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-vb[Classic WebData DataRow.this4 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_5_1.vb)]\n [!code-cs[Classic WebData DataRow.this4 Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_5_1.cs)]"
  syntax:
    content: public object this[string columnName, System.Data.DataRowVersion version] { get; }
    parameters:
    - id: columnName
      type: System.String
      description: "列の名前。"
    - id: version
      type: System.Data.DataRowVersion
      description: "1 つ、 <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>する行のバージョンを指定する値。 Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "<xref:System.Object>データが含まれています</xref:System.Object>。"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された列<code> columnName </code>が見つかりません。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "値と列のデータ型が一致しませんしないでください。"
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "行には、このバージョンのデータはありません。"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "行が削除されました。"
  platform:
  - net462
- uid: System.Data.DataRow.ItemArray
  id: ItemArray
  parent: System.Data.DataRow
  langs:
  - csharp
  name: ItemArray
  nameWithType: DataRow.ItemArray
  fullName: System.Data.DataRow.ItemArray
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または配列を使用してこの行のすべての値を設定します。"
  remarks: "このプロパティを使用して、配列を使用してこの行の値を取得または設定することができます。 このプロパティを使用して値を設定する場合、配列は同じサイズと、列のコレクションと順序が必要です。 渡す`null`ItemArray では、値が指定されていないことを示します。       ユーザーでの例外を生成できます、<xref:System.Data.DataTable.ColumnChanging>イベントまたは<xref:System.Data.DataTable.RowChanging>イベント</xref:System.Data.DataTable.RowChanging></xref:System.Data.DataTable.ColumnChanging>。"
  example:
  - "The following examples show how to get and set values using the ItemArray property.  \n  \n [!code-vb[Classic WebData DataRow.ItemArray Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_1_1.vb)]\n [!code-cs[Classic WebData DataRow.ItemArray Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_1_1.cs)]"
  syntax:
    content: public object[] ItemArray { get; set; }
    return:
      type: System.Object[]
      description: "<xref:System.Object>。</xref:System.Object>型の配列"
  overload: System.Data.DataRow.ItemArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "配列は、テーブル内の列の数を超えています。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "配列内の値と一致しません、<xref:System.Data.DataColumn.DataType*>でそれぞれの<xref href=&quot;System.Data.DataColumn&quot;> </xref></xref:System.Data.DataColumn.DataType*> 。"
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "編集が制約に違反します。"
  - type: System.Data.ReadOnlyException
    commentId: T:System.Data.ReadOnlyException
    description: "編集が読み取り専用の列の値を変更しようとするとします。"
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "編集が、列に null 値を格納しようとしていますここで<xref:System.Data.DataColumn.AllowDBNull*>の、 <xref href=&quot;System.Data.DataColumn&quot;> </xref>オブジェクトが<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Data.DataColumn.AllowDBNull*> 。"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "行が削除されました。"
  platform:
  - net462
- uid: System.Data.DataRow.RejectChanges
  id: RejectChanges
  parent: System.Data.DataRow
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataRow.RejectChanges()
  fullName: System.Data.DataRow.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "以降の行に加えられたすべての変更を拒否した<xref:System.Data.DataRow.AcceptChanges*>最後に呼び出されています</xref:System.Data.DataRow.AcceptChanges*>。"
  remarks: "RejectChanges メソッドを呼び出すと、<xref:System.Data.DataRow.CancelEdit%2A>メソッドが暗黙的にすべての編集をキャンセルすると呼ばれる</xref:System.Data.DataRow.CancelEdit%2A>。 場合<xref:System.Data.DataRow.RowState%2A>を削除または変更するには、行をその前の値を元に戻しますと<xref:System.Data.DataRow.RowState%2A>変更されずになります</xref:System.Data.DataRow.RowState%2A></xref:System.Data.DataRow.RowState%2A>。 場合、<xref:System.Data.DataRow.RowState%2A>が追加すると、行を削除します</xref:System.Data.DataRow.RowState%2A>。"
  example:
  - "The following example creates a simple <xref:System.Data.DataTable> with 2 columns and 10 rows. After several <xref:System.Data.DataRow> items are deleted with the <xref:System.Data.DataRow.Delete%2A> method, one of the rows is undeleted by invoking RejectChanges.  \n  \n [!code-vb[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.re_1.vb)]\n [!code-cs[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/csharp/m-system.data.datarow.re_1.cs)]"
  syntax:
    content: public void RejectChanges ();
    parameters: []
  overload: System.Data.DataRow.RejectChanges*
  exceptions:
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行は、テーブルには属していません。"
  platform:
  - net462
- uid: System.Data.DataRow.RowError
  id: RowError
  parent: System.Data.DataRow
  langs:
  - csharp
  name: RowError
  nameWithType: DataRow.RowError
  fullName: System.Data.DataRow.RowError
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または行のカスタム エラーの説明を設定します。"
  remarks: "使用して、<xref:System.Data.DataRow.HasErrors%2A>最初を決定するプロパティかどうか、<xref:System.Data.DataRow>エラーが含まれています</xref:System.Data.DataRow></xref:System.Data.DataRow.HasErrors%2A>。"
  example:
  - "The following example sets error text for ten rows of a table displayed in a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-cs[Classic WebData DataRow.RowError Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ro_1_1.cs)]\n [!code-vb[Classic WebData DataRow.RowError Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ro_1_1.vb)]"
  syntax:
    content: public string RowError { get; set; }
    return:
      type: System.String
      description: "エラーを説明するテキストです。"
  overload: System.Data.DataRow.RowError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.RowState
  id: RowState
  parent: System.Data.DataRow
  langs:
  - csharp
  name: RowState
  nameWithType: DataRow.RowState
  fullName: System.Data.DataRow.RowState
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "関係に関して、行の現在の状態を取得、 <xref href=&quot;System.Data.DataRowCollection&quot;></xref>です。"
  remarks: 'RowState の値は、次の&2; つの要因によって異なります: 操作の種類が、行に対して実行されたかどうかおよび<xref:System.Data.DataRow.AcceptChanges%2A>は<xref:System.Data.DataRow>。</xref:System.Data.DataRow>で呼び出されました</xref:System.Data.DataRow.AcceptChanges%2A>。'
  example:
  - "The following example first creates a new <xref:System.Data.DataTable> with one column, and then creates a single <xref:System.Data.DataRow>. As the <xref:System.Data.DataRow> is created, added, modified, and deleted, its RowState is printed.  \n  \n [!code-vb[Classic WebData DataRow.RowState Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ro_0_1.vb)]\n [!code-cs[Classic WebData DataRow.RowState Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ro_0_1.cs)]"
  syntax:
    content: public System.Data.DataRowState RowState { get; }
    return:
      type: System.Data.DataRowState
      description: "1 つ、 <xref href=&quot;System.Data.DataRowState&quot;> </xref>値。"
  overload: System.Data.DataRow.RowState*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetAdded
  id: SetAdded
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetAdded()
  nameWithType: DataRow.SetAdded()
  fullName: System.Data.DataRow.SetAdded()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Changes the <xref:System.Data.DataRow.Rowstate*> of a <xref href=&quot;System.Data.DataRow&quot;></xref> to <xref uid=&quot;langword_csharp_Added&quot; name=&quot;Added&quot; href=&quot;&quot;></xref>.</xref:System.Data.DataRow.Rowstate*>"
  remarks: "変更、<xref:System.Data.DataRow.RowState%2A>の<xref:System.Data.DataRow>に`Added`</xref:System.Data.DataRow></xref:System.Data.DataRow.RowState%2A>。 いずれかで、現在の行がない場合、`Unchanged`または`Added`状態がスローされます、<xref:System.InvalidOperationException>メッセージを使用する`SetAdded`でのみ呼び出すことができます、 `DataRow` where をインスタンス化、`RowState`は`Unchanged`</xref:System.InvalidOperationException>。"
  syntax:
    content: public void SetAdded ();
    parameters: []
  overload: System.Data.DataRow.SetAdded*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)
  id: SetColumnError(System.Data.DataColumn,System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetColumnError(DataColumn,String)
  nameWithType: DataRow.SetColumnError(DataColumn,String)
  fullName: System.Data.DataRow.SetColumnError(DataColumn,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定された列のエラーの説明を設定、 <xref href=&quot;System.Data.DataColumn&quot;></xref>です。"
  remarks: "エラーの説明を確認するを使用して、<xref:System.Data.DataRow.GetColumnError%2A>メソッド</xref:System.Data.DataRow.GetColumnError%2A>。       Columns コレクションにエラーがあるかどうかを確認するには<xref:System.Data.DataRow.HasErrors%2A>プロパティ</xref:System.Data.DataRow.HasErrors%2A>。 したがって、使用することができます、<xref:System.Data.DataRow.GetColumnsInError%2A>エラーのあるすべての列を取得するメソッド</xref:System.Data.DataRow.GetColumnsInError%2A>。       場合`null`、空の文字列として渡されるか、`error`パラメーターを<xref:System.Data.DataRow>エラーが設定されていないような動作と<xref:System.Data.DataRow.HasErrors%2A>プロパティは false を返します</xref:System.Data.DataRow.HasErrors%2A></xref:System.Data.DataRow>。       行全体で、カスタム エラーの説明を設定するには、使用、<xref:System.Data.DataRow.RowError%2A>プロパティ</xref:System.Data.DataRow.RowError%2A>。       Columns コレクションにエラーがあるかどうかを確認するには<xref:System.Data.DataRow.HasErrors%2A>メソッド</xref:System.Data.DataRow.HasErrors%2A>。       列コレクションのすべてのエラーをクリアする、<xref:System.Data.DataRow.ClearErrors%2A>メソッド</xref:System.Data.DataRow.ClearErrors%2A>。"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.se_3_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_3_1.vb)]"
  syntax:
    content: public void SetColumnError (System.Data.DataColumn column, string error);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "<xref href=&quot;System.Data.DataColumn&quot;> </xref>のエラーの説明を設定します。"
    - id: error
      type: System.String
      description: "エラーの説明。"
  overload: System.Data.DataRow.SetColumnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetColumnError(System.Int32,System.String)
  id: SetColumnError(System.Int32,System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetColumnError(Int32,String)
  nameWithType: DataRow.SetColumnError(Int32,String)
  fullName: System.Data.DataRow.SetColumnError(Int32,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "インデックスで指定された列のエラーの説明を設定します。"
  remarks: "メソッドは、指定された列のカスタム エラーの説明を設定するが使用されます。 使用することができます、<xref:System.Windows.Forms.ErrorProvider>エラーのテキストを表示するコントロール</xref:System.Windows.Forms.ErrorProvider>。       エラーの説明を確認するを使用して、<xref:System.Data.DataRow.GetColumnError%2A>メソッド</xref:System.Data.DataRow.GetColumnError%2A>。       Columns コレクションにエラーがあるかどうかを確認するには<xref:System.Data.DataRow.HasErrors%2A>プロパティ</xref:System.Data.DataRow.HasErrors%2A>。 したがって、使用することができます、<xref:System.Data.DataRow.GetColumnsInError%2A>エラーのあるすべての列を取得するメソッド</xref:System.Data.DataRow.GetColumnsInError%2A>。       場合`null`、空の文字列として渡されるか、`error`パラメーターを<xref:System.Data.DataRow>エラーが設定されていないような動作と<xref:System.Data.DataRow.HasErrors%2A>プロパティは false を返します</xref:System.Data.DataRow.HasErrors%2A></xref:System.Data.DataRow>。       行全体で、カスタム エラーの説明を設定するには、使用、<xref:System.Data.DataRow.RowError%2A>プロパティ</xref:System.Data.DataRow.RowError%2A>。       列コレクションのすべてのエラーをクリアする、<xref:System.Data.DataRow.ClearErrors%2A>メソッド</xref:System.Data.DataRow.ClearErrors%2A>。       行全体に適用されるエラー テキストを設定するには、設定、<xref:System.Data.DataRow.RowError%2A>プロパティ</xref:System.Data.DataRow.RowError%2A>。"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.se_0_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_0_1.vb)]"
  syntax:
    content: public void SetColumnError (int columnIndex, string error);
    parameters:
    - id: columnIndex
      type: System.Int32
      description: "列の&0; から始まるインデックス。"
    - id: error
      type: System.String
      description: "エラーの説明。"
  overload: System.Data.DataRow.SetColumnError*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> columnIndex </code>の引数が範囲外です"
  platform:
  - net462
- uid: System.Data.DataRow.SetColumnError(System.String,System.String)
  id: SetColumnError(System.String,System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetColumnError(String,String)
  nameWithType: DataRow.SetColumnError(String,String)
  fullName: System.Data.DataRow.SetColumnError(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "名前で指定された列のエラーの説明を設定します。"
  remarks: "<xref:System.Data.DataColumn.ColumnName%2A><xref:System.Data.DataColumn>クラス</xref:System.Data.DataColumn>のプロパティ</xref:System.Data.DataColumn.ColumnName%2A>を使用して、列の名前を設定します。       エラーの説明を確認するを使用して、<xref:System.Data.DataRow.GetColumnError%2A>メソッド</xref:System.Data.DataRow.GetColumnError%2A>。       Columns コレクションにエラーがあるかどうかを確認するには<xref:System.Data.DataRow.HasErrors%2A>プロパティ</xref:System.Data.DataRow.HasErrors%2A>。 したがって、使用することができます、<xref:System.Data.DataRow.GetColumnsInError%2A>エラーのあるすべての列を取得するメソッド</xref:System.Data.DataRow.GetColumnsInError%2A>。       場合`null`、空の文字列として渡されるか、`error`パラメーターを<xref:System.Data.DataRow>エラーが設定されていないような動作と<xref:System.Data.DataRow.HasErrors%2A>プロパティは false を返します</xref:System.Data.DataRow.HasErrors%2A></xref:System.Data.DataRow>。       行全体で、カスタム エラーの説明を設定するには、使用、<xref:System.Data.DataRow.RowError%2A>プロパティ</xref:System.Data.DataRow.RowError%2A>。       Columns コレクションにエラーがあるかどうかを確認するには<xref:System.Data.DataRow.HasErrors%2A>メソッド</xref:System.Data.DataRow.HasErrors%2A>。       列コレクションのすべてのエラーをクリアする、<xref:System.Data.DataRow.ClearErrors%2A>メソッド</xref:System.Data.DataRow.ClearErrors%2A>。"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.se_1_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_1_1.vb)]"
  syntax:
    content: public void SetColumnError (string columnName, string error);
    parameters:
    - id: columnName
      type: System.String
      description: "列の名前。"
    - id: error
      type: System.String
      description: "エラーの説明。"
  overload: System.Data.DataRow.SetColumnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetModified
  id: SetModified
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetModified()
  nameWithType: DataRow.SetModified()
  fullName: System.Data.DataRow.SetModified()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Changes the <xref:System.Data.DataRow.Rowstate*> of a <xref href=&quot;System.Data.DataRow&quot;></xref> to <xref uid=&quot;langword_csharp_Modified&quot; name=&quot;Modified&quot; href=&quot;&quot;></xref>.</xref:System.Data.DataRow.Rowstate*>"
  remarks: "変更、<xref:System.Data.DataRow.Rowstate%2A>の<xref:System.Data.DataRow>に`Modified`</xref:System.Data.DataRow></xref:System.Data.DataRow.Rowstate%2A>。 いずれかで、現在の行がない場合、`Unchanged`または`Added`状態がスローされます、<xref:System.InvalidOperationException>メッセージを使用する`SetModified`でのみ呼び出すことができます、 `DataRow` where をインスタンス化、`RowState`は`Unchanged`</xref:System.InvalidOperationException>。"
  syntax:
    content: public void SetModified ();
    parameters: []
  overload: System.Data.DataRow.SetModified*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetNull(System.Data.DataColumn)
  id: SetNull(System.Data.DataColumn)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetNull(DataColumn)
  nameWithType: DataRow.SetNull(DataColumn)
  fullName: System.Data.DataRow.SetNull(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定した値を設定<xref href=&quot;System.Data.DataColumn&quot;></xref>を null 値にします。"
  remarks: "使用して、<xref:System.Data.DataRow.IsNull%2A>列に null 値が含まれるかどうかを調べます</xref:System.Data.DataRow.IsNull%2A>。"
  syntax:
    content: protected void SetNull (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;></xref>."
  overload: System.Data.DataRow.SetNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetParentRow(System.Data.DataRow)
  id: SetParentRow(System.Data.DataRow)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetParentRow(DataRow)
  nameWithType: DataRow.SetParentRow(DataRow)
  fullName: System.Data.DataRow.SetParentRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "親行の設定、 <xref href=&quot;System.Data.DataRow&quot;> </xref>で指定された新しい親<xref href=&quot;System.Data.DataRow&quot;></xref>です。"
  syntax:
    content: public void SetParentRow (System.Data.DataRow parentRow);
    parameters:
    - id: parentRow
      type: System.Data.DataRow
      description: "新しい親<xref href=&quot;System.Data.DataRow&quot;></xref>です。"
  overload: System.Data.DataRow.SetParentRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)
  id: SetParentRow(System.Data.DataRow,System.Data.DataRelation)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetParentRow(DataRow,DataRelation)
  nameWithType: DataRow.SetParentRow(DataRow,DataRelation)
  fullName: System.Data.DataRow.SetParentRow(DataRow,DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "親行の設定、 <xref href=&quot;System.Data.DataRow&quot;> </xref>で指定された新しい親<xref href=&quot;System.Data.DataRow&quot;></xref>と<xref href=&quot;System.Data.DataRelation&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example sets the parent row of a specific child row.  \n  \n [!code-vb[Classic WebData DataRow.SetParentRow1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_2_1.vb)]"
  syntax:
    content: public void SetParentRow (System.Data.DataRow parentRow, System.Data.DataRelation relation);
    parameters:
    - id: parentRow
      type: System.Data.DataRow
      description: "新しい親<xref href=&quot;System.Data.DataRow&quot;></xref>です。"
    - id: relation
      type: System.Data.DataRelation
      description: "リレーション<xref href=&quot;System.Data.DataRelation&quot;></xref>を使用します。"
  overload: System.Data.DataRow.SetParentRow*
  exceptions:
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "行の&1; つは、テーブルに属していません"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "行の&1; つは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "リレーションに属さない、 <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>の<xref href=&quot;System.Data.DataSet&quot;></xref>オブジェクト。"
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "リレーションシップの子<xref href=&quot;System.Data.DataTable&quot;></xref>この行が属するテーブルではありません。"
  platform:
  - net462
- uid: System.Data.DataRow.Table
  id: Table
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Table
  nameWithType: DataRow.Table
  fullName: System.Data.DataRow.Table
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得、 <xref href=&quot;System.Data.DataTable&quot;> </xref>この行にスキーマがあります。"
  remarks: "A<xref:System.Data.DataRow>必ずしも行の任意のテーブルのコレクションに属していません</xref:System.Data.DataRow>。 この現象が発生したときに、<xref:System.Data.DataRow>作成されましたが、 <xref:System.Data.DataRowCollection>.</xref:System.Data.DataRowCollection>に追加されていません。</xref:System.Data.DataRow> 場合、<xref:System.Data.DataRow.RowState%2A>プロパティから返される`DataRowState.Detached`、すべてのコレクション内に、行がない</xref:System.Data.DataRow.RowState%2A>。"
  example:
  - "The following example uses the Table property to return a reference to the columns collection of the <xref:System.Data.DataTable>.  \n  \n [!code-cs[Classic WebData DataRow.Table Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ta_1.cs)]\n [!code-vb[Classic WebData DataRow.Table Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ta_1.vb)]"
  syntax:
    content: public System.Data.DataTable Table { get; }
    return:
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref>この行が属しています。"
  overload: System.Data.DataRow.Table*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.RowNotInTableException
  parent: System.Data
  isExternal: false
  name: RowNotInTableException
  nameWithType: RowNotInTableException
  fullName: System.Data.RowNotInTableException
- uid: System.Data.InRowChangingEventException
  parent: System.Data
  isExternal: false
  name: InRowChangingEventException
  nameWithType: InRowChangingEventException
  fullName: System.Data.InRowChangingEventException
- uid: System.Data.DeletedRowInaccessibleException
  parent: System.Data
  isExternal: false
  name: DeletedRowInaccessibleException
  nameWithType: DeletedRowInaccessibleException
  fullName: System.Data.DeletedRowInaccessibleException
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.Data.ReadOnlyException
  parent: System.Data
  isExternal: false
  name: ReadOnlyException
  nameWithType: ReadOnlyException
  fullName: System.Data.ReadOnlyException
- uid: System.Data.NoNullAllowedException
  parent: System.Data
  isExternal: false
  name: NoNullAllowedException
  nameWithType: NoNullAllowedException
  fullName: System.Data.NoNullAllowedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.VersionNotFoundException
  parent: System.Data
  isExternal: false
  name: VersionNotFoundException
  nameWithType: VersionNotFoundException
  fullName: System.Data.VersionNotFoundException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.DataException
  parent: System.Data
  isExternal: false
  name: DataException
  nameWithType: DataException
  fullName: System.Data.DataException
- uid: System.Data.InvalidConstraintException
  parent: System.Data
  isExternal: false
  name: InvalidConstraintException
  nameWithType: InvalidConstraintException
  fullName: System.Data.InvalidConstraintException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.DataRow.#ctor(System.Data.DataRowBuilder)
  parent: System.Data.DataRow
  isExternal: false
  name: DataRow(DataRowBuilder)
  nameWithType: DataRow.DataRow(DataRowBuilder)
  fullName: System.Data.DataRow.DataRow(DataRowBuilder)
- uid: System.Data.DataRowBuilder
  parent: System.Data
  isExternal: false
  name: DataRowBuilder
  nameWithType: DataRowBuilder
  fullName: System.Data.DataRowBuilder
- uid: System.Data.DataRow.AcceptChanges
  parent: System.Data.DataRow
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataRow.AcceptChanges()
  fullName: System.Data.DataRow.AcceptChanges()
- uid: System.Data.DataRow.BeginEdit
  parent: System.Data.DataRow
  isExternal: false
  name: BeginEdit()
  nameWithType: DataRow.BeginEdit()
  fullName: System.Data.DataRow.BeginEdit()
- uid: System.Data.DataRow.CancelEdit
  parent: System.Data.DataRow
  isExternal: false
  name: CancelEdit()
  nameWithType: DataRow.CancelEdit()
  fullName: System.Data.DataRow.CancelEdit()
- uid: System.Data.DataRow.ClearErrors
  parent: System.Data.DataRow
  isExternal: false
  name: ClearErrors()
  nameWithType: DataRow.ClearErrors()
  fullName: System.Data.DataRow.ClearErrors()
- uid: System.Data.DataRow.Delete
  parent: System.Data.DataRow
  isExternal: false
  name: Delete()
  nameWithType: DataRow.Delete()
  fullName: System.Data.DataRow.Delete()
- uid: System.Data.DataRow.EndEdit
  parent: System.Data.DataRow
  isExternal: false
  name: EndEdit()
  nameWithType: DataRow.EndEdit()
  fullName: System.Data.DataRow.EndEdit()
- uid: System.Data.DataRow.GetChildRows(System.Data.DataRelation)
  parent: System.Data.DataRow
  isExternal: false
  name: GetChildRows(DataRelation)
  nameWithType: DataRow.GetChildRows(DataRelation)
  fullName: System.Data.DataRow.GetChildRows(DataRelation)
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRelation
  parent: System.Data
  isExternal: false
  name: DataRelation
  nameWithType: DataRelation
  fullName: System.Data.DataRelation
- uid: System.Data.DataRow.GetChildRows(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: GetChildRows(String)
  nameWithType: DataRow.GetChildRows(String)
  fullName: System.Data.DataRow.GetChildRows(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetChildRows(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetChildRows(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetChildRows(DataRelation,DataRowVersion)
- uid: System.Data.DataRowVersion
  parent: System.Data
  isExternal: false
  name: DataRowVersion
  nameWithType: DataRowVersion
  fullName: System.Data.DataRowVersion
- uid: System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetChildRows(String,DataRowVersion)
  nameWithType: DataRow.GetChildRows(String,DataRowVersion)
  fullName: System.Data.DataRow.GetChildRows(String,DataRowVersion)
- uid: System.Data.DataRow.GetColumnError(System.Data.DataColumn)
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnError(DataColumn)
  nameWithType: DataRow.GetColumnError(DataColumn)
  fullName: System.Data.DataRow.GetColumnError(DataColumn)
- uid: System.Data.DataColumn
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Data.DataRow.GetColumnError(System.Int32)
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnError(Int32)
  nameWithType: DataRow.GetColumnError(Int32)
  fullName: System.Data.DataRow.GetColumnError(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRow.GetColumnError(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnError(String)
  nameWithType: DataRow.GetColumnError(String)
  fullName: System.Data.DataRow.GetColumnError(String)
- uid: System.Data.DataRow.GetColumnsInError
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnsInError()
  nameWithType: DataRow.GetColumnsInError()
  fullName: System.Data.DataRow.GetColumnsInError()
- uid: System.Data.DataColumn[]
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn[]
  spec.csharp:
  - uid: System.Data.DataColumn
    name: DataColumn
    nameWithType: DataColumn
    fullName: DataColumn[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRow.GetParentRow(System.Data.DataRelation)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRow(DataRelation)
  nameWithType: DataRow.GetParentRow(DataRelation)
  fullName: System.Data.DataRow.GetParentRow(DataRelation)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataRow.GetParentRow(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRow(String)
  nameWithType: DataRow.GetParentRow(String)
  fullName: System.Data.DataRow.GetParentRow(String)
- uid: System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRow(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetParentRow(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRow(DataRelation,DataRowVersion)
- uid: System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRow(String,DataRowVersion)
  nameWithType: DataRow.GetParentRow(String,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRow(String,DataRowVersion)
- uid: System.Data.DataRow.GetParentRows(System.Data.DataRelation)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRows(DataRelation)
  nameWithType: DataRow.GetParentRows(DataRelation)
  fullName: System.Data.DataRow.GetParentRows(DataRelation)
- uid: System.Data.DataRow.GetParentRows(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRows(String)
  nameWithType: DataRow.GetParentRows(String)
  fullName: System.Data.DataRow.GetParentRows(String)
- uid: System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRows(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetParentRows(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRows(DataRelation,DataRowVersion)
- uid: System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRows(String,DataRowVersion)
  nameWithType: DataRow.GetParentRows(String,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRows(String,DataRowVersion)
- uid: System.Data.DataRow.HasErrors
  parent: System.Data.DataRow
  isExternal: false
  name: HasErrors
  nameWithType: DataRow.HasErrors
  fullName: System.Data.DataRow.HasErrors
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataRow.HasVersion(System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: HasVersion(DataRowVersion)
  nameWithType: DataRow.HasVersion(DataRowVersion)
  fullName: System.Data.DataRow.HasVersion(DataRowVersion)
- uid: System.Data.DataRow.IsNull(System.Data.DataColumn)
  parent: System.Data.DataRow
  isExternal: false
  name: IsNull(DataColumn)
  nameWithType: DataRow.IsNull(DataColumn)
  fullName: System.Data.DataRow.IsNull(DataColumn)
- uid: System.Data.DataRow.IsNull(System.Int32)
  parent: System.Data.DataRow
  isExternal: false
  name: IsNull(Int32)
  nameWithType: DataRow.IsNull(Int32)
  fullName: System.Data.DataRow.IsNull(Int32)
- uid: System.Data.DataRow.IsNull(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: IsNull(String)
  nameWithType: DataRow.IsNull(String)
  fullName: System.Data.DataRow.IsNull(String)
- uid: System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: IsNull(DataColumn,DataRowVersion)
  nameWithType: DataRow.IsNull(DataColumn,DataRowVersion)
  fullName: System.Data.DataRow.IsNull(DataColumn,DataRowVersion)
- uid: System.Data.DataRow.Item(System.Data.DataColumn)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(DataColumn)
  nameWithType: DataRow.Item(DataColumn)
  fullName: System.Data.DataRow.Item(DataColumn)
- uid: System.Data.DataRow.Item(System.Int32)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(Int32)
  nameWithType: DataRow.Item(Int32)
  fullName: System.Data.DataRow.Item(Int32)
- uid: System.Data.DataRow.Item(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(String)
  nameWithType: DataRow.Item(String)
  fullName: System.Data.DataRow.Item(String)
- uid: System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(DataColumn,DataRowVersion)
  nameWithType: DataRow.Item(DataColumn,DataRowVersion)
  fullName: System.Data.DataRow.Item(DataColumn,DataRowVersion)
- uid: System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(Int32,DataRowVersion)
  nameWithType: DataRow.Item(Int32,DataRowVersion)
  fullName: System.Data.DataRow.Item(Int32,DataRowVersion)
- uid: System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(String,DataRowVersion)
  nameWithType: DataRow.Item(String,DataRowVersion)
  fullName: System.Data.DataRow.Item(String,DataRowVersion)
- uid: System.Data.DataRow.ItemArray
  parent: System.Data.DataRow
  isExternal: false
  name: ItemArray
  nameWithType: DataRow.ItemArray
  fullName: System.Data.DataRow.ItemArray
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRow.RejectChanges
  parent: System.Data.DataRow
  isExternal: false
  name: RejectChanges()
  nameWithType: DataRow.RejectChanges()
  fullName: System.Data.DataRow.RejectChanges()
- uid: System.Data.DataRow.RowError
  parent: System.Data.DataRow
  isExternal: false
  name: RowError
  nameWithType: DataRow.RowError
  fullName: System.Data.DataRow.RowError
- uid: System.Data.DataRow.RowState
  parent: System.Data.DataRow
  isExternal: false
  name: RowState
  nameWithType: DataRow.RowState
  fullName: System.Data.DataRow.RowState
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataRow.SetAdded
  parent: System.Data.DataRow
  isExternal: false
  name: SetAdded()
  nameWithType: DataRow.SetAdded()
  fullName: System.Data.DataRow.SetAdded()
- uid: System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: SetColumnError(DataColumn,String)
  nameWithType: DataRow.SetColumnError(DataColumn,String)
  fullName: System.Data.DataRow.SetColumnError(DataColumn,String)
- uid: System.Data.DataRow.SetColumnError(System.Int32,System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: SetColumnError(Int32,String)
  nameWithType: DataRow.SetColumnError(Int32,String)
  fullName: System.Data.DataRow.SetColumnError(Int32,String)
- uid: System.Data.DataRow.SetColumnError(System.String,System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: SetColumnError(String,String)
  nameWithType: DataRow.SetColumnError(String,String)
  fullName: System.Data.DataRow.SetColumnError(String,String)
- uid: System.Data.DataRow.SetModified
  parent: System.Data.DataRow
  isExternal: false
  name: SetModified()
  nameWithType: DataRow.SetModified()
  fullName: System.Data.DataRow.SetModified()
- uid: System.Data.DataRow.SetNull(System.Data.DataColumn)
  parent: System.Data.DataRow
  isExternal: false
  name: SetNull(DataColumn)
  nameWithType: DataRow.SetNull(DataColumn)
  fullName: System.Data.DataRow.SetNull(DataColumn)
- uid: System.Data.DataRow.SetParentRow(System.Data.DataRow)
  parent: System.Data.DataRow
  isExternal: false
  name: SetParentRow(DataRow)
  nameWithType: DataRow.SetParentRow(DataRow)
  fullName: System.Data.DataRow.SetParentRow(DataRow)
- uid: System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)
  parent: System.Data.DataRow
  isExternal: false
  name: SetParentRow(DataRow,DataRelation)
  nameWithType: DataRow.SetParentRow(DataRow,DataRelation)
  fullName: System.Data.DataRow.SetParentRow(DataRow,DataRelation)
- uid: System.Data.DataRow.Table
  parent: System.Data.DataRow
  isExternal: false
  name: Table
  nameWithType: DataRow.Table
  fullName: System.Data.DataRow.Table
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataRow.#ctor*
  parent: System.Data.DataRow
  isExternal: false
  name: DataRow
  nameWithType: DataRow.DataRow
- uid: System.Data.DataRow.AcceptChanges*
  parent: System.Data.DataRow
  isExternal: false
  name: AcceptChanges
  nameWithType: DataRow.AcceptChanges
- uid: System.Data.DataRow.BeginEdit*
  parent: System.Data.DataRow
  isExternal: false
  name: BeginEdit
  nameWithType: DataRow.BeginEdit
- uid: System.Data.DataRow.CancelEdit*
  parent: System.Data.DataRow
  isExternal: false
  name: CancelEdit
  nameWithType: DataRow.CancelEdit
- uid: System.Data.DataRow.ClearErrors*
  parent: System.Data.DataRow
  isExternal: false
  name: ClearErrors
  nameWithType: DataRow.ClearErrors
- uid: System.Data.DataRow.Delete*
  parent: System.Data.DataRow
  isExternal: false
  name: Delete
  nameWithType: DataRow.Delete
- uid: System.Data.DataRow.EndEdit*
  parent: System.Data.DataRow
  isExternal: false
  name: EndEdit
  nameWithType: DataRow.EndEdit
- uid: System.Data.DataRow.GetChildRows*
  parent: System.Data.DataRow
  isExternal: false
  name: GetChildRows
  nameWithType: DataRow.GetChildRows
- uid: System.Data.DataRow.GetColumnError*
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnError
  nameWithType: DataRow.GetColumnError
- uid: System.Data.DataRow.GetColumnsInError*
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnsInError
  nameWithType: DataRow.GetColumnsInError
- uid: System.Data.DataRow.GetParentRow*
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRow
  nameWithType: DataRow.GetParentRow
- uid: System.Data.DataRow.GetParentRows*
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRows
  nameWithType: DataRow.GetParentRows
- uid: System.Data.DataRow.HasErrors*
  parent: System.Data.DataRow
  isExternal: false
  name: HasErrors
  nameWithType: DataRow.HasErrors
- uid: System.Data.DataRow.HasVersion*
  parent: System.Data.DataRow
  isExternal: false
  name: HasVersion
  nameWithType: DataRow.HasVersion
- uid: System.Data.DataRow.IsNull*
  parent: System.Data.DataRow
  isExternal: false
  name: IsNull
  nameWithType: DataRow.IsNull
- uid: System.Data.DataRow.Item*
  parent: System.Data.DataRow
  isExternal: false
  name: Item
  nameWithType: DataRow.Item
- uid: System.Data.DataRow.ItemArray*
  parent: System.Data.DataRow
  isExternal: false
  name: ItemArray
  nameWithType: DataRow.ItemArray
- uid: System.Data.DataRow.RejectChanges*
  parent: System.Data.DataRow
  isExternal: false
  name: RejectChanges
  nameWithType: DataRow.RejectChanges
- uid: System.Data.DataRow.RowError*
  parent: System.Data.DataRow
  isExternal: false
  name: RowError
  nameWithType: DataRow.RowError
- uid: System.Data.DataRow.RowState*
  parent: System.Data.DataRow
  isExternal: false
  name: RowState
  nameWithType: DataRow.RowState
- uid: System.Data.DataRow.SetAdded*
  parent: System.Data.DataRow
  isExternal: false
  name: SetAdded
  nameWithType: DataRow.SetAdded
- uid: System.Data.DataRow.SetColumnError*
  parent: System.Data.DataRow
  isExternal: false
  name: SetColumnError
  nameWithType: DataRow.SetColumnError
- uid: System.Data.DataRow.SetModified*
  parent: System.Data.DataRow
  isExternal: false
  name: SetModified
  nameWithType: DataRow.SetModified
- uid: System.Data.DataRow.SetNull*
  parent: System.Data.DataRow
  isExternal: false
  name: SetNull
  nameWithType: DataRow.SetNull
- uid: System.Data.DataRow.SetParentRow*
  parent: System.Data.DataRow
  isExternal: false
  name: SetParentRow
  nameWithType: DataRow.SetParentRow
- uid: System.Data.DataRow.Table*
  parent: System.Data.DataRow
  isExternal: false
  name: Table
  nameWithType: DataRow.Table
