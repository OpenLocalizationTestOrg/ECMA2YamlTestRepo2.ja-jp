### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.RecognizedWordUnit
  id: RecognizedWordUnit
  children:
  - System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  - System.Speech.Recognition.RecognizedWordUnit.Confidence
  - System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  - System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  - System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  - System.Speech.Recognition.RecognizedWordUnit.Text
  langs:
  - csharp
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit
  fullName: System.Speech.Recognition.RecognizedWordUnit
  type: Class
  summary: "音声認識のアトミック ユニットを提供します。"
  remarks: "認識エンジンによって返されるすべての結果は、RecognizedWordUnit オブジェクトの構築されます。       RecognizedWordUnit オブジェクトの配列は、すべての認識操作を介してアクセス可能な<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>プロパティを<xref:System.Speech.Recognition.RecognizedPhrase>オブジェクト</xref:System.Speech.Recognition.RecognizedPhrase></xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>。       認識の確実性のメジャーを提供するだけでなく (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) RecognizedWordUnit インスタンスが提供: - 正規化された正確な (または構文) 認識された単語のテキスト表現</xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>。 詳細については、次を参照してください<xref:System.Speech.Recognition.ReplacementText>、 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>、 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>。</xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> </xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> </xref:System.Speech.Recognition.ReplacementText> 。      -発音情報が、サポートされている音標文字、国際音声記号 (IPA) またはユニバーサル電話設定 (UPS) などの文字を使用します。 詳細については、 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>。</xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>を参照してください。      印刷の書式設定します。 詳細については、次を参照してください、<xref:System.Speech.Recognition.DisplayAttributes>クラスとその<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>プロパティ。</xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> </xref:System.Speech.Recognition.DisplayAttributes> 。"
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates strings. The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of RecognizedWordUnit objects. The RecognizedWordUnit objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Text: {Text}")]

      public class RecognizedWordUnit
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  id: '#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)'
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  fullName: System.Speech.Recognition.RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref>クラスです。"
  remarks: "場合`text`または`pronunciation`は`null`、&quot;&quot;、または<xref:System.String.Empty>と<xref:System.Speech.Recognition.RecognizedWordUnit>使用認識操作で、認識エンジンは出力で適切な値が生成<xref:System.Speech.Recognition.RecognizedWordUnit>インスタンス</xref:System.Speech.Recognition.RecognizedWordUnit></xref:System.Speech.Recognition.RecognizedWordUnit></xref:System.String.Empty>。       <xref:System.Speech.Recognition.RecognizedWordUnit>を使用して<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>、<xref:System.Speech.Recognition.SpeechRecognitionEngine>クラスであり<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>または<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A><xref:System.Speech.Recognition.SpeechRecognizer>クラス</xref:System.Speech.Recognition.SpeechRecognizer>のメソッド</xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A></xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A></xref:System.Speech.Recognition.SpeechRecognitionEngine>のメソッド</xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>または</xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>認識操作をエミュレートする場合にのみ、インスタンスが使用される通常</xref:System.Speech.Recognition.RecognizedWordUnit>の直接の構築       実際のアプリケーションに直接構築しないで<xref:System.Speech.Recognition.RecognizedWordUnit>、を通じて取得ではなく、<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>プロパティを<xref:System.Speech.Recognition.RecognizedPhrase>オブジェクト</xref:System.Speech.Recognition.RecognizedPhrase></xref:System.Speech.Recognition.RecognizedPhrase.Words%2A></xref:System.Speech.Recognition.RecognizedWordUnit>。"
  example:
  - "The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.  \n  \n```c#  \nprivate void _emulateAndVerify_Click(object sender, EventArgs e)   \n{  \n  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\\t' };  \n  string text = _emulateTextBox.Text;  \n  string[] words = text.Split(delimiterChars);  \n  \n  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  \n  for (int i = 0; i < words.Length; i++)   \n  {  \n    InputWordUnits[i] = new RecognizedWordUnit(  \n        \"\",   \n        0,   \n        \"\",  \n        words[i].ToLower(),   \n        DisplayAttributes.OneTrailingSpace,   \n        new TimeSpan(),   \n        new TimeSpan());  \n  }  \n  \n  RecognitionResult rec = _recognizer.EmulateRecognize(  \n        InputWordUnits,   \n        System.Globalization.CompareOptions.IgnoreCase);  \n  if (rec == null)   \n  {  \n    MessageBox.Show(String.Format(\"Recognition emulation for {0} failed.\\n\", text));  \n  }   \n  else if (InputWordUnits.Length != rec.Words.Count)   \n  {  \n    MessageBox.Show(  \n       String.Format(\"Length mismatch: Input was {0} words, Recognition has {1} words.\\n}\"));  \n  }   \n  else   \n  {  \n    for (int i = 0; i < InputWordUnits.Length; i++)   \n    {  \n  \n      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   \n      {  \n        MessageBox.Show(  \n          String.Format(\"Input word {0} \\\"{1}\\\" not found. Recognition output is {2}\",  \n          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  \n        continue;  \n      }  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);
    parameters:
    - id: text
      type: System.String
      description: "認識された単語の正規化されたテキスト。       この値は、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、&quot;&quot;、または<xref:System.String>.</xref:System.String>"
    - id: confidence
      type: System.Single
      description: "A <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;> </xref> 0.0 ~ 1.0 の単語認識の確実性を示す値。"
    - id: pronunciation
      type: System.String
      description: "認識された単語の発音スペル チェックします。       この値は、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、&quot;&quot;、または<xref:System.String>.</xref:System.String>"
    - id: lexicalForm
      type: System.String
      description: "認識された単語の正規化テキスト。       この引数が必要でありできない可能性があります<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、&quot;&quot;、または<xref:System.String>.</xref:System.String>"
    - id: displayAttributes
      type: System.Speech.Recognition.DisplayAttributes
      description: "認識された単語を表示する空白文字の使用を定義します。"
    - id: audioPosition
      type: System.TimeSpan
      description: "オーディオの入力ストリームで認識された単語の場所です。       この値は<xref:System.TimeSpan>。</xref:System.TimeSpan>を指定できます。"
    - id: audioDuration
      type: System.TimeSpan
      description: "認識されたテキストに対応するオーディオ入力の長さ。       この値は<xref:System.TimeSpan>。</xref:System.TimeSpan>を指定できます。"
  overload: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  id: Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: System.Speech.Recognition.RecognizedWordUnit.Confidence
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "認識された単語が特定の入力と一致する確率を表す、認識エンジンによって割り当てられた値を取得します。"
  remarks: "信頼スコアは、単語が正しく認識された絶対可能性を示していません。 代わりに、信頼スコアは、特定の入力の複数の代替認識の相対的な精度を比較するためのメカニズムを提供します。 これには、最も正確な認識結果を返すことが容易にします。 たとえば、認識された単語に 0.8 の信頼スコアがある場合は、これは限りませんという単語が、80% 可能性は、入力の適切な一致であります。  単語が、適切な一致を信頼度を持つその他の結果よりも、入力のスコアを 0.8 未満である可能性が高くなることを意味します。       独自の信頼スコアは、比較する、同じ認識操作とは、同じ入力の以前の認定から別の結果がない限り意味がありません。       信頼度によって返される値は、相対一意各認識エンジンにします。 2 つの異なる認識エンジンの間の信頼度の値が比較方法や方法の定義がない<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクトを定義<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A><xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase>の</xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A></xref:System.Speech.Recognition.RecognizedWordUnit>個々 の信頼度       音声認識エンジンは、バック グラウンド干渉、inarticulate 音声、または予期しない単語または単語のシーケンスを含む、さまざまな理由、音声入力に確信度の低いスコアを割り当てる可能性があります。 アプリケーションが使用されている場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine>インスタンス、どの音声で入力が受理されても拒否のいずれかの信頼レベルを変更することができます、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>メソッド</xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A></xref:System.Speech.Recognition.SpeechRecognitionEngine>。 信頼度のしきい値によって管理される共有認識エンジンを<xref:System.Speech.Recognition.SpeechRecognizer>のユーザー プロファイルに関連付けられているし、Windows レジストリに格納されている</xref:System.Speech.Recognition.SpeechRecognizer>。 アプリケーションは、プロパティ、共有認識エンジンのレジストリに変更を書き込めません必要があります。"
  syntax:
    content: public float Confidence { get; }
    return:
      type: System.Single
      description: "単語の正しい認識の確実性の相対尺度です。 値は 0.0 から 1.0、少信頼度は、それぞれします。"
  overload: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  id: DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "現在のテキスト出力を作成するための情報を書式設定を取得<xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;></xref>インスタンス。"
  remarks: "<xref:System.Speech.Recognition.DisplayAttributes>DisplayAttributes プロパティによって返されるオブジェクトが存在する場合、特定のワードで使用する先頭および末尾のスペースを指定します</xref:System.Speech.Recognition.DisplayAttributes>。       この書式設定情報を使用する方法の詳細については、次を参照してください、<xref:System.Speech.Recognition.DisplayAttributes>列挙体です。</xref:System.Speech.Recognition.DisplayAttributes> 。"
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from the DisplayAttributes property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n        ReadOnlyCollection<RecognizedWordUnit> words,   \n        WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }  \n    else if (type == WordType.Pronunciation)   \n    {  \n       wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n         String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }
    return:
      type: System.Speech.Recognition.DisplayAttributes
      description: "内容を表示する空白文字の使用を指定、 <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref>オブジェクト。"
  overload: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  id: LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "認識された単語の正規化されていないテキストを取得します。"
  remarks: "ほとんどの場合、値によって返される<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>LexicalForm のと同じです</xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>。 ただし、認識エンジンで音声正規化を使用してをよりわかりやすいまたは口語的のテキスト表現オーディオ入力を返すことがあります。       音声認識の正規化とは特殊な構成体または書面で音声認識を表現するシンボルを使用します。 など、正規化は、「$1.16」出力テキストを読み上げられる単語「ドルと&16; セント」を置換できます。"
  example:
  - "The following example shows a utility routine that generates text in one of three formats: lexical (using LexicalForm), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n         ReadOnlyCollection<RecognizedWordUnit> words,   \n         WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n    wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string LexicalForm { get; }
    return:
      type: System.String
      description: "返します、<xref:System.String>どのような正規化せず、認識された単語のテキストを格納します</xref:System.String>。"
  overload: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  id: Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "音声認識された単語のスペルを取得します。"
  remarks: "発音の内容は、そのロードのいずれかに音声入力に一致する音声認識エンジンが使用されるどの発音を示す<xref:System.Speech.Recognition.Grammar>オブジェクト</xref:System.Speech.Recognition.Grammar>。 音声認識エンジンの内部辞書に読み込んだで認識文法からリンクされている辞書ドキュメント内で定義されて発音<xref:System.Speech.Recognition.Grammar>オブジェクト、または、読み込まれたで認識文法にインライン<xref:System.Speech.Recognition.Grammar>オブジェクト</xref:System.Speech.Recognition.Grammar></xref:System.Speech.Recognition.Grammar>。 音声認識エンジンは、ある発音が辞書またはする音声認識エンジン現在にアクセス権の文法で定義されていない特殊な単語の発音を作成することもできます。       媒体使用新しいなど、多くの Windows ベースの Unicode フォントは、IPA 文字列の表示をサポートします。 詳細については、次を参照してください。[国際音声記号](http://go.microsoft.com/fwlink/?LinkId=58363)です。"
  example:
  - "The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using Pronunciation). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Pronunciation { get; }
    return:
      type: System.String
      description: "国際音声記号 (IPA) またはユニバーサル電話設定 (UPS) など、サポートされている発音記号からの文字の文字列。"
  overload: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  id: Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: System.Speech.Recognition.RecognizedWordUnit.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "認識された単語の正規化されたテキストを取得します。"
  remarks: "ほとんどの場合はテキストで返される値と<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>と同じになります</xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>。 ただし、認識エンジンで音声正規化を使用してをよりわかりやすいまたは口語的のテキスト表現オーディオ入力を返すことがあります。       音声認識の正規化とは特殊な構成体または書面で音声認識を表現するシンボルを使用します。 など、正規化は、「$1.16」出力テキストを読み上げられる単語「ドルと&16; セント」を置換できます。"
  example:
  - "The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using Text), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n           String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: "指定された入力の単語の正規化されたテキスト出力を含む文字列です。"
  overload: System.Speech.Recognition.RecognizedWordUnit.Text*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  fullName: System.Speech.Recognition.RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.DisplayAttributes
  parent: System.Speech.Recognition
  isExternal: false
  name: DisplayAttributes
  nameWithType: DisplayAttributes
  fullName: System.Speech.Recognition.DisplayAttributes
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: System.Speech.Recognition.RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: System.Speech.Recognition.RecognizedWordUnit.Text
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit.RecognizedWordUnit
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
