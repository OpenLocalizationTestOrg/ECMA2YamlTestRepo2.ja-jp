### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlServer.Server.IBinarySerialize
  id: IBinarySerialize
  children:
  - Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)
  - Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)
  langs:
  - csharp
  name: IBinarySerialize
  nameWithType: IBinarySerialize
  fullName: Microsoft.SqlServer.Server.IBinarySerialize
  type: Interface
  summary: "ユーザー定義型 (UDT) とユーザー定義集計のシリアル化および逆シリアル化のカスタム実装を提供します。"
  remarks: "ユーザー定義型 (Udt) とユーザー定義集計のいずれか、記憶域の書式を定義する必要が<xref:Microsoft.SqlServer.Server.Format>.`Native` </xref:Microsoft.SqlServer.Server.Format> or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</xref:Microsoft.SqlServer.Server.Format>       <xref:Microsoft.SqlServer.Server.Format>.`Native`</xref:Microsoft.SqlServer.Server.Format> SQL サーバーをシリアル化を処理し、自動的に逆シリアル化することができますが、形式を処理できる型の種類に関する制限事項です。 <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</xref:Microsoft.SqlServer.Server.Format> 独自のシリアル化を処理するには、ユーザー定義型と集計を使用できます。 ユーザー定義型と集計をと共に設定されなければなりません<xref:Microsoft.SqlServer.Server.Format>.`UserDefined` </xref:Microsoft.SqlServer.Server.Format> `SqlUserDefinedType`または`SqlUserDefinedAggregate`属性があり、IBinarySerialize インターフェイスを実装する必要があります。       カスタムのシリアル化を使用しても各インスタンスの合計サイズは最大 8,000 バイトを現在の制限を許容する必要がありますに注意してください。"
  syntax:
    content: public interface IBinarySerialize
  implements: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)
  id: Read(System.IO.BinaryReader)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  langs:
  - csharp
  name: Read(BinaryReader)
  nameWithType: IBinarySerialize.Read(BinaryReader)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Read(BinaryReader)
  type: Method
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "バイナリ形式からユーザー定義型 (UDT) またはユーザー定義集計を生成します。"
  remarks: "Read メソッドによって書き込まれた情報を使用して、オブジェクトを構築する必要があります、<xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>メソッド</xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>。"
  example:
  - "The following example shows the implementation of the Read method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT. This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.  \n  \n [!code-cs[DataWorks IBinarySerialize Samples#1](~/add/codesnippet/csharp/m-microsoft.sqlserver.se_1_1.cs)]\n [!code-vb[DataWorks IBinarySerialize Samples#1](~/add/codesnippet/visualbasic/m-microsoft.sqlserver.se_1_1.vb)]"
  syntax:
    content: public void Read (System.IO.BinaryReader r);
    parameters:
    - id: r
      type: System.IO.BinaryReader
      description: "<xref:System.IO.BinaryReader>オブジェクトが逆シリアル化するストリームします</xref:System.IO.BinaryReader>。"
  overload: Microsoft.SqlServer.Server.IBinarySerialize.Read*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)
  id: Write(System.IO.BinaryWriter)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  langs:
  - csharp
  name: Write(BinaryWriter)
  nameWithType: IBinarySerialize.Write(BinaryWriter)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Write(BinaryWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "変換するユーザー定義型 (UDT) またはユーザー定義の集計、バイナリ形式は永続化するようにします。"
  remarks: "十分な情報を許可するバイナリ ストリームに書き込む、 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>UDT またはユーザー定義集計を構築するメソッド</xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>。"
  example:
  - "The following example shows the implementation of the Writemethod of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format. The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.  \n  \n [!code-cs[DataWorks IBinarySerialize Samples#2](~/add/codesnippet/csharp/m-microsoft.sqlserver.se_0_1.cs)]\n [!code-vb[DataWorks IBinarySerialize Samples#2](~/add/codesnippet/visualbasic/m-microsoft.sqlserver.se_0_1.vb)]"
  syntax:
    content: public void Write (System.IO.BinaryWriter w);
    parameters:
    - id: w
      type: System.IO.BinaryWriter
      description: "<xref:System.IO.BinaryWriter>UDT またはユーザー定義集計がシリアル化されたストリーム</xref:System.IO.BinaryWriter>。"
  overload: Microsoft.SqlServer.Server.IBinarySerialize.Write*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Read(BinaryReader)
  nameWithType: IBinarySerialize.Read(BinaryReader)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Read(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Write(BinaryWriter)
  nameWithType: IBinarySerialize.Write(BinaryWriter)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Write(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read*
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Read
  nameWithType: IBinarySerialize.Read
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write*
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Write
  nameWithType: IBinarySerialize.Write
