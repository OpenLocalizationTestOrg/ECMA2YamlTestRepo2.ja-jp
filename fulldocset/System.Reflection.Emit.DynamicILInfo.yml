### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicILInfo
  id: DynamicILInfo
  children:
  - System.Reflection.Emit.DynamicILInfo.DynamicMethod
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  langs:
  - csharp
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
  type: Class
  summary: "Microsoft intermediate language (MSIL) を生成する別の方法のサポートとメタデータ トークンを作成し、コード、例外処理、およびローカル変数シグネチャ blob を挿入するためのメソッドを含む、動的メソッドを提供します。"
  remarks: "DynamicILInfo クラスにより、開発者は<xref:System.Reflection.Emit.ILGenerator>。</xref:System.Reflection.Emit.ILGenerator>を使用する代わりに、独自の MSIL ジェネレーターを記述するには       他の型のインスタンスを作成、メソッド、およびなを呼び出し、生成する MSIL はそれらのエンティティのためにトークンを含める必要があります。 DynamicILInfo クラスには、いくつかのオーバー ロードが用意されています、<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>現在 DynamicILInfo のスコープで有効なトークンを返すメソッド</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>。 オーバー ロードを呼び出す必要がある場合など、<xref:System.Console.WriteLine%2A?displayProperty=fullName>メソッドを取得できます、<xref:System.RuntimeMethodHandle>オーバー ロードに渡すとするため、 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>、MSIL に埋め込むにはトークンを取得するメソッド</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A></xref:System.RuntimeMethodHandle></xref:System.Console.WriteLine%2A?displayProperty=fullName>。       作成した後<xref:System.Byte>ローカル変数シグネチャ、例外、およびコードの本体の配列、行うこともできます、 <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>、 <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>、および<xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A>にそれらを挿入するメソッド、 <xref:System.Reflection.Emit.DynamicMethod>DynamicILInfo オブジェクトに関連付けられている</xref:System.Reflection.Emit.DynamicMethod></xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A></xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A></xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A></xref:System.Byte>。       独自のメタデータと MSIL を生成するには、共通言語基盤 (CLI) ドキュメント、特に「Partition II:: Metadata Definition and Semantics」と「Partition III: CIL Instruction Set」に関する知識が必要です。 このドキュメントはオンラインです。参照してください[ECMA c# および共通言語基盤規格](http://go.microsoft.com/fwlink/?LinkID=99212)msdn および[標準 ECMA&335; - 共通言語基盤 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトです。      > [!NOTE] > デリゲート コンス トラクターを直接呼び出すことによって他の動的メソッドにデリゲートを作成するコードを生成する DynamicILInfo を使用しないでください。 代わりに、使用、<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>デリゲートを作成するメソッド</xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>。 デリゲート コンス トラクターで作成されるデリゲートには、対象の動的メソッドへの参照がありません。 動的メソッドは、デリゲートは使用されているときに、ガベージ コレクションによるクリア可能性があります。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DynamicILInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "本体を持つが、現在のインスタンスによって生成される動的メソッドを取得します。"
  remarks: "A<xref:System.Reflection.Emit.DynamicILInfo>オブジェクトは、動的メソッドに関連付けられたは常にします</xref:System.Reflection.Emit.DynamicILInfo>。 <xref:System.Reflection.Emit.DynamicILInfo>クラスは別の MSIL ストリーム、例外処理、およびユーザー<xref:System.Reflection.Emit.ILGenerator>クラス</xref:System.Reflection.Emit.ILGenerator>を使用せずに MSIL を生成する開発者向けの動的メソッドにローカル変数シグネチャを挿入する方法を提供する</xref:System.Reflection.Emit.DynamicILInfo>の目的は、"
  syntax:
    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: "A<xref:System.Reflection.Emit.DynamicMethod>対象の動的メソッドを表すオブジェクトを現在<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>オブジェクトには、コードを生成する</xref:System.Reflection.Emit.DynamicMethod>。"
  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  id: GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "現在のスコープでは有効で、トークンを取得<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>、関連付けられている動的メソッドのシグネチャを表すです。"
  remarks: 'シグネチャ blob については、共通言語基盤 (CLI) ドキュメント、特に「Partition II:: Metadata Definition and Semantics」を参照してください。 このドキュメントはオンラインです。参照してください[ECMA c# および共通言語基盤規格](http://go.microsoft.com/fwlink/?LinkID=99212)msdn および[標準 ECMA&335; - 共通言語基盤 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトです。'
  syntax:
    content: public int GetTokenFor (byte[] signature);
    parameters:
    - id: signature
      type: System.Byte[]
      description: "署名を格納する配列。"
    return:
      type: System.Int32
      description: "メタデータと関連付けられている動的メソッドの MSIL ストリームで埋め込むことができるトークンです。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "現在のスコープでは有効で、トークンを取得<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>、関連付けられたメソッドから呼び出される動的メソッドを表すです。"
  remarks: "このメソッドのオーバー ロードによって返されるトークンを使用すると、動的メソッドに現在関連付けられている動的メソッドから呼び出す<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト</xref:System.Reflection.Emit.DynamicILInfo>。 再帰的に関連付けられている動的メソッドを呼び出すには、値を渡す、<xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>プロパティ</xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>。"
  syntax:
    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);
    parameters:
    - id: method
      type: System.Reflection.Emit.DynamicMethod
      description: "動的に呼び出すメソッド。"
    return:
      type: System.Int32
      description: "MSIL 命令の対象として、関連付けられている動的メソッドの MSIL ストリームに埋め込むことができるトークンです。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  id: GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "現在のスコープでは有効で、トークンを取得<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>、関連付けられている動的メソッドからアクセスされるフィールドを表すです。"
  remarks: "現在関連付けられている動的メソッドでアクセスされる任意のフィールドのトークンを取得する必要があります<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト</xref:System.Reflection.Emit.DynamicILInfo>。 <xref:System.Type.GetField%2A?displayProperty=fullName> <xref:System.Reflection.FieldInfo> <xref:System.Reflection.FieldInfo.FieldHandle%2A> <xref:System.RuntimeFieldHandle>。</xref:System.RuntimeFieldHandle>を取得するプロパティ</xref:System.Reflection.FieldInfo.FieldHandle%2A>を使用して、アクセスするフィールドを</xref:System.Reflection.FieldInfo>取得するメソッド</xref:System.Type.GetField%2A?displayProperty=fullName>を使用します。"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "アクセスされるフィールドです。"
    return:
      type: System.Int32
      description: "現在のスコープ内のフィールドにアクセスする MSIL 命令のオペランドとして使用できるトークン<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>オブジェクト。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  id: GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "現在のスコープでは有効で、トークンを取得<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>、関連付けられている動的メソッドからアクセスするメソッドを表すです。"
  remarks: "現在関連付けられている動的メソッドでアクセスされる任意のメソッドのトークンを取得する必要があります<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト</xref:System.Reflection.Emit.DynamicILInfo>。 <xref:System.Type.GetMethod%2A?displayProperty=fullName><xref:System.Reflection.MethodInfo>アクセス、および<xref:System.Reflection.MethodBase.MethodHandle%2A><xref:System.RuntimeMethodHandle>。</xref:System.RuntimeMethodHandle>を取得するプロパティ</xref:System.Reflection.MethodBase.MethodHandle%2A>を使用するメソッドを</xref:System.Reflection.MethodInfo>取得するメソッド</xref:System.Type.GetMethod%2A?displayProperty=fullName>を使用します。      > [!NOTE] > 属するメソッドのジェネリック型に、使用、<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>メソッド オーバー ロードして、指定、 <xref:System.RuntimeTypeHandle>、ジェネリック型の</xref:System.RuntimeTypeHandle></xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>。"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "アクセスするメソッド。"
    return:
      type: System.Int32
      description: "など、メソッドにアクセスする MSIL 命令のオペランドとして使用できるトークン<xref:System.Reflection.Emit.OpCodes.Call>または<xref:System.Reflection.Emit.OpCodes.Ldtoken>、現在のスコープで<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>オブジェクト</xref:System.Reflection.Emit.OpCodes.Ldtoken></xref:System.Reflection.Emit.OpCodes.Call>。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "現在のスコープでは有効で、トークンを取得<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>、関連付けられている動的メソッドで使用する型を表すです。"
  remarks: "このメソッドのオーバー ロードによって返されるトークンを使用すると、ローカル変数の型を定義しに現在関連付けられている動的メソッドの型のインスタンスを作成する MSIL を生成<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト</xref:System.Reflection.Emit.DynamicILInfo>。       取得する、<xref:System.RuntimeTypeHandle>型を表すを使用して、<xref:System.Type.TypeHandle%2A?displayProperty=fullName>プロパティ</xref:System.Type.TypeHandle%2A?displayProperty=fullName></xref:System.RuntimeTypeHandle>。"
  syntax:
    content: public int GetTokenFor (RuntimeTypeHandle type);
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: "使用する型。"
    return:
      type: System.Int32
      description: "現在のスコープ内の型を必要とする MSIL 命令のオペランドとして使用できるトークン<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>オブジェクト。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  id: GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "現在のスコープでは有効で、トークンを取得<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>、関連付けられている動的メソッドで使用されるリテラル文字列を表すです。"
  syntax:
    content: public int GetTokenFor (string literal);
    parameters:
    - id: literal
      type: System.String
      description: "使用する文字列。"
    return:
      type: System.Int32
      description: "現在のスコープ内の文字列を必要とする MSIL 命令のオペランドとして使用できるトークン<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>オブジェクト。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "現在のスコープでは有効で、トークンを取得<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>、関連付けられている動的メソッドからアクセスされるフィールドを表すフィールドが指定されたジェネリック型です。"
  remarks: "現在関連付けられている動的メソッドでアクセスされる任意のフィールドのトークンを取得する必要があります<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト</xref:System.Reflection.Emit.DynamicILInfo>。 <xref:System.Type.GetField%2A?displayProperty=fullName><xref:System.Reflection.FieldInfo>アクセス、および<xref:System.Reflection.FieldInfo.FieldHandle%2A><xref:System.RuntimeFieldHandle>。</xref:System.RuntimeFieldHandle>を取得するプロパティ</xref:System.Reflection.FieldInfo.FieldHandle%2A>を使用するフィールドを</xref:System.Reflection.FieldInfo>取得するメソッド</xref:System.Type.GetField%2A?displayProperty=fullName>を使用します。"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "アクセスされるフィールドです。"
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "フィールドが属するジェネリック型。"
    return:
      type: System.Int32
      description: "現在のスコープ内のフィールドにアクセスする MSIL 命令のオペランドとして使用できるトークン<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>オブジェクト。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "現在のスコープでは有効で、トークンを取得<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>、ジェネリック型でメソッドを表すです。"
  remarks: "現在関連付けられている動的メソッドで呼び出されるメソッドのトークンを取得する必要があります<xref:System.Reflection.Emit.DynamicILInfo>オブジェクト</xref:System.Reflection.Emit.DynamicILInfo>。 <xref:System.Type.GetMethod%2A?displayProperty=fullName><xref:System.Reflection.MethodInfo>を呼び出すと、 <xref:System.Reflection.MethodBase.MethodHandle%2A> <xref:System.RuntimeMethodHandle>。</xref:System.RuntimeMethodHandle>を取得するプロパティ</xref:System.Reflection.MethodBase.MethodHandle%2A>を使用するメソッドを</xref:System.Reflection.MethodInfo>取得するメソッド</xref:System.Type.GetMethod%2A?displayProperty=fullName>を使用します。"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "メソッド。"
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "メソッドが属するジェネリック型。"
    return:
      type: System.Int32
      description: "など、メソッドにアクセスする MSIL 命令のオペランドとして使用できるトークン<xref:System.Reflection.Emit.OpCodes.Call>または<xref:System.Reflection.Emit.OpCodes.Ldtoken>、現在のスコープで<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>オブジェクト</xref:System.Reflection.Emit.OpCodes.Ldtoken></xref:System.Reflection.Emit.OpCodes.Call>。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  id: SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "関連付けられている動的メソッドのコードの本文を設定します。"
  remarks: "MSIL ストリームでは、有効性のチェックは行われません。       このメソッドを呼び出すと、2 回目、2 つ目の最初の MSIL ストリームが置き換えられます。       独自のメタデータと MSIL を生成するには、共通言語基盤 (CLI) ドキュメント、特に「Partition II:: Metadata Definition and Semantics」と「Partition III: CIL Instruction Set」に関する知識が必要です。 このドキュメントはオンラインです。参照してください[ECMA c# および共通言語基盤規格](http://go.microsoft.com/fwlink/?LinkID=99212)msdn および[標準 ECMA&335; - 共通言語基盤 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトです。"
  syntax:
    content: public void SetCode (byte[] code, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte[]
      description: "MSIL ストリームを格納する配列。"
    - id: maxStackSize
      type: System.Int32
      description: "メソッドを実行するときに、オペランド スタック上の項目の最大数。"
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  id: SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "関連付けられている動的メソッドのコードの本文を設定します。"
  remarks: "MSIL ストリームでは、有効性のチェックは行われません。       このメソッドを呼び出すと、2 回目、2 つ目の最初の MSIL ストリームが置き換えられます。       共通言語基盤 (CLI) ドキュメント、特に「Partition II:: Metadata Definition and Semantics」の知識が必要です独自のメタデータと MSIL を生成する、&quot;Partition III: CIL 命令セット。&quot; このドキュメントはオンラインです。参照してください[ECMA c# および共通言語基盤規格](http://go.microsoft.com/fwlink/?LinkID=99212)msdn および[標準 ECMA&335; - 共通言語基盤 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトです。"
  syntax:
    content: public void SetCode (byte* code, int codeSize, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte*
      description: "MSIL ストリームを格納するバイト配列へのポインター。"
    - id: codeSize
      type: System.Int32
      description: "MSIL ストリームのバイト数。"
    - id: maxStackSize
      type: System.Int32
      description: "メソッドを実行するときに、オペランド スタック上の項目の最大数。"
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>code</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>と<code>codeSize</code>が 0 より大きい。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>codeSize</code>0 未満です。"
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  id: SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "関連付けられている動的メソッドの例外のメタデータを設定します。"
  remarks: 'メソッドの例外のメタデータは、すべてのサイズと場所を定義します。 `try`、 `catch`、 `finally`、フィルター、およびフォールト ブロックします。 このメタデータのレイアウトについては、共通言語基盤 (CLI) ドキュメント、特に「Partition II:: Metadata Definition and Semantics」を参照してください。 このドキュメントはオンラインです。参照してください[ECMA c# および共通言語基盤規格](http://go.microsoft.com/fwlink/?LinkID=99212)msdn および[標準 ECMA&335; - 共通言語基盤 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトです。'
  syntax:
    content: public void SetExceptions (byte[] exceptions);
    parameters:
    - id: exceptions
      type: System.Byte[]
      description: "例外のメタデータを格納する配列。"
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  id: SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "関連付けられている動的メソッドの例外のメタデータを設定します。"
  remarks: 'メソッドの例外のメタデータは、すべてのサイズと場所を定義します。 `try`、 `catch`、 `finally`、フィルター、およびフォールト ブロックします。 このメタデータのレイアウトについては、共通言語基盤 (CLI) ドキュメント、特に「Partition II:: Metadata Definition and Semantics」と「Partition III: CIL Instruction Set」を参照してください。 このドキュメントはオンラインです。参照してください[ECMA c# および共通言語基盤規格](http://go.microsoft.com/fwlink/?LinkID=99212)msdn および[標準 ECMA&335; - 共通言語基盤 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトです。'
  syntax:
    content: public void SetExceptions (byte* exceptions, int exceptionsSize);
    parameters:
    - id: exceptions
      type: System.Byte*
      description: "例外のメタデータを格納するバイト配列へのポインター。"
    - id: exceptionsSize
      type: System.Int32
      description: "例外のメタデータのバイト数。"
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>exceptions</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>と<code>exceptionSize</code>が 0 より大きい。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>exceptionSize</code>0 未満です。"
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  id: SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "関連付けられている動的メソッドのローカル変数のレイアウトを記述するローカル変数シグネチャを設定します。"
  remarks: "ローカル変数シグネチャでは、メソッドのローカル変数のレイアウトについて説明します。 ローカル変数シグネチャの構築を簡略化を使用して、 `static` (`Shared` Visual Basic で)<xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>取得するメソッド、<xref:System.Reflection.Emit.SignatureHelper>ローカル シグネチャの</xref:System.Reflection.Emit.SignatureHelper></xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>。       ローカル変数署名については、共通言語基盤 (CLI) ドキュメント、特に「Partition II:: Metadata Definition and Semantics」を参照してください。 このドキュメントはオンラインです。参照してください[ECMA c# および共通言語基盤規格](http://go.microsoft.com/fwlink/?LinkID=99212)msdn および[標準 ECMA&335; - 共通言語基盤 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトです。"
  syntax:
    content: public void SetLocalSignature (byte[] localSignature);
    parameters:
    - id: localSignature
      type: System.Byte[]
      description: "関連付けられている<xref:System.Reflection.Emit.DynamicMethod>。</xref:System.Reflection.Emit.DynamicMethod>用のローカル変数のレイアウトを含む配列"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  id: SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "関連付けられている動的メソッドのローカル変数のレイアウトを記述するローカル変数シグネチャを設定します。"
  remarks: "ローカル変数シグネチャでは、メソッドのローカル変数のレイアウトについて説明します。 ローカル変数シグネチャの構築を簡略化を使用して、 `static` (`Shared` Visual Basic で)<xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>取得するメソッド、<xref:System.Reflection.Emit.SignatureHelper>ローカル シグネチャの</xref:System.Reflection.Emit.SignatureHelper></xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>。       ローカル変数署名については、共通言語基盤 (CLI) ドキュメント、特に「Partition II:: Metadata Definition and Semantics」を参照してください。 このドキュメントはオンラインです。参照してください[ECMA c# および共通言語基盤規格](http://go.microsoft.com/fwlink/?LinkID=99212)msdn および[標準 ECMA&335; - 共通言語基盤 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトです。"
  syntax:
    content: public void SetLocalSignature (byte* localSignature, int signatureSize);
    parameters:
    - id: localSignature
      type: System.Byte*
      description: "関連付けられている<xref:System.Reflection.Emit.DynamicMethod>。</xref:System.Reflection.Emit.DynamicMethod>用のローカル変数のレイアウトを含む配列"
    - id: signatureSize
      type: System.Int32
      description: "シグネチャのバイト数。"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localSignature</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>と<code>signatureSize</code>が 0 より大きい。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>signatureSize</code>0 未満です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: true
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor
  nameWithType: DynamicILInfo.GetTokenFor
- uid: System.Reflection.Emit.DynamicILInfo.SetCode*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode
  nameWithType: DynamicILInfo.SetCode
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions
  nameWithType: DynamicILInfo.SetExceptions
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature
  nameWithType: DynamicILInfo.SetLocalSignature
