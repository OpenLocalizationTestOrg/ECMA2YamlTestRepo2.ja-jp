### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  id: X509Certificate2
  children:
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  - System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  - System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  langs:
  - csharp
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
  type: Class
  summary: "X.509 証明書を表します。"
  remarks: "X.509 構造体は、作業グループ International Organization for Standardization (ISO) に由来します。 さまざまな種類の id、資格、および所有者の属性 (アクセス許可、年齢、性別、場所、属しているなど) を含む情報を表すため、この構造体を使用できます。 ISO 仕様は、構造体自体を最も明確に指定 X509Certificate2 クラスは、インターネット技術標準化委員会 (IETF) 公開キー インフラストラクチャ X.509 (PKIX) ワーキング グループによって発行された仕様で定義された使用シナリオをモデル化するよう設計されています。 これらの仕様の中で最も有益なの RFC 3280&quot;[証明書と証明書失効リスト (CRL) のプロファイル](http://go.microsoft.com/fwlink/?LinkId=45286)&quot;。      > [!IMPORTANT] > 以降で、 [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]、この型を実装して、<xref:System.IDisposable>インターフェイス</xref:System.IDisposable>。 型を使用してが完了したらを直接的または間接的にその破棄する必要があります。 型の直接 dispose を呼び出す、<xref:System.IDisposable.Dispose%2A>メソッドで、 `try` / `catch`ブロック</xref:System.IDisposable.Dispose%2A>。 直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(C# の場合) または`Using`(Visual Basic で)。 詳細についてを参照してください&quot;を使用して、オブジェクトを実装する IDisposable&quot;、<xref:System.IDisposable>インターフェイスに関するトピック</xref:System.IDisposable>。   >> を対象とするアプリの場合、[!INCLUDE[net_v452](~/add/includes/net-v452-md.md)]以前のバージョン、X509Certificate2 クラスを実装していません、<xref:System.IDisposable>インターフェイスし、したがって必要はありません、`Dispose`メソッド</xref:System.IDisposable>。"
  example:
  - "The following example demonstrates how to use an X509Certificate2 object to encrypt and decrypt a file.  \n  \n [!code-vb[X509Certificate2#1](~/add/codesnippet/visualbasic/t-system.security.crypto_122_1.vb)]\n [!code-cs[X509Certificate2#1](~/add/codesnippet/csharp/t-system.security.crypto_122_1.cs)]  \n  \n The following example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/t-system.security.crypto_122_2.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/t-system.security.crypto_122_2.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/t-system.security.crypto_122_2.vb)]"
  syntax:
    content: 'public class X509Certificate2 : System.Security.Cryptography.X509Certificates.X509Certificate'
  inheritance:
  - System.Object
  - System.Security.Cryptography.X509Certificates.X509Certificate
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromSignedFile(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.FormatDate(System.DateTime)
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetIssuerName
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetName
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString
  - System.Security.Cryptography.X509Certificates.X509Certificate.Handle
  - System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
  - System.Security.Cryptography.X509Certificates.X509Certificate.Subject
  - System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2()
  nameWithType: X509Certificate2.X509Certificate2()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2()
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターは、空を作成<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>、他のクラスのコンス トラクターこのバイト配列、ポインター、または証明書ファイルから証明書情報を使用するとは異なり、オブジェクトです</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/m-system.security.crypto_122_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/m-system.security.crypto_122_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/m-system.security.crypto_122_1.cpp)]"
  syntax:
    content: public X509Certificate2 ();
    parameters: []
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[])
  nameWithType: X509Certificate2.X509Certificate2(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラス バイト配列からの情報を使用します。"
  remarks: "このコンス トラクターが新たに作成<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>バイト配列から証明書の情報を使用してオブジェクト</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。 バイト配列には、バイナリ (DER) エンコードまたは Base64 でエンコードされた X.509 データを指定できます。 バイト配列が pkcs7 ですることもできます (Authenticode) で署名されたファイルです。署名者の証明書は、オブジェクトの作成に使用されます。       作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>pkcs7 で署名されたファイルのストアを指定することによって証明書`rawData`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します</xref:System.Security.Cryptography.X509Certificates.X509Certificate2></xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。"
  syntax:
    content: public X509Certificate2 (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "X.509 証明書からのデータを含むバイト配列。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(IntPtr)
  nameWithType: X509Certificate2.X509Certificate2(IntPtr)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(IntPtr)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラスをアンマネージ ハンドルを使用します。"
  remarks: "このコンス トラクターが新たに作成<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>オブジェクトのハンドルを使用した Microsoft Cryptographic API 証明書のコンテキストの`PCCERT_CONTEXT`</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。 このコンス トラクターの直前の呼び出し元がアンマネージ コードのアクセス許可が必要であることを注意してください。      > [!IMPORTANT] > コンス トラクターは、証明書のコンテキストのコピーを作成します。 行うわけでは、コンス トラクターに渡されるコンテキスト構造が無効です。リリースされている可能性があります。 現在のコピーを取得する`PCCERT_CONTEXT`から構造体、<xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A>プロパティが有効の有効期間中にのみ、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>オブジェクト</xref:System.Security.Cryptography.X509Certificates.X509Certificate2></xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A>。"
  syntax:
    content: public X509Certificate2 (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "アンマネージ コードで証明書のコンテキストへのポインター。 C の構造体が呼び出された<xref uid=&quot;langword_csharp_PCCERT_CONTEXT&quot; name=&quot;PCCERT_CONTEXT&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(X509Certificate)
  nameWithType: X509Certificate2.X509Certificate2(X509Certificate)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(X509Certificate)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラスを使用して、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref>オブジェクト。"
  remarks: "このメソッドは、の新しいインスタンスを作成、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>クラスを使用して、<xref:System.Security.Cryptography.X509Certificates.X509Certificate>オブジェクト</xref:System.Security.Cryptography.X509Certificates.X509Certificate></xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。"
  syntax:
    content: public X509Certificate2 (System.Security.Cryptography.X509Certificates.X509Certificate certificate);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String)
  nameWithType: X509Certificate2.X509Certificate2(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラス証明書ファイル名を使用します。"
  remarks: "このコンス トラクターが新たに作成<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>オブジェクト証明書ファイル名を使用しています</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。 バイナリ (DER) エンコードまたは Base64 エンコードをサポートします。       作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>pkcs7 で署名されたファイルのストアを指定することによって証明書`fileName`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します</xref:System.Security.Cryptography.X509Certificates.X509Certificate2></xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。"
  syntax:
    content: public X509Certificate2 (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "証明書ファイルの名前。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  id: '#ctor(System.Byte[],System.Security.SecureString)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],SecureString)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラス バイト配列とパスワードを使用します。"
  remarks: "このコンス トラクターは、証明書の秘密キーが含まれている PKCS12 (PFX) ファイルと共に使用されます。 正しいパスワードを使用して、このコンス トラクターを呼び出すと、秘密キーを復号化、キー コンテナーに保存されます。      > [!IMPORTANT] > をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。       作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate>pkcs7 で署名されたファイルのストアを指定することによって証明書`rawData`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate>ストア内の証明書のいずれかのではなく、ストアに署名した証明書の作成します</xref:System.Security.Cryptography.X509Certificates.X509Certificate></xref:System.Security.Cryptography.X509Certificates.X509Certificate>。"
  syntax:
    content: public X509Certificate2 (byte[] rawData, System.Security.SecureString password);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "X.509 証明書からデータを含むバイト配列。"
    - id: password
      type: System.Security.SecureString
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  id: '#ctor(System.Byte[],System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],String)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラス バイト配列とパスワードを使用します。"
  remarks: "このコンス トラクターが新たに作成<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>オブジェクトのバイト配列と証明書データにアクセスするために必要なパスワードを使用します</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。 証明書の秘密キーを格納する PKCS12 (PFX) ファイルと共に使用されます。 正しいパスワードを使用して、このコンス トラクターを呼び出すと、秘密キーを復号化、キー コンテナーに保存されます。      > [!IMPORTANT] > をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。       作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>pkcs7 で署名されたファイルのストアを指定することによって証明書`rawData`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します</xref:System.Security.Cryptography.X509Certificates.X509Certificate2></xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。"
  syntax:
    content: public X509Certificate2 (byte[] rawData, string password);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "X.509 証明書からのデータを含むバイト配列。"
    - id: password
      type: System.String
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(SerializationInfo,StreamingContext)
  nameWithType: X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラスの指定したシリアル化とストリーム コンテキスト情報を使用します。"
  syntax:
    content: protected X509Certificate2 (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "新しいを逆シリアル化に必要なシリアル化情報<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>です。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "逆シリアル化するストリームのソースに関するコンテキスト情報。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  id: '#ctor(System.String,System.Security.SecureString)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,SecureString)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラス証明書ファイル名とパスワードを使用します。"
  remarks: "このコンス トラクターは、証明書の秘密キーが含まれている PKCS12 (PFX) ファイルと共に使用されます。 正しいパスワードを使用して、このコンス トラクターを呼び出すと、秘密キーを復号化、キー コンテナーに保存されます。      > [!IMPORTANT] > をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。       作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate>pkcs7 で署名されたファイルのストアを指定することによって証明書`fileName`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate>ストア内の証明書のいずれかのではなく、ストアに署名した証明書の作成します</xref:System.Security.Cryptography.X509Certificates.X509Certificate></xref:System.Security.Cryptography.X509Certificates.X509Certificate>。"
  syntax:
    content: public X509Certificate2 (string fileName, System.Security.SecureString password);
    parameters:
    - id: fileName
      type: System.String
      description: "証明書ファイルの名前。"
    - id: password
      type: System.Security.SecureString
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,String)
  nameWithType: X509Certificate2.X509Certificate2(String,String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラスの証明書ファイル名と証明書にアクセスするために使用するパスワードを使用します。"
  remarks: "このコンス トラクターが新たに作成<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>オブジェクトの証明書ファイル名と証明書にアクセスするために必要なパスワードを使用します</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。 証明書の秘密キーを格納する PKCS12 (PFX) ファイルと共に使用されます。 正しいパスワードを使用して、このコンス トラクターを呼び出すと、秘密キーを復号化、キー コンテナーに保存されます。      > [!IMPORTANT] > をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。       作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>pkcs7 で署名されたファイルのストアを指定することによって証明書`fileName`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します</xref:System.Security.Cryptography.X509Certificates.X509Certificate2></xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。"
  syntax:
    content: public X509Certificate2 (string fileName, string password);
    parameters:
    - id: fileName
      type: System.String
      description: "証明書ファイルの名前。"
    - id: password
      type: System.String
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラス バイト配列、パスワード、およびキーの格納フラグを使用します。"
  remarks: "このコンス トラクターは、証明書の秘密キーが含まれている PKCS12 (PFX) ファイルと共に使用されます。 正しいパスワードを使用して、このコンス トラクターの呼び出しでは、秘密キーの暗号化を解除しに Microsoft Cryptographic API 暗号化サービス プロバイダー (CSP) に保存されます。      > [!IMPORTANT] > をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。       作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate>pkcs7 で署名されたファイルのストアを指定することによって証明書`rawData`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate>ストア内の証明書のいずれかのではなく、ストアに署名した証明書の作成します</xref:System.Security.Cryptography.X509Certificates.X509Certificate></xref:System.Security.Cryptography.X509Certificates.X509Certificate>。"
  syntax:
    content: public X509Certificate2 (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "X.509 証明書からデータを含むバイト配列。"
    - id: password
      type: System.Security.SecureString
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列挙体のビットごとの組み合わせの値を制御する場所と方法を証明書をインポートします。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラス バイト配列、パスワード、およびキーの格納フラグを使用します。"
  remarks: "このコンス トラクターが新たに作成<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>バイトを使用してオブジェクトの配列、証明書のデータとキーの格納フラグにアクセスするために必要なパスワード</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。 証明書の秘密キーを格納する PKCS12 (PFX) ファイルと共に使用されます。 正しいパスワードを使用して、このコンス トラクターの呼び出しでは、秘密キーの暗号化を解除しに Microsoft Cryptographic API 暗号化サービス プロバイダー (CSP) に保存されます。      > [!IMPORTANT] > をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。       作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>pkcs7 で署名されたファイルのストアを指定することによって証明書`rawData`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します</xref:System.Security.Cryptography.X509Certificates.X509Certificate2></xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。"
  syntax:
    content: public X509Certificate2 (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "X.509 証明書からのデータを含むバイト配列。"
    - id: password
      type: System.String
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列挙体のビットごとの組み合わせの値を制御する場所と方法を証明書をインポートします。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>クラスの証明書ファイル名、パスワード、およびキーの格納フラグを使用します。"
  remarks: "作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate>pkcs7 で署名されたファイルのストアを指定することによって証明書`fileName`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate>ストア内の証明書のいずれかのではなく、ストアに署名した証明書の作成します</xref:System.Security.Cryptography.X509Certificates.X509Certificate></xref:System.Security.Cryptography.X509Certificates.X509Certificate>。"
  syntax:
    content: public X509Certificate2 (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "証明書ファイルの名前。"
    - id: password
      type: System.Security.SecureString
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列挙体のビットごとの組み合わせの値を制御する場所と方法を証明書をインポートします。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>証明書ファイルを使用してクラスの名前、パスワード、証明書とキーの格納フラグにアクセスするために使用します。"
  remarks: "このコンス トラクターが新たに作成<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>証明書ファイルを使用してオブジェクトの名前、証明書とキーの格納フラグにアクセスするために必要なパスワード</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。      > [!IMPORTANT] > をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。       作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>pkcs7 で署名されたファイルのストアを指定することによって証明書`fileName`、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します</xref:System.Security.Cryptography.X509Certificates.X509Certificate2></xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。"
  syntax:
    content: public X509Certificate2 (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "証明書ファイルの名前。"
    - id: password
      type: System.String
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列挙体のビットごとの組み合わせの値を制御する場所と方法を証明書をインポートします。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書でエラーが発生します。 例:-証明書ファイルが存在しません。      -証明書が正しくありません。      -証明書のパスワードが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  id: Archived
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Archived
  nameWithType: X509Certificate2.Archived
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得または X.509 証明書がアーカイブになっていることを示す値を設定します。"
  remarks: "このプロパティは、ストアに関連付けられている証明書でのみ設定します。 場合は、プロパティが設定され、証明書ストアに証明書を追加、値が永続化されます。 プロパティがストアから取得した証明書に設定されている場合、値はすぐに保存されます。       X.509 ストア、アーカイブされた証明書は含まれない、返された<xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection>オブジェクトのアーカイブ済みプロパティに設定しない限り、 `true`</xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> 。 アーカイブ済みの値が設定または解除の場合は、物理アーカイブ アクティビティは行われません。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_26_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_26_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_26_1.cpp)]"
  syntax:
    content: public bool Archived { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>証明書がアーカイブされている場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>証明書がアーカイブしていない場合。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書を読み取れません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  id: Extensions
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Extensions
  nameWithType: X509Certificate2.Extensions
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "コレクションを取得<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Extension&quot;></xref>オブジェクト。"
  remarks: "X.509 v3 証明書の形式で定義された拡張機能は、証明書に含まれるその他のデータを許可します。 RFC 3280 に PKIX によって、また X.509 v3 定義で、ISO で多くの拡張機能が定義されて&quot;[証明書と証明書失効リスト (CRL) のプロファイル](http://go.microsoft.com/fwlink/?LinkId=45286)&quot;。 一般的な拡張機能は、キー使用法に関する情報を含める (<xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>)、キーの識別子 (<xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension>)、証明書のポリシー、失効情報 (CRL 配布ポイント拡張機能)、およびその他の使用</xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension></xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_97_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_97_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_97_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ExtensionCollection&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書を読み取れません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  id: FriendlyName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得または証明書に関連付けられた別名を設定します。"
  remarks: "フレンドリ名は、X.509 証明書ストアに設定できるプロパティです。 関連付けるエイリアス証明書が簡単に識別できるようにユーザーを有効に使用されます。       空の文字列、証明書のフレンドリ名が存在しない場合 (&quot;&quot;) が返されます。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_16_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_16_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_16_1.vb)]"
  syntax:
    content: public string FriendlyName { get; set; }
    return:
      type: System.String
      description: "証明書のフレンドリ名。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書を読み取れません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  id: GetCertContentType(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetCertContentType(Byte[])
  nameWithType: X509Certificate2.GetCertContentType(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "バイト配列に含まれている証明書の種類を示します。"
  remarks: "このメソッドでは、ファイル内の証明書の種類を検出することができます。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/a34c0539-d23c-4bd1-9b29-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/a34c0539-d23c-4bd1-9b29-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/a34c0539-d23c-4bd1-9b29-_1.cpp)]"
  syntax:
    content: public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "X.509 証明書からのデータを含むバイト配列。"
    return:
      type: System.Security.Cryptography.X509Certificates.X509ContentType
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ContentType&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>rawData</code>長さは&0; または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  id: GetCertContentType(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetCertContentType(String)
  nameWithType: X509Certificate2.GetCertContentType(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(String)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "ファイルに含まれている証明書の種類を示します。"
  remarks: "このメソッドでは、ファイル内の証明書の種類を検出することができます。"
  syntax:
    content: public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "証明書ファイルの名前。"
    return:
      type: System.Security.Cryptography.X509Certificates.X509ContentType
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ContentType&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fileName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  id: GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetNameInfo(X509NameType,Boolean)
  nameWithType: X509Certificate2.GetNameInfo(X509NameType,Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(X509NameType,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "証明書からサブジェクトと発行者名を取得します。"
  remarks: "このメソッドは、複数の場所で、名前と値の多くにあることができますので、証明書を解析する代わり常に使用する必要があります。 このメソッドを使用して、適切な名前が返されることを確認します。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/3126ffa7-3ffc-4612-bfb2-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/3126ffa7-3ffc-4612-bfb2-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/3126ffa7-3ffc-4612-bfb2-_1.cpp)]"
  syntax:
    content: public string GetNameInfo (System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer);
    parameters:
    - id: nameType
      type: System.Security.Cryptography.X509Certificates.X509NameType
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509NameType&quot;> </xref>サブジェクトの値。"
    - id: forIssuer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>発行者名を含めるそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.String
      description: "証明書の名前。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  id: HasPrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>オブジェクトには、秘密キーが含まれています。"
  syntax:
    content: public bool HasPrivateKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>オブジェクトを含むプライベート キー、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書のコンテキストが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  id: Import(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[])
  nameWithType: X509Certificate2.Import(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "追加、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>バイト配列のデータを持つオブジェクト。"
  remarks: "このメソッドは、X.509 証明書の生のバイト配列を受け取るし、作成に使用できます、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>関連する値を持つオブジェクト</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。       このメソッドは、バイト配列のみを受け入れる、ので、Base64 でエンコードされた、DER でエンコードされた X.509 証明書または PFX/PKCS12 証明書を含む、パスワードを必要としない種類の証明書に対してのみ使用できます。 PFX/PKCS12 証明書が複数の証明書を含めることができますに注意してください。 その場合は、秘密キーに関連付けられている最初の証明書を使用または、秘密キーが見つからない場合、最初の証明書が使用されます。"
  syntax:
    content: public override void Import (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "X.509 証明書からのデータを含むバイト配列。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  id: Import(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String)
  nameWithType: X509Certificate2.Import(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "追加、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>証明書ファイルから情報を持つオブジェクト。"
  remarks: "このメソッドを表す X.509 証明書は追加、.cer 拡張子が付いたファイルなど、証明書ファイルを使用して、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>ファイルに含まれる証明書を持つオブジェクト</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。       このメソッドは、Base64 でエンコードされた、DER でエンコードされた X.509 証明書、証明書の PFX/PKCS12、Authenticode などの署名証明書など、いくつかの証明書の種類で使用できます。 PFX/PKCS12 証明書が複数の証明書を含めることができますに注意してください。 その場合は、秘密キーに関連付けられている最初の証明書を使用または、秘密キーが見つからない場合、最初の証明書が使用されます。"
  syntax:
    content: public override void Import (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "証明書の名前。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "追加、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>オブジェクトのバイト配列、パスワード、およびキーの格納フラグのデータを使用します。"
  remarks: "このメソッドは、Base64 でエンコードされた、DER でエンコードされた X.509 証明書または PFX/PKCS12 証明書などの証明書の種類を使用できます。 PFX/PKCS12 証明書が複数の証明書を含めることができますに注意してください。 その場合は、秘密キーに関連付けられている最初の証明書を使用または、秘密キーが見つからない場合、最初の証明書が使用されます。      > [!IMPORTANT] > をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。"
  syntax:
    content: public override void Import (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "X.509 証明書からデータを含むバイト配列。"
    - id: password
      type: System.Security.SecureString
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列挙体のビットごとの組み合わせの値を制御する場所と方法を証明書をインポートします。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "追加、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>オブジェクトの秘密キーをインポートする方法を決定するためのデータをバイト配列、パスワード、およびフラグを使用します。"
  remarks: "このメソッドは、設定を使用することができます、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>パスワード、証明書を使用したバイト配列で表されるオブジェクトします</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。 <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags>場所と方法を制御する値を使用することができます、秘密キーをインポートする</xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags>。       このメソッドは、バイト配列を受け取り、Base64 でエンコードされた、DER でエンコードされた X.509 証明書または PFX/PKCS12 証明書などの証明書の種類に使用できます。 PFX/PKCS12 証明書が複数の証明書を含めることができますに注意してください。 その場合は、秘密キーに関連付けられている最初の証明書を使用または、秘密キーが見つからない場合、最初の証明書が使用されます。      > [!IMPORTANT] > をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/af855297-61a6-47ed-8dcb-_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/af855297-61a6-47ed-8dcb-_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/af855297-61a6-47ed-8dcb-_1.vb)]"
  syntax:
    content: public override void Import (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "X.509 証明書からのデータを含むバイト配列。"
    - id: password
      type: System.String
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列挙体のビットごとの組み合わせの値を制御する場所と方法を証明書をインポートします。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "追加、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>証明書ファイルをパスワード、およびキーの格納フラグから情報を持つオブジェクト。"
  remarks: '**セキュリティに関する注意**をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。'
  syntax:
    content: public override void Import (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "証明書ファイルの名前。"
    - id: password
      type: System.Security.SecureString
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列挙体のビットごとの組み合わせの値を制御する場所と方法を証明書をインポートします。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,String,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "追加、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> 、パスワード、証明書ファイルから情報を持つオブジェクトと<xref href=&quot;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags&quot;></xref>値。"
  remarks: "このメソッドを使用できますの設定、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>、パスワード、証明書ファイルから情報を持つオブジェクトと<xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags>値</xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags></xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。      > [!IMPORTANT] > をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。"
  syntax:
    content: public override void Import (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "証明書ファイルの名前。"
    - id: password
      type: System.String
      description: "X.509 証明書データにアクセスするために必要なパスワードです。"
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "列挙体のビットごとの組み合わせの値を制御する場所と方法を証明書をインポートします。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  id: IssuerName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "証明書の発行者の識別名を取得します。"
  remarks: "このプロパティには、証明書を発行した証明機関 (CA) の名前が含まれています。 証明書の名前を取得するを使用して、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A>メソッド</xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A>。       証明書の識別名は、証明書のサブジェクトまたは発行者のテキスト表現です。 この表現は名前の属性 (たとえば、&quot;CN = MyName, OU = MyOrgUnit、C = u. s.&quot;) です。"
  example:
  - "The following code example creates a command-line executable file that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_20_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_20_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_20_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X500DistinguishedName&quot;> </xref>証明書の発行者の名前を含むオブジェクトです。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書のコンテキストが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  id: NotAfter
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "その後、証明書が無効になって現地時刻で日付を取得します。"
  remarks: "このプロパティは、証明書が無効になる有効期限の日付を示します。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_116_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_116_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_116_1.vb)]"
  syntax:
    content: public DateTime NotAfter { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>証明書の有効期限の日付を表すオブジェクト</xref:System.DateTime>。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書を読み取れません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  id: NotBefore
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "証明書が有効になるローカル時間で日付を取得します。"
  remarks: "このプロパティは、証明書が有効になる日付を示します。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_85_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_85_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_85_1.vb)]"
  syntax:
    content: public DateTime NotBefore { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>証明書の発効日を表すオブジェクト</xref:System.DateTime>。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書を読み取れません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  id: PrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "取得または設定、 <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref>証明書に関連付けられている秘密キーを表すオブジェクト。"
  remarks: "現在このプロパティをサポートしている RSA や DSA キーのみ、いずれかを返すように、<xref:System.Security.Cryptography.RSACryptoServiceProvider>または<xref:System.Security.Cryptography.DSACryptoServiceProvider>オブジェクト</xref:System.Security.Cryptography.DSACryptoServiceProvider></xref:System.Security.Cryptography.RSACryptoServiceProvider>。 秘密キーがいないかどうか、証明書に関連付け、それを返します`null`です。      > [!WARNING] > このプロパティを設定する場合`null`または削除することがなく別のキーに秘密キー ファイルはディスクに残っています。       このプロパティに関連付けられている秘密キーを正しく削除するには、次のように設定します`PersistKeyInCsp`を`false`、まず、<xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A>メソッド。</xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A> 。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_115_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_115_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_115_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.AsymmetricAlgorithm PrivateKey { get; set; }
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> DSA または RSA 暗号化サービス プロバイダーであるオブジェクト。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "キーの値は、RSA や DSA キーまたはキーを読み取ることができません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "このプロパティに設定されている値<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "この秘密キーのキーのアルゴリズムがサポートされていません。"
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: "X.509 キーが一致しません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "暗号化サービス プロバイダー キーが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "証明書に関連付けられた公開キー オブジェクトを取得します。"
  remarks: "このプロパティは、オブジェクト識別子が含まれます PublicKey オブジェクトを返します (<xref:System.Security.Cryptography.Oid>) 公開キー アルゴリズム、ASN.1 エンコードされたパラメーター、および ASN.1 エンコードされたキーの値を表すします</xref:System.Security.Cryptography.Oid>。       キーを取得することも、 <xref:System.Security.Cryptography.AsymmetricAlgorithm>PublicKey プロパティを参照することによってオブジェクト</xref:System.Security.Cryptography.AsymmetricAlgorithm>。 このプロパティは、いずれかを返すように RSA や DSA キーのみをサポートしている、<xref:System.Security.Cryptography.RSACryptoServiceProvider>または<xref:System.Security.Cryptography.DSACryptoServiceProvider>公開キーを表すオブジェクト</xref:System.Security.Cryptography.DSACryptoServiceProvider></xref:System.Security.Cryptography.RSACryptoServiceProvider>。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_120_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_120_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_120_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.PublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.PublicKey
      description: "公開キー オブジェクトです。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "キーの値は、RSA や DSA キーまたはキーを読み取ることができません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  id: RawData
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: RawData
  nameWithType: X509Certificate2.RawData
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "証明書の生データを取得します。"
  remarks: ''
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_59_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_59_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_59_1.cpp)]"
  syntax:
    content: public byte[] RawData { get; }
    return:
      type: System.Byte[]
      description: "バイト配列としての証明書の生データ。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  id: Reset
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Reset()
  nameWithType: X509Certificate2.Reset()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "状態をリセットする<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>オブジェクト。"
  remarks: "このメソッドを使用して、証明書の状態をリセットすることができます。 また、証明書に関連付けられているすべてのリソースを解放します。"
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  id: SerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "証明書のシリアル番号を取得します。"
  remarks: "証明書のシリアル番号は、元の X.509 プロトコルの一部です。 シリアル番号とは、証明機関 (CA) とも呼ばれる証明書の発行者によって発行された一意の番号です。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_114_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_114_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_114_1.vb)]"
  syntax:
    content: public string SerialNumber { get; }
    return:
      type: System.String
      description: "証明書のシリアル番号。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "証明書の署名の作成に使用されるアルゴリズムを取得します。"
  remarks: "オブジェクト識別子 (<xref:System.Security.Cryptography.Oid>) 証明書で使用される署名アルゴリズムの種類を識別します</xref:System.Security.Cryptography.Oid>。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/6cab3ad3-94fb-4ecd-9a6c-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/6cab3ad3-94fb-4ecd-9a6c-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/6cab3ad3-94fb-4ecd-9a6c-_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.Oid SignatureAlgorithm { get; }
    return:
      type: System.Security.Cryptography.Oid
      description: "オブジェクトの識別子を返します (<xref href=&quot;System.Security.Cryptography.Oid&quot;></xref>) の署名アルゴリズムです。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書を読み取れません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  id: SubjectName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "証明書からサブジェクトの識別名を取得します。"
  remarks: "サブジェクト識別名は、証明書のユーザーの名前です。 証明書の識別名は、件名のテキスト表現または証明書の発行者です。 この表現は名前の属性、たとえば、&quot;CN = MyName, OU = MyOrgUnit、C = u. s.&quot;です。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_80_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_80_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_80_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X500DistinguishedName&quot;> </xref>証明書のサブジェクトの名前を表すオブジェクト。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書のコンテキストが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  id: Thumbprint
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "証明書のサムプリントを取得します。"
  remarks: "拇印は、SHA1 アルゴリズムを使用して動的に生成し、証明書に物理的に存在しません。 拇印が証明書の一意の値であるために、証明書ストアに特定の証明書を見つけるために使用が一般的です。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_51_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_51_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_51_1.vb)]"
  syntax:
    content: public string Thumbprint { get; }
    return:
      type: System.String
      description: "証明書の拇印です。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  id: ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: ToString()
  nameWithType: X509Certificate2.ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "X.509 証明書をテキスト形式で表示します。"
  remarks: "すべてのと同様`ToString`メソッドを出力できない可能性があります、.NET Framework のバージョン間で一貫性のあるため、メソッドの結果は、コンテンツの解析してはなりません。 プロパティを使用して、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>コンテンツに関する正確な情報を取得または使用するオブジェクト、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A>証明書に関する情報を取得するメソッド</xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A></xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。       このメソッドは、テキスト形式で証明書を表示します。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/m-system.security.crypto_81_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/m-system.security.crypto_81_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/m-system.security.crypto_81_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "証明書の情報です。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  id: ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: ToString(Boolean)
  nameWithType: X509Certificate2.ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "X.509 証明書をテキスト形式で表示します。"
  remarks: "すべてのと同様`ToString`メソッドを出力できない可能性があります、.NET Framework のバージョン間で一貫性のあるため、メソッドの結果は、コンテンツの解析してはなりません。 プロパティを使用して、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2>正確な情報を取得するオブジェクト</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>。       このメソッドは、テキスト形式で証明書を表示します。 場合、`verbose`パラメーターに設定されている`true`テキストの表示には、公開キー、秘密キー、および拡張機能が含まれています。 場合`verbose`éý &quot; è`false`テキストの表示には、X.509 証明書の拇印、シリアル番号、サブジェクトと発行者名、および有効期限情報を含むから使用できるフィールドが含まれています。"
  example:
  - "The following code example creates a command line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/38d69126-bcaf-4cee-a89b-_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/38d69126-bcaf-4cee-a89b-_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/38d69126-bcaf-4cee-a89b-_1.vb)]"
  syntax:
    content: public override string ToString (bool verbose);
    parameters:
    - id: verbose
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>公開キー、秘密キー、拡張、およびなどを表示するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>次のような情報を表示する、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>拇印、シリアル番号、サブジェクトと発行者名、およびなどを含むクラスです。"
    return:
      type: System.String
      description: "証明書の情報です。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  id: Verify
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Verify()
  nameWithType: X509Certificate2.Verify()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "基本的な検証ポリシーを使用して X.509 チェーンの検証を実行します。"
  remarks: "このメソッドは、簡単な証明書のチェーンを構築し、そのチェーンにベースのポリシーを適用します。 使用して直接証明書の検証の失敗に関する詳細については、必要がある場合、<xref:System.Security.Cryptography.X509Certificates.X509Chain>オブジェクト</xref:System.Security.Cryptography.X509Certificates.X509Chain>。       <xref:System.Security.Cryptography.CryptoConfig>クラス</xref:System.Security.Cryptography.CryptoConfig>を使用して既定のチェーン エンジンをオーバーライドすることができますに注意してください。 Microsoft Windows Server 2003 で、既定のエンジンが RFC3280、」に記載の仕様に準拠&quot;[証明書と証明書失効リスト (CRL) のプロファイル](http://go.microsoft.com/fwlink/?LinkId=45286)&quot;。"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/m-system.security.crypto_98_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/m-system.security.crypto_98_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/m-system.security.crypto_98_1.cpp)]"
  syntax:
    content: public bool Verify ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>検証が成功した場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>検証に失敗した場合。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書を読み取れません。"
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  id: Version
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Version
  nameWithType: X509Certificate2.Version
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "証明書の X.509 形式のバージョンを取得します。"
  remarks: "X.509 証明書のいくつかのバージョンがあります。 このプロパティは、証明書で使用する形式を識別します。 たとえば、バージョン 3 証明書の「3」が返されます。"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_37_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_37_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_37_1.vb)]"
  syntax:
    content: public int Version { get; }
    return:
      type: System.Int32
      description: "証明書の形式です。"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Version*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "証明書を読み取れません。"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2()
  nameWithType: X509Certificate2.X509Certificate2()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[])
  nameWithType: X509Certificate2.X509Certificate2(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(IntPtr)
  nameWithType: X509Certificate2.X509Certificate2(IntPtr)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(X509Certificate)
  nameWithType: X509Certificate2.X509Certificate2(X509Certificate)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String)
  nameWithType: X509Certificate2.X509Certificate2(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],SecureString)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],String)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(SerializationInfo,StreamingContext)
  nameWithType: X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,SecureString)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,String)
  nameWithType: X509Certificate2.X509Certificate2(String,String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509KeyStorageFlags
  nameWithType: X509KeyStorageFlags
  fullName: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Archived
  nameWithType: X509Certificate2.Archived
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Extensions
  nameWithType: X509Certificate2.Extensions
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
- uid: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ExtensionCollection
  nameWithType: X509ExtensionCollection
  fullName: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType(Byte[])
  nameWithType: X509Certificate2.GetCertContentType(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(Byte[])
- uid: System.Security.Cryptography.X509Certificates.X509ContentType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ContentType
  nameWithType: X509ContentType
  fullName: System.Security.Cryptography.X509Certificates.X509ContentType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType(String)
  nameWithType: X509Certificate2.GetCertContentType(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetNameInfo(X509NameType,Boolean)
  nameWithType: X509Certificate2.GetNameInfo(X509NameType,Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(X509NameType,Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509NameType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509NameType
  nameWithType: X509NameType
  fullName: System.Security.Cryptography.X509Certificates.X509NameType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[])
  nameWithType: X509Certificate2.Import(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[])
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String)
  nameWithType: X509Certificate2.Import(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
- uid: System.Security.Cryptography.X509Certificates.X500DistinguishedName
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X500DistinguishedName
  nameWithType: X500DistinguishedName
  fullName: System.Security.Cryptography.X509Certificates.X500DistinguishedName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
- uid: System.Security.Cryptography.X509Certificates.PublicKey
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: PublicKey
  nameWithType: PublicKey
  fullName: System.Security.Cryptography.X509Certificates.PublicKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: RawData
  nameWithType: X509Certificate2.RawData
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Reset()
  nameWithType: X509Certificate2.Reset()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
- uid: System.Security.Cryptography.Oid
  parent: System.Security.Cryptography
  isExternal: false
  name: Oid
  nameWithType: Oid
  fullName: System.Security.Cryptography.Oid
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString()
  nameWithType: X509Certificate2.ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString(Boolean)
  nameWithType: X509Certificate2.ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Verify()
  nameWithType: X509Certificate2.Verify()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Version
  nameWithType: X509Certificate2.Version
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Archived
  nameWithType: X509Certificate2.Archived
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Extensions
  nameWithType: X509Certificate2.Extensions
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType
  nameWithType: X509Certificate2.GetCertContentType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetNameInfo
  nameWithType: X509Certificate2.GetNameInfo
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import
  nameWithType: X509Certificate2.Import
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: RawData
  nameWithType: X509Certificate2.RawData
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Reset
  nameWithType: X509Certificate2.Reset
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString
  nameWithType: X509Certificate2.ToString
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Verify
  nameWithType: X509Certificate2.Verify
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Version
  nameWithType: X509Certificate2.Version
