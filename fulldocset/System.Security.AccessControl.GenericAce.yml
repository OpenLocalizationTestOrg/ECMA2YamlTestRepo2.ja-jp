### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.GenericAce
  id: GenericAce
  children:
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.BinaryLength
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.GetHashCode
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.PropagationFlags
  langs:
  - csharp
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
  type: Class
  summary: "アクセス制御エントリ (ACE) を表し、他のすべての ACE クラスの基本クラスです。"
  remarks: "ACE には、ACE ヘッダーとバイナリの blob の両方が含まれています。 ヘッダーには、ACE、さまざまなフラグ、およびバイナリの blob のサイズの型に関する情報が含まれています。"
  syntax:
    content: public abstract class GenericAce
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AceFlags
  id: AceFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AceFlags
  nameWithType: GenericAce.AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "取得または設定、 <xref href=&quot;System.Security.AccessControl.AceFlags&quot;> </xref>これに関連付けられている<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Security.AccessControl.AceFlags>オブジェクトの継承、継承の反映、に関する情報を指定するフラグを格納およびアクセス制御エントリ (ACE) の条件を監査します</xref:System.Security.AccessControl.AceFlags>。"
  syntax:
    content: public System.Security.AccessControl.AceFlags AceFlags { get; set; }
    return:
      type: System.Security.AccessControl.AceFlags
      description: "<xref href=&quot;System.Security.AccessControl.AceFlags&quot;> </xref>これに関連付けられている<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクト。"
  overload: System.Security.AccessControl.GenericAce.AceFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AceType
  id: AceType
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AceType
  nameWithType: GenericAce.AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "このアクセス制御エントリ (ACE) の型を取得します。"
  syntax:
    content: public System.Security.AccessControl.AceType AceType { get; }
    return:
      type: System.Security.AccessControl.AceType
      description: "この ACE の型。"
  overload: System.Security.AccessControl.GenericAce.AceType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  id: AuditFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "このアクセス制御エントリ (ACE) と関連付けられている監査情報を取得します。"
  syntax:
    content: public System.Security.AccessControl.AuditFlags AuditFlags { get; }
    return:
      type: System.Security.AccessControl.AuditFlags
      description: "このアクセス制御エントリ (ACE) と関連付けられている監査情報。"
  overload: System.Security.AccessControl.GenericAce.AuditFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "長さを取得します (バイト単位)、現在のバイナリ表現の<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクト。 ACL をバイナリ配列にマーシャ リングする前に、この長さを使用する必要があります、<xref:System.Security.AccessControl.GenericAce.GetBinaryForm*>メソッド</xref:System.Security.AccessControl.GenericAce.GetBinaryForm*>。"
  syntax:
    content: public abstract int BinaryLength { get; }
    return:
      type: System.Int32
      description: "現在のバイナリ表現の長さ (バイト)、 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>オブジェクト。"
  overload: System.Security.AccessControl.GenericAce.BinaryLength*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.Copy
  id: Copy
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: Copy()
  nameWithType: GenericAce.Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "このアクセス制御エントリ (ACE) の詳細コピーを作成します。"
  syntax:
    content: public System.Security.AccessControl.GenericAce Copy ();
    parameters: []
    return:
      type: System.Security.AccessControl.GenericAce
      description: "<xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>このメソッドを作成するオブジェクト。"
  overload: System.Security.AccessControl.GenericAce.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  id: CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: CreateFromBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "作成、 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>指定されたバイナリ データからオブジェクト。"
  syntax:
    content: public static System.Security.AccessControl.GenericAce CreateFromBinaryForm (byte[] binaryForm, int offset);
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "新しい作成元のバイナリ データ<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクト。"
    - id: offset
      type: System.Int32
      description: "マーシャ リング解除を開始するオフセットです。"
    return:
      type: System.Security.AccessControl.GenericAce
      description: "<xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>オブジェクトのこのメソッドを作成します。"
  overload: System.Security.AccessControl.GenericAce.CreateFromBinaryForm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: GenericAce.Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "決定するかどうか、指定した<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクトが現在<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクト。"
  syntax:
    content: public override sealed bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>現在と比較するオブジェクト<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクト。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、指定した<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクトが現在<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクト。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.GenericAce.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: GetBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "内容をマーシャ リング、 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>オブジェクトを指定したオフセットで指定したバイト配列の先頭にします。"
  syntax:
    content: public abstract void GetBinaryForm (byte[] binaryForm, int offset);
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "先のバイト配列の内容、 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>はマーシャ リングします。"
    - id: offset
      type: System.Int32
      description: "マーシャ リングの開始オフセットです。"
  overload: System.Security.AccessControl.GenericAce.GetBinaryForm*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>負の値または大きすぎる全体<xref href=&quot;System.Security.AccessControl.GenericAcl&quot;></xref>にコピーされる<code>array</code>です。"
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  id: GetHashCode
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: GenericAce.GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "ハッシュ関数として機能、 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>クラスです。 GetHashCode メソッドは、ハッシュ、ハッシュ テーブルなどのアルゴリズムとデータ構造での使用に適しています。"
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "現在のハッシュ コード<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクト。"
  overload: System.Security.AccessControl.GenericAce.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  id: InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "このアクセス制御エントリ (ACE) の継承プロパティを指定するフラグを取得します。"
  syntax:
    content: public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get; }
    return:
      type: System.Security.AccessControl.InheritanceFlags
      description: "この ACE の継承プロパティを指定するフラグ。"
  overload: System.Security.AccessControl.GenericAce.InheritanceFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.IsInherited
  id: IsInherited
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: IsInherited
  nameWithType: GenericAce.IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "このアクセス制御エントリ (ACE) が継承または明示的に設定されているかどうかを指定するブール値を取得します。"
  syntax:
    content: public bool IsInherited { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>この ACE が継承されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.GenericAce.IsInherited*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  id: op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: op_Equality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "決定するかどうか、指定した<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクトが等しいと見なされます。"
  syntax:
    content: public static bool op_Equality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);
    parameters:
    - id: left
      type: System.Security.AccessControl.GenericAce
      description: "最初の<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>と比較するオブジェクト。"
    - id: right
      type: System.Security.AccessControl.GenericAce
      description: "2 番目<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>を比較します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、2 つ<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクトが等しい。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.GenericAce.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  id: op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: op_Inequality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "決定するかどうか、指定した<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクトが等しくないと見なされます。"
  syntax:
    content: public static bool op_Inequality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);
    parameters:
    - id: left
      type: System.Security.AccessControl.GenericAce
      description: "最初の<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>と比較するオブジェクト。"
    - id: right
      type: System.Security.AccessControl.GenericAce
      description: "2 番目<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>を比較します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、2 つ<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>オブジェクトが等しくない、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.GenericAce.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  id: PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "このアクセス制御エントリ (ACE) の継承の反映プロパティを指定するフラグを取得します。"
  syntax:
    content: public System.Security.AccessControl.PropagationFlags PropagationFlags { get; }
    return:
      type: System.Security.AccessControl.PropagationFlags
      description: "この ACE の継承の反映プロパティを指定するフラグ。"
  overload: System.Security.AccessControl.GenericAce.PropagationFlags*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  nameWithType: GenericAce.AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
- uid: System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  nameWithType: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  nameWithType: GenericAce.AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
- uid: System.Security.AccessControl.AceType
  parent: System.Security.AccessControl
  isExternal: false
  name: AceType
  nameWithType: AceType
  fullName: System.Security.AccessControl.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy()
  nameWithType: GenericAce.Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: CreateFromBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Equals(Object)
  nameWithType: GenericAce.Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode()
  nameWithType: GenericAce.GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  nameWithType: GenericAce.IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Equality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)
- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Inequality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.AceFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  nameWithType: GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  nameWithType: GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.BinaryLength*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.Copy*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy
  nameWithType: GenericAce.Copy
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: CreateFromBinaryForm
  nameWithType: GenericAce.CreateFromBinaryForm
- uid: System.Security.AccessControl.GenericAce.Equals*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Equals
  nameWithType: GenericAce.Equals
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetBinaryForm
  nameWithType: GenericAce.GetBinaryForm
- uid: System.Security.AccessControl.GenericAce.GetHashCode*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode
  nameWithType: GenericAce.GetHashCode
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  nameWithType: GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.op_Equality*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Equality
  nameWithType: GenericAce.op_Equality
- uid: System.Security.AccessControl.GenericAce.op_Inequality*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Inequality
  nameWithType: GenericAce.op_Inequality
- uid: System.Security.AccessControl.GenericAce.PropagationFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
