### YamlMime:ManagedReference
items:
- uid: System.Windows.Application
  id: Application
  children:
  - System.Windows.Application.#ctor
  - System.Windows.Application.Activated
  - System.Windows.Application.Current
  - System.Windows.Application.Deactivated
  - System.Windows.Application.DispatcherUnhandledException
  - System.Windows.Application.Exit
  - System.Windows.Application.FindResource(System.Object)
  - System.Windows.Application.FragmentNavigation
  - System.Windows.Application.GetContentStream(System.Uri)
  - System.Windows.Application.GetCookie(System.Uri)
  - System.Windows.Application.GetRemoteStream(System.Uri)
  - System.Windows.Application.GetResourceStream(System.Uri)
  - System.Windows.Application.LoadCompleted
  - System.Windows.Application.LoadComponent(System.Uri)
  - System.Windows.Application.LoadComponent(System.Object,System.Uri)
  - System.Windows.Application.MainWindow
  - System.Windows.Application.Navigated
  - System.Windows.Application.Navigating
  - System.Windows.Application.NavigationFailed
  - System.Windows.Application.NavigationProgress
  - System.Windows.Application.NavigationStopped
  - System.Windows.Application.OnActivated(System.EventArgs)
  - System.Windows.Application.OnDeactivated(System.EventArgs)
  - System.Windows.Application.OnExit(System.Windows.ExitEventArgs)
  - System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)
  - System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)
  - System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)
  - System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)
  - System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)
  - System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)
  - System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)
  - System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)
  - System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)
  - System.Windows.Application.Properties
  - System.Windows.Application.ResourceAssembly
  - System.Windows.Application.Resources
  - System.Windows.Application.Run
  - System.Windows.Application.Run(System.Windows.Window)
  - System.Windows.Application.SessionEnding
  - System.Windows.Application.SetCookie(System.Uri,System.String)
  - System.Windows.Application.Shutdown
  - System.Windows.Application.Shutdown(System.Int32)
  - System.Windows.Application.ShutdownMode
  - System.Windows.Application.Startup
  - System.Windows.Application.StartupUri
  - System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.Application.TryFindResource(System.Object)
  - System.Windows.Application.Windows
  langs:
  - csharp
  name: Application
  nameWithType: Application
  fullName: System.Windows.Application
  type: Class
  summary: "カプセル化、[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]アプリケーションです。"
  remarks: "アプリケーションがカプセル化するクラス[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]、次を含む、アプリケーション固有の機能:-**アプリケーションの有効期間** <xref:System.Windows.Application.Activated> <xref:System.Windows.Application.Current%2A> <xref:System.Windows.Application.Deactivated> <xref:System.Windows.Application.DispatcherUnhandledException> <xref:System.Windows.Application.Exit> <xref:System.Windows.Application.Run%2A> <xref:System.Windows.Application.SessionEnding> <xref:System.Windows.Application.Shutdown%2A> <xref:System.Windows.Application.ShutdownMode%2A> <xref:System.Windows.Application.Startup>。</xref:System.Windows.Application.Startup> 、</xref:System.Windows.Application.ShutdownMode%2A> 、</xref:System.Windows.Application.Shutdown%2A> 、</xref:System.Windows.Application.SessionEnding> 、</xref:System.Windows.Application.Run%2A> 、</xref:System.Windows.Application.Exit> 、</xref:System.Windows.Application.DispatcherUnhandledException> 、</xref:System.Windows.Application.Deactivated> 、</xref:System.Windows.Application.Current%2A> 、</xref:System.Windows.Application.Activated> 。      -**アプリケーション スコープ ウィンドウ、プロパティ、およびリソース管理**: <xref:System.Windows.Application.FindResource%2A> <xref:System.Windows.Application.GetContentStream%2A> <xref:System.Windows.Application.GetResourceStream%2A> <xref:System.Windows.Application.LoadComponent%2A> <xref:System.Windows.Application.MainWindow%2A> <xref:System.Windows.Application.Properties%2A> <xref:System.Windows.Application.Resources%2A> <xref:System.Windows.Application.StartupUri%2A> <xref:System.Windows.Application.Windows%2A>.</xref:System.Windows.Application.Windows%2A> </xref:System.Windows.Application.StartupUri%2A> </xref:System.Windows.Application.Resources%2A> </xref:System.Windows.Application.Properties%2A> </xref:System.Windows.Application.MainWindow%2A> </xref:System.Windows.Application.LoadComponent%2A> </xref:System.Windows.Application.GetResourceStream%2A> </xref:System.Windows.Application.GetContentStream%2A> 、</xref:System.Windows.Application.FindResource%2A>      -**コマンド ライン パラメーターおよび終了コード処理**: <xref:System.Windows.Application.Startup?displayProperty=fullName> <xref:System.Windows.Application.Exit?displayProperty=fullName> <xref:System.Windows.Application.Shutdown%2A?displayProperty=fullName></xref:System.Windows.Application.Shutdown%2A?displayProperty=fullName> </xref:System.Windows.Application.Exit?displayProperty=fullName> 、</xref:System.Windows.Application.Startup?displayProperty=fullName> 。      -   **Navigation**: <xref:System.Windows.Application.FragmentNavigation>, <xref:System.Windows.Application.LoadCompleted>, <xref:System.Windows.Application.Navigated>, <xref:System.Windows.Application.Navigating>, <xref:System.Windows.Application.NavigationProgress>, <xref:System.Windows.Application.NavigationStopped>, <xref:System.Windows.Application.NavigationFailed>, <xref:System.Windows.Application.SetCookie%2A>, <xref:System.Windows.Application.GetCookie%2A>.</xref:System.Windows.Application.GetCookie%2A></xref:System.Windows.Application.SetCookie%2A></xref:System.Windows.Application.NavigationFailed></xref:System.Windows.Application.NavigationStopped></xref:System.Windows.Application.NavigationProgress></xref:System.Windows.Application.Navigating></xref:System.Windows.Application.Navigated></xref:System.Windows.Application.LoadCompleted></xref:System.Windows.Application.FragmentNavigation>       アプリケーションでは、そのウィンドウ、プロパティ、およびリソースのスコープのサービスへの共有アクセスを提供するシングルトン パターンを実装します。 その結果、 <xref:System.AppDomain>。</xref:System.AppDomain>あたりアプリケーション クラスのインスタンスを&1; つだけを作成できます。       マークアップ、マークアップと分離コード、またはコードを使用してアプリケーションを実装することができます。 アプリケーション マークアップまたはマークアップと分離コードでは、マークアップ ファイルとして構成されているかどうか、マークアップで実装される、 [!INCLUDE[TLA#tla_msbuild](~/add/includes/tlasharptla-msbuild-md.md)] `ApplicationDefinition`項目。      > [!NOTE] > スタンドアロン アプリケーションには、Application オブジェクトは不要です。 カスタムを実装することは`static`エントリ ポイント メソッド (`Main`) アプリケーションのインスタンスを作成せず、ウィンドウが開きます。 ただし、[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]アプリケーション オブジェクトが必要です。"
  example:
  - "The following example shows how a standard application is defined using only markup:  \n  \n [!code-xml[ApplicationSnippets#ApplicationMARKUP](~/add/codesnippet/xaml/ApplicationSnippets.CSharp/AppMarkup.xaml#applicationmarkup)]  \n  \n The following example shows how a standard application is defined using only code:  \n  \n [!code-cs[ApplicationSnippets#ApplicationCODE](~/add/codesnippet/csharp/ApplicationSnippets.CSharp/AppCode.cs#applicationcode)]\n [!code-vb[ApplicationSnippets#ApplicationCODE](~/add/codesnippet/visualbasic/applicationsnippets/appcode.vb#applicationcode)]  \n  \n The following example shows how a standard application is defined using a combination of markup and code-behind.  \n  \n [!code-xml[ApplicationSnippets#ApplicationXAML](~/add/codesnippet/xaml/ApplicationSnippets.CSharp/App.xaml#applicationxaml)]  \n  \n [!code-cs[ApplicationSnippets#ApplicationCODEBEHIND](~/add/codesnippet/csharp/ApplicationSnippets.CSharp/App.xaml.cs#applicationcodebehind)]\n [!code-vb[ApplicationSnippets#ApplicationCODEBEHIND](~/add/codesnippet/visualbasic/applicationsnippets/application.xaml.vb#applicationcodebehind)]"
  syntax:
    content: 'public class Application : System.Windows.Threading.DispatcherObject, System.Windows.Markup.IQueryAmbient'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements:
  - System.Windows.Markup.IQueryAmbient
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Application.#ctor
  id: '#ctor'
  parent: System.Windows.Application
  langs:
  - csharp
  name: Application()
  nameWithType: Application.Application()
  fullName: System.Windows.Application.Application()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Application&quot;> </xref>クラスです。"
  remarks: "インスタンスを&1; つだけ、<xref:System.Windows.Application>あたりクラスを作成することができます<xref:System.AppDomain>アプリケーション スコープ ウィンドウ、プロパティ、およびリソース データの単一のセットを共有のアクセスを確実にします</xref:System.AppDomain></xref:System.Windows.Application>。 したがって、既定のコンス トラクターの<xref:System.Windows.Application>クラスを検出したかどうか、インスタンスを初期化中に最初のインスタンス、<xref:System.AppDomain>以外の場合、それ以外は、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.AppDomain></xref:System.Windows.Application>。       <xref:System.Windows.Application>現在のオブジェクト<xref:System.AppDomain>静的から公開される<xref:System.Windows.Application.Current%2A>プロパティ</xref:System.Windows.Application.Current%2A></xref:System.AppDomain></xref:System.Windows.Application>。"
  syntax:
    content: public Application ();
    parameters: []
  overload: System.Windows.Application.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "2 つ以上のインスタンス、 <xref href=&quot;System.Windows.Application&quot;> </xref>ごとに、クラスが作成された<xref href=&quot;System.AppDomain&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Application.Activated
  id: Activated
  parent: System.Windows.Application
  langs:
  - csharp
  name: Activated
  nameWithType: Application.Activated
  fullName: System.Windows.Application.Activated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "アプリケーションがフォア グラウンド アプリケーションになったときに発生します。"
  remarks: "A[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]を&1; つ以上の開いているウィンドウを持つアプリケーションをアクティブ化 (フォア グラウンド アプリケーションになります)、windows のいずれかが有効な場合、最初にアプリケーションが起動されるため、または、windows のいずれかが有効な場合、アプリケーションがアクティブな間。 具体的には、アクティブ化を行うときに:-アプリケーションが最初のウィンドウを開きます。      -ユーザーは、ALT + TAB キーを使用して、またはタスク マネージャーを使用して、アプリケーションに切り替えます。      は、ユーザーは、アプリケーションで windows のいずれかのタスク バー ボタンをクリックします。       アクティブ化するときを検出するために必要とするアプリケーションでは、アクティブ化イベントを処理できます。       アプリケーションが最初に有効化した後非アクティブ化されその有効期間中に何度も再アクティブ化する可能性があります。 アクティブ化と<xref:System.Windows.Application.Deactivated>イベントがアクティブ化の状態のインチ</xref:System.Windows.Application.Deactivated>処理できる場合は、アプリケーションの動作または状態のアクティブ化状態に依存します。       アプリケーションがアクティブになると、アクティブ化は発生しません。 もう一度、アプリケーションがアクティブなときに、アプリケーション内でウィンドウの数がアクティブ化に関係なく、アプリケーションが非アクティブ化までです。       アクティブ化は発生しません[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]です。"
  example:
  - "The following example shows how to detect when a standalone application activates and deactivates.  \n  \n [!code-xml[ApplicationActivationSnippets#DetectActivationStateXAML](~/add/codesnippet/xaml/ApplicationActivationSnippets.CSharp/App.xaml#detectactivationstatexaml)]  \n  \n [!code-cs[ApplicationActivationSnippets#DetectActivationStateCODEBEHIND](~/add/codesnippet/csharp/ApplicationActivationSnippets.CSharp/App.xaml.cs#detectactivationstatecodebehind)]\n [!code-vb[ApplicationActivationSnippets#DetectActivationStateCODEBEHIND](~/add/codesnippet/visualbasic/applicationactivationsnippets/application.xaml.vb#detectactivationstatecodebehind)]"
  syntax:
    content: public event EventHandler Activated;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.Current
  id: Current
  parent: System.Windows.Application
  langs:
  - csharp
  name: Current
  nameWithType: Application.Current
  fullName: System.Windows.Application.Current
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得、 <xref href=&quot;System.Windows.Application&quot;> </xref>現在のオブジェクト<xref href=&quot;System.AppDomain&quot;></xref>です。"
  remarks: "<xref:System.Windows.Application>あたり-<xref:System.AppDomain> <xref:System.Windows.Application> <xref:System.AppDomain>.</xref:System.AppDomain>の現在のインスタンス</xref:System.Windows.Application>への共有アクセスを提供する現在の静的プロパティを実装するシングルトン型</xref:System.AppDomain></xref:System.Windows.Application> この設計のため管理されている状態にある<xref:System.Windows.Application>、共有リソースや状態は、単一の共有の場所から入手できます</xref:System.Windows.Application>。       このプロパティは、スレッド セーフであるは任意のスレッドから使用できます。"
  syntax:
    content: public static System.Windows.Application Current { get; }
    return:
      type: System.Windows.Application
      description: "<xref href=&quot;System.Windows.Application&quot;> </xref>現在のオブジェクト<xref href=&quot;System.AppDomain&quot;></xref>です。"
  overload: System.Windows.Application.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.Deactivated
  id: Deactivated
  parent: System.Windows.Application
  langs:
  - csharp
  name: Deactivated
  nameWithType: Application.Deactivated
  fullName: System.Windows.Application.Deactivated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "アプリケーションでは、フォア グラウンド アプリケーションが停止したときに発生します。"
  remarks: "A[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]を&1; つ以上の開いているウィンドウを持つアプリケーションは、(前面のアプリケーションを停止) を非アクティブ化、ユーザーが次:-ALT + TAB キーを使用して、またはタスク マネージャーを使用して、別のアプリケーションに切り替えます。      -別のアプリケーションでのウィンドウのタスク バー ボタンをクリックします。       非アクティブ化を検出するために必要とするアプリケーションでは、非アクティブ化イベントを処理できます。       アプリケーションが最初に有効化した後非アクティブ化されその有効期間中に何度も再アクティブ化する可能性があります。 両方の非アクティブ化を処理できるアプリケーションの動作または状態のアクティブ化状態に依存する場合と<xref:System.Windows.Application.Activated>イベントがどの状態を確認インチ</xref:System.Windows.Application.Activated>       非アクティブになるは発生しません[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]です。"
  example:
  - "The following example shows how to detect when a standalone application deactivates and activates.  \n  \n [!code-xml[ApplicationActivationSnippets#DetectActivationStateXAML](~/add/codesnippet/xaml/ApplicationActivationSnippets.CSharp/App.xaml#detectactivationstatexaml)]  \n  \n [!code-cs[ApplicationActivationSnippets#DetectActivationStateCODEBEHIND](~/add/codesnippet/csharp/ApplicationActivationSnippets.CSharp/App.xaml.cs#detectactivationstatecodebehind)]\n [!code-vb[ApplicationActivationSnippets#DetectActivationStateCODEBEHIND](~/add/codesnippet/visualbasic/applicationactivationsnippets/application.xaml.vb#detectactivationstatecodebehind)]"
  syntax:
    content: public event EventHandler Deactivated;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.DispatcherUnhandledException
  id: DispatcherUnhandledException
  parent: System.Windows.Application
  langs:
  - csharp
  name: DispatcherUnhandledException
  nameWithType: Application.DispatcherUnhandledException
  fullName: System.Windows.Application.DispatcherUnhandledException
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "例外がアプリケーションによってスローされたが、処理されないときに発生します。"
  remarks: "既定では、[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]未処理の例外をキャッチ、(元の報告できる例外) ダイアログ ボックスで、例外のユーザーに通知およびアプリケーションを自動的にシャット ダウンします。       ただし、アプリケーションは、カスタムのハンドルされない例外が処理を一元的な場所からを実行する必要があります、DispatcherUnhandledException を処理する必要があります。       DispatcherUnhandledException がによって発生した、<xref:System.Windows.Application>メイン UI スレッドで実行されているコードによってハンドルされない例外ごとにします</xref:System.Windows.Application>。       例外が処理されない場合に、バック グラウンド[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]スレッド (独自のスレッド<xref:System.Windows.Threading.Dispatcher>) またはバック グラウンド ワーカー スレッド (せず、スレッド、 <xref:System.Windows.Threading.Dispatcher>)、例外が、主に転送されません[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]スレッド</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher>。 その結果、DispatcherUnhandledException は発生しません。 このような場合に、次のコードを記述する必要があります: 1。  バック グラウンド スレッドで例外を処理します。      2.  これらの例外、メインのディスパッチ[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]スレッドです。      3.  メインでそれらを再スロー[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]を発生させる DispatcherUnhandledException を許可するための処理なくスレッドです。       詳細については、次を参照してください。、[スレッド モデル](~/add/includes/ajax-current-ext-md.md)の概要です。       DispatcherUnhandledException イベント ハンドラーに渡されます、 <xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs>、例外に関するコンテキスト情報を含む引数を含む:-例外 (<xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A>) です</xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A></xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs>。      -<xref:System.Windows.Threading.Dispatcher>出所から (<xref:System.Windows.Threading.DispatcherEventArgs.Dispatcher%2A>).</xref:System.Windows.Threading.DispatcherEventArgs.Dispatcher%2A> </xref:System.Windows.Threading.Dispatcher>       この情報を使用するには、例外が回復可能かどうかどうかを判別します。 回復可能な例外があります、<xref:System.IO.FileNotFoundException>など、回復不能な例外があります、 <xref:System.StackOverflowException>、たとえば</xref:System.StackOverflowException></xref:System.IO.FileNotFoundException>。       ときに、DispatcherUnhandledException から未処理の例外を処理して、したくない[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]処理を続行するには、設定する必要があります、<xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A>プロパティを`true`</xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A>。       他のイベントとは異なりを<xref:System.Windows.Application>が発生し、DispatcherUnhandledException は一致するプロテクト仮想実装 (OnDispatcherUnhandledException) がありません</xref:System.Windows.Application>。 そのため、クラスから派生した<xref:System.Windows.Application>DispatcherUnhandledException 未処理の例外を処理すると、イベント ハンドラーを登録常にする必要があります</xref:System.Windows.Application>。"
  example:
  - "The following example shows how to process unhandled exceptions by handling the DispatcherUnhandledException event.  \n  \n [!code-cs[ApplicationDispatcherUnhandledExceptionSnippets#HandleDispatcherUnhandledExceptionCODEBEHIND1](~/add/codesnippet/csharp/ApplicationDispatcherUnhandledExceptionSnippets.CSharp/App.xaml.cs#handledispatcherunhandledexceptioncodebehind1)]\n [!code-vb[ApplicationDispatcherUnhandledExceptionSnippets#HandleDispatcherUnhandledExceptionCODEBEHIND1](~/add/codesnippet/visualbasic/applicationdispatcherunhandledexceptionsnippets/application.xaml.vb#handledispatcherunhandledexceptioncodebehind1)]  \n[!code-cs[ApplicationDispatcherUnhandledExceptionSnippets#HandleDispatcherUnhandledExceptionCODEBEHIND2](~/add/codesnippet/csharp/ApplicationDispatcherUnhandledExceptionSnippets.CSharp/App.xaml.cs#handledispatcherunhandledexceptioncodebehind2)]\n[!code-vb[ApplicationDispatcherUnhandledExceptionSnippets#HandleDispatcherUnhandledExceptionCODEBEHIND2](~/add/codesnippet/visualbasic/applicationdispatcherunhandledexceptionsnippets/application.xaml.vb#handledispatcherunhandledexceptioncodebehind2)]"
  syntax:
    content: public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler DispatcherUnhandledException;
    return:
      type: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.Exit
  id: Exit
  parent: System.Windows.Application
  langs:
  - csharp
  name: Exit
  nameWithType: Application.Exit
  fullName: System.Windows.Application.Exit
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "アプリケーションがシャット ダウンし、キャンセルできません直前に発生します。"
  remarks: "アプリケーションは、次の理由のいずれかのシャット ダウンできます: -<xref:System.Windows.Application.Shutdown%2A>のメソッド、<xref:System.Windows.Application>オブジェクトが呼び出されると、によって明示的にまたは決定される、<xref:System.Windows.Application.ShutdownMode%2A>プロパティ</xref:System.Windows.Application.ShutdownMode%2A></xref:System.Windows.Application></xref:System.Windows.Application.Shutdown%2A>。      -ユーザーは、ログオフまたはシャット ダウンによって、セッションを終了します。       終了イベントを処理することによってアプリケーションのシャット ダウンが発生したときを検出し、必要に応じて、追加の処理を実行できます。       検査または呼び出す必要がある場合に、アプリケーションの終了コードを変更する場合は終了を処理することも<xref:System.Windows.Application.Shutdown%2A>明示的にします</xref:System.Windows.Application.Shutdown%2A>。 終了コードの公開元である、<xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A>のプロパティ、<xref:System.Windows.ExitEventArgs>終了イベント ハンドラーに渡される引数</xref:System.Windows.ExitEventArgs></xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A>。 アプリケーションの実行が停止、終了コードは後続の処理のオペレーティング システムに渡されます。       アプリケーションが処理する場合、<xref:System.Windows.Application.SessionEnding>イベントし、後では発生しませんが、終了をキャンセルし、アプリケーションによって配布されたシャット ダウン モードで実行されている</xref:System.Windows.Application.SessionEnding>。       終了コードから設定できる、[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]値は無視されますが、します。       [!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]、終了が次の状況で発生します: -[!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]から移動します。      - [!INCLUDE[TLA2#tla_ie7](~/add/includes/tla2sharptla-ie7-md.md)]、ときに、タブをホストしている、[!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]が閉じられます。      場合、ブラウザーは閉じられます。       値の場合、<xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A>プロパティは無視されます</xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A>。"
  example:
  - "The following example demonstrates how to:  \n  \n-   Handle the Exit event.  \n  \n-   Inspect and update the <xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A> property of the <xref:System.Windows.ExitEventArgs>.  \n  \n-   Write an entry to an application log in isolated storage.  \n  \n-   Persist the application state to isolated storage.  \n  \n [!code-xml[ApplicationExitSnippets#HandleExitXAML](~/add/codesnippet/xaml/ApplicationExitSnippets.CSharp/App.xaml#handleexitxaml)]  \n  \n [!code-cs[ApplicationExitSnippets#HandleExitCODEBEHIND](~/add/codesnippet/csharp/ApplicationExitSnippets.CSharp/App.xaml.cs#handleexitcodebehind)]\n [!code-vb[ApplicationExitSnippets#HandleExitCODEBEHIND](~/add/codesnippet/visualbasic/applicationexitsnippets/application.xaml.vb#handleexitcodebehind)]"
  syntax:
    content: public event System.Windows.ExitEventHandler Exit;
    return:
      type: System.Windows.ExitEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.FindResource(System.Object)
  id: FindResource(System.Object)
  parent: System.Windows.Application
  langs:
  - csharp
  name: FindResource(Object)
  nameWithType: Application.FindResource(Object)
  fullName: System.Windows.Application.FindResource(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "検索、[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]リソースなど、 <xref href=&quot;System.Windows.Style&quot;> </xref>または<xref href=&quot;System.Windows.Media.Brush&quot;></xref>では、指定したキーとがスローされます、要求されたリソースが見つからない場合に例外 (を参照してください[XAML リソース](~/add/includes/ajax-current-ext-md.md))。"
  remarks: "FindResource は、アプリケーション スコープの指定されたリソースのリソースでは、まずします。 アプリケーション スコープのリソースで管理されて<xref:System.Windows.Application>から公開されると、<xref:System.Windows.Application.Resources%2A>プロパティ</xref:System.Windows.Application.Resources%2A></xref:System.Windows.Application>。 アプリケーション スコープのリソースのセットに指定されたリソースが見つからない場合 FindResource し、次を検索、システム リソースです。 システム リソースは、シェル リソースが、ユーザーが定義されているし、色、フォント、およびシェル構成が含まれます。 これらは、 <xref:System.Windows.SystemColors>、 <xref:System.Windows.SystemFonts>、および<xref:System.Windows.SystemParameters>型をそれぞれ、静的なプロパティです</xref:System.Windows.SystemParameters></xref:System.Windows.SystemFonts></xref:System.Windows.SystemColors>。 FindResource を使用すると、それらを取得して、これらの型も公開 FindResource; に渡されるように設計されているリソースのキー プロパティたとえば、 <xref:System.Windows.SystemParameters.IconWidthKey%2A>。</xref:System.Windows.SystemParameters.IconWidthKey%2A>       FindResource オブジェクトを返すために、リソースが見つかった場合に、適切な型に返される値をキャストする必要があります。      > [!IMPORTANT] > が見つからないキーのこのメソッドを呼び出すと、例外がスローされます。 呼び出し元 FindResource に起因する例外を処理しない場合は、<xref:System.Windows.Application.TryFindResource%2A>を呼び出してください。<xref:System.Windows.Application.TryFindResource%2A>を返します、`null`要求されたリソースが見つからないし、例外をスローしないときに参照します</xref:System.Windows.Application.TryFindResource%2A></xref:System.Windows.Application.TryFindResource%2A>。       このメソッドはスレッド セーフであるため、任意のスレッドから呼び出すことができます。"
  example:
  - "The following example shows how to use FindResource to find a resource, and to handle <xref:System.Windows.ResourceReferenceKeyNotFoundException> if the resource is not found.  \n  \n [!code-cs[ApplicationFindResourceSnippets#ApplicationCallFindResourceCODEBEHIND](~/add/codesnippet/csharp/ApplicationFindResourceSnippets/MainWindow.xaml.cs#applicationcallfindresourcecodebehind)]\n [!code-vb[ApplicationFindResourceSnippets#ApplicationCallFindResourceCODEBEHIND](~/add/codesnippet/visualbasic/applicationfindresourcesnippets/mainwindow.xaml.vb#applicationcallfindresourcecodebehind)]"
  syntax:
    content: public object FindResource (object resourceKey);
    parameters:
    - id: resourceKey
      type: System.Object
      description: "検索するリソースの名前。"
    return:
      type: System.Object
      description: "要求されたリソース オブジェクト。 要求されたリソースが見つからない場合、 <xref href=&quot;System.Windows.ResourceReferenceKeyNotFoundException&quot;> </xref>がスローされます。"
  overload: System.Windows.Application.FindResource*
  exceptions:
  - type: System.Windows.ResourceReferenceKeyNotFoundException
    commentId: T:System.Windows.ResourceReferenceKeyNotFoundException
    description: "リソースが見つかりません。"
  platform:
  - net462
- uid: System.Windows.Application.FragmentNavigation
  id: FragmentNavigation
  parent: System.Windows.Application
  langs:
  - csharp
  name: FragmentNavigation
  nameWithType: Application.FragmentNavigation
  fullName: System.Windows.Application.FragmentNavigation
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "アプリケーションのナビゲーターは、コンテンツ フラグメントへのナビゲーションを開始すると発生ナビゲーションがすぐに発生した理由は、目的のフラグメントは、現在のコンテンツまたはソースの後に場合[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]目的のフラグメントが別のコンテンツがある場合、コンテンツが読み込まれました。"
  remarks: "ナビゲーターは、いずれか<xref:System.Windows.Navigation.NavigationWindow>または<xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>       <xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=fullName>.</xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=fullName>を参照してください。"
  syntax:
    content: public event System.Windows.Navigation.FragmentNavigationEventHandler FragmentNavigation;
    return:
      type: System.Windows.Navigation.FragmentNavigationEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.GetContentStream(System.Uri)
  id: GetContentStream(System.Uri)
  parent: System.Windows.Application
  langs:
  - csharp
  name: GetContentStream(Uri)
  nameWithType: Application.GetContentStream(Uri)
  fullName: System.Windows.Application.GetContentStream(Uri)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "指定した位置にあるコンテンツのデータ ファイルのリソース ストリームを返す<xref:System.Uri>(を参照してください[WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル](~/add/includes/ajax-current-ext-md.md)).</xref:System.Uri>"
  remarks: "このメソッドはスレッド セーフではありません。"
  syntax:
    content: public static System.Windows.Resources.StreamResourceInfo GetContentStream (Uri uriContent);
    parameters:
    - id: uriContent
      type: System.Uri
      description: "相対<xref:System.Uri>厳密でないリソースにマップされる</xref:System.Uri>。"
    return:
      type: System.Windows.Resources.StreamResourceInfo
      description: "A <xref href=&quot;System.Windows.Resources.StreamResourceInfo&quot;> </xref>指定<xref:System.Uri>.</xref:System.Uri>に配置されているコンテンツのデータ ファイルを格納しています。 厳密でないリソースが見つからない場合は、null が返されます。"
  overload: System.Windows.Application.GetContentStream*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Uri>に渡される GetContentStream が null です</xref:System.Uri>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Uri>は絶対<xref:System.Uri>.</xref:System.Uri> GetContentStream に渡されるが</xref:System.Uri>"
  platform:
  - net462
- uid: System.Windows.Application.GetCookie(System.Uri)
  id: GetCookie(System.Uri)
  parent: System.Windows.Application
  langs:
  - csharp
  name: GetCookie(Uri)
  nameWithType: Application.GetCookie(Uri)
  fullName: System.Windows.Application.GetCookie(Uri)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "<xref:System.Uri>。</xref:System.Uri>で指定された場所の cookie を取得します"
  remarks: "GetCookie 指定<xref:System.Uri>。</xref:System.Uri>の cookie を取得します。 Cookie を取得できない場合、<xref:System.ComponentModel.Win32Exception>がスローされます</xref:System.ComponentModel.Win32Exception>。 名前/値ペアの一覧に、cookie の文字列を解析するコードを記述する必要があります。       クッキーの概要については[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]を参照してください[ナビゲーション概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static string GetCookie (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "<xref:System.Uri>Cookie の作成対象の場所を指定します</xref:System.Uri>。"
    return:
      type: System.String
      description: "A <xref:System.String>cookie が存在する場合は値それ以外の場合、 <xref href=&quot;System.ComponentModel.Win32Exception&quot;> </xref>がスローされます。</xref:System.String> 。"
  overload: System.Windows.Application.GetCookie*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]によってエラーが発生しました、 <xref uid=&quot;langword_csharp_InternetGetCookie&quot; name=&quot;InternetGetCookie&quot; href=&quot;&quot;> </xref> (GetCookie によって呼び出される) 関数、指定された cookie を取得しようとするときに問題が発生した場合。"
  platform:
  - net462
- uid: System.Windows.Application.GetRemoteStream(System.Uri)
  id: GetRemoteStream(System.Uri)
  parent: System.Windows.Application
  langs:
  - csharp
  name: GetRemoteStream(Uri)
  nameWithType: Application.GetRemoteStream(Uri)
  fullName: System.Windows.Application.GetRemoteStream(Uri)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "指定した位置にあるサイトの発信元のデータ ファイルのリソース ストリームを返す<xref:System.Uri>(を参照してください[WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル](~/add/includes/ajax-current-ext-md.md)).</xref:System.Uri>"
  remarks: "このメソッドはスレッド セーフではありません。"
  syntax:
    content: public static System.Windows.Resources.StreamResourceInfo GetRemoteStream (Uri uriRemote);
    parameters:
    - id: uriRemote
      type: System.Uri
      description: "<xref:System.Uri>元のサイトでの厳密でないリソースにマップされる</xref:System.Uri>。"
    return:
      type: System.Windows.Resources.StreamResourceInfo
      description: "A <xref href=&quot;System.Windows.Resources.StreamResourceInfo&quot;> </xref>サイト-元のデータ ファイルの指定した<xref:System.Uri>.</xref:System.Uri>に配置されているリソース ストリームを格納しています。 厳密でないリソースが見つからない場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>が返されます。"
  overload: System.Windows.Application.GetRemoteStream*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Uri>に渡される GetRemoteStream が null です</xref:System.Uri>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Uri>か GetRemoteStream に渡されるない相対は絶対値ではなく、または、`pack://siteoforigin:,,,/`フォーム</xref:System.Uri>。"
  platform:
  - net462
- uid: System.Windows.Application.GetResourceStream(System.Uri)
  id: GetResourceStream(System.Uri)
  parent: System.Windows.Application
  langs:
  - csharp
  name: GetResourceStream(Uri)
  nameWithType: Application.GetResourceStream(Uri)
  fullName: System.Windows.Application.GetResourceStream(Uri)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "指定した位置にあるリソースのデータ ファイルのリソース ストリームを返す<xref:System.Uri>(を参照してください[WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル](~/add/includes/ajax-current-ext-md.md)).</xref:System.Uri>"
  remarks: "このメソッドはスレッド セーフではありません。"
  syntax:
    content: public static System.Windows.Resources.StreamResourceInfo GetResourceStream (Uri uriResource);
    parameters:
    - id: uriResource
      type: System.Uri
      description: "<xref:System.Uri>埋め込みリソースにマップされる</xref:System.Uri>。"
    return:
      type: System.Windows.Resources.StreamResourceInfo
      description: "A <xref href=&quot;System.Windows.Resources.StreamResourceInfo&quot;> </xref>指定<xref:System.Uri>.</xref:System.Uri>に配置されているリソースのデータ ファイルのリソース ストリームを格納しています。"
  overload: System.Windows.Application.GetResourceStream*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Uri>に渡される GetResourceStream が null です</xref:System.Uri>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Uri>か GetResourceStream に渡されるない相対は絶対値ではなく、または、`pack://application:,,,/`フォーム</xref:System.Uri>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref:System.Uri>に渡される GetResourceStream が見つかりません</xref:System.Uri>。"
  platform:
  - net462
- uid: System.Windows.Application.LoadCompleted
  id: LoadCompleted
  parent: System.Windows.Application
  langs:
  - csharp
  name: LoadCompleted
  nameWithType: Application.LoadCompleted
  fullName: System.Windows.Application.LoadCompleted
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "移動先アプリケーション内のナビゲーターによってコンテンツが読み込まれ、解析されて、レンダリングが開始されると発生します。"
  remarks: "ナビゲーターは、いずれか<xref:System.Windows.Navigation.NavigationWindow>または<xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>       <xref:System.Windows.Navigation.NavigationService.LoadCompleted?displayProperty=fullName>。</xref:System.Windows.Navigation.NavigationService.LoadCompleted?displayProperty=fullName>を参照してください。      > [!NOTE] > などの移動、コンテンツに対するイベントのリッスン、<xref:System.Windows.FrameworkElement.Loaded>でイベントを<xref:System.Windows.Controls.Page>移動のコンテンツのプロパティにアクセスする前にします</xref:System.Windows.Controls.Page></xref:System.Windows.FrameworkElement.Loaded>。"
  syntax:
    content: public event System.Windows.Navigation.LoadCompletedEventHandler LoadCompleted;
    return:
      type: System.Windows.Navigation.LoadCompletedEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.LoadComponent(System.Uri)
  id: LoadComponent(System.Uri)
  parent: System.Windows.Application
  langs:
  - csharp
  name: LoadComponent(Uri)
  nameWithType: Application.LoadComponent(Uri)
  fullName: System.Windows.Application.LoadComponent(Uri)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "読み込み、 [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)] 、指定した位置にあるファイル[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]のルート要素で指定されているオブジェクトのインスタンスに変換し、[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]ファイルです。"
  remarks: "ルート要素と同じ型を戻り値を明示的に変換する必要があります、[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]ファイル。       [!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]ファイルは、アプリケーション コード ファイルを使用できます (として構成されている、[!INCLUDE[TLA#tla_msbuild](~/add/includes/tlasharptla-msbuild-md.md)]ページ アイテム) やアプリケーション データ ファイル (リソース ファイル、コンテンツ ファイルは、またはサイトの元のファイルは、参照してください[WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル](~/add/includes/ajax-current-ext-md.md))。      > [!NOTE] > このメソッドはスレッド セーフではありません。"
  syntax:
    content: public static object LoadComponent (Uri resourceLocator);
    parameters:
    - id: resourceLocator
      type: System.Uri
      description: "A<xref:System.Uri>相対パスにマップされる[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]ファイル</xref:System.Uri>。"
    return:
      type: System.Object
      description: "XAML ファイルによって指定されるルート要素のインスタンスが読み込まれます。"
  overload: System.Windows.Application.LoadComponent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>resourceLocator</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>resourceLocator</code> is an absolute [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]."
  - type: System.Exception
    commentId: T:System.Exception
    description: "ファイルがない、[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]ファイル。"
  platform:
  - net462
- uid: System.Windows.Application.LoadComponent(System.Object,System.Uri)
  id: LoadComponent(System.Object,System.Uri)
  parent: System.Windows.Application
  langs:
  - csharp
  name: LoadComponent(Object,Uri)
  nameWithType: Application.LoadComponent(Object,Uri)
  fullName: System.Windows.Application.LoadComponent(Object,Uri)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "読み込み、 [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)] 、指定した位置にあるファイル[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]のルート要素で指定されているオブジェクトのインスタンスに変換し、[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]ファイル。"
  remarks: "[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]ファイルは、アプリケーション コード ファイルを使用できます (として構成されている、[!INCLUDE[TLA#tla_msbuild](~/add/includes/tlasharptla-msbuild-md.md)]ページ アイテム) やアプリケーション データ ファイル (リソース ファイル、コンテンツ ファイルは、またはサイトの元のファイルは、参照してください[WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル](~/add/includes/ajax-current-ext-md.md))。      > [!NOTE] > このメソッドはスレッド セーフではありません。"
  syntax:
    content: public static void LoadComponent (object component, Uri resourceLocator);
    parameters:
    - id: component
      type: System.Object
      description: "ルート要素と同じ型のオブジェクト、[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]ファイル。"
    - id: resourceLocator
      type: System.Uri
      description: "A<xref:System.Uri>相対パスにマップされる[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]ファイル</xref:System.Uri>。"
  overload: System.Windows.Application.LoadComponent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>resourceLocator</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>resourceLocator</code> is an absolute [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]."
  - type: System.Exception
    commentId: T:System.Exception
    description: "<code>component</code>型のルート要素と一致しませんが、[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]ファイル。"
  platform:
  - net462
- uid: System.Windows.Application.MainWindow
  id: MainWindow
  parent: System.Windows.Application
  langs:
  - csharp
  name: MainWindow
  nameWithType: Application.MainWindow
  fullName: System.Windows.Application.MainWindow
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはアプリケーションのメイン ウィンドウを設定します。"
  remarks: "最初の<xref:System.Windows.Window><xref:System.AppDomain>。</xref:System.AppDomain>でインスタンス化するオブジェクト</xref:System.Windows.Window>への参照を MainWindow が自動的に設定します。       メイン ウィンドウの別の割り当てを設定して、別のメイン ウィンドウを指定できます<xref:System.Windows.Application.Windows%2A>MainWindow プロパティ オブジェクト</xref:System.Windows.Application.Windows%2A>。       場合、<xref:System.Windows.Application.ShutdownMode%2A>のプロパティ、<xref:System.Windows.Application>にオブジェクトが設定されている<xref:System.Windows.ShutdownMode>、メイン ウィンドウを閉じると、アプリケーションをシャット ダウンする</xref:System.Windows.ShutdownMode></xref:System.Windows.Application></xref:System.Windows.Application.ShutdownMode%2A>。       MainWindow プロパティを設定することは[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]、アプリケーションのメイン ウィンドウは、設定によって生成されるウィンドウではない場合、<xref:System.Windows.Application.StartupUri%2A>プロパティ[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]</xref:System.Windows.Application.StartupUri%2A>。 2 つの制限、[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]アプローチは、: どちらかを指定することができます、 [!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]-のみ<xref:System.Windows.Window>または[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]-のみ<xref:System.Windows.Navigation.NavigationWindow>メイン ウィンドウとして</xref:System.Windows.Navigation.NavigationWindow></xref:System.Windows.Window>。      に設定する必要があります、<xref:System.Windows.UIElement.Visibility%2A>ウィンドウのプロパティを指定して、それ以外の場合に表示されません</xref:System.Windows.UIElement.Visibility%2A>。       最初に参照<xref:System.Windows.Window>インスタンス化されるオブジェクトが最初の項目としても追加、<xref:System.Windows.Application.Windows%2A>コレクションです</xref:System.Windows.Application.Windows%2A></xref:System.Windows.Window>。 MainWindow が、別の参照に設定したかどうかは<xref:System.Windows.Window>、内の項目の順序の中に、メイン ウィンドウへの参照を持つ項目の位置が変更される<xref:System.Windows.Application.Windows%2A>は変わりません</xref:System.Windows.Application.Windows%2A></xref:System.Windows.Window>。 そのため、常にメイン ウィンドウを使用して<xref:System.Windows.Application.Windows%2A>。</xref:System.Windows.Application.Windows%2A>の最初の項目ではなくメイン ウィンドウを参照してください。      > [!NOTE] > メイン ウィンドウがある場合、 <xref:System.Windows.Navigation.NavigationWindow>、 <xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Navigation.NavigationWindow></xref:System.Windows.Navigation.NavigationWindow> MainWindow の値をキャストする必要が、メンバー</xref:System.Windows.Navigation.NavigationWindow>へのアクセスを必要と</xref:System.Windows.Navigation.NavigationWindow>。   >> このプロパティは、作成したスレッドからのみ使用可能な<xref:System.Windows.Application>オブジェクト</xref:System.Windows.Application>。"
  example:
  - "The following example shows how to find the main application window.  \n  \n [!code-cs[ApplicationMainWindowSnippets#GetApplicationMainWindowCODE](~/add/codesnippet/csharp/ApplicationMainWindowSnippets.CSharp/App.xaml.cs#getapplicationmainwindowcode)]\n [!code-vb[ApplicationMainWindowSnippets#GetApplicationMainWindowCODE](~/add/codesnippet/visualbasic/applicationmainwindowsnippets/application.xaml.vb#getapplicationmainwindowcode)]  \n  \n The following example shows how to set MainWindow using [!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)].  \n  \n [!code-xml[ApplicationMainWindowSnippets#SetApplicationMainWindowXAML](~/add/codesnippet/xaml/ApplicationMainWindowSnippets.XAML/App.xaml#setapplicationmainwindowxaml)]  \n  \n The following example shows how to instantiate the MainWindow in code during application startup.  \n  \n [!code-cs[HOWTOWindowManagementSnippets#FirstWindowUsingCodeCODEBEHIND](~/add/codesnippet/csharp/HOWTOWindowManagementSnippets/App.xaml.cs#firstwindowusingcodecodebehind)]\n [!code-vb[HOWTOWindowManagementSnippets#FirstWindowUsingCodeCODEBEHIND](~/add/codesnippet/visualbasic/howtowindowmanagementsnippets/application.xaml.vb#firstwindowusingcodecodebehind)]"
  syntax:
    content: public System.Windows.Window MainWindow { get; set; }
    return:
      type: System.Windows.Window
      description: "A <xref href=&quot;System.Windows.Window&quot;> </xref>アプリケーションのメイン ウィンドウとして指定されています。"
  overload: System.Windows.Application.MainWindow*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "など、ブラウザーでホストされているアプリケーションから MainWindow が設定されている、[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]です。"
  platform:
  - net462
- uid: System.Windows.Application.Navigated
  id: Navigated
  parent: System.Windows.Application
  langs:
  - csharp
  name: Navigated
  nameWithType: Application.Navigated
  fullName: System.Windows.Application.Navigated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "可能性がありますが、完了していない読み込みは、アプリケーションのナビゲーターを移動先のコンテンツが見つかるとときに、発生します。"
  remarks: "ナビゲーターは、いずれか<xref:System.Windows.Navigation.NavigationWindow>または<xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>       <xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName>。</xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName>を参照してください。"
  syntax:
    content: public event System.Windows.Navigation.NavigatedEventHandler Navigated;
    return:
      type: System.Windows.Navigation.NavigatedEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.Navigating
  id: Navigating
  parent: System.Windows.Application
  langs:
  - csharp
  name: Navigating
  nameWithType: Application.Navigating
  fullName: System.Windows.Application.Navigating
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいナビゲーションは、アプリケーション内のナビゲーターによって要求されたときに発生します。"
  remarks: "ナビゲーターは、いずれか<xref:System.Windows.Navigation.NavigationWindow>または<xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>       <xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=fullName>。</xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=fullName>を参照してください。"
  syntax:
    content: public event System.Windows.Navigation.NavigatingCancelEventHandler Navigating;
    return:
      type: System.Windows.Navigation.NavigatingCancelEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.NavigationFailed
  id: NavigationFailed
  parent: System.Windows.Application
  langs:
  - csharp
  name: NavigationFailed
  nameWithType: Application.NavigationFailed
  fullName: System.Windows.Application.NavigationFailed
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "アプリケーションのナビゲーターは、要求されたコンテンツに移動するときにエラーが発生したときに発生します。"
  remarks: "ナビゲーターは、いずれか<xref:System.Windows.Navigation.NavigationWindow>または<xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>       <xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName>。</xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=fullName>を参照してください。"
  syntax:
    content: public event System.Windows.Navigation.NavigationFailedEventHandler NavigationFailed;
    return:
      type: System.Windows.Navigation.NavigationFailedEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.NavigationProgress
  id: NavigationProgress
  parent: System.Windows.Application
  langs:
  - csharp
  name: NavigationProgress
  nameWithType: Application.NavigationProgress
  fullName: System.Windows.Application.NavigationProgress
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ナビゲーション進行状況に関する情報を提供するアプリケーションでナビゲーターによって管理されているダウンロード中に定期的に発生します。"
  remarks: "ナビゲーターは、いずれか<xref:System.Windows.Navigation.NavigationWindow>または<xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>       <xref:System.Windows.Navigation.NavigationService.NavigationProgress?displayProperty=fullName>。</xref:System.Windows.Navigation.NavigationService.NavigationProgress?displayProperty=fullName>を参照してください。"
  syntax:
    content: public event System.Windows.Navigation.NavigationProgressEventHandler NavigationProgress;
    return:
      type: System.Windows.Navigation.NavigationProgressEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.NavigationStopped
  id: NavigationStopped
  parent: System.Windows.Application
  langs:
  - csharp
  name: NavigationStopped
  nameWithType: Application.NavigationStopped
  fullName: System.Windows.Application.NavigationStopped
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生したときに、 <xref uid=&quot;langword_csharp_StopLoading&quot; name=&quot;StopLoading&quot; href=&quot;&quot;> </xref>アプリケーションのナビゲーターのメソッドが呼び出されて、または新しいナビゲーションがナビゲーターによって要求された現在のナビゲーションが進行中はときにします。"
  remarks: "ナビゲーターは、いずれか<xref:System.Windows.Navigation.NavigationWindow>または<xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>       <xref:System.Windows.Navigation.NavigationService.NavigationStopped?displayProperty=fullName>.</xref:System.Windows.Navigation.NavigationService.NavigationStopped?displayProperty=fullName>を参照してください。"
  syntax:
    content: public event System.Windows.Navigation.NavigationStoppedEventHandler NavigationStopped;
    return:
      type: System.Windows.Navigation.NavigationStoppedEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnActivated(System.EventArgs)
  id: OnActivated(System.EventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnActivated(EventArgs)
  nameWithType: Application.OnActivated(EventArgs)
  fullName: System.Windows.Application.OnActivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.Activated&quot;> </xref>イベント。"
  remarks: "OnActivated を発生させる、<xref:System.Windows.Application.Activated>イベント</xref:System.Windows.Application.Activated>。       派生する型<xref:System.Windows.Application>OnActivated を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnActivated を呼び出す必要があります<xref:System.Windows.Application.Activated>発生する必要があります</xref:System.Windows.Application.Activated>。"
  syntax:
    content: protected virtual void OnActivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Windows.Application.OnActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnDeactivated(System.EventArgs)
  id: OnDeactivated(System.EventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnDeactivated(EventArgs)
  nameWithType: Application.OnDeactivated(EventArgs)
  fullName: System.Windows.Application.OnDeactivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.Deactivated&quot;> </xref>イベント。"
  remarks: "OnDeactivated を発生させる、<xref:System.Windows.Application.Deactivated>イベント</xref:System.Windows.Application.Deactivated>。       派生する型<xref:System.Windows.Application>OnDeactivated を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnDeactivated を呼び出す必要があります<xref:System.Windows.Application.Deactivated>を発生させる必要があります</xref:System.Windows.Application.Deactivated>。"
  syntax:
    content: protected virtual void OnDeactivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Windows.Application.OnDeactivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnExit(System.Windows.ExitEventArgs)
  id: OnExit(System.Windows.ExitEventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnExit(ExitEventArgs)
  nameWithType: Application.OnExit(ExitEventArgs)
  fullName: System.Windows.Application.OnExit(ExitEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.Exit&quot;> </xref>イベント。"
  remarks: "OnExit 発生、<xref:System.Windows.Application.Exit>イベント</xref:System.Windows.Application.Exit>。       派生する型<xref:System.Windows.Application>OnExit メソッドをオーバーライドする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnExit を呼び出す必要があります<xref:System.Windows.Application.Exit>を発生させる必要があります</xref:System.Windows.Application.Exit>。"
  syntax:
    content: protected virtual void OnExit (System.Windows.ExitEventArgs e);
    parameters:
    - id: e
      type: System.Windows.ExitEventArgs
      description: "<xref href=&quot;System.Windows.ExitEventArgs&quot;> </xref>イベント データを格納します。"
  overload: System.Windows.Application.OnExit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)
  id: OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnFragmentNavigation(FragmentNavigationEventArgs)
  nameWithType: Application.OnFragmentNavigation(FragmentNavigationEventArgs)
  fullName: System.Windows.Application.OnFragmentNavigation(FragmentNavigationEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.FragmentNavigation&quot;> </xref>イベント。"
  remarks: "OnFragmentNavigation を発生させる、<xref:System.Windows.Application.FragmentNavigation>イベント</xref:System.Windows.Application.FragmentNavigation>。       派生する型<xref:System.Windows.Application>OnFragmentNavigation を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnFragmentNavigation を呼び出す必要があります<xref:System.Windows.Application.FragmentNavigation>を発生させる必要があります</xref:System.Windows.Application.FragmentNavigation>。"
  syntax:
    content: protected virtual void OnFragmentNavigation (System.Windows.Navigation.FragmentNavigationEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Navigation.FragmentNavigationEventArgs
      description: "A <xref href=&quot;System.Windows.Navigation.FragmentNavigationEventArgs&quot;> </xref>イベント データを格納します。"
  overload: System.Windows.Application.OnFragmentNavigation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)
  id: OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnLoadCompleted(NavigationEventArgs)
  nameWithType: Application.OnLoadCompleted(NavigationEventArgs)
  fullName: System.Windows.Application.OnLoadCompleted(NavigationEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.LoadCompleted&quot;> </xref>イベント。"
  remarks: "OnLoadCompleted 発生、<xref:System.Windows.Application.LoadCompleted>イベント</xref:System.Windows.Application.LoadCompleted>。       派生する型<xref:System.Windows.Application>OnLoadCompleted を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnLoadCompleted を呼び出す必要があります<xref:System.Windows.Application.LoadCompleted>を発生させる必要があります</xref:System.Windows.Application.LoadCompleted>。"
  syntax:
    content: protected virtual void OnLoadCompleted (System.Windows.Navigation.NavigationEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Navigation.NavigationEventArgs
      description: "A <xref href=&quot;System.Windows.Navigation.NavigationEventArgs&quot;> </xref>イベント データを格納します。"
  overload: System.Windows.Application.OnLoadCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)
  id: OnNavigated(System.Windows.Navigation.NavigationEventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnNavigated(NavigationEventArgs)
  nameWithType: Application.OnNavigated(NavigationEventArgs)
  fullName: System.Windows.Application.OnNavigated(NavigationEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.Navigated&quot;> </xref>イベント。"
  remarks: "OnNavigated を発生させる、<xref:System.Windows.Application.Navigated>イベント</xref:System.Windows.Application.Navigated>。       派生する型<xref:System.Windows.Application>OnNavigated を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnNavigated を呼び出す必要があります<xref:System.Windows.Application.Navigated>を発生させる必要があります</xref:System.Windows.Application.Navigated>。"
  syntax:
    content: protected virtual void OnNavigated (System.Windows.Navigation.NavigationEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Navigation.NavigationEventArgs
      description: "A <xref href=&quot;System.Windows.Navigation.NavigationEventArgs&quot;> </xref>イベント データを格納します。"
  overload: System.Windows.Application.OnNavigated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)
  id: OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnNavigating(NavigatingCancelEventArgs)
  nameWithType: Application.OnNavigating(NavigatingCancelEventArgs)
  fullName: System.Windows.Application.OnNavigating(NavigatingCancelEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.Navigating&quot;> </xref>イベント。"
  remarks: "OnNavigating 発生、<xref:System.Windows.Application.Navigating>イベント</xref:System.Windows.Application.Navigating>。       派生する型<xref:System.Windows.Application>OnNavigating を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnNavigating を呼び出す必要があります<xref:System.Windows.Application.Navigating>を発生させる必要があります</xref:System.Windows.Application.Navigating>。"
  syntax:
    content: protected virtual void OnNavigating (System.Windows.Navigation.NavigatingCancelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Navigation.NavigatingCancelEventArgs
      description: "A <xref href=&quot;System.Windows.Navigation.NavigatingCancelEventArgs&quot;> </xref>イベント データを格納します。"
  overload: System.Windows.Application.OnNavigating*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)
  id: OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnNavigationFailed(NavigationFailedEventArgs)
  nameWithType: Application.OnNavigationFailed(NavigationFailedEventArgs)
  fullName: System.Windows.Application.OnNavigationFailed(NavigationFailedEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.NavigationFailed&quot;> </xref>イベント。"
  remarks: "OnNavigationFailed を発生させる、<xref:System.Windows.Application.NavigationFailed>イベント</xref:System.Windows.Application.NavigationFailed>。       派生する型<xref:System.Windows.Application>OnNavigationFailed を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnNavigationFailed を呼び出す必要があります<xref:System.Windows.Application.NavigationFailed>を発生させる必要があります</xref:System.Windows.Application.NavigationFailed>。"
  example:
  - "<xref:System.Windows.Application.OnFragmentNavigation%2A>  \n  \n <xref:System.Windows.Application.OnLoadCompleted%2A>  \n  \n <xref:System.Windows.Application.OnNavigating%2A>  \n  \n <xref:System.Windows.Application.OnNavigated%2A>  \n  \n <xref:System.Windows.Application.OnNavigationProgress%2A>  \n  \n <xref:System.Windows.Application.OnNavigationStopped%2A>"
  syntax:
    content: protected virtual void OnNavigationFailed (System.Windows.Navigation.NavigationFailedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Navigation.NavigationFailedEventArgs
      description: "A <xref href=&quot;System.Windows.Navigation.NavigationFailedEventArgs&quot;> </xref>イベント データを格納します。"
  overload: System.Windows.Application.OnNavigationFailed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)
  id: OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnNavigationProgress(NavigationProgressEventArgs)
  nameWithType: Application.OnNavigationProgress(NavigationProgressEventArgs)
  fullName: System.Windows.Application.OnNavigationProgress(NavigationProgressEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.NavigationProgress&quot;> </xref>イベント。"
  remarks: "OnNavigationProgress を発生させる、<xref:System.Windows.Application.NavigationProgress>イベント</xref:System.Windows.Application.NavigationProgress>。       派生する型<xref:System.Windows.Application>OnNavigationProgress を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、明示的に、場合、基底クラスで OnNavigationProgress を呼び出す必要があります<xref:System.Windows.Application.NavigationProgress>発生する必要があります</xref:System.Windows.Application.NavigationProgress>。"
  syntax:
    content: protected virtual void OnNavigationProgress (System.Windows.Navigation.NavigationProgressEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Navigation.NavigationProgressEventArgs
      description: "A <xref href=&quot;System.Windows.Navigation.NavigationProgressEventArgs&quot;> </xref>イベント データを格納します。"
  overload: System.Windows.Application.OnNavigationProgress*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)
  id: OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnNavigationStopped(NavigationEventArgs)
  nameWithType: Application.OnNavigationStopped(NavigationEventArgs)
  fullName: System.Windows.Application.OnNavigationStopped(NavigationEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.NavigationStopped&quot;> </xref>イベント。"
  remarks: "OnNavigationStopped を発生させる、<xref:System.Windows.Application.NavigationStopped>イベント</xref:System.Windows.Application.NavigationStopped>。       派生する型<xref:System.Windows.Application>OnNavigationStopped を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnNavigationStopped を呼び出す必要があります<xref:System.Windows.Application.NavigationStopped>を発生させる必要があります</xref:System.Windows.Application.NavigationStopped>。"
  syntax:
    content: protected virtual void OnNavigationStopped (System.Windows.Navigation.NavigationEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Navigation.NavigationEventArgs
      description: "A <xref href=&quot;System.Windows.Navigation.NavigationEventArgs&quot;> </xref>イベント データを格納します。"
  overload: System.Windows.Application.OnNavigationStopped*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)
  id: OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnSessionEnding(SessionEndingCancelEventArgs)
  nameWithType: Application.OnSessionEnding(SessionEndingCancelEventArgs)
  fullName: System.Windows.Application.OnSessionEnding(SessionEndingCancelEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.SessionEnding&quot;> </xref>イベント。"
  remarks: "OnSessionEnding を発生させる、<xref:System.Windows.Application.SessionEnding>イベント</xref:System.Windows.Application.SessionEnding>。       派生する型<xref:System.Windows.Application>OnSessionEnding を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnSessionEnding を呼び出す必要があります<xref:System.Windows.Application.SessionEnding>を発生させる必要があります</xref:System.Windows.Application.SessionEnding>。"
  syntax:
    content: protected virtual void OnSessionEnding (System.Windows.SessionEndingCancelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.SessionEndingCancelEventArgs
      description: "A <xref href=&quot;System.Windows.SessionEndingCancelEventArgs&quot;> </xref>イベント データを格納します。"
  overload: System.Windows.Application.OnSessionEnding*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)
  id: OnStartup(System.Windows.StartupEventArgs)
  parent: System.Windows.Application
  langs:
  - csharp
  name: OnStartup(StartupEventArgs)
  nameWithType: Application.OnStartup(StartupEventArgs)
  fullName: System.Windows.Application.OnStartup(StartupEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Application.Startup&quot;> </xref>イベント。"
  remarks: "OnStartup を発生させる、<xref:System.Windows.Application.Startup>イベント</xref:System.Windows.Application.Startup>。       派生する型<xref:System.Windows.Application>OnStartup を上書きする可能性があります</xref:System.Windows.Application>。 オーバーライドされたメソッドは、場合に、基底クラスでの OnStartup を呼び出す必要があります、<xref:System.Windows.Application.Startup>イベントを発生させる必要があります</xref:System.Windows.Application.Startup>。"
  syntax:
    content: protected virtual void OnStartup (System.Windows.StartupEventArgs e);
    parameters:
    - id: e
      type: System.Windows.StartupEventArgs
      description: "A <xref href=&quot;System.Windows.StartupEventArgs&quot;> </xref>イベント データを格納します。"
  overload: System.Windows.Application.OnStartup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.Properties
  id: Properties
  parent: System.Windows.Application
  langs:
  - csharp
  name: Properties
  nameWithType: Application.Properties
  fullName: System.Windows.Application.Properties
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "アプリケーション スコープのプロパティのコレクションを取得します。"
  remarks: "<xref:System.Windows.Application>アプリケーション スコープのプロパティの保存に使用できるプロパティを使用してディクショナリを公開します。</xref:System.Windows.Application> これによりのすべてのコードの間で状態を共有する、<xref:System.AppDomain>スレッド セーフである的に、状態コードを記述する必要はありません</xref:System.AppDomain>。       プロパティに格納されているプロパティは、返される適切な型に変換する必要があります。       プロパティ プロパティでは、スレッド セーフであるし、はどのスレッドから使用できます。"
  example:
  - "The following example shows how create and use an application-scope property using Properties.  \n  \n [!code-xml[ApplicationPropertiesSnippets#HandleStartupXAML](~/add/codesnippet/xaml/ApplicationPropertiesSnippets.CSharp/App.xaml#handlestartupxaml)]  \n  \n [!code-cs[ApplicationPropertiesSnippets#HandleStartupCODEBEHIND](~/add/codesnippet/csharp/ApplicationPropertiesSnippets.CSharp/App.xaml.cs#handlestartupcodebehind)]\n [!code-vb[ApplicationPropertiesSnippets#HandleStartupCODEBEHIND](~/add/codesnippet/visualbasic/applicationpropertiessnippets/application.xaml.vb#handlestartupcodebehind)]  \n  \n [!code-xml[ApplicationPropertiesSnippets#MainWindowGetPropertyXAML1](~/add/codesnippet/xaml/ApplicationPropertiesSnippets.CSharp/MainWindow.xaml#mainwindowgetpropertyxaml1)]  \n[!code-xml[ApplicationPropertiesSnippets#MainWindowGetPropertyXAML2](~/add/codesnippet/xaml/ApplicationPropertiesSnippets.CSharp/MainWindow.xaml#mainwindowgetpropertyxaml2)]  \n  \n [!code-cs[ApplicationPropertiesSnippets#MainWindowGetPropertyCODEBEHIND](~/add/codesnippet/csharp/ApplicationPropertiesSnippets.CSharp/MainWindow.xaml.cs#mainwindowgetpropertycodebehind)]\n [!code-vb[ApplicationPropertiesSnippets#MainWindowGetPropertyCODEBEHIND](~/add/codesnippet/visualbasic/applicationpropertiessnippets/mainwindow.xaml.vb#mainwindowgetpropertycodebehind)]"
  syntax:
    content: public System.Collections.IDictionary Properties { get; }
    return:
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>アプリケーション スコープのプロパティを格納します</xref:System.Collections.IDictionary>。"
  overload: System.Windows.Application.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.ResourceAssembly
  id: ResourceAssembly
  parent: System.Windows.Application
  langs:
  - csharp
  name: ResourceAssembly
  nameWithType: Application.ResourceAssembly
  fullName: System.Windows.Application.ResourceAssembly
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または設定、 <xref:System.Reflection.Assembly>、パックを提供する[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]内のリソースに対して、[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]アプリケーション</xref:System.Reflection.Assembly>。"
  remarks: "既定では、[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]から返される値によって識別されるエントリのアセンブリに対して実行時にリソースが解決される、<xref:System.Reflection.Assembly.GetEntryAssembly%2A>メソッド</xref:System.Reflection.Assembly.GetEntryAssembly%2A>。       入力アセンブリがによって返されるアセンブリ<xref:System.Reflection.Assembly.GetEntryAssembly%2A>し、次にある可能性があります:-既定のアプリケーション ドメインで実行可能アセンブリ</xref:System.Reflection.Assembly.GetEntryAssembly%2A>。      - <xref:System.AppDomain.ExecuteAssembly%2A>.</xref:System.AppDomain.ExecuteAssembly%2A>を呼び出すことによって実行される最初のアセンブリ       次の場合、ただし、[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]アセンブリは、入力アセンブリへの参照を取得できません: - アンマネージ (ネイティブ) アプリケーションのホスト、[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]アセンブリ。      は、マネージ アプリケーションのホスト、 [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] 、新しいアプリケーション ドメイン以外のメソッドを使用して<xref:System.AppDomain.ExecuteAssembly%2A>.</xref:System.AppDomain.ExecuteAssembly%2A>に読み込んでアセンブリ       このような場合の両方で<xref:System.Reflection.Assembly.GetEntryAssembly%2A>を返します`null`、および[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]アセンブリのリソースを解決することはできません</xref:System.Reflection.Assembly.GetEntryAssembly%2A>。 このような場合は、ResourceAssembly で設定できます、1 回だけ、アセンブリへの参照、リソースの解決に使用する必要があります。       ResourceAssembly のみ設定できます&1; 回の後に、リソース アセンブリが変更されること可能性は高くありませんので、[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]アセンブリが読み込まれています。      > [!NOTE] > 場合 ResourceAssembly を設定することはできません、[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]アセンブリは、入力アセンブリを検出できる — されているときに、<xref:System.Reflection.Assembly.GetEntryAssembly%2A>アセンブリへの参照を返しますのではなく`null`です</xref:System.Reflection.Assembly.GetEntryAssembly%2A>。       このプロパティは、スレッド セーフであるは任意のスレッドから使用できます。       ResourceAssembly は、.NET Framework version 3.5 で導入されました。  詳細については、次を参照してください。[バージョンおよび依存関係](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static System.Reflection.Assembly ResourceAssembly { get; set; }
    return:
      type: System.Reflection.Assembly
      description: "参照、 <xref:System.Reflection.Assembly>、パックを提供する[!INCLUDE[TLA#tla_uri#plural](~/add/includes/tlasharptla-urisharpplural-md.md)]内のリソースに対して、[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]アプリケーション</xref:System.Reflection.Assembly>。"
  overload: System.Windows.Application.ResourceAssembly*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "A[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]アプリケーションには、入力アセンブリまたは ResourceAssembly は既に設定されています。"
  platform:
  - net462
- uid: System.Windows.Application.Resources
  id: Resources
  parent: System.Windows.Application
  langs:
  - csharp
  name: Resources
  nameWithType: Application.Resources
  fullName: System.Windows.Application.Resources
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはスタイルとブラシなどのアプリケーション スコープのリソースのコレクションを設定します。"
  remarks: "Windows およびアプリケーションの要素間でリソースを共有するリソース プロパティを使用できます。 さらに、リソース プロパティがパスに含まれて、リソース参照は、次の順序で走査: 1。  2 の要素です。  Windows 3 です。  4 のリソース。  システムその結果、[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]要素は、アプリケーション スコープのリソースにバインドできます。 さらに、リソースが変更された場合、リソース システムにより、その要素の変更を反映するようにそれらのリソースにバインドされているプロパティが自動的に更新します。       アプリケーション スコープのリソースは、アプリケーション間で一貫性のあるテーマをサポートする簡単な方法を提供します。 テーマを簡単に作成できます[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]を使用して、`Application.Resources`タグ。 ただし、アプリケーションは、多数のテーマの要素を含むことが、複数のテーマをサポートしている場合ありますいずれかを使用してそれらを管理しやすい<xref:System.Windows.ResourceDictionary>各テーマのインスタンス</xref:System.Windows.ResourceDictionary>。 この方法でリソース プロパティを適切な<xref:System.Windows.ResourceDictionary>.</xref:System.Windows.ResourceDictionary>に設定して新しいテーマを適用できます。       2 つの考慮事項のリソースを使用する場合があります。 まず、ディクショナリ*キー*が、オブジェクトを設定およびプロパティの値 (文字列を使用するときに、キーが大文字小文字を区別であることに注意してください) を取得するときに正確に同じオブジェクト インスタンスを使用する必要があるためです。 2 番目、ディクショナリ*値*オブジェクトはプロパティの値を取得するときに、目的の型に値を変換する必要があります。       リソースは、スレッド セーフであるし、はどのスレッドから使用できます。"
  example:
  - "This example illustrates how to use [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)] together with application-scope resources to create a consistent visual appearance.  \n  \n [!code-xml[ApplicationResourcesSnippets#ResourcesPropertyXAML](~/add/codesnippet/xaml/ApplicationResourcesSnippets.XAML/App.xaml#resourcespropertyxaml)]  \n  \n [!code-xml[ApplicationResourcesSnippets#WindowBackgroundPropertyXAML1](~/add/codesnippet/xaml/ApplicationResourcesSnippets.XAML/MainWindow.xaml#windowbackgroundpropertyxaml1)]  \n[!code-xml[ApplicationResourcesSnippets#WindowBackgroundPropertyXAML2](~/add/codesnippet/xaml/ApplicationResourcesSnippets.XAML/MainWindow.xaml#windowbackgroundpropertyxaml2)]  \n  \n The following example shows how to set an application resource in code and XAML.  \n  \n [!code-vb[HOWTOApplicationModelSnippets#SetApplicationScopeResourceCODE](~/add/codesnippet/visualbasic/howtoapplicationmodelsnippets/applicationpropertiessnippet.xaml.vb#setapplicationscoperesourcecode)]\n [!code-cs[HOWTOApplicationModelSnippets#SetApplicationScopeResourceCODE](~/add/codesnippet/csharp/HOWTOApplicationModelSnippets/ApplicationPropertiesSnippet.xaml.cs#setapplicationscoperesourcecode)]  \n  \n [!code-xml[HOWTOApplicationModelSnippets#SetApplicationScopeResourceXAML](~/add/codesnippet/xaml/HOWTOApplicationModelSnippets/App.xaml#setapplicationscoperesourcexaml)]  \n  \n The following example shows how to get an application resource in code.  \n  \n [!code-vb[HOWTOApplicationModelSnippets#GetApplicationScopeResourceCODE](~/add/codesnippet/visualbasic/howtoapplicationmodelsnippets/applicationpropertiessnippet.xaml.vb#getapplicationscoperesourcecode)]\n [!code-cs[HOWTOApplicationModelSnippets#GetApplicationScopeResourceCODE](~/add/codesnippet/csharp/HOWTOApplicationModelSnippets/ApplicationPropertiesSnippet.xaml.cs#getapplicationscoperesourcecode)]"
  syntax:
    content: public System.Windows.ResourceDictionary Resources { get; set; }
    return:
      type: System.Windows.ResourceDictionary
      description: "A <xref href=&quot;System.Windows.ResourceDictionary&quot;> </xref>&0; 個以上のアプリケーション スコープのリソースを含むオブジェクトです。"
  overload: System.Windows.Application.Resources*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.Run
  id: Run
  parent: System.Windows.Application
  langs:
  - csharp
  name: Run()
  nameWithType: Application.Run()
  fullName: System.Windows.Application.Run()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "開始、[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]アプリケーションです。"
  remarks: "<xref:System.Windows.Application.Run%2A>開始するために呼び出される、[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]アプリケーションです。</xref:System.Windows.Application.Run%2A> 定義した場合、<xref:System.Windows.Application>マークアップ、またはマークアップと分離コードを使用して<xref:System.Windows.Application.Run%2A>が暗黙的に呼び出されます</xref:System.Windows.Application.Run%2A></xref:System.Windows.Application>。 ただし、<xref:System.Windows.Application>コードを使用する必要がありますを明示的に呼び出す<xref:System.Windows.Application.Run%2A>.</xref:System.Windows.Application.Run%2A></xref:System.Windows.Application>を定義する場合       ときに<xref:System.Windows.Application.Run%2A>が呼び出されると、<xref:System.Windows.Application>新しいアタッチ<xref:System.Windows.Threading.Dispatcher>インスタンスを[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]スレッド</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Application></xref:System.Windows.Application.Run%2A>。 次に、<xref:System.Windows.Threading.Dispatcher>オブジェクトの<xref:System.Windows.Threading.Dispatcher.Run%2A>メソッドは、windows メッセージを処理するメッセージ ポンプを開始します</xref:System.Windows.Threading.Dispatcher.Run%2A></xref:System.Windows.Threading.Dispatcher>。 最後に、<xref:System.Windows.Threading.Dispatcher>オブジェクトの呼び出し、<xref:System.Windows.Application>オブジェクトの<xref:System.Windows.Application.OnStartup%2A>メソッドを<xref:System.Windows.Application.Startup>イベント</xref:System.Windows.Application.Startup></xref:System.Windows.Application.OnStartup%2A></xref:System.Windows.Application></xref:System.Windows.Threading.Dispatcher>。 その結果、アプリケーションの実行モデルが確立されたらを処理する時間<xref:System.Windows.Application.Startup>、アプリケーションが実行されている時点</xref:System.Windows.Application.Startup>。       アプリケーションの停止時に実行して<xref:System.Windows.Application.Shutdown%2A>が呼び出されますの値、<xref:System.Windows.Application.ShutdownMode%2A>タイミングを決定するプロパティ<xref:System.Windows.Application.Shutdown%2A>が呼び出され、自動的に行われますか、明示的にする必要があるかどうかは、それを呼び出す</xref:System.Windows.Application.Shutdown%2A></xref:System.Windows.Application.ShutdownMode%2A></xref:System.Windows.Application.Shutdown%2A>。       <xref:System.Windows.Application.Run%2A>作成したスレッドからのみ呼び出すことができます、<xref:System.Windows.Application>オブジェクト</xref:System.Windows.Application>。</xref:System.Windows.Application.Run%2A> また、<xref:System.Windows.Application.Run%2A>から呼び出すことはできません、 [!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]</xref:System.Windows.Application.Run%2A> 。"
  example:
  - "The following example shows an application that uses a custom <xref:System.Windows.Application> and must therefore explicitly call <xref:System.Windows.Application.Run%2A>.  \n  \n [!code-vb[ApplicationRunSnippets#CustomEntryPointAndRunCODE](~/add/codesnippet/visualbasic/applicationrunsnippets/app.vb#customentrypointandruncode)]\n [!code-cs[ApplicationRunSnippets#CustomEntryPointAndRunCODE](~/add/codesnippet/csharp/ApplicationRunSnippets.CSharp/App.cs#customentrypointandruncode)]"
  syntax:
    content: public int Run ();
    parameters: []
    return:
      type: System.Int32
      description: "<xref:System.Int32>アプリケーションのシャット ダウン時に、オペレーティング システムに返されるアプリケーションの終了コード</xref:System.Int32>。 既定では、終了コード値は 0 です。"
  overload: System.Windows.Application.Run*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "実行がブラウザーによってホストされるアプリケーションから呼び出されます (たとえば、 [!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)])。"
  platform:
  - net462
- uid: System.Windows.Application.Run(System.Windows.Window)
  id: Run(System.Windows.Window)
  parent: System.Windows.Application
  langs:
  - csharp
  name: Run(Window)
  nameWithType: Application.Run(Window)
  fullName: System.Windows.Application.Run(Window)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "開始、[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]アプリケーションし、指定されたウィンドウを開きます。"
  remarks: "このオーバー ロードを拡張、<xref:System.Windows.Application.Run%2A>をアプリケーションの実行が開始した後に指定されたウィンドウを開くメソッドです</xref:System.Windows.Application.Run%2A>。       コードを定義する場合<xref:System.Windows.Application>を実行開始時にウィンドウを開く、実行を明示的に呼び出します</xref:System.Windows.Application>。       作成する場合、<xref:System.Windows.Application>マークアップ、またはマークアップと分離コードを使用して、自動的にウィンドウを開き、次の手法のいずれかを使用中に: - <xref:System.Windows.Application.StartupUri%2A>.</xref:System.Windows.Application.StartupUri%2A>を設定することによって宣言によって、</xref:System.Windows.Application>      、 <xref:System.Windows.Application.Startup>。</xref:System.Windows.Application.Startup>を処理することによってプログラムでは、"
  example:
  - "The following example shows an application with a manually-created static entry point method that instantiates <xref:System.Windows.Application>, before calling <xref:System.Windows.Application.Run%2A>.  \n  \n [!code-cs[ApplicationRunOL1Snippets#CustomEntryPointAndRunOL1CODE](~/add/codesnippet/csharp/ApplicationRunOL1Snippets.CSharp/App.cs#customentrypointandrunol1code)]\n [!code-vb[ApplicationRunOL1Snippets#CustomEntryPointAndRunOL1CODE](~/add/codesnippet/visualbasic/applicationrunol1snippets/app.vb#customentrypointandrunol1code)]"
  syntax:
    content: public int Run (System.Windows.Window window);
    parameters:
    - id: window
      type: System.Windows.Window
      description: "A <xref href=&quot;System.Windows.Window&quot;> </xref>は、アプリケーションの起動時に自動的と開きます。"
    return:
      type: System.Int32
      description: "<xref:System.Int32>アプリケーションのシャット ダウン時に、オペレーティング システムに返されるアプリケーションの終了コード</xref:System.Int32>。 既定では、終了コード値は 0 です。"
  overload: System.Windows.Application.Run*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Windows.Application.Run*>ブラウザーによってホストされるアプリケーションから呼び出されます (たとえば、 [!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)])。</xref:System.Windows.Application.Run*>"
  platform:
  - net462
- uid: System.Windows.Application.SessionEnding
  id: SessionEnding
  parent: System.Windows.Application
  langs:
  - csharp
  name: SessionEnding
  nameWithType: Application.SessionEnding
  fullName: System.Windows.Application.SessionEnding
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ユーザーが終了したときに発生、[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]セッションをログオフするか、オペレーティング システムのシャット ダウンします。"
  remarks: "既定では、アプリケーションのシャット ダウン、[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]セッション終了すると、ユーザーがログオフまたはシャット ダウン時に発生します。 この場合、[!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)]各アプリケーションをシャット ダウンを要求します。 ただしは、アプリケーションがシャット ダウンこのエラーが発生する準備ができていない可能性があります。 たとえば、アプリケーションには、実行時間の長い操作中または不整合な状態であるデータがあります。 これらの状況で、セッションの終了を防ぐことが望ましい場合がありますしてセッションを終了させるかどうかを決定するオプションをユーザーに許可するが望ましい場合があります。       SessionEnding イベントを処理することによって、セッションの終了時に検出できます。 アプリケーションは、セッションの終了を防ぐ必要がある場合、<xref:System.Windows.SessionEndingCancelEventArgs>イベント ハンドラーに渡される引数を公開、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>設定した`true`(既定値は`false`).</xref:System.ComponentModel.CancelEventArgs.Cancel%2A> </xref:System.Windows.SessionEndingCancelEventArgs>       SessionEnding が処理される、または取り消されてなしで処理される場合<xref:System.Windows.Application.Shutdown%2A>が呼び出されたと<xref:System.Windows.Application.Exit>イベントが発生します</xref:System.Windows.Application.Exit></xref:System.Windows.Application.Shutdown%2A>。       詳細については、セッションが終了する理由を取得するアプリケーションを調査できます<xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A>の&1; つである、<xref:System.Windows.ReasonSessionEnding>値 (<xref:System.Windows.ReasonSessionEnding>と<xref:System.Windows.ReasonSessionEnding>).</xref:System.Windows.ReasonSessionEnding> </xref:System.Windows.ReasonSessionEnding> </xref:System.Windows.ReasonSessionEnding> </xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A>       SessionEnding はコンソール アプリケーションでは発生しません。       作成したスレッドでのみ SessionEnding が発生した、<xref:System.Windows.Application>オブジェクト</xref:System.Windows.Application>。       SessionEnding は発生しません[!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)]です。"
  example:
  - "The following example demonstrates how to handle the SessionEnding event and allow the user to cancel it.  \n  \n [!code-xml[ApplicationSessionEndingSnippets#HandlingSessionEndingXAML](~/add/codesnippet/xaml/ApplicationSessionEndingSnippets.CSharp/App.xaml#handlingsessionendingxaml)]  \n  \n [!code-vb[ApplicationSessionEndingSnippets#HandlingSessionEndingCODEBEHIND](~/add/codesnippet/visualbasic/applicationsessionendingsnippets/application.xaml.vb#handlingsessionendingcodebehind)]\n [!code-cs[ApplicationSessionEndingSnippets#HandlingSessionEndingCODEBEHIND](~/add/codesnippet/csharp/ApplicationSessionEndingSnippets.CSharp/App.xaml.cs#handlingsessionendingcodebehind)]"
  syntax:
    content: public event System.Windows.SessionEndingCancelEventHandler SessionEnding;
    return:
      type: System.Windows.SessionEndingCancelEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.SetCookie(System.Uri,System.String)
  id: SetCookie(System.Uri,System.String)
  parent: System.Windows.Application
  langs:
  - csharp
  name: SetCookie(Uri,String)
  nameWithType: Application.SetCookie(Uri,String)
  fullName: System.Windows.Application.SetCookie(Uri,String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "<xref:System.Uri>。</xref:System.Uri>で指定された場所のクッキーを作成します。"
  remarks: "Cookie とは、アプリケーションのセッション (セッション cookie) 中、またはアプリケーション セッション (永続的な cookie) 間でクライアント コンピューターで、アプリケーションで格納できるデータの任意の部分です。 SetCookie を呼び出すことによって、両方の種類の cookie を作成できます。       Cookie のデータは通常、次の形式で名前/値ペアの形式を取ります:`Name=Value`と共に SetCookie にこの形式の文字列を渡す、 <xref:System.Uri>cookie を設定する場所 (通常は、アプリケーション ドメイン).</xref:System.Uri>       Cookie とは、セッションの cookie、または永続的な cookie かどうかは、SetCookie に渡すクッキー文字列に有効期限日が含まれているかどうかによって異なります。 セッション cookie の文字列では、有効期限日は含まれません。 永続的な cookie の文字列は、次の形式にする必要があります:`NAME=VALUE; expires=DAY, DD-MMM-YYYY HH:MM:SS GMT`永続的な cookie が現在格納されている[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]期限が切れるまで、削除された場合に、インストールのインターネット一時ファイル フォルダーです。 アプリケーションから永続的な cookie を削除するには、過去の日付/時刻値に、有効期限を設定します。       クッキーの概要については[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]を参照してください[ナビゲーション概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static void SetCookie (Uri uri, string value);
    parameters:
    - id: uri
      type: System.Uri
      description: "<xref:System.Uri>Cookie の作成対象となる場所を指定します</xref:System.Uri>。"
    - id: value
      type: System.String
      description: "<xref:System.String>Cookie のデータを格納している</xref:System.String>。"
  overload: System.Windows.Application.SetCookie*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "A[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]によってエラーが発生しました、 <xref uid=&quot;langword_csharp_InternetSetCookie&quot; name=&quot;InternetSetCookie&quot; href=&quot;&quot;> </xref> (SetCookie によって呼び出される) 関数、指定された cookie を作成する際に問題が発生した場合。"
  platform:
  - net462
- uid: System.Windows.Application.Shutdown
  id: Shutdown
  parent: System.Windows.Application
  langs:
  - csharp
  name: Shutdown()
  nameWithType: Application.Shutdown()
  fullName: System.Windows.Application.Shutdown()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "アプリケーションを終了します。"
  remarks: "シャット ダウンが呼び出されると、アプリケーションが実行を停止します。 処理することができます、<xref:System.Windows.Application.Exit>イベント、アプリケーションが実行を停止しようとする、適切な処理を実行するタイミングを検出します</xref:System.Windows.Application.Exit>。       シャット ダウンは、暗黙的にによって呼び出されます[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]次の状況で:: <xref:System.Windows.Application.ShutdownMode%2A> <xref:System.Windows.ShutdownMode>。</xref:System.Windows.ShutdownMode>に設定されている</xref:System.Windows.Application.ShutdownMode%2A>。      - <xref:System.Windows.Application.ShutdownMode%2A> <xref:System.Windows.ShutdownMode>.</xref:System.Windows.ShutdownMode>に設定されています。</xref:System.Windows.Application.ShutdownMode%2A>      -ユーザーがセッションを終了する および<xref:System.Windows.Application.SessionEnding>イベントがハンドルされていないとき、またはキャンセルせずに処理します</xref:System.Windows.Application.SessionEnding>。       シャット ダウンを明示的に呼び出すことにより、アプリケーションをシャット ダウンに関係なく、<xref:System.Windows.Application.ShutdownMode%2A>設定</xref:System.Windows.Application.ShutdownMode%2A>。 ただし場合、<xref:System.Windows.Application.ShutdownMode%2A>に設定されている<xref:System.Windows.ShutdownMode>、アプリケーションのシャット ダウンをシャット ダウンを呼び出す必要があります</xref:System.Windows.ShutdownMode></xref:System.Windows.Application.ShutdownMode%2A>。      > [!IMPORTANT] > ときにシャット ダウンが呼び出されると、かどうかに関係なく、アプリケーションはシャット ダウン、 <xref:System.Windows.Window.Closing>、開いているウィンドウのイベントが取り消されました</xref:System.Windows.Window.Closing>。       このメソッドは、作成したスレッドからのみ呼び出すことが、<xref:System.Windows.Application>オブジェクト</xref:System.Windows.Application>。"
  syntax:
    content: public void Shutdown ();
    parameters: []
  overload: System.Windows.Application.Shutdown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.Shutdown(System.Int32)
  id: Shutdown(System.Int32)
  parent: System.Windows.Application
  langs:
  - csharp
  name: Shutdown(Int32)
  nameWithType: Application.Shutdown(Int32)
  fullName: System.Windows.Application.Shutdown(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "オペレーティング システムに指定した終了コードを返すアプリケーションを終了します。"
  remarks: "処理することができます、<xref:System.Windows.Application.Exit>終了コードを設定するイベントです</xref:System.Windows.Application.Exit>。 ただし、明示的に呼び出す場合<xref:System.Windows.Application.Shutdown%2A>、および処理する<xref:System.Windows.Application.Exit>だけで、終了コードを設定するに呼び出せるシャット ダウン代わりにします</xref:System.Windows.Application.Exit></xref:System.Windows.Application.Shutdown%2A>。       このメソッドは、作成したスレッドからのみ呼び出すことが、<xref:System.Windows.Application>オブジェクト</xref:System.Windows.Application>。"
  syntax:
    content: public void Shutdown (int exitCode);
    parameters:
    - id: exitCode
      type: System.Int32
      description: "アプリケーションの整数の終了コード。 既定の終了コードは 0 です。"
  overload: System.Windows.Application.Shutdown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.ShutdownMode
  id: ShutdownMode
  parent: System.Windows.Application
  langs:
  - csharp
  name: ShutdownMode
  nameWithType: Application.ShutdownMode
  fullName: System.Windows.Application.ShutdownMode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または設定の原因となる条件、<xref:System.Windows.Application.Shutdown*>に呼び出されるメソッド</xref:System.Windows.Application.Shutdown*>。"
  remarks: "アプリケーションが停止される場合にのみを実行している、<xref:System.Windows.Application.Shutdown%2A>アプリケーションのメソッドが呼び出されます</xref:System.Windows.Application.Shutdown%2A>。 シャット ダウンは、暗黙的または明示的に、ShutdownMode プロパティの値で指定したとおりに発生します。       ShutdownMode を設定すると<xref:System.Windows.ShutdownMode>、[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]暗黙的に呼び出す<xref:System.Windows.Application.Shutdown%2A>アプリケーションの最後のウィンドウが閉じたときに、メイン ウィンドウとして、現在インスタンス化されたウィンドウが設定されている場合でも (を参照してください<xref:System.Windows.Application.MainWindow%2A>).</xref:System.Windows.Application.MainWindow%2A> </xref:System.Windows.Application.Shutdown%2A> </xref:System.Windows.ShutdownMode>       ShutdownMode<xref:System.Windows.ShutdownMode>により[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]を暗黙的に呼び出す<xref:System.Windows.Application.Shutdown%2A>ときに、<xref:System.Windows.Application.MainWindow%2A>閉じると、その他のウィンドウが現在開いている場合でも</xref:System.Windows.Application.MainWindow%2A></xref:System.Windows.Application.Shutdown%2A></xref:System.Windows.ShutdownMode>。       一部のアプリケーションの有効期間は、メイン ウィンドウまたは最後のウィンドウが閉じるか、またはできない可能性があります windows に依存するすべての場合に依存できない可能性があります。 このようなシナリオに ShutdownMode プロパティを設定する必要があります<xref:System.Windows.ShutdownMode>、がありますが、明示的な<xref:System.Windows.Application.Shutdown%2A>アプリケーションを停止するメソッドの呼び出し。</xref:System.Windows.Application.Shutdown%2A> </xref:System.Windows.ShutdownMode> 。 それ以外の場合、アプリケーションは引き続きバック グラウンドで実行されます。       ShutdownMode を宣言して構成できます[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]またはプログラムによってコード。       このプロパティは、作成したスレッドからのみ使用可能な<xref:System.Windows.Application>オブジェクト</xref:System.Windows.Application>。"
  example:
  - "The following example shows how to configure ShutdownMode to specify that an application must be closed explicitly.  \n  \n [!code-xml[ApplicationShutdownModeSnippets#SetShutdownModeXAML](~/add/codesnippet/xaml/ApplicationShutdownModeSnippets.XAML/App.xaml#setshutdownmodexaml)]"
  syntax:
    content: public System.Windows.ShutdownMode ShutdownMode { get; set; }
    return:
      type: System.Windows.ShutdownMode
      description: "A <xref href=&quot;System.Windows.ShutdownMode&quot;> </xref>列挙値。 既定値は<xref href=&quot;System.Windows.ShutdownMode&quot;></xref>です。"
  overload: System.Windows.Application.ShutdownMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.Startup
  id: Startup
  parent: System.Windows.Application
  langs:
  - csharp
  name: Startup
  nameWithType: Application.Startup
  fullName: System.Windows.Application.Startup
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生したときに、<xref:System.Windows.Application.Run*>のメソッド、 <xref href=&quot;System.Windows.Application&quot;> </xref>オブジェクトが呼び出されます</xref:System.Windows.Application.Run*>。"
  remarks: "一般的な[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]など、開始時に、アプリケーションは、さまざまな初期化タスクを実行可能性があります:-コマンド ライン パラメーターを処理します。      メイン ウィンドウを開きます。      アプリケーション スコープのリソースを初期化します。      アプリケーション スコープのプロパティを初期化します。       メイン ウィンドウとアプリケーション スコープのリソースを使用して宣言によって指定できます[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)](<xref:System.Windows.Application.StartupUri%2A>と<xref:System.Windows.Application.Resources%2A>、それぞれ).</xref:System.Windows.Application.Resources%2A> </xref:System.Windows.Application.StartupUri%2A> 場合によっては、ただし、リソースや、アプリケーションのメイン ウィンドウできますのみするプログラムで実行時に決定します。 さらに、アプリケーション スコープのプロパティとコマンド ライン パラメーターのみするプログラムにより使用できます。 プログラムによる初期化を次を含む、スタートアップ イベントを処理することによって実行できます: - 取得およびから使用できるコマンド ライン パラメーターを処理、<xref:System.Windows.StartupEventArgs.Args%2A>のプロパティ、<xref:System.Windows.StartupEventArgs>スタートアップ イベント ハンドラーに渡されるクラス</xref:System.Windows.StartupEventArgs></xref:System.Windows.StartupEventArgs.Args%2A>。      -アプリケーション スコープのリソースを使用して初期化、<xref:System.Windows.Application.Resources%2A>プロパティ</xref:System.Windows.Application.Resources%2A>。      -アプリケーション スコープのプロパティを使用して初期化、<xref:System.Windows.Application.Properties%2A>プロパティ</xref:System.Windows.Application.Properties%2A>。      インスタンスを作成し、1 つ (以上) のウィンドウを表示します。      > [!NOTE] > コマンド ライン パラメーターは、静的なを呼び出すことによって取得することも<xref:System.Environment.GetCommandLineArgs%2A>方法、<xref:System.Environment>オブジェクト</xref:System.Environment></xref:System.Environment.GetCommandLineArgs%2A>。 ただし、<xref:System.Environment.GetCommandLineArgs%2A>を実行する完全な信頼が必要です</xref:System.Environment.GetCommandLineArgs%2A>。       設定した場合<xref:System.Windows.Application.StartupUri%2A>を使用して[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]、作成されるメイン ウィンドウからは使用できないか、<xref:System.Windows.Application.MainWindow%2A>プロパティまたは<xref:System.Windows.Application.Windows%2A>のプロパティ、<xref:System.Windows.Application>スタートアップ イベントが処理された後までオブジェクトします</xref:System.Windows.Application></xref:System.Windows.Application.Windows%2A></xref:System.Windows.Application.MainWindow%2A></xref:System.Windows.Application.StartupUri%2A>。 起動中にメイン ウィンドウへのアクセスを必要がある場合は、スタートアップ イベント ハンドラーから新しいウィンドウ オブジェクトを手動で作成する必要があります。      > [!NOTE] >、アプリケーションで使用する場合<xref:System.Net.AuthenticationManager.CredentialPolicy%2A>ポリシーを指定する、資格情報を設定する必要があります<xref:System.Net.AuthenticationManager.CredentialPolicy%2A>スタートアップが発生した、それ以外の[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]設定に既定の内部ポリシーに直接スタートアップ イベントが発生した後。</xref:System.Net.AuthenticationManager.CredentialPolicy%2A> </xref:System.Net.AuthenticationManager.CredentialPolicy%2A> 。       スタートアップ イベント ハンドラーに渡されるコマンドライン引数と同じではない、[!INCLUDE[TLA#tla_url](~/add/includes/tlasharptla-url-md.md)]クエリ文字列パラメーターに渡される、[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]です。"
  example:
  - "The following example shows how to acquire and process command-line options from a standalone application. If the **/StartMinimized** command-line parameter was provided, the application opens the main window in a minimized state.  \n  \n [!code-xml[ApplicationStartupSnippets#HandleStartupXAML](~/add/codesnippet/xaml/ApplicationStartupSnippets.CSharp/App.xaml#handlestartupxaml)]  \n  \n [!code-cs[ApplicationStartupSnippets#HandleStartupCODEBEHIND](~/add/codesnippet/csharp/ApplicationStartupSnippets.CSharp/App.xaml.cs#handlestartupcodebehind)]\n [!code-vb[ApplicationStartupSnippets#HandleStartupCODEBEHIND](~/add/codesnippet/visualbasic/applicationstartupsnippets/application.xaml.vb#handlestartupcodebehind)]  \n  \n [!INCLUDE[TLA#tla_xbap#plural](~/add/includes/ajax-current-ext-md.md)] cannot retrieve and process command-line arguments because they are launched with [!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)] deployment (see [Deploying a WPF Application (WPF)](~/add/includes/ajax-current-ext-md.md)). However, they can retrieve and process query string parameters from the URLs that are used to launch them."
  syntax:
    content: public event System.Windows.StartupEventHandler Startup;
    return:
      type: System.Windows.StartupEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.StartupUri
  id: StartupUri
  parent: System.Windows.Application
  langs:
  - csharp
  name: StartupUri
  nameWithType: Application.StartupUri
  fullName: System.Windows.Application.StartupUri
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または設定、[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]をアプリケーションの起動時に自動的に表示します。"
  remarks: "自動的に読み込む StartupUri を使用することができます、[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]リソース アプリケーションの起動時にします。       次の表は、種類の[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]読み込むことができるリソースには、開かれたウィンドウの種類と、StartupUri として設定できます。 これらのリソース アプリケーションの種類。      |型 |ウィンドウ |アプリケーションの種類 |  |----------|------------|----------------------|  |<xref:System.Windows.Window>|<xref:System.Windows.Window>|スタンドアロンのみ |  |<xref:System.Windows.Navigation.NavigationWindow>|<xref:System.Windows.Navigation.NavigationWindow>|スタンドアロンのみ |  |<xref:System.Windows.Controls.Page>|<xref:System.Windows.Navigation.NavigationWindow>|スタンドアロン/ブラウザーでホストされる |  |<xref:System.Windows.Controls.UserControl>|<xref:System.Windows.Navigation.NavigationWindow>|スタンドアロン/ブラウザーでホストされる |  |<xref:System.Windows.Documents.FlowDocument>|<xref:System.Windows.Navigation.NavigationWindow>|スタンドアロン/ブラウザーでホストされる |  |<xref:System.Windows.Navigation.PageFunction%601>|<xref:System.Windows.Navigation.NavigationWindow>|スタンドアロン/ブラウザーでホストされる |      宣言的に、StartupUri プロパティを設定する通常、 [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]</xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Navigation.PageFunction%601> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Controls.UserControl> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Controls.Page> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Window> </xref:System.Windows.Window> 。 ただし、StartupUri をプログラムに設定できますからこのような<xref:System.Windows.Application.Startup>のみの読み込みを行える、必要なアプリケーションの場合に便利ですが、イベント ハンドラー[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]実行時にリソース</xref:System.Windows.Application.Startup>。 アプリケーションが場合、そのリソースを読み込むために実行時まで待つことがありますなどの名前、[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]リソースが構成ファイルに格納されています。       宣言的 StartupUri を設定するかどうか、またはプログラムでは、対応する[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]までリソースが読み込まれていない後、<xref:System.Windows.Application.Startup>イベントを処理します</xref:System.Windows.Application.Startup>。 その結果はアクセスできませんされたウィンドウをいずれかから、<xref:System.Windows.Application.Windows%2A>プロパティまたは<xref:System.Windows.Application.MainWindow%2A><xref:System.Windows.Application.Startup>。</xref:System.Windows.Application.Startup>を処理するときにプロパティ</xref:System.Windows.Application.MainWindow%2A></xref:System.Windows.Application.Windows%2A>"
  syntax:
    content: public Uri StartupUri { get; set; }
    return:
      type: System.Uri
      description: "A<xref:System.Uri>を参照する、[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]は、アプリケーションの起動時に自動的に開きます</xref:System.Uri>。"
  overload: System.Windows.Application.StartupUri*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "StartupUri は、値は null に設定されます。"
  platform:
  - net462
- uid: System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  id: System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  isEii: true
  parent: System.Windows.Application
  langs:
  - csharp
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  nameWithType: Application.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.Application.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "かどうか、指定したアンビエント プロパティが使用可能な現在のスコープを照会します。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Windows.Application>にインスタンスをキャスト、<xref:System.Windows.Markup.IQueryAmbient>インターフェイス</xref:System.Windows.Markup.IQueryAmbient></xref:System.Windows.Application>。"
  syntax:
    content: bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "要求されたアンビエント プロパティの名前。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要求されたアンビエント プロパティがある場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.TryFindResource(System.Object)
  id: TryFindResource(System.Object)
  parent: System.Windows.Application
  langs:
  - csharp
  name: TryFindResource(Object)
  nameWithType: Application.TryFindResource(Object)
  fullName: System.Windows.Application.TryFindResource(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "指定したリソースを検索します。"
  remarks: "TryFindResource は、アプリケーション スコープの指定されたリソースのリソースでは、まずします。 アプリケーション スコープのリソースで管理されて<xref:System.Windows.Application>から公開されると、<xref:System.Windows.Application.Resources%2A>プロパティ</xref:System.Windows.Application.Resources%2A></xref:System.Windows.Application>。 アプリケーション スコープのリソースのセットに指定されたリソースが見つからない場合 TryFindResource し、次を検索、システム リソースです。 システム リソースは、シェル リソースが、ユーザーが定義されているし、色、フォント、およびシェル構成が含まれます。 これらは、 <xref:System.Windows.SystemColors>、 <xref:System.Windows.SystemFonts>、および<xref:System.Windows.SystemParameters>型をそれぞれ、静的なプロパティです</xref:System.Windows.SystemParameters></xref:System.Windows.SystemFonts></xref:System.Windows.SystemColors>。 TryFindResource を使用すると、それらを取得して、これらの型も公開 TryFindResource; に渡されるように設計されているリソースのキー プロパティたとえば、 <xref:System.Windows.SystemParameters.IconWidthKey%2A>。</xref:System.Windows.SystemParameters.IconWidthKey%2A>       TryFindResource オブジェクトを返すために、リソースが見つかった場合に、適切な型に返される値をキャストする必要があります。       このメソッドはスレッド セーフであるため、任意のスレッドから呼び出すことができます。"
  example:
  - "The following example shows how to use TryFindResource to acquire a resource.  \n  \n [!code-xml[ApplicationTryFindResourceSnippets#ApplicationCallTryFindResourceXAML](~/add/codesnippet/xaml/ApplicationTryFindResourceSnippets/App.xaml#applicationcalltryfindresourcexaml)]  \n  \n [!code-cs[ApplicationTryFindResourceSnippets#ApplicationCallTryFindResourceCODEBEHIND1](~/add/codesnippet/csharp/ApplicationTryFindResourceSnippets/MainWindow.xaml.cs#applicationcalltryfindresourcecodebehind1)]\n [!code-vb[ApplicationTryFindResourceSnippets#ApplicationCallTryFindResourceCODEBEHIND1](~/add/codesnippet/visualbasic/applicationtryfindresourcesnippets/mainwindow.xaml.vb#applicationcalltryfindresourcecodebehind1)]  \n[!code-cs[ApplicationTryFindResourceSnippets#ApplicationCallTryFindResourceCODEBEHIND2](~/add/codesnippet/csharp/ApplicationTryFindResourceSnippets/MainWindow.xaml.cs#applicationcalltryfindresourcecodebehind2)]\n[!code-vb[ApplicationTryFindResourceSnippets#ApplicationCallTryFindResourceCODEBEHIND2](~/add/codesnippet/visualbasic/applicationtryfindresourcesnippets/mainwindow.xaml.vb#applicationcalltryfindresourcecodebehind2)]"
  syntax:
    content: public object TryFindResource (object resourceKey);
    parameters:
    - id: resourceKey
      type: System.Object
      description: "検索するリソースの名前。"
    return:
      type: System.Object
      description: "要求されたリソース オブジェクト。 要求されたリソースが見つからない場合は null 参照が返されます。"
  overload: System.Windows.Application.TryFindResource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Application.Windows
  id: Windows
  parent: System.Windows.Application
  langs:
  - csharp
  name: Windows
  nameWithType: Application.Windows
  fullName: System.Windows.Application.Windows
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "アプリケーションでインスタンス化されたウィンドウを取得します。"
  remarks: "A<xref:System.Windows.Window>参照はで、ウィンドウがインスタンス化するとすぐに、自動的に Windows に追加、[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]スレッド以外のスレッドが追加されませんワーカーによって作成される windows</xref:System.Windows.Window> 。 A<xref:System.Windows.Window>参照が自動的に削除後、<xref:System.Windows.Window.Closing>イベントが処理されたとする前にその<xref:System.Windows.Window.Closed>イベントが発生します</xref:System.Windows.Window.Closed></xref:System.Windows.Window.Closing></xref:System.Windows.Window>。       既定では、Windows のプロパティに追加された最初の項目が<xref:System.Windows.Application.MainWindow%2A>。</xref:System.Windows.Application.MainWindow%2A>       このプロパティは、作成したスレッドからのみ使用可能な<xref:System.Windows.Application>オブジェクト</xref:System.Windows.Application>。"
  example:
  - "The following example demonstrates how to enumerate the Windows property to build a top-level Windows menu, which is common to [!INCLUDE[TLA#tla_mdi](~/add/includes/tlasharptla-mdi-md.md)] applications like [!INCLUDE[TLA#tla_xl](~/add/includes/tlasharptla-xl-md.md)], or multiple-instance Single Document Interface (SDI) applications like [!INCLUDE[TLA#tla_word](~/add/includes/tlasharptla-word-md.md)].  \n  \n [!code-vb[ApplicationWindowsSnippets#WindowMenuItemCODE](~/add/codesnippet/visualbasic/applicationwindowssnippets/windowmenuitem.vb#windowmenuitemcode)]\n [!code-cs[ApplicationWindowsSnippets#WindowMenuItemCODE](~/add/codesnippet/csharp/ApplicationWindowsSnippets.CSharp/WindowMenuItem.cs#windowmenuitemcode)]  \n  \n [!code-xml[ApplicationWindowsSnippets#MainWindowSetWindowsXAML](~/add/codesnippet/xaml/ApplicationWindowsSnippets.CSharp/MainWindow.xaml#mainwindowsetwindowsxaml)]  \n  \n [!code-cs[ApplicationWindowsSnippets#MainWindowSetWindowsCODEBEHIND1](~/add/codesnippet/csharp/ApplicationWindowsSnippets.CSharp/MainWindow.xaml.cs#mainwindowsetwindowscodebehind1)]\n [!code-vb[ApplicationWindowsSnippets#MainWindowSetWindowsCODEBEHIND1](~/add/codesnippet/visualbasic/applicationwindowssnippets/mainwindow.xaml.vb#mainwindowsetwindowscodebehind1)]  \n[!code-cs[ApplicationWindowsSnippets#MainWindowSetWindowsCODEBEHIND2](~/add/codesnippet/csharp/ApplicationWindowsSnippets.CSharp/MainWindow.xaml.cs#mainwindowsetwindowscodebehind2)]\n[!code-vb[ApplicationWindowsSnippets#MainWindowSetWindowsCODEBEHIND2](~/add/codesnippet/visualbasic/applicationwindowssnippets/mainwindow.xaml.vb#mainwindowsetwindowscodebehind2)]"
  syntax:
    content: public System.Windows.WindowCollection Windows { get; }
    return:
      type: System.Windows.WindowCollection
      description: "A <xref href=&quot;System.Windows.WindowCollection&quot;> </xref> 、現在のすべてのウィンドウ オブジェクトへの参照を格納している<xref href=&quot;System.AppDomain&quot;></xref>です。"
  overload: System.Windows.Application.Windows*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.ResourceReferenceKeyNotFoundException
  parent: System.Windows
  isExternal: false
  name: ResourceReferenceKeyNotFoundException
  nameWithType: ResourceReferenceKeyNotFoundException
  fullName: System.Windows.ResourceReferenceKeyNotFoundException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Windows.Application.#ctor
  parent: System.Windows.Application
  isExternal: false
  name: Application()
  nameWithType: Application.Application()
  fullName: System.Windows.Application.Application()
- uid: System.Windows.Application.Activated
  parent: System.Windows.Application
  isExternal: false
  name: Activated
  nameWithType: Application.Activated
  fullName: System.Windows.Application.Activated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Application.Current
  parent: System.Windows.Application
  isExternal: false
  name: Current
  nameWithType: Application.Current
  fullName: System.Windows.Application.Current
- uid: System.Windows.Application
  parent: System.Windows
  isExternal: false
  name: Application
  nameWithType: Application
  fullName: System.Windows.Application
- uid: System.Windows.Application.Deactivated
  parent: System.Windows.Application
  isExternal: false
  name: Deactivated
  nameWithType: Application.Deactivated
  fullName: System.Windows.Application.Deactivated
- uid: System.Windows.Application.DispatcherUnhandledException
  parent: System.Windows.Application
  isExternal: false
  name: DispatcherUnhandledException
  nameWithType: Application.DispatcherUnhandledException
  fullName: System.Windows.Application.DispatcherUnhandledException
- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherUnhandledExceptionEventHandler
  nameWithType: DispatcherUnhandledExceptionEventHandler
  fullName: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler
- uid: System.Windows.Application.Exit
  parent: System.Windows.Application
  isExternal: false
  name: Exit
  nameWithType: Application.Exit
  fullName: System.Windows.Application.Exit
- uid: System.Windows.ExitEventHandler
  parent: System.Windows
  isExternal: false
  name: ExitEventHandler
  nameWithType: ExitEventHandler
  fullName: System.Windows.ExitEventHandler
- uid: System.Windows.Application.FindResource(System.Object)
  parent: System.Windows.Application
  isExternal: false
  name: FindResource(Object)
  nameWithType: Application.FindResource(Object)
  fullName: System.Windows.Application.FindResource(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Application.FragmentNavigation
  parent: System.Windows.Application
  isExternal: false
  name: FragmentNavigation
  nameWithType: Application.FragmentNavigation
  fullName: System.Windows.Application.FragmentNavigation
- uid: System.Windows.Navigation.FragmentNavigationEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: FragmentNavigationEventHandler
  nameWithType: FragmentNavigationEventHandler
  fullName: System.Windows.Navigation.FragmentNavigationEventHandler
- uid: System.Windows.Application.GetContentStream(System.Uri)
  parent: System.Windows.Application
  isExternal: false
  name: GetContentStream(Uri)
  nameWithType: Application.GetContentStream(Uri)
  fullName: System.Windows.Application.GetContentStream(Uri)
- uid: System.Windows.Resources.StreamResourceInfo
  parent: System.Windows.Resources
  isExternal: false
  name: StreamResourceInfo
  nameWithType: StreamResourceInfo
  fullName: System.Windows.Resources.StreamResourceInfo
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Windows.Application.GetCookie(System.Uri)
  parent: System.Windows.Application
  isExternal: false
  name: GetCookie(Uri)
  nameWithType: Application.GetCookie(Uri)
  fullName: System.Windows.Application.GetCookie(Uri)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Application.GetRemoteStream(System.Uri)
  parent: System.Windows.Application
  isExternal: false
  name: GetRemoteStream(Uri)
  nameWithType: Application.GetRemoteStream(Uri)
  fullName: System.Windows.Application.GetRemoteStream(Uri)
- uid: System.Windows.Application.GetResourceStream(System.Uri)
  parent: System.Windows.Application
  isExternal: false
  name: GetResourceStream(Uri)
  nameWithType: Application.GetResourceStream(Uri)
  fullName: System.Windows.Application.GetResourceStream(Uri)
- uid: System.Windows.Application.LoadCompleted
  parent: System.Windows.Application
  isExternal: false
  name: LoadCompleted
  nameWithType: Application.LoadCompleted
  fullName: System.Windows.Application.LoadCompleted
- uid: System.Windows.Navigation.LoadCompletedEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: LoadCompletedEventHandler
  nameWithType: LoadCompletedEventHandler
  fullName: System.Windows.Navigation.LoadCompletedEventHandler
- uid: System.Windows.Application.LoadComponent(System.Uri)
  parent: System.Windows.Application
  isExternal: false
  name: LoadComponent(Uri)
  nameWithType: Application.LoadComponent(Uri)
  fullName: System.Windows.Application.LoadComponent(Uri)
- uid: System.Windows.Application.LoadComponent(System.Object,System.Uri)
  parent: System.Windows.Application
  isExternal: false
  name: LoadComponent(Object,Uri)
  nameWithType: Application.LoadComponent(Object,Uri)
  fullName: System.Windows.Application.LoadComponent(Object,Uri)
- uid: System.Windows.Application.MainWindow
  parent: System.Windows.Application
  isExternal: false
  name: MainWindow
  nameWithType: Application.MainWindow
  fullName: System.Windows.Application.MainWindow
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.Application.Navigated
  parent: System.Windows.Application
  isExternal: false
  name: Navigated
  nameWithType: Application.Navigated
  fullName: System.Windows.Application.Navigated
- uid: System.Windows.Navigation.NavigatedEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigatedEventHandler
  nameWithType: NavigatedEventHandler
  fullName: System.Windows.Navigation.NavigatedEventHandler
- uid: System.Windows.Application.Navigating
  parent: System.Windows.Application
  isExternal: false
  name: Navigating
  nameWithType: Application.Navigating
  fullName: System.Windows.Application.Navigating
- uid: System.Windows.Navigation.NavigatingCancelEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigatingCancelEventHandler
  nameWithType: NavigatingCancelEventHandler
  fullName: System.Windows.Navigation.NavigatingCancelEventHandler
- uid: System.Windows.Application.NavigationFailed
  parent: System.Windows.Application
  isExternal: false
  name: NavigationFailed
  nameWithType: Application.NavigationFailed
  fullName: System.Windows.Application.NavigationFailed
- uid: System.Windows.Navigation.NavigationFailedEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigationFailedEventHandler
  nameWithType: NavigationFailedEventHandler
  fullName: System.Windows.Navigation.NavigationFailedEventHandler
- uid: System.Windows.Application.NavigationProgress
  parent: System.Windows.Application
  isExternal: false
  name: NavigationProgress
  nameWithType: Application.NavigationProgress
  fullName: System.Windows.Application.NavigationProgress
- uid: System.Windows.Navigation.NavigationProgressEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigationProgressEventHandler
  nameWithType: NavigationProgressEventHandler
  fullName: System.Windows.Navigation.NavigationProgressEventHandler
- uid: System.Windows.Application.NavigationStopped
  parent: System.Windows.Application
  isExternal: false
  name: NavigationStopped
  nameWithType: Application.NavigationStopped
  fullName: System.Windows.Application.NavigationStopped
- uid: System.Windows.Navigation.NavigationStoppedEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigationStoppedEventHandler
  nameWithType: NavigationStoppedEventHandler
  fullName: System.Windows.Navigation.NavigationStoppedEventHandler
- uid: System.Windows.Application.OnActivated(System.EventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnActivated(EventArgs)
  nameWithType: Application.OnActivated(EventArgs)
  fullName: System.Windows.Application.OnActivated(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Application.OnDeactivated(System.EventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnDeactivated(EventArgs)
  nameWithType: Application.OnDeactivated(EventArgs)
  fullName: System.Windows.Application.OnDeactivated(EventArgs)
- uid: System.Windows.Application.OnExit(System.Windows.ExitEventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnExit(ExitEventArgs)
  nameWithType: Application.OnExit(ExitEventArgs)
  fullName: System.Windows.Application.OnExit(ExitEventArgs)
- uid: System.Windows.ExitEventArgs
  parent: System.Windows
  isExternal: false
  name: ExitEventArgs
  nameWithType: ExitEventArgs
  fullName: System.Windows.ExitEventArgs
- uid: System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnFragmentNavigation(FragmentNavigationEventArgs)
  nameWithType: Application.OnFragmentNavigation(FragmentNavigationEventArgs)
  fullName: System.Windows.Application.OnFragmentNavigation(FragmentNavigationEventArgs)
- uid: System.Windows.Navigation.FragmentNavigationEventArgs
  parent: System.Windows.Navigation
  isExternal: false
  name: FragmentNavigationEventArgs
  nameWithType: FragmentNavigationEventArgs
  fullName: System.Windows.Navigation.FragmentNavigationEventArgs
- uid: System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnLoadCompleted(NavigationEventArgs)
  nameWithType: Application.OnLoadCompleted(NavigationEventArgs)
  fullName: System.Windows.Application.OnLoadCompleted(NavigationEventArgs)
- uid: System.Windows.Navigation.NavigationEventArgs
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigationEventArgs
  nameWithType: NavigationEventArgs
  fullName: System.Windows.Navigation.NavigationEventArgs
- uid: System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnNavigated(NavigationEventArgs)
  nameWithType: Application.OnNavigated(NavigationEventArgs)
  fullName: System.Windows.Application.OnNavigated(NavigationEventArgs)
- uid: System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnNavigating(NavigatingCancelEventArgs)
  nameWithType: Application.OnNavigating(NavigatingCancelEventArgs)
  fullName: System.Windows.Application.OnNavigating(NavigatingCancelEventArgs)
- uid: System.Windows.Navigation.NavigatingCancelEventArgs
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigatingCancelEventArgs
  nameWithType: NavigatingCancelEventArgs
  fullName: System.Windows.Navigation.NavigatingCancelEventArgs
- uid: System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnNavigationFailed(NavigationFailedEventArgs)
  nameWithType: Application.OnNavigationFailed(NavigationFailedEventArgs)
  fullName: System.Windows.Application.OnNavigationFailed(NavigationFailedEventArgs)
- uid: System.Windows.Navigation.NavigationFailedEventArgs
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigationFailedEventArgs
  nameWithType: NavigationFailedEventArgs
  fullName: System.Windows.Navigation.NavigationFailedEventArgs
- uid: System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnNavigationProgress(NavigationProgressEventArgs)
  nameWithType: Application.OnNavigationProgress(NavigationProgressEventArgs)
  fullName: System.Windows.Application.OnNavigationProgress(NavigationProgressEventArgs)
- uid: System.Windows.Navigation.NavigationProgressEventArgs
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigationProgressEventArgs
  nameWithType: NavigationProgressEventArgs
  fullName: System.Windows.Navigation.NavigationProgressEventArgs
- uid: System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnNavigationStopped(NavigationEventArgs)
  nameWithType: Application.OnNavigationStopped(NavigationEventArgs)
  fullName: System.Windows.Application.OnNavigationStopped(NavigationEventArgs)
- uid: System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnSessionEnding(SessionEndingCancelEventArgs)
  nameWithType: Application.OnSessionEnding(SessionEndingCancelEventArgs)
  fullName: System.Windows.Application.OnSessionEnding(SessionEndingCancelEventArgs)
- uid: System.Windows.SessionEndingCancelEventArgs
  parent: System.Windows
  isExternal: false
  name: SessionEndingCancelEventArgs
  nameWithType: SessionEndingCancelEventArgs
  fullName: System.Windows.SessionEndingCancelEventArgs
- uid: System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)
  parent: System.Windows.Application
  isExternal: false
  name: OnStartup(StartupEventArgs)
  nameWithType: Application.OnStartup(StartupEventArgs)
  fullName: System.Windows.Application.OnStartup(StartupEventArgs)
- uid: System.Windows.StartupEventArgs
  parent: System.Windows
  isExternal: false
  name: StartupEventArgs
  nameWithType: StartupEventArgs
  fullName: System.Windows.StartupEventArgs
- uid: System.Windows.Application.Properties
  parent: System.Windows.Application
  isExternal: false
  name: Properties
  nameWithType: Application.Properties
  fullName: System.Windows.Application.Properties
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Windows.Application.ResourceAssembly
  parent: System.Windows.Application
  isExternal: false
  name: ResourceAssembly
  nameWithType: Application.ResourceAssembly
  fullName: System.Windows.Application.ResourceAssembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Windows.Application.Resources
  parent: System.Windows.Application
  isExternal: false
  name: Resources
  nameWithType: Application.Resources
  fullName: System.Windows.Application.Resources
- uid: System.Windows.ResourceDictionary
  parent: System.Windows
  isExternal: false
  name: ResourceDictionary
  nameWithType: ResourceDictionary
  fullName: System.Windows.ResourceDictionary
- uid: System.Windows.Application.Run
  parent: System.Windows.Application
  isExternal: false
  name: Run()
  nameWithType: Application.Run()
  fullName: System.Windows.Application.Run()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Application.Run(System.Windows.Window)
  parent: System.Windows.Application
  isExternal: false
  name: Run(Window)
  nameWithType: Application.Run(Window)
  fullName: System.Windows.Application.Run(Window)
- uid: System.Windows.Application.SessionEnding
  parent: System.Windows.Application
  isExternal: false
  name: SessionEnding
  nameWithType: Application.SessionEnding
  fullName: System.Windows.Application.SessionEnding
- uid: System.Windows.SessionEndingCancelEventHandler
  parent: System.Windows
  isExternal: false
  name: SessionEndingCancelEventHandler
  nameWithType: SessionEndingCancelEventHandler
  fullName: System.Windows.SessionEndingCancelEventHandler
- uid: System.Windows.Application.SetCookie(System.Uri,System.String)
  parent: System.Windows.Application
  isExternal: false
  name: SetCookie(Uri,String)
  nameWithType: Application.SetCookie(Uri,String)
  fullName: System.Windows.Application.SetCookie(Uri,String)
- uid: System.Windows.Application.Shutdown
  parent: System.Windows.Application
  isExternal: false
  name: Shutdown()
  nameWithType: Application.Shutdown()
  fullName: System.Windows.Application.Shutdown()
- uid: System.Windows.Application.Shutdown(System.Int32)
  parent: System.Windows.Application
  isExternal: false
  name: Shutdown(Int32)
  nameWithType: Application.Shutdown(Int32)
  fullName: System.Windows.Application.Shutdown(Int32)
- uid: System.Windows.Application.ShutdownMode
  parent: System.Windows.Application
  isExternal: false
  name: ShutdownMode
  nameWithType: Application.ShutdownMode
  fullName: System.Windows.Application.ShutdownMode
- uid: System.Windows.ShutdownMode
  parent: System.Windows
  isExternal: false
  name: ShutdownMode
  nameWithType: ShutdownMode
  fullName: System.Windows.ShutdownMode
- uid: System.Windows.Application.Startup
  parent: System.Windows.Application
  isExternal: false
  name: Startup
  nameWithType: Application.Startup
  fullName: System.Windows.Application.Startup
- uid: System.Windows.StartupEventHandler
  parent: System.Windows
  isExternal: false
  name: StartupEventHandler
  nameWithType: StartupEventHandler
  fullName: System.Windows.StartupEventHandler
- uid: System.Windows.Application.StartupUri
  parent: System.Windows.Application
  isExternal: false
  name: StartupUri
  nameWithType: Application.StartupUri
  fullName: System.Windows.Application.StartupUri
- uid: System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  parent: System.Windows.Application
  isExternal: false
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  nameWithType: Application.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.Application.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Application.TryFindResource(System.Object)
  parent: System.Windows.Application
  isExternal: false
  name: TryFindResource(Object)
  nameWithType: Application.TryFindResource(Object)
  fullName: System.Windows.Application.TryFindResource(Object)
- uid: System.Windows.Application.Windows
  parent: System.Windows.Application
  isExternal: false
  name: Windows
  nameWithType: Application.Windows
  fullName: System.Windows.Application.Windows
- uid: System.Windows.WindowCollection
  parent: System.Windows
  isExternal: false
  name: WindowCollection
  nameWithType: WindowCollection
  fullName: System.Windows.WindowCollection
- uid: System.Windows.Application.#ctor*
  parent: System.Windows.Application
  isExternal: false
  name: Application
  nameWithType: Application.Application
- uid: System.Windows.Application.Current*
  parent: System.Windows.Application
  isExternal: false
  name: Current
  nameWithType: Application.Current
- uid: System.Windows.Application.FindResource*
  parent: System.Windows.Application
  isExternal: false
  name: FindResource
  nameWithType: Application.FindResource
- uid: System.Windows.Application.GetContentStream*
  parent: System.Windows.Application
  isExternal: false
  name: GetContentStream
  nameWithType: Application.GetContentStream
- uid: System.Windows.Application.GetCookie*
  parent: System.Windows.Application
  isExternal: false
  name: GetCookie
  nameWithType: Application.GetCookie
- uid: System.Windows.Application.GetRemoteStream*
  parent: System.Windows.Application
  isExternal: false
  name: GetRemoteStream
  nameWithType: Application.GetRemoteStream
- uid: System.Windows.Application.GetResourceStream*
  parent: System.Windows.Application
  isExternal: false
  name: GetResourceStream
  nameWithType: Application.GetResourceStream
- uid: System.Windows.Application.LoadComponent*
  parent: System.Windows.Application
  isExternal: false
  name: LoadComponent
  nameWithType: Application.LoadComponent
- uid: System.Windows.Application.MainWindow*
  parent: System.Windows.Application
  isExternal: false
  name: MainWindow
  nameWithType: Application.MainWindow
- uid: System.Windows.Application.OnActivated*
  parent: System.Windows.Application
  isExternal: false
  name: OnActivated
  nameWithType: Application.OnActivated
- uid: System.Windows.Application.OnDeactivated*
  parent: System.Windows.Application
  isExternal: false
  name: OnDeactivated
  nameWithType: Application.OnDeactivated
- uid: System.Windows.Application.OnExit*
  parent: System.Windows.Application
  isExternal: false
  name: OnExit
  nameWithType: Application.OnExit
- uid: System.Windows.Application.OnFragmentNavigation*
  parent: System.Windows.Application
  isExternal: false
  name: OnFragmentNavigation
  nameWithType: Application.OnFragmentNavigation
- uid: System.Windows.Application.OnLoadCompleted*
  parent: System.Windows.Application
  isExternal: false
  name: OnLoadCompleted
  nameWithType: Application.OnLoadCompleted
- uid: System.Windows.Application.OnNavigated*
  parent: System.Windows.Application
  isExternal: false
  name: OnNavigated
  nameWithType: Application.OnNavigated
- uid: System.Windows.Application.OnNavigating*
  parent: System.Windows.Application
  isExternal: false
  name: OnNavigating
  nameWithType: Application.OnNavigating
- uid: System.Windows.Application.OnNavigationFailed*
  parent: System.Windows.Application
  isExternal: false
  name: OnNavigationFailed
  nameWithType: Application.OnNavigationFailed
- uid: System.Windows.Application.OnNavigationProgress*
  parent: System.Windows.Application
  isExternal: false
  name: OnNavigationProgress
  nameWithType: Application.OnNavigationProgress
- uid: System.Windows.Application.OnNavigationStopped*
  parent: System.Windows.Application
  isExternal: false
  name: OnNavigationStopped
  nameWithType: Application.OnNavigationStopped
- uid: System.Windows.Application.OnSessionEnding*
  parent: System.Windows.Application
  isExternal: false
  name: OnSessionEnding
  nameWithType: Application.OnSessionEnding
- uid: System.Windows.Application.OnStartup*
  parent: System.Windows.Application
  isExternal: false
  name: OnStartup
  nameWithType: Application.OnStartup
- uid: System.Windows.Application.Properties*
  parent: System.Windows.Application
  isExternal: false
  name: Properties
  nameWithType: Application.Properties
- uid: System.Windows.Application.ResourceAssembly*
  parent: System.Windows.Application
  isExternal: false
  name: ResourceAssembly
  nameWithType: Application.ResourceAssembly
- uid: System.Windows.Application.Resources*
  parent: System.Windows.Application
  isExternal: false
  name: Resources
  nameWithType: Application.Resources
- uid: System.Windows.Application.Run*
  parent: System.Windows.Application
  isExternal: false
  name: Run
  nameWithType: Application.Run
- uid: System.Windows.Application.SetCookie*
  parent: System.Windows.Application
  isExternal: false
  name: SetCookie
  nameWithType: Application.SetCookie
- uid: System.Windows.Application.Shutdown*
  parent: System.Windows.Application
  isExternal: false
  name: Shutdown
  nameWithType: Application.Shutdown
- uid: System.Windows.Application.ShutdownMode*
  parent: System.Windows.Application
  isExternal: false
  name: ShutdownMode
  nameWithType: Application.ShutdownMode
- uid: System.Windows.Application.StartupUri*
  parent: System.Windows.Application
  isExternal: false
  name: StartupUri
  nameWithType: Application.StartupUri
- uid: System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*
  parent: System.Windows.Application
  isExternal: false
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable
  nameWithType: Application.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable
- uid: System.Windows.Application.TryFindResource*
  parent: System.Windows.Application
  isExternal: false
  name: TryFindResource
  nameWithType: Application.TryFindResource
- uid: System.Windows.Application.Windows*
  parent: System.Windows.Application
  isExternal: false
  name: Windows
  nameWithType: Application.Windows
