### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.ApplicationServices.User
  id: User
  children:
  - Microsoft.VisualBasic.ApplicationServices.User.#ctor
  - Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  - Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  - Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  - Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  - Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  - Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  - Microsoft.VisualBasic.ApplicationServices.User.Name
  langs:
  - csharp
  name: User
  nameWithType: User
  fullName: Microsoft.VisualBasic.ApplicationServices.User
  type: Class
  summary: "現在のユーザーに関する情報へのアクセスを提供します。"
  remarks: "プロパティとメソッドによって公開されている、`My.User`オブジェクトが現在のユーザーに関する情報へのアクセスを提供します。 「現在のユーザー」の意味は、Windows アプリケーションと Web アプリケーション間で若干異なります。 Windows アプリケーションでは、現在のユーザーは、アプリケーションを実行しているユーザーがします。 Web アプリケーションでは、現在のユーザーは、アプリケーションにアクセスするユーザーがします。       `My.User`プロパティへのアクセスも用意されています、 <xref:System.Security.Principal.IPrincipal>、現在のユーザー。</xref:System.Security.Principal.IPrincipal> 。 プリンシパルのオブジェクトでは、そのユーザーの id や、ユーザーが所属するロールを含め、ユーザーのセキュリティ コンテキストを表します。       このプロパティは、Windows アプリケーションのと同じ機能を提供、<xref:System.Threading.Thread.CurrentPrincipal%2A>プロパティ</xref:System.Threading.Thread.CurrentPrincipal%2A>。 このプロパティは、Web アプリケーションのと同じ機能を提供、<xref:System.Web.HttpContext.User%2A>によって返されるオブジェクトのプロパティ、<xref:System.Web.HttpContext.Current%2A>プロパティ</xref:System.Web.HttpContext.Current%2A></xref:System.Web.HttpContext.User%2A>。      > [!NOTE] > の Windows アプリケーションでは、上に構築されたプロジェクトのみ、 **Windows アプリケーション**テンプレート初期化、`My.User`既定ではオブジェクトです。 他の Windows のプロジェクト タイプで初期化する必要があります、`My.User`オブジェクトを呼び出して、<xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>メソッド<xref:System.Threading.Thread.CurrentPrincipal%2A></xref:System.Threading.Thread.CurrentPrincipal%2A>値を割り当てることによって、明示的に</xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>。      > [!NOTE] >、`My.User`オブジェクトは、これらのオペレーティング システムでは、ログオン ユーザーの概念をサポートしていないため Windows 95 および Windows 98 で実行する場合、現在の Windows ユーザーに関する情報を報告できません。 使用するカスタム認証を実装する必要があります、`My.User`これらのオペレーティング システム上のオブジェクト。"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse the `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public class User
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: User()
  nameWithType: User.User()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.User()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "新しいインスタンスを初期化、 <xref href=&quot;Microsoft.VisualBasic.ApplicationServices.User&quot;> </xref>クラスです。"
  remarks: "プロパティとメソッドによって公開されている、`My.User`オブジェクトが現在のユーザーに関する情報へのアクセスを提供します。"
  syntax:
    content: public User ();
    parameters: []
  overload: Microsoft.VisualBasic.ApplicationServices.User.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  id: CurrentPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "取得または (ロール ベース セキュリティ) の現在のプリンシパルを設定します。"
  remarks: "設定することができます、`My.User.CurrentPrincipal`プロパティを実装するオブジェクトを<xref:System.Security.Principal.IPrincipal>カスタム認証を有効にするインターフェイス</xref:System.Security.Principal.IPrincipal>。       ほとんどの種類のプロジェクトでは、このプロパティを取得し、スレッドの現在のプリンシパルを設定します。 ASP.NET アプリケーションでこのプロパティは取得し、現在の HTTP 要求のユーザー id のセキュリティ情報を設定します。       これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |**Yes**|  |Windows サービス |**Yes**|  |Web サイト |**Yes**|"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "A<xref:System.Security.Principal.IPrincipal>のセキュリティ コンテキストを表す値</xref:System.Security.Principal.IPrincipal>。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、プリンシパルを設定するために必要なアクセス許可がありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  id: InitializeWithWindowsUser
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: InitializeWithWindowsUser()
  nameWithType: User.InitializeWithWindowsUser()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "アプリケーションを開始した Windows ユーザーに、スレッドの現在のプリンシパルを設定します。"
  remarks: "使用することができます、`My.User.InitializeWithWindowsUser`アプリケーションを開始した Windows ユーザーに、スレッドの現在のプリンシパルを設定します。 Windows アプリケーションで Visual Basic アプリケーション モデルは、既定では、起動時にこのメソッドを呼び出します。 このメソッドを明示的に呼び出すことによってまたは<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>。</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>値を割り当てることによって、他の種類のプロジェクトで、スレッドの現在のプリンシパルを設定する必要があります。       Windows プロジェクトでは、`My.User`オブジェクトは、スレッドの現在のプリンシパルに基づいてです。 そのため、このメソッドが情報を変更できます`My.User`を返します。 ASP.NET アプリケーションで、`My.User`オブジェクトは、現在の HTTP 要求のユーザー id に基づいており、このメソッドによる影響はありません。      > [!NOTE] > の実際の動作、`My.User`オブジェクトは、アプリケーションの種類と、アプリケーションが実行されているオペレーティング システムによって異なります。 詳細については、次を参照してください、<xref:Microsoft.VisualBasic.ApplicationServices.User>クラスの概要。</xref:Microsoft.VisualBasic.ApplicationServices.User> 。       これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |**Yes**|  |Windows サービス |**Yes**|  |Web サイト |**Yes**|"
  syntax:
    content: public void InitializeWithWindowsUser ();
    parameters: []
  overload: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  id: InternalPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "取得または現在のユーザーを表すプリンシパル オブジェクトを設定します。"
  remarks: "<xref:Microsoft.VisualBasic.ApplicationServices.User>オブジェクトのプロパティをラップ、<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>プロパティ</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName></xref:Microsoft.VisualBasic.ApplicationServices.User>。 動作の違いを提供する派生クラスでこのメソッドをオーバーライドします。 たとえば、<xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=fullName>プロパティは、このプロパティをオーバーライドします</xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=fullName>。"
  syntax:
    content: protected virtual System.Security.Principal.IPrincipal InternalPrincipal { get; set; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>、現在のユーザーを表すオブジェクト</xref:System.Security.Principal.IPrincipal>。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  id: IsAuthenticated
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "ユーザーが認証されているかどうかを示す値を取得します。"
  remarks: "`My.User.IsAuthenticated`プロパティは、現在のユーザーが認証されたかどうかを決定するコードを使用します。      > [!NOTE] > の正確な動作`My.User`オブジェクトは、アプリケーションの種類と、アプリケーションが実行されているオペレーティング システムによって異なります。 詳細については、次を参照してください、<xref:Microsoft.VisualBasic.ApplicationServices.User>クラスの概要。</xref:Microsoft.VisualBasic.ApplicationServices.User> 。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |**Yes**|  |Windows サービス |**Yes**|  |Web サイト |**Yes**|"
  example:
  - "This example verifies that the user has been authenticated before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#2](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#2)]"
  syntax:
    content: public bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>場合は、ユーザーが認証されています。それ以外の場合、 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  id: IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsInRole(BuiltInRole)
  nameWithType: User.IsInRole(BuiltInRole)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(BuiltInRole)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "現在のユーザーが指定されたロールに属しているかどうかを判断します。"
  remarks: "`My.User.IsInRole`メソッドの使用、コードは、現在のユーザーが指定されたロールのメンバーかどうかを決定します。       オーバー ロード、 `My.User.IsInRole` 、文字列を受け取るメソッドに簡単にアクセスを提供する、<xref:System.Security.Principal.IPrincipal.IsInRole%2A>現在のプリンシパルのメソッド</xref:System.Security.Principal.IPrincipal.IsInRole%2A>。       オーバー ロード、`My.User.IsInRole`を受け取るメソッド、`BuiltInRole`によっては、現在のプリンシパル、異なる動作を列挙します。 Windows のユーザー プリンシパルである場合 (<xref:System.Security.Principal.WindowsPrincipal>)、この関数に変換`role`に相当する<xref:System.Security.Principal.WindowsBuiltInRole>列挙<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>の呼び出しの結果を返します</xref:System.Security.Principal.WindowsBuiltInRole></xref:System.Security.Principal.WindowsPrincipal> 現在のプリンシパルがその他の任意のプリンシパルの場合は、この関数で列挙値の名前を渡します`role`プリンシパルの<xref:System.Security.Principal.IPrincipal.IsInRole%2A>メソッド</xref:System.Security.Principal.IPrincipal.IsInRole%2A>。      > [!NOTE] > の実際の動作、`My.User`オブジェクトは、アプリケーションの種類と、アプリケーションが実行されているオペレーティング システムによって異なります。 詳細については、次を参照してください、<xref:Microsoft.VisualBasic.ApplicationServices.User>クラスの概要。</xref:Microsoft.VisualBasic.ApplicationServices.User> 。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |**Yes**|  |Windows サービス |**Yes**|  |Web サイト |**Yes**|"
  example:
  - "This example checks if the user is an administrator before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#1](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#1)]"
  syntax:
    content: public bool IsInRole (Microsoft.VisualBasic.ApplicationServices.BuiltInRole role);
    parameters:
    - id: role
      type: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
      description: "メンバーシップをチェックする組み込みの Windows のロール。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>現在のユーザーが指定されたロールのメンバーである場合それ以外の場合、 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsInRole(String)
  nameWithType: User.IsInRole(String)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "現在のユーザーが指定されたロールに属しているかどうかを判断します。"
  remarks: "`My.User.IsInRole`メソッドの使用、コードは、現在のユーザーが指定されたロールのメンバーかどうかを決定します。       オーバー ロード、 `My.User.IsInRole` 、文字列を受け取るメソッドに簡単にアクセスを提供する、<xref:System.Security.Principal.IPrincipal.IsInRole%2A>現在のプリンシパルのメソッド</xref:System.Security.Principal.IPrincipal.IsInRole%2A>。       オーバー ロード、`My.User.IsInRole`を受け取るメソッド、`BuiltInRole`によっては、現在のプリンシパル、異なる動作を列挙します。 Windows のユーザー プリンシパルである場合 (<xref:System.Security.Principal.WindowsPrincipal>)、この関数に変換`role`に相当する<xref:System.Security.Principal.WindowsBuiltInRole>列挙<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>の呼び出しの結果を返します</xref:System.Security.Principal.WindowsBuiltInRole></xref:System.Security.Principal.WindowsPrincipal> 現在のプリンシパルがその他の任意のプリンシパルの場合は、この関数で列挙値の名前を渡します`role`プリンシパルの<xref:System.Security.Principal.IPrincipal.IsInRole%2A>メソッド</xref:System.Security.Principal.IPrincipal.IsInRole%2A>。      > [!NOTE] > の実際の動作、`My.User`オブジェクトは、アプリケーションの種類と、アプリケーションが実行されているオペレーティング システムによって異なります。 詳細については、次を参照してください、<xref:Microsoft.VisualBasic.ApplicationServices.User>クラスの概要。</xref:Microsoft.VisualBasic.ApplicationServices.User> 。      ## プロジェクトの種類によって可用性 | | |  |-|-|  |プロジェクトの種類 |使用可能な |  |Windows アプリケーション |**Yes**|  |クラス ライブラリ |**Yes**|  |コンソール アプリケーション |**Yes**|  |Windows コントロール ライブラリ |**Yes**|  |Web コントロール ライブラリ |**Yes**|  |Windows サービス |**Yes**|  |Web サイト |**Yes**|"
  example:
  - "This example checks if the user is an administrator before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#1](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#1)]"
  syntax:
    content: public bool IsInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: "メンバーシップを確認する対象のロールの名前。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>現在のユーザーが指定されたロールのメンバーである場合それ以外の場合、 <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name
  id: Name
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: Name
  nameWithType: User.Name
  fullName: Microsoft.VisualBasic.ApplicationServices.User.Name
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "現在のユーザーの名前を取得します。"
  remarks: "You can use the `My.User` object to get information about the current user.  \n  \n The principal that authenticates the user also controls the format of the user name. By default, an application uses Windows authentication, and the user name has the format DOMAIN\\USERNAME. A custom implementation of the principal does not necessarily use the same format.  \n  \n> [!NOTE]\n>  The `My.User.Name` property returns an empty string when run under Windows 95 and Windows 98 because those operating systems do not recognize user names.  \n  \n> [!NOTE]\n>  The exact behavior of the `My.User` object depends on the type of the application and on the operating system on which the application runs. For more information, see the <xref:Microsoft.VisualBasic.ApplicationServices.User> class overview.  \n  \n## Availability by Project Type  \n  \n|||  \n|-|-|  \n|Project type|Available|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|**Yes**|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse the `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 現在のユーザーの名前。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.Name*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: User()
  nameWithType: User.User()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.User()
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InitializeWithWindowsUser()
  nameWithType: User.InitializeWithWindowsUser()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser()
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole(BuiltInRole)
  nameWithType: User.IsInRole(BuiltInRole)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(BuiltInRole)
- uid: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
  parent: Microsoft.VisualBasic.ApplicationServices
  isExternal: false
  name: BuiltInRole
  nameWithType: BuiltInRole
  fullName: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole(String)
  nameWithType: User.IsInRole(String)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: Name
  nameWithType: User.Name
  fullName: Microsoft.VisualBasic.ApplicationServices.User.Name
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: User
  nameWithType: User.User
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InitializeWithWindowsUser
  nameWithType: User.InitializeWithWindowsUser
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole
  nameWithType: User.IsInRole
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: Name
  nameWithType: User.Name
