### YamlMime:ManagedReference
items:
- uid: System.Globalization.TaiwanCalendar
  id: TaiwanCalendar
  children:
  - System.Globalization.TaiwanCalendar.#ctor
  - System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.TaiwanCalendar.AlgorithmType
  - System.Globalization.TaiwanCalendar.Eras
  - System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.GetEra(System.DateTime)
  - System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)
  - System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - System.Globalization.TaiwanCalendar.GetYear(System.DateTime)
  - System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.MaxSupportedDateTime
  - System.Globalization.TaiwanCalendar.MinSupportedDateTime
  - System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.TaiwanCalendar.TwoDigitYearMax
  langs:
  - csharp
  name: TaiwanCalendar
  nameWithType: TaiwanCalendar
  fullName: System.Globalization.TaiwanCalendar
  type: Class
  summary: "台湾暦。"
  remarks: "年と時代 (年号) が異なる点を除いて、台湾暦はグレゴリオ暦のカレンダーと同じように動作します。 TaiwanCalendar クラスは、現在の時代のみを認識します。      > [!NOTE] > について TaiwanCalendar クラスと、その他の calendar クラスを使用して、.NET Framework では、次を参照してください。[カレンダーの使用](~/add/includes/ajax-current-ext-md.md)です。       うるう年台湾暦では、グレゴリオ暦で同じ閏年に対応します。 うるう年グレゴリオ暦では、100 で割り切れるを除く、4 で割り切れるグレゴリオ暦の年として定義されます。 400 で割り切れるグレゴリオ暦年がうるう年です。 共通の年度は 365 日を持ち、うるう年が 366 日。       台湾暦が 28 ~ 31 日に 12 か月: |GetMonth 値 |月 |一般的な年の日 |うるう年の日 |  |--------------------|-----------|--------------------------|------------------------|  | 1 | 1月 (1 月) | 31 | 31 |  | 2 | 2月 (2 月) | 28 | 29 |  | 3 | 3月 (年 3 月) | 31 | 31 |  | 4 | 4月 (年 4 月) | 30 | 30 |  | 5 | 5月 (月) | 31 | 31 |  | 6 | 6月 (6 月) | 30 | 30 |  | 7 | 7月 (7 月) | 31 | 31 |  | 8 |8月 (8 月) | 31 | 31 |  | 9 | 9月 (年 9 月) | 30 | 30 |  | 10 | 10月 (年 10 月) | 31 | 31 |  | 11 | 11月 (11 月) | 30 | 30 |  | 12 | 12月 (12 月) | 31 | 31 |      年 2 月 29 日、閏年あり平年 28 です。       日の 2001 年 1 月 1 日西暦 台湾暦では現在の時代 (年号) の 90 年 1 月の最初の日に相当します。       各<xref:System.Globalization.CultureInfo>予定表のセットをサポートしています</xref:System.Globalization.CultureInfo>。 <xref:System.Globalization.CultureInfo.Calendar%2A>プロパティを返します、カルチャの既定のカレンダーと<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>プロパティは、カルチャでサポートされているすべてのカレンダーを含む配列を返します</xref:System.Globalization.CultureInfo.OptionalCalendars%2A></xref:System.Globalization.CultureInfo.Calendar%2A>。 <xref:System.Globalization.CultureInfo>アプリケーションが<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A><xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>新しい<xref:System.Globalization.Calendar>。</xref:System.Globalization.Calendar></xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>のプロパティ</xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>を設定する必要があります</xref:System.Globalization.CultureInfo>で使用される暦に変更するには"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class TaiwanCalendar : System.Globalization.Calendar
  inheritance:
  - System.Globalization.Calendar
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: TaiwanCalendar()
  nameWithType: TaiwanCalendar.TaiwanCalendar()
  fullName: System.Globalization.TaiwanCalendar.TaiwanCalendar()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Globalization.TaiwanCalendar&quot;> </xref>クラスです。"
  syntax:
    content: public TaiwanCalendar ();
    parameters: []
  overload: System.Globalization.TaiwanCalendar.#ctor*
  exceptions:
  - type: System.TypeInitializationException
    commentId: T:System.TypeInitializationException
    description: "初期化できません、 <xref href=&quot;System.Globalization.TaiwanCalendar&quot;> </xref>カルチャ情報が見つからないためのオブジェクト。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: AddMonths(DateTime,Int32)
  nameWithType: TaiwanCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.TaiwanCalendar.AddMonths(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "<xref:System.DateTime>つまり、指定した月数指定<xref:System.DateTime>。</xref:System.DateTime>から離れた場所</xref:System.DateTime>を返します"
  remarks: "結果の日の部分<xref:System.DateTime>が影響を受けるは、結果の日は、結果として得られる結果の年の月の有効な曜日ではない場合</xref:System.DateTime>。 結果として得られる結果の年の月の最後の有効な日付に変更されます。 結果として得られる<xref:System.DateTime>結果の月が指定された<xref:System.DateTime>。</xref:System.DateTime>の年を超えた場合は、影響を受ける</xref:System.DateTime>の年の部分 この実装では、現在の時代のみをサポートします。 したがって、<xref:System.ArgumentException>結果の年が指定された<xref:System.DateTime>。</xref:System.DateTime>の時代 (年号) を超えた場合にスローされます。</xref:System.ArgumentException> 結果として得られる<xref:System.DateTime>は指定した<xref:System.DateTime>。</xref:System.DateTime>と同じ</xref:System.DateTime>の時刻の部分       たとえば、指定した月が年 10 月 31 日まである場合、指定した日がの値と、その月の 31 日、`months`パラメーターは、6、結果として得られる、年は 1 つ以上の指定した年、月、年 4 月、日は 4 月の末日である 30 日です。       場合の値、`months`パラメーターが負の場合、<xref:System.DateTime>指定した<xref:System.DateTime>.</xref:System.DateTime>よりも前か</xref:System.DateTime>の結果として得られる       <xref:System.DateTime.Kind%2A>返される<xref:System.DateTime>値は常に等しい<xref:System.DateTimeKind?displayProperty=fullName>。</xref:System.DateTimeKind?displayProperty=fullName></xref:System.DateTime>のプロパティ</xref:System.DateTime.Kind%2A> 保持する、<xref:System.DateTime.Kind%2A>のプロパティ、`time`パラメーターを呼び出して、<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>メソッドは、次の例のように</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName></xref:System.DateTime.Kind%2A>。       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.t_6_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#5  ](~/add/codesnippet/csharp/m-system.globalization.t_6_1.cs)]"
  example:
  - "The following code example demonstrates the use of the AddMonths method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_6_2.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_6_2.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_6_2.cpp)]"
  syntax:
    content: public override DateTime AddMonths (DateTime time, int months);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>か月を追加する</xref:System.DateTime>。"
    - id: months
      type: System.Int32
      description: "追加する月数です。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>指定した<xref:System.DateTime>。</xref:System.DateTime>指定月数を追加した結果であります。</xref:System.DateTime>"
  overload: System.Globalization.TaiwanCalendar.AddMonths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "その結果<xref:System.DateTime>はサポートされている範囲外です</xref:System.DateTime>。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>months</code>小さい-120000 がします。       - または - <code>months</code> 120000 より大きい。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: AddYears(DateTime,Int32)
  nameWithType: TaiwanCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.TaiwanCalendar.AddYears(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "<xref:System.DateTime>つまり、指定した年数指定<xref:System.DateTime>。</xref:System.DateTime>から離れた場所</xref:System.DateTime>を返します"
  remarks: "結果の日の部分<xref:System.DateTime>が影響を受けるは、結果の日は、結果として得られる結果の年の月の有効な曜日ではない場合</xref:System.DateTime>。 結果として得られる結果の年の月の最後の有効な日付に変更されます。 結果として得られる<xref:System.DateTime>は指定した<xref:System.DateTime>。</xref:System.DateTime>と同じ</xref:System.DateTime>の月の部分 この実装では、現在の時代のみをサポートします。 したがって、<xref:System.ArgumentException>結果の年が指定された<xref:System.DateTime>。</xref:System.DateTime>の時代 (年号) を超えた場合にスローされます。</xref:System.ArgumentException> 結果として得られる<xref:System.DateTime>は指定した<xref:System.DateTime>。</xref:System.DateTime>と同じ</xref:System.DateTime>の時刻の部分       たとえば、年 2 月が 28 の日を除く平年の場合は 29 日。 指定した日付がうるう年の 2 月 29 日と値の場合`years`1 に設定されて、結果として得られる日付は次の年 2 月 28 日。       場合`years`が負の値、<xref:System.DateTime>指定した<xref:System.DateTime>.</xref:System.DateTime>よりも前か</xref:System.DateTime>の結果として得られる       <xref:System.DateTime.Kind%2A>返される<xref:System.DateTime>値は常に等しい<xref:System.DateTimeKind?displayProperty=fullName>。</xref:System.DateTimeKind?displayProperty=fullName></xref:System.DateTime>のプロパティ</xref:System.DateTime.Kind%2A> 保持する、<xref:System.DateTime.Kind%2A>のプロパティ、`time`パラメーターを呼び出して、<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>メソッドは、次の例のように</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName></xref:System.DateTime.Kind%2A>。       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.t_12_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#8  ](~/add/codesnippet/csharp/m-system.globalization.t_12_1.cs)]"
  example:
  - "The following code example displays the use of the AddYears method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_12_2.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_12_2.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_12_2.cpp)]"
  syntax:
    content: public override DateTime AddYears (DateTime time, int years);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>年を追加する</xref:System.DateTime>。"
    - id: years
      type: System.Int32
      description: "追加する年の数。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>指定した<xref:System.DateTime>。</xref:System.DateTime>指定年数を追加した結果であります。</xref:System.DateTime>"
  overload: System.Globalization.TaiwanCalendar.AddYears*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "その結果<xref:System.DateTime>はサポートされている範囲外です</xref:System.DateTime>。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.AlgorithmType
  id: AlgorithmType
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: AlgorithmType
  nameWithType: TaiwanCalendar.AlgorithmType
  fullName: System.Globalization.TaiwanCalendar.AlgorithmType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "現在の暦の太陽暦、太陰暦、または両方の組み合わせを示す値を取得します。"
  remarks: ''
  example:
  - "The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \n  \n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.t_2_1.cs)]\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.t_2_1.vb)]"
  syntax:
    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }
    return:
      type: System.Globalization.CalendarAlgorithmType
      description: "常に返します<xref href=&quot;System.Globalization.CalendarAlgorithmType&quot;></xref>です。"
  overload: System.Globalization.TaiwanCalendar.AlgorithmType*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.Eras
  id: Eras
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: Eras
  nameWithType: TaiwanCalendar.Eras
  fullName: System.Globalization.TaiwanCalendar.Eras
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "時代 (年号) の一覧を取得、 <xref href=&quot;System.Globalization.TaiwanCalendar&quot;></xref>です。"
  remarks: "このプロパティによって返される配列内の値は、時代 (年号) の最大値の範囲は 1 から番号です。 最大の時代 (年号) の数が配列の最初の要素で返されるされ、最後の要素の時代 (年号) の数の最小値が返されます。"
  syntax:
    content: public override int[] Eras { get; }
    return:
      type: System.Int32[]
      description: "対象の値は常に現在の時代 (年号) の&1; つの要素で構成される配列。"
  overload: System.Globalization.TaiwanCalendar.Eras*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetDayOfMonth(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した<xref:System.DateTime>。</xref:System.DateTime>における月の日を返します。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of the GetDayOfMonth method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_2_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_2_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_2_1.cpp)]"
  syntax:
    content: public override int GetDayOfMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>を読み取れません</xref:System.DateTime>。"
    return:
      type: System.Int32
      description: "指定した<xref:System.DateTime>。</xref:System.DateTime>における月の日を表す 31 を 1 から整数"
  overload: System.Globalization.TaiwanCalendar.GetDayOfMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetDayOfWeek(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfWeek(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した<xref:System.DateTime>。</xref:System.DateTime>週の曜日を返します。"
  remarks: "<xref:System.DayOfWeek>値は次のとおり: |DayOfWeek 値 | ことを示します |  |---------------------|---------------------|  |日曜日 | 星期日 |  |月曜日 | 星期一 |  |火曜日 | 星期二 |  |水曜日 | 星期三 |  |木曜日 | 星期四 |  |金曜日 | 星期五 |  |土曜日 | 星期六 |</xref:System.DayOfWeek>"
  example:
  - "The following code example demonstrates the use of the GetDayOfWeek method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_16_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_16_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_16_1.cpp)]"
  syntax:
    content: public override DayOfWeek GetDayOfWeek (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>を読み取れません</xref:System.DateTime>。"
    return:
      type: System.DayOfWeek
      description: "<xref:System.DayOfWeek>指定した<xref:System.DateTime>。</xref:System.DateTime>週の曜日を表す値</xref:System.DayOfWeek>"
  overload: System.Globalization.TaiwanCalendar.GetDayOfWeek*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetDayOfYear(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した<xref:System.DateTime>。</xref:System.DateTime>その年の日付を返します"
  remarks: "その年の日付は、その年の最初の日付から日数として定義されます。 たとえば、GetDayOfYear 最初の月の最初の日は 1 を返し、最後の月の最後の日の GetDayOfYear がその年の日数の合計数を返します。 合計は<xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A>。</xref:System.Globalization.TaiwanCalendar.GetDaysInYear%2A>によって返される値と同じ"
  example:
  - "The following code example demonstrates the use of the GetDayOfYear method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_13_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_13_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_13_1.cpp)]"
  syntax:
    content: public override int GetDayOfYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>を読み取れません</xref:System.DateTime>。"
    return:
      type: System.Int32
      description: "指定した<xref:System.DateTime>。</xref:System.DateTime>における年の日を表す 366 を 1 から整数"
  overload: System.Globalization.TaiwanCalendar.GetDayOfYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetDaysInMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した時代 (年号) の指定された年の指定した月の日数を返します。"
  remarks: "たとえば、このメソッドを返します 28 または 29 年 2 月の (`month` = 2) かどうかに応じて、`year`が閏年であります。"
  example:
  - "The following example calls GetDaysInMonth for the second month in each of five years in each era.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/1aa062ee-33c0-43ad-963f-_1.cs)]\n [!code-cpp[System.Globalization.TaiwanCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/1aa062ee-33c0-43ad-963f-_1.cpp)]\n [!code-vb[System.Globalization.TaiwanCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/1aa062ee-33c0-43ad-963f-_1.vb)]"
  syntax:
    content: public override int GetDaysInMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "年を表す整数。"
    - id: month
      type: System.Int32
      description: "月を表す 1 ~ 12 の整数。"
    - id: era
      type: System.Int32
      description: "時代 (年号) を表す整数。"
    return:
      type: System.Int32
      description: "指定した時代 (年号) の指定した年の指定した月の日数。"
  overload: System.Globalization.TaiwanCalendar.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>カレンダーでサポートされる範囲外です。       - または -<code>month</code>カレンダーでサポートされる範囲外です。       - または -<code>era</code>カレンダーでサポートされる範囲外です。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetDaysInYear(Int32,Int32)
  nameWithType: TaiwanCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetDaysInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した時代 (年号) の指定した年の日数を返します。"
  remarks: "365 または 366、かどうかに応じて、たとえば、このメソッドが戻る`year`が閏年であります。"
  example:
  - "The following example calls GetDaysInYear for five years in each era.  \n  \n [!code-cpp[System.Globalization.TaiwanCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.t_1_1.cpp)]\n [!code-cs[System.Globalization.TaiwanCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.t_1_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.t_1_1.vb)]"
  syntax:
    content: public override int GetDaysInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "年を表す整数。"
    - id: era
      type: System.Int32
      description: "時代 (年号) を表す整数。"
    return:
      type: System.Int32
      description: "指定した時代 (年号) の指定された年の日数の数。"
  overload: System.Globalization.TaiwanCalendar.GetDaysInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>カレンダーでサポートされる範囲外です。       - または -<code>era</code>カレンダーでサポートされる範囲外です。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetEra(DateTime)
  nameWithType: TaiwanCalendar.GetEra(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetEra(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した<xref:System.DateTime>。</xref:System.DateTime>時代 (年号) を返します。"
  remarks: "<xref:System.Globalization.TaiwanCalendar>クラスは、現在の時代のみを認識します</xref:System.Globalization.TaiwanCalendar>。"
  example:
  - "The following code example demonstrates the use of the GetEra method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_8_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_8_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_8_1.cpp)]"
  syntax:
    content: public override int GetEra (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>を読み取れません</xref:System.DateTime>。"
    return:
      type: System.Int32
      description: "指定した<xref:System.DateTime>。</xref:System.DateTime>時代 (年号) を表す整数"
  overload: System.Globalization.TaiwanCalendar.GetEra*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetLeapMonth(Int32,Int32)
  nameWithType: TaiwanCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetLeapMonth(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した年と時代 (年号) の閏月を計算します。"
  remarks: "閏月の概念をサポートする予定表、閏月は特定の月の後、または年のすべての月の後にことができます。 たとえば、<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>メソッドは、1 ~ 13 を示す、指定した日に関連付けられている月の範囲数を返します</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>。 場合は、その年の 8 と 9 番目の月が閏月、<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>メソッド leap 8 番目の月を 9 と 10 の 9 番目の月の 8 番目の月の 8 が返されます</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>。"
  syntax:
    content: public override int GetLeapMonth (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "たくさん。"
    - id: era
      type: System.Int32
      description: "時代 (年号)。"
    return:
      type: System.Int32
      description: "戻り値は常に 0 ため、 <xref href=&quot;System.Globalization.TaiwanCalendar&quot;> </xref>クラスは閏月の概念をサポートしていません。"
  overload: System.Globalization.TaiwanCalendar.GetLeapMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetMonth(DateTime)
  nameWithType: TaiwanCalendar.GetMonth(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した<xref:System.DateTime>。</xref:System.DateTime>の月を返します"
  remarks: ''
  example:
  - "The following code example demonstrates the use of the GetMonth method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_15_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_15_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_15_1.cpp)]"
  syntax:
    content: public override int GetMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>を読み取れません</xref:System.DateTime>。"
    return:
      type: System.Int32
      description: "1 ~ 12 の整数を指定した<xref:System.DateTime>。</xref:System.DateTime>で月を表す"
  overload: System.Globalization.TaiwanCalendar.GetMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: TaiwanCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetMonthsInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した時代 (年号) の指定した年、月の数を返します。"
  remarks: ''
  example:
  - "The following example calls GetMonthsInYear for five years in each era.  \n  \n [!code-vb[System.Globalization.TaiwanCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.t_7_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/m-system.globalization.t_7_1.cpp)]\n [!code-cs[System.Globalization.TaiwanCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/m-system.globalization.t_7_1.cs)]"
  syntax:
    content: public override int GetMonthsInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "年を表す整数。"
    - id: era
      type: System.Int32
      description: "時代 (年号) を表す整数。"
    return:
      type: System.Int32
      description: "指定した時代 (年号) の指定した年の月数です。"
  overload: System.Globalization.TaiwanCalendar.GetMonthsInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>カレンダーでサポートされる範囲外です。       - または -<code>era</code>カレンダーでサポートされる範囲外です。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  id: GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  nameWithType: TaiwanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  fullName: System.Globalization.TaiwanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した<xref:System.DateTime>。</xref:System.DateTime>で日付を含む年間の週を返します。"
  remarks: "設定して、その年の週の数を決定するこのメソッドを使用することができます、`time`年の最後の日のパラメーターです。       <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>プロパティにはために使用するカルチャ固有の値が含まれています、`rule`と`firstDayOfWeek`パラメーター</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> 。       <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName><xref:System.DayOfWeek><xref:System.Globalization.DateTimeFormatInfo.Calendar%2A><xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A>プロパティ</xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A></xref:System.Globalization.DateTimeFormatInfo.Calendar%2A></xref:System.DayOfWeek></xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>       <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName><xref:System.Globalization.CalendarWeekRule><xref:System.Globalization.DateTimeFormatInfo.Calendar%2A><xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A>プロパティ</xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A></xref:System.Globalization.DateTimeFormatInfo.Calendar%2A></xref:System.Globalization.CalendarWeekRule></xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>       たとえば、 <xref:System.Globalization.GregorianCalendar>、 <xref:System.Globalization.Calendar.GetWeekOfYear%2A>1 月 1 日のメソッドは 1 を返します</xref:System.Globalization.Calendar.GetWeekOfYear%2A></xref:System.Globalization.GregorianCalendar>。"
  example:
  - "The following code example shows how the result of <xref:System.Globalization.Calendar.GetWeekOfYear%2A> varies depending on the <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> and <xref:System.Globalization.CalendarWeekRule> values used. If the specified date is the last day of the year, <xref:System.Globalization.Calendar.GetWeekOfYear%2A> returns the total number of weeks in that year.  \n  \n [!code-cs[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/csharp/f44eb65b-9f5c-464b-9830-_1.cs)]\n [!code-vb[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/visualbasic/f44eb65b-9f5c-464b-9830-_1.vb)]\n [!code-cpp[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/cpp/f44eb65b-9f5c-464b-9830-_1.cpp)]"
  syntax:
    content: public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>を読み取れません</xref:System.DateTime>。"
    - id: rule
      type: System.Globalization.CalendarWeekRule
      description: "1 つ、<xref:System.Globalization.CalendarWeekRule>カレンダーの週を定義する値</xref:System.Globalization.CalendarWeekRule>。"
    - id: firstDayOfWeek
      type: System.DayOfWeek
      description: "1 つ、<xref:System.DayOfWeek>を週の最初の日を表す値</xref:System.DayOfWeek>。"
    return:
      type: System.Int32
      description: "正の整数で日付を含む通算週を表す、 <code> time </code>パラメーター。"
  overload: System.Globalization.TaiwanCalendar.GetWeekOfYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>time</code>または<code>firstDayOfWeek</code>カレンダーでサポートされる範囲外です。       - または -<code>rule</code>が無効です<xref:System.Globalization.CalendarWeekRule>値。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: GetYear(DateTime)
  nameWithType: TaiwanCalendar.GetYear(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した<xref:System.DateTime>。</xref:System.DateTime>の年を返します"
  remarks: ''
  example:
  - "The following code example demonstrates the use of the GetYear method.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.t_5_1.cs)]\n [!code-vb[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.t_5_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.t_5_1.cpp)]"
  syntax:
    content: public override int GetYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>を読み取れません</xref:System.DateTime>。"
    return:
      type: System.Int32
      description: "指定した<xref:System.DateTime>。</xref:System.DateTime>年を表す整数"
  overload: System.Globalization.TaiwanCalendar.GetYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した時代 (年号) の指定した日付が閏日であるかどうかを判断します。"
  remarks: "うるう年台湾暦では、グレゴリオ暦で同じ閏年に対応します。 うるう年グレゴリオ暦では、100 で割り切れるを除く、4 で割り切れるグレゴリオ暦の年として定義されます。 400 で割り切れるグレゴリオ暦年がうるう年です。 共通の年度は 365 日を持ち、うるう年が 366 日。       閏日は、閏年であるだけで発生する日です。 たとえば、年 2 月の 29 日は、唯一の leap 日です。"
  example:
  - "The following example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  \n  \n [!code-vb[System.Globalization.TaiwanCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/2b9d593e-4675-4408-97f3-_1.vb)]\n [!code-cpp[System.Globalization.TaiwanCalendar.IsLeapDay#1](~/add/codesnippet/cpp/2b9d593e-4675-4408-97f3-_1.cpp)]\n [!code-cs[System.Globalization.TaiwanCalendar.IsLeapDay#1](~/add/codesnippet/csharp/2b9d593e-4675-4408-97f3-_1.cs)]"
  syntax:
    content: public override bool IsLeapDay (int year, int month, int day, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "年を表す整数。"
    - id: month
      type: System.Int32
      description: "月を表す 1 ~ 12 の整数。"
    - id: day
      type: System.Int32
      description: "日を表す 1 から 31 の整数。"
    - id: era
      type: System.Int32
      description: "時代 (年号) を表す整数。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定された日付が閏日である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Globalization.TaiwanCalendar.IsLeapDay*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>カレンダーでサポートされる範囲外です。       - または -<code>month</code>カレンダーでサポートされる範囲外です。       - または -<code>day</code>カレンダーでサポートされる範囲外です。       - または -<code>era</code>カレンダーでサポートされる範囲外です。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した時代 (年号) の指定した年の指定した月が閏月かどうかを判断します。"
  remarks: "うるう年台湾暦では、グレゴリオ暦で同じ閏年に対応します。 うるう年グレゴリオ暦では、100 で割り切れるを除く、4 で割り切れるグレゴリオ暦の年として定義されます。 400 で割り切れるグレゴリオ暦年がうるう年です。 共通の年度は 365 日を持ち、うるう年が 366 日。       閏月は、うるう年でのみ発生する月全体です。 台湾暦には、閏月がありません。"
  example:
  - "The following example calls IsLeapMonth for all the months in five years in the current era.  \n  \n [!code-cpp[System.Globalization.TaiwanCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/04a1c248-535f-415d-ac02-_1.cpp)]\n [!code-vb[System.Globalization.TaiwanCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/04a1c248-535f-415d-ac02-_1.vb)]\n [!code-cs[System.Globalization.TaiwanCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/04a1c248-535f-415d-ac02-_1.cs)]"
  syntax:
    content: public override bool IsLeapMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "年を表す整数。"
    - id: month
      type: System.Int32
      description: "月を表す 1 ~ 12 の整数。"
    - id: era
      type: System.Int32
      description: "時代 (年号) を表す整数。"
    return:
      type: System.Boolean
      description: "このメソッドは常に返します<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>派生クラスでオーバーライドされない限り、します。"
  overload: System.Globalization.TaiwanCalendar.IsLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>カレンダーでサポートされる範囲外です。       - または -<code>month</code>カレンダーでサポートされる範囲外です。       - または -<code>era</code>カレンダーでサポートされる範囲外です。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: IsLeapYear(Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定した時代 (年号) の指定した年が閏年であるかどうかを判断します。"
  remarks: "うるう年台湾暦では、グレゴリオ暦で同じ閏年に対応します。 うるう年グレゴリオ暦では、100 で割り切れるを除く、4 で割り切れるグレゴリオ暦の年として定義されます。 400 で割り切れるグレゴリオ暦年がうるう年です。 共通の年度は 365 日を持ち、うるう年が 366 日。"
  example:
  - "The following example calls IsLeapYear for five years in each of the eras.  \n  \n [!code-cpp[System.Globalization.TaiwanCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.t_14_1.cpp)]\n [!code-vb[System.Globalization.TaiwanCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.t_14_1.vb)]\n [!code-cs[System.Globalization.TaiwanCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.t_14_1.cs)]"
  syntax:
    content: public override bool IsLeapYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "年を表す整数。"
    - id: era
      type: System.Int32
      description: "時代 (年号) を表す整数。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定した年が閏年である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Globalization.TaiwanCalendar.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>カレンダーでサポートされる範囲外です。       - または -<code>era</code>カレンダーでサポートされる範囲外です。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: MaxSupportedDateTime
  nameWithType: TaiwanCalendar.MaxSupportedDateTime
  fullName: System.Globalization.TaiwanCalendar.MaxSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "最新の日付と時刻でサポートされている取得、 <xref href=&quot;System.Globalization.TaiwanCalendar&quot;> </xref>クラスです。"
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.t_0_1.cs)]\n [!code-cpp[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.t_0_1.cpp)]\n [!code-vb[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.t_0_1.vb)]"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "最新の日付と時刻でサポートされている、 <xref href=&quot;System.Globalization.TaiwanCalendar&quot;> </xref>紀元 9999 年 12 月 31 日の最終時と同じであるクラス グレゴリオ暦です。"
  overload: System.Globalization.TaiwanCalendar.MaxSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: MinSupportedDateTime
  nameWithType: TaiwanCalendar.MinSupportedDateTime
  fullName: System.Globalization.TaiwanCalendar.MinSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "最初の日付と時刻でサポートされている取得、 <xref href=&quot;System.Globalization.TaiwanCalendar&quot;> </xref>クラスです。"
  remarks: "Microsoft Visual Basic は、<xref:System.DateTime>西暦 0001 年 1 月 1 日</xref:System.DateTime>でサポートされている日付の最小値で指定された時間として 1 日の時間を表します ただし、<xref:System.Globalization.TaiwanCalendar>クラスがその日付の最小値をサポートしていません</xref:System.Globalization.TaiwanCalendar>。 その結果、アプリケーションが、現在の暦を使用して時刻の書式を設定するメソッドを呼び出す、書式指定子で指定されていない場合は、ISO 8601 並べ替え可能な (&quot;s&quot;) 書式指定は日付/時刻既定の [全般] (&quot;G&quot;) の日付/時刻のパターン書式指定子ではなくパターン書式指定子。 詳細については、次を参照してください。[標準の日付と時刻の書式指定文字列](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.t_1_1.cs)]\n [!code-cpp[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.t_1_1.cpp)]\n [!code-vb[System.Globalization.TaiwanCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.t_1_1.vb)]"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "最も古い日付と時刻でサポートされている、 <xref href=&quot;System.Globalization.TaiwanCalendar&quot;> </xref> 1912 年 1 月 1 日西暦の最初の瞬間に相当クラス グレゴリオ暦です。"
  overload: System.Globalization.TaiwanCalendar.MinSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返します、<xref:System.DateTime>指定した日付と時刻を指定した時代 (年号) に設定されている</xref:System.DateTime>。"
  syntax:
    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "年を表す整数。"
    - id: month
      type: System.Int32
      description: "月を表す 1 ~ 12 の整数。"
    - id: day
      type: System.Int32
      description: "日を表す 1 から 31 の整数。"
    - id: hour
      type: System.Int32
      description: "時間を表す 0 ~ 23 の整数。"
    - id: minute
      type: System.Int32
      description: "分を表す 0 ~ 59 の整数。"
    - id: second
      type: System.Int32
      description: "秒を表す 0 ~ 59 の整数。"
    - id: millisecond
      type: System.Int32
      description: "ミリ秒を表す 0 ~ 999 の整数。"
    - id: era
      type: System.Int32
      description: "時代 (年号) を表す整数。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>指定した日付と現在の時代 (年号) の時刻に設定されている</xref:System.DateTime>。"
  overload: System.Globalization.TaiwanCalendar.ToDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>カレンダーでサポートされる範囲外です。       - または -<code>month</code>カレンダーでサポートされる範囲外です。       - または -<code>day</code>カレンダーでサポートされる範囲外です。       - または -<code>hour</code>が 23 より大きいか、0 より小さい。       - または -<code>minute</code>が 59 より大きいか、0 より小さい。       - または -<code>second</code>が 59 より大きいか、0 より小さい。       - または -<code>millisecond</code>がゼロ未満か 999 を超えています。       - または -<code>era</code>カレンダーでサポートされる範囲外です。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: ToFourDigitYear(Int32)
  nameWithType: TaiwanCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.TaiwanCalendar.ToFourDigitYear(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "使用して、指定された年を&4; 桁の年に変換、<xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax*>プロパティを適切な世紀を決定します</xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax*>。"
  remarks: "このメソッドは実装<xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>。</xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>       この実装は常の値を返します台湾暦の年より小さい&4; 桁では一般的であるため、`year`パラメーター。       ToFourDigitYear には、2 桁または&4; 桁の年のいずれかがサポートしています。 値によると 4 桁の値に変換するメソッドを 2 桁の年の値 (100 よりも小さい) を渡すと、<xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax%2A>適切な 4 桁の年を表す値</xref:System.Globalization.TaiwanCalendar.TwoDigitYearMax%2A>。 ToFourDigitYear にサポートされている暦の範囲内にある&4; 桁の年の値を提供すると、アプリケーションの場合は、実際の入力値を返します。 アプリケーションはサポートされているカレンダー範囲では、4 桁の値が指定した場合、または負の値が渡された場合は、メソッドは例外をスローします。"
  syntax:
    content: public override int ToFourDigitYear (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "変換する年を表す&2; 桁または&4; 桁の整数。"
    return:
      type: System.Int32
      description: "整数の&4; 桁表記を含んでいる<code> year</code>です。"
  overload: System.Globalization.TaiwanCalendar.ToFourDigitYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>カレンダーでサポートされる範囲外です。"
  platform:
  - net462
- uid: System.Globalization.TaiwanCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.TaiwanCalendar
  langs:
  - csharp
  name: TwoDigitYearMax
  nameWithType: TaiwanCalendar.TwoDigitYearMax
  fullName: System.Globalization.TaiwanCalendar.TwoDigitYearMax
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "取得または 2 桁の年を表すことができる 100 年の範囲の最後の年を設定します。"
  remarks: "このプロパティは<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>。</xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>を実装します。       台湾暦の年は 4 桁よりも小さく、通常、この実装 99 は既定で返しますいて<xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>。</xref:System.Globalization.TaiwanCalendar.ToFourDigitYear%2A>の戻り値には影響しません"
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    return:
      type: System.Int32
      description: "2 桁の年を表すことができる 100 年の範囲の最後の年。"
  overload: System.Globalization.TaiwanCalendar.TwoDigitYearMax*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定操作で指定された値は、99 より小さいです。       - または - 設定操作で指定された値がより大きい<xref uid=&quot;langword_csharp_MaxSupportedDateTime.Year&quot; name=&quot;MaxSupportedDateTime.Year&quot; href=&quot;&quot;></xref>です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "セット操作の現在のインスタンスは読み取り専用です。"
  platform:
  - net462
references:
- uid: System.Globalization.Calendar
  isExternal: false
  name: System.Globalization.Calendar
- uid: System.TypeInitializationException
  isExternal: true
  name: System.TypeInitializationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Globalization.TaiwanCalendar.#ctor
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: TaiwanCalendar()
  nameWithType: TaiwanCalendar.TaiwanCalendar()
  fullName: System.Globalization.TaiwanCalendar.TaiwanCalendar()
- uid: System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AddMonths(DateTime,Int32)
  nameWithType: TaiwanCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.TaiwanCalendar.AddMonths(DateTime,Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AddYears(DateTime,Int32)
  nameWithType: TaiwanCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.TaiwanCalendar.AddYears(DateTime,Int32)
- uid: System.Globalization.TaiwanCalendar.AlgorithmType
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: TaiwanCalendar.AlgorithmType
  fullName: System.Globalization.TaiwanCalendar.AlgorithmType
- uid: System.Globalization.CalendarAlgorithmType
  parent: System.Globalization
  isExternal: false
  name: CalendarAlgorithmType
  nameWithType: CalendarAlgorithmType
  fullName: System.Globalization.CalendarAlgorithmType
- uid: System.Globalization.TaiwanCalendar.Eras
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: Eras
  nameWithType: TaiwanCalendar.Eras
  fullName: System.Globalization.TaiwanCalendar.Eras
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfMonth(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfMonth(DateTime)
- uid: System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfWeek(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfWeek(DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfYear(DateTime)
  nameWithType: TaiwanCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetDayOfYear(DateTime)
- uid: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetDaysInMonth(Int32,Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDaysInYear(Int32,Int32)
  nameWithType: TaiwanCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetDaysInYear(Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.GetEra(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetEra(DateTime)
  nameWithType: TaiwanCalendar.GetEra(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetEra(DateTime)
- uid: System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetLeapMonth(Int32,Int32)
  nameWithType: TaiwanCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetLeapMonth(Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetMonth(DateTime)
  nameWithType: TaiwanCalendar.GetMonth(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetMonth(DateTime)
- uid: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: TaiwanCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.GetMonthsInYear(Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  nameWithType: TaiwanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  fullName: System.Globalization.TaiwanCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
- uid: System.Globalization.CalendarWeekRule
  parent: System.Globalization
  isExternal: true
  name: CalendarWeekRule
  nameWithType: CalendarWeekRule
  fullName: System.Globalization.CalendarWeekRule
- uid: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetYear(DateTime)
  nameWithType: TaiwanCalendar.GetYear(DateTime)
  fullName: System.Globalization.TaiwanCalendar.GetYear(DateTime)
- uid: System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapMonth(Int32,Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapYear(Int32,Int32)
  nameWithType: TaiwanCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.IsLeapYear(Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.MaxSupportedDateTime
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: TaiwanCalendar.MaxSupportedDateTime
  fullName: System.Globalization.TaiwanCalendar.MaxSupportedDateTime
- uid: System.Globalization.TaiwanCalendar.MinSupportedDateTime
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: TaiwanCalendar.MinSupportedDateTime
  fullName: System.Globalization.TaiwanCalendar.MinSupportedDateTime
- uid: System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: TaiwanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.TaiwanCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: ToFourDigitYear(Int32)
  nameWithType: TaiwanCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.TaiwanCalendar.ToFourDigitYear(Int32)
- uid: System.Globalization.TaiwanCalendar.TwoDigitYearMax
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: TaiwanCalendar.TwoDigitYearMax
  fullName: System.Globalization.TaiwanCalendar.TwoDigitYearMax
- uid: System.Globalization.TaiwanCalendar.#ctor*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: TaiwanCalendar
  nameWithType: TaiwanCalendar.TaiwanCalendar
- uid: System.Globalization.TaiwanCalendar.AddMonths*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AddMonths
  nameWithType: TaiwanCalendar.AddMonths
- uid: System.Globalization.TaiwanCalendar.AddYears*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AddYears
  nameWithType: TaiwanCalendar.AddYears
- uid: System.Globalization.TaiwanCalendar.AlgorithmType*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: TaiwanCalendar.AlgorithmType
- uid: System.Globalization.TaiwanCalendar.Eras*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: Eras
  nameWithType: TaiwanCalendar.Eras
- uid: System.Globalization.TaiwanCalendar.GetDayOfMonth*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfMonth
  nameWithType: TaiwanCalendar.GetDayOfMonth
- uid: System.Globalization.TaiwanCalendar.GetDayOfWeek*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfWeek
  nameWithType: TaiwanCalendar.GetDayOfWeek
- uid: System.Globalization.TaiwanCalendar.GetDayOfYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDayOfYear
  nameWithType: TaiwanCalendar.GetDayOfYear
- uid: System.Globalization.TaiwanCalendar.GetDaysInMonth*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDaysInMonth
  nameWithType: TaiwanCalendar.GetDaysInMonth
- uid: System.Globalization.TaiwanCalendar.GetDaysInYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetDaysInYear
  nameWithType: TaiwanCalendar.GetDaysInYear
- uid: System.Globalization.TaiwanCalendar.GetEra*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetEra
  nameWithType: TaiwanCalendar.GetEra
- uid: System.Globalization.TaiwanCalendar.GetLeapMonth*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetLeapMonth
  nameWithType: TaiwanCalendar.GetLeapMonth
- uid: System.Globalization.TaiwanCalendar.GetMonth*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetMonth
  nameWithType: TaiwanCalendar.GetMonth
- uid: System.Globalization.TaiwanCalendar.GetMonthsInYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetMonthsInYear
  nameWithType: TaiwanCalendar.GetMonthsInYear
- uid: System.Globalization.TaiwanCalendar.GetWeekOfYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetWeekOfYear
  nameWithType: TaiwanCalendar.GetWeekOfYear
- uid: System.Globalization.TaiwanCalendar.GetYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: GetYear
  nameWithType: TaiwanCalendar.GetYear
- uid: System.Globalization.TaiwanCalendar.IsLeapDay*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapDay
  nameWithType: TaiwanCalendar.IsLeapDay
- uid: System.Globalization.TaiwanCalendar.IsLeapMonth*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapMonth
  nameWithType: TaiwanCalendar.IsLeapMonth
- uid: System.Globalization.TaiwanCalendar.IsLeapYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: IsLeapYear
  nameWithType: TaiwanCalendar.IsLeapYear
- uid: System.Globalization.TaiwanCalendar.MaxSupportedDateTime*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: TaiwanCalendar.MaxSupportedDateTime
- uid: System.Globalization.TaiwanCalendar.MinSupportedDateTime*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: TaiwanCalendar.MinSupportedDateTime
- uid: System.Globalization.TaiwanCalendar.ToDateTime*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: ToDateTime
  nameWithType: TaiwanCalendar.ToDateTime
- uid: System.Globalization.TaiwanCalendar.ToFourDigitYear*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: ToFourDigitYear
  nameWithType: TaiwanCalendar.ToFourDigitYear
- uid: System.Globalization.TaiwanCalendar.TwoDigitYearMax*
  parent: System.Globalization.TaiwanCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: TaiwanCalendar.TwoDigitYearMax
