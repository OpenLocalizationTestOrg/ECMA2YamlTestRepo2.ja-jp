### YamlMime:ManagedReference
items:
- uid: System.Transactions.Transaction
  id: Transaction
  children:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  langs:
  - csharp
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
  type: Class
  summary: "トランザクションを表します。"
  remarks: "<xref:System.Transactions>名前空間には明示的なプログラミング モデルに基づいて、トランザクション クラスだけでなく、暗黙的なプログラミング モデルを使用して、<xref:System.Transactions.TransactionScope>トランザクションを自動的にインフラストラクチャを管理するクラス</xref:System.Transactions.TransactionScope></xref:System.Transactions>。 開発のため、簡単に暗黙的なモデルを使用することを強くお勧めします。 最初に、次を参照してください、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)トピックです。 トランザクション アプリケーションの作成の詳細については、次を参照してください。 [A トランザクション アプリケーションの記述](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)です。       Transaction クラスには、リソース マネージャーの参加を実装している開発者によって使用されるメソッドが含まれています。 トランザクションを複製および現在のトランザクション コンテキストを制御するための機能も提供します。 現在のトランザクションを取得するには、1 つ設定されている場合、静的<xref:System.Transactions.Transaction.Current%2A>プロパティ</xref:System.Transactions.Transaction.Current%2A>。"
  syntax:
    content: 'public class Transaction : IDisposable, System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Clone
  id: Clone
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Clone()
  nameWithType: Transaction.Clone()
  fullName: System.Transactions.Transaction.Clone()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションの複製を作成します。"
  remarks: "トランザクションを渡すには、複製が作成されます。  たとえば、たくないに渡す、<xref:System.Transactions.CommittableTransaction>他のアプリケーションに対するたくない、トランザクションをコミットするためです</xref:System.Transactions.CommittableTransaction>。  マーシャ リングやトランザクションをシリアル化しようとする場合、複製する自動的に作成されます。"
  syntax:
    content: public System.Transactions.Transaction Clone ();
    parameters: []
    return:
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;> </xref>現在のトランザクション オブジェクトのコピーであります。"
  overload: System.Transactions.Transaction.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Current
  id: Current
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Current
  nameWithType: Transaction.Current
  fullName: System.Transactions.Transaction.Current
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "取得またはアンビエント トランザクションを設定します。"
  remarks: "アンビエント トランザクションの詳細については、「TransactionScopeOption を使用してトランザクション フローを管理する」セクションを参照してください、[トランザクション スコープを使用して、暗黙的なトランザクションを実装する](~/add/includes/ajax-current-ext-md.md)トピックです。       使用する必要がありますが、このプロパティを使用してアンビエント トランザクションを設定することができます、<xref:System.Transactions.TransactionScope>可能な場合は、アンビエント トランザクションを操作するオブジェクト</xref:System.Transactions.TransactionScope>。       このプロパティは、静的なスレッドです。 内には、このプロパティを使用してアンビエント トランザクションを変更するかどうか、 <xref:System.Transactions.TransactionScope>、<xref:System.InvalidOperationException>場合にスローされる<xref:System.Transactions.TransactionScope.Dispose%2A>が呼び出されると、アンビエント トランザクションの前の値を復元します</xref:System.Transactions.TransactionScope.Dispose%2A></xref:System.InvalidOperationException></xref:System.Transactions.TransactionScope>。"
  syntax:
    content: public static System.Transactions.Transaction Current { get; set; }
    return:
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;> </xref>現在のトランザクションを説明します。"
  overload: System.Transactions.Transaction.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  id: DependentClone(System.Transactions.DependentCloneOption)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: DependentClone(DependentCloneOption)
  nameWithType: Transaction.DependentClone(DependentCloneOption)
  fullName: System.Transactions.Transaction.DependentClone(DependentCloneOption)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションの依存する複製を作成します。"
  remarks: "従属トランザクションは、トランザクションの結果が複製元となるトランザクションの結果によって異なります。       `cloneoption`パラメーターが作成する従属トランザクションの種類を制御します。 依存するトランザクションが<xref:System.Transactions.DependentCloneOption>ブロックのトランザクションがタイムアウトするまでのトランザクションまたは<xref:System.Transactions.DependentTransaction.Complete%2A><xref:System.Transactions.DependentTransaction>。</xref:System.Transactions.DependentTransaction>で呼び出されると</xref:System.Transactions.DependentTransaction.Complete%2A>コミット処理</xref:System.Transactions.DependentCloneOption>で作成された場合 使用して作成された場合<xref:System.Transactions.DependentCloneOption>場合、トランザクションは自動的に中止<xref:System.Transactions.CommittableTransaction.Commit%2A><xref:System.Transactions.DependentTransaction.Complete%2A><xref:System.Transactions.DependentTransaction>.</xref:System.Transactions.DependentTransaction>で呼び出される</xref:System.Transactions.DependentTransaction.Complete%2A>前に呼び出されます</xref:System.Transactions.CommittableTransaction.Commit%2A></xref:System.Transactions.DependentCloneOption>"
  example:
  - "The following example shows you how to create a dependent transaction.  \n  \n [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/a081f0f4-5473-43fc-b7fe-_1.vb)]\n [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/a081f0f4-5473-43fc-b7fe-_1.cs)]"
  syntax:
    content: public System.Transactions.DependentTransaction DependentClone (System.Transactions.DependentCloneOption cloneOption);
    parameters:
    - id: cloneOption
      type: System.Transactions.DependentCloneOption
      description: "A <xref href=&quot;System.Transactions.DependentCloneOption&quot;> </xref>作成に依存するトランザクションの種類を制御します。"
    return:
      type: System.Transactions.DependentTransaction
      description: "A <xref href=&quot;System.Transactions.DependentTransaction&quot;> </xref>を表す依存クローンします。"
  overload: System.Transactions.Transaction.DependentClone*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Dispose
  id: Dispose
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Dispose()
  nameWithType: Transaction.Dispose()
  fullName: System.Transactions.Transaction.Dispose()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "オブジェクトによって保持されているリソースを解放します。"
  remarks: "設定して、アンビエント トランザクションを変更した場合<xref:System.Transactions.Transaction.Current%2A>内、 <xref:System.Transactions.TransactionScope>、<xref:System.InvalidOperationException>場合にスローされる<xref:System.Transactions.TransactionScope.Dispose%2A>が呼び出されると、アンビエント トランザクションの前の値を復元します</xref:System.Transactions.TransactionScope.Dispose%2A></xref:System.InvalidOperationException></xref:System.Transactions.TransactionScope></xref:System.Transactions.Transaction.Current%2A>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Transactions.Transaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  id: EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションに参加する&2; フェーズ コミットをサポートする永続的なリソース マネージャーを参加させます。"
  remarks: "永続参加リストを持つリソース マネージャーは、エラーが発生した場合、回復を実行できる必要があります。 回復の詳細については、次を参照してください。[を実行する回復](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)です。 揮発性および持続性のあるリソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [A リソース マネージャーの実装](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)です。  リソース マネージャーが通知をコミットし、2 フェーズ コミットのコミットの準備にどのように応答する方法の詳細については、次を参照してください。 [Single-Phase で、トランザクションのコミットとマルチ フェーズ](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)です。       このメソッドをトランザクションに参加するために参加しているリソース マネージャーで定義されたメソッドに対応する&2; つのフェーズ コミットの通知を受信する、<xref:System.Transactions.IEnlistmentNotification>インターフェイス</xref:System.Transactions.IEnlistmentNotification>。"
  syntax:
    content: public System.Transactions.Enlistment EnlistDurable (Guid resourceManagerIdentifier, System.Transactions.IEnlistmentNotification enlistmentNotification, System.Transactions.EnlistmentOptions enlistmentOptions);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "リソース マネージャーのエラーの後も維持または再起動する必要がありますリソース マネージャーの一意の識別子。"
    - id: enlistmentNotification
      type: System.Transactions.IEnlistmentNotification
      description: "実装するオブジェクト、 <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;> </xref>インターフェイスが&2; フェーズ コミットの通知を受信します。"
    - id: enlistmentOptions
      type: System.Transactions.EnlistmentOptions
      description: "<xref href=&quot;System.Transactions.EnlistmentOptions&quot;></xref>リソース マネージャーが準備フェーズ中に追加の処理を実行する場合。"
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref>参加リストを記述するオブジェクト。"
  overload: System.Transactions.Transaction.EnlistDurable*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  id: EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションに参加する&1; つのフェーズのコミットの最適化をサポートする永続的なリソース マネージャーを参加させます。"
  remarks: "永続参加リストを持つリソース マネージャーは、エラーが発生した場合、回復を実行できる必要があります。 回復の詳細については、次を参照してください。[を実行する回復](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)です。 揮発性および持続性のあるリソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [A リソース マネージャーの実装](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)です。       このメソッド、リソース マネージャーの実装に参加させた場合でもは保証されません単一フェーズのコミットを受け取ることに注意してください。 トランザクション マネージャーは、2 フェーズ コミットの通知を代わりに送信することができますも。 単一フェーズのコミットの最適化の詳細については、次を参照してください。[最適化を使用して単一フェーズのコミットが、昇格可能な&1; つのフェーズ通知](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)です。"
  syntax:
    content: public System.Transactions.Enlistment EnlistDurable (Guid resourceManagerIdentifier, System.Transactions.ISinglePhaseNotification singlePhaseNotification, System.Transactions.EnlistmentOptions enlistmentOptions);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "リソース マネージャーのエラーの後も維持または再起動する必要がありますリソース マネージャーの一意の識別子。"
    - id: singlePhaseNotification
      type: System.Transactions.ISinglePhaseNotification
      description: "実装するオブジェクト、 <xref href=&quot;System.Transactions.ISinglePhaseNotification&quot;> </xref>単一フェーズのコミットおよび&2; フェーズ コミットの通知を受信できる必要があるインターフェイスです。"
    - id: enlistmentOptions
      type: System.Transactions.EnlistmentOptions
      description: "<xref href=&quot;System.Transactions.EnlistmentOptions&quot;></xref>リソース マネージャーが準備フェーズ中に追加の処理を実行する場合。"
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref>参加リストを記述するオブジェクト。"
  overload: System.Transactions.Transaction.EnlistDurable*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  id: EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "昇格可能な単一フェーズの参加リスト (PSPE) を使用して内部トランザクションを持つリソース マネージャーを参加させます。"
  remarks: "トランザクションの参加リストは揮発性です。つまり、参加者の障害は保持されません。 さらに、このメソッドは、のみ制御をエスカレートするトランザクション マネージャーを提示は、エスカレーション自体とは限りません。 エスカレーションが失敗した場合、ユーザーは通知されず、トランザクションがロールバックします。       パラメーター`promotableSinglePhaseNotification`リソース マネージャーの内部トランザクションをコミットしようとしての結果、トランザクション マネージャーと通信するために使用します。  データの矛盾が報告された場合、トランザクション マネージャーは、例外をスローします。 場合、<xref:System.Transactions.TransactionStatus>結果が報告された、トランザクション マネージャーが、独自の社内参加リストの結果の通知を検索し、報告された応答を無視します</xref:System.Transactions.TransactionStatus>。       参加リストと、トランザクションの昇格の詳細についてを参照してください[トランザクション管理のエスカレーション](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)です。 PSPE の詳細については、次を参照してください。[最適化を使用して&1; つのフェーズをコミットし、昇格可能な&1; つのフェーズ通知](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)です。       **注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction>されないようにするで、信頼されていないコードから呼び出されますただし、直前の呼び出し元だけが所有する必要が、`FullTrust`アクセス許可セット。</xref:System.Security.Permissions.SecurityAction> 。"
  syntax:
    content: public bool EnlistPromotableSinglePhase (System.Transactions.IPromotableSinglePhaseNotification promotableSinglePhaseNotification);
    parameters:
    - id: promotableSinglePhaseNotification
      type: System.Transactions.IPromotableSinglePhaseNotification
      description: "A <xref href=&quot;System.Transactions.IPromotableSinglePhaseNotification&quot;> </xref>参加要素によって実装されるインターフェイス。"
    return:
      type: System.Boolean
      description: "A <xref href=&quot;System.Transactions.SinglePhaseEnlistment&quot;> </xref>インターフェイスを実装します。"
  overload: System.Transactions.Transaction.EnlistPromotableSinglePhase*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  id: EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "昇格可能な単一フェーズの参加リスト (PSPE) を使用して内部トランザクションを持つリソース マネージャーを参加させます。"
  remarks: "値が指定されている場合、`promoterType`パラメーターは`TransactionInterop.PromoterTypeDtc`、トランザクション**必要があります**MSDTC によって昇格され、`byte[]`から返される、`IPromotableSinglePhaseNotification.Promote`メソッド**必要があります**MSDTC トランザクション伝達トークンであります。       値が指定されている場合、`promoterType`パラメーターは**いない**`TransactionInterop.PromoterTypeDTC`、MSDTC によりがの呼び出し元の実装ではなく、トランザクションは昇格されません`IPromotableSinglePhaseNotification`です。 返すトランザクションの後続の処理のセットがある場合、この呼び出しが成功すると、`TransactionPromotionException`です。 これらの操作:- `Transaction.EnlistDurable`       -    `TransactionInterop.GetDtcTransaction`       -    `TransactionInterop.GetExportCookie`       -    `TransctionInterop.GetTransmitterPropagationToken` -トランザクション オブジェクトのシリアル化"
  syntax:
    content: public bool EnlistPromotableSinglePhase (System.Transactions.IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Guid promoterType);
    parameters:
    - id: promotableSinglePhaseNotification
      type: System.Transactions.IPromotableSinglePhaseNotification
      description: "A <xref href=&quot;System.Transactions.IPromotableSinglePhaseNotification&quot;> </xref>参加要素によって実装されるインターフェイス。"
    - id: promoterType
      type: System.Guid
      description: "分散トランザクション プロセッサの種類。"
    return:
      type: System.Boolean
      description: "A <xref href=&quot;System.Transactions.SinglePhaseEnlistment&quot;> </xref>インターフェイスを実装します。"
  overload: System.Transactions.Transaction.EnlistPromotableSinglePhase*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  id: EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションに参加する&2; フェーズ コミットをサポートしている揮発性リソース マネージャーを参加させます。"
  remarks: "揮発性リソース マネージャーでは、関与してトランザクションを完了する障害からの復旧はできません。 トランザクションで永続参加リストを取得するを使用して、<xref:System.Transactions.Transaction.EnlistDurable%2A>メソッド</xref:System.Transactions.Transaction.EnlistDurable%2A>。       このメソッドをトランザクションに参加するために参加しているリソース マネージャーで定義されたメソッドに対応する&2; つのフェーズ コミットの通知を受信する、<xref:System.Transactions.IEnlistmentNotification>インターフェイス</xref:System.Transactions.IEnlistmentNotification>。"
  example:
  - "The following example shows an implementation of <xref:System.Transactions.IEnlistmentNotification> interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.  \n  \n [!code-cs[Tx_Enlist#1](~/add/codesnippet/csharp/1d69bab4-4268-46d9-8f3f-_1.cs)]\n [!code-vb[Tx_Enlist#1](~/add/codesnippet/visualbasic/1d69bab4-4268-46d9-8f3f-_1.vb)]"
  syntax:
    content: public System.Transactions.Enlistment EnlistVolatile (System.Transactions.IEnlistmentNotification enlistmentNotification, System.Transactions.EnlistmentOptions enlistmentOptions);
    parameters:
    - id: enlistmentNotification
      type: System.Transactions.IEnlistmentNotification
      description: "実装するオブジェクト、 <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;> </xref>インターフェイスが&2; フェーズ コミットの通知を受信します。"
    - id: enlistmentOptions
      type: System.Transactions.EnlistmentOptions
      description: "<xref href=&quot;System.Transactions.EnlistmentOptions&quot;></xref>リソース マネージャーが準備フェーズ中に追加の処理を実行する場合。"
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref>参加リストを記述するオブジェクト。"
  overload: System.Transactions.Transaction.EnlistVolatile*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  id: EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションに参加する&1; つのフェーズのコミットの最適化をサポートする揮発性リソース マネージャーを参加させます。"
  remarks: "揮発性リソース マネージャーでは、関与してトランザクションを完了する障害からの復旧はできません。 トランザクションで永続参加リストを取得するを使用して、<xref:System.Transactions.Transaction.EnlistDurable%2A>メソッド</xref:System.Transactions.Transaction.EnlistDurable%2A>。 揮発性および持続性のあるリソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [A リソース マネージャーの実装](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)です。 リソース マネージャーが通知をコミットし、コミットの準備にどのように応答する方法の詳細については、次を参照してください。 [Single-Phase で、トランザクションのコミットとマルチ フェーズ](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)です。       このメソッド、リソース マネージャーの実装に参加させた場合でもは保証されません単一フェーズのコミットを受け取ることに注意してください。 トランザクション マネージャーは、2 フェーズ コミットの通知を代わりに送信することができますも。 単一フェーズのコミットの最適化の詳細については、次を参照してください。[最適化を使用して単一フェーズのコミットが、昇格可能な&1; つのフェーズ通知](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)です。"
  syntax:
    content: public System.Transactions.Enlistment EnlistVolatile (System.Transactions.ISinglePhaseNotification singlePhaseNotification, System.Transactions.EnlistmentOptions enlistmentOptions);
    parameters:
    - id: singlePhaseNotification
      type: System.Transactions.ISinglePhaseNotification
      description: "実装するオブジェクト、 <xref href=&quot;System.Transactions.ISinglePhaseNotification&quot;> </xref>単一フェーズのコミットおよび&2; フェーズ コミットの通知を受信できる必要があるインターフェイスです。"
    - id: enlistmentOptions
      type: System.Transactions.EnlistmentOptions
      description: "<xref href=&quot;System.Transactions.EnlistmentOptions&quot;></xref>リソース マネージャーが準備フェーズ中に追加の処理を実行する場合。"
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref>参加リストを記述するオブジェクト。"
  overload: System.Transactions.Transaction.EnlistVolatile*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Transaction.Equals(Object)
  fullName: System.Transactions.Transaction.Equals(Object)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "このトランザクションと、指定したオブジェクトが等しいかどうかを判断します。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "このインスタンスと比較するオブジェクト。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<code> obj </code>このトランザクションが同じである、それ以外の場合と<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Transactions.Transaction.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.GetHashCode
  id: GetHashCode
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Transaction.GetHashCode()
  fullName: System.Transactions.Transaction.GetHashCode()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "このインスタンスのハッシュ コードを返します。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "32 ビット符号付き整数ハッシュ コード。"
  overload: System.Transactions.Transaction.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.GetPromotedToken
  id: GetPromotedToken
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: GetPromotedToken()
  nameWithType: Transaction.GetPromotedToken()
  fullName: System.Transactions.Transaction.GetPromotedToken()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "取得、`byte[]`によって返される、`Promote`メソッド、トランザクションを昇格するときにします。"
  remarks: "このメソッドでは、既に昇格していない場合は、トランザクションの昇格の原因の副作用が発生します。       返されたの形式`byte[]`の値によって定義された、`Transation.PromoterType`プロパティです。 場合の値、`Transaction.PromoterType`プロパティは`TransactionInterop.PromoterTypeDtc`または`Guid.Empty`、 `byte[]` MSDTC トランスミッター伝達トークンは、このメソッドによって返されます。 その他の値を`Transaction.PromoterType`プロパティの呼び出し元が定義されている形式を指定する`Transaction.EnlistPromotableSinglePhase`プロパティ型の値を指定します。 昇格を解釈するためにトークンをこの後者の場合にする必要が行われたコードのマニュアルを参照、`EnlistPromotableSinglePhase`呼び出します。"
  syntax:
    content: public byte[] GetPromotedToken ();
    parameters: []
    return:
      type: System.Byte[]
      description: "`byte[]`によって返される、`Promote`メソッド、トランザクションを昇格するときにします。"
  overload: System.Transactions.Transaction.GetPromotedToken*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.IsolationLevel
  id: IsolationLevel
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: IsolationLevel
  nameWithType: Transaction.IsolationLevel
  fullName: System.Transactions.Transaction.IsolationLevel
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションの分離レベルを取得します。"
  remarks: "トランザクションの分離レベルは、完了の他のトランザクションがトランザクションの前に揮発性のデータに対して持つアクセス レベルを決定します。 分離レベルの詳細については、のドキュメントを参照して、<xref:System.Transactions.IsolationLevel>列挙体です</xref:System.Transactions.IsolationLevel>。"
  syntax:
    content: public System.Transactions.IsolationLevel IsolationLevel { get; }
    return:
      type: System.Transactions.IsolationLevel
      description: "1 つ、 <xref href=&quot;System.Transactions.IsolationLevel&quot;> </xref>をトランザクションの分離レベルを示す値。"
  overload: System.Transactions.Transaction.IsolationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  id: op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: op_Equality(Transaction,Transaction)
  nameWithType: Transaction.op_Equality(Transaction,Transaction)
  fullName: System.Transactions.Transaction.op_Equality(Transaction,Transaction)
  type: Operator
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "指定した&2; つあるかどうかをテスト<xref href=&quot;System.Transactions.Transaction&quot;></xref>が等価です。"
  syntax:
    content: public static bool op_Equality (System.Transactions.Transaction x, System.Transactions.Transaction y);
    parameters:
    - id: x
      type: System.Transactions.Transaction
      description: "<xref href=&quot;System.Transactions.Transaction&quot;> </xref>等値演算子の左側にあるインスタンスです。"
    - id: y
      type: System.Transactions.Transaction
      description: "<xref href=&quot;System.Transactions.Transaction&quot;> </xref>等値演算子の右側にあるインスタンスです。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>x</code> and <code>y</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Transactions.Transaction.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  id: op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: op_Inequality(Transaction,Transaction)
  nameWithType: Transaction.op_Inequality(Transaction,Transaction)
  fullName: System.Transactions.Transaction.op_Inequality(Transaction,Transaction)
  type: Operator
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "示す値を返します&2; つあるかどうか<xref href=&quot;System.Transactions.Transaction&quot;></xref>インスタンスが等しくないです。"
  syntax:
    content: public static bool op_Inequality (System.Transactions.Transaction x, System.Transactions.Transaction y);
    parameters:
    - id: x
      type: System.Transactions.Transaction
      description: "<xref href=&quot;System.Transactions.Transaction&quot;> </xref>非等値演算子の左側にあるインスタンスです。"
    - id: y
      type: System.Transactions.Transaction
      description: "<xref href=&quot;System.Transactions.Transaction&quot;> </xref>非等値演算子の右側にあるインスタンスです。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>x</code> and <code>y</code> are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Transactions.Transaction.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  id: PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.2 以降のバージョンでサポート]      昇格し、トランザクションに参加する 2 フェーズ コミットをサポートする永続的なリソース マネージャーを参加させます。"
  syntax:
    content: public System.Transactions.Enlistment PromoteAndEnlistDurable (Guid resourceManagerIdentifier, System.Transactions.IPromotableSinglePhaseNotification promotableNotification, System.Transactions.ISinglePhaseNotification enlistmentNotification, System.Transactions.EnlistmentOptions enlistmentOptions);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "リソース マネージャーのエラーの後も維持または再起動する必要がありますリソース マネージャーの一意の識別子。"
    - id: promotableNotification
      type: System.Transactions.IPromotableSinglePhaseNotification
      description: "リソース マネージャーの内部非分散トランザクションのコミット代理として機能するオブジェクト。"
    - id: enlistmentNotification
      type: System.Transactions.ISinglePhaseNotification
      description: "実装するオブジェクト、 <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;> </xref>インターフェイスが&2; フェーズ コミットの通知を受信します。"
    - id: enlistmentOptions
      type: System.Transactions.EnlistmentOptions
      description: "<xref href=&quot;System.Transactions.EnlistmentOptions&quot;></xref>リソース マネージャーが準備フェーズ中に追加の処理を実行する場合。"
    return:
      type: System.Transactions.Enlistment
      description: "[.NET Framework 4.5.2 以降のバージョンでサポート]      昇格し、トランザクションに参加する 2 フェーズ コミットをサポートする永続的なリソース マネージャーを参加させます。"
  overload: System.Transactions.Transaction.PromoteAndEnlistDurable*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.PromoterType
  id: PromoterType
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: PromoterType
  nameWithType: Transaction.PromoterType
  fullName: System.Transactions.Transaction.PromoterType
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "形式を一意に識別、`byte[]`トランザクションを昇格するときに、Promote メソッドで返されます。"
  remarks: "トランザクションがまだ昇格されていない、昇格可能な単一フェーズの参加リストがない場合は、このプロパティの値になります`Guid.Empty`です。 かどうか、トランザクションを超えたかは、MSDTC に昇格し、このプロパティの値になります`TransactionInterop.PromoterTypeDtc`です。 このプロパティの値が、以前の呼び出しに指定された値になりますかトランザクションが MSDTC でないプロモーターによって昇格されます、`Transaction.EnlistPromotableSinglePhase`です。"
  syntax:
    content: public Guid PromoterType { get; }
    return:
      type: System.Guid
      description: "形式を一意に識別する guid、`byte[]`トランザクションを昇格するときに、Promote メソッドで返されます。"
  overload: System.Transactions.Transaction.PromoterType*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Rollback
  id: Rollback
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Rollback()
  nameWithType: Transaction.Rollback()
  fullName: System.Transactions.Transaction.Rollback()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "ロールバック (中止) トランザクション。"
  remarks: "トランザクション オブジェクトのすべてのコピーは、このメソッドを呼び出すことによって、トランザクションのロールバックを開始できます。 元のトランザクション オブジェクトのみ、これは、<xref:System.Transactions.CommittableTransaction>オブジェクト、トランザクションのコミットを開始するために使用できます</xref:System.Transactions.CommittableTransaction>。 トランザクションの結果が既に決定した後、このメソッドが呼び出されたときに、例外がスローされます。"
  syntax:
    content: public void Rollback ();
    parameters: []
  overload: System.Transactions.Transaction.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.Rollback(System.Exception)
  id: Rollback(System.Exception)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: Rollback(Exception)
  nameWithType: Transaction.Rollback(Exception)
  fullName: System.Transactions.Transaction.Rollback(Exception)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "ロールバック (中止) トランザクション。"
  syntax:
    content: public void Rollback (Exception e);
    parameters:
    - id: e
      type: System.Exception
      description: "ロールバックが発生した理由の説明。"
  overload: System.Transactions.Transaction.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  id: SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
  nameWithType: Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
  fullName: System.Transactions.Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "MSDTC でないプロモーターによって生成される分散トランザクション識別子を設定します。"
  remarks: "このメソッドは、正常にのみ呼び出すことができます中に、`IPromotableSinglePhaseNotification.Promote`メソッドを処理しています。 その他の任意の時にこのメソッドが呼び出された場合、`TransactionException`がスローされます。       指定された値、`promotableNotification`パラメーターが指定されていたものを同じオブジェクトにする必要があります、`Transaction.EnlistPromotableSinglePhase`呼び出しです。 この場合、これがない場合、`InvalidOperationException`がスローされます。"
  syntax:
    content: public void SetDistributedTransactionIdentifier (System.Transactions.IPromotableSinglePhaseNotification promotableNotification, Guid distributedTransactionIdentifier);
    parameters:
    - id: promotableNotification
      type: System.Transactions.IPromotableSinglePhaseNotification
      description: "A <xref href=&quot;System.Transactions.IPromotableSinglePhaseNotification&quot;> </xref>参加要素によって実装されるインターフェイス。"
    - id: distributedTransactionIdentifier
      type: System.Guid
      description: "分散トランザクション マネージャーによって使用されるトランザクションの識別子。"
  overload: System.Transactions.Transaction.SetDistributedTransactionIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Transactions.Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "取得、 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>このトランザクションをシリアル化するために必要なデータを使用します。"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>にデータを設定します。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "宛先 (を参照してください<xref:System.Runtime.Serialization.StreamingContext>) このシリアル化します</xref:System.Runtime.Serialization.StreamingContext>。"
  overload: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.Transaction.TransactionCompleted
  id: TransactionCompleted
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: TransactionCompleted
  nameWithType: Transaction.TransactionCompleted
  fullName: System.Transactions.Transaction.TransactionCompleted
  type: Event
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションが完了したことを示します。"
  remarks: "揮発性参加リストを使用して、トランザクションの結果情報を取得する代わりにこのイベントを登録することができます。 渡されたパラメーター、<xref:System.Transactions.TransactionCompletedEventHandler>デリゲートは、<xref:System.Transactions.Transaction>インスタンス</xref:System.Transactions.Transaction></xref:System.Transactions.TransactionCompletedEventHandler>。 クエリを実行できます、<xref:System.Transactions.Transaction.TransactionInformation%2A>のインスタンスを取得する特定のインスタンスのプロパティを<xref:System.Transactions.TransactionInformation>が<xref:System.Transactions.TransactionInformation.Status%2A>プロパティがいずれかでトランザクションの状態を表す、<xref:System.Transactions.TransactionStatus>または<xref:System.Transactions.TransactionStatus>値</xref:System.Transactions.TransactionStatus></xref:System.Transactions.TransactionStatus></xref:System.Transactions.TransactionInformation.Status%2A></xref:System.Transactions.TransactionInformation></xref:System.Transactions.Transaction.TransactionInformation%2A>。       **注意**にアタッチされているトランザクションのパフォーマンスに影響を与える悪影響このイベントにサインアップします。"
  example:
  - "The following sample shows how an application can obtain the outcome of a transaction by subscribing to the TransactionCompleted event.  \n  \n [!code-cs[Tx_Outcome#1](~/add/codesnippet/csharp/e-system.transactions.tr_1.cs)]\n [!code-vb[Tx_Outcome#1](~/add/codesnippet/visualbasic/e-system.transactions.tr_1.vb)]"
  syntax:
    content: public event System.Transactions.TransactionCompletedEventHandler TransactionCompleted;
    return:
      type: System.Transactions.TransactionCompletedEventHandler
      description: "追加します。"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このイベントは破棄されているトランザクションにサブスクライブしようとしました。"
  platform:
  - net462
- uid: System.Transactions.Transaction.TransactionInformation
  id: TransactionInformation
  parent: System.Transactions.Transaction
  langs:
  - csharp
  name: TransactionInformation
  nameWithType: Transaction.TransactionInformation
  fullName: System.Transactions.Transaction.TransactionInformation
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションに関する追加情報を取得します。"
  syntax:
    content: public System.Transactions.TransactionInformation TransactionInformation { get; }
    return:
      type: System.Transactions.TransactionInformation
      description: "A <xref href=&quot;System.Transactions.TransactionInformation&quot;> </xref>トランザクションに関する追加情報を格納します。"
  overload: System.Transactions.Transaction.TransactionInformation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Transactions.Transaction.Clone
  parent: System.Transactions.Transaction
  isExternal: false
  name: Clone()
  nameWithType: Transaction.Clone()
  fullName: System.Transactions.Transaction.Clone()
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.Transaction.Current
  parent: System.Transactions.Transaction
  isExternal: false
  name: Current
  nameWithType: Transaction.Current
  fullName: System.Transactions.Transaction.Current
- uid: System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  parent: System.Transactions.Transaction
  isExternal: false
  name: DependentClone(DependentCloneOption)
  nameWithType: Transaction.DependentClone(DependentCloneOption)
  fullName: System.Transactions.Transaction.DependentClone(DependentCloneOption)
- uid: System.Transactions.DependentTransaction
  parent: System.Transactions
  isExternal: false
  name: DependentTransaction
  nameWithType: DependentTransaction
  fullName: System.Transactions.DependentTransaction
- uid: System.Transactions.DependentCloneOption
  parent: System.Transactions
  isExternal: false
  name: DependentCloneOption
  nameWithType: DependentCloneOption
  fullName: System.Transactions.DependentCloneOption
- uid: System.Transactions.Transaction.Dispose
  parent: System.Transactions.Transaction
  isExternal: false
  name: Dispose()
  nameWithType: Transaction.Dispose()
  fullName: System.Transactions.Transaction.Dispose()
- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistDurable(Guid,IEnlistmentNotification,EnlistmentOptions)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.IEnlistmentNotification
  parent: System.Transactions
  isExternal: false
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
- uid: System.Transactions.EnlistmentOptions
  parent: System.Transactions
  isExternal: false
  name: EnlistmentOptions
  nameWithType: EnlistmentOptions
  fullName: System.Transactions.EnlistmentOptions
- uid: System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistDurable(Guid,ISinglePhaseNotification,EnlistmentOptions)
- uid: System.Transactions.ISinglePhaseNotification
  parent: System.Transactions
  isExternal: false
  name: ISinglePhaseNotification
  nameWithType: ISinglePhaseNotification
  fullName: System.Transactions.ISinglePhaseNotification
- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Transactions.IPromotableSinglePhaseNotification
  parent: System.Transactions
  isExternal: false
  name: IPromotableSinglePhaseNotification
  nameWithType: IPromotableSinglePhaseNotification
  fullName: System.Transactions.IPromotableSinglePhaseNotification
- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
  nameWithType: Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
  fullName: System.Transactions.Transaction.EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification,Guid)
- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistVolatile(IEnlistmentNotification,EnlistmentOptions)
- uid: System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.EnlistVolatile(ISinglePhaseNotification,EnlistmentOptions)
- uid: System.Transactions.Transaction.Equals(System.Object)
  parent: System.Transactions.Transaction
  isExternal: false
  name: Equals(Object)
  nameWithType: Transaction.Equals(Object)
  fullName: System.Transactions.Transaction.Equals(Object)
- uid: System.Transactions.Transaction.GetHashCode
  parent: System.Transactions.Transaction
  isExternal: false
  name: GetHashCode()
  nameWithType: Transaction.GetHashCode()
  fullName: System.Transactions.Transaction.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Transactions.Transaction.GetPromotedToken
  parent: System.Transactions.Transaction
  isExternal: false
  name: GetPromotedToken()
  nameWithType: Transaction.GetPromotedToken()
  fullName: System.Transactions.Transaction.GetPromotedToken()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.Transaction.IsolationLevel
  parent: System.Transactions.Transaction
  isExternal: false
  name: IsolationLevel
  nameWithType: Transaction.IsolationLevel
  fullName: System.Transactions.Transaction.IsolationLevel
- uid: System.Transactions.IsolationLevel
  parent: System.Transactions
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Transactions.IsolationLevel
- uid: System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  parent: System.Transactions.Transaction
  isExternal: false
  name: op_Equality(Transaction,Transaction)
  nameWithType: Transaction.op_Equality(Transaction,Transaction)
  fullName: System.Transactions.Transaction.op_Equality(Transaction,Transaction)
- uid: System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  parent: System.Transactions.Transaction
  isExternal: false
  name: op_Inequality(Transaction,Transaction)
  nameWithType: Transaction.op_Inequality(Transaction,Transaction)
  fullName: System.Transactions.Transaction.op_Inequality(Transaction,Transaction)
- uid: System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  parent: System.Transactions.Transaction
  isExternal: false
  name: PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
  nameWithType: Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
  fullName: System.Transactions.Transaction.PromoteAndEnlistDurable(Guid,IPromotableSinglePhaseNotification,ISinglePhaseNotification,EnlistmentOptions)
- uid: System.Transactions.Transaction.PromoterType
  parent: System.Transactions.Transaction
  isExternal: false
  name: PromoterType
  nameWithType: Transaction.PromoterType
  fullName: System.Transactions.Transaction.PromoterType
- uid: System.Transactions.Transaction.Rollback
  parent: System.Transactions.Transaction
  isExternal: false
  name: Rollback()
  nameWithType: Transaction.Rollback()
  fullName: System.Transactions.Transaction.Rollback()
- uid: System.Transactions.Transaction.Rollback(System.Exception)
  parent: System.Transactions.Transaction
  isExternal: false
  name: Rollback(Exception)
  nameWithType: Transaction.Rollback(Exception)
  fullName: System.Transactions.Transaction.Rollback(Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  parent: System.Transactions.Transaction
  isExternal: false
  name: SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
  nameWithType: Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
  fullName: System.Transactions.Transaction.SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification,Guid)
- uid: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Transactions.Transaction
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Transactions.Transaction.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Transactions.Transaction.TransactionCompleted
  parent: System.Transactions.Transaction
  isExternal: false
  name: TransactionCompleted
  nameWithType: Transaction.TransactionCompleted
  fullName: System.Transactions.Transaction.TransactionCompleted
- uid: System.Transactions.TransactionCompletedEventHandler
  parent: System.Transactions
  isExternal: false
  name: TransactionCompletedEventHandler
  nameWithType: TransactionCompletedEventHandler
  fullName: System.Transactions.TransactionCompletedEventHandler
- uid: System.Transactions.Transaction.TransactionInformation
  parent: System.Transactions.Transaction
  isExternal: false
  name: TransactionInformation
  nameWithType: Transaction.TransactionInformation
  fullName: System.Transactions.Transaction.TransactionInformation
- uid: System.Transactions.TransactionInformation
  parent: System.Transactions
  isExternal: false
  name: TransactionInformation
  nameWithType: TransactionInformation
  fullName: System.Transactions.TransactionInformation
- uid: System.Transactions.Transaction.Clone*
  parent: System.Transactions.Transaction
  isExternal: false
  name: Clone
  nameWithType: Transaction.Clone
- uid: System.Transactions.Transaction.Current*
  parent: System.Transactions.Transaction
  isExternal: false
  name: Current
  nameWithType: Transaction.Current
- uid: System.Transactions.Transaction.DependentClone*
  parent: System.Transactions.Transaction
  isExternal: false
  name: DependentClone
  nameWithType: Transaction.DependentClone
- uid: System.Transactions.Transaction.Dispose*
  parent: System.Transactions.Transaction
  isExternal: false
  name: Dispose
  nameWithType: Transaction.Dispose
- uid: System.Transactions.Transaction.EnlistDurable*
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistDurable
  nameWithType: Transaction.EnlistDurable
- uid: System.Transactions.Transaction.EnlistPromotableSinglePhase*
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistPromotableSinglePhase
  nameWithType: Transaction.EnlistPromotableSinglePhase
- uid: System.Transactions.Transaction.EnlistVolatile*
  parent: System.Transactions.Transaction
  isExternal: false
  name: EnlistVolatile
  nameWithType: Transaction.EnlistVolatile
- uid: System.Transactions.Transaction.Equals*
  parent: System.Transactions.Transaction
  isExternal: false
  name: Equals
  nameWithType: Transaction.Equals
- uid: System.Transactions.Transaction.GetHashCode*
  parent: System.Transactions.Transaction
  isExternal: false
  name: GetHashCode
  nameWithType: Transaction.GetHashCode
- uid: System.Transactions.Transaction.GetPromotedToken*
  parent: System.Transactions.Transaction
  isExternal: false
  name: GetPromotedToken
  nameWithType: Transaction.GetPromotedToken
- uid: System.Transactions.Transaction.IsolationLevel*
  parent: System.Transactions.Transaction
  isExternal: false
  name: IsolationLevel
  nameWithType: Transaction.IsolationLevel
- uid: System.Transactions.Transaction.op_Equality*
  parent: System.Transactions.Transaction
  isExternal: false
  name: op_Equality
  nameWithType: Transaction.op_Equality
- uid: System.Transactions.Transaction.op_Inequality*
  parent: System.Transactions.Transaction
  isExternal: false
  name: op_Inequality
  nameWithType: Transaction.op_Inequality
- uid: System.Transactions.Transaction.PromoteAndEnlistDurable*
  parent: System.Transactions.Transaction
  isExternal: false
  name: PromoteAndEnlistDurable
  nameWithType: Transaction.PromoteAndEnlistDurable
- uid: System.Transactions.Transaction.PromoterType*
  parent: System.Transactions.Transaction
  isExternal: false
  name: PromoterType
  nameWithType: Transaction.PromoterType
- uid: System.Transactions.Transaction.Rollback*
  parent: System.Transactions.Transaction
  isExternal: false
  name: Rollback
  nameWithType: Transaction.Rollback
- uid: System.Transactions.Transaction.SetDistributedTransactionIdentifier*
  parent: System.Transactions.Transaction
  isExternal: false
  name: SetDistributedTransactionIdentifier
  nameWithType: Transaction.SetDistributedTransactionIdentifier
- uid: System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Transactions.Transaction
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: Transaction.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Transactions.Transaction.TransactionInformation*
  parent: System.Transactions.Transaction
  isExternal: false
  name: TransactionInformation
  nameWithType: Transaction.TransactionInformation
