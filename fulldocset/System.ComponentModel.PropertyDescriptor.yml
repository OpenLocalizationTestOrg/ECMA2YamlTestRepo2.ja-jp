### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.PropertyDescriptor
  id: PropertyDescriptor
  children:
  - System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  - System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)
  - System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.ComponentType
  - System.ComponentModel.PropertyDescriptor.Converter
  - System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)
  - System.ComponentModel.PropertyDescriptor.Equals(System.Object)
  - System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)
  - System.ComponentModel.PropertyDescriptor.GetChildProperties
  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)
  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)
  - System.ComponentModel.PropertyDescriptor.GetHashCode
  - System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)
  - System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)
  - System.ComponentModel.PropertyDescriptor.GetValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)
  - System.ComponentModel.PropertyDescriptor.IsLocalizable
  - System.ComponentModel.PropertyDescriptor.IsReadOnly
  - System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)
  - System.ComponentModel.PropertyDescriptor.PropertyType
  - System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)
  - System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.SerializationVisibility
  - System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)
  - System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  langs:
  - csharp
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
  type: Class
  summary: "クラスのプロパティの抽象化を提供します。"
  remarks: "プロパティの説明は、名前、その属性、プロパティが関連付けられているコンポーネントのクラスおよびプロパティの型で構成されます。       PropertyDescriptor は、次のプロパティとメソッドを提供します-<xref:System.ComponentModel.PropertyDescriptor.Converter%2A>が含まれています、<xref:System.ComponentModel.TypeConverter>このプロパティの。</xref:System.ComponentModel.TypeConverter> </xref:System.ComponentModel.PropertyDescriptor.Converter%2A> 。      -<xref:System.ComponentModel.PropertyDescriptor.IsLocalizable%2A>このプロパティをローカライズする必要があるかどうかを示します</xref:System.ComponentModel.PropertyDescriptor.IsLocalizable%2A>。      -<xref:System.ComponentModel.PropertyDescriptor.GetEditor%2A>指定した型のエディターを返します</xref:System.ComponentModel.PropertyDescriptor.GetEditor%2A>。       PropertyDescriptor は、以下も用意されています`abstract`プロパティとメソッド:-<xref:System.ComponentModel.PropertyDescriptor.ComponentType%2A>にこのプロパティがバインドされているコンポーネントの型が含まれています。</xref:System.ComponentModel.PropertyDescriptor.ComponentType%2A> 。      -<xref:System.ComponentModel.PropertyDescriptor.IsReadOnly%2A>このプロパティは読み取り専用であるかどうかを示します</xref:System.ComponentModel.PropertyDescriptor.IsReadOnly%2A>。      -<xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A>プロパティの型を取得します</xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A>。      -<xref:System.ComponentModel.PropertyDescriptor.CanResetValue%2A>コンポーネントの値が変更コンポーネントをリセットするかどうかを示します</xref:System.ComponentModel.PropertyDescriptor.CanResetValue%2A>。      -<xref:System.ComponentModel.PropertyDescriptor.GetValue%2A>コンポーネントのプロパティの現在の値を返します</xref:System.ComponentModel.PropertyDescriptor.GetValue%2A>。      -<xref:System.ComponentModel.PropertyDescriptor.ResetValue%2A>コンポーネントのこのプロパティの値にリセットします</xref:System.ComponentModel.PropertyDescriptor.ResetValue%2A>。      -<xref:System.ComponentModel.PropertyDescriptor.SetValue%2A>を別の値のコンポーネントの値を設定します</xref:System.ComponentModel.PropertyDescriptor.SetValue%2A>。      -<xref:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue%2A>このプロパティの値が永続化する必要があるかどうかを示します</xref:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue%2A>。       通常、`abstract`メンバーは、リフレクションを介して実装されます。 リフレクションに関する詳細については、トピックを参照してください。[リフレクション](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example is built upon the example in the <xref:System.ComponentModel.PropertyDescriptorCollection> class. It prints the information (category, description, display name) of the text of a button in a text box. It assumes that `button1` and `textbox1` have been instantiated on a form.  \n  \n [!code-cpp[PropertyDescriptor#1](~/add/codesnippet/cpp/t-system.componentmodel._4_1.cpp)]\n [!code-vb[PropertyDescriptor#1](~/add/codesnippet/visualbasic/t-system.componentmodel._4_1.vb)]\n [!code-cs[PropertyDescriptor#1](~/add/codesnippet/csharp/t-system.componentmodel._4_1.cs)]  \n  \n The following code example shows how to implement a custom property descriptor that provides a read-only wrapper around a property. The `SerializeReadOnlyPropertyDescriptor` is used in a custom designer to provide a read-only property descriptor for the control's <xref:System.Windows.Forms.Control.Size%2A> property.  \n  \n [!code-cs[System.ComponentModel.PropertyDescriptor#1](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/SerializeReadOnlyPropertyDescriptor.cs#1)]\n [!code-vb[System.ComponentModel.PropertyDescriptor#1](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/SerializeReadOnlyPropertyDescriptor.vb#1)]  \n  \n The following code examples show how to use the The `SerializeReadOnlyPropertyDescriptor` in a custom designer.  \n  \n [!code-cs[System.ComponentModel.PropertyDescriptor#10](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/DemoControlDesigner.cs#10)]\n [!code-vb[System.ComponentModel.PropertyDescriptor#10](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/DemoControlDesigner.vb#10)]  \n[!code-vb[System.ComponentModel.PropertyDescriptor#100](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/DemoControl.vb#100)]\n[!code-cs[System.ComponentModel.PropertyDescriptor#100](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/DemoControl.cs#100)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class PropertyDescriptor : System.ComponentModel.MemberDescriptor
  inheritance:
  - System.Object
  - System.ComponentModel.MemberDescriptor
  implements: []
  inheritedMembers:
  - System.ComponentModel.MemberDescriptor.AttributeArray
  - System.ComponentModel.MemberDescriptor.Attributes
  - System.ComponentModel.MemberDescriptor.Category
  - System.ComponentModel.MemberDescriptor.CreateAttributeCollection
  - System.ComponentModel.MemberDescriptor.Description
  - System.ComponentModel.MemberDescriptor.DesignTimeOnly
  - System.ComponentModel.MemberDescriptor.DisplayName
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)
  - System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)
  - System.ComponentModel.MemberDescriptor.GetSite(System.Object)
  - System.ComponentModel.MemberDescriptor.IsBrowsable
  - System.ComponentModel.MemberDescriptor.Name
  - System.ComponentModel.MemberDescriptor.NameHashCode
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  id: '#ctor(System.ComponentModel.MemberDescriptor)'
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyDescriptor(MemberDescriptor)
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>クラス名と、指定した属性を持つ<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>です。"
  syntax:
    content: protected PropertyDescriptor (System.ComponentModel.MemberDescriptor descr);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "A <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>プロパティとその属性の名前を格納しています。"
  overload: System.ComponentModel.PropertyDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  id: '#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])'
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyDescriptor(MemberDescriptor,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> 、指定した名前のクラス<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>と両方の属性、 <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>と<xref:System.Attribute>配列</xref:System.Attribute>。"
  remarks: "このコンス トラクター <xref:System.Attribute> <xref:System.ComponentModel.MemberDescriptor>。</xref:System.ComponentModel.MemberDescriptor>属性に配列</xref:System.Attribute>内の属性を追加します。"
  syntax:
    content: protected PropertyDescriptor (System.ComponentModel.MemberDescriptor descr, Attribute[] attrs);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "A <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>メンバーとその属性の名前を含むです。"
    - id: attrs
      type: System.Attribute[]
      description: "<xref:System.Attribute>プロパティと関連付ける属性を含む配列</xref:System.Attribute>。"
  overload: System.ComponentModel.PropertyDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])
  id: '#ctor(System.String,System.Attribute[])'
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyDescriptor(String,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(String,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(String,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>指定した名前および属性を持つクラス。"
  syntax:
    content: protected PropertyDescriptor (string name, Attribute[] attrs);
    parameters:
    - id: name
      type: System.String
      description: "プロパティの名前です。"
    - id: attrs
      type: System.Attribute[]
      description: "型の配列<xref:System.Attribute>プロパティの属性を格納している</xref:System.Attribute>。"
  overload: System.ComponentModel.PropertyDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)
  id: AddValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: AddValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.AddValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.AddValueChanged(Object,EventHandler)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "このプロパティが変更されたときに通知するには、その他のオブジェクトを有効にします。"
  syntax:
    content: public virtual void AddValueChanged (object component, EventHandler handler);
    parameters:
    - id: component
      type: System.Object
      description: "ハンドラーを追加するコンポーネントです。"
    - id: handler
      type: System.EventHandler
      description: "リスナーとして追加するデリゲート。"
  overload: System.ComponentModel.PropertyDescriptor.AddValueChanged*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)
  id: CanResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: CanResetValue(Object)
  nameWithType: PropertyDescriptor.CanResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.CanResetValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "派生クラスでオーバーライドされると、その値を変更オブジェクトをリセットするかどうかを返します。"
  remarks: "通常、このメソッドはリフレクションを使用します。"
  syntax:
    content: public abstract bool CanResetValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "テストするためのコンポーネントは、機能をリセットします。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>コンポーネントをリセットする場合です。 値を変化します。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.PropertyDescriptor.CanResetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.ComponentType
  id: ComponentType
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: ComponentType
  nameWithType: PropertyDescriptor.ComponentType
  fullName: System.ComponentModel.PropertyDescriptor.ComponentType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "派生クラスでオーバーライドされると、このプロパティにバインドするコンポーネントの種類を取得します。"
  remarks: "通常、このプロパティは、リフレクションを介して実装されます。"
  syntax:
    content: public abstract Type ComponentType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>にこのプロパティがバインドされているコンポーネントの型を表す</xref:System.Type>。 ときに、 <> </> *> または<> *> メソッドが呼び出され、指定されたオブジェクトはこの型のインスタンスである可能性があります。"
  overload: System.ComponentModel.PropertyDescriptor.ComponentType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.Converter
  id: Converter
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: Converter
  nameWithType: PropertyDescriptor.Converter
  fullName: System.ComponentModel.PropertyDescriptor.Converter
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "このプロパティの型コンバーターを取得します。"
  syntax:
    content: public virtual System.ComponentModel.TypeConverter Converter { get; }
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref>変換に使用される、<xref:System.Type>このプロパティの</xref:System.Type>。"
  overload: System.ComponentModel.PropertyDescriptor.Converter*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)
  id: CreateInstance(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: CreateInstance(Type)
  nameWithType: PropertyDescriptor.CreateInstance(Type)
  fullName: System.ComponentModel.PropertyDescriptor.CreateInstance(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型のインスタンスを作成します。"
  remarks: "CreateInstance は、指定された型を受け取るコンス トラクターを検索します。 コンス トラクターが見つかると、プロパティの型に渡されます。       コンバーターとエディターは、このメソッドを使用して、コンポーネントのバージョンを作成します。 このメソッドは、1 つのコンポーネントを&1; つ以上の型の再利用できます。"
  syntax:
    content: protected object CreateInstance (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A<xref:System.Type>を作成する型を表す</xref:System.Type>。"
    return:
      type: System.Object
      description: "型の新しいインスタンス。"
  overload: System.ComponentModel.PropertyDescriptor.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PropertyDescriptor.Equals(Object)
  fullName: System.ComponentModel.PropertyDescriptor.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "別のオブジェクトが等しいかどうかに表示するには、これを比較します。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "これと比較するオブジェクト<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>値が等しい場合はそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.PropertyDescriptor.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)
  id: FillAttributes(System.Collections.IList)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: FillAttributes(IList)
  nameWithType: PropertyDescriptor.FillAttributes(IList)
  fullName: System.ComponentModel.PropertyDescriptor.FillAttributes(IList)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "属性を追加、 <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>を指定した属性の一覧で、親クラスです。"
  remarks: "重複する属性を一覧に追加された最後の&1; つは保持します。"
  syntax:
    content: protected override void FillAttributes (System.Collections.IList attributeList);
    parameters:
    - id: attributeList
      type: System.Collections.IList
      description: "の<xref:System.Collections.IList>親クラスで属性を一覧表示します。</xref:System.Collections.IList> 最初に、これが空です。"
  overload: System.ComponentModel.PropertyDescriptor.FillAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties
  id: GetChildProperties
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties()
  nameWithType: PropertyDescriptor.GetChildProperties()
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "既定値を返します<xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;></xref>です。"
  remarks: "このメソッドは成功`null`両方に対して、`instance`パラメーターおよび`filter`パラメーター。       プロパティ、`instance`パラメーターとは異なる、クラスのプロパティ、コンテナーは追加したり、場合に、プロパティを削除するため、`instance`パラメーターが配置されています。       `filter`パラメーターを混在させること<xref:System.Type>と<xref:System.Attribute>オブジェクト</xref:System.Attribute></xref:System.Type>。 フィルター処理は、次のルールによって定義します - a<xref:System.Type>オブジェクトが、ワイルドカードとして扱われます。 があるプロパティと一致する、<xref:System.Type>属性のセットにします。</xref:System.Type> </xref:System.Type> 。      -プロパティがない場合、 <xref:System.Attribute>、同じクラスのプロパティは含まれません、返された配列</xref:System.Attribute>。      インスタンスの場合、属性の<xref:System.Attribute>、プロパティは、返された配列に含まれると、完全に一致する必要があります</xref:System.Attribute>。      -指定した場合、<xref:System.Attribute>と既定のプロパティに含められます、返された配列のインスタンスがない場合でも<xref:System.Attribute>プロパティ</xref:System.Attribute></xref:System.Attribute>。"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetChildProperties ();
    parameters: []
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "プロパティ記述子のコレクション。"
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])
  id: GetChildProperties(System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties(Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返します、 <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>フィルターとして指定した属性配列を使用します。"
  remarks: "このメソッドは渡します`null`の`instance`パラメーター。       プロパティを`instance`パラメーターが、サイトは追加したり、場合に、プロパティを削除するため、クラスのプロパティと異なる場合が、`instance`パラメーターが配置されています。       `filter`パラメーターを混在させること<xref:System.Type>と<xref:System.Attribute>オブジェクト</xref:System.Attribute></xref:System.Type>。 フィルター処理は、次のルールによって定義します - a<xref:System.Type>オブジェクトが、ワイルドカードとして扱われます。 があるプロパティと一致する、<xref:System.Type>属性のセットにします。</xref:System.Type> </xref:System.Type> 。      -プロパティがない場合、 <xref:System.Attribute>、同じクラスのプロパティは含まれません、返された配列</xref:System.Attribute>。      インスタンスの場合、属性の<xref:System.Attribute>、プロパティは、返された配列に含まれると、完全に一致する必要があります</xref:System.Attribute>。      -指定した場合、<xref:System.Attribute>インスタンスと、既定のプロパティはのインスタンスがない場合でもには、返される配列に含められますが、<xref:System.Attribute>プロパティ</xref:System.Attribute></xref:System.Attribute>。"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetChildProperties (Attribute[] filter);
    parameters:
    - id: filter
      type: System.Attribute[]
      description: "型の配列<xref:System.Attribute>フィルターとして使用する</xref:System.Attribute>。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>指定の属性と一致するプロパティを使用します。"
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)
  id: GetChildProperties(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties(Object)
  nameWithType: PropertyDescriptor.GetChildProperties(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返します、 <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>から特定のオブジェクト。"
  remarks: "このメソッドは渡します`null`の`filter`パラメーター。       プロパティを`instance`パラメーターが、サイトは追加したり、場合に、プロパティを削除するため、クラスのプロパティと異なる場合が、`instance`パラメーターが配置されています。       `filter`パラメーターを混在させること<xref:System.Type>と<xref:System.Attribute>オブジェクト</xref:System.Attribute></xref:System.Type>。 フィルター処理は、次のルールによって定義します - a<xref:System.Type>オブジェクトが、ワイルドカードとして扱われます。 があるプロパティと一致する、<xref:System.Type>属性のセットにします。</xref:System.Type> </xref:System.Type> 。      -プロパティがない場合、 <xref:System.Attribute>、同じクラスのプロパティは含まれません、返された配列</xref:System.Attribute>。      インスタンスの場合、属性の<xref:System.Attribute>、プロパティは、返された配列に含まれると、完全に一致する必要があります</xref:System.Attribute>。      -指定した場合、<xref:System.Attribute>インスタンスと、既定のプロパティはのインスタンスがない場合でもには、返される配列に含められますが、<xref:System.Attribute>プロパティ</xref:System.Attribute></xref:System.Attribute>。"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetChildProperties (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "プロパティを取得するコンポーネント。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>指定されたコンポーネントのプロパティを使用します。"
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])
  id: GetChildProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties(Object,Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Object,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返します、 <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>から特定のオブジェクトをフィルターとして指定した属性配列を使用します。"
  remarks: "プロパティを`instance`パラメーターが、サイトは追加したり、場合に、プロパティを削除するため、クラスのプロパティと異なる場合が、`instance`パラメーターが配置されています。       `filter`パラメーターを混在させること<xref:System.Type>と<xref:System.Attribute>オブジェクト</xref:System.Attribute></xref:System.Type>。 フィルター処理は、次のルールによって定義します - a<xref:System.Type>オブジェクトが、ワイルドカードとして扱われます。 があるプロパティと一致する、<xref:System.Type>属性のセットにします。</xref:System.Type> </xref:System.Type> 。      -プロパティがない場合、 <xref:System.Attribute>、同じクラスのプロパティは含まれません、返された配列</xref:System.Attribute>。      インスタンスの場合、属性の<xref:System.Attribute>、プロパティは、返された配列に含まれると、完全に一致する必要があります</xref:System.Attribute>。      -指定した場合、<xref:System.Attribute>インスタンスと、既定のプロパティはのインスタンスがない場合でもには、返される配列に含められますが、<xref:System.Attribute>プロパティ</xref:System.Attribute></xref:System.Attribute>。       子のプロパティを実装することによって返される一般的に、<xref:System.ComponentModel.TypeConverter.GetProperties%2A>のメンバー、<xref:System.ComponentModel.TypeConverter>このプロパティからが返されます</xref:System.ComponentModel.TypeConverter></xref:System.ComponentModel.TypeConverter.GetProperties%2A>。"
  syntax:
    content: public virtual System.ComponentModel.PropertyDescriptorCollection GetChildProperties (object instance, Attribute[] filter);
    parameters:
    - id: instance
      type: System.Object
      description: "プロパティを取得するコンポーネント。"
    - id: filter
      type: System.Attribute[]
      description: "型の配列<xref:System.Attribute>フィルターとして使用する</xref:System.Attribute>。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>指定されたコンポーネントの指定した属性と一致するプロパティを使用します。"
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)
  id: GetEditor(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetEditor(Type)
  nameWithType: PropertyDescriptor.GetEditor(Type)
  fullName: System.ComponentModel.PropertyDescriptor.GetEditor(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型のエディターを取得します。"
  syntax:
    content: public virtual object GetEditor (Type editorBaseType);
    parameters:
    - id: editorBaseType
      type: System.Type
      description: "複数のエディターに対応するプロパティを区別するために使用されるエディターの基本データ型。"
    return:
      type: System.Object
      description: "要求されたエディターの種類のインスタンスまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>エディターが見つからない場合。"
  overload: System.ComponentModel.PropertyDescriptor.GetEditor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PropertyDescriptor.GetHashCode()
  fullName: System.ComponentModel.PropertyDescriptor.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "このオブジェクトのハッシュ コードを返します。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "このオブジェクトのハッシュ コード。"
  overload: System.ComponentModel.PropertyDescriptor.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)
  id: GetInvocationTarget(System.Type,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetInvocationTarget(Type,Object)
  nameWithType: PropertyDescriptor.GetInvocationTarget(Type,Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "このメソッドは、メンバーの呼び出し中に使用されるオブジェクトを返します。"
  remarks: "通常、戻り値は、同じにする、`instance`で渡されます。 別のオブジェクトをこのインスタンスに関連付けられた他のユーザー インスタンスは、カスタム型記述子場合や、GetInvocationTarget メソッドは、異なる値を返すことがあります。"
  syntax:
    content: protected override object GetInvocationTarget (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>呼び出し対象の</xref:System.Type>。"
    - id: instance
      type: System.Object
      description: "潜在的な呼び出し対象です。"
    return:
      type: System.Object
      description: "<xref:System.Object>メンバーの呼び出し中を使用する必要があります</xref:System.Object>。"
  overload: System.ComponentModel.PropertyDescriptor.GetInvocationTarget*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)
  id: GetTypeFromName(System.String)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetTypeFromName(String)
  nameWithType: PropertyDescriptor.GetTypeFromName(String)
  fullName: System.ComponentModel.PropertyDescriptor.GetTypeFromName(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "その名前を使用して型を返します。"
  remarks: "適切な型を検索するには、このメソッドはまず、アセンブリ、型のこの<xref:System.ComponentModel.PropertyDescriptor>参照</xref:System.ComponentModel.PropertyDescriptor>。 <xref:System.Type.GetType%2A?displayProperty=fullName>。</xref:System.Type.GetType%2A?displayProperty=fullName>が呼び出すことが見つからない場合、型、アセンブリに、"
  syntax:
    content: protected Type GetTypeFromName (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "取得する型のアセンブリ修飾名。"
    return:
      type: System.Type
      description: "A<xref:System.Type>指定された型名と一致するか、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>一致が見つからない場合</xref:System.Type>。"
  overload: System.ComponentModel.PropertyDescriptor.GetTypeFromName*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetValue(Object)
  nameWithType: PropertyDescriptor.GetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "派生クラスでオーバーライドされると、コンポーネントのプロパティの現在の値を取得します。"
  remarks: "通常、このメソッドはリフレクションを使用します。       このメソッドに自動的には、前の変更、 <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A>、変更適用後のメソッド、および<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>、 <xref:System.ComponentModel.Design.IComponentChangeService></xref:System.ComponentModel.Design.IComponentChangeService> </xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> </xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A> 。"
  syntax:
    content: public abstract object GetValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "値を取得する対象のプロパティを持つコンポーネント。"
    return:
      type: System.Object
      description: "指定されたコンポーネントのプロパティの値。"
  overload: System.ComponentModel.PropertyDescriptor.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)
  id: GetValueChangedHandler(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetValueChangedHandler(Object)
  nameWithType: PropertyDescriptor.GetValueChangedHandler(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "現在のセットを取得`ValueChanged`特定のコンポーネントのイベント ハンドラー"
  syntax:
    content: protected EventHandler GetValueChangedHandler (object component);
    parameters:
    - id: component
      type: System.Object
      description: "イベント ハンドラーを取得する対象のコンポーネントです。"
    return:
      type: System.EventHandler
      description: "A がマルチキャスト イベント ハンドラーを結合または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>イベント ハンドラーは、現在割り当てられていない場合に<code> component</code>です。"
  overload: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.IsLocalizable
  id: IsLocalizable
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: IsLocalizable
  nameWithType: PropertyDescriptor.IsLocalizable
  fullName: System.ComponentModel.PropertyDescriptor.IsLocalizable
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "このプロパティをローカライズする必要があるかどうかを示す値を取得するように指定した、 <xref href=&quot;System.ComponentModel.LocalizableAttribute&quot;></xref>です。"
  remarks: "プロパティにマークされている場合、 <xref:System.ComponentModel.LocalizableAttribute>&quot;éý&quot;`true`とその値は、ビジュアル デザイナーで使用されているリソース ファイルに保存されます</xref:System.ComponentModel.LocalizableAttribute>。 属性でプロパティをマークし、コードでプロパティを設定すると、リソース ファイルは使用されません。"
  syntax:
    content: public virtual bool IsLocalizable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>メンバーが付いている場合、 <xref href=&quot;System.ComponentModel.LocalizableAttribute&quot;> </xref> &quot;éý&quot; <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.PropertyDescriptor.IsLocalizable*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.IsReadOnly
  id: IsReadOnly
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: PropertyDescriptor.IsReadOnly
  fullName: System.ComponentModel.PropertyDescriptor.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "派生クラスでオーバーライドされると、このプロパティは読み取り専用であるかどうかを示す値を取得します。"
  syntax:
    content: public abstract bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティが読み取り専用の場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.PropertyDescriptor.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)
  id: OnValueChanged(System.Object,System.EventArgs)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: OnValueChanged(Object,EventArgs)
  nameWithType: PropertyDescriptor.OnValueChanged(Object,EventArgs)
  fullName: System.ComponentModel.PropertyDescriptor.OnValueChanged(Object,EventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "発生させる、`ValueChanged`実装するイベントです。"
  remarks: "このメソッドは、プロパティの値が変更されたときに、プロパティ記述子の実装によって呼び出す必要があります。"
  syntax:
    content: protected virtual void OnValueChanged (object component, EventArgs e);
    parameters:
    - id: component
      type: System.Object
      description: "イベントを発生させるオブジェクトです。"
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.ComponentModel.PropertyDescriptor.OnValueChanged*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.PropertyType
  id: PropertyType
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyType
  nameWithType: PropertyDescriptor.PropertyType
  fullName: System.ComponentModel.PropertyDescriptor.PropertyType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "派生クラスでオーバーライドされると、プロパティの型を取得します。"
  remarks: "通常、このプロパティは、リフレクションを介して実装されます。"
  syntax:
    content: public abstract Type PropertyType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>プロパティの型を表す</xref:System.Type>。"
  overload: System.ComponentModel.PropertyDescriptor.PropertyType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)
  id: RemoveValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: RemoveValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "このプロパティが変更されたときに通知するには、その他のオブジェクトを有効にします。"
  syntax:
    content: public virtual void RemoveValueChanged (object component, EventHandler handler);
    parameters:
    - id: component
      type: System.Object
      description: "ハンドラーを削除するコンポーネント。"
    - id: handler
      type: System.EventHandler
      description: "リスナーとして削除するデリゲート。"
  overload: System.ComponentModel.PropertyDescriptor.RemoveValueChanged*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)
  id: ResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: ResetValue(Object)
  nameWithType: PropertyDescriptor.ResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ResetValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "派生クラスでオーバーライドされると、コンポーネントのこのプロパティの値を既定値にリセットします。"
  remarks: "通常、このメソッドはリフレクションを使用します。       このメソッドは、次の優先順位にするプロパティをリセットする値を決定します。 1。  このプロパティの影付きのプロパティがあります。      2.  <xref:System.ComponentModel.DefaultValueAttribute>このプロパティの</xref:System.ComponentModel.DefaultValueAttribute>。      3.  渡すプロパティの名前を&quot;MyProperty&quot;がここでは、実装している&quot;ResetMyProperty&quot;メソッドがあります。       このメソッドを作成、<xref:System.ComponentModel.Design.DesignerTransaction>次の順序で自動的に: 1</xref:System.ComponentModel.Design.DesignerTransaction> 。  このメソッドの呼び出し、<xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>メソッドを作成、新しい<xref:System.ComponentModel.Design.DesignerTransaction>変更内容を表す</xref:System.ComponentModel.Design.DesignerTransaction></xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>。      2.  このメソッドの呼び出し、<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>メソッドをトランザクションが開始され、変更が発生することを示します</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>。      3.  メソッドは、このメソッドのチェックの順序によって決定される値にプロパティをリセットします。      4.  このメソッドの呼び出し、<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>メソッドを変更が発生したことを示します</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>。      5.  このメソッドの呼び出し<xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>をトランザクションが完了したことを示します</xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>。       トランザクションの目的は、サポートする`Undo`と`Redo`機能します。"
  syntax:
    content: public abstract void ResetValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "既定値にリセットするのには、プロパティの値を持つコンポーネント。"
  overload: System.ComponentModel.PropertyDescriptor.ResetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.SerializationVisibility
  id: SerializationVisibility
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: SerializationVisibility
  nameWithType: PropertyDescriptor.SerializationVisibility
  fullName: System.ComponentModel.PropertyDescriptor.SerializationVisibility
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "このプロパティはシリアル化する必要があるかどうかを示す値を取得するように指定した、 <xref href=&quot;System.ComponentModel.DesignerSerializationVisibilityAttribute&quot;></xref>です。"
  syntax:
    content: public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }
    return:
      type: System.ComponentModel.DesignerSerializationVisibility
      description: "1 つ、 <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref>このプロパティをシリアル化するかどうかを指定する列挙値。"
  overload: System.ComponentModel.PropertyDescriptor.SerializationVisibility*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: SetValue(Object,Object)
  nameWithType: PropertyDescriptor.SetValue(Object,Object)
  fullName: System.ComponentModel.PropertyDescriptor.SetValue(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "派生クラスでオーバーライドされると、別の値に、コンポーネントの値を設定します。"
  remarks: "通常、このメソッドはリフレクションを使用します。       このメソッドを作成、<xref:System.ComponentModel.Design.DesignerTransaction>次の順序で自動的に: 1</xref:System.ComponentModel.Design.DesignerTransaction> 。  このメソッドの呼び出し、<xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>メソッドを作成、新しい<xref:System.ComponentModel.Design.DesignerTransaction>変更内容を表す</xref:System.ComponentModel.Design.DesignerTransaction></xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>。      2.  このメソッドの呼び出し、<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>メソッドをトランザクションが開始され、変更が発生することを示します</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>。      3.  メソッドは、このメソッドのチェックの順序によって決定される値にプロパティをリセットします。      4.  このメソッドの呼び出し、<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>メソッドを変更が発生したことを示します</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>。      5.  このメソッドの呼び出し<xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>をトランザクションが完了したことを示します</xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>。       トランザクションの目的は、サポートする`Undo`と`Redo`機能します。"
  syntax:
    content: public abstract void SetValue (object component, object value);
    parameters:
    - id: component
      type: System.Object
      description: "設定するプロパティの値を持つコンポーネント。"
    - id: value
      type: System.Object
      description: "新しい値。"
  overload: System.ComponentModel.PropertyDescriptor.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)
  id: ShouldSerializeValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: ShouldSerializeValue(Object)
  nameWithType: PropertyDescriptor.ShouldSerializeValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "派生クラスでオーバーライドされると、このプロパティの値が永続化する必要があるかどうかを示す値を決定します。"
  remarks: "通常、このメソッドはリフレクションを使用します。"
  syntax:
    content: public abstract bool ShouldSerializeValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "永続化のため調査するプロパティを持つコンポーネント。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、プロパティを永続化する必要があります。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  id: SupportsChangeEvents
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: SupportsChangeEvents
  nameWithType: PropertyDescriptor.SupportsChangeEvents
  fullName: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "このプロパティの値の変更通知がプロパティ記述子の外部由来しているかどうかを示す値を取得します。"
  remarks: "SupportsChangeEvents プロパティは、このプロパティの値の変更通知可能性があります以外から発生させてプロパティ記述子など、コンポーネント自体、またはに加えられたかどうか通知は、直接の呼び出しから発信されますのみかどうかを示します、<xref:System.ComponentModel.PropertyDescriptor.SetValue%2A>メソッド</xref:System.ComponentModel.PropertyDescriptor.SetValue%2A>。 たとえば、コンポーネントが実装することが、<xref:System.ComponentModel.INotifyPropertyChanged>インターフェイス、または明示的な場合があります`name``Changed`このプロパティのイベント</xref:System.ComponentModel.INotifyPropertyChanged>。"
  syntax:
    content: public virtual bool SupportsChangeEvents { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティ記述子です。 外部から発生値を変更する場合の通知それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: System.ComponentModel.MemberDescriptor
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor(MemberDescriptor)
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor(MemberDescriptor,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor(String,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(String,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(String,Attribute[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: AddValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.AddValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.AddValueChanged(Object,EventHandler)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CanResetValue(Object)
  nameWithType: PropertyDescriptor.CanResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.CanResetValue(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.PropertyDescriptor.ComponentType
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ComponentType
  nameWithType: PropertyDescriptor.ComponentType
  fullName: System.ComponentModel.PropertyDescriptor.ComponentType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.PropertyDescriptor.Converter
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Converter
  nameWithType: PropertyDescriptor.Converter
  fullName: System.ComponentModel.PropertyDescriptor.Converter
- uid: System.ComponentModel.TypeConverter
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter
  nameWithType: TypeConverter
  fullName: System.ComponentModel.TypeConverter
- uid: System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CreateInstance(Type)
  nameWithType: PropertyDescriptor.CreateInstance(Type)
  fullName: System.ComponentModel.PropertyDescriptor.CreateInstance(Type)
- uid: System.ComponentModel.PropertyDescriptor.Equals(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Equals(Object)
  nameWithType: PropertyDescriptor.Equals(Object)
  fullName: System.ComponentModel.PropertyDescriptor.Equals(Object)
- uid: System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: FillAttributes(IList)
  nameWithType: PropertyDescriptor.FillAttributes(IList)
  fullName: System.ComponentModel.PropertyDescriptor.FillAttributes(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties()
  nameWithType: PropertyDescriptor.GetChildProperties()
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties()
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties(Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Attribute[])
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties(Object)
  nameWithType: PropertyDescriptor.GetChildProperties(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object)
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties(Object,Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Object,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object,Attribute[])
- uid: System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetEditor(Type)
  nameWithType: PropertyDescriptor.GetEditor(Type)
  fullName: System.ComponentModel.PropertyDescriptor.GetEditor(Type)
- uid: System.ComponentModel.PropertyDescriptor.GetHashCode
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetHashCode()
  nameWithType: PropertyDescriptor.GetHashCode()
  fullName: System.ComponentModel.PropertyDescriptor.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetInvocationTarget(Type,Object)
  nameWithType: PropertyDescriptor.GetInvocationTarget(Type,Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(Type,Object)
- uid: System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetTypeFromName(String)
  nameWithType: PropertyDescriptor.GetTypeFromName(String)
  fullName: System.ComponentModel.PropertyDescriptor.GetTypeFromName(String)
- uid: System.ComponentModel.PropertyDescriptor.GetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValue(Object)
  nameWithType: PropertyDescriptor.GetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValue(Object)
- uid: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValueChangedHandler(Object)
  nameWithType: PropertyDescriptor.GetValueChangedHandler(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(Object)
- uid: System.ComponentModel.PropertyDescriptor.IsLocalizable
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsLocalizable
  nameWithType: PropertyDescriptor.IsLocalizable
  fullName: System.ComponentModel.PropertyDescriptor.IsLocalizable
- uid: System.ComponentModel.PropertyDescriptor.IsReadOnly
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsReadOnly
  nameWithType: PropertyDescriptor.IsReadOnly
  fullName: System.ComponentModel.PropertyDescriptor.IsReadOnly
- uid: System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: OnValueChanged(Object,EventArgs)
  nameWithType: PropertyDescriptor.OnValueChanged(Object,EventArgs)
  fullName: System.ComponentModel.PropertyDescriptor.OnValueChanged(Object,EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.ComponentModel.PropertyDescriptor.PropertyType
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyType
  nameWithType: PropertyDescriptor.PropertyType
  fullName: System.ComponentModel.PropertyDescriptor.PropertyType
- uid: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: RemoveValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
- uid: System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ResetValue(Object)
  nameWithType: PropertyDescriptor.ResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ResetValue(Object)
- uid: System.ComponentModel.PropertyDescriptor.SerializationVisibility
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SerializationVisibility
  nameWithType: PropertyDescriptor.SerializationVisibility
  fullName: System.ComponentModel.PropertyDescriptor.SerializationVisibility
- uid: System.ComponentModel.DesignerSerializationVisibility
  parent: System.ComponentModel
  isExternal: false
  name: DesignerSerializationVisibility
  nameWithType: DesignerSerializationVisibility
  fullName: System.ComponentModel.DesignerSerializationVisibility
- uid: System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SetValue(Object,Object)
  nameWithType: PropertyDescriptor.SetValue(Object,Object)
  fullName: System.ComponentModel.PropertyDescriptor.SetValue(Object,Object)
- uid: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ShouldSerializeValue(Object)
  nameWithType: PropertyDescriptor.ShouldSerializeValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(Object)
- uid: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SupportsChangeEvents
  nameWithType: PropertyDescriptor.SupportsChangeEvents
  fullName: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
- uid: System.ComponentModel.PropertyDescriptor.#ctor*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor.PropertyDescriptor
- uid: System.ComponentModel.PropertyDescriptor.AddValueChanged*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: AddValueChanged
  nameWithType: PropertyDescriptor.AddValueChanged
- uid: System.ComponentModel.PropertyDescriptor.CanResetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CanResetValue
  nameWithType: PropertyDescriptor.CanResetValue
- uid: System.ComponentModel.PropertyDescriptor.ComponentType*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ComponentType
  nameWithType: PropertyDescriptor.ComponentType
- uid: System.ComponentModel.PropertyDescriptor.Converter*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Converter
  nameWithType: PropertyDescriptor.Converter
- uid: System.ComponentModel.PropertyDescriptor.CreateInstance*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CreateInstance
  nameWithType: PropertyDescriptor.CreateInstance
- uid: System.ComponentModel.PropertyDescriptor.Equals*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Equals
  nameWithType: PropertyDescriptor.Equals
- uid: System.ComponentModel.PropertyDescriptor.FillAttributes*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: FillAttributes
  nameWithType: PropertyDescriptor.FillAttributes
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties
  nameWithType: PropertyDescriptor.GetChildProperties
- uid: System.ComponentModel.PropertyDescriptor.GetEditor*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetEditor
  nameWithType: PropertyDescriptor.GetEditor
- uid: System.ComponentModel.PropertyDescriptor.GetHashCode*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetHashCode
  nameWithType: PropertyDescriptor.GetHashCode
- uid: System.ComponentModel.PropertyDescriptor.GetInvocationTarget*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetInvocationTarget
  nameWithType: PropertyDescriptor.GetInvocationTarget
- uid: System.ComponentModel.PropertyDescriptor.GetTypeFromName*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetTypeFromName
  nameWithType: PropertyDescriptor.GetTypeFromName
- uid: System.ComponentModel.PropertyDescriptor.GetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValue
  nameWithType: PropertyDescriptor.GetValue
- uid: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValueChangedHandler
  nameWithType: PropertyDescriptor.GetValueChangedHandler
- uid: System.ComponentModel.PropertyDescriptor.IsLocalizable*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsLocalizable
  nameWithType: PropertyDescriptor.IsLocalizable
- uid: System.ComponentModel.PropertyDescriptor.IsReadOnly*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsReadOnly
  nameWithType: PropertyDescriptor.IsReadOnly
- uid: System.ComponentModel.PropertyDescriptor.OnValueChanged*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: OnValueChanged
  nameWithType: PropertyDescriptor.OnValueChanged
- uid: System.ComponentModel.PropertyDescriptor.PropertyType*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyType
  nameWithType: PropertyDescriptor.PropertyType
- uid: System.ComponentModel.PropertyDescriptor.RemoveValueChanged*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: RemoveValueChanged
  nameWithType: PropertyDescriptor.RemoveValueChanged
- uid: System.ComponentModel.PropertyDescriptor.ResetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ResetValue
  nameWithType: PropertyDescriptor.ResetValue
- uid: System.ComponentModel.PropertyDescriptor.SerializationVisibility*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SerializationVisibility
  nameWithType: PropertyDescriptor.SerializationVisibility
- uid: System.ComponentModel.PropertyDescriptor.SetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SetValue
  nameWithType: PropertyDescriptor.SetValue
- uid: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ShouldSerializeValue
  nameWithType: PropertyDescriptor.ShouldSerializeValue
- uid: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SupportsChangeEvents
  nameWithType: PropertyDescriptor.SupportsChangeEvents
