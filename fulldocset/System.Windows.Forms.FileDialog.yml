### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.FileDialog
  id: FileDialog
  children:
  - System.Windows.Forms.FileDialog.AddExtension
  - System.Windows.Forms.FileDialog.AutoUpgradeEnabled
  - System.Windows.Forms.FileDialog.CheckFileExists
  - System.Windows.Forms.FileDialog.CheckPathExists
  - System.Windows.Forms.FileDialog.CustomPlaces
  - System.Windows.Forms.FileDialog.DefaultExt
  - System.Windows.Forms.FileDialog.DereferenceLinks
  - System.Windows.Forms.FileDialog.EventFileOk
  - System.Windows.Forms.FileDialog.FileName
  - System.Windows.Forms.FileDialog.FileNames
  - System.Windows.Forms.FileDialog.FileOk
  - System.Windows.Forms.FileDialog.Filter
  - System.Windows.Forms.FileDialog.FilterIndex
  - System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  - System.Windows.Forms.FileDialog.InitialDirectory
  - System.Windows.Forms.FileDialog.Instance
  - System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)
  - System.Windows.Forms.FileDialog.Options
  - System.Windows.Forms.FileDialog.Reset
  - System.Windows.Forms.FileDialog.RestoreDirectory
  - System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)
  - System.Windows.Forms.FileDialog.ShowHelp
  - System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
  - System.Windows.Forms.FileDialog.Title
  - System.Windows.Forms.FileDialog.ToString
  - System.Windows.Forms.FileDialog.ValidateNames
  langs:
  - csharp
  name: FileDialog
  nameWithType: FileDialog
  fullName: System.Windows.Forms.FileDialog
  type: Class
  summary: "ユーザーがファイルを選択できるダイアログ ボックスが表示されます。"
  remarks: "FileDialog の一般的な動作を含む抽象クラスである、<xref:System.Windows.Forms.OpenFileDialog>と<xref:System.Windows.Forms.SaveFileDialog>クラス</xref:System.Windows.Forms.SaveFileDialog></xref:System.Windows.Forms.OpenFileDialog>。 直接使用できるものではありませんが、これら&2; つのクラスの共通の動作が含まれています。 FileDialog のインスタンスを作成することはできません。 クラスをパブリックに宣言されますが、内部の抽象メソッドが含まれているから継承することはできません。 使用<xref:System.Windows.Forms.OpenFileDialog>または<xref:System.Windows.Forms.SaveFileDialog>。</xref:System.Windows.Forms.SaveFileDialog></xref:System.Windows.Forms.OpenFileDialog>を選択するか、ファイルを保存 ダイアログ ボックスを作成するには       FileDialog はモーダル ダイアログ ボックスです。そのため、表示されると、アプリケーションの残りの部分までブロック、ユーザーがファイルを選択します。 ダイアログ ボックスはモーダルとして表示される場合 (キーボードまたはマウス クリック) の入力しか発生しません ダイアログ ボックス上のオブジェクトにします。 プログラムを非表示にする必要があります。 または呼び出し元のプログラムへの入力 (通常はユーザーの操作に対する応答) で、ダイアログ ボックスが閉じる発生することができます。      > [!CAUTION] > など FileDialog から派生したクラスを使用すると<xref:System.Windows.Forms.OpenFileDialog>と<xref:System.Windows.Forms.SaveFileDialog>、絶対パスを含んでいる文字列リテラルは使用しないでください</xref:System.Windows.Forms.SaveFileDialog></xref:System.Windows.Forms.OpenFileDialog>。 代わりに、次の表で説明する手法の&1; つ以上を使用してパスを動的に取得します。       ファイルの代わりにフォルダーを選択できるようにする場合は使用<xref:System.Windows.Forms.FolderBrowserDialog>。</xref:System.Windows.Forms.FolderBrowserDialog>       アプリケーション、アプリケーションに関連付けられているデータの格納方法、およびファイル システムにアクセスするための種類によっては、方法は多数あります可能なディレクトリのパスを作成することができます。 次の表は、パスを動的に作成するためのテクニックを示します。      |パスまたはプログラムのカテゴリ |使用するクラスとメンバー |  |------------------------------|------------------------------|  |プログラム ファイル、マイ ドキュメント、デスクトップになどの標準の Windows パス |<xref:System.Environment?displayProperty=fullName>クラスは、完全なソースこれら<xref:System.Environment.SystemDirectory%2A>などの静的なメソッドを使用するか<xref:System.Environment.GetFolderPath%2A>メソッドを通じて、<xref:System.Environment.SpecialFolder>のいずれかを使用して値を列挙します |。  |現在のアプリケーションに関連するパス |<xref:System.Windows.Forms.Application>クラスなど、特定のパスを取得する静的メンバーには<xref:System.Windows.Forms.Application.StartupPath%2A>、 <xref:System.Windows.Forms.Application.ExecutablePath%2A>、 <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>、 <xref:System.Windows.Forms.Application.CommonAppDataPath%2A></xref:System.Windows.Forms.Application.CommonAppDataPath%2A> </xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A> </xref:System.Windows.Forms.Application.ExecutablePath%2A> </xref:System.Windows.Forms.Application.StartupPath%2A> </xref:System.Windows.Forms.Application> </xref:System.Environment.SpecialFolder> </xref:System.Environment.GetFolderPath%2A> </xref:System.Environment.SystemDirectory%2A> </xref:System.Environment?displayProperty=fullName> 。<br /><br /> <xref:System.IO.Path.GetTempPath%2A>のメソッド、<xref:System.IO.Path?displayProperty=fullName>一時フォルダーのパスを返します</xref:System.IO.Path?displayProperty=fullName></xref:System.IO.Path.GetTempPath%2A>。<br /><br /> <xref:System.IO.Directory.GetCurrentDirectory%2A>のメソッド、<xref:System.IO.Directory?displayProperty=fullName>クラスは、アプリケーションの現在実行されているディレクトリを返します</xref:System.IO.Directory?displayProperty=fullName></xref:System.IO.Directory.GetCurrentDirectory%2A>。<br /><br /> <xref:System.IO.DriveInfo>クラスの<xref:System.IO.DriveInfo.RootDirectory%2A>プロパティが指定されたドライブのルート ディレクトリを表します |。  |アプリケーション設定として格納されたパス |<xref:System.Configuration.ApplicationSettingsBase>.</xref:System.Configuration.ApplicationSettingsBase>から派生したラッパー クラスの対応するアプリケーションの設定プロパティ アクセス</xref:System.IO.DriveInfo.RootDirectory%2A></xref:System.IO.DriveInfo> 詳細については、次を参照してください[Windows フォーム用のアプリケーション設定](~/add/includes/ajax-current-ext-md.md)。 |。  |レジストリの記憶域 |一部のアプリケーションでは、ディレクトリ情報をレジストリに格納します。 <xref:System.Windows.Forms.Application>クラスには、<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>と<xref:Microsoft.Win32.RegistryKey>値に解決される<xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>プロパティです |。  |ClickOnce アプリケーションの |ClickOnce アプリケーションを使用して<xref:System.Windows.Forms.Application>クラス メンバーをなど<xref:System.Windows.Forms.Application.UserAppDataPath%2A>、ClickOnce データ ディレクトリへのポインターを返しますが、</xref:System.Windows.Forms.Application.UserAppDataPath%2A> </xref:System.Windows.Forms.Application>  </xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A></xref:Microsoft.Win32.RegistryKey> </xref:System.Windows.Forms.Application.CommonAppDataPath%2A> </xref:System.Windows.Forms.Application> 。 詳細については、次を参照してください[ローカルへのアクセスと ClickOnce アプリケーションでのリモート データ](~/add/includes/ajax-current-ext-md.md)。 |。  |国際対応のアプリケーション |国際対応のアプリケーションの相対パスの部分を取得、アプリケーションでの文字列リソースから<xref:System.Resources.ResourceReader?displayProperty=fullName>クラス</xref:System.Resources.ResourceReader?displayProperty=fullName>を使用して、 グローバリゼーションとローカリゼーションの詳細については、トピックを参照してください[グローバリゼーションとローカリゼーション](~/add/includes/ajax-current-ext-md.md)。 |。      完全なパス可能性がありますを作成できる記載された方法の&1; つ以上を使用することがわかります。 たとえば、<xref:System.Environment.GetFolderPath%2A>マイ ドキュメント フォルダーへのパスを取得する方法を使用できますし、アプリケーションの設定は、相対サブディレクトリ部分を追加するために使用可能性があります</xref:System.Environment.GetFolderPath%2A>。       <xref:System.IO.Path?displayProperty=fullName>クラスに対し、絶対と相対パス文字列の操作支援するために静的メンバーが含まれています、<xref:System.IO.File?displayProperty=fullName>と<xref:System.IO.Directory?displayProperty=fullName>クラスは、実際には、ファイルとディレクトリをそれぞれ操作する静的メンバーを持っている</xref:System.IO.Directory?displayProperty=fullName></xref:System.IO.File?displayProperty=fullName></xref:System.IO.Path?displayProperty=fullName>。      > [!IMPORTANT] >、FileDialog の指定された場所に、アプリケーションの現在の作業ディレクトリが設定されている場合、アプリケーションのユーザーが、FileDialog でフォルダーを変更します。 これを防ぐためには、設定、<xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A>プロパティを`true`</xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A>。"
  example:
  - "The following code example uses the <xref:System.Windows.Forms.OpenFileDialog> implementation of FileDialog and illustrates creating, setting of properties, and showing the dialog box. The example uses the <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> method to display the dialog box and return the <xref:System.Windows.Forms.DialogResult>. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/t-system.windows.forms.f_8_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/t-system.windows.forms.f_8_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.f_8_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("FileOk")]

      [System.ComponentModel.DefaultProperty("FileName")]

      public abstract class FileDialog : System.Windows.Forms.CommonDialog
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Windows.Forms.CommonDialog
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Windows.Forms.CommonDialog.HelpRequest
  - System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)
  - System.Windows.Forms.CommonDialog.OwnerWndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  - System.Windows.Forms.CommonDialog.ShowDialog
  - System.Windows.Forms.CommonDialog.ShowDialog(System.Windows.Forms.IWin32Window)
  - System.Windows.Forms.CommonDialog.Tag
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.AddExtension
  id: AddExtension
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: AddExtension
  nameWithType: FileDialog.AddExtension
  fullName: System.Windows.Forms.FileDialog.AddExtension
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはかどうか、ダイアログ ボックスに自動的に追加の拡張機能ファイル名、ユーザーが、拡張子を省略した場合を示す値を設定します。"
  remarks: "ファイル名に追加された拡張機能は、現在選択されているファイル フィルターとの値によって異なります、<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>プロパティ</xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>。       場合、<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>プロパティは`true`、ダイアログ ボックスは、既存のファイルに一致する現在のファイル フィルターから最初の拡張機能を追加します</xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>。 ダイアログ ボックスがで指定された拡張子を追加して現在のファイル フィルターに一致するファイルがない場合、<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>プロパティ</xref:System.Windows.Forms.FileDialog.DefaultExt%2A>。       場合、<xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>プロパティは`false`、ダイアログ ボックスが現在のファイル フィルターから最初の有効なファイル名拡張子を追加します</xref:System.Windows.Forms.FileDialog.CheckFileExists%2A>。 ダイアログ ボックスがで指定された拡張子を追加して現在のファイル フィルターに有効なファイル名拡張子が含まれていない場合、<xref:System.Windows.Forms.FileDialog.DefaultExt%2A>プロパティ</xref:System.Windows.Forms.FileDialog.DefaultExt%2A>。"
  syntax:
    content: public bool AddExtension { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ダイアログ ボックスでは、ユーザーが拡張子を省略した場合、ファイル名に拡張子を追加する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.AddExtension*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.AutoUpgradeEnabled
  id: AutoUpgradeEnabled
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: AutoUpgradeEnabled
  nameWithType: FileDialog.AutoUpgradeEnabled
  fullName: System.Windows.Forms.FileDialog.AutoUpgradeEnabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または設定を示す値かどうかこの<xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref>インスタンスが自動的にアップグレード外観と動作で実行されているときに[!INCLUDE[wiprlhext](~/add/includes/wiprlhext-md.md)]です。"
  remarks: "場合は、このプロパティは`false`、<xref:System.Windows.Forms.FileDialog>クラスが、 [!INCLUDE[winxp](~/add/includes/winxp-md.md)]-スタイルの外観と動作[!INCLUDE[wiprlhext](~/add/includes/wiprlhext-md.md)]</xref:System.Windows.Forms.FileDialog>。        [!INCLUDE[winxp](~/add/includes/winxp-md.md)]、このプロパティには、何も影響はありません。"
  syntax:
    content: public bool AutoUpgradeEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>この場合<xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref>インスタンスが自動的にアップグレード外観と動作で実行されているときに[!INCLUDE[wiprlhext](~/add/includes/wiprlhext-md.md)]、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.AutoUpgradeEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.CheckFileExists
  id: CheckFileExists
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: CheckFileExists
  nameWithType: FileDialog.CheckFileExists
  fullName: System.Windows.Forms.FileDialog.CheckFileExists
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはダイアログ ボックスでは、ユーザーが存在しないファイルの名前を指定した場合に、警告が表示されるかどうかを示す値を設定します。"
  remarks: "既定値は`true`、継承の<xref:System.Windows.Forms.OpenFileDialog>と`false`、継承する<xref:System.Windows.Forms.SaveFileDialog>.</xref:System.Windows.Forms.SaveFileDialog> </xref:System.Windows.Forms.OpenFileDialog>"
  syntax:
    content: public virtual bool CheckFileExists { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザーが存在しません。 ファイル名を指定した場合、ダイアログ ボックスに警告が表示される場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.CheckFileExists*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.CheckPathExists
  id: CheckPathExists
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: CheckPathExists
  nameWithType: FileDialog.CheckPathExists
  fullName: System.Windows.Forms.FileDialog.CheckPathExists
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または設定 ダイアログ ボックスでは、ユーザーが存在しないパスを指定した場合に、警告が表示されるかどうかを示す値。"
  syntax:
    content: public bool CheckPathExists { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザーが存在しません。 パスを指定するときに、ダイアログ ボックスに警告が表示される場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.CheckPathExists*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.CustomPlaces
  id: CustomPlaces
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: CustomPlaces
  nameWithType: FileDialog.CustomPlaces
  fullName: System.Windows.Forms.FileDialog.CustomPlaces
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "このカスタム プレースのコレクションを取得<xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref>インスタンス。"
  remarks: " [!INCLUDE[winxp](~/add/includes/winxp-md.md)]、このプロパティには、何も影響はありません。"
  example:
  - "The following code example demonstrates how to use the CustomPlaces collection. To run this example, paste the following code into a Windows Form and call `InitializeDialogAndButton` from the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  \n  \n [!code-vb[System.Windows.Forms.FileDialogCommonPlaces#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_53_1.vb)]\n [!code-cs[System.Windows.Forms.FileDialogCommonPlaces#1](~/add/codesnippet/csharp/p-system.windows.forms.f_53_1.cs)]"
  syntax:
    content: public System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces { get; }
    return:
      type: System.Windows.Forms.FileDialogCustomPlacesCollection
      description: "このコレクションを配置するカスタム<xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref>インスタンス。"
  overload: System.Windows.Forms.FileDialog.CustomPlaces*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.DefaultExt
  id: DefaultExt
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: DefaultExt
  nameWithType: FileDialog.DefaultExt
  fullName: System.Windows.Forms.FileDialog.DefaultExt
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または既定のファイル名拡張子を設定します。"
  remarks: "アプリケーションのユーザーが、拡張子のないファイル名を指定すると、<xref:System.Windows.Forms.FileDialog>ファイル名に、拡張子が付けられます</xref:System.Windows.Forms.FileDialog>。 によって使用されている拡張機能が決まりますが、<xref:System.Windows.Forms.FileDialog.Filter%2A>と DefaultExt プロパティ</xref:System.Windows.Forms.FileDialog.Filter%2A>。 フィルターを選択した場合、<xref:System.Windows.Forms.FileDialog>フィルターは、拡張子を指定し、その拡張機能を使用します</xref:System.Windows.Forms.FileDialog>。 フィルター選択されている場合は、DefaultExt プロパティで指定された拡張機能を使用して、拡張機能の代わりにワイルドカードを使用します。"
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=fullName> and <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=fullName> methods with streams. It also demonstrates using the <xref:System.Windows.Forms.FileDialog.FileName%2A>, DefaultExt, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=fullName> members.  \n  \n This is a complete example that is ready to run when you copy it to your project.  \n  \n [!code-cs[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/csharp/p-system.windows.forms.f_16_1.cs)]\n [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_16_1.vb)]\n [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/cpp/p-system.windows.forms.f_16_1.cpp)]"
  syntax:
    content: public string DefaultExt { get; set; }
    return:
      type: System.String
      description: "既定のファイル名拡張子。 返される文字列には、期間は含まれません。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Windows.Forms.FileDialog.DefaultExt*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.DereferenceLinks
  id: DereferenceLinks
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: DereferenceLinks
  nameWithType: FileDialog.DereferenceLinks
  fullName: System.Windows.Forms.FileDialog.DereferenceLinks
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または設定 ダイアログ ボックスがショートカットで参照されているファイルの場所を返すかどうか、またはショートカット (.lnk) の場所を返すかどうかを示す値。"
  syntax:
    content: public bool DereferenceLinks { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ダイアログ ボックスがショートカットで参照されているファイルの場所を返す場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.DereferenceLinks*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.EventFileOk
  id: EventFileOk
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: EventFileOk
  nameWithType: FileDialog.EventFileOk
  fullName: System.Windows.Forms.FileDialog.EventFileOk
  type: Field
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "所有している、 <xref href=&quot;System.Windows.Forms.FileDialog.FileOk&quot;> </xref>イベント。"
  syntax:
    content: protected static readonly object EventFileOk;
    return:
      type: System.Object
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.FileName
  id: FileName
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: FileName
  nameWithType: FileDialog.FileName
  fullName: System.Windows.Forms.FileDialog.FileName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはファイルのダイアログ ボックスで選択されているファイル名を含む文字列を設定します。"
  remarks: "ファイル名には、ファイルのパスと、拡張機能の両方が含まれています。 ファイルが選択されていない場合、このメソッドは、空の文字列を返します (&quot;&quot;) です。       使用する場合、<xref:System.Windows.Forms.SaveFileDialog>クラス、このプロパティを表すから使用する場合は、ファイル、<xref:System.Windows.Forms.OpenFileDialog>クラスを表します開かれるファイル</xref:System.Windows.Forms.OpenFileDialog></xref:System.Windows.Forms.SaveFileDialog>。       このプロパティは、選択した&1; つのファイルの名前のみできます。 複数選択のダイアログ ボックスで選択されたすべてのファイルの名前を含む配列を返す場合は、使用<xref:System.Windows.Forms.FileDialog.FileNames%2A>。</xref:System.Windows.Forms.FileDialog.FileNames%2A>"
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=fullName> and <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=fullName> methods with streams. It also demonstrates using the FileName, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=fullName>, and <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=fullName> members.  \n  \n This is a complete example that is ready to run when you copy it to your project.  \n  \n [!code-cs[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/csharp/p-system.windows.forms.f_44_1.cs)]\n [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_44_1.vb)]\n [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/add/codesnippet/cpp/p-system.windows.forms.f_44_1.cpp)]"
  syntax:
    content: public string FileName { get; set; }
    return:
      type: System.String
      description: "ファイル ダイアログ ボックスで選択されているファイルの名前。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Windows.Forms.FileDialog.FileName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.FileNames
  id: FileNames
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: FileNames
  nameWithType: FileDialog.FileNames
  fullName: System.Windows.Forms.FileDialog.FileNames
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ダイアログ ボックスで選択したすべてのファイルのファイル名を取得します。"
  remarks: "各ファイル名には、ファイルのパスと、拡張機能の両方が含まれています。 ファイルが選択されていない場合、このメソッドは空の配列を返します。"
  example:
  - "The following code example allows the user to select a number of images and display them in <xref:System.Windows.Forms.PictureBox> controls on a Form. It demonstrates initializing an <xref:System.Windows.Forms.OpenFileDialog>, setting the <xref:System.Windows.Forms.FileDialog.Title%2A> and <xref:System.Windows.Forms.FileDialog.Filter%2A> properties, and allowing the user to select multiple files by setting the <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A> property to true. This code example assumes that your form already has an <xref:System.Windows.Forms.OpenFileDialog> control named `openFileDialog1`, a <xref:System.Windows.Forms.Button> named `SelectFileButton`, and a <xref:System.Windows.Forms.FlowLayoutPanel> named `flowLayoutPanel1`.  \n  \n [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/add/codesnippet/visualbasic/TestOpenFileDialogMultiSelectVB/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/add/codesnippet/csharp/TestOpenFileDialogMultiSelect/Form1.cs#1)]"
  syntax:
    content: public string[] FileNames { get; }
    return:
      type: System.String[]
      description: "型の配列<xref:System.String>、ダイアログ ボックスで選択されているすべてのファイルのファイル名を含むします</xref:System.String>。"
  overload: System.Windows.Forms.FileDialog.FileNames*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.FileOk
  id: FileOk
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: FileOk
  nameWithType: FileDialog.FileOk
  fullName: System.Windows.Forms.FileDialog.FileOk
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーがクリックしたときに発生、**開く**または**保存**ボタン、[ファイル] ダイアログ ボックスをクリックします。"
  remarks: "イベントの処理方法の詳細については、次を参照してください。[処理とイベントの発生](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates using the <xref:System.Windows.Forms.FileDialog.FileNames%2A> property, handling the FileOk event and using the <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> method. When the example runs, a user can select graphics files from an <xref:System.Windows.Forms.OpenFileDialog> object. The selected files are displayed in the form. The <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> method forces a repaint of the form for each graphics file opened. To run this example paste the following code in a form containing a <xref:System.Windows.Forms.PictureBox> named `PictureBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, and a <xref:System.Windows.Forms.Button> named `fileButton`. Call the `InitializePictureBox` and `InitializeOpenFileDialog` methods from the form's constructor or `Load` method. When the example is running, display the dialog box by clicking the button.  \n  \n [!code-cs[System.Windows.Forms.FileDialog#1](~/add/codesnippet/csharp/e-system.windows.forms.f_1_1.cs)]\n [!code-cpp[System.Windows.Forms.FileDialog#1](~/add/codesnippet/cpp/e-system.windows.forms.f_1_1.cpp)]\n [!code-vb[System.Windows.Forms.FileDialog#1](~/add/codesnippet/visualbasic/e-system.windows.forms.f_1_1.vb)]"
  syntax:
    content: public event System.ComponentModel.CancelEventHandler FileOk;
    return:
      type: System.ComponentModel.CancelEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.Filter
  id: Filter
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: Filter
  nameWithType: FileDialog.Filter
  fullName: System.Windows.Forms.FileDialog.Filter
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "名前のフィルター文字列を 種類のファイルとして保存 に表示される選択肢を決定する、現在のファイルを取得または設定または&quot;ファイルの種類 ダイアログ ボックスでします。"
  remarks: "フィルター文字列には各フィルター オプションには、垂直の後に、フィルターの説明が含まれています (|) およびフィルター パターン。 異なるフィルター オプションの文字列は、縦棒で区切られます。       フィルター文字列の例を次に示します:`Text files (*.txt)|*.txt|All files (*.*)|*.*`たとえばをセミコロンで区切って、ファイルの種類を区切ることでフィルター パターンをフィルター処理のいくつかを追加することができます:`Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*`を使用して、<xref:System.Windows.Forms.FileDialog.FilterIndex%2A>するフィルター処理オプションを設定するプロパティがユーザーに最初に表示されます</xref:System.Windows.Forms.FileDialog.FilterIndex%2A>。"
  example:
  - "The following code example uses the <xref:System.Windows.Forms.OpenFileDialog> implementation of <xref:System.Windows.Forms.FileDialog> and illustrates creating, setting of properties, and showing the dialog box. The example uses the Filter and <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> properties to provide a list of filters for the user. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_54_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_54_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_54_1.vb)]"
  syntax:
    content: public string Filter { get; set; }
    return:
      type: System.String
      description: "ファイル ダイアログ ボックスで使用可能なオプションをフィルター処理します。"
  overload: System.Windows.Forms.FileDialog.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Filter</code>形式が正しくありません。"
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.FilterIndex
  id: FilterIndex
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: FilterIndex
  nameWithType: FileDialog.FilterIndex
  fullName: System.Windows.Forms.FileDialog.FilterIndex
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはファイル ダイアログ ボックスで現在選択されているフィルターのインデックスを設定します。"
  remarks: "フィルター オプションがユーザーに最初に表示フィルター インデックス プロパティを設定を使用します。 選択したフィルターによって特殊なファイル操作を実行するファイル ダイアログを表示した後、フィルター インデックスの値を使用することもできます。      > [!NOTE] > フィルターの最初のエントリのインデックス値は 1 です。"
  example:
  - "The following code example uses the <xref:System.Windows.Forms.OpenFileDialog> implementation of <xref:System.Windows.Forms.FileDialog> and illustrates creating, setting of properties, and showing the dialog box. The example uses the <xref:System.Windows.Forms.FileDialog.Filter%2A> and FilterIndex properties to provide a list of filters for the user. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_0_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_0_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_0_1.vb)]"
  syntax:
    content: public int FilterIndex { get; set; }
    return:
      type: System.Int32
      description: "ファイル ダイアログ ボックスで現在選択されているフィルターのインデックスを含む値です。 既定値は 1 です。"
  overload: System.Windows.Forms.FileDialog.FilterIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  id: HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: HookProc(IntPtr,Int32,IntPtr,IntPtr)
  nameWithType: FileDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
  fullName: System.Windows.Forms.FileDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ファイル ダイアログ ボックスに特定の機能を追加するにはオーバーライドがコモン ダイアログ ボックスのフック プロシージャを定義します。"
  remarks: "用のフック プロシージャは、接続またはルーチンまたはデバッグまたは機能を強化するためにアプリケーションにその他のルーチンを挿入できます。       既定では、画面 WM_INITDIALOG メッセージへの応答で、ダイアログ ボックスの中央にフック プロシージャ。"
  syntax:
    content: protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    parameters:
    - id: hWnd
      type: System.IntPtr
      description: "ダイアログ ボックス ウィンドウへのハンドル。"
    - id: msg
      type: System.Int32
      description: "ダイアログ ボックスで受信するメッセージ。"
    - id: wparam
      type: System.IntPtr
      description: "メッセージに関する追加情報。"
    - id: lparam
      type: System.IntPtr
      description: "メッセージに関する追加情報。"
    return:
      type: System.IntPtr
      description: "既定のダイアログ ボックス プロシージャがメッセージを処理する場合は&0; を返します。既定値 ダイアログ ボックス プロシージャがメッセージを無視する場合は、0 以外の値を返します。"
  overload: System.Windows.Forms.FileDialog.HookProc*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.InitialDirectory
  id: InitialDirectory
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: InitialDirectory
  nameWithType: FileDialog.InitialDirectory
  fullName: System.Windows.Forms.FileDialog.InitialDirectory
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはファイルのダイアログ ボックスに表示される初期ディレクトリを設定します。"
  remarks: "InitialDirectory プロパティが次のソースのいずれかの方法を設定して通常:-最後のディレクトリまたはファイルの操作から保持など、プログラムで使用していたパス。      のアプリケーション設定などの永続的なソースからパスを読み取る、<xref:Microsoft.Win32.Registry>またはアプリケーションの文字列リソースです</xref:Microsoft.Win32.Registry>。      標準的な Windows システムとユーザーのパス、プログラム ファイル、マイ ドキュメント、マイ ミュージックなど (を使用して取得することができます、<xref:System.Environment.GetFolderPath%2A>メソッド)-起動ディレクトリなど、現在のアプリケーションに関連するパス (上のプロパティを使用して取得することができます、<xref:System.Windows.Forms.Application>オブジェクト).</xref:System.Windows.Forms.Application> </xref:System.Environment.GetFolderPath%2A>       動的パスの作成の詳細については、次を参照してください、<xref:System.Windows.Forms.FileDialog>クラスの概要。</xref:System.Windows.Forms.FileDialog> 。        [!INCLUDE[wiprlhext](~/add/includes/wiprlhext-md.md)]InitialDirectory は、ディレクトリのパスだけではなく完全なファイル名に設定されている場合、アプリケーション パスにするか元となるユーザー最後に選択したファイル ディレクトリに初期ディレクトリは既定です。"
  example:
  - "The following code example uses the <xref:System.Windows.Forms.OpenFileDialog> implementation of <xref:System.Windows.Forms.FileDialog> and illustrates creating, setting of properties, and showing the dialog box. The example uses the InitialDirectory property to set what the initial directory is when the dialog box is displayed to the user. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_30_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_30_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_30_1.vb)]"
  syntax:
    content: public string InitialDirectory { get; set; }
    return:
      type: System.String
      description: "ファイル ダイアログ ボックスに表示される初期ディレクトリです。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Windows.Forms.FileDialog.InitialDirectory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.Instance
  id: Instance
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: Instance
  nameWithType: FileDialog.Instance
  fullName: System.Windows.Forms.FileDialog.Instance
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "アプリケーションの Win32 インスタンス ハンドルを取得します。"
  syntax:
    content: protected virtual IntPtr Instance { get; }
    return:
      type: System.IntPtr
      description: "アプリケーションの Win32 インスタンス ハンドル。"
  overload: System.Windows.Forms.FileDialog.Instance*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)
  id: OnFileOk(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: OnFileOk(CancelEventArgs)
  nameWithType: FileDialog.OnFileOk(CancelEventArgs)
  fullName: System.Windows.Forms.FileDialog.OnFileOk(CancelEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "発生させる、 <xref href=&quot;System.Windows.Forms.FileDialog.FileOk&quot;> </xref>イベント。"
  syntax:
    content: protected void OnFileOk (System.ComponentModel.CancelEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.CancelEventArgs
      description: "A<xref:System.ComponentModel.CancelEventArgs>イベント データを格納します</xref:System.ComponentModel.CancelEventArgs>。"
  overload: System.Windows.Forms.FileDialog.OnFileOk*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.Options
  id: Options
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: Options
  nameWithType: FileDialog.Options
  fullName: System.Windows.Forms.FileDialog.Options
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初期化するために値を取得、 <xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref>です。"
  remarks: "オプションのプロパティは、Win32 を使用して、[ファイル] ダイアログ ボックスを初期化するために使用されているフラグに対応します。 プロパティを使用して、<xref:System.Windows.Forms.FileDialog>クラスを取得し、オプションを設定します</xref:System.Windows.Forms.FileDialog>。"
  syntax:
    content: protected int Options { get; }
    return:
      type: System.Int32
      description: "初期化する内部値のビットごとの組み合わせ、 <xref href=&quot;System.Windows.Forms.FileDialog&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.Options*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.Reset
  id: Reset
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: Reset()
  nameWithType: FileDialog.Reset()
  fullName: System.Windows.Forms.FileDialog.Reset()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "すべてのプロパティを既定値にリセットします。"
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Windows.Forms.FileDialog.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.RestoreDirectory
  id: RestoreDirectory
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: RestoreDirectory
  nameWithType: FileDialog.RestoreDirectory
  fullName: System.Windows.Forms.FileDialog.RestoreDirectory
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはダイアログ ボックスが閉じる前に以前に選択したディレクトリにディレクトリを復元するかどうかを示す値を設定します。"
  remarks: ''
  example:
  - "The following code example uses the <xref:System.Windows.Forms.OpenFileDialog> implementation of <xref:System.Windows.Forms.FileDialog> and illustrates creating, setting of properties, and showing the dialog box. The example uses the RestoreDirectory property to ensure that the previously selected directory is restored when the dialog box is closed. The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and the <xref:System.IO> namespace added to it.  \n  \n [!code-cpp[Classic OpenFileDialog Example#1](~/add/codesnippet/cpp/p-system.windows.forms.f_5_1.cpp)]\n [!code-cs[Classic OpenFileDialog Example#1](~/add/codesnippet/csharp/p-system.windows.forms.f_5_1.cs)]\n [!code-vb[Classic OpenFileDialog Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.f_5_1.vb)]"
  syntax:
    content: public bool RestoreDirectory { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ダイアログ ボックスでは、ユーザーがファイルの検索中に、ディレクトリを変更した場合、以前に選択したディレクトリに、現在のディレクトリを復元する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.RestoreDirectory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)
  id: RunDialog(System.IntPtr)
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: RunDialog(IntPtr)
  nameWithType: FileDialog.RunDialog(IntPtr)
  fullName: System.Windows.Forms.FileDialog.RunDialog(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "コモン ダイアログ ボックスを指定します。"
  remarks: "このメソッドの実装を提供する<xref:System.Windows.Forms.CommonDialog.RunDialog%2A>、ファイル ダイアログのユーザーが<xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>.</xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>を呼び出したときに呼び出されると</xref:System.Windows.Forms.CommonDialog.RunDialog%2A>       派生クラスで<xref:System.Windows.Forms.OpenFileDialog>と<xref:System.Windows.Forms.SaveFileDialog>無効なファイル名<xref:System.Exception>発生させることができます</xref:System.Exception></xref:System.Windows.Forms.SaveFileDialog></xref:System.Windows.Forms.OpenFileDialog>。"
  syntax:
    content: protected override bool RunDialog (IntPtr hWndOwner);
    parameters:
    - id: hWndOwner
      type: System.IntPtr
      description: "コモン ダイアログ ボックスのオーナー ウィンドウのウィンドウ ハンドルを表す値。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ファイルを開くことができなかった場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.RunDialog*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.ShowHelp
  id: ShowHelp
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: ShowHelp
  nameWithType: FileDialog.ShowHelp
  fullName: System.Windows.Forms.FileDialog.ShowHelp
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または設定を示す値かどうか、**ヘルプ**ファイル ダイアログ ボックスにボタンを表示します。"
  remarks: "A<xref:System.Windows.Forms.Control.HelpRequested>イベントは、ユーザーがクリックしたときに、**ヘルプ**ボタンをクリックします</xref:System.Windows.Forms.Control.HelpRequested>。"
  syntax:
    content: public bool ShowHelp { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ダイアログ ボックスに、ヘルプ ボタンが含まれている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.ShowHelp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
  id: SupportMultiDottedExtensions
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: SupportMultiDottedExtensions
  nameWithType: FileDialog.SupportMultiDottedExtensions
  fullName: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または設定 ダイアログ ボックスは、複数のファイル名拡張子を持つファイルの表示および保存をサポートしているかどうか。"
  remarks: "場合がありますユーザーを開くし、複数のファイル名拡張子を使用してファイルを保存する必要があります。 たとえば、アプリケーション マニフェスト ファイルで使用される、[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]複雑なファイル名拡張子の展開テクノロジの終了&quot;です。 exe.manifest&quot;です。 このプロパティを設定`true`を設定することができます、<xref:System.Windows.Forms.FileDialog.Filter%2A>をドット形式の複数の拡張機能のプロパティ</xref:System.Windows.Forms.FileDialog.Filter%2A>。       SupportMultiDottedExtensions 場合`false`をドット形式の複数の拡張機能を割り当てると<xref:System.Windows.Forms.FileDialog.Filter%2A>などのコントロールの派生<xref:System.Windows.Forms.SaveFileDialog>のみ使用して、文字列内の最後の拡張機能が</xref:System.Windows.Forms.SaveFileDialog></xref:System.Windows.Forms.FileDialog.Filter%2A>。 代わりに&quot;.manifest&quot;を使用するなど、&quot;. exe.manifest&quot;です。"
  example:
  - "The following code example saves files with the extension \".data.txt\". This code example requires that your application host a <xref:System.Windows.Forms.SaveFileDialog> named `saveFileDialog1` and a <xref:System.Windows.Forms.Button> named `button1`.  \n  \n [!code-cs[SupportMultiDottedExtensions#1](~/add/codesnippet/csharp/TestSaveFileDialog/Form1.cs#1)]\n [!code-vb[SupportMultiDottedExtensions#1](~/add/codesnippet/visualbasic/TestSaveFileDialogVB/Form1.vb#1)]"
  syntax:
    content: public bool SupportMultiDottedExtensions { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ダイアログ ボックスは、複数のファイル名拡張子をサポートしている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.Title
  id: Title
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: Title
  nameWithType: FileDialog.Title
  fullName: System.Windows.Forms.FileDialog.Title
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはファイル ダイアログ ボックスのタイトルを設定します。"
  remarks: "文字列は、ダイアログ ボックスのタイトル バーに配置されます。 タイトルが、空の文字列の場合は、「名前を付けて保存」または&quot;Open&quot;のいずれかが、既定のタイトルが使用されます。"
  example:
  - "The following code example demonstrates initializing an <xref:System.Windows.Forms.OpenFileDialog>, setting the Title and <xref:System.Windows.Forms.FileDialog.Filter%2A> properties, and allowing the user to select multiple files by setting the <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A?displayProperty=fullName> property to true. To run this example, paste the following code in a form containing an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1` and a <xref:System.Windows.Forms.Button> named `fileButton`. Call the `InitializeOpenFileDialog` method in the form's constructor or `Load` method. The example also requires that the `Click` event of the `Button` control is connected to the event handler defined in the example.  \n  \n [!code-cs[System.Windows.Forms.FileDialog#6](~/add/codesnippet/csharp/p-system.windows.forms.f_25_1.cs)]\n [!code-cpp[System.Windows.Forms.FileDialog#6](~/add/codesnippet/cpp/p-system.windows.forms.f_25_1.cpp)]\n [!code-vb[System.Windows.Forms.FileDialog#6](~/add/codesnippet/visualbasic/p-system.windows.forms.f_25_1.vb)]"
  syntax:
    content: public string Title { get; set; }
    return:
      type: System.String
      description: "ファイル ダイアログ ボックスのタイトル。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Windows.Forms.FileDialog.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.ToString
  id: ToString
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: ToString()
  nameWithType: FileDialog.ToString()
  fullName: System.Windows.Forms.FileDialog.ToString()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "このオブジェクトの文字列バージョンを提供します。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "このオブジェクトの文字列バージョン。"
  overload: System.Windows.Forms.FileDialog.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.FileDialog.ValidateNames
  id: ValidateNames
  parent: System.Windows.Forms.FileDialog
  langs:
  - csharp
  name: ValidateNames
  nameWithType: FileDialog.ValidateNames
  fullName: System.Windows.Forms.FileDialog.ValidateNames
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはダイアログ ボックスが有効な Win32 ファイル名のみを受け入れるかどうかを示す値を設定します。"
  remarks: "エディット コントロールが何も含まれていますが、スペースの場合、ユーザーがクリックすると**OK**が有効かどうか、ダイアログ ボックスは、ファイル名を返します。 テキストには、既定の拡張機能は追加されません。"
  syntax:
    content: public bool ValidateNames { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ダイアログ ボックスが有効な Win32 ファイル名のみを受け入れる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.FileDialog.ValidateNames*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Forms.CommonDialog
  isExternal: false
  name: System.Windows.Forms.CommonDialog
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.FileDialog.AddExtension
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: AddExtension
  nameWithType: FileDialog.AddExtension
  fullName: System.Windows.Forms.FileDialog.AddExtension
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.FileDialog.AutoUpgradeEnabled
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: AutoUpgradeEnabled
  nameWithType: FileDialog.AutoUpgradeEnabled
  fullName: System.Windows.Forms.FileDialog.AutoUpgradeEnabled
- uid: System.Windows.Forms.FileDialog.CheckFileExists
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CheckFileExists
  nameWithType: FileDialog.CheckFileExists
  fullName: System.Windows.Forms.FileDialog.CheckFileExists
- uid: System.Windows.Forms.FileDialog.CheckPathExists
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CheckPathExists
  nameWithType: FileDialog.CheckPathExists
  fullName: System.Windows.Forms.FileDialog.CheckPathExists
- uid: System.Windows.Forms.FileDialog.CustomPlaces
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CustomPlaces
  nameWithType: FileDialog.CustomPlaces
  fullName: System.Windows.Forms.FileDialog.CustomPlaces
- uid: System.Windows.Forms.FileDialogCustomPlacesCollection
  parent: System.Windows.Forms
  isExternal: false
  name: FileDialogCustomPlacesCollection
  nameWithType: FileDialogCustomPlacesCollection
  fullName: System.Windows.Forms.FileDialogCustomPlacesCollection
- uid: System.Windows.Forms.FileDialog.DefaultExt
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: DefaultExt
  nameWithType: FileDialog.DefaultExt
  fullName: System.Windows.Forms.FileDialog.DefaultExt
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.FileDialog.DereferenceLinks
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: DereferenceLinks
  nameWithType: FileDialog.DereferenceLinks
  fullName: System.Windows.Forms.FileDialog.DereferenceLinks
- uid: System.Windows.Forms.FileDialog.EventFileOk
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: EventFileOk
  nameWithType: FileDialog.EventFileOk
  fullName: System.Windows.Forms.FileDialog.EventFileOk
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Forms.FileDialog.FileName
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FileName
  nameWithType: FileDialog.FileName
  fullName: System.Windows.Forms.FileDialog.FileName
- uid: System.Windows.Forms.FileDialog.FileNames
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FileNames
  nameWithType: FileDialog.FileNames
  fullName: System.Windows.Forms.FileDialog.FileNames
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.FileDialog.FileOk
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FileOk
  nameWithType: FileDialog.FileOk
  fullName: System.Windows.Forms.FileDialog.FileOk
- uid: System.ComponentModel.CancelEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CancelEventHandler
  nameWithType: CancelEventHandler
  fullName: System.ComponentModel.CancelEventHandler
- uid: System.Windows.Forms.FileDialog.Filter
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Filter
  nameWithType: FileDialog.Filter
  fullName: System.Windows.Forms.FileDialog.Filter
- uid: System.Windows.Forms.FileDialog.FilterIndex
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FilterIndex
  nameWithType: FileDialog.FilterIndex
  fullName: System.Windows.Forms.FileDialog.FilterIndex
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: HookProc(IntPtr,Int32,IntPtr,IntPtr)
  nameWithType: FileDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
  fullName: System.Windows.Forms.FileDialog.HookProc(IntPtr,Int32,IntPtr,IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Forms.FileDialog.InitialDirectory
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: InitialDirectory
  nameWithType: FileDialog.InitialDirectory
  fullName: System.Windows.Forms.FileDialog.InitialDirectory
- uid: System.Windows.Forms.FileDialog.Instance
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Instance
  nameWithType: FileDialog.Instance
  fullName: System.Windows.Forms.FileDialog.Instance
- uid: System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: OnFileOk(CancelEventArgs)
  nameWithType: FileDialog.OnFileOk(CancelEventArgs)
  fullName: System.Windows.Forms.FileDialog.OnFileOk(CancelEventArgs)
- uid: System.ComponentModel.CancelEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: CancelEventArgs
  nameWithType: CancelEventArgs
  fullName: System.ComponentModel.CancelEventArgs
- uid: System.Windows.Forms.FileDialog.Options
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Options
  nameWithType: FileDialog.Options
  fullName: System.Windows.Forms.FileDialog.Options
- uid: System.Windows.Forms.FileDialog.Reset
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Reset()
  nameWithType: FileDialog.Reset()
  fullName: System.Windows.Forms.FileDialog.Reset()
- uid: System.Windows.Forms.FileDialog.RestoreDirectory
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: RestoreDirectory
  nameWithType: FileDialog.RestoreDirectory
  fullName: System.Windows.Forms.FileDialog.RestoreDirectory
- uid: System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: RunDialog(IntPtr)
  nameWithType: FileDialog.RunDialog(IntPtr)
  fullName: System.Windows.Forms.FileDialog.RunDialog(IntPtr)
- uid: System.Windows.Forms.FileDialog.ShowHelp
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ShowHelp
  nameWithType: FileDialog.ShowHelp
  fullName: System.Windows.Forms.FileDialog.ShowHelp
- uid: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: SupportMultiDottedExtensions
  nameWithType: FileDialog.SupportMultiDottedExtensions
  fullName: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions
- uid: System.Windows.Forms.FileDialog.Title
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Title
  nameWithType: FileDialog.Title
  fullName: System.Windows.Forms.FileDialog.Title
- uid: System.Windows.Forms.FileDialog.ToString
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ToString()
  nameWithType: FileDialog.ToString()
  fullName: System.Windows.Forms.FileDialog.ToString()
- uid: System.Windows.Forms.FileDialog.ValidateNames
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ValidateNames
  nameWithType: FileDialog.ValidateNames
  fullName: System.Windows.Forms.FileDialog.ValidateNames
- uid: System.Windows.Forms.FileDialog.AddExtension*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: AddExtension
  nameWithType: FileDialog.AddExtension
- uid: System.Windows.Forms.FileDialog.AutoUpgradeEnabled*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: AutoUpgradeEnabled
  nameWithType: FileDialog.AutoUpgradeEnabled
- uid: System.Windows.Forms.FileDialog.CheckFileExists*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CheckFileExists
  nameWithType: FileDialog.CheckFileExists
- uid: System.Windows.Forms.FileDialog.CheckPathExists*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CheckPathExists
  nameWithType: FileDialog.CheckPathExists
- uid: System.Windows.Forms.FileDialog.CustomPlaces*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: CustomPlaces
  nameWithType: FileDialog.CustomPlaces
- uid: System.Windows.Forms.FileDialog.DefaultExt*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: DefaultExt
  nameWithType: FileDialog.DefaultExt
- uid: System.Windows.Forms.FileDialog.DereferenceLinks*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: DereferenceLinks
  nameWithType: FileDialog.DereferenceLinks
- uid: System.Windows.Forms.FileDialog.FileName*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FileName
  nameWithType: FileDialog.FileName
- uid: System.Windows.Forms.FileDialog.FileNames*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FileNames
  nameWithType: FileDialog.FileNames
- uid: System.Windows.Forms.FileDialog.Filter*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Filter
  nameWithType: FileDialog.Filter
- uid: System.Windows.Forms.FileDialog.FilterIndex*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: FilterIndex
  nameWithType: FileDialog.FilterIndex
- uid: System.Windows.Forms.FileDialog.HookProc*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: HookProc
  nameWithType: FileDialog.HookProc
- uid: System.Windows.Forms.FileDialog.InitialDirectory*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: InitialDirectory
  nameWithType: FileDialog.InitialDirectory
- uid: System.Windows.Forms.FileDialog.Instance*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Instance
  nameWithType: FileDialog.Instance
- uid: System.Windows.Forms.FileDialog.OnFileOk*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: OnFileOk
  nameWithType: FileDialog.OnFileOk
- uid: System.Windows.Forms.FileDialog.Options*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Options
  nameWithType: FileDialog.Options
- uid: System.Windows.Forms.FileDialog.Reset*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Reset
  nameWithType: FileDialog.Reset
- uid: System.Windows.Forms.FileDialog.RestoreDirectory*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: RestoreDirectory
  nameWithType: FileDialog.RestoreDirectory
- uid: System.Windows.Forms.FileDialog.RunDialog*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: RunDialog
  nameWithType: FileDialog.RunDialog
- uid: System.Windows.Forms.FileDialog.ShowHelp*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ShowHelp
  nameWithType: FileDialog.ShowHelp
- uid: System.Windows.Forms.FileDialog.SupportMultiDottedExtensions*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: SupportMultiDottedExtensions
  nameWithType: FileDialog.SupportMultiDottedExtensions
- uid: System.Windows.Forms.FileDialog.Title*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: Title
  nameWithType: FileDialog.Title
- uid: System.Windows.Forms.FileDialog.ToString*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ToString
  nameWithType: FileDialog.ToString
- uid: System.Windows.Forms.FileDialog.ValidateNames*
  parent: System.Windows.Forms.FileDialog
  isExternal: false
  name: ValidateNames
  nameWithType: FileDialog.ValidateNames
