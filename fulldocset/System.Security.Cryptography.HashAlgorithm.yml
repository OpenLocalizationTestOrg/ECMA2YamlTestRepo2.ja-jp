### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HashAlgorithm
  id: HashAlgorithm
  children:
  - System.Security.Cryptography.HashAlgorithm.#ctor
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.Create
  - System.Security.Cryptography.HashAlgorithm.Create(System.String)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.HashFinal
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.Initialize
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
  type: Class
  summary: "すべての実装の暗号ハッシュ アルゴリズムの派生元の基本クラスを表します。"
  remarks: "ハッシュ関数は、最新の暗号化の基本。 これらの関数は、任意の長さのバイナリ文字列をハッシュ値と呼ばれる、固定長のバイナリ文字列を小規模にマップします。 暗号ハッシュ関数には、プロパティを同じ値にハッシュされる&2; つの異なる入力を検索可能な負荷の大きい計算されていないことがあります。 ハッシュ関数は、デジタル署名とは、データの整合性によく使用されます。       ハッシュは、大量のデータを表す固定サイズの一意の値として使用されます。 対応するデータにも一致する場合、2 組のデータのハッシュが一致する必要があります。 ハッシュで予期しない変更を大規模なデータの結果を少し変更します。"
  example:
  - "The following code example computes the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> hash for an array. This example assumes that there is a predefined byte array `dataArray[]`. <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> is a derived class of HashAlgorithm.  \n  \n [!code-cs[Classic HashAlgorithm Example#1](~/add/codesnippet/csharp/t-system.security.crypto_106_1.cs)]\n [!code-cpp[Classic HashAlgorithm Example#1](~/add/codesnippet/cpp/t-system.security.crypto_106_1.cpp)]\n [!code-vb[Classic HashAlgorithm Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_106_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class HashAlgorithm : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashAlgorithm()
  nameWithType: HashAlgorithm.HashAlgorithm()
  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref>クラスです。"
  remarks: "抽象クラスのインスタンスを作成することはできません。 アプリケーション コードでは、派生クラスの新しいインスタンスを作成します。"
  syntax:
    content: protected HashAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在の変換を再利用できるかどうかを示す値を取得します。"
  syntax:
    content: public virtual bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.HashAlgorithm.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、複数のブロックを変換できるかどうかを示す値を取得します。"
  syntax:
    content: public virtual bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>複数のブロックを変換できる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: HashAlgorithm.Clear()
  fullName: System.Security.Cryptography.HashAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref>クラスです。"
  remarks: "このメソッドは、単純に、<xref:System.IDisposable.Dispose%2A?displayProperty=fullName>メソッド</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>。       呼び出す`Dispose`により、リソースで使用される、<xref:System.Security.Cryptography.HashAlgorithm>を他の目的を再割り当てするクラス</xref:System.Security.Cryptography.HashAlgorithm>。 詳細については`Dispose`を参照してください[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  id: ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: ComputeHash(Byte[])
  nameWithType: HashAlgorithm.ComputeHash(Byte[])
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したバイト配列のハッシュ値を計算します。"
  remarks: ''
  example:
  - "The following example computes the <xref:System.Security.Cryptography.MD5> hash value of a string and returns the hash as a 32-character, hexadecimal-formatted string.  The hash string created by this code example is compatible with any MD5 hash function (on any platform) that creates a 32-character, hexadecimal-formatted hash string.  \n  \n [!code-vb[Security.Cryptography.MD5#1](~/add/codesnippet/visualbasic/m-system.security.crypto_123_1.vb)]\n [!code-cs[Security.Cryptography.MD5#1](~/add/codesnippet/csharp/m-system.security.crypto_123_1.cs)]"
  syntax:
    content: public byte[] ComputeHash (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "ハッシュ コードを計算する入力。"
    return:
      type: System.Byte[]
      description: "計算されたハッシュ コード。"
  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは既に破棄されています。"
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  id: ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: ComputeHash(Stream)
  nameWithType: HashAlgorithm.ComputeHash(Stream)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ値を計算<xref:System.IO.Stream>オブジェクト</xref:System.IO.Stream>。"
  remarks: ''
  example:
  - "The following example calculates the <xref:System.Security.Cryptography.RIPEMD160> hash for all files in a directory.  \n  \n [!code-cpp[RIPEMD160#1](~/add/codesnippet/cpp/m-system.security.crypto_23_1.cpp)]\n [!code-vb[RIPEMD160#1](~/add/codesnippet/visualbasic/m-system.security.crypto_23_1.vb)]\n [!code-cs[RIPEMD160#1](~/add/codesnippet/csharp/m-system.security.crypto_23_1.cs)]"
  syntax:
    content: public byte[] ComputeHash (System.IO.Stream inputStream);
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: "ハッシュ コードを計算する入力。"
    return:
      type: System.Byte[]
      description: "計算されたハッシュ コード。"
  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは既に破棄されています。"
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  id: ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: ComputeHash(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.ComputeHash(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したバイト配列の指定した領域のハッシュ値を計算します。"
  syntax:
    content: public byte[] ComputeHash (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "ハッシュ コードを計算する入力。"
    - id: offset
      type: System.Int32
      description: "データの使用を開始するバイト配列へのオフセット。"
    - id: count
      type: System.Int32
      description: "データとして使用する配列内のバイト数。"
    return:
      type: System.Byte[]
      description: "計算されたハッシュ コード。"
  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>count</code>無効な値です。       - または -<code>buffer</code>長さが無効です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>範囲外です。 このパラメーターには、負でない値が必要です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは既に破棄されています。"
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: HashAlgorithm.Create()
  fullName: System.Security.Cryptography.HashAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "ハッシュ アルゴリズムの既定の実装のインスタンスを作成します。"
  remarks: "既定では、このオーバー ロードを使用して、<xref:System.Security.Cryptography.SHA1CryptoServiceProvider>ハッシュ アルゴリズムの実装</xref:System.Security.Cryptography.SHA1CryptoServiceProvider>。 別の実装を指定する場合は、使用、<xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29>オーバー ロードの代わりに、アルゴリズムの名前を指定することができます</xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29>。 暗号の構成システム<xref:System.Security.Cryptography.HashAlgorithm>。</xref:System.Security.Cryptography.HashAlgorithm>の既定の実装を定義します。"
  syntax:
    content: public static System.Security.Cryptography.HashAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: "新しい<xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;></xref>インスタンスを使用して、既定の設定を変更されていない限り、します。"
  overload: System.Security.Cryptography.HashAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: HashAlgorithm.Create(String)
  fullName: System.Security.Cryptography.HashAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したハッシュ アルゴリズムの実装のインスタンスを作成します。"
  syntax:
    content: public static System.Security.Cryptography.HashAlgorithm Create (string hashName);
    parameters:
    - id: hashName
      type: System.String
      description: "使用するハッシュ アルゴリズムの実装です。 次の表に有効な値を示しています、`hashName`パラメーターおよびそれらの割り当て先のアルゴリズムです。       <table><thead><tr><th> パラメーターの値       </th><th> 実装       </th></tr></thead><tbody><tr><td> SHA       </td><td><xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;></xref></td></tr><tr><td> SHA1       </td><td><xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;></xref></td></tr><tr><td> System.Security.Cryptography.SHA1       </td><td><xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HashAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;></xref></td></tr><tr><td> MD5       </td><td><xref href=&quot;System.Security.Cryptography.MD5CryptoServiceProvider&quot;></xref></td></tr><tr><td> System.Security.Cryptography.MD5       </td><td><xref href=&quot;System.Security.Cryptography.MD5CryptoServiceProvider&quot;></xref></td></tr><tr><td> SHA256       </td><td><xref href=&quot;System.Security.Cryptography.SHA256Managed&quot;></xref></td></tr><tr><td> SHA-256       </td><td><xref href=&quot;System.Security.Cryptography.SHA256Managed&quot;></xref></td></tr><tr><td> System.Security.Cryptography.SHA256       </td><td><xref href=&quot;System.Security.Cryptography.SHA256Managed&quot;></xref></td></tr><tr><td> SHA384       </td><td><xref href=&quot;System.Security.Cryptography.SHA384Managed&quot;></xref></td></tr><tr><td> SHA-384       </td><td><xref href=&quot;System.Security.Cryptography.SHA384Managed&quot;></xref></td></tr><tr><td> System.Security.Cryptography.SHA384       </td><td><xref href=&quot;System.Security.Cryptography.SHA384Managed&quot;></xref></td></tr><tr><td> SHA512       </td><td><xref href=&quot;System.Security.Cryptography.SHA512Managed&quot;></xref></td></tr><tr><td> SHA-512       </td><td><xref href=&quot;System.Security.Cryptography.SHA512Managed&quot;></xref></td></tr><tr><td> System.Security.Cryptography.SHA512       </td><td><xref href=&quot;System.Security.Cryptography.SHA512Managed&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: "指定したハッシュ アルゴリズムの新しいインスタンスまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>場合<code> hashName </code>は有効なハッシュ アルゴリズムではありません。"
  overload: System.Security.Cryptography.HashAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: HashAlgorithm.Dispose()
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在のインスタンスによって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref>クラスです。"
  remarks: "呼び出す`Dispose` <xref:System.Security.Cryptography.HashAlgorithm>.</xref:System.Security.Cryptography.HashAlgorithm>の使用が終了したときに `Dispose`メソッドによって、<xref:System.Security.Cryptography.HashAlgorithm>使用不可の状態</xref:System.Security.Cryptography.HashAlgorithm>。 呼び出した後に`Dispose`へのすべての参照を解放する必要があります、<xref:System.Security.Cryptography.HashAlgorithm>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Security.Cryptography.HashAlgorithm>占有されていた</xref:System.Security.Cryptography.HashAlgorithm></xref:System.Security.Cryptography.HashAlgorithm>。       詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 常に呼び出し`Dispose`<xref:System.Security.Cryptography.HashAlgorithm></xref:System.Security.Cryptography.HashAlgorithm>の最後の参照を解放する前に。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Security.Cryptography.HashAlgorithm>オブジェクトの`Finalize`メソッド</xref:System.Security.Cryptography.HashAlgorithm>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HashAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび`Finalize`メソッドです。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 `Finalize`呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Security.Cryptography.HashAlgorithm>参照。</xref:System.Security.Cryptography.HashAlgorithm> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Security.Cryptography.HashAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Hash
  id: Hash
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Hash
  nameWithType: HashAlgorithm.Hash
  fullName: System.Security.Cryptography.HashAlgorithm.Hash
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "計算されたハッシュ コードの値を取得します。"
  remarks: "ハッシュ プロパティは、バイト配列です。<xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>プロパティは、bits を表す値</xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>。 したがって、 <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>。</xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>の&8; 分の&1; のサイズは、ハッシュ内の要素の数"
  syntax:
    content: public virtual byte[] Hash { get; }
    return:
      type: System.Byte[]
      description: "計算されたハッシュ コードの現在の値。"
  overload: System.Security.Cryptography.HashAlgorithm.Hash*
  exceptions:
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: "<xref href=&quot;System.Security.Cryptography.HashAlgorithm.HashValue&quot;></xref>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは既に破棄されています。"
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、ハッシュ アルゴリズム、ハッシュを計算するために、オブジェクトに書き込まれたデータをルーティングします。"
  remarks: "このメソッドは、アプリケーション コードでは呼び出されません。       この抽象メソッドでは、ハッシュ計算を実行します。 暗号ストリーム オブジェクトに対するすべての書き込みは、このメソッドをデータを通過します。 データの各ブロックに対しては、このメソッドは、データ ストリームの末尾に正しいハッシュ値が返されるために、ハッシュ オブジェクトの状態を更新します。"
  syntax:
    content: protected abstract void HashCore (byte[] array, int ibStart, int cbSize);
    parameters:
    - id: array
      type: System.Byte[]
      description: "ハッシュ コードを計算する入力。"
    - id: ibStart
      type: System.Int32
      description: "データの使用を開始するバイト配列へのオフセット。"
    - id: cbSize
      type: System.Int32
      description: "データとして使用するバイト配列内のバイト数。"
  overload: System.Security.Cryptography.HashAlgorithm.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashFinal()
  nameWithType: HashAlgorithm.HashFinal()
  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、暗号ストリーム オブジェクトによって最後にデータが処理された後、ハッシュ計算を終了します。"
  remarks: "このメソッドは、任意の部分的な計算を終了し、データ ストリームに対して正しいハッシュ値を返します。"
  syntax:
    content: protected abstract byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "計算されたハッシュ コード。"
  overload: System.Security.Cryptography.HashAlgorithm.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.HashSize
  id: HashSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashSize
  nameWithType: HashAlgorithm.HashSize
  fullName: System.Security.Cryptography.HashAlgorithm.HashSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "計算されたハッシュ コードのビット単位のサイズを取得します。"
  syntax:
    content: public virtual int HashSize { get; }
    return:
      type: System.Int32
      description: "計算されたハッシュ コードのビット単位のサイズ。"
  overload: System.Security.Cryptography.HashAlgorithm.HashSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  id: HashSizeValue
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashSizeValue
  nameWithType: HashAlgorithm.HashSizeValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "サイズをビット単位で計算されたハッシュ コードを表します。"
  remarks: "ハッシュ アルゴリズムは、ハッシュ コードのサイズを指定します。 たとえば、 <xref:System.Security.Cryptography.SHA1>160 ビットのハッシュのサイズを使用します</xref:System.Security.Cryptography.SHA1>。       このフィールドには、<xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>プロパティ</xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>。"
  syntax:
    content: protected int HashSizeValue;
    return:
      type: System.Int32
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.HashValue
  id: HashValue
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashValue
  nameWithType: HashAlgorithm.HashValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "計算されたハッシュ コードの値を表します。"
  remarks: "このフィールドには、<xref:System.Security.Cryptography.HashAlgorithm.Hash%2A>プロパティ</xref:System.Security.Cryptography.HashAlgorithm.Hash%2A>。"
  syntax:
    content: protected byte[] HashValue;
    return:
      type: System.Byte[]
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Initialize()
  nameWithType: HashAlgorithm.Initialize()
  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "実装を初期化、 <xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref>クラスです。"
  syntax:
    content: public abstract void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、入力ブロック サイズを取得します。"
  remarks: "オーバーライドされない限り、このプロパティは、値 1 を返します。"
  syntax:
    content: public virtual int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "入力ブロック サイズ。"
  overload: System.Security.Cryptography.HashAlgorithm.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、出力ブロック サイズを取得します。"
  remarks: "オーバーライドされない限り、このプロパティは、値 1 を返します。"
  syntax:
    content: public virtual int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "出力ブロック サイズ。"
  overload: System.Security.Cryptography.HashAlgorithm.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.State
  id: State
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: State
  nameWithType: HashAlgorithm.State
  fullName: System.Security.Cryptography.HashAlgorithm.State
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "ハッシュ計算の状態を表します。"
  remarks: "このフィールドをユーザーがハッシュ操作中に、キー付きハッシュ アルゴリズムのキーを変更することを防ぐために使用されます。 キーの変更が正当で、ときに、このフィールドの値が&0; ハッシュ操作の前後を使用します。 キーの変更が正当ではない場合にこのフィールドの値は&0; 以外の値です。"
  syntax:
    content: protected int State;
    return:
      type: System.Int32
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "入力バイト配列の指定した領域のハッシュ値を計算し、入力バイト配列の指定した領域を出力バイト配列の指定した領域にコピーします。"
  remarks: "呼び出しの前に TransformBlock メソッドを呼び出す必要があります、<xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A>メソッド</xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A>。 最後のハッシュ値を取得する前に、両方のメソッドを呼び出す必要があります。       呼び出した後、最後のハッシュ値を取得する、<xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A>メソッド内に含まれるバイト配列を取得する、<xref:System.Security.Cryptography.HashAlgorithm.Hash%2A>プロパティ</xref:System.Security.Cryptography.HashAlgorithm.Hash%2A></xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A>。       <xref:System.IO.IOException>。</xref:System.IO.IOException>異なる入力と出力配列 TransformBlock メソッドを呼び出す"
  example:
  - "The following code examples use the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method with the TransformBlock method to hash a string.  \n  \n [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/visualbasic/ecff726a-6c03-4fab-88fc-_1.vb)]\n [!code-cs[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/csharp/ecff726a-6c03-4fab-88fc-_1.cs)]"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "ハッシュ コードを計算する入力。"
    - id: inputOffset
      type: System.Int32
      description: "データの使用を開始位置を示す入力バイト配列へのオフセット。"
    - id: inputCount
      type: System.Int32
      description: "データとして使用する入力バイト配列内のバイト数。"
    - id: outputBuffer
      type: System.Byte[]
      description: "ハッシュ コードを計算するために使用する入力配列の一部のコピー。"
    - id: outputOffset
      type: System.Int32
      description: "データの書き込み開始位置を示す出力バイト配列へのオフセット。"
    return:
      type: System.Int32
      description: "書き込まれたバイト数。"
  overload: System.Security.Cryptography.HashAlgorithm.TransformBlock*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>inputCount</code>無効な値を使用します。       - または -<code>inputBuffer</code>が長さが無効です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>inputBuffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>inputOffset</code>範囲外です。 このパラメーターには、負でない値が必要です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは既に破棄されています。"
  platform:
  - net462
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したバイト配列の指定した領域のハッシュ値を計算します。"
  remarks: "TransformFinalBlock メソッドを呼び出した後に呼び出す必要があります、<xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A>メソッドは、最後のハッシュ値を取得する前にします</xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A>。       このメソッドの戻り値の値が入力データのハッシュされた一部のコピーだけが、ハッシュ値がないことに注意してください。  TransformFinalBlock メソッドを呼び出した後、最後のハッシュ値を取得するに含まれているバイト配列を取得、<xref:System.Security.Cryptography.HashAlgorithm.Hash%2A>プロパティ</xref:System.Security.Cryptography.HashAlgorithm.Hash%2A>。"
  example:
  - "The following code examples use the TransformFinalBlock method with the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method to hash a string.  \n  \n [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/visualbasic/e884136c-31d4-425b-a9d5-_1.vb)]\n [!code-cs[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/add/codesnippet/csharp/e884136c-31d4-425b-a9d5-_1.cs)]"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "ハッシュ コードを計算する入力。"
    - id: inputOffset
      type: System.Int32
      description: "データの使用を開始するバイト配列へのオフセット。"
    - id: inputCount
      type: System.Int32
      description: "データとして使用するバイト配列内のバイト数。"
    return:
      type: System.Byte[]
      description: "ハッシュされた入力の一部のコピーである配列。"
  overload: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>inputCount</code>無効な値を使用します。       - または -<code>inputBuffer</code>が無効なオフセットの長さ。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>inputBuffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>inputOffset</code>範囲外です。 このパラメーターには、負でない値が必要です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは既に破棄されています。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.HashAlgorithm.#ctor
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashAlgorithm()
  nameWithType: HashAlgorithm.HashAlgorithm()
  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.HashAlgorithm.Clear
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: HashAlgorithm.Clear()
  fullName: System.Security.Cryptography.HashAlgorithm.Clear()
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Byte[])
  nameWithType: HashAlgorithm.ComputeHash(Byte[])
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Stream)
  nameWithType: HashAlgorithm.ComputeHash(Stream)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.ComputeHash(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.HashAlgorithm.Create
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Create()
  nameWithType: HashAlgorithm.Create()
  fullName: System.Security.Cryptography.HashAlgorithm.Create()
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: HashAlgorithm.Create(String)
  fullName: System.Security.Cryptography.HashAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: HashAlgorithm.Dispose()
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()
- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HashAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(Boolean)
- uid: System.Security.Cryptography.HashAlgorithm.Hash
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Hash
  nameWithType: HashAlgorithm.Hash
  fullName: System.Security.Cryptography.HashAlgorithm.Hash
- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashFinal()
  nameWithType: HashAlgorithm.HashFinal()
  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()
- uid: System.Security.Cryptography.HashAlgorithm.HashSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSize
  nameWithType: HashAlgorithm.HashSize
  fullName: System.Security.Cryptography.HashAlgorithm.HashSize
- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSizeValue
  nameWithType: HashAlgorithm.HashSizeValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue
- uid: System.Security.Cryptography.HashAlgorithm.HashValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashValue
  nameWithType: HashAlgorithm.HashValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashValue
- uid: System.Security.Cryptography.HashAlgorithm.Initialize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Initialize()
  nameWithType: HashAlgorithm.Initialize()
  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.State
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: State
  nameWithType: HashAlgorithm.State
  fullName: System.Security.Cryptography.HashAlgorithm.State
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.HashAlgorithm.#ctor*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm.HashAlgorithm
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.HashAlgorithm.Clear*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Clear
  nameWithType: HashAlgorithm.Clear
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash
  nameWithType: HashAlgorithm.ComputeHash
- uid: System.Security.Cryptography.HashAlgorithm.Create*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Create
  nameWithType: HashAlgorithm.Create
- uid: System.Security.Cryptography.HashAlgorithm.Dispose*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: HashAlgorithm.Dispose
- uid: System.Security.Cryptography.HashAlgorithm.Hash*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Hash
  nameWithType: HashAlgorithm.Hash
- uid: System.Security.Cryptography.HashAlgorithm.HashCore*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashCore
  nameWithType: HashAlgorithm.HashCore
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashFinal
  nameWithType: HashAlgorithm.HashFinal
- uid: System.Security.Cryptography.HashAlgorithm.HashSize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSize
  nameWithType: HashAlgorithm.HashSize
- uid: System.Security.Cryptography.HashAlgorithm.Initialize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Initialize
  nameWithType: HashAlgorithm.Initialize
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformBlock
  nameWithType: HashAlgorithm.TransformBlock
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformFinalBlock
  nameWithType: HashAlgorithm.TransformFinalBlock
