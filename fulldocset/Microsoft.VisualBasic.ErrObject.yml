### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.ErrObject
  id: ErrObject
  children:
  - Microsoft.VisualBasic.ErrObject.Clear
  - Microsoft.VisualBasic.ErrObject.Description
  - Microsoft.VisualBasic.ErrObject.Erl
  - Microsoft.VisualBasic.ErrObject.GetException
  - Microsoft.VisualBasic.ErrObject.HelpContext
  - Microsoft.VisualBasic.ErrObject.HelpFile
  - Microsoft.VisualBasic.ErrObject.LastDllError
  - Microsoft.VisualBasic.ErrObject.Number
  - Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  - Microsoft.VisualBasic.ErrObject.Source
  langs:
  - csharp
  name: ErrObject
  nameWithType: ErrObject
  fullName: Microsoft.VisualBasic.ErrObject
  type: Class
  summary: "<xref uid=&quot;langword_csharp_ErrObject&quot; name=&quot;ErrObject&quot; href=&quot;&quot;> </xref>モジュールには、プロパティとを識別しを使用して実行時エラーを処理するための手順が含まれています、 <xref uid=&quot;langword_csharp_Err&quot; name=&quot;Err&quot; href=&quot;&quot;> </xref>オブジェクト。"
  remarks: "`ErrObject`モジュールは、サポート、`Err`オブジェクト。 詳細については、 <xref:Microsoft.VisualBasic.Information.Err%2A>。</xref:Microsoft.VisualBasic.Information.Err%2A>を参照してください。"
  example:
  - "This example uses the properties of the `Err` object in constructing an error-message dialog box. Notice what happens when you use the `Clear` method first: When you then generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.  \n  \n```  \nDim Msg As String  \n' If an error occurs, construct an error message.  \nOn Error Resume Next   ' Defer error handling.  \nErr.Clear  \nErr.Raise(6)   ' Generate an \"Overflow\" error.  \n' Check for error, then show message.  \nIf Err.Number <> 0 Then  \n    Msg = \"Error # \" & Str(Err.Number) & \" was generated by \" _  \n        & Err.Source & ControlChars.CrLf & Err.Description  \n    MsgBox(Msg, MsgBoxStyle.Information, \"Error\")  \nEnd If  \n```"
  syntax:
    content: public sealed class ErrObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Clear
  id: Clear
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Clear()
  nameWithType: ErrObject.Clear()
  fullName: Microsoft.VisualBasic.ErrObject.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "すべてのプロパティ設定を消去、 <xref uid=&quot;langword_csharp_Err&quot; name=&quot;Err&quot; href=&quot;&quot;> </xref>オブジェクト。"
  remarks: "使用して`Clear`を明示的にオフに、`Err`遅延によるエラー処理を使用する場合など、エラーが処理された後にオブジェクト`On Error Resume Next`です。 `Clear`メソッドが自動的に呼び出されますの次のステートメントを実行するたびに:-任意の種類の`Resume`声明 - `Exit Sub`、 `Exit Function`、または`Exit Property`- 任意`On Error`ステートメントの任意`Try...Catch...Finally`ステートメント > [!NOTE] >、`On Error Resume Next`コンストラクトことをお勧めする`On Error GoTo`他のオブジェクトへのアクセス中にエラーを処理するときにします。 チェック`Err`オブジェクトと対話をコードによってアクセスされたオブジェクトがあいまいさを削除した後: を確認するオブジェクトのエラー コードを配置する`Err.Number`、どのオブジェクトが最初に、エラーを生成および (で指定されたオブジェクト`Err.Source`)。"
  example:
  - "This example uses the `Err` object's `Clear` method to reset the numeric properties of the `Err` object to zero and its string properties to zero-length strings. Without the call to `Clear`, the second call to `MsgBox` would display the same error message.  \n  \n [!code-vb[VbVbalrErrorHandling#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._141_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.ErrObject.Clear*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Description
  id: Description
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Description
  nameWithType: ErrObject.Description
  fullName: Microsoft.VisualBasic.ErrObject.Description
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返すか設定、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>エラーに関連付けられた説明の文字列を含む式を指定します。 読み取り/書き込みです。"
  remarks: "`Description`エラーの簡単な説明のプロパティの設定で構成されます。 ユーザーができない場合や、処理したくないエラーのアラートを生成するには、このプロパティを使用します。 ユーザー定義のエラーを生成するときに、エラーの簡単な説明を割り当てる、`Description`プロパティです。 場合、`Description`プロパティが指定されていません、しの値、<xref:Microsoft.VisualBasic.ErrObject.Number%2A>プロパティは、Visual Basic ランタイム エラーに対応し、によって返される文字列、<xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A>関数が設定されている、`Description`プロパティ エラーが生成されたときにします</xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A></xref:Microsoft.VisualBasic.ErrObject.Number%2A>。"
  example:
  - "This example assigns a user-defined message to the `Description` property of the `Err` object.  \n  \n [!code-vb[VbVbalrErrorHandling#5](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._68_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "返すか設定、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>エラーに関連付けられた説明の文字列を含む式を指定します。 読み取り/書き込みです。"
  overload: Microsoft.VisualBasic.ErrObject.Description*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Erl
  id: Erl
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Erl
  nameWithType: ErrObject.Erl
  fullName: Microsoft.VisualBasic.ErrObject.Erl
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "最後に実行されたステートメントの行番号を示す整数を返します。 読み取り専用です。"
  remarks: "Visual Basic に行番号がない場合は、0 を返します。"
  example:
  - "This example uses the `Erl` property to indicate the line number.  \n  \n```  \n10:     On Error Resume Next  \n20:     Err.Raise(60000)  \n' Returns 20.  \n30:     MsgBox(Erl())  \n```"
  syntax:
    content: public int Erl { get; }
    return:
      type: System.Int32
      description: "最後に実行されたステートメントの行番号を示す整数を返します。 読み取り専用です。"
  overload: Microsoft.VisualBasic.ErrObject.Erl*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.GetException
  id: GetException
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: GetException()
  nameWithType: ErrObject.GetException()
  fullName: Microsoft.VisualBasic.ErrObject.GetException()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "発生したエラーを表す例外を返します。"
  remarks: "`GetException`関数はからのみ使用可能な`Err`オブジェクト クラス。 連携して、`Exception`のプロパティ、`Err`が発生したエラーを表示するオブジェクト。"
  example:
  - "The following code displays the message assigned to the exception in the `Err` object:  \n  \n [!code-vb[VbVbalrCatRef#66](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._226_1.vb)]"
  syntax:
    content: public Exception GetException ();
    parameters: []
    return:
      type: System.Exception
      description: "発生したエラーを表す例外を返します。"
  overload: Microsoft.VisualBasic.ErrObject.GetException*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.HelpContext
  id: HelpContext
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: HelpContext
  nameWithType: ErrObject.HelpContext
  fullName: Microsoft.VisualBasic.ErrObject.HelpContext
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返すか設定、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>ヘルプ ファイルのトピックのコンテキスト ID を含むです。 読み取り/書き込みです。"
  remarks: "`HelpContext`アプリケーションの状況依存のヘルプを表示するプロパティを使用します。 ヘルプ ファイルがで指定されている場合`HelpFile`、`HelpContext`プロパティの使用に自動的に指定されたヘルプ ファイルを表示します。 場合は、両方、`HelpFile`と`HelpContext`が空ですプロパティの値、<xref:Microsoft.VisualBasic.ErrObject.Number%2A>プロパティがオン。</xref:Microsoft.VisualBasic.ErrObject.Number%2A> 。 場合の値、`Number`プロパティは、Visual Basic ランタイム エラーの値に対応し、エラーの Visual Basic のヘルプ コンテキスト ID を使用します。 場合の値、`Number`プロパティは、Visual Basic エラーに対応するいないと、Visual Basic のヘルプ ファイルの内容の画面が表示されます。      > [!NOTE] > アプリケーション内に、一般的なエラーを処理するルーチンを記述する必要があります。 オブジェクトを使用したプログラミング、ときに、エラー処理の品質を向上させるか、エラーは回復できない場合、ユーザーに意味のあるメッセージを表示するオブジェクトのヘルプ ファイルを使用することができます。"
  example:
  - "This example uses the `HelpContext` property of the `Err` object to show the Visual Basic Help topic for the `Overflow` error.  \n  \n [!code-vb[VbVbalrErrorHandling#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._34_1.vb)]"
  syntax:
    content: public int HelpContext { get; set; }
    return:
      type: System.Int32
      description: "返すか設定、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>ヘルプ ファイルのトピックのコンテキスト ID を含むです。 読み取り/書き込みです。"
  overload: Microsoft.VisualBasic.ErrObject.HelpContext*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.HelpFile
  id: HelpFile
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: HelpFile
  nameWithType: ErrObject.HelpFile
  fullName: Microsoft.VisualBasic.ErrObject.HelpFile
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返すか設定、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>ヘルプ ファイルへの完全修飾パスを含む式を指定します。 読み取り/書き込みです。"
  remarks: "ヘルプ ファイルを指定する場合、`HelpFile`プロパティ、自動的に呼び出されてヘルプ キー (または、F1 キー) を押すエラー メッセージ ダイアログ ボックス。 場合、`HelpContext`プロパティには、このトピックで、指定されたファイルの ID が自動的に表示されている有効なコンテキストが含まれています。 ない場合は`HelpFile`を指定すると、Visual Basic のヘルプ ファイルが表示されます。      > [!NOTE] > アプリケーション内に、一般的なエラーを処理するルーチンを記述する必要があります。 オブジェクトを使用したプログラミング、ときに、エラー処理の品質を向上させるか、エラーは回復できない場合、ユーザーに意味のあるメッセージを表示するオブジェクトのヘルプ ファイルを使用することができます。"
  example:
  - "This example uses the `HelpFile` property of the `Err` object to start the Help system. By default, the `HelpFile` property contains the name of the Visual Basic Help file.  \n  \n [!code-vb[VbVbalrErrorHandling#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._70_1.vb)]"
  syntax:
    content: public string HelpFile { get; set; }
    return:
      type: System.String
      description: "返すか設定、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>ヘルプ ファイルへの完全修飾パスを含む式を指定します。 読み取り/書き込みです。"
  overload: Microsoft.VisualBasic.ErrObject.HelpFile*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.LastDllError
  id: LastDllError
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: LastDllError
  nameWithType: ErrObject.LastDllError
  fullName: Microsoft.VisualBasic.ErrObject.LastDllError
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "ダイナミック リンク ライブラリ (DLL) への呼び出しによって生成されたシステム エラー コードを返します。 読み取り専用です。"
  remarks: "LastDllError プロパティは、Visual Basic コードから DLL の呼び出しのみに適用されます。 このような呼び出しが行われたときに呼び出された関数は通常、成功または失敗を示すコードを返し、LastDllError プロパティを設定します。 成功または失敗を示す戻り値を決定する DLL の関数のドキュメントを確認してください。 エラー コードが返されるたびに、Visual Basic アプリケーションはすぐに LastDllError プロパティを確認する必要があります。 LastDllError プロパティが設定されている場合、例外は発生しません。      > [!NOTE] > によって保護されて、LastDllError プロパティ<xref:System.Security.Permissions.SecurityAction>を防ぎやすく、信頼されていないコードからアクセスされているからです</xref:System.Security.Permissions.SecurityAction>。 ただし、<xref:System.Security.Permissions.SecurityAction>のみ即時呼び出し元を持つ必要があります<xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A>権限</xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A></xref:System.Security.Permissions.SecurityAction>。 コードは、部分信頼コードから呼び出すことが場合、は、セキュリティ上のリスクは検証を伴わない LastDllError の値を公開することです。   >> の使用方法に関する重要な制限事項、 <xref:System.Security.Permissions.SecurityAction>、メンバーを参照してください[と要求</xref:System.Security.Permissions.SecurityAction>LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5)です。 アクセス許可の詳細については、次を参照してください<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission> 。       スマート デバイス用にこのプロパティは常に&0; を返します注意してください。"
  example:
  - "The following example shows how you can use the `LastDllError` property after calling a function in the Windows API. The `PrintWindowCoordinates` procedure takes a handle to a window and calls the `GetWindowRect` function. `GetWindowRect` fills the RECT data structure with the lengths of the sides of the rectangle that make up the window. If you pass an invalid handle, an error occurs, and the error number is available through the `LastDllError` property.  \n  \n [!code-vb[VbVbalrErrorHandling#8](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_1.vb)]  \n[!code-vb[VbVbalrErrorHandling#9](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_2.vb)]  \n[!code-vb[VbVbalrErrorHandling#10](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_3.vb)]  \n  \n [!code-vb[VbVbalrErrorHandling#11](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_4.vb)]"
  syntax:
    content: public int LastDllError { get; }
    return:
      type: System.Int32
      description: "ダイナミック リンク ライブラリ (DLL) への呼び出しによって生成されたシステム エラー コードを返します。 読み取り専用です。"
  overload: Microsoft.VisualBasic.ErrObject.LastDllError*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Number
  id: Number
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Number
  nameWithType: ErrObject.Number
  fullName: Microsoft.VisualBasic.ErrObject.Number
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します。 または、エラーを示す数値を設定します。 読み取り/書き込みです。"
  remarks: "すべての`Raise`以外で引数`Number`は省略可能です。 オプションの引数と、プロパティの設定を省略した場合、`Err`オブジェクトには、クリアされていない値が含まれている、それらの値が、エラーの値として機能します。       `Err`オブジェクトより詳細な情報でエラーを生成する場合よりも、`Error`ステートメントでは、`Raise`はクラス モジュールを作成するときにエラーを生成するために便利です。 たとえば、`Raise`メソッド、エラーを生成したソースで指定することができます、`Source`プロパティ、エラーのオンライン ヘルプは、参照できるしなどです。       オブジェクトから、ユーザー定義のエラーを返す場合は設定`Err.Number`エラー コードとして選択した数を加算して、`VbObjectError`定数。 たとえば、使用する次のコードを返すエラー コードと数 1051: [!code-vb [VbVbalrErrorHandling #13](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_1.vb)]"
  example:
  - "This example illustrates a typical use of the `Number` property in an error-handling routine.  \n  \n [!code-vb[VbVbalrErrorHandling#12](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_2.vb)]  \n  \n This example uses the `Err` object's `Raise` method to generate an original error within a function written in Visual Basic. The calling function can catch the error and report it to the user. Notice that procedure `CallingProcedure` contrasts the type of information that you can derive from an `Err` object with the information that you can derive from an `Exception` object.  \n  \n [!code-vb[VbVbalrErrorHandling#14](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_3.vb)]"
  syntax:
    content: public int Number { get; set; }
    return:
      type: System.Int32
      description: "返します。 または、エラーを示す数値を設定します。 読み取り/書き込みです。"
  overload: Microsoft.VisualBasic.ErrObject.Number*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>65535 バイトを超えています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  id: Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Raise(Int32,Object,Object,Object,Object)
  nameWithType: ErrObject.Raise(Int32,Object,Object,Object,Object)
  fullName: Microsoft.VisualBasic.ErrObject.Raise(Int32,Object,Object,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "実行時エラーです。代わりに使用できる、 <xref uid=&quot;langword_csharp_Error&quot; name=&quot;Error&quot; href=&quot;&quot;> </xref>ステートメントです。"
  remarks: "すべての`Raise`以外で引数`Number`は省略可能です。 オプションの引数と、プロパティの設定を省略した場合、`Err`オブジェクトには、クリアされていない値が含まれている、それらの値が、エラーの値として機能します。       `Err`オブジェクトより詳細な情報でエラーを生成する場合よりも、`Error`ステートメントでは、`Raise`はクラス モジュールを作成するときにエラーを生成するために便利です。 たとえば、`Raise`メソッド、エラーを生成したソースで指定することができます、`Source`プロパティ、エラーのオンライン ヘルプは、参照できるしなどです。"
  example:
  - "This example uses the `Err` object's `Raise` method to generate an error within a function written in Visual Basic. The calling function can catch the error and report it to the user with a message box.  \n  \n [!code-vb[VbVbalrErrorHandling#14](~/add/codesnippet/visualbasic/b1f4ec6f-36d3-4787-9987-_1.vb)]"
  syntax:
    content: public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);
    parameters:
    - id: Number
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>エラーの性質を識別する整数。 Visual Basic のエラーは、範囲 0 ~ 65535 です。システム エラーが発生します。 範囲 0 ~ 512 は予約されています513 ~ 65535 の範囲はユーザー定義のエラーです。 設定するときに、 <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref>にエラー コード番号を追加するプロパティをクラス モジュールに独自のエラー コードは、 <xref uid=&quot;langword_csharp_vbObjectError&quot; name=&quot;vbObjectError&quot; href=&quot;&quot;> </xref>定数。 たとえば、エラー番号 513 を生成するに割り当てる`vbObjectError + 513`を<xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;></xref>プロパティです。"
    - id: Source
      type: System.Object
      description: "任意。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>オブジェクトまたはエラーを生成したアプリケーションの名前付けの式。 オブジェクトのこのプロパティを設定する場合は、フォームを使用して`project`.`class`です。 場合`Source`が指定されていない、現在の Visual Basic プロジェクトのプロセス ID を使用します。"
    - id: Description
      type: System.Object
      description: "任意。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>エラーを説明する式。 値を指定しない場合、 <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref>プロパティが検査されます。 Visual Basic ランタイム エラーにマップできる場合はコードは、によって返される文字列、 <xref uid=&quot;langword_csharp_Error&quot; name=&quot;Error&quot; href=&quot;&quot;> </xref>関数として使用されます、 <xref uid=&quot;langword_csharp_Description&quot; name=&quot;Description&quot; href=&quot;&quot;> </xref>プロパティです。 対応する Visual Basic エラーがない場合、 <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref>プロパティ、「アプリケーション定義またはオブジェクト定義のエラー」メッセージを使用します。"
    - id: HelpFile
      type: System.Object
      description: "任意。 このエラーに関するヘルプが含まれているヘルプ ファイルへの完全修飾パス。 指定しない場合、Visual Basic は、完全修飾のドライブ、パス、および Visual Basic のヘルプ ファイルのファイル名を使用します。"
    - id: HelpContext
      type: System.Object
      description: "任意。 内のトピックを区別するためのコンテキスト ID`HelpFile`エラーのヘルプを提供します。 省略した場合、Visual Basic のヘルプ ファイル コンテキスト ID に対応するエラーを<xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;></xref>存在する場合、プロパティが使用されます。"
  overload: Microsoft.VisualBasic.ErrObject.Raise*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Source
  id: Source
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Source
  nameWithType: ErrObject.Source
  fullName: Microsoft.VisualBasic.ErrObject.Source
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返すか設定、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>オブジェクトまたはエラーの発生源アプリケーションの名前を指定する式。 読み取り/書き込みです。"
  remarks: "`Source`プロパティを指定します、`String`オブジェクトを表す式、エラーを生成する以外の場合は、式は、通常、オブジェクトのクラス名またはプロセス id です。 使用して、`Source`プロパティをコードがアクセス先のオブジェクトで生成されたエラーを処理できない場合は、情報を提供します。 たとえば、Microsoft Excel にアクセスして、生成、`Division by zero`エラー、Microsoft Excel 設定`Err.Number`セットをそのエラーの場合は、そのエラー コードを`Source`「始めます」にします。       アプリケーションが、コードからエラーを生成するときに`Source`アプリケーションのプログラムによる ID です。 クラス内で`Source`形式を持つ名前を含める必要があります*プロジェクト*.*クラス*です。 コードで予期しないエラーが発生したときに、`Source`にプロパティが自動的に入力します。 モジュールの場合、エラー`Source`プロジェクト名が含まれています。"
  example:
  - "This example demonstrates the use of the `Source` property in a typical error-handling routine. When an error is raised from `Class1`, the string `\"Class1\"` is assigned to the `Source` property of the `Err` object. This string is then displayed in an informative message indicating the source and number of the error.  \n  \n [!code-vb[VbVbalrErrorHandling#15](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._39_1.vb)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "返すか設定、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>オブジェクトまたはエラーの発生源アプリケーションの名前を指定する式。 読み取り/書き込みです。"
  overload: Microsoft.VisualBasic.ErrObject.Source*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.ErrObject.Clear
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Clear()
  nameWithType: ErrObject.Clear()
  fullName: Microsoft.VisualBasic.ErrObject.Clear()
- uid: Microsoft.VisualBasic.ErrObject.Description
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Description
  nameWithType: ErrObject.Description
  fullName: Microsoft.VisualBasic.ErrObject.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.ErrObject.Erl
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Erl
  nameWithType: ErrObject.Erl
  fullName: Microsoft.VisualBasic.ErrObject.Erl
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.ErrObject.GetException
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: GetException()
  nameWithType: ErrObject.GetException()
  fullName: Microsoft.VisualBasic.ErrObject.GetException()
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.VisualBasic.ErrObject.HelpContext
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpContext
  nameWithType: ErrObject.HelpContext
  fullName: Microsoft.VisualBasic.ErrObject.HelpContext
- uid: Microsoft.VisualBasic.ErrObject.HelpFile
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpFile
  nameWithType: ErrObject.HelpFile
  fullName: Microsoft.VisualBasic.ErrObject.HelpFile
- uid: Microsoft.VisualBasic.ErrObject.LastDllError
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: LastDllError
  nameWithType: ErrObject.LastDllError
  fullName: Microsoft.VisualBasic.ErrObject.LastDllError
- uid: Microsoft.VisualBasic.ErrObject.Number
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Number
  nameWithType: ErrObject.Number
  fullName: Microsoft.VisualBasic.ErrObject.Number
- uid: Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Raise(Int32,Object,Object,Object,Object)
  nameWithType: ErrObject.Raise(Int32,Object,Object,Object,Object)
  fullName: Microsoft.VisualBasic.ErrObject.Raise(Int32,Object,Object,Object,Object)
- uid: Microsoft.VisualBasic.ErrObject.Source
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Source
  nameWithType: ErrObject.Source
  fullName: Microsoft.VisualBasic.ErrObject.Source
- uid: Microsoft.VisualBasic.ErrObject.Clear*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Clear
  nameWithType: ErrObject.Clear
- uid: Microsoft.VisualBasic.ErrObject.Description*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Description
  nameWithType: ErrObject.Description
- uid: Microsoft.VisualBasic.ErrObject.Erl*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Erl
  nameWithType: ErrObject.Erl
- uid: Microsoft.VisualBasic.ErrObject.GetException*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: GetException
  nameWithType: ErrObject.GetException
- uid: Microsoft.VisualBasic.ErrObject.HelpContext*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpContext
  nameWithType: ErrObject.HelpContext
- uid: Microsoft.VisualBasic.ErrObject.HelpFile*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpFile
  nameWithType: ErrObject.HelpFile
- uid: Microsoft.VisualBasic.ErrObject.LastDllError*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: LastDllError
  nameWithType: ErrObject.LastDllError
- uid: Microsoft.VisualBasic.ErrObject.Number*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Number
  nameWithType: ErrObject.Number
- uid: Microsoft.VisualBasic.ErrObject.Raise*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Raise
  nameWithType: ErrObject.Raise
- uid: Microsoft.VisualBasic.ErrObject.Source*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Source
  nameWithType: ErrObject.Source
