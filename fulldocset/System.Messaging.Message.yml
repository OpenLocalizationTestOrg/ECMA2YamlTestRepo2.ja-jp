### YamlMime:ManagedReference
items:
- uid: System.Messaging.Message
  id: Message
  children:
  - System.Messaging.Message.#ctor
  - System.Messaging.Message.#ctor(System.Object)
  - System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  - System.Messaging.Message.AcknowledgeType
  - System.Messaging.Message.Acknowledgment
  - System.Messaging.Message.AdministrationQueue
  - System.Messaging.Message.AppSpecific
  - System.Messaging.Message.ArrivedTime
  - System.Messaging.Message.AttachSenderId
  - System.Messaging.Message.Authenticated
  - System.Messaging.Message.AuthenticationProviderName
  - System.Messaging.Message.AuthenticationProviderType
  - System.Messaging.Message.Body
  - System.Messaging.Message.BodyStream
  - System.Messaging.Message.BodyType
  - System.Messaging.Message.ConnectorType
  - System.Messaging.Message.CorrelationId
  - System.Messaging.Message.DestinationQueue
  - System.Messaging.Message.DestinationSymmetricKey
  - System.Messaging.Message.DigitalSignature
  - System.Messaging.Message.EncryptionAlgorithm
  - System.Messaging.Message.Extension
  - System.Messaging.Message.Formatter
  - System.Messaging.Message.HashAlgorithm
  - System.Messaging.Message.Id
  - System.Messaging.Message.InfiniteTimeout
  - System.Messaging.Message.IsFirstInTransaction
  - System.Messaging.Message.IsLastInTransaction
  - System.Messaging.Message.Label
  - System.Messaging.Message.LookupId
  - System.Messaging.Message.MessageType
  - System.Messaging.Message.Priority
  - System.Messaging.Message.Recoverable
  - System.Messaging.Message.ResponseQueue
  - System.Messaging.Message.SecurityContext
  - System.Messaging.Message.SenderCertificate
  - System.Messaging.Message.SenderId
  - System.Messaging.Message.SenderVersion
  - System.Messaging.Message.SentTime
  - System.Messaging.Message.SourceMachine
  - System.Messaging.Message.TimeToBeReceived
  - System.Messaging.Message.TimeToReachQueue
  - System.Messaging.Message.TransactionId
  - System.Messaging.Message.TransactionStatusQueue
  - System.Messaging.Message.UseAuthentication
  - System.Messaging.Message.UseDeadLetterQueue
  - System.Messaging.Message.UseEncryption
  - System.Messaging.Message.UseJournalQueue
  - System.Messaging.Message.UseTracing
  langs:
  - csharp
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
  type: Class
  summary: "メッセージ キューのメッセージを定義するために必要なプロパティへのアクセスを提供します。"
  remarks: "ピークまたはキューからメッセージを受信するか、キューにメッセージを送信するときにメッセージのプロパティを細かく制御するメッセージ クラスを使用します。       <xref:System.Messaging.MessageQueue>をピークしますまたは、キューからメッセージを受信するときにメッセージ クラスを使用して両方の<xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName>と<xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>メソッドはメッセージ クラスの新しいインスタンスを作成し、インスタンスのプロパティを設定します。</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName> 。</xref:System.Messaging.MessageQueue> メッセージ クラスの読み取り専用プロパティは、読み取り/書き込みプロパティはメッセージの送受信に適用中に、キューからメッセージの取得に適用されます。 ときに<xref:System.Messaging.MessageQueue>をピークしますまたは、キューからメッセージを受信、<xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>プロパティを取得するメッセージのプロパティを決定します。</xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> </xref:System.Messaging.MessageQueue> 。       <xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Send%2A>メソッドでは、そのキューに送信されるメッセージの任意のオブジェクト型を指定することができます</xref:System.Messaging.MessageQueue.Send%2A></xref:System.Messaging.MessageQueue>。 使用することができます、<xref:System.Messaging.MessageQueue>インスタンスの<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>プロパティはキューに送信される一般的なメッセージの設定を指定します</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A></xref:System.Messaging.MessageQueue>。 設定の種類には、フォーマッタ、ラベル、暗号化、および認証が含まれます。 適切な値を指定することも<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>メッセージ受信確認やレポート メッセージに応答するメッセージング アプリケーションを調整するときにメンバー</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> 。 キューにメッセージを送信するメッセージ インスタンスを使用する柔軟性にアクセスして、これらのプロパティの多くを変更する —&1; つのメッセージまたはメッセージのメッセージによってごとにします。 メッセージのプロパティより優先<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>。</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>       メッセージ データが格納されている、<xref:System.Messaging.Message.Body%2A>プロパティと、いずれか小さいほうの範囲、<xref:System.Messaging.Message.AppSpecific%2A>と<xref:System.Messaging.Message.Extension%2A>プロパティ</xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.Body%2A>。 ときにメッセージ データが暗号化、シリアル化、または逆シリアル化の内容のみ、<xref:System.Messaging.Message.Body%2A>プロパティが影響を受ける</xref:System.Messaging.Message.Body%2A>。       内容、<xref:System.Messaging.Message.Body%2A>を使用して、メッセージを送信するときに、プロパティはシリアル化、<xref:System.Messaging.Message.Formatter%2A>を指定するプロパティ</xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Body%2A>。 シリアル化された内容は、<xref:System.Messaging.Message.BodyStream%2A>プロパティ</xref:System.Messaging.Message.BodyStream%2A>。 設定することも、<xref:System.Messaging.Message.BodyStream%2A>プロパティを直接例については、メッセージの内容がデータ ファイルを送信します</xref:System.Messaging.Message.BodyStream%2A>。 <xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.Formatter%2A> <xref:System.Messaging.MessageQueue.Send%2A>。</xref:System.Messaging.MessageQueue.Send%2A>を呼び出すときに、メッセージ、およびデータを送信する前にいつでもプロパティを適切にシリアル化する</xref:System.Messaging.Message.Formatter%2A>か</xref:System.Messaging.Message.Body%2A>を変更することができます。       によって定義されたプロパティ、<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName>プロパティがメッセージの種類がメッセージにのみ適用されます</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName>。 指定した場合、<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>プロパティを<xref:System.Messaging.MessageQueue>、そのキューに送信されるメッセージ インスタンスで同じ名前を持つプロパティが無視するようにこれらの既定プロパティ</xref:System.Messaging.MessageQueue></xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>。       メッセージのインスタンスの初期プロパティ値の一覧は、次を参照してください、<xref:System.Messaging.Message.%23ctor%2A>コンス トラクター。</xref:System.Messaging.Message.%23ctor%2A> 。"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/t-system.messaging.message_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/t-system.messaging.message_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/t-system.messaging.message_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/t-system.messaging.message_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/t-system.messaging.message_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/t-system.messaging.message_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class Message : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.Message.#ctor
  id: '#ctor'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message()
  nameWithType: Message.Message()
  fullName: System.Messaging.Message.Message()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Messaging.Message&quot;> </xref>空の本文を持つクラス。"
  remarks: "このオーバー ロードを使用して、新しいインスタンスを作成する、<xref:System.Messaging.Message>空の本文を持つクラスである</xref:System.Messaging.Message>。       いずれかを指定、<xref:System.Messaging.Message.Body%2A>プロパティまたは<xref:System.Messaging.Message.BodyStream%2A>を送信する前に、プロパティ、<xref:System.Messaging.Message>オブジェクト</xref:System.Messaging.Message></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A>。 <xref:System.Messaging.Message.Body%2A>プロパティには、テキスト文字列など、シリアル化可能な任意のオブジェクト、構造体オブジェクト、クラスのインスタンスでは、埋め込みオブジェクトを含むことができます</xref:System.Messaging.Message.Body%2A>。       直接メッセージの内容を記述しない限り、<xref:System.Messaging.Message.BodyStream%2A>プロパティ、設定、<xref:System.Messaging.Message.Formatter%2A>プロパティ、メッセージを送信する前にします</xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.BodyStream%2A>。 使用して、本文がシリアル化、<xref:System.Messaging.Message.Formatter%2A>時のプロパティの値、<xref:System.Messaging.MessageQueue.Send%2A>メソッドが、<xref:System.Messaging.MessageQueue>インスタンス</xref:System.Messaging.MessageQueue></xref:System.Messaging.MessageQueue.Send%2A></xref:System.Messaging.Message.Formatter%2A>。       <xref:System.Messaging.XmlMessageFormatter>、疎結合できるので、同じオブジェクトをこの形式を使用する場合、送信者と受信者を入力する必要はありません</xref:System.Messaging.XmlMessageFormatter>。 <xref:System.Messaging.ActiveXMessageFormatter>と<xref:System.Messaging.BinaryMessageFormatter>のバイナリ表現にデータをシリアル化します</xref:System.Messaging.BinaryMessageFormatter></xref:System.Messaging.ActiveXMessageFormatter>。 <xref:System.Messaging.ActiveXMessageFormatter>COM コンポーネントを送受信する際に使用します</xref:System.Messaging.ActiveXMessageFormatter>。       次の表は、 <xref:System.Messaging.Message>。</xref:System.Messaging.Message>のインスタンスの初期プロパティ値を示しています。      |プロパティ |初期値 |  |--------------|-------------------|  |<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  |<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  |<xref:System.Messaging.Message.AppSpecific%2A>|0|  |<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  |<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft ベース暗号化プロバイダーのバージョン 1.0 |  |<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  |<xref:System.Messaging.Message.Body%2A>|`null`|  |<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  |<xref:System.Messaging.Message.BodyType%2A>|0|  |<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  |<xref:System.Messaging.Message.CorrelationId%2A>|空の文字列 (&quot;&quot;) |  |<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.DigitalSignature%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  |<xref:System.Messaging.Message.Extension%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  |<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  |<xref:System.Messaging.Message.Label%2A>|空の文字列 (&quot;&quot;) |  |<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  |<xref:System.Messaging.Message.Recoverable%2A>|`false`|  |<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  |<xref:System.Messaging.Message.SenderCertificate%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  |<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  |<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  |<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  |<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  |<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  |<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  |<xref:System.Messaging.Message.UseTracing%2A>|`false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/m-system.messaging.messa_16_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_16_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/m-system.messaging.messa_16_1.cs)]"
  syntax:
    content: public Message ();
    parameters: []
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: System.Messaging.Message.Message(Object)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Messaging.Message&quot;> </xref>クラス、使用、 <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref>メッセージの本文に指定したオブジェクトをシリアル化します。"
  remarks: "このオーバー ロードを使用して、新しいインスタンスを作成する、<xref:System.Messaging.Message>クラスを含む、<xref:System.Messaging.Message.Body%2A>によって指定された、`body`パラメーター</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message> 。 `body`パラメーターは、文字列、構造体オブジェクト、クラスのインスタンスまたは埋め込みオブジェクトなど、シリアル化可能な任意のオブジェクトを指定できます。 使用して、本文がシリアル化、<xref:System.Messaging.XmlMessageFormatter>を変更しない限り、<xref:System.Messaging.Message.Formatter%2A>前に、プロパティ、<xref:System.Messaging.Message>が送信される</xref:System.Messaging.Message></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.XmlMessageFormatter>。 変更した場合、<xref:System.Messaging.Message.Body%2A>または<xref:System.Messaging.Message.Formatter%2A>プロパティを呼び出す前にいつでも<xref:System.Messaging.MessageQueue.Send%2A>、新しいプロパティ値に従ってメッセージをシリアル化されます</xref:System.Messaging.MessageQueue.Send%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Body%2A>。       <xref:System.Messaging.XmlMessageFormatter>、疎結合できるので、同じオブジェクトをこの形式を使用する場合、送信者と受信者を入力する必要はありません</xref:System.Messaging.XmlMessageFormatter>。 <xref:System.Messaging.ActiveXMessageFormatter>と<xref:System.Messaging.BinaryMessageFormatter>のバイナリ表現にデータをシリアル化します</xref:System.Messaging.BinaryMessageFormatter></xref:System.Messaging.ActiveXMessageFormatter>。 <xref:System.Messaging.ActiveXMessageFormatter>COM コンポーネントを送受信する際に使用します</xref:System.Messaging.ActiveXMessageFormatter>。       次の表は、 <xref:System.Messaging.Message>。</xref:System.Messaging.Message>のインスタンスの初期プロパティ値を示しています。      |プロパティ |初期値 |  |--------------|-------------------|  |<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  |<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  |<xref:System.Messaging.Message.AppSpecific%2A>|0|  |<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  |<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft ベース暗号化プロバイダーのバージョン 1.0 |  |<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  |<xref:System.Messaging.Message.Body%2A>|`body`パラメーターです |。  |<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  |<xref:System.Messaging.Message.BodyType%2A>|0|  |<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  |<xref:System.Messaging.Message.CorrelationId%2A>|空の文字列 (&quot;&quot;) |  |<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.DigitalSignature%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  |<xref:System.Messaging.Message.Extension%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  |<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  |<xref:System.Messaging.Message.Label%2A>|空の文字列 (&quot;&quot;) |  |<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  |<xref:System.Messaging.Message.Recoverable%2A>|`false`|  |<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  |<xref:System.Messaging.Message.SenderCertificate%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  |<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  |<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  |<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  |<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  |<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  |<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  |<xref:System.Messaging.Message.UseTracing%2A>|`false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example creates a new queue, sends a message that contains an order to it, and then retrieves it.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.messa_33_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.messa_33_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_33_1.vb)]"
  syntax:
    content: public Message (object body);
    parameters:
    - id: body
      type: System.Object
      description: "メッセージの本文にシリアル化するオブジェクト。"
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  id: '#ctor(System.Object,System.Messaging.IMessageFormatter)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object,IMessageFormatter)
  nameWithType: Message.Message(Object,IMessageFormatter)
  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Messaging.Message&quot;> </xref>クラス、メッセージの本文に指定したオブジェクトをシリアル化する指定したフォーマッタを使用します。"
  remarks: "このオーバー ロードを使用して、新しいインスタンスを作成する、<xref:System.Messaging.Message>クラスを含む、<xref:System.Messaging.Message.Body%2A>によって指定された、`body`パラメーターを任意の有効なフォーマッタを使用して、本文をシリアル化します</xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message>。 `body`パラメーターは文字列、構造体オブジェクト、クラスのインスタンスまたは埋め込みオブジェクトなど、シリアル化可能な任意のオブジェクト。 変更した場合、<xref:System.Messaging.Message.Body%2A>または<xref:System.Messaging.Message.Formatter%2A>プロパティを呼び出す前にいつでも<xref:System.Messaging.MessageQueue.Send%2A>、新しいプロパティ値に従ってメッセージをシリアル化されます</xref:System.Messaging.MessageQueue.Send%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Body%2A>。       <xref:System.Messaging.XmlMessageFormatter>、疎結合できるので、同じオブジェクトをこの形式を使用する場合、送信者と受信者を入力する必要はありません</xref:System.Messaging.XmlMessageFormatter>。 <xref:System.Messaging.ActiveXMessageFormatter>と<xref:System.Messaging.BinaryMessageFormatter>のバイナリ表現にデータをシリアル化します</xref:System.Messaging.BinaryMessageFormatter></xref:System.Messaging.ActiveXMessageFormatter>。 <xref:System.Messaging.ActiveXMessageFormatter>COM コンポーネントを送受信する際に使用します</xref:System.Messaging.ActiveXMessageFormatter>。       次の表は、 <xref:System.Messaging.Message>。</xref:System.Messaging.Message>のインスタンスの初期プロパティ値を示しています。      |プロパティ |初期値 |  |--------------|-------------------|  |<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  |<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  |<xref:System.Messaging.Message.AppSpecific%2A>|0|  |<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  |<xref:System.Messaging.Message.AuthenticationProviderName%2A>|Microsoft ベース暗号化プロバイダーのバージョン 1.0 |  |<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  |<xref:System.Messaging.Message.Body%2A>|`body`パラメーターです |。  |<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  |<xref:System.Messaging.Message.BodyType%2A>|0|  |<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  |<xref:System.Messaging.Message.CorrelationId%2A>|空の文字列 (&quot;&quot;) |  |<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.DigitalSignature%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  |<xref:System.Messaging.Message.Extension%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.Formatter%2A>|`formatter`パラメーターです |。  |<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  |<xref:System.Messaging.Message.Label%2A>|空の文字列 (&quot;&quot;) |  |<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  |<xref:System.Messaging.Message.Recoverable%2A>|`false`|  |<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  |<xref:System.Messaging.Message.SenderCertificate%2A>|バイトの長さ 0 の配列 |  |<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  |<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  |<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  |<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  |<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  |<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  |<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  |<xref:System.Messaging.Message.UseTracing%2A>|`false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - >-
    [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/6734a59e-0a86-49d1-96b9-_1.cpp)]
     [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/6734a59e-0a86-49d1-96b9-_1.cs)]
     [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/6734a59e-0a86-49d1-96b9-_1.vb)]
  syntax:
    content: public Message (object body, System.Messaging.IMessageFormatter formatter);
    parameters:
    - id: body
      type: System.Object
      description: "メッセージの本文にシリアル化するオブジェクト。"
    - id: formatter
      type: System.Messaging.IMessageFormatter
      description: "A <xref href=&quot;System.Messaging.IMessageFormatter&quot;> </xref>メッセージの本文をシリアル化に使用するフォーマッタを指定します。"
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.AcknowledgeType
  id: AcknowledgeType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: System.Messaging.Message.AcknowledgeType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または送信アプリケーションに返される受信確認メッセージの種類を設定します。"
  remarks: "AcknowledgeType プロパティでは、送信元アプリケーションによって要求の受信確認メッセージの種類を指定します。 特定の状況の通知を要求するメッセージを送信する前に、AcknowledgeType プロパティを設定 — など、メッセージ送信先キューに到達、取得されるメッセージまたはによりメッセージに到達するか、送信先キューから取得されているタイムアウトします。       メッセージ キューは受信確認メッセージを送信することで通知を返します、 <xref:System.Messaging.Message.AdministrationQueue%2A>、元のメッセージで指定されたプロパティ</xref:System.Messaging.Message.AdministrationQueue%2A>。 受信確認メッセージの<xref:System.Messaging.Message.Acknowledgment%2A>プロパティが表す受信確認の種類を示します</xref:System.Messaging.Message.Acknowledgment%2A>。 たとえば、メッセージにする前に、変換先に到達しないため、受信確認メッセージが送信された場合、<xref:System.Messaging.Message.TimeToReachQueue%2A>間隔が経過した、<xref:System.Messaging.Message.Acknowledgment%2A>受信確認メッセージのプロパティの値が格納`ReachQueueTimeout`</xref:System.Messaging.Message.Acknowledgment%2A></xref:System.Messaging.Message.TimeToReachQueue%2A>。"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_11_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_11_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_11_1.vb)]"
  syntax:
    content: public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }
    return:
      type: System.Messaging.AcknowledgeTypes
      description: "1 つ、 <xref href=&quot;System.Messaging.AcknowledgeTypes&quot;> </xref>システムは post とする受信確認が送信元アプリケーションに返される状態の管理キューで受信確認メッセージの両方の型を表す値です。 既定値は<xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.AcknowledgeType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "AcknowledgeType プロパティを無視する、メッセージがフィルターされます。"
  platform:
  - net462
- uid: System.Messaging.Message.Acknowledgment
  id: Acknowledgment
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: System.Messaging.Message.Acknowledgment
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "このメッセージが表す受信確認の分類を取得します。"
  remarks: "管理キューからメッセージを受信した場合は、元のメッセージの状態を確認する受信確認プロパティを読み取ります。       メッセージが送信先キューに送信されると、受信確認メッセージを投稿するメッセージ キューを要求できます。 このようなメッセージかなど、かどうか、指定されたタイムアウトは、内に取得されたメッセージに到着したどの配信に失敗した場合に発生したことを示していることができます。 送信先キューがメッセージを確認して、元のメッセージで指定される管理キューに送信を返します<xref:System.Messaging.Message.AdministrationQueue%2A>プロパティ</xref:System.Messaging.Message.AdministrationQueue%2A>。 <xref:System.Messaging.Message.Id%2A>受信確認メッセージのプロパティは、元のメッセージではなく、受信確認メッセージを識別します</xref:System.Messaging.Message.Id%2A>。 受信確認で元のメッセージの id を見つけることができます<xref:System.Messaging.Message>インスタンスの<xref:System.Messaging.Message.CorrelationId%2A>プロパティ</xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message>。       この場合<xref:System.Messaging.Message>インスタンスが、受信確認メッセージを表す、受信確認プロパティは、受信確認の種類を指定します</xref:System.Messaging.Message>。 それ以外の場合、受信確認プロパティが値を含む`Normal`です。       使用して、 <xref:System.Messaging.Message.AcknowledgeType%2A>、元のメッセージの受信確認が返されますの状況を指定するプロパティ</xref:System.Messaging.Message.AcknowledgeType%2A>。"
  syntax:
    content: public System.Messaging.Acknowledgment Acknowledgment { get; }
    return:
      type: System.Messaging.Acknowledgment
      description: "1 つ、 <xref href=&quot;System.Messaging.Acknowledgment&quot;> </xref>列挙値。"
  overload: System.Messaging.Message.Acknowledgment*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       - または - を無視するフィルターがメッセージ キュー、<xref:System.Messaging.MessagePropertyFilter.Acknowledgment*>プロパティ</xref:System.Messaging.MessagePropertyFilter.Acknowledgment*>。"
  platform:
  - net462
- uid: System.Messaging.Message.AdministrationQueue
  id: AdministrationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: System.Messaging.Message.AdministrationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージ キューによって生成される受信確認メッセージを受信するキューを設定します。"
  remarks: "AdministrationQueue プロパティで指定されたキューは、任意の非トランザクション キューをすることができます。 管理キューに送信される受信確認メッセージは、元のメッセージが送信先キューに到達したかどうかが、キューから削除されたかどうかを示すことができます。       ときに、<xref:System.Messaging.Message.AcknowledgeType%2A>プロパティ以外の任意の値を持つ`None`、送信元アプリケーションは、管理キューとして使用するキューを指定する必要があります</xref:System.Messaging.Message.AcknowledgeType%2A>。"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_47_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_47_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_47_1.vb)]"
  syntax:
    content: public System.Messaging.MessageQueue AdministrationQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "<xref href=&quot;System.Messaging.MessageQueue&quot;> </xref>システムによって生成された受信確認メッセージで使用される管理キューを指定します。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.AdministrationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "AdministrationQueue プロパティを無視するフィルターがメッセージ キューです。"
  platform:
  - net462
- uid: System.Messaging.Message.AppSpecific
  id: AppSpecific
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: System.Messaging.Message.AppSpecific
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または追加、アプリケーション固有の情報を設定します。"
  remarks: "AppSpecific プロパティには、メッセージのさまざまな種類の編成に使用できるアプリケーション固有の情報が含まれています。 たとえば、アプリケーション固有のインデックスを使用することができます。 AppSpecific プロパティ情報の解釈は、アプリケーションの役割です。       可能な限り、AppSpecific プロパティではなく、メッセージの本文でメッセージ データを含める必要があります。       外部のキューを使用するときに使用して、<xref:System.Messaging.Message.Extension%2A>メッセージ キューの存在しないメッセージのプロパティを指定するプロパティ</xref:System.Messaging.Message.Extension%2A>。 コンテンツを理解して、アプリケーションの責任において、AppSpecific プロパティでは、<xref:System.Messaging.Message.Extension%2A>プロパティ</xref:System.Messaging.Message.Extension%2A>。"
  syntax:
    content: public int AppSpecific { get; set; }
    return:
      type: System.Int32
      description: "アプリケーション固有の情報です。 既定値は&0; です。"
  overload: System.Messaging.Message.AppSpecific*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "AppSpecific プロパティを無視するフィルターがメッセージ キューです。"
  platform:
  - net462
- uid: System.Messaging.Message.ArrivedTime
  id: ArrivedTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: System.Messaging.Message.ArrivedTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージが送信先キューに到着した時刻を取得します。"
  remarks: "メッセージの<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティは、送信先キューからメッセージを受け取る必要がどの程度の速度を示します</xref:System.Messaging.Message.TimeToBeReceived%2A>。 <xref:System.Messaging.Message.TimeToBeReceived%2A>メッセージがキューに到着したときではなく、メッセージが送信されるときに、プロパティのタイマーが開始します</xref:System.Messaging.Message.TimeToBeReceived%2A>。"
  example:
  - "The following code example displays the value of a message's ArrivedTime property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public DateTime ArrivedTime { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>送信先キューにメッセージの到着時刻を表す</xref:System.DateTime>。 時間は、GMT から送信先キューが存在するコンピューターのローカル時刻に調整されます。"
  overload: System.Messaging.Message.ArrivedTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、ArrivedTime プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.AttachSenderId
  id: AttachSenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: System.Messaging.Message.AttachSenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または送信側 ID をメッセージに添付する必要があるかどうかを示す値を設定します。"
  remarks: "<xref:System.Messaging.Message.SenderId%2A>プロパティを送信しているユーザーの識別子を表すバイトの配列です</xref:System.Messaging.Message.SenderId%2A>。 送信者 ID は、メッセージ キューによって設定されているし、は、受信側キュー マネージャーによって使用送信者が、キューへのアクセス権を持つかどうかを確認します。       ID が示しているメッセージ キュー メッセージの送信者を検証やは避けてください送信者のアクセスの確認の送信元アプリケーションによって、送信者がない場合は、受信側のキューに権限です。 <xref:System.Messaging.Message.SenderId%2A>が信頼できるは、メッセージが送信先キューに達したときに認証された場合にのみです</xref:System.Messaging.Message.SenderId%2A>。 キューが認証されたメッセージのみとするかを受け入れる場合、送信先キューに達すると、メッセージが拒否された、<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>または<xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>プロパティは`false`</xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A></xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>。      > [!CAUTION] >、配信不能キューに送信するか、メッセージが拒否された場合は (場合<xref:System.Messaging.Message.UseDeadLetterQueue%2A>は`true`)、または無視されます</xref:System.Messaging.Message.UseDeadLetterQueue%2A>。 メッセージがキューに到達できないときに、受信確認を要求できます。 それ以外の場合、when<xref:System.Messaging.Message.UseDeadLetterQueue%2A>は`false`メッセージは警告なし失われる可能性があります</xref:System.Messaging.Message.UseDeadLetterQueue%2A>。"
  example:
  - "The following code example gets and sets the value of a message's AttachSenderId property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool AttachSenderId { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref:System.Messaging.Message.SenderId*>、それ以外のメッセージに添付する必要があります<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Messaging.Message.SenderId*> 。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.AttachSenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューは AttachSenderId プロパティを無視するフィルター処理されます。"
  platform:
  - net462
- uid: System.Messaging.Message.Authenticated
  id: Authenticated
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: System.Messaging.Message.Authenticated
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージが認証されたかどうかを示す値を取得します。"
  remarks: "メッセージと対話し、認証が要求されたかどうかの判断を行うには、中には、認証済みプロパティをアプリケーションでのみ使用されます。 メッセージがキューにある場合は、メッセージが認証されました。 逆に、認証済みプロパティが場合`true`、受信側キュー マネージャーは、そのメッセージを受信したときにメッセージを認証します。       メッセージのプロパティを調べることで認証に失敗したかどうかを判断できません。 メッセージ キューは、キューに配信される前に認証に失敗したメッセージを破棄します。 ただし、配信の失敗が原因で、メッセージがキューに到着した場合に、受信確認メッセージを送信することを要求することができます。"
  example:
  - "The following code example displays the value of a message's Authenticated property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool Authenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>キューを入力するときに、メッセージの認証が要求された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.Authenticated*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、メッセージ キューは認証済みプロパティを無視するフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.AuthenticationProviderName
  id: AuthenticationProviderName
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: System.Messaging.Message.AuthenticationProviderName
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージのデジタル署名の生成に使用される暗号化サービス プロバイダーの名前を設定します。"
  remarks: "通常は外部キューを使用する場合、AuthenticationProviderName を使用します。 メッセージ キューは、暗号化サービス プロバイダーを外部のキューに送信されたメッセージと外部のキューからメッセージ キューに渡されるメッセージの両方のデジタル署名を検証する (認証プロバイダー) の認証プロバイダーの種類と認証プロバイダーの名前が必要です。       設定、AuthenticationProviderName が常にメッセージを送信するときに、<xref:System.Messaging.Message.ConnectorType%2A>まとめてプロパティ</xref:System.Messaging.Message.ConnectorType%2A>。 コネクタの種類にも設定されていない場合、メッセージ キュー メッセージを送信するときに認証のプロバイダー名を無視します。       AuthenticationProviderName プロパティは、`null`が空の文字列を指定できます (&quot;&quot;) です。"
  syntax:
    content: public string AuthenticationProviderName { get; set; }
    return:
      type: System.String
      description: "メッセージのデジタル署名の生成に使用される暗号化サービス プロバイダーの名前。 既定値は、Microsoft ベース暗号化プロバイダーのバージョン 1.0 です。"
  overload: System.Messaging.Message.AuthenticationProviderName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "AuthenticationProviderName プロパティを設定できませんでした。       または、AuthenticationProviderName プロパティを無視する、メッセージ キューはフィルター処理します。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "AuthenticationProviderName に設定された<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Messaging.Message.AuthenticationProviderType
  id: AuthenticationProviderType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: System.Messaging.Message.AuthenticationProviderType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージのデジタル署名の生成に使われる暗号プロバイダーの種類を設定します。"
  remarks: "通常使用する AuthenticationProviderType プロパティ外部キューを使用する場合を指定する暗号化サービス プロバイダーは、メッセージに関連付けられています。 メッセージ キューは、暗号化サービス プロバイダーを外部のキューに送信されたメッセージと外部のキューからメッセージ キューに渡されるメッセージの両方のデジタル署名を検証する (認証プロバイダー) の認証プロバイダーの種類と認証プロバイダーの名前が必要です。       のみ`RsaFull`メッセージングで使用するためのものでは、します。       設定、AuthenticationProviderType が常にメッセージを送信するときに、<xref:System.Messaging.Message.ConnectorType%2A>まとめてプロパティ</xref:System.Messaging.Message.ConnectorType%2A>。 コネクタの種類にも設定されていない場合、メッセージ キュー メッセージを送信するときに認証プロバイダーの種類を無視します。"
  syntax:
    content: public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }
    return:
      type: System.Messaging.CryptographicProviderType
      description: "1 つ、 <xref href=&quot;System.Messaging.CryptographicProviderType&quot;> </xref>値。 既定値は<xref uid=&quot;langword_csharp_RSA_FULL&quot; name=&quot;RSA_FULL&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.AuthenticationProviderType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "AuthenticationProviderType プロパティを設定できませんでした。       または、AuthenticationProviderType プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.Body
  id: Body
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Body
  nameWithType: Message.Body
  fullName: System.Messaging.Message.Body
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージの内容を設定します。"
  remarks: "通常、メッセージの本文のプロパティには、メッセージに関連付けられているデータが含まれます。 アプリケーション固有のデータを送信することもできますが、<xref:System.Messaging.Message.AppSpecific%2A>と<xref:System.Messaging.Message.Extension%2A>プロパティ、可能な限り、メッセージの本文のメッセージ データを含める必要があります</xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.AppSpecific%2A>。 本文プロパティの内容のみをシリアル化または暗号化します。       Body プロパティには、そのサイズが 4 MB を超えない任意のオブジェクトを含めることができます。 <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName></xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>使用<xref:System.Messaging.Message>するには<xref:System.Messaging.MessageQueue><xref:System.Messaging.Message><xref:System.Messaging.MessageQueue.Peek%2A>または<xref:System.Messaging.MessageQueue.Receive%2A>。</xref:System.Messaging.MessageQueue.Receive%2A></xref:System.Messaging.MessageQueue.Peek%2A>によって返されるインスタンス</xref:System.Messaging.Message>の Body プロパティに配置されますがオブジェクトを</xref:System.Messaging.MessageQueue></xref:System.Messaging.Message>型のないである任意のオブジェクトを送信する場合       文字列の引数`MessageQueue.Send(&quot;hello.&quot;)`このような汎用オブジェクトの例に示します。       <xref:System.Messaging.Message.BodyType%2A>プロパティは、メッセージ本文に格納されている情報の種類を示します</xref:System.Messaging.Message.BodyType%2A>。 メッセージ キューでは、この情報を使用して、本文のプロパティのコンテンツの種類を識別します。       Body プロパティを指定または<xref:System.Messaging.Message.BodyStream%2A>を送信する前に、プロパティ、<xref:System.Messaging.Message>オブジェクト</xref:System.Messaging.Message></xref:System.Messaging.Message.BodyStream%2A>。 Body プロパティには、任意のテキスト文字列などのシリアル化可能なオブジェクト、構造体オブジェクト、クラスのインスタンスまたは埋め込みオブジェクトができます。       直接メッセージの内容を記述しない限り、<xref:System.Messaging.Message.BodyStream%2A>プロパティ、設定、<xref:System.Messaging.Message.Formatter%2A>プロパティ、メッセージを送信する前にします</xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.BodyStream%2A>。 ときに、<xref:System.Messaging.MessageQueue.Send%2A>メソッドが、<xref:System.Messaging.MessageQueue>に含まれているフォーマッタを使用して、インスタンス、本文がシリアル化、<xref:System.Messaging.Message.Formatter%2A>プロパティ</xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.MessageQueue></xref:System.Messaging.MessageQueue.Send%2A>。 <xref:System.Messaging.Message.Formatter%2A>フォーマッタの既定値は<xref:System.Messaging.XmlMessageFormatter>。</xref:System.Messaging.XmlMessageFormatter> 、プロパティ</xref:System.Messaging.Message.Formatter%2A>の値を指定せず、メッセージを送信する場合      > [!NOTE] > へのメッセージの本文を設定しようとしています<xref:System.Decimal.MaxValue>により、<xref:System.OverflowException>ときに、`Send`のメソッド、<xref:System.Messaging.MessageQueue>クラスが呼び出されますと<xref:System.Messaging.ActiveXMessageFormatter>を使用します。</xref:System.Messaging.ActiveXMessageFormatter> </xref:System.Messaging.MessageQueue> </xref:System.OverflowException> </xref:System.Decimal.MaxValue> 。"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_13_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_13_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_13_1.cs)]"
  syntax:
    content: public object Body { get; set; }
    return:
      type: System.Object
      description: "メッセージの内容を指定するオブジェクト。 オブジェクトは、文字列、日付、通貨、数値、(バイト単位) の配列または任意のマネージ オブジェクトにできます。"
  overload: System.Messaging.Message.Body*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Messaging.Message.Formatter*>プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref></xref:System.Messaging.Message.Formatter*> 。       または、Body プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.BodyStream
  id: BodyStream
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: System.Messaging.Message.BodyStream
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージの本文で情報を設定します。"
  remarks: "メッセージの本文がどの型の情報で構成できます: 文字列、日付、通貨、数値、(バイト単位) の配列または任意のマネージ オブジェクトなどです。 この情報がシリアル化、<xref:System.IO.Stream>キューに渡される</xref:System.IO.Stream>。       いずれかを指定、<xref:System.Messaging.Message.Body%2A>プロパティまたは BodyStream プロパティを送信する前に、<xref:System.Messaging.Message>オブジェクト</xref:System.Messaging.Message></xref:System.Messaging.Message.Body%2A>。 設定した場合、<xref:System.Messaging.Message.Body%2A>プロパティ、内容が BodyStream プロパティにシリアル化します</xref:System.Messaging.Message.Body%2A>。 ただし、BodyStream プロパティを直接書き込むことができます。 これはファイルへの接続を開くし、メッセージの本文としてその内容をストリーム配信するときに便利です。       BodyStream プロパティに直接メッセージの内容を記述する場合を除き、設定、<xref:System.Messaging.Message.Formatter%2A>プロパティ、メッセージを送信する前にします</xref:System.Messaging.Message.Formatter%2A>。 ときに、<xref:System.Messaging.MessageQueue.Send%2A>メソッドが、<xref:System.Messaging.MessageQueue>に含まれているフォーマッタを使用して、インスタンス、本文がシリアル化、<xref:System.Messaging.Message.Formatter%2A>プロパティ</xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.MessageQueue></xref:System.Messaging.MessageQueue.Send%2A>。 <xref:System.Messaging.Message.Formatter%2A>フォーマッタの既定値は<xref:System.Messaging.XmlMessageFormatter>。</xref:System.Messaging.XmlMessageFormatter> 、プロパティ</xref:System.Messaging.Message.Formatter%2A>の値を指定せず、メッセージを送信する場合       設定した場合、<xref:System.Messaging.Message.UseEncryption%2A>プロパティを`true`送信されるとき、設定するときではなく、このメッセージの本文のメッセージが暗号化する、<xref:System.Messaging.Message.Body%2A>プロパティ</xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.UseEncryption%2A>。 したがって、BodyStream プロパティは暗号化されません。"
  syntax:
    content: public System.IO.Stream BodyStream { get; set; }
    return:
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>に含まれるシリアル化された情報を格納する、<xref:System.Messaging.Message.Body*>メッセージの</xref:System.Messaging.Message.Body*></xref:System.IO.Stream>。"
  overload: System.Messaging.Message.BodyStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "フィルターがメッセージ キュー、<xref:System.Messaging.Message.Body*>プロパティ</xref:System.Messaging.Message.Body*>。"
  platform:
  - net462
- uid: System.Messaging.Message.BodyType
  id: BodyType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyType
  nameWithType: Message.BodyType
  fullName: System.Messaging.Message.BodyType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージ本文に含まれるデータの種類を設定します。"
  remarks: "メッセージ キューはオブジェクトまたはシリアル化されたストリームとして、本文の内容を認識します。 BodyType プロパティ内のオブジェクトの種類を示します、 <xref:System.Messaging.Message.Body%2A>、メッセージのプロパティ</xref:System.Messaging.Message.Body%2A>。       <xref:System.Messaging.XmlMessageFormatter>メッセージ本文内でネイティブ型とオブジェクトの間のバインドを実行します</xref:System.Messaging.XmlMessageFormatter>。 使用する場合、 <xref:System.Messaging.XmlMessageFormatter>、フォーマッタでは、BodyType プロパティを設定する</xref:System.Messaging.XmlMessageFormatter>。       その他のフォーマッタは、バインディング機能をさらに、次の c# コードに示すように提供できます。      ```   message.Formatter = new ActiveXMessageFormatter();   object myObject message.Body;   if (myObject is string) {   }   if (myObject is int) {   }   if (myObject is float) {   }   ```"
  example:
  - "The following code example displays the value of a message's BodyType property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public int BodyType { get; set; }
    return:
      type: System.Int32
      description: "メッセージ本文の実際の型、文字列、日付、通貨、数値などです。"
  overload: System.Messaging.Message.BodyType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "フィルターがメッセージ キュー、<xref:System.Messaging.Message.Body*>プロパティ</xref:System.Messaging.Message.Body*>。"
  platform:
  - net462
- uid: System.Messaging.Message.ConnectorType
  id: ConnectorType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: System.Messaging.Message.ConnectorType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または送信元アプリケーションによって通常メッセージ キューによって設定されるメッセージ プロパティが設定されたことを示す値を設定します。"
  remarks: "メッセージ キューでは、アプリケーションは通常、メッセージ キューによって設定されるメッセージ プロパティに設定されるたびに ConnectorType プロパティを設定する必要があります。 アプリケーションは通常、次の&2; つの場合、ConnectorType を使用します。 - コネクタ アプリケーションはメッセージを渡すときにします。 ConnectorType は、送信側と受信側アプリケーションにメッセージのセキュリティおよび受信確認プロパティを解釈する方法を説明します。      -されるたびに、送信元アプリケーションではなく、メッセージ キューがメッセージを暗号化します。 メッセージ キューを使用して、ConnectorType に指示、<xref:System.Messaging.Message.DestinationSymmetricKey%2A>プロパティの値をメッセージの暗号化を解除します</xref:System.Messaging.Message.DestinationSymmetricKey%2A>。       次のプロパティのいずれかに設定した場合は、ConnectorType プロパティを設定する必要があります (それ以外の場合、キューを無視するこれらのプロパティ、メッセージの送信時):- <xref:System.Messaging.Message.AuthenticationProviderName%2A>- <xref:System.Messaging.Message.AuthenticationProviderType%2A>- <xref:System.Messaging.Message.DestinationSymmetricKey%2A>- <xref:System.Messaging.Message.DigitalSignature%2A>- <xref:System.Messaging.Message.MessageType%2A>- <xref:System.Messaging.Message.SenderId%2A></xref:System.Messaging.Message.SenderId%2A> </xref:System.Messaging.Message.MessageType%2A> </xref:System.Messaging.Message.DigitalSignature%2A> </xref:System.Messaging.Message.DestinationSymmetricKey%2A> </xref:System.Messaging.Message.AuthenticationProviderType%2A> </xref:System.Messaging.Message.AuthenticationProviderName%2A>"
  syntax:
    content: public Guid ConnectorType { get; set; }
    return:
      type: System.Guid
      description: "A<xref:System.Guid>アプリケーションによって定義され、コネクタ アプリケーションまたはメッセージの暗号化と組み合わせて使用します</xref:System.Guid>。 これは、<xref:System.Guid>により、送信元アプリケーションによって設定されたことが、メッセージ キューによって設定される通常のメッセージ プロパティを解釈する受信側アプリケーションです</xref:System.Guid>。"
  overload: System.Messaging.Message.ConnectorType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ConnectorType プロパティを無視するフィルターがメッセージ キューです。"
  platform:
  - net462
- uid: System.Messaging.Message.CorrelationId
  id: CorrelationId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: System.Messaging.Message.CorrelationId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または元のメッセージを参照する受信確認、レポート、および応答メッセージで使用されるメッセージの識別子を設定します。"
  remarks: "メッセージ キュー、受信確認メッセージまたはレポート メッセージを生成するときの相関関係の識別子プロパティを使用して、元のメッセージのメッセージ識別子を指定します。 この方法では、相関 id は、元のメッセージにレポートや受信確認メッセージを関連付けます。       送信元アプリケーションと照合受信確認メッセージまたは元のメッセージを含むレポートを特定の元のメッセージの CorrelationId プロパティを使用して、<xref:System.Messaging.Message.Id%2A>プロパティ</xref:System.Messaging.Message.Id%2A>。       またコネクタ アプリケーションは、元のメッセージのメッセージ id を受信確認メッセージやレポート メッセージの CorrelationId プロパティを設定する必要があります。       アプリケーションは、送信元アプリケーションに応答メッセージを送信する場合は、元のメッセージのメッセージ id を応答メッセージの CorrelationId プロパティを設定できます。 送信元アプリケーションは、送信されたメッセージに応答メッセージを適合できます。"
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_95_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_95_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_95_1.vb)]"
  syntax:
    content: public string CorrelationId { get; set; }
    return:
      type: System.String
      description: "指定されたメッセージ識別子、<xref:System.Messaging.Message.Id*>元のメッセージのプロパティ</xref:System.Messaging.Message.Id*>。 応答メッセージの生成時にそのアプリケーション メッセージ キュー、受信確認メッセージまたはレポート メッセージを生成するときで相関 id が使用されます。"
  overload: System.Messaging.Message.CorrelationId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "CorrelationId プロパティを無視するフィルターがメッセージ キューです。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "CorrelationId は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Messaging.Message.DestinationQueue
  id: DestinationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: System.Messaging.Message.DestinationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージの送信先キューを取得します。"
  remarks: "DestinationQueue プロパティは、ジャーナルや配信不能キューに到達したメッセージの元の送信先を判断する最もよく使用します。 通常、する必要はありません、このプロパティを確認するメッセージが送信先キューから取得するため。"
  example:
  - "The following code example displays the value of a message's DestinationQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue DestinationQueue { get; }
    return:
      type: System.Messaging.MessageQueue
      description: "A <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref>メッセージの目的の送信先キューを指定します。"
  overload: System.Messaging.Message.DestinationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、DestinationQueue プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.DestinationSymmetricKey
  id: DestinationSymmetricKey
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: System.Messaging.Message.DestinationSymmetricKey
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはアプリケーションで暗号化されたメッセージの暗号化に使用する対称キーまたは外部のキューに送信されたメッセージを設定します。"
  remarks: "2 つのシナリオでは、DestinationSymmetricKey プロパティを使用する必要があります。 最初は、アプリケーションではなく、メッセージ キュー、メッセージを暗号化するときです。 2 つ目は、メッセージ キュー以外のキュー システムに暗号化されたメッセージを送信する場合です。       このプロパティを設定する前に、受信側キュー マネージャーの公開キーで対称キーを暗号化する必要があります。 アプリケーションで暗号化されたメッセージを送信するときに、受信側キュー マネージャーは、送信先キューに送信する前に、メッセージの暗号化を解除するのに対称キーを使用します。       外部のキューにメッセージを送信する場合、メッセージはまず、受信側アプリケーションに接続されている対称キーで暗号化されたメッセージを転送する適切なコネクタ アプリケーションによって受信されます。 対称キーを使用して、メッセージの暗号化を解除する受信側のアプリケーションの役割です。       設定する必要がある DestinationSymmetricKey プロパティを設定すると、<xref:System.Messaging.Message.ConnectorType%2A>プロパティ</xref:System.Messaging.Message.ConnectorType%2A>。 メッセージが送信されると、メッセージ キュー プロパティを無視 DestinationSymmetricKey 場合、<xref:System.Messaging.Message.ConnectorType%2A>プロパティも設定されていない</xref:System.Messaging.Message.ConnectorType%2A>。       DestinationSymmetricKey プロパティには、256 の配列の最大サイズがあります。"
  syntax:
    content: public byte[] DestinationSymmetricKey { get; set; }
    return:
      type: System.Byte[]
      description: "メッセージを暗号化するために使用する送信先の対称キーを指定するバイト値の配列。 既定では長さ&0; の配列です。"
  overload: System.Messaging.Message.DestinationSymmetricKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューは DestinationSymmetricKey プロパティを無視するフィルター処理されます。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "DestinationSymmetricKey は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Messaging.Message.DigitalSignature
  id: DigitalSignature
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: System.Messaging.Message.DigitalSignature
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージ キューがメッセージの認証に使用されるデジタル署名を設定します。"
  remarks: "メッセージ キューは、メッセージは、バージョン 1.0 をキューから送信されたメッセージを認証するときにデジタル署名を使用します。 ほとんどの場合はメッセージ キューを生成し、送信元アプリケーションは認証を要求したときに、DigitalSignature プロパティを設定します。 受信側のアプリケーションでは、このプロパティを使用して、メッセージに添付したデジタル署名を取得します。       Digitalsignature ビット プロパティを使用できるは、メッセージ キュー 2.0 を実行している場合のみです。 送信アプリケーションは、認証を要求するときに、バージョン 1.0 の署名をメッセージ キューを指定する必要があります。 送信側のアプリケーションでは、メッセージ キュー 2.0 署名を送信する場合、このプロパティは、次の 4 つ (バイト単位) を含む各 0 のバッファーを表します。       Digitalsignature ビット プロパティと連携して、<xref:System.Messaging.Message.SenderCertificate%2A>プロパティは、メッセージが送信されるときもコネクタ アプリケーションによって使用されます</xref:System.Messaging.Message.SenderCertificate%2A>。 このシナリオでは、コネクタ アプリケーションで、メッセージ キューではなく — に基づいてメッセージを送信したユーザーの証明書をデジタル署名を生成します。       Digitalsignature ビット プロパティには、256 の配列の最大サイズがあります。       Digitalsignature ビット プロパティを設定するときに設定する必要ありますも、<xref:System.Messaging.Message.ConnectorType%2A>プロパティ</xref:System.Messaging.Message.ConnectorType%2A>。 メッセージが送信されると、メッセージ キュー プロパティを無視 DigitalSignature 場合、<xref:System.Messaging.Message.ConnectorType%2A>プロパティも設定されていない</xref:System.Messaging.Message.ConnectorType%2A>。"
  syntax:
    content: public byte[] DigitalSignature { get; set; }
    return:
      type: System.Byte[]
      description: "メッセージの認証に使用するメッセージ キュー 1.0 のデジタル署名を指定するバイト値の配列。 既定では長さ&0; の配列です。"
  overload: System.Messaging.Message.DigitalSignature*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Digitalsignature ビット プロパティを無視するフィルターがメッセージ キューです。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Digitalsignature ビット プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Messaging.Message.EncryptionAlgorithm
  id: EncryptionAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: System.Messaging.Message.EncryptionAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはプライベート メッセージの本文を暗号化するために使用する暗号化アルゴリズムを設定します。"
  remarks: "プライベートの場合、メッセージ (暗号化)、送信および受信時に暗号化を解除する前に暗号化されます。 EncryptionAlgorithm プロパティでは、プライベート メッセージのメッセージ本文を暗号化するためのアルゴリズムを指定します。       キューは、その受信を要求できますメッセージを暗号化します。 アプリケーションでは、プライベート メッセージだけを受け取るキューに暗号化されていない (非プライベート) メッセージを送信、または非プライベート メッセージのみを受け入れるキューにプライベート メッセージを送信する場合、キューはメッセージを拒否します。 送信元アプリケーションは、否定受信確認メッセージがこのようなケースで返されることを要求できます。"
  syntax:
    content: public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }
    return:
      type: System.Messaging.EncryptionAlgorithm
      description: "1 つ、 <xref href=&quot;System.Messaging.EncryptionAlgorithm&quot;> </xref>列挙値。 既定値は<xref uid=&quot;langword_csharp_RC2&quot; name=&quot;RC2&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.EncryptionAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EncryptionAlgorithm プロパティを無視するフィルターがメッセージ キューです。"
  platform:
  - net462
- uid: System.Messaging.Message.Extension
  id: Extension
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Extension
  nameWithType: Message.Extension
  fullName: System.Messaging.Message.Extension
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージに関連付けられているアプリケーション定義の追加情報を設定します。"
  remarks: "拡張機能プロパティは、メッセージに関連付けられているラージ バイナリ オブジェクトと同様に、アプリケーション定義の情報を提供します。 拡張機能プロパティの内容を解釈する受信側アプリケーションの役割です。       内のメッセージ データを含める必要があります、可能な限り、<xref:System.Messaging.Message.Body%2A>拡張機能プロパティではなく、メッセージのプロパティ</xref:System.Messaging.Message.Body%2A>。       外部キューを使用する場合は、拡張機能プロパティを使用して、メッセージ キュー内に存在しないメッセージのプロパティを指定します。       外部のキューは、Microsoft メッセージ キュー以外のキュー システムに存在します。 メッセージ キューは、コネクタ アプリケーションを使用してこのようなキューと通信します。"
  syntax:
    content: public byte[] Extension { get; set; }
    return:
      type: System.Byte[]
      description: "メッセージに関連付けられているアプリケーション定義の情報を提供するバイト値の配列。 既定では長さ&0; の配列です。"
  overload: System.Messaging.Message.Extension*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューは、拡張プロパティを無視するフィルター処理されます。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "拡張機能プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Messaging.Message.Formatter
  id: Formatter
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Formatter
  nameWithType: Message.Formatter
  fullName: System.Messaging.Message.Formatter
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または設定にオブジェクトをシリアル化またはメッセージ本文からオブジェクトを逆シリアル化するために使用するフォーマッタ。"
  remarks: "メッセージを読み書きするときに、フォーマッタ プロパティを使用します。 メッセージがキューに送信されると、フォーマッタがシリアル化、<xref:System.Messaging.Message.Body%2A>プロパティにメッセージ キューに送信可能なストリーム</xref:System.Messaging.Message.Body%2A>。 キューから読み取る場合、フォーマッタのメッセージ データを<xref:System.Messaging.Message.Body%2A>プロパティ</xref:System.Messaging.Message.Body%2A>。       直接メッセージの内容を記述しない限り、<xref:System.Messaging.Message.BodyStream%2A>プロパティがメッセージを送信する前に、フォーマッタ プロパティを設定します</xref:System.Messaging.Message.BodyStream%2A>。 ときに、<xref:System.Messaging.MessageQueue.Send%2A>メソッドが、<xref:System.Messaging.MessageQueue>フォーマッタ プロパティに含まれるフォーマッタを使用して、インスタンス、本文がシリアル化します</xref:System.Messaging.MessageQueue></xref:System.Messaging.MessageQueue.Send%2A>。 <xref:System.Messaging.XmlMessageFormatter>。</xref:System.Messaging.XmlMessageFormatter>フォーマッタ プロパティの値を指定せず、メッセージを送信する場合、フォーマッタの既定値します。       <xref:System.Messaging.XmlMessageFormatter>、疎結合できるので、同じオブジェクトをこの形式を使用する場合、送信者と受信者を入力する必要はありません</xref:System.Messaging.XmlMessageFormatter>。 <xref:System.Messaging.ActiveXMessageFormatter>と<xref:System.Messaging.BinaryMessageFormatter>のバイナリ表現にデータをシリアル化します</xref:System.Messaging.BinaryMessageFormatter></xref:System.Messaging.ActiveXMessageFormatter>。 <xref:System.Messaging.ActiveXMessageFormatter>COM コンポーネントを送受信する際に使用します</xref:System.Messaging.ActiveXMessageFormatter>。"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_2.vb)]"
  syntax:
    content: public System.Messaging.IMessageFormatter Formatter { get; set; }
    return:
      type: System.Messaging.IMessageFormatter
      description: "<xref href=&quot;System.Messaging.IMessageFormatter&quot;> </xref>に書き込まれるやメッセージ本文から読み取り、ストリームを生成します。 既定値は<xref href=&quot;System.Messaging.XmlMessageFormatter&quot;></xref>です。"
  overload: System.Messaging.Message.Formatter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "フォーマッタ プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Messaging.Message.HashAlgorithm
  id: HashAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: System.Messaging.Message.HashAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージ キューがメッセージを認証するときに使用されるアルゴリズムをハッシュまたはメッセージのデジタル署名の作成を設定します。"
  remarks: "メッセージのデジタル署名を作成するときに、ソース コンピューターでは、ハッシュ アルゴリズムを使用メッセージ キューします。 ターゲット キュー マネージャーは、同じハッシュ アルゴリズムを使用して、受信されるときにメッセージを認証します。"
  syntax:
    content: public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Messaging.HashAlgorithm
      description: "1 つ、 <xref href=&quot;System.Messaging.HashAlgorithm&quot;> </xref>列挙値。 Windows XP、既定値は<xref uid=&quot;langword_csharp_SHA&quot; name=&quot;SHA&quot; href=&quot;&quot;></xref>です。 それ以外の場合、既定値は<xref uid=&quot;langword_csharp_MD5&quot; name=&quot;MD5&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.HashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューは、ハッシュ アルゴリズム プロパティを無視するフィルター処理されます。"
  platform:
  - net462
- uid: System.Messaging.Message.Id
  id: Id
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Id
  nameWithType: Message.Id
  fullName: System.Messaging.Message.Id
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージの id を取得します。"
  remarks: "メッセージ キューは、メッセージが送信されるときに、メッセージ id を生成します。 識別子は 20 バイトで構成され、2 つの項目が含まれています: マシン<xref:System.Guid>、送信元コンピューターと、コンピューター上のメッセージの一意の識別子</xref:System.Guid>。 2 つのアイテムの組み合わせでは、ネットワーク上で一意であるメッセージ識別子を生成します。       メッセージ キューはすべてのメッセージについてメッセージ id を生成-メッセージ受信確認やレポート メッセージなどです。 受信確認メッセージは通常、メッセージ キューが到着時または失敗したか、送信元のメッセージに反応に送信しました。 元のメッセージの Id プロパティの値を見つけることができます、<xref:System.Messaging.Message.CorrelationId%2A>受信確認メッセージのプロパティ</xref:System.Messaging.Message.CorrelationId%2A>。       応答キューを応答メッセージを送信するときは、Id プロパティを使用することもできます。 応答メッセージに、元のメッセージの識別子を含める、設定、 <xref:System.Messaging.Message.CorrelationId%2A>、元のメッセージの Id プロパティへの応答メッセージのプロパティ</xref:System.Messaging.Message.CorrelationId%2A>。 応答メッセージを読み取って、アプリケーションは、元のメッセージを識別するのに応答メッセージの相関 id を使用できます。"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_19_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_19_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_19_1.vb)]"
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "メッセージの一意の識別子、メッセージ キューによって生成されます。"
  overload: System.Messaging.Message.Id*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、メッセージ キューは、Id プロパティを無視するフィルター選択します。"
  platform:
  - net462
- uid: System.Messaging.Message.InfiniteTimeout
  id: InfiniteTimeout
  parent: System.Messaging.Message
  langs:
  - csharp
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: System.Messaging.Message.InfiniteTimeout
  type: Field
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "タイムアウトが存在しないことを指定します。"
  remarks: "<xref:System.Messaging.Message.TimeToBeReceived%2A>および<xref:System.Messaging.Message.TimeToReachQueue%2A>タイムアウトを指定する値を必要とします</xref:System.Messaging.Message.TimeToReachQueue%2A>。</xref:System.Messaging.Message.TimeToBeReceived%2A> 以前のタイムアウトは、キューから受信するメッセージの許容最大時間。 後者のタイムアウトは、キューに到達するメッセージの許容時間です。 どちらの場合、タイムアウトを秒数として指定するか、タイムアウトが存在しないことを示すために InfiniteTimeout を使用することができます。"
  example:
  - "The following code example demonstrates the use of the InfiniteTimeout field.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static readonly TimeSpan InfiniteTimeout;
    return:
      type: System.TimeSpan
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.IsFirstInTransaction
  id: IsFirstInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: System.Messaging.Message.IsFirstInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージがトランザクションで送信される最初のメッセージであるかどうかを示す値を取得します。"
  remarks: "受信側アプリケーションでは、IsFirstInTransaction プロパティを使用して、メッセージが&1; つのキューに&1; つのトランザクションで送信される最初のメッセージをしたことを確認します。       このプロパティは、メッセージ キューのバージョン 2.0 でのみ使用可能およびそれ以降です。       トランザクションの境界を確認するには、他の&2; つのプロパティと共に IsFirstInTransaction プロパティを使用することができます: <xref:System.Messaging.Message.IsLastInTransaction%2A> <xref:System.Messaging.Message.TransactionId%2A></xref:System.Messaging.Message.TransactionId%2A> </xref:System.Messaging.Message.IsLastInTransaction%2A> 。 前者は、メッセージがトランザクション内で送信された最後のメッセージかどうかを確認し、後者を使用して、トランザクションの識別子を取得する場合に使用します。       トランザクション、IsFirstInTransaction で&1; つのメッセージが送信されるだけの場合と<xref:System.Messaging.Message.IsLastInTransaction%2A>プロパティに設定されて`true`</xref:System.Messaging.Message.IsLastInTransaction%2A>。"
  example:
  - "The following code example displays the value of a message's IsFirstInTransaction property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool IsFirstInTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>メッセージが最初のトランザクションで送信されるメッセージであった場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.IsFirstInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、IsFirstInTransaction プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.IsLastInTransaction
  id: IsLastInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: System.Messaging.Message.IsLastInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージが、トランザクションで送信された最後のメッセージであるかどうかを示す値を取得します。"
  remarks: "受信側アプリケーションでは、IsLastInTransaction プロパティを使用して、メッセージが&1; つのキューに&1; つのトランザクションで送信された最後のメッセージをしたことを確認します。       このプロパティは、メッセージ キューのバージョン 2.0 でのみ使用可能およびそれ以降です。       トランザクションの境界を確認するには、他の&2; つのプロパティと共に IsLastInTransaction プロパティを使用することができます: <xref:System.Messaging.Message.IsFirstInTransaction%2A> <xref:System.Messaging.Message.TransactionId%2A></xref:System.Messaging.Message.TransactionId%2A> </xref:System.Messaging.Message.IsFirstInTransaction%2A> 。 前者は、メッセージがトランザクション内で送信された最初のメッセージかどうかを確認し、後者を使用して、トランザクションの識別子を取得する場合に使用します。       トランザクションでは、1 つのメッセージが送信されるだけの場合、 <xref:System.Messaging.Message.IsFirstInTransaction%2A>IsLastInTransaction プロパティに設定されてと`true`</xref:System.Messaging.Message.IsFirstInTransaction%2A>。"
  example:
  - "The following code example displays the value of a message's IsLastInTransaction property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool IsLastInTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>メッセージが単一のトランザクションで送信された最後のメッセージであった場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.IsLastInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、IsLastInTransaction プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.Label
  id: Label
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Label
  nameWithType: Message.Label
  fullName: System.Messaging.Message.Label
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージを記述するアプリケーションで定義された Unicode 文字列を設定します。"
  remarks: "メッセージ ラベルは、いくつかの目的を使用できます。 たとえば、表示目的で、または選択的にラベルの値に基づいてメッセージを処理するに使用することができます。 ラベルは、メッセージで一意である必要はありません。       メッセージ キュー ラベルとラベルに役立つアプリケーション定義の値を表します。 メッセージは、人間が判読できる用語では、キューやメッセージを特定します。 メッセージ キュー アプリケーションに特別な意味がないラベルの内容を解釈するアプリケーションの役割です。"
  example:
  - "The following code example gets and sets the value of a message's Label property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string Label { get; set; }
    return:
      type: System.String
      description: "メッセージのラベルです。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Messaging.Message.Label*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューは、ラベルのプロパティを無視するフィルター処理されます。"
  platform:
  - net462
- uid: System.Messaging.Message.LookupId
  id: LookupId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: LookupId
  nameWithType: Message.LookupId
  fullName: System.Messaging.Message.LookupId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "MSMQ 3.0 で導入されました。 メッセージの参照識別子を取得します。"
  remarks: "LookupId プロパティでは、メッセージの参照識別子に読み取り専用のアクセスを提供します。 MSMQ 3.0 で導入された、参照 id は、メッセージ キューによって生成され、メッセージがキューに配置されると、各メッセージに割り当てられているされる 64 ビット識別子です。 参照識別子は、メッセージが送信されたときに生成されるメッセージ識別子と同じではありません。       メッセージ キューは、コネクタ、および発信キューは、システムによって生成されたジャーナル、配信不能に加え、移行先のアプリケーションによって生成された、管理、およびレポート キューを含む、すべてのキューに配置されているすべてのメッセージの参照 id を生成します。 つまり、メッセージ キューと送信元アプリケーションによって送信の両方のメッセージが含まれます。 参照識別子は、キューに対して一意キュー以外の意味を持ちません。       複数の送信先キューにメッセージが送信された場合、またはコンピューター ジャーナル キューのジャーナルにメッセージのコピーが格納されている場合は、メッセージの各コピーは、それぞれのキューに置かれている場合、独自の参照 id があります。       LookupId プロパティはキューから取得したメッセージでのみ読み取ることができます。       参照識別子は、キュー内の特定のメッセージの読み取りに使用します。 受信側のアプリケーションが呼び出すことができます、メッセージの参照識別子が認識されたら、<xref:System.Messaging.MessageQueue.PeekByLookupId%2A>または<xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A>そのメッセージに直接アクセスし、ピークまたはキューの先頭から開始し、キューの末尾に移動する必要がありますカーソルとは異なり、キューから取得する関数をアプリケーションの役割は、キュー内のメッセージの参照識別子を取得します</xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A></xref:System.Messaging.MessageQueue.PeekByLookupId%2A>。 参照識別子を取得する方法の&1; つでは、送信先のキューをキューに配置されるように、各メッセージの識別子をキャッシュするコンポーネントを呼び出すためのトリガーを作成します。"
  syntax:
    content: public long LookupId { get; }
    return:
      type: System.Int64
      description: "メッセージ キューによって生成されが一意では、キューにメッセージが存在するが、メッセージの参照識別子です。"
  overload: System.Messaging.Message.LookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "MSMQ 3.0 がインストールされていません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、LookupId プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.MessageType
  id: MessageType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: MessageType
  nameWithType: Message.MessageType
  fullName: System.Messaging.Message.MessageType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: 'Gets the message type: <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Acknowledgment&quot; name=&quot;Acknowledgment&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Report&quot; name=&quot;Report&quot; href=&quot;&quot;></xref>.'
  remarks: "メッセージ キューは、メッセージを送信するときに通常このプロパティを設定します。 メッセージ キューのメッセージには、次の種類のいずれかを指定できます:-`Normal`は、いずれかの一般的なメッセージの送信がアプリケーションからキューに、または送信アプリケーションに応答メッセージが返されます。      - `Acknowledgement`、送信元アプリケーションによって要求されるたびにメッセージ キューが生成します。 たとえば、メッセージ キューは、元のメッセージが到着したか、または読み取られたことを示すために、正または負のメッセージを生成できます。 メッセージ キューでは、適切な受信確認メッセージを送信元アプリケーションによって指定される管理キューを返します。      - `Report`、レポート キューは送信元キュー マネージャーで定義されるたびにメッセージ キューが生成します。 トレースを有効にすると、メッセージ キュー送信レポート メッセージ、メッセージ キュー レポート キューにたびに、元のメッセージの入力またはメッセージ キュー サーバーを出力します。"
  example:
  - "The following code example displays the value of a message's MessageType property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageType MessageType { get; }
    return:
      type: System.Messaging.MessageType
      description: "MessageType の値のいずれか。"
  overload: System.Messaging.Message.MessageType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、MessageType プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.Priority
  id: Priority
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Priority
  nameWithType: Message.Priority
  fullName: System.Messaging.Message.Priority
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または配置場所を指定、キューにメッセージがメッセージの優先度を設定します。"
  remarks: "優先度プロパティは、メッセージ キュー メッセージの処理方法途中になっていると、送信先に到達した後の両方に影響します。 優先順位の高いメッセージは優先的にルーティングし、送信先キューの先頭近くに挿入します。 同じ優先度のメッセージは、到達時刻に応じてキューに配置されます。       非トランザクション メッセージに対してのみ意味のある優先順位を設定することができます。 メッセージ キューへトランザクション メッセージの優先度を自動的に設定する`Lowest`、それが原因でトランザクション メッセージの優先度が無視されます。"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_87_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_87_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_87_1.cs)]"
  syntax:
    content: public System.Messaging.MessagePriority Priority { get; set; }
    return:
      type: System.Messaging.MessagePriority
      description: "1 つ、 <xref href=&quot;System.Messaging.MessagePriority&quot;> </xref> 、非トランザクション メッセージの優先度レベルを表す値です。 既定値は<xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.Priority*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューは、優先度のプロパティを無視するフィルター処理されます。"
  platform:
  - net462
- uid: System.Messaging.Message.Recoverable
  id: Recoverable
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: System.Messaging.Message.Recoverable
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはコンピューターの障害やネットワークの問題が発生した場合に配信されるメッセージが保証されるかどうかを示す値を設定します。"
  remarks: "回復可能なプロパティは、メッセージの配信が保証されるかどうかを示します: メッセージが送信先キューに向かって中に、コンピューターがクラッシュした場合でもです。       メッセージの配信が保証される場合メッセージは格納ローカル ルート、上のすべてのステップで、メッセージは次のコンピューターに正常に転送されるまでです。 回復可能なプロパティを設定`true`スループットに影響を与える可能性があります。       メッセージがトランザクションの場合は、メッセージ キューとして自動的に処理メッセージ回復可能なプロパティの値に関係なく、回復可能です。"
  example:
  - "The following code example gets and sets the value of a message's Recoverable property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool Recoverable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>保存することによって、メッセージ ルーティング中にディスクに) メッセージの配信が保証される; 場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>配信が保証されていない場合。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.Recoverable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューは、回復可能なプロパティを無視するフィルター処理されます。"
  platform:
  - net462
- uid: System.Messaging.Message.ResponseQueue
  id: ResponseQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: System.Messaging.Message.ResponseQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはアプリケーションによって生成される応答メッセージを受信するキューを設定します。"
  remarks: "ResponseQueue プロパティは、受信側アプリケーションが、送信元アプリケーションに戻るアプリケーションによって生成される応答メッセージを受信するキューを識別します。 送信元アプリケーションは、アプリケーションがそのメッセージを送信するときに応答キューを指定します。 利用可能なキューを応答キューとして指定できます。       応答キューに対して返されるメッセージは、アプリケーション固有です。 アプリケーションにメッセージの受信時に行うアクションだけでなく、メッセージの内容を定義する必要があります。"
  example:
  - "The following code example gets and sets the value of a message's ResponseQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue ResponseQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "<xref href=&quot;System.Messaging.MessageQueue&quot;> </xref>するアプリケーションによって生成される応答メッセージが返されます。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.ResponseQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ResponseQueue プロパティを無視するフィルターがメッセージ キューです。"
  platform:
  - net462
- uid: System.Messaging.Message.SecurityContext
  id: SecurityContext
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: System.Messaging.Message.SecurityContext
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージのセキュリティ コンテキストを設定します。"
  syntax:
    content: public System.Messaging.SecurityContext SecurityContext { get; set; }
    return:
      type: System.Messaging.SecurityContext
      description: "A <xref href=&quot;System.Messaging.SecurityContext&quot;> </xref>プロパティが設定されていた場合、メッセージのセキュリティ コンテキストを格納するオブジェクト。 それ以外の場合 NULL です。"
  overload: System.Messaging.Message.SecurityContext*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.SenderCertificate
  id: SenderCertificate
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: System.Messaging.Message.SenderCertificate
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージの認証に使用するセキュリティ証明書を設定します。"
  remarks: "受信側のアプリケーションは、メッセージに、外部のセキュリティ証明書が含まれている場合に、SenderCertificate プロパティを使用します。       メッセージ キューは、いずれかを使用してメッセージを内部または外部のセキュリティ証明書を認証できます。 メッセージ キューは、メッセージの整合性の確認に使用される内部の証明書を提供します。 証明機関では、メッセージの SenderCertificate プロパティを介してアクセスできる外部の証明を提供します。 メッセージ キュー メッセージの認証を許可すると、に加えては、外部の証明書は、さらに、送信者を検証する受信側のアプリケーションをできます。 内部の証明書には、受信アプリケーションに使用可能な値がありません。       外部の証明書は、メッセージ キュー システムのディレクトリ サービスに登録する必要があります。 外部の証明書には、証明機関、証明書ユーザー、証明書の有効期間が、証明書ユーザー、および証明機関の署名の公開キーに関する情報が含まれています。"
  syntax:
    content: public byte[] SenderCertificate { get; set; }
    return:
      type: System.Byte[]
      description: "セキュリティ証明書は、メッセージ キューでは、メッセージの送信者の確認を表すバイト値の配列。 既定では長さ&0; の配列です。"
  overload: System.Messaging.Message.SenderCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューは SenderCertificate プロパティを無視するフィルター処理されます。"
  platform:
  - net462
- uid: System.Messaging.Message.SenderId
  id: SenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderId
  nameWithType: Message.SenderId
  fullName: System.Messaging.Message.SenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "送信元ユーザーの識別子を取得します。"
  remarks: "場合、<xref:System.Messaging.Message.AttachSenderId%2A>プロパティは`false`、SenderId プロパティで指定した送信者の id にアタッチされていないメッセージが送信されるとします</xref:System.Messaging.Message.AttachSenderId%2A>。 これを示しますにキューにメッセージが送信先キューにメッセージを送信するときは、送信者を検証できません必要があります。 場合、<xref:System.Messaging.Message.AttachSenderId%2A>プロパティは`true`、SenderId プロパティの値が信頼できるは、メッセージが認証された場合にのみです</xref:System.Messaging.Message.AttachSenderId%2A>。 使用して、<xref:System.Messaging.Message.Authenticated%2A>組み合わせてプロパティと、送信者のアクセス権限を確認する SenderId プロパティ</xref:System.Messaging.Message.Authenticated%2A>。       コネクタ アプリケーションは、コネクタ サーバーを使用して、メッセージ キューとその他のキュー システム間の通信を提供するアプリケーションです。 メッセージ キューでは、コネクタ アプリケーション送信者 id を提供する必要があります。 設定する必要があります、<xref:System.Messaging.Message.ConnectorType%2A>コネクタ アプリケーションを介してメッセージを送信するときにプロパティ</xref:System.Messaging.Message.ConnectorType%2A>。"
  syntax:
    content: public byte[] SenderId { get; }
    return:
      type: System.Byte[]
      description: "送信者を識別するバイト値の配列。 受信側キュー マネージャーは、メッセージとキューに送信側のアクセス権の送信者を確認するメッセージを認証するときに、識別子を使用します。"
  overload: System.Messaging.Message.SenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、SenderId プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.SenderVersion
  id: SenderVersion
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: System.Messaging.Message.SenderVersion
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージ キュー メッセージを送信するために使用のバージョンを取得します。"
  remarks: "SenderVersion プロパティは、特定の機能にとって重要です。 たとえば、のみがメッセージ キュー 2.0 以降では、トランザクション処理がサポートされてし、デジタル署名が MSMQ 1.0 によって送信されるメッセージの認証に使用されます。       送信側キュー マネージャーは、メッセージが送信されるときに、SenderVersion プロパティを設定します。"
  example:
  - "The following code example displays the value of a message's SenderVersion property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public long SenderVersion { get; }
    return:
      type: System.Int64
      description: "メッセージ キューのバージョンは、メッセージの送信に使用されます。"
  overload: System.Messaging.Message.SenderVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、SenderVersion プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.SentTime
  id: SentTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SentTime
  nameWithType: Message.SentTime
  fullName: System.Messaging.Message.SentTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージが送信元キュー マネージャーによって送信された送信元のコンピューターの日付と時刻を取得します。"
  remarks: "SentTime プロパティはこのコンピューターのローカル時刻に調整のインスタンス、<xref:System.Messaging.Message>クラスが作成されました</xref:System.Messaging.Message>。 このタイム ゾーンは、送信元と送信先のキューのものと異なる可能性があります。"
  example:
  - "The following code example displays the value of a message's SentTime property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public DateTime SentTime { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>メッセージが送信された時刻を表す</xref:System.DateTime>。"
  overload: System.Messaging.Message.SentTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、SentTime プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.SourceMachine
  id: SourceMachine
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: System.Messaging.Message.SourceMachine
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージの送信元コンピューターを取得します。"
  remarks: "SourceMachine プロパティの形式では、2 つのスラッシュの前は含まれません (\\\\\\\\)。 たとえば、`myServer`は有効な SourceMachine です。"
  example:
  - "The following code example displays the value of a message's SourceMachine property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string SourceMachine { get; }
    return:
      type: System.String
      description: "メッセージの送信元となるコンピューターの名前。"
  overload: System.Messaging.Message.SourceMachine*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、SourceMachine プロパティを無視する、メッセージ キューはフィルター処理します。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "コンピューター情報またはディレクトリ サービスにアクセスできませんでした。"
  platform:
  - net462
- uid: System.Messaging.Message.TimeToBeReceived
  id: TimeToBeReceived
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: System.Messaging.Message.TimeToBeReceived
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージが送信先キューから受信するまでの時間の最大量を設定します。"
  remarks: "TimeToBeReceived プロパティでは、送信されたメッセージが送信先キューから受信されるまでの時間の合計を指定します。 制限時間には、送信先キューおよびメッセージを受信する前に、キューで待機する時間に費やされた時間が含まれています。      > [!CAUTION] > 依存型クライアント コンピューターを使用する場合は、クライアント コンピューターのクロックがメッセージ キューを実行しているサーバー上のクロックと同期されていることを確認します。 それ以外の場合、予期しない動作がありますが TimeToBeReceived プロパティを持つメッセージを送信する場合に<xref:System.Messaging.Message.InfiniteTimeout>.</xref:System.Messaging.Message.InfiniteTimeout>       TimeToBeReceived プロパティで指定された間隔では、キューからメッセージを削除する前に期限が切れると、メッセージ キューは&2; つの方法のいずれかでメッセージを破棄します。 場合、メッセージの<xref:System.Messaging.Message.UseDeadLetterQueue%2A>プロパティは`true`、配信不能キューにメッセージを送信します</xref:System.Messaging.Message.UseDeadLetterQueue%2A>。 場合<xref:System.Messaging.Message.UseDeadLetterQueue%2A>は`false`メッセージは無視されます</xref:System.Messaging.Message.UseDeadLetterQueue%2A>。       メッセージを設定することができます<xref:System.Messaging.Message.AcknowledgeType%2A>タイマーの有効期限が切れる前に、メッセージが取得されない場合に、メッセージ キュー、否定受信確認メッセージを送信を要求するプロパティが送信アプリケーションにバックアップします</xref:System.Messaging.Message.AcknowledgeType%2A>。       TimeToBeReceived プロパティで指定された値で指定された値よりも小さい場合、<xref:System.Messaging.Message.TimeToReachQueue%2A>プロパティ、TimeToBeReceived が優先されます</xref:System.Messaging.Message.TimeToReachQueue%2A>。       単一のトランザクションで複数のメッセージが送信されるは、最初のメッセージ TimeToBeReceived プロパティを使用してメッセージ キューです。"
  example:
  - "The following code example gets and sets the value of a message's TimeToBeReceived property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public TimeSpan TimeToBeReceived { get; set; }
    return:
      type: System.TimeSpan
      description: "送信されたメッセージが送信先キューから受信されるまでの時間の合計。 既定値は<xref href=&quot;System.Messaging.Message.InfiniteTimeout&quot;></xref>です。"
  overload: System.Messaging.Message.TimeToBeReceived*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューは TimeToBeReceived プロパティを無視するフィルター処理されます。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "TimeToBeReceived の指定された値が正しくありません。"
  platform:
  - net462
- uid: System.Messaging.Message.TimeToReachQueue
  id: TimeToReachQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: System.Messaging.Message.TimeToReachQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージ キューに到達するまでの時間の最大量を設定します。"
  remarks: "TimeToReachQueue プロパティで指定された間隔では、メッセージが宛先に到達する前に期限が切れると、メッセージ キューは&2; つの方法のいずれかでメッセージを破棄します。 場合、メッセージの<xref:System.Messaging.Message.UseDeadLetterQueue%2A>プロパティは`true`、配信不能キューにメッセージを送信します</xref:System.Messaging.Message.UseDeadLetterQueue%2A>。 場合<xref:System.Messaging.Message.UseDeadLetterQueue%2A>は`false`、メッセージは無視されます彼はメッセージを設定することができます<xref:System.Messaging.Message.AcknowledgeType%2A>タイマーの有効期限が切れる前に、メッセージが到着しない場合、送信元アプリケーションにメッセージ キュー、否定受信確認メッセージを送信を要求するプロパティがバックアップされます</xref:System.Messaging.Message.AcknowledgeType%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A>。       TimeToReachQueue プロパティが 0 秒に設定されている場合メッセージ キューは 1 回、送信先にメッセージを送信、キューがメッセージを待機している場合。 キューがローカルの場合は、メッセージ常に到達します。       TimeToReachQueue プロパティで指定された値で指定された値よりも大きい場合、<xref:System.Messaging.Message.TimeToBeReceived%2A>プロパティ、<xref:System.Messaging.Message.TimeToBeReceived%2A>が優先されます</xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.TimeToBeReceived%2A>。       単一のトランザクションで複数のメッセージが送信されるは、最初のメッセージ TimeToReachQueue プロパティを使用してメッセージ キューです。"
  example:
  - "The following code example gets and sets the value of a message's TimeToReachQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public TimeSpan TimeToReachQueue { get; set; }
    return:
      type: System.TimeSpan
      description: "メッセージが送信先キューに到達する時間の制限、開始されてから、メッセージが送信されます。 既定値は<xref href=&quot;System.Messaging.Message.InfiniteTimeout&quot;></xref>です。"
  overload: System.Messaging.Message.TimeToReachQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "TimeToReachQueue プロパティを無視するフィルターがメッセージ キューです。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "TimeToReachQueue に指定された値が正しくありません。 負の数を表すことができます。"
  platform:
  - net462
- uid: System.Messaging.Message.TransactionId
  id: TransactionId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: System.Messaging.Message.TransactionId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージが、一部であったトランザクションの識別子を取得します。"
  remarks: "受信側アプリケーションでは、TransactionId プロパティを使用して、特定のトランザクションの一部としてメッセージが送信されたことを確認してください。 トランザクションの識別子には、4 バイトのトランザクション シーケンス番号の後に、送信元コンピューター (最初の 16 ビット) の識別子が含まれています。       このプロパティは以降のバージョンのメッセージ キュー 2.0 にのみ利用可能です。       トランザクション id がトランザクション シーケンス番号は、永続的なと再び経由で 2 ために、一意である保証はありません<sup>20</sup>です。 メッセージ キューは、後続のトランザクションが別のトランザクション シーケンス番号を持つのみ保証されます。       と共に TransactionId プロパティを使用することができます、<xref:System.Messaging.Message.IsFirstInTransaction%2A>と<xref:System.Messaging.Message.IsLastInTransaction%2A>プロパティをトランザクションの境界を確認します</xref:System.Messaging.Message.IsLastInTransaction%2A></xref:System.Messaging.Message.IsFirstInTransaction%2A>。"
  example:
  - "The following code example displays the value of a message's TransactionId property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string TransactionId { get; }
    return:
      type: System.String
      description: "メッセージに関連付けられているトランザクションの識別子。"
  overload: System.Messaging.Message.TransactionId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、TransactionId プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.TransactionStatusQueue
  id: TransactionStatusQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: System.Messaging.Message.TransactionStatusQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "移行元コンピューターには、トランザクション状態キューを取得します。"
  remarks: "TransactionStatusQueue プロパティでは、コネクタ アプリケーションから読み取り受信確認を受信する、ソース コンピュータ上のトランザクション キューを識別します。 メッセージ キューは、プロパティを設定し、外部キューに送信されるトランザクション メッセージを取得するときに、コネクタ アプリケーションはプロパティを使用します。       外部のキューは、Microsoft メッセージ キュー以外のキュー システムに存在します。 メッセージ キューは、コネクタ アプリケーションを使用してこのようなキューと通信します。       コネクタ アプリケーションは、トランザクション状態キューを使用して、受信確認メッセージを送信元アプリケーションに送信することができます。 トランザクション状態キューは、送信元アプリケーションが別の受信確認を要求していない場合でも、これらの確認を受信する必要があります。"
  example:
  - "The following code example displays the value of a message's TransactionStatusQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "トランザクション状態キュー、ソース コンピューターで、受信確認メッセージを送信元アプリケーションに送信するために使用されます。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.TransactionStatusQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージが送信されていません。 このプロパティはキューから取得したメッセージでのみ読み取ることができます。       または、TransactionStatusQueue プロパティを無視する、メッセージ キューはフィルター処理します。"
  platform:
  - net462
- uid: System.Messaging.Message.UseAuthentication
  id: UseAuthentication
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: System.Messaging.Message.UseAuthentication
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または設定を示す値かどうか、メッセージが (または必要があります) 送信される前に認証します。"
  remarks: "UseAuthentication プロパティでは、メッセージを認証する必要があるかどうかを指定します。 送信元アプリケーションは、認証を要求している場合はメッセージ キュー、デジタル署名を作成しが送信されるメッセージに署名し、メッセージの認証を受信したときに使用します。       UseAuthentication 場合`false`を認証されたメッセージのみを受け取るキューにメッセージが送信されると、キューになったときに、メッセージは拒否されます。       メッセージのプロパティを調べることで認証に失敗したかどうかを判断できません。 メッセージ キューは、キューに配信される前に、このようなメッセージを破棄します。 ただし、配信の失敗が原因でメッセージがキューに到着した場合に、受信確認メッセージを送信することを要求することができます。"
  syntax:
    content: public bool UseAuthentication { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>送信元アプリケーションがメッセージの認証を要求した場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.UseAuthentication*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "UseAuthentication プロパティを無視するフィルターがメッセージ キューです。"
  platform:
  - net462
- uid: System.Messaging.Message.UseDeadLetterQueue
  id: UseDeadLetterQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: System.Messaging.Message.UseDeadLetterQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または配信不能キューに配信できなかったメッセージのコピーを送信するかどうかを示す値を設定します。"
  remarks: "<xref:System.Messaging.Message.UseJournalQueue%2A>UseDeadLetterQueue プロパティは、メッセージ キューがメッセージには追跡を指定します</xref:System.Messaging.Message.UseJournalQueue%2A>。 UseDeadLetterQueue 場合`true`と、メッセージが配信できなかったコンピューターの非トランザクション配信不能キューに送信されるメッセージを (非トランザクション メッセージの場合) の配信が失敗します。 配信の失敗は、期限切れのメッセージのタイマーが原因と考えられます。       トランザクション メッセージの配信失敗した場合、メッセージ キューとすべての負の値と、状態が不明の場合、ソース マシン上のトランザクション配信不能キューにも、メッセージを送信します。       配信不能キューにメッセージを格納する際は、不要になったメッセージを削除するには、定期的にキューをクリアする必要があります。 キューが存在するコンピューターのサイズ クォータに対して配信不能キューに格納されたメッセージ。 コンピューターのクォータは、管理者が設定されているし、1 つのキューではなく、コンピューター全体にメッセージを格納するために割り当てられているサイズを示します。       ジャーナルや配信不能キューを作成しません。 これらは、メッセージ キューによって生成される両方のシステム キューです。"
  example:
  - "The following code example gets and sets the value of a message's UseDeadLetterQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseDeadLetterQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、メッセージ配信エラーが配信不能キューに送信されるメッセージのコピーになりますそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.UseDeadLetterQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "UseDeadLetterQueue プロパティを無視するフィルターがメッセージ キューです。"
  platform:
  - net462
- uid: System.Messaging.Message.UseEncryption
  id: UseEncryption
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: System.Messaging.Message.UseEncryption
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得またはメッセージをプライベートにするかどうかを示す値を設定します。"
  remarks: "メッセージがプライベートの場合は、送信および受信したときに暗号化を解除する前に、本文は暗号化されます。 その暗号化を使用するプライベート メッセージを送信する送信元のアプリケーションを指定する必要がありますと、必要に応じて、暗号化アルゴリズムです。       プライベート メッセージを送信するときに、アプリケーションがメッセージの暗号化を実行する必要はありません。 メッセージ キューは、アプリケーションがディレクトリ サービスへのアクセス権を持つ Microsoft Windows 2000 エンタープライズ内のメッセージを送信する場合のメッセージ本文を暗号化できます。 プライベート メッセージを受信するときに受信キュー マネージャで、メッセージ本文が常に暗号化解除します。"
  example:
  - "The following code example gets and sets the value of a message's UseEncryption property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseEncryption { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>メッセージ キュー メッセージの暗号化を必要とするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.UseEncryption*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューをフィルターして、UseEncryption プロパティを無視します。"
  platform:
  - net462
- uid: System.Messaging.Message.UseJournalQueue
  id: UseJournalQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: System.Messaging.Message.UseJournalQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または送信元のコンピューターのジャーナル メッセージのコピーを保持する必要があるかどうかを示す値を設定します。"
  remarks: "UseJournalQueue と<xref:System.Messaging.Message.UseDeadLetterQueue%2A>プロパティは、メッセージ キューがメッセージには追跡を指定します</xref:System.Messaging.Message.UseDeadLetterQueue%2A>。 UseJournalQueue 場合`true`はコンピューター ジャーナル メッセージを送信する各ステップでは、発信元のコンピューターにコピーを保持し、します。       送信したメッセージは、送信先キューがリモート コンピューター上にある場合にのみ、ジャーナル キューにコピーされます。 メッセージがキューに直接送信される、変換先がローカル コンピューター上にある場合は、履歴を必要とする中間の手順はありません。       ジャーナル キューにメッセージを格納するときに、不要になったメッセージを削除するには、定期的にキューをクリアします。 キューが存在するコンピューターのクォータに照らし合わせてジャーナル キューに格納されているメッセージです。 (コンピューターのクォータは、管理者によって設定します。)     ジャーナルや配信不能キューを作成しません。 これらは、メッセージ キューによって生成される両方のシステム キューです。"
  example:
  - "The following code example gets and sets the value of a message's UseJournalQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseJournalQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>メッセージが表示されたら、メッセージのコピーを元のコンピューターの履歴に保持されることを要求するのには正常に送信された (発信元コンピューターから次のサーバーに);それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.UseJournalQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "UseJournalQueue プロパティを無視するフィルターがメッセージ キューです。"
  platform:
  - net462
- uid: System.Messaging.Message.UseTracing
  id: UseTracing
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: System.Messaging.Message.UseTracing
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "取得または送信先キューに移動するときにメッセージをトレースするかどうかを示す値を設定します。"
  remarks: "UseTracing プロパティでは、送信先キューに移動するときに、メッセージの経路を追跡するかどうかを指定します。 場合`true`、(メッセージ キューによって生成される)、レポート メッセージは、メッセージがメッセージ キューのルーティング サーバーを通過するたびにレポート キューに送信します。 レポート キューは、送信元キュー マネージャーによって指定されます。 レポート キューにメッセージがキュー; によって生成されたメッセージをレポートに限定されていませんアプリケーションによって生成されたメッセージは、レポート キューに送信することもできます。       トレースを使用するには、Active Directory を設定して、メッセージ キュー エンタープライズ レポート キューを指定することが含まれます。 管理者は、これらの設定を構成します。"
  example:
  - "The following code example gets and sets the value of a message's UseTracing property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseTracing { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>送信先キューに元のメッセージを途中で行われた各中間のステップは、システムのレポート キューに送信されるレポートを生成する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.Message.UseTracing*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メッセージ キューは UseTracing プロパティを無視するフィルター処理されます。"
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.Message.#ctor
  parent: System.Messaging.Message
  isExternal: false
  name: Message()
  nameWithType: Message.Message()
  fullName: System.Messaging.Message.Message()
- uid: System.Messaging.Message.#ctor(System.Object)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: System.Messaging.Message.Message(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object,IMessageFormatter)
  nameWithType: Message.Message(Object,IMessageFormatter)
  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)
- uid: System.Messaging.IMessageFormatter
  parent: System.Messaging
  isExternal: false
  name: IMessageFormatter
  nameWithType: IMessageFormatter
  fullName: System.Messaging.IMessageFormatter
- uid: System.Messaging.Message.AcknowledgeType
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: System.Messaging.Message.AcknowledgeType
- uid: System.Messaging.AcknowledgeTypes
  parent: System.Messaging
  isExternal: false
  name: AcknowledgeTypes
  nameWithType: AcknowledgeTypes
  fullName: System.Messaging.AcknowledgeTypes
- uid: System.Messaging.Message.Acknowledgment
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: System.Messaging.Message.Acknowledgment
- uid: System.Messaging.Acknowledgment
  parent: System.Messaging
  isExternal: false
  name: Acknowledgment
  nameWithType: Acknowledgment
  fullName: System.Messaging.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: System.Messaging.Message.AdministrationQueue
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.Message.AppSpecific
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: System.Messaging.Message.AppSpecific
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Messaging.Message.ArrivedTime
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: System.Messaging.Message.ArrivedTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Messaging.Message.AttachSenderId
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: System.Messaging.Message.AttachSenderId
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message.Authenticated
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: System.Messaging.Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: System.Messaging.Message.AuthenticationProviderName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Messaging.Message.AuthenticationProviderType
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: System.Messaging.Message.AuthenticationProviderType
- uid: System.Messaging.CryptographicProviderType
  parent: System.Messaging
  isExternal: false
  name: CryptographicProviderType
  nameWithType: CryptographicProviderType
  fullName: System.Messaging.CryptographicProviderType
- uid: System.Messaging.Message.Body
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
  fullName: System.Messaging.Message.Body
- uid: System.Messaging.Message.BodyStream
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: System.Messaging.Message.BodyStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Messaging.Message.BodyType
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
  fullName: System.Messaging.Message.BodyType
- uid: System.Messaging.Message.ConnectorType
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: System.Messaging.Message.ConnectorType
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Messaging.Message.CorrelationId
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: System.Messaging.Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: System.Messaging.Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: System.Messaging.Message.DestinationSymmetricKey
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.Message.DigitalSignature
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: System.Messaging.Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: System.Messaging.Message.EncryptionAlgorithm
- uid: System.Messaging.EncryptionAlgorithm
  parent: System.Messaging
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: EncryptionAlgorithm
  fullName: System.Messaging.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
  fullName: System.Messaging.Message.Extension
- uid: System.Messaging.Message.Formatter
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
  fullName: System.Messaging.Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: System.Messaging.Message.HashAlgorithm
- uid: System.Messaging.HashAlgorithm
  parent: System.Messaging
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Messaging.HashAlgorithm
- uid: System.Messaging.Message.Id
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
  fullName: System.Messaging.Message.Id
- uid: System.Messaging.Message.InfiniteTimeout
  parent: System.Messaging.Message
  isExternal: false
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: System.Messaging.Message.InfiniteTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.Message.IsFirstInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: System.Messaging.Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: System.Messaging.Message.IsLastInTransaction
- uid: System.Messaging.Message.Label
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
  fullName: System.Messaging.Message.Label
- uid: System.Messaging.Message.LookupId
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
  fullName: System.Messaging.Message.LookupId
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Messaging.Message.MessageType
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
  fullName: System.Messaging.Message.MessageType
- uid: System.Messaging.MessageType
  parent: System.Messaging
  isExternal: false
  name: MessageType
  nameWithType: MessageType
  fullName: System.Messaging.MessageType
- uid: System.Messaging.Message.Priority
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
  fullName: System.Messaging.Message.Priority
- uid: System.Messaging.MessagePriority
  parent: System.Messaging
  isExternal: false
  name: MessagePriority
  nameWithType: MessagePriority
  fullName: System.Messaging.MessagePriority
- uid: System.Messaging.Message.Recoverable
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: System.Messaging.Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: System.Messaging.Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: System.Messaging.Message.SecurityContext
- uid: System.Messaging.SecurityContext
  parent: System.Messaging
  isExternal: false
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Messaging.SecurityContext
- uid: System.Messaging.Message.SenderCertificate
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: System.Messaging.Message.SenderCertificate
- uid: System.Messaging.Message.SenderId
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
  fullName: System.Messaging.Message.SenderId
- uid: System.Messaging.Message.SenderVersion
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: System.Messaging.Message.SenderVersion
- uid: System.Messaging.Message.SentTime
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
  fullName: System.Messaging.Message.SentTime
- uid: System.Messaging.Message.SourceMachine
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: System.Messaging.Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: System.Messaging.Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: System.Messaging.Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: System.Messaging.Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: System.Messaging.Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: System.Messaging.Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: System.Messaging.Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: System.Messaging.Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: System.Messaging.Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: System.Messaging.Message.UseTracing
- uid: System.Messaging.Message.#ctor*
  parent: System.Messaging.Message
  isExternal: false
  name: Message
  nameWithType: Message.Message
- uid: System.Messaging.Message.AcknowledgeType*
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
- uid: System.Messaging.Message.Acknowledgment*
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
- uid: System.Messaging.Message.AppSpecific*
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
- uid: System.Messaging.Message.ArrivedTime*
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
- uid: System.Messaging.Message.AttachSenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
- uid: System.Messaging.Message.Authenticated*
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
- uid: System.Messaging.Message.AuthenticationProviderType*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
- uid: System.Messaging.Message.Body*
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
- uid: System.Messaging.Message.BodyStream*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
- uid: System.Messaging.Message.BodyType*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
- uid: System.Messaging.Message.ConnectorType*
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
- uid: System.Messaging.Message.CorrelationId*
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
- uid: System.Messaging.Message.DigitalSignature*
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension*
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
- uid: System.Messaging.Message.Formatter*
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
- uid: System.Messaging.Message.Id*
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
- uid: System.Messaging.Message.IsFirstInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
- uid: System.Messaging.Message.Label*
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
- uid: System.Messaging.Message.LookupId*
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
- uid: System.Messaging.Message.MessageType*
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
- uid: System.Messaging.Message.Priority*
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
- uid: System.Messaging.Message.Recoverable*
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext*
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
- uid: System.Messaging.Message.SenderCertificate*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
- uid: System.Messaging.Message.SenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
- uid: System.Messaging.Message.SenderVersion*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
- uid: System.Messaging.Message.SentTime*
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
- uid: System.Messaging.Message.SourceMachine*
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication*
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption*
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing*
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
