### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.DataLoadOptions
  id: DataLoadOptions
  children:
  - System.Data.Linq.DataLoadOptions.#ctor
  - System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  - System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  - System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  langs:
  - csharp
  name: DataLoadOptions
  nameWithType: DataLoadOptions
  fullName: System.Data.Linq.DataLoadOptions
  type: Class
  summary: "即時読み込みおよび関連するデータのフィルター処理を提供します。"
  remarks: "##オブジェクトを照会するときに一般的な実際に要求したオブジェクトのみを取得します。 *関連*オブジェクトは自動的に同時にフェッチされません。 (詳細については、次を参照してください[リレーションシップ間でクエリを実行する](~/add/includes/ajax-current-ext-md.md)。)。     DataLoadOptions クラスは、指定された関連データの即時読み込みを実現するために&2; つのメソッドを提供します。 <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>メイン ターゲットに関連するデータの即時読み込みメソッドを使用します</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>。 <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>メソッドにより、関連するオブジェクトをフィルター処理します</xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>。      ## ルールの DataLoadOptions 使用状況に関する次の規則に注意してください:-の DataLoadOptions を割り当て、<xref:System.Data.Linq.DataContext>最初のクエリが実行された後に例外が生成されます</xref:System.Data.Linq.DataContext>。      後に割り当てられているの DataLoadOptions を変更、<xref:System.Data.Linq.DataContext>例外が発生する ## サイクル処理<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>と<xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>ディレクティブは、サイクルを作成しないでください</xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A></xref:System.Data.Linq.DataLoadOptions.LoadWith%2A></xref:System.Data.Linq.DataContext>。 次はそのようなグラフの例を表す:-例 1: 自己 - 再帰的な`dlo.LoadWith<Employee>(e => e.Reports);`-例 2: バック ポインター - `dlo.LoadWith <Customer>(c => C.Orders);`           -    `dlo.LoadWith <Order>(o => o.Customer);` -例 3: 長いサイクル整形正規化されたモデルでこれは発生しませんも可能です。          - `dlo.LoadWith <A>(a => a.Bs);`           -    `dlo.LoadWith <B>(b => b.Cs);`           -    `dlo.LoadWith <C>(c => c.As);` -例 4: 自己再帰的なサブクエリの`dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`-例 5: 長いの再帰的なサブクエリの`dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`           -    `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`次に、これらのシナリオで発生するのに役立ついくつかの一般的な規則を理解します。       **LoadWith**呼び出しごとに<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>をグラフにサイクルが導入されているかどうかを確認します</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>。 ある場合、例 1 のように、2 および 3、例外がスローされます。       **AssociateWith**実行時にエンジンでは、式内のリレーションシップには、既存のサブクエリ句は当てはまりません。      第 4 の例で、`Where`すべてに対して句が実行される`A`、ものだけでなくサブでフィルター処理されたサブクエリ式自体 (再帰する) ため - 第 5 の例で最初`Where`句は、すべてに適用されます、`B`にサブクエリがある場合でも、s`B`です。 2 番目`Where`句は、すべてに適用されます、`A`で導かれるサブクエリがある場合でも s`A`です。"
  example:
  - When you retrieve `Customers` from the Northwind sample database, you can use DataLoadOptions to specify that `Orders` is also to be retrieved. You can even specify which subset of `Orders` to retrieve.
  syntax:
    content: public sealed class DataLoadOptions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.#ctor
  id: '#ctor'
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: DataLoadOptions()
  nameWithType: DataLoadOptions.DataLoadOptions()
  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.Linq.DataLoadOptions&quot;> </xref>クラスです。"
  syntax:
    content: public DataLoadOptions ();
    parameters: []
  overload: System.Data.Linq.DataLoadOptions.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  id: AssociateWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: AssociateWith(LambdaExpression)
  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "特定のリレーションシップに対して取得されたオブジェクトをフィルター処理します。"
  remarks: "次の例では、内側のループ反復のみもの`Orders`今日を出荷されていません。"
  example:
  - >-
    [!code-vb[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/visualbasic/snip/module1.vb#1)]
     [!code-cs[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/csharp/testmakenew/program.cs#1)]
  syntax:
    content: public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: "一対多の特定のフィールドまたはプロパティで使用するクエリを識別します。 次に注意してください。 フィールドまたは一対多のリレーションシップを表すプロパティに式が起動しない場合、例外がスローされます。       有効な演算子以外の演算子は、式が表示されたら、例外がスローされます。 有効な演算子は次のように、:、OrderBy ThenBy OrderByDescending ThenByDescending を取る"
  overload: System.Data.Linq.DataLoadOptions.AssociateWith*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: AssociateWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public void AssociateWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "追加します。"
  overload: System.Data.Linq.DataLoadOptions.AssociateWith<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  id: LoadWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: LoadWith(LambdaExpression)
  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "指定したラムダ式を使用してメイン ターゲットに関連するデータを取得します。"
  remarks: "次の例ではすべて、`Orders`すべてに対して、`Customers`ロンドンに住んでいる、クエリの実行時に取得されます。 その結果、後続のアクセスを`Orders`プロパティを`Customer`オブジェクトも、新しいデータベース クエリはトリガーされません。"
  example:
  - >-
    [!code-vb[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/visualbasic/snip/module1.vb#2)]
     [!code-cs[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/csharp/testmakenew/program.cs#2)]
  syntax:
    content: public void LoadWith (System.Linq.Expressions.LambdaExpression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: "関連資料を表すラムダ式です。"
  overload: System.Data.Linq.DataLoadOptions.LoadWith*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: LoadWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public void LoadWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "追加します。"
  overload: System.Data.Linq.DataLoadOptions.LoadWith<T>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.DataLoadOptions.#ctor
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: DataLoadOptions()
  nameWithType: DataLoadOptions.DataLoadOptions()
  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()
- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith(LambdaExpression)
  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
- uid: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression<Func<T,Object>>
  nameWithType: Expression<Func<T,Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T,System.Object>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<T,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<T,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith(LambdaExpression)
  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)
- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
- uid: System.Data.Linq.DataLoadOptions.#ctor*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: DataLoadOptions
  nameWithType: DataLoadOptions.DataLoadOptions
- uid: System.Data.Linq.DataLoadOptions.AssociateWith*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith
  nameWithType: DataLoadOptions.AssociateWith
- uid: System.Data.Linq.DataLoadOptions.AssociateWith<T>*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith<T>
  nameWithType: DataLoadOptions.AssociateWith<T>
- uid: System.Data.Linq.DataLoadOptions.LoadWith*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith
  nameWithType: DataLoadOptions.LoadWith
- uid: System.Data.Linq.DataLoadOptions.LoadWith<T>*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith<T>
  nameWithType: DataLoadOptions.LoadWith<T>
