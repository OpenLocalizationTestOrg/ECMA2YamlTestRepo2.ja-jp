### YamlMime:ManagedReference
items:
- uid: System.Windows.Interop.WindowInteropHelper
  id: WindowInteropHelper
  children:
  - System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  - System.Windows.Interop.WindowInteropHelper.EnsureHandle
  - System.Windows.Interop.WindowInteropHelper.Handle
  - System.Windows.Interop.WindowInteropHelper.Owner
  langs:
  - csharp
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper
  fullName: System.Windows.Interop.WindowInteropHelper
  type: Class
  summary: "間の相互運用を支援し[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]と[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]コード。"
  remarks: "このクラスのメンバーにより、内部にアクセスする権限が呼び出し元、 [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] HWND と親 HWND の[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.</xref:System.Windows.Window>  適切なセキュリティ チェックは、それらのメンバーによって実行されます。       具体的なオブジェクトと hwnd の分離に基づく必要がある場合は、このクラスを使用します。       シナリオの例をホストする必要があるかどうか、 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]  ダイアログ ボックスで、[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]アプリケーションです。 初期化と WindowInteropHelper、 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]  ダイアログ ボックスのウィンドウのオブジェクト。 表示する、[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]ウィンドウのハンドル (HWND) から、<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>プロパティの所有者を指定し、 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]  ウィンドウで、<xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>プロパティ</xref:System.Windows.Interop.WindowInteropHelper.Owner%2A></xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>。 次のコード例は、ホストしているときに、WindowInteropHelper を使用する方法を示しています、 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]  ダイアログ ボックスで、[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]アプリケーションです。       [!code-cs[CorePseudocode #WindowInteropHelper](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)][!code-vb[CorePseudocode #WindowInteropHelper](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper) ]を取得するは、このクラスでサポートされている別のシナリオ、<xref:System.Windows.Interop.HwndSource>オブジェクトから、 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>オブジェクト</xref:System.Windows.Window></xref:System.Windows.Interop.HwndSource>。   <xref:System.Windows.Interop.HwndSource>有効の処理を指示する[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]を通じてメッセージ、<xref:System.Windows.Interop.HwndSource.AddHook%2A>メソッド</xref:System.Windows.Interop.HwndSource.AddHook%2A></xref:System.Windows.Interop.HwndSource>。 使用して<xref:System.Windows.Interop.HwndSource>と<xref:System.Windows.Interop.HwndSource.AddHook%2A>の代わりに、<xref:System.Windows.Window>いいえ同等またはで処理しているメッセージを処理することができますも[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]</xref:System.Windows.Window></xref:System.Windows.Interop.HwndSource.AddHook%2A></xref:System.Windows.Interop.HwndSource>。 <xref:System.Windows.Window>ソース、 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> <xref:System.Windows.Interop.HwndSource>。</xref:System.Windows.Interop.HwndSource> HWND から取得する WindowInteropHelper</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>を呼び出し</xref:System.Windows.Window>、WindowInteropHelper を作成します。"
  syntax:
    content: public sealed class WindowInteropHelper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  id: '#ctor(System.Windows.Window)'
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;> </xref>の指定されたクラス[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]ウィンドウです。"
  remarks: "ウィンドウには、ダイアログ ボックスで、またはそれ以外の場合に適していませんの境界内でホストされているウィンドウを指定できます、[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]アプリケーションです。"
  syntax:
    content: public WindowInteropHelper (System.Windows.Window window);
    parameters:
    - id: window
      type: System.Windows.Window
      description: "A[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]ウィンドウ オブジェクト。"
  overload: System.Windows.Interop.WindowInteropHelper.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  id: EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "HWND はまだ作成されていない場合は、ウィンドウの HWND を作成します。"
  remarks: "マネージ<xref:System.Windows.Window>。</xref:System.Windows.Window>の実際の表示のウィンドウ ハンドル (HWND) の作成を分割するときに、EnsureHandle メソッドを使用します。 これは、ウィンドウを表示する必要がないタスクを実行するオートメーション クライアントがある場合に便利です。       ネイティブのウィンドウが作成されていない場合、このメソッドはネイティブのウィンドウでは、セットを作成、<xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>プロパティ、および、HWND を返します</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>。 ネイティブのウィンドウは、既に作成されている、既存のネイティブ ウィンドウのハンドルが返されます。       このメソッドの呼び出しの結果として、[ネイティブ] ウィンドウを作成する場合、<xref:System.Windows.Window.SourceInitialized>イベントが発生します</xref:System.Windows.Window.SourceInitialized>。       クエリを実行する、 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>EnsureHandle メソッドが呼び出された後にプロパティが既存のウィンドウ ハンドルを返します</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>。 ビジュアル ツリーが後まで、ウィンドウにアタッチされていない、<xref:System.Windows.Window.Show%2A>メソッドが呼び出されます</xref:System.Windows.Window.Show%2A>。       EnsureHandle メソッドを呼び出すと複数回、新しいウィンドウのハンドルが作成されることはできません。 EnsureHandle メソッドを呼び出すと、ハンドルが既にへの呼び出しによって作成されたときに、<xref:System.Windows.Window.Show%2A>メソッドは新しいウィンドウ ハンドルを作成できません</xref:System.Windows.Window.Show%2A>。 ネイティブのウィンドウが作成されるは、EnsureHandle メソッドが呼び出されたときにハンドルが存在しない場合のみです。       プラットフォーム呼び出しによるネイティブ ウィンドウ Api を使用して設定されているウィンドウのプロパティは、Api の管理 ウィンドウでされない可能性があります。 たとえば、EnsureHandle メソッドが呼び出された後に、ネイティブ MS_EX_TOPMOST フラグを使用して最上位にウィンドウを設定する場合、<xref:System.Windows.Window.Topmost%2A>プロパティは、ネイティブの設定を反映する保証はありません</xref:System.Windows.Window.Topmost%2A>。"
  syntax:
    content: public IntPtr EnsureHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: "<xref:System.IntPtr>HWND を表す</xref:System.IntPtr>。"
  overload: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  id: Handle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "ウィンドウ ハンドルを取得、[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]これを作成するために使用される<xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;></xref>です。"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]ウィンドウ ハンドル (HWND)。"
  overload: System.Windows.Interop.WindowInteropHelper.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  id: Owner
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "取得または設定のハンドル、[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]オーナー ウィンドウです。"
  remarks: "Windows の親を変更するには、このプロパティを設定します。 True として一般的な[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]プログラミングと、既に使用されている windows ない親を変更しないでください。"
  syntax:
    content: public IntPtr Owner { get; set; }
    return:
      type: System.IntPtr
      description: "所有者のウィンドウ ハンドル (HWND))。"
  overload: System.Windows.Interop.WindowInteropHelper.Owner*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
- uid: System.Windows.Interop.WindowInteropHelper.#ctor*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper.WindowInteropHelper
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle
  nameWithType: WindowInteropHelper.EnsureHandle
- uid: System.Windows.Interop.WindowInteropHelper.Handle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
