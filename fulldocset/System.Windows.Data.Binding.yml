### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.Binding
  id: Binding
  children:
  - System.Windows.Data.Binding.#ctor
  - System.Windows.Data.Binding.#ctor(System.String)
  - System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.AsyncState
  - System.Windows.Data.Binding.BindsDirectlyToSource
  - System.Windows.Data.Binding.Converter
  - System.Windows.Data.Binding.ConverterCulture
  - System.Windows.Data.Binding.ConverterParameter
  - System.Windows.Data.Binding.DoNothing
  - System.Windows.Data.Binding.ElementName
  - System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  - System.Windows.Data.Binding.IndexerName
  - System.Windows.Data.Binding.IsAsync
  - System.Windows.Data.Binding.Mode
  - System.Windows.Data.Binding.NotifyOnSourceUpdated
  - System.Windows.Data.Binding.NotifyOnTargetUpdated
  - System.Windows.Data.Binding.NotifyOnValidationError
  - System.Windows.Data.Binding.Path
  - System.Windows.Data.Binding.RelativeSource
  - System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  - System.Windows.Data.Binding.ShouldSerializePath
  - System.Windows.Data.Binding.ShouldSerializeSource
  - System.Windows.Data.Binding.ShouldSerializeValidationRules
  - System.Windows.Data.Binding.Source
  - System.Windows.Data.Binding.SourceUpdatedEvent
  - System.Windows.Data.Binding.TargetUpdatedEvent
  - System.Windows.Data.Binding.UpdateSourceExceptionFilter
  - System.Windows.Data.Binding.UpdateSourceTrigger
  - System.Windows.Data.Binding.ValidatesOnDataErrors
  - System.Windows.Data.Binding.ValidatesOnExceptions
  - System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  - System.Windows.Data.Binding.ValidationRules
  - System.Windows.Data.Binding.XmlNamespaceManagerProperty
  - System.Windows.Data.Binding.XPath
  langs:
  - csharp
  name: Binding
  nameWithType: Binding
  fullName: System.Windows.Data.Binding
  type: Class
  summary: "バインド ターゲット オブジェクトのプロパティを接続するバインディングの定義に高レベルのアクセスを提供 (通常、[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]要素)、および任意のデータ ソース (たとえば、データベース、[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]ファイル、またはデータを含む任意のオブジェクト)。"
  remarks: "[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]データ バインディングは、アプリケーションが存在し、データと対話するためのシンプルかつ一貫した方法を提供します。 データ バインディングでは、2 つのオブジェクトのプロパティの値を同期することができます。       バインドを確立するために、バインディング クラスまたは他の<xref:System.Windows.Data.BindingBase>。</xref:System.Windows.Data.BindingBase>を継承するクラスのいずれかを使用してください。 どのようなオブジェクトに関係なくをバインドして、データ ソースの種類、各バインディングに依存して次の図に示されているモデル。       ![基本的なデータ バインディング ダイアグラム](~/add/media/databindingmostbasic.png &quot;基本的なデータ バインディング ダイアグラム&quot;)図で次の基本型を示します[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]データ バインディングの概念です。      -各バインディングは、通常これら&4; つのコンポーネントを: バインディング ターゲット オブジェクト、ターゲット プロパティ、バインディング ソースと<xref:System.Windows.Data.Binding.Path%2A>で使用するバインディング ソースの値にします</xref:System.Windows.Data.Binding.Path%2A>。 内容をバインドする場合など、 <xref:System.Windows.Controls.TextBox>、ターゲット オブジェクトは、従業員のオブジェクトのプロパティの名前、 <xref:System.Windows.Controls.TextBox>、target プロパティが、<xref:System.Windows.Controls.TextBox.Text%2A>プロパティを使用する値は、名とソース オブジェクトは、従業員オブジェクト</xref:System.Windows.Controls.TextBox.Text%2A></xref:System.Windows.Controls.TextBox></xref:System.Windows.Controls.TextBox>。      -ターゲット プロパティには、依存関係プロパティをする必要があります。 また、フィールドを連結することはできません。 ほとんどのプロパティの<xref:System.Windows.UIElement>オブジェクトが依存関係プロパティと読み取り専用のものを除く、ほとんどの依存関係プロパティが既定ではデータ バインディングをサポートします</xref:System.Windows.UIElement>。 (<xref:System.Windows.DependencyObject>型のみが依存関係プロパティを定義および<xref:System.Windows.UIElement>のすべてのオブジェクトが<xref:System.Windows.DependencyObject>から派生します。)     -がの図で指定されていない、注意してくださいバインド ソース オブジェクトがカスタムになるように制限されていない[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]オブジェクト</xref:System.Windows.DependencyObject></xref:System.Windows.UIElement></xref:System.Windows.DependencyObject>。 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]データ バインディングの形式でデータをサポートしている[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]オブジェクトおよび[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]です。 いくつかの例を提供する場合、バインディング ソースがあります、 <xref:System.Windows.UIElement>、任意のリスト オブジェクト、[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]オブジェクトに関連付けられている[!INCLUDE[TLA#tla_adonet](~/add/includes/tlasharptla-adonet-md.md)]データまたは Web サービス、またはを含む XmlNode、[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]データ</xref:System.Windows.UIElement>。       使用して、<xref:System.Windows.Data.Binding.Mode%2A>データ フローの方向を指定するプロパティ</xref:System.Windows.Data.Binding.Mode%2A>。 ソースの変更を検出するには一方向または双方向のバインドで、ソースが<xref:System.ComponentModel.INotifyPropertyChanged>。</xref:System.ComponentModel.INotifyPropertyChanged>などの適切なプロパティ変更通知のメカニズムを実装する必要があります。 例については、次を参照してください。[する方法: 実装プロパティの変更通知](~/add/includes/ajax-current-ext-md.md)です。 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>プロパティは、ソースの更新のタイミングを指定します</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>。 詳細については、「基本的なデータ バインディング概念」を参照してください[データ バインディングの概要](~/add/includes/ajax-current-ext-md.md)です。      <a name=&quot;xamlAttributeUsage_PriorityBinding&quot;></a>## XAML 属性の使用```   <object property=&quot;{Binding  declaration}&quot;/>   ``` <a name=&quot;xamlValues_PriorityBinding&quot;> </a> ## XAML 値*宣言*コンマ (,) で区切られた&0; 個以上の属性割り当て句。       詳細については、次を参照してください。[マークアップ拡張機能のバインド](~/add/includes/ajax-current-ext-md.md)または[バインディング宣言の概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: 'public class Binding : System.Windows.Data.BindingBase'
  inheritance:
  - System.Windows.Markup.MarkupExtension
  - System.Windows.Data.BindingBase
  implements: []
  inheritedMembers:
  - System.Windows.Data.BindingBase.BindingGroupName
  - System.Windows.Data.BindingBase.Delay
  - System.Windows.Data.BindingBase.FallbackValue
  - System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)
  - System.Windows.Data.BindingBase.ShouldSerializeFallbackValue
  - System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue
  - System.Windows.Data.BindingBase.StringFormat
  - System.Windows.Data.BindingBase.TargetNullValue
  platform:
  - net462
- uid: System.Windows.Data.Binding.#ctor
  id: '#ctor'
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Binding()
  nameWithType: Binding.Binding()
  fullName: System.Windows.Data.Binding.Binding()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref>クラスです。"
  syntax:
    content: public Binding ();
    parameters: []
  overload: System.Windows.Data.Binding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Binding(String)
  nameWithType: Binding.Binding(String)
  fullName: System.Windows.Data.Binding.Binding(String)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref>クラス パスを使用します。"
  syntax:
    content: public Binding (string path);
    parameters:
    - id: path
      type: System.String
      description: "初期<xref:System.Windows.Data.Binding.Path*>バインディングに対する</xref:System.Windows.Data.Binding.Path*>。"
  overload: System.Windows.Data.Binding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "ハンドラーを追加、<xref:System.Windows.Data.Binding.SourceUpdated>アタッチされるイベント</xref:System.Windows.Data.Binding.SourceUpdated>。"
  remarks: "このメソッドはサポートで添付イベントの使用状況[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>または<xref href=&quot;System.Windows.ContentElement&quot;></xref>イベントをリッスンします。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "追加するハンドラー。"
  overload: System.Windows.Data.Binding.AddSourceUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "ハンドラーを追加、<xref:System.Windows.Data.Binding.TargetUpdated>アタッチされるイベント</xref:System.Windows.Data.Binding.TargetUpdated>。"
  remarks: "このメソッドはサポートで添付イベントの使用状況[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>または<xref href=&quot;System.Windows.ContentElement&quot;></xref>イベントをリッスンします。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "追加するハンドラー。"
  overload: System.Windows.Data.Binding.AddTargetUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AsyncState
  id: AsyncState
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AsyncState
  nameWithType: Binding.AsyncState
  fullName: System.Windows.Data.Binding.AsyncState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または非同期データ ディスパッチャーに渡される非透過データを設定します。"
  syntax:
    content: public object AsyncState { get; set; }
    return:
      type: System.Object
      description: "データに非同期データ ディスパッチャーに渡されます。"
  overload: System.Windows.Data.Binding.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.BindsDirectlyToSource
  id: BindsDirectlyToSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
  fullName: System.Windows.Data.Binding.BindsDirectlyToSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または設定を評価するかどうかを示す値、<xref:System.Windows.Data.Binding.Path*>データ項目を基準または<xref href=&quot;System.Windows.Data.DataSourceProvider&quot;></xref>オブジェクト</xref:System.Windows.Data.Binding.Path*>。"
  remarks: "通常の動作 (ときに、このプロパティは`false`) 用の特別な処理が含まれています<xref:System.Windows.Data.DataSourceProvider>オブジェクト</xref:System.Windows.Data.DataSourceProvider>。 この例では、バインディング エンジンが評価される、<xref:System.Windows.Data.Binding.Path%2A>から取得したオブジェクトを基準とした、<xref:System.Windows.Data.DataSourceProvider.Data%2A>プロパティ</xref:System.Windows.Data.DataSourceProvider.Data%2A></xref:System.Windows.Data.Binding.Path%2A>。 バインドをさらに、リッスン、<xref:System.Windows.Data.DataSourceProvider.DataChanged>イベントし、それに従って動作します</xref:System.Windows.Data.DataSourceProvider.DataChanged>。 このプロパティを設定`true`この動作をオーバーライドしのプロパティへのバインドのアクセスを提供、<xref:System.Windows.Data.DataSourceProvider>オブジェクト自体です</xref:System.Windows.Data.DataSourceProvider>。"
  syntax:
    content: public bool BindsDirectlyToSource { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>データ項目自体の相対パスを評価するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.BindsDirectlyToSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Converter
  id: Converter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Converter
  nameWithType: Binding.Converter
  fullName: System.Windows.Data.Binding.Converter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または使用するコンバーターを設定します。"
  remarks: "バインディングは、元の値とターゲット値の間の型変換を実行しようとする既定のコンバーターを暗黙的に使用します。 変換を実行できないかどうか、既定のコンバーターを返します`null`です。       バインディングにカスタム値コンバーターを関連付ける場合を実装するクラスを作成する必要があります、<xref:System.Windows.Data.IValueConverter>インターフェイスし、実装を提供、<xref:System.Windows.Data.IValueConverter.Convert%2A>と<xref:System.Windows.Data.IValueConverter.ConvertBack%2A>メソッド</xref:System.Windows.Data.IValueConverter.ConvertBack%2A></xref:System.Windows.Data.IValueConverter.Convert%2A></xref:System.Windows.Data.IValueConverter>。 値コンバーターでは、1 つの型からのデータの変更、文字セットなど、カルチャの詳細の間の変換、または、プレゼンテーションの他の側面を変更できます。 変換の一般的なシナリオの例については、「データの変換」を参照してください、[データ バインディングの概要](~/add/includes/ajax-current-ext-md.md)です。      <a name=&quot;xamlAttributeUsage_Converter&quot;></a>## XAML 属性の使用```   <object Converter=&quot;myConverter&quot;/>   ``` <a name=&quot;xamlValues_Converter&quot;> </a> ## XAML 値*myConverter*を実装するクラスにリソース参照、<xref:System.Windows.Data.IValueConverter>インターフェイスの実装が含まれています、<xref:System.Windows.Data.IValueConverter.Convert%2A>と<xref:System.Windows.Data.IValueConverter.ConvertBack%2A>メソッド</xref:System.Windows.Data.IValueConverter.ConvertBack%2A></xref:System.Windows.Data.IValueConverter.Convert%2A></xref:System.Windows.Data.IValueConverter>。       値コンバーター、参照を使用して、 [StaticResource マークアップ拡張機能](~/add/includes/ajax-current-ext-md.md)します。"
  syntax:
    content: public System.Windows.Data.IValueConverter Converter { get; set; }
    return:
      type: System.Windows.Data.IValueConverter
      description: "型の値<xref href=&quot;System.Windows.Data.IValueConverter&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.Converter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ConverterCulture
  id: ConverterCulture
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
  fullName: System.Windows.Data.Binding.ConverterCulture
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得またはコンバーターを評価するカルチャを設定します。"
  remarks: "バインディング エンジンを使用してこのプロパティを設定しない場合、`Language`バインディング ターゲット オブジェクトのプロパティです。 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]この既定値は&quot;EN-US&quot;または明示的に設定されている場合、ページのルート要素 (または任意の要素) から値を継承します。       データ変換については、データ変換のセクションを参照してください、[データ バインディングの概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Globalization.CultureInfo ConverterCulture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.ConverterCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ConverterParameter
  id: ConverterParameter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
  fullName: System.Windows.Data.Binding.ConverterParameter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または<xref:System.Windows.Data.Binding.Converter*>。</xref:System.Windows.Data.Binding.Converter*>へ渡すパラメーターの設定"
  remarks: "ConverterParameter プロパティを使用して、オブジェクトを変換する方法を指定することができます。  このプロパティは、追加の情報をバインディングで使用するコンバーターを渡します。  ConverterParameter を指定する場合、値は、<xref:System.Windows.Data.IValueConverter.Convert%2A>と<xref:System.Windows.Data.IValueConverter.ConvertBack%2A>メソッドとして、`parameter`パラメーター</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A> 。       例については、次を参照してください。[する方法: 値を基にしたバインド品目の一覧を生成](~/add/includes/ajax-current-ext-md.md)です。 実装の例を<xref:System.Windows.Data.IMultiValueConverter>が、使用状況が引き続き適用されます</xref:System.Windows.Data.IMultiValueConverter>。"
  syntax:
    content: public object ConverterParameter { get; set; }
    return:
      type: System.Object
      description: "<xref:System.Windows.Data.Binding.Converter*>。</xref:System.Windows.Data.Binding.Converter*>に渡すパラメーター 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.ConverterParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.DoNothing
  id: DoNothing
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: DoNothing
  nameWithType: Binding.DoNothing
  fullName: System.Windows.Data.Binding.DoNothing
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "バインディング エンジンを任意のアクションを実行しないよう指示するため、戻り値として使用されます。"
  remarks: "バインディング ソース プロパティまたはコンバーターは、バインド エンジンを任意のアクションを実行しないように指示する DoNothing を返すことができます。 例については、値を次に移動しますが、バインディング ターゲットに転送していないバインディング エンジンに指示する<xref:System.Windows.Data.Binding>で、 <xref:System.Windows.Data.PriorityBinding>、使用しないか、`FallBackValue`または既定値です</xref:System.Windows.Data.PriorityBinding></xref:System.Windows.Data.Binding>。"
  syntax:
    content: public static readonly object DoNothing;
    return:
      type: System.Object
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ElementName
  id: ElementName
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ElementName
  nameWithType: Binding.ElementName
  fullName: System.Windows.Data.Binding.ElementName
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得またはバインド ソース オブジェクトとして使用する要素の名前を設定します。"
  remarks: "このプロパティは、アプリケーションで別の要素のプロパティにバインドするときに便利です。 使用する場合など、 <xref:System.Windows.Controls.Slider>、アプリケーションの他のコントロールの高さを制御する、またはバインドする場合、 <xref:System.Windows.Controls.ContentControl.Content%2A>、コントロールを<xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A>のプロパティ、<xref:System.Windows.Controls.ListBox>コントロール</xref:System.Windows.Controls.ListBox></xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A></xref:System.Windows.Controls.ContentControl.Content%2A></xref:System.Windows.Controls.Slider>。       既定では、バインドがで指定されたデータ コンテキストを継承、`DataContext`いずれかが設定されている場合は、プロパティです。 ただし、ElementName プロパティでは、いずれかのソースを明示的に設定することができます、<xref:System.Windows.Data.Binding>し、継承されたデータ コンテキストをオーバーライドします</xref:System.Windows.Data.Binding>。 詳細については、次を参照してください。[する方法: バインド ソースを指定して](~/add/includes/ajax-current-ext-md.md)です。       <xref:System.Windows.Data.Binding.Source%2A>と<xref:System.Windows.Data.Binding.RelativeSource%2A>のプロパティ、<xref:System.Windows.Data.Binding>クラスも有効にするバインディングのソースの設定を明示的にします</xref:System.Windows.Data.Binding></xref:System.Windows.Data.Binding.RelativeSource%2A></xref:System.Windows.Data.Binding.Source%2A>。 ただし、3 つのプロパティでは、ElementName のいずれかのみ<xref:System.Windows.Data.Binding.Source%2A>、および<xref:System.Windows.Data.Binding.RelativeSource%2A>、する必要がありますセットごとにバインドする、または競合が発生する可能性があります</xref:System.Windows.Data.Binding.RelativeSource%2A></xref:System.Windows.Data.Binding.Source%2A>。 このプロパティは、バインディング ソースの競合がある場合に例外をスローします。"
  syntax:
    content: public string ElementName { get; set; }
    return:
      type: System.String
      description: "値、 <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref>プロパティまたは[X:name ディレクティブ](~/add/includes/ajax-current-ext-md.md)の関心のある要素。 適切な登録されている場合にのみ、コード内の要素を参照することができます<xref:System.Windows.NameScope>を通じて<xref uid=&quot;langword_csharp_RegisterName&quot; name=&quot;RegisterName&quot; href=&quot;&quot;> </xref></xref:System.Windows.NameScope> 。 詳細については、次を参照してください。 [WPF XAML 名前スコープ](~/add/includes/ajax-current-ext-md.md)です。       既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.ElementName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  id: GetXmlNamespaceManager(System.Windows.DependencyObject)
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: GetXmlNamespaceManager(DependencyObject)
  nameWithType: Binding.GetXmlNamespaceManager(DependencyObject)
  fullName: System.Windows.Data.Binding.GetXmlNamespaceManager(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "返します、[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]指定したオブジェクトにアタッチされているバインドによって使用される名前空間マネージャー オブジェクトです。"
  remarks: "このメソッドの添付プロパティの使用をサポートする、<xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>添付プロパティ</xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>。       [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]名前空間マネージャーが、バインドでデータの出所場合にのみ、[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]バインディング ソース (<xref:System.Windows.Data.XmlDataProvider>オブジェクト).</xref:System.Windows.Data.XmlDataProvider>       名前空間マネージャーが具体的には適用されていない場合、元のデータ ソースを作成または、後で呼び出すことによって<xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A>バインドで、このメソッドは`null`</xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A>。       このメソッドは常に返します`null`バインドの背後にデータがない場合[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]です。"
  syntax:
    content: public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "名前空間の情報を取得するオブジェクト。"
    return:
      type: System.Xml.XmlNamespaceManager
      description: "表示するために使用されるオブジェクトを返します[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]渡されたオブジェクト要素に対するバインディングに関連する名前空間。 このオブジェクトとしてキャストする必要があります&lt;xref:System.Xml.XmlNamespaceManager?displayProperty=fullName&gt;です。"
  overload: System.Windows.Data.Binding.GetXmlNamespaceManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> target </code>パラメーターを指定できません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Data.Binding.IndexerName
  id: IndexerName
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: IndexerName
  nameWithType: Binding.IndexerName
  fullName: System.Windows.Data.Binding.IndexerName
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "として使用される、<xref:System.ComponentModel.PropertyChangedEventArgs.PropertyName*>の&lt;xref:System.ComponentModel.PropertyChangedEventArgs?displayProperty=fullName&gt;をインデクサー プロパティが変更されたことを示します</xref:System.ComponentModel.PropertyChangedEventArgs.PropertyName*>。"
  syntax:
    content: public const string IndexerName;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.IsAsync
  id: IsAsync
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: IsAsync
  nameWithType: Binding.IsAsync
  fullName: System.Windows.Data.Binding.IsAsync
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得またはを示す値を設定するかどうか、 <xref href=&quot;System.Windows.Data.Binding&quot;> </xref>取得および非同期的に値を設定する必要があります。"
  remarks: "IsAsync プロパティを使用するときに、`get`バインディング ソースのプロパティのアクセサー時間がかかる可能性があります。 1 つの例は、イメージのプロパティで、 `get` Web からダウンロードするアクセサー。 設定 IsAsync`true`ブロッキングを回避できます、[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]ダウンロードが実行中にします。       バインディングがレポートに到達する値を待っている間に、 <xref:System.Windows.Data.BindingBase.FallbackValue%2A>、いずれかが使用可能なまたは、バインディングの既定値はターゲット プロパティ</xref:System.Windows.Data.BindingBase.FallbackValue%2A>。       ただし、あるできません IsAsync プロパティを使用する必要がある多くのシナリオ。 [!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)]ガイドライン推奨桁違いフィールド セットよりも低速であるプロパティを定義します。 クラスを作成する場合は、処理以外の操作を非常に遅いことを検討してください、`get`アクセサー、結果をキャッシュします。 詳細については、次を参照してください。 [NIB: プロパティとの間の選択とメソッド](http://msdn.microsoft.com/en-us/55825e8f-7e2e-448a-9505-7217cc91b1af)です。"
  syntax:
    content: public bool IsAsync { get; set; }
    return:
      type: System.Boolean
      description: "既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.IsAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Mode
  id: Mode
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Mode
  nameWithType: Binding.Mode
  fullName: System.Windows.Data.Binding.Mode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得またはバインドのデータ フローの方向を示す値を設定します。"
  remarks: "<xref:System.Windows.Data.BindingMode><xref:System.Windows.Data.BindingMode>基になるデータのバインドが<xref:System.ComponentModel.INotifyPropertyChanged>。</xref:System.ComponentModel.INotifyPropertyChanged>を実装する必要があります</xref:System.Windows.Data.BindingMode>と</xref:System.Windows.Data.BindingMode>をサポートするには 詳細については、「[する方法: 実装プロパティの変更通知](~/add/includes/ajax-current-ext-md.md)です。       <xref:System.Windows.Data.BindingMode>または<xref:System.Windows.Data.BindingMode>バインドを設定して、ターゲットからソースへの更新プログラムを制御することができます、<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>プロパティ</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A></xref:System.Windows.Data.BindingMode></xref:System.Windows.Data.BindingMode>。 詳細については、 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>。</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>を参照してください。       異なるバインディング モードの詳細については、次を参照してください。[データ バインディングの概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Windows.Data.BindingMode Mode { get; set; }
    return:
      type: System.Windows.Data.BindingMode
      description: "1 つ、 <xref href=&quot;System.Windows.Data.BindingMode&quot;> </xref>値。 既定値は<xref href=&quot;System.Windows.Data.BindingMode&quot;> </xref>、ターゲット依存関係プロパティの既定のバインド モード値が返されます。 ただし、既定値は、各依存関係プロパティによって異なります。 テキスト ボックスやチェック ボックスなどのユーザーが編集できるプロパティは一般に、その他のほとんどのプロパティは既定で一方向のバインドが双方向のバインディングを既定です。       依存関係プロパティが既定では、一方向または双方向をバインドするかどうかを決定するプログラムによる方法のプロパティを使用して、プロパティ メタデータを取得する<> *> のブール値を確認し、 <> </> *> プロパティです。"
  overload: System.Windows.Data.Binding.Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated
  id: NotifyOnSourceUpdated
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.Binding.NotifyOnSourceUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または生成するかどうかを示す値を設定、<xref:System.Windows.Data.Binding.SourceUpdated>バインディング ターゲットからバインディング ソースへ値が転送されるときにイベント</xref:System.Windows.Data.Binding.SourceUpdated>。"
  syntax:
    content: public bool NotifyOnSourceUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、<xref:System.Windows.Data.Binding.SourceUpdated>バインディング ソースの値が更新された、それ以外の場合は、イベントを発生させるか<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Windows.Data.Binding.SourceUpdated> 。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.NotifyOnSourceUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated
  id: NotifyOnTargetUpdated
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.Binding.NotifyOnTargetUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または生成するかどうかを示す値を設定、<xref:System.Windows.Data.Binding.TargetUpdated>バインディング ソースからバインディング ターゲットへ値が転送されるときにイベント</xref:System.Windows.Data.Binding.TargetUpdated>。"
  syntax:
    content: public bool NotifyOnTargetUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、<xref:System.Windows.Data.Binding.TargetUpdated>バインディング ターゲットの値が更新された、それ以外の場合は、イベントを発生させるか<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Windows.Data.Binding.TargetUpdated> 。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.NotifyOnTargetUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnValidationError
  id: NotifyOnValidationError
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
  fullName: System.Windows.Data.Binding.NotifyOnValidationError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または生成するかどうかを示す値を設定、<xref:System.Windows.Controls.Validation.Error>バインドされたオブジェクトに対してイベントをアタッチします</xref:System.Windows.Controls.Validation.Error>。"
  remarks: "バインディングの場合<xref:System.Windows.Data.Binding.ValidationRules%2A>関連付けられているバインディング エンジンを確認のたびに各規則は、ソース プロパティにターゲット プロパティの値を転送します</xref:System.Windows.Data.Binding.ValidationRules%2A>。 ルールには、値が無効になります、バインド エンジンを作成します、<xref:System.Windows.Controls.ValidationError>オブジェクトを追加して、 <xref:System.Windows.Controls.Validation>.<xref:System.Windows.Controls.Validation.Errors%2A>バインドされたオブジェクトのコレクション</xref:System.Windows.Controls.Validation.Errors%2A></xref:System.Windows.Controls.Validation></xref:System.Windows.Controls.ValidationError>。 ときに、<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>プロパティは空でなく、<xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName>アタッチされたオブジェクトのプロパティが`true`</xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName></xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>。 場合の NotifyOnValidationError プロパティ、<xref:System.Windows.Data.Binding>に設定されている`true`、バインディング エンジンが発生し、<xref:System.Windows.Controls.Validation.Error?displayProperty=fullName>オブジェクトのイベントをアタッチします</xref:System.Windows.Controls.Validation.Error?displayProperty=fullName></xref:System.Windows.Data.Binding>。       検証プロセスの詳細については、データの検証」セクションを参照してください、[データ バインディングの概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public bool NotifyOnValidationError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、<xref:System.Windows.Controls.Validation.Error>添付イベントが、それ以外のソースの更新中に検証エラーがあるときにバインドされたオブジェクトに対して発生する必要があります<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Windows.Controls.Validation.Error> 。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.NotifyOnValidationError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Path
  id: Path
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Path
  nameWithType: Binding.Path
  fullName: System.Windows.Data.Binding.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または、バインディング ソース プロパティへのパスを設定します。"
  remarks: "各バインドは通常これら&4; つのコンポーネントを持つ: バインディング ターゲット オブジェクト、ターゲット プロパティ、バインディング ソース、およびで使用するバインディング ソースの値へのパス。 これらのデータ バインディング概念の詳細については、次を参照してください。[データ バインディングの概要](~/add/includes/ajax-current-ext-md.md)です。       バインドするソースの値を指定するパス プロパティを使用して: - 最も簡単な場合は、プロパティの値などを使用して、バインディングのソース オブジェクトのプロパティの名前は、パス`Path=PropertyName`です。      の使用されるような構文で指定できるプロパティのサブプロパティ[!INCLUDE[TLA#tla_cshrp](~/add/includes/tlasharptla-cshrp-md.md)]します。 句のインスタンス、`Path=ShoppingCart.Order`サブプロパティにバインディングを設定`Order`オブジェクトまたはプロパティの`ShoppingCart`します。      添付プロパティをバインドするには、添付プロパティを囲むかっこを配置します。 例については、添付プロパティをバインドする<xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>、構文は`Path=(DockPanel.Dock)`</xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>。      にプロパティのインデクサーは、インデクサーが適用されているプロパティ名の後ろに角かっこ内で指定できます。 句のインスタンス、`Path=ShoppingCart[0]`リテラル文字列「0」を処理するプロパティの内部インデックスの作成方法に対応するインデックスにバインディングを設定します。 複数のインデクサーもサポートされます。      インデクサーとサブプロパティを混在させることができます、`Path`句。 たとえば、 `Path=ShoppingCart.ShippingInfo[MailingAddress,Street].` - 内部インデクサー コンマ (,) で区切られた複数のインデクサー パラメーターを持つことができます。 各パラメーターの型は、かっこで指定できます。 たとえば、ことが`Path=&quot;[(sys:Int32)42,(sys:Int32)24]&quot;`ここで、`sys`にマップされて、`System`名前空間。      -ソースがコレクション ビューの場合、現在の項目は、スラッシュ (/) を指定できます。 たとえば、この句`Path=/`ビューの現在のアイテムにバインディングを設定します。 ソースがコレクションである場合は、この構文は、既定のコレクション ビューの現在の項目を指定します。      のプロパティは、コレクションを走査するプロパティ名前とスラッシュを結合できます。 たとえば、`Path=/Offices/ManagerName`を含むソース コレクションの現在の項目を指定します、`Offices`コレクションであるプロパティ。 現在のアイテムが格納しているオブジェクト、`ManagerName`プロパティです。      -必要に応じて、現在のソースにバインドする、ピリオド (.) のパスを使用できます。 たとえば、`Text=&quot;{Binding}&quot;`は等価`Text=&quot;{Binding Path=.}&quot;`です。       パスの構文については、次を参照してください。[バインディング宣言の概要](~/add/includes/ajax-current-ext-md.md)または[PropertyPath 構文は XAML](~/add/includes/ajax-current-ext-md.md)です。       [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]バインド」を参照してください、<xref:System.Windows.Data.Binding.XPath%2A>プロパティ</xref:System.Windows.Data.Binding.XPath%2A>。       オブジェクト全体にバインドするには、パス プロパティを指定する必要はありません。 詳細についてを参照してください「を指定する、パスに、値」[データ バインディングの概要](../Topic/Data%20Binding%20Overview.md)です。"
  example:
  - "The following example shows a style trigger that creates a <xref:System.Windows.Controls.ToolTip> that reports a validation error message. The value of the setter binds to the error content of the current <xref:System.Windows.Controls.TextBox> (the <xref:System.Windows.Controls.TextBox> using the style) using the <xref:System.Windows.Data.Binding.RelativeSource%2A> property. For more information on this example, see [How to: Implement Binding Validation](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[BindValidation#5](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#5)]"
  syntax:
    content: public System.Windows.PropertyPath Path { get; set; }
    return:
      type: System.Windows.PropertyPath
      description: "バインディング ソースへのパス。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RelativeSource
  id: RelativeSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RelativeSource
  nameWithType: Binding.RelativeSource
  fullName: System.Windows.Data.Binding.RelativeSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得またはバインディング ターゲットの位置を基準には、その場所を指定して、バインディング ソースを設定します。"
  remarks: "オブジェクトの&1; つのプロパティを同一のオブジェクトの別のプロパティにバインドするか、バインディング、スタイルまたはテンプレートで定義する、このプロパティは使用一般的です。       既定では、バインドがで指定されたデータ コンテキストを継承、`DataContext`いずれかが設定されている場合は、プロパティです。 ただし、RelativeSource プロパティでは、いずれかのソースを明示的に設定することができます、<xref:System.Windows.Data.Binding>し、継承されたデータ コンテキストをオーバーライドします</xref:System.Windows.Data.Binding>。 詳細については、次を参照してください。[する方法: バインド ソースを指定して](~/add/includes/ajax-current-ext-md.md)です。       <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>と<xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName>プロパティも有効にするバインディングのソースの設定を明示的にします</xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName></xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>。 ただし、3 つのプロパティの&1; つだけ<xref:System.Windows.Data.Binding.ElementName%2A>、 <xref:System.Windows.Data.Binding.Source%2A>、RelativeSource は、各バインディングの設定や、競合が発生することができます</xref:System.Windows.Data.Binding.Source%2A></xref:System.Windows.Data.Binding.ElementName%2A>。 このプロパティは、バインディング ソースの競合がある場合に例外をスローします。       [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]についてを参照してください[RelativeSource MarkupExtension](~/add/includes/ajax-current-ext-md.md)です。      <a name=&quot;xamlTextUsage_RelativeSource&quot;></a>## XAML テキストの使用方法"
  example:
  - "The following example shows a style trigger that creates a <xref:System.Windows.Controls.ToolTip> that reports a validation error message. The value of the setter binds to the error content of the current <xref:System.Windows.Controls.TextBox> (the <xref:System.Windows.Controls.TextBox> using the style) using the RelativeSource property. For more information on this example, see [How to: Implement Binding Validation](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[BindValidation#5](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#5)]  \n  \n To see the full example, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)."
  syntax:
    content: public System.Windows.Data.RelativeSource RelativeSource { get; set; }
    return:
      type: System.Windows.Data.RelativeSource
      description: "A <xref href=&quot;System.Windows.Data.RelativeSource&quot;> </xref>オブジェクトを使用するバインディング ソースの相対的な位置を指定します。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.RelativeSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "ハンドラーを削除、<xref:System.Windows.Data.Binding.SourceUpdated>アタッチされるイベント</xref:System.Windows.Data.Binding.SourceUpdated>。"
  remarks: "このメソッドはサポートで添付イベントの使用状況[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>または<xref href=&quot;System.Windows.ContentElement&quot;></xref>イベントをリッスンします。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "削除するハンドラー。"
  overload: System.Windows.Data.Binding.RemoveSourceUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "ハンドラーを削除、<xref:System.Windows.Data.Binding.TargetUpdated>アタッチされるイベント</xref:System.Windows.Data.Binding.TargetUpdated>。"
  remarks: "このメソッドはサポートで添付イベントの使用状況[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。"
  syntax:
    content: public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>または<xref href=&quot;System.Windows.ContentElement&quot;></xref>イベントをリッスンします。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "削除するハンドラー。"
  overload: System.Windows.Data.Binding.RemoveTargetUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  id: SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  nameWithType: Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  fullName: System.Windows.Data.Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "指定した要素にアタッチされているバインドによって使用される名前空間マネージャー オブジェクトを設定します。"
  remarks: "このメソッドの添付プロパティの使用をサポートする、<xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>添付プロパティ</xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>。"
  syntax:
    content: public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "名前空間の情報を取得するオブジェクト。"
    - id: value
      type: System.Xml.XmlNamespaceManager
      description: "&lt;Xref:System.Xml.XmlNamespaceManager?displayProperty=fullName&gt;渡された要素で名前空間の評価に使用します。"
  overload: System.Windows.Data.Binding.SetXmlNamespaceManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>target</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializePath
  id: ShouldSerializePath
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializePath()
  nameWithType: Binding.ShouldSerializePath()
  fullName: System.Windows.Data.Binding.ShouldSerializePath()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "示すかどうか、<xref:System.Windows.Data.Binding.Path*>プロパティを永続化する必要があります</xref:System.Windows.Data.Binding.Path*>。"
  remarks: "これは、`ShouldSerialize`ためメソッドが用意されて、<xref:System.Windows.Data.Binding.Path%2A>プロパティには、単純な既定値にありません</xref:System.Windows.Data.Binding.Path%2A>。 このメソッドは、既定値から、プロパティが変更されたかどうかを示します。 か、<xref:System.Windows.Data.Binding>または<xref:System.Windows.Data.Binding>。</xref:System.Windows.Data.Binding>を組み込む独自の開発コントロール</xref:System.Windows.Data.Binding>をデザイナーを開発している場合に通常、このメソッドが呼び出す"
  syntax:
    content: public bool ShouldSerializePath ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティの値が既定から変更された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.ShouldSerializePath*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializeSource
  id: ShouldSerializeSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializeSource()
  nameWithType: Binding.ShouldSerializeSource()
  fullName: System.Windows.Data.Binding.ShouldSerializeSource()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "示すかどうか、<xref:System.Windows.Data.Binding.Source*>プロパティを永続化する必要があります</xref:System.Windows.Data.Binding.Source*>。"
  remarks: "これは、`ShouldSerialize`ためメソッドが用意されて、<xref:System.Windows.Data.Binding.Source%2A>プロパティには、単純な既定値にありません</xref:System.Windows.Data.Binding.Source%2A>。 このメソッドは、既定値から、プロパティが変更されたかどうかを示します。 か、<xref:System.Windows.Data.Binding>または<xref:System.Windows.Data.Binding>。</xref:System.Windows.Data.Binding>を組み込む独自の開発コントロール</xref:System.Windows.Data.Binding>をデザイナーを開発している場合に通常、このメソッドが呼び出す"
  syntax:
    content: public bool ShouldSerializeSource ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティの値が既定から変更された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.ShouldSerializeSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules
  id: ShouldSerializeValidationRules
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializeValidationRules()
  nameWithType: Binding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.Binding.ShouldSerializeValidationRules()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "示すかどうか、<xref:System.Windows.Data.Binding.ValidationRules*>プロパティを永続化する必要があります</xref:System.Windows.Data.Binding.ValidationRules*>。"
  remarks: "これは、`ShouldSerialize`ためメソッドが用意されて、<xref:System.Windows.Data.Binding.ValidationRules%2A>プロパティには、単純な既定値にありません</xref:System.Windows.Data.Binding.ValidationRules%2A>。 このメソッドは、既定値から、プロパティが変更されたかどうかを示します。 か、<xref:System.Windows.Data.Binding>または<xref:System.Windows.Data.Binding>。</xref:System.Windows.Data.Binding>を組み込む独自の開発コントロール</xref:System.Windows.Data.Binding>をデザイナーを開発している場合に通常、このメソッドが呼び出す"
  syntax:
    content: public bool ShouldSerializeValidationRules ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティの値が既定から変更された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.ShouldSerializeValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Source
  id: Source
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Source
  nameWithType: Binding.Source
  fullName: System.Windows.Data.Binding.Source
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または、バインディング ソースとして使用するオブジェクトを設定します。"
  remarks: "既定では、バインドがで指定されたデータ コンテキストを継承、`DataContext`いずれかが設定されている場合は、プロパティです。 ただし、ソース プロパティでは、いずれかのソースを明示的に設定することができます、<xref:System.Windows.Data.Binding>し、継承されたデータ コンテキストをオーバーライドします</xref:System.Windows.Data.Binding>。 いくつかのプロパティが、同じデータ コンテキストを継承するスコープを確立するの機能を必要がない場合の代わりに、ソース プロパティを使用することができます、`DataContext`プロパティです。       <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>と<xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName>プロパティも有効にするバインディングのソースの設定を明示的にします</xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName></xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>。 ただし、3 つのプロパティの&1; つだけ<xref:System.Windows.Data.Binding.ElementName%2A>、ソース、および<xref:System.Windows.Data.Binding.RelativeSource%2A>、くださいセットごとにバインドする、または競合が発生することができます</xref:System.Windows.Data.Binding.RelativeSource%2A></xref:System.Windows.Data.Binding.ElementName%2A>。 このプロパティは、バインディング ソースの競合がある場合に例外をスローします。       このプロパティをクリアするには、設定<xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>。</xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>      <a name=&quot;xamlAttributeUsage_Source&quot;></a>## XAML 属性の使用```   <object Source=&quot;object&quot;/>   ``` <a name=&quot;xamlValues_Source&quot;> </a> ## XAML 値*オブジェクト*既存のオブジェクト。       既存のオブジェクトを参照を使用して、 [StaticResource マークアップ拡張機能](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "In this example, you have a `Person` object with a string property named `PersonName`. The `Person` object is defined in the namespace called `SDKSample`.  \n  \n The following example instantiates the `Person` object with a `PersonName` property value of `Joe`. This is done in the `Resources` section and assigned an `x:Key`.  \n  \n [!code-xml[SimpleBinding#Instantiation](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#instantiation)]  \n[!code-xml[SimpleBinding#2](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#2)]  \n[!code-xml[SimpleBinding#EndWindow](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#endwindow)]  \n  \n To bind to the `PersonName` property you would do the following:  \n  \n [!code-xml[SimpleBinding#BDO1](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#bdo1)]  \n  \n As a result, the <xref:System.Windows.Controls.TextBlock> appears with the value \"Joe\".  \n  \n In the following example, the Source values of the <xref:System.Windows.Data.Binding> objects are set to the `static` property <xref:System.Windows.Application.Current%2A?displayProperty=fullName>:  \n  \n [!code-xml[DataBindingLab#ComboBoxMultiBinding](~/add/codesnippet/xaml/DataBindingLab/AddProductWindow.xaml#comboboxmultibinding)]  \n  \n For the full example, see [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703)."
  syntax:
    content: public object Source { get; set; }
    return:
      type: System.Object
      description: "バインディング ソースとして使用するオブジェクト。"
  overload: System.Windows.Data.Binding.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.SourceUpdatedEvent
  id: SourceUpdatedEvent
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: SourceUpdatedEvent
  nameWithType: Binding.SourceUpdatedEvent
  fullName: System.Windows.Data.Binding.SourceUpdatedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "識別、<xref:System.Windows.Data.Binding.SourceUpdated>アタッチされるイベント</xref:System.Windows.Data.Binding.SourceUpdated>。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.TargetUpdatedEvent
  id: TargetUpdatedEvent
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: TargetUpdatedEvent
  nameWithType: Binding.TargetUpdatedEvent
  fullName: System.Windows.Data.Binding.TargetUpdatedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "識別、<xref:System.Windows.Data.Binding.TargetUpdated>アタッチされるイベント</xref:System.Windows.Data.Binding.TargetUpdated>。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  id: UpdateSourceExceptionFilter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または、バインディング ソースの値の更新中にバインディング エンジンが検出した例外を処理するためのカスタム ロジックの提供に使用できるハンドラーを設定します。 これは該当するは、関連付けられている場合のみ、 <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>バインディングを使用します。"
  remarks: "<xref:System.Windows.Controls.ExceptionValidationRule>バインディング ソース プロパティの更新中にスローされる例外をチェックする組み込みの検証規則が</xref:System.Windows.Controls.ExceptionValidationRule>。 関連付けられている場合、<xref:System.Windows.Controls.ExceptionValidationRule>で、<xref:System.Windows.Data.Binding>オブジェクト、このプロパティを使用してこれらの例外を処理するためのカスタム ロジックを提供するハンドラーを設定することができます</xref:System.Windows.Data.Binding></xref:System.Windows.Controls.ExceptionValidationRule>。 UpdateSourceExceptionFilter がで指定されていない場合、 <xref:System.Windows.Data.Binding>、バインド エンジンによって作成、<xref:System.Windows.Controls.ValidationError>例外を使用し、それを追加、<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>バインドされている要素のコレクション</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName></xref:System.Windows.Controls.ValidationError></xref:System.Windows.Data.Binding>。"
  example:
  - "The <xref:System.Windows.Controls.TextBox.Text%2A> property of the following <xref:System.Windows.Controls.TextBox> is data-bound to a source property `Age3` that is of type `int`. The <xref:System.Windows.Controls.ExceptionValidationRule> checks for exceptions that are thrown during the update of the source property (such as when the user enters a value that cannot be converted to an integer).  \n  \n [!code-xml[BindValidation#tbExceptionFilter](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#tbexceptionfilter)]  \n  \n You can provide custom logic to handle those exceptions. The following example shows how to use the UpdateSourceExceptionFilter property to set an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n [!code-cs[BindValidation#filtercallback](~/add/codesnippet/csharp/BindingValidation/Window1.xaml.cs#filtercallback)]  \n  \n The following is an example implementation of an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n [!code-cs[BindValidation#Handler](~/add/codesnippet/csharp/BindingValidation/Window1.xaml.cs#handler)]  \n  \n The <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> can also return `null`, the exception itself, or a <xref:System.Windows.Controls.ValidationError>. For more information, see <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n For the complete sample, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)."
  syntax:
    content: public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceExceptionFilterCallback
      description: "バインディング ソースの値の更新中にバインディング エンジンが検出した例外を処理するためのカスタム ロジックを提供するメソッド。"
  overload: System.Windows.Data.Binding.UpdateSourceExceptionFilter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.UpdateSourceTrigger
  id: UpdateSourceTrigger
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
  fullName: System.Windows.Data.Binding.UpdateSourceTrigger
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または、バインディング ソースを更新するタイミングを決定する値を設定します。"
  remarks: "バインドを<xref:System.Windows.Data.BindingMode>または<xref:System.Windows.Data.BindingMode>ターゲット プロパティの変更をリッスンし、それらをソースに反映されます</xref:System.Windows.Data.BindingMode></xref:System.Windows.Data.BindingMode>。 これは、ソースの更新と呼ばれます。 通常、これらの更新プログラムは、ターゲット プロパティが変更されるたびに発生します。 これは、チェック ボックスおよびその他の単純なコントロールの問題が、通常ありませんテキスト フィールドに対する適切です。 すべてキーストロークにパフォーマンスが低下することができ、backspace キーし、新しい値をコミットする前に入力ミスを修正する通常の営業案件のユーザーを拒否に更新しています。 したがって、UpdateSourceTrigger の既定値、<xref:System.Windows.Controls.TextBox.Text%2A>プロパティは<xref:System.Windows.Data.UpdateSourceTrigger>および not <xref:System.Windows.Data.UpdateSourceTrigger>.</xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Controls.TextBox.Text%2A>       UpdateSourceTrigger 値を設定する場合<xref:System.Windows.Data.UpdateSourceTrigger>、呼び出す必要があります、<xref:System.Windows.Data.BindingExpression.UpdateSource%2A>メソッドまたは変更がソースに反映されません</xref:System.Windows.Data.BindingExpression.UpdateSource%2A></xref:System.Windows.Data.UpdateSourceTrigger>。"
  syntax:
    content: public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceTrigger
      description: "1 つ、 <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>値。 既定値は<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>、既定値が返されます<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>ターゲット依存関係プロパティの値。 ただし、ほとんどの依存関係プロパティの既定値は<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>中、 <> </> *> プロパティの既定値を持つ<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>です。     依存関係プロパティの既定 UpdateSourceTrigger 値を決定するプログラムによる方法のプロパティを使用して、プロパティ メタデータを取得する<> *> の値を確認し、<xref:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*>プロパティ</xref:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*>。"
  overload: System.Windows.Data.Binding.UpdateSourceTrigger*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors
  id: ValidatesOnDataErrors
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または設定を含めるかどうかを示す値、 <xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;></xref>です。"
  remarks: "このプロパティを設定すると、使用する代わりに、<xref:System.Windows.Controls.DataErrorValidationRule>要素に明示的にします</xref:System.Windows.Controls.DataErrorValidationRule>。 <xref:System.Windows.Controls.DataErrorValidationRule>によって発生するエラーをチェックする組み込みの検証規則は、<xref:System.ComponentModel.IDataErrorInfo>ソース オブジェクトの実装</xref:System.ComponentModel.IDataErrorInfo></xref:System.Windows.Controls.DataErrorValidationRule>。 バインディング エンジンが作成する場合は、エラーが発生すると、 <xref:System.Windows.Controls.ValidationError>、エラーのために追加し、<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>バインドされている要素のコレクション</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName></xref:System.Windows.Controls.ValidationError>。 エラーがないことを別のルールが検証の問題が発生しない限り、この検証フィードバックを消去します。       ValidatesOnDataErrors は、.NET Framework version 3.5 で導入されました。  詳細については、次を参照してください。 [.NET Framework のバージョンとの依存関係](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following examples uses <xref:System.ComponentModel.IDataErrorInfo> and ValidatesOnDataErrors to validate user input in a <xref:System.Windows.Controls.TextBox>. The first example creates a data type that implements <xref:System.ComponentModel.IDataErrorInfo> to report validation errors.  \n  \n [!code-cs[BindingValidationAttributesSnippets#IDataErrorInfoData](~/add/codesnippet/csharp/bindingvalidationattributessnippets/data.cs#idataerrorinfodata)]\n [!code-vb[BindingValidationAttributesSnippets#IDataErrorInfoData](~/add/codesnippet/visualbasic/bindingvalidationattributessnippets/window1.xaml.vb#idataerrorinfodata)]  \n  \n The following example binds the `Age` property to the <xref:System.Windows.Controls.TextBox> and sets ValidatesOnDataErrors to `true` on the <xref:System.Windows.Data.Binding>.  When the user enters an invalid value, a red border appears in the <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Controls.ToolTip> reports the error message.  \n  \n [!code-xml[BindingValidationAttributesSnippets#IDataErrorInfoXaml](~/add/codesnippet/xaml/bindingvalidationattributessnippets/window1.xaml#idataerrorinfoxaml)]"
  syntax:
    content: public bool ValidatesOnDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>含める、 <xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.ValidatesOnDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnExceptions
  id: ValidatesOnExceptions
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
  fullName: System.Windows.Data.Binding.ValidatesOnExceptions
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または設定を含めるかどうかを示す値、 <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;></xref>です。"
  remarks: "このプロパティを設定すると、使用する代わりに、<xref:System.Windows.Controls.ExceptionValidationRule>要素に明示的にします</xref:System.Windows.Controls.ExceptionValidationRule>。 <xref:System.Windows.Controls.ExceptionValidationRule>ソース プロパティの更新中にスローされる例外をチェックする組み込みの検証ルールです</xref:System.Windows.Controls.ExceptionValidationRule>。 バインディング エンジンが作成、例外がスローされた場合、<xref:System.Windows.Controls.ValidationError>例外を使用し、それを追加、<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>バインドされている要素のコレクション</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName></xref:System.Windows.Controls.ValidationError>。 エラーがないことを別のルールが検証の問題が発生しない限り、この検証フィードバックを消去します。       ValidatesOnExceptions は、.NET Framework version 3.5 で導入されました。  詳細については、次を参照してください。 [.NET Framework のバージョンとの依存関係](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following examples use ValidatesOnExceptions to validate user input in a <xref:System.Windows.Controls.TextBox>. The first example creates a data type that throws an exception when the `Age` property is set to an invalid property.  \n  \n [!code-cs[BindingValidationAttributesSnippets#ThrowExceptionData](~/add/codesnippet/csharp/bindingvalidationattributessnippets/data.cs#throwexceptiondata)]\n [!code-vb[BindingValidationAttributesSnippets#ThrowExceptionData](~/add/codesnippet/visualbasic/bindingvalidationattributessnippets/window1.xaml.vb#throwexceptiondata)]  \n  \n The following example binds the `Age` property to the <xref:System.Windows.Controls.TextBox> and sets ValidatesOnExceptions to `true` on the <xref:System.Windows.Data.Binding>. When the user enters an invalid value, a red border appears in the <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Controls.ToolTip> reports the error message.  \n  \n [!code-xml[BindingValidationAttributesSnippets#ThrowExceptionXaml](~/add/codesnippet/xaml/bindingvalidationattributessnippets/window1.xaml#throwexceptionxaml)]"
  syntax:
    content: public bool ValidatesOnExceptions { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>含める、 <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.ValidatesOnExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  id: ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または設定を含めるかどうかを示す値、 <xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;></xref>です。"
  remarks: "ValidatesOnNotifyDataErrors が場合`true`、バインディングが確認され、 <xref:System.ComponentModel.INotifyDataErrorInfo>.</xref:System.ComponentModel.INotifyDataErrorInfo>を実装するデータ ソースで発生したエラーが報告されました"
  syntax:
    content: public bool ValidatesOnNotifyDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>含める、 <xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidationRules
  id: ValidationRules
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidationRules
  nameWithType: Binding.ValidationRules
  fullName: System.Windows.Data.Binding.ValidationRules
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "ユーザー入力の有効性をチェックする規則のコレクションを取得します。"
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]データ バインディング モデルを関連付けることができますを ValidationRules、<xref:System.Windows.Data.Binding>または<xref:System.Windows.Data.MultiBinding>オブジェクト</xref:System.Windows.Data.MultiBinding></xref:System.Windows.Data.Binding>。 派生することによってカスタム ルールを作成することができます、<xref:System.Windows.Controls.ValidationRule>クラスと実装、<xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッドを使用するか、組み込み<xref:System.Windows.Controls.ExceptionValidationRule>、ソースの更新中に例外がある場合、値が無効になります</xref:System.Windows.Controls.ExceptionValidationRule></xref:System.Windows.Controls.ValidationRule.Validate%2A></xref:System.Windows.Controls.ValidationRule>。       バインディング エンジンは、それぞれチェック<xref:System.Windows.Controls.ValidationRule>たびに、入力値 (バインディング ターゲット プロパティの値) が転送されるバインディング ソース プロパティへのバインドに関連付けられている</xref:System.Windows.Controls.ValidationRule>。 検証プロセスの詳細については、データの検証」セクションを参照してください、[データ バインディングの概要](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > でこのプロパティを設定できます[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]に示すコレクション構文を使用してのみか、コレクション オブジェクトにアクセスしてなどのさまざまなメソッドを使用して`Add`です。 コレクション オブジェクトにアクセスするプロパティは、コレクション自体は読み取り/書き込みは読み取り専用です。      <a name=&quot;xamlPropertyElementUsage_ValidationRules&quot;></a>## XAML プロパティ要素の使用```   <object>     <object.ValidationRules>       oneOrMoreValidationRules     </object.ValidationRules>   </object>      ``` <a name=&quot;xamlValues_ValidationRules&quot;> </a> ## XAML 値*oneOrMoreValidationRules*&1; つまたは複数<xref:System.Windows.Controls.ValidationRule>オブジェクト</xref:System.Windows.Controls.ValidationRule>。       を使用できます、<xref:System.Windows.Controls.ExceptionValidationRule>クラスまたは<xref:System.Windows.Controls.ValidationRule>クラス</xref:System.Windows.Controls.ValidationRule>をサブクラス化してカスタム規則を作成</xref:System.Windows.Controls.ExceptionValidationRule>"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule> ValidationRules { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
      description: "コレクション<xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref>オブジェクト。"
  overload: System.Windows.Data.Binding.ValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  id: XmlNamespaceManagerProperty
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: XmlNamespaceManagerProperty
  nameWithType: Binding.XmlNamespaceManagerProperty
  fullName: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "識別、<xref:System.Windows.Data.Binding.XmlNamespaceManager*>添付プロパティ</xref:System.Windows.Data.Binding.XmlNamespaceManager*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.XPath
  id: XPath
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: XPath
  nameWithType: Binding.XPath
  fullName: System.Windows.Data.Binding.XPath
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "取得または設定、 <xref uid=&quot;langword_csharp_XPath&quot; name=&quot;XPath&quot; href=&quot;&quot;> </xref>に値を返すクエリを[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]を使用するソースをバインドします。"
  remarks: "バインディング ソースの場合は[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]の代わりにデータ、[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]オブジェクトの XPath プロパティがの代わりに使用される、<xref:System.Windows.Data.Binding.Path%2A>を使用するバインディング ソースの値にパスを示すプロパティです</xref:System.Windows.Data.Binding.Path%2A>。       XPath プロパティを設定を作成する、`XPath`ノードまたはノードのコレクションを選択するクエリ (<xref:System.Xml.XmlElement?displayProperty=fullName>と<xref:System.Xml.XmlAttribute?displayProperty=fullName>から派生両方<xref:System.Xml.XmlNode?displayProperty=fullName>).</xref:System.Xml.XmlNode?displayProperty=fullName> </xref:System.Xml.XmlAttribute?displayProperty=fullName> </xref:System.Xml.XmlElement?displayProperty=fullName> <xref:System.Xml.XmlNode?displayProperty=fullName>[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]オブジェクトを使用してそのプロパティにバインドすることができます、<xref:System.Windows.Data.Binding.Path%2A>プロパティ</xref:System.Windows.Data.Binding.Path%2A>。</xref:System.Xml.XmlNode?displayProperty=fullName>       <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>メソッド ハンドル、`XPath`式を XPath プロパティから</xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>。 `XPath`関数はサポートされていません。 `XPath`式についてを参照してください、<xref:System.Xml.XmlNode.SelectNodes%2A>ドキュメントと例」のセクションで提供されるいくつかの例です</xref:System.Xml.XmlNode.SelectNodes%2A>。       LINQ to XML オブジェクト<xref:System.Xml.Linq.XDocument>と<xref:System.Xml.Linq.XElement>使用しない`XPath`</xref:System.Xml.Linq.XElement></xref:System.Xml.Linq.XDocument>。 詳細については、「[する方法: XML クエリ結果を XDocument XElement、または LINQ バインド](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public string XPath { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_XPath&quot; name=&quot;XPath&quot; href=&quot;&quot;> </xref>クエリ。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Data.Binding.XPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Data.BindingBase
  isExternal: false
  name: System.Windows.Data.BindingBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Data.Binding.#ctor
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding()
  nameWithType: Binding.Binding()
  fullName: System.Windows.Data.Binding.Binding()
- uid: System.Windows.Data.Binding.#ctor(System.String)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding(String)
  nameWithType: Binding.Binding(String)
  fullName: System.Windows.Data.Binding.Binding(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<DataTransferEventArgs>
  nameWithType: EventHandler<DataTransferEventArgs>
  fullName: System.EventHandler<System.Windows.Data.DataTransferEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Data.DataTransferEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Data.DataTransferEventArgs
    name: DataTransferEventArgs
    nameWithType: DataTransferEventArgs
    fullName: DataTransferEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.AsyncState
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AsyncState
  nameWithType: Binding.AsyncState
  fullName: System.Windows.Data.Binding.AsyncState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Data.Binding.BindsDirectlyToSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
  fullName: System.Windows.Data.Binding.BindsDirectlyToSource
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Data.Binding.Converter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Converter
  nameWithType: Binding.Converter
  fullName: System.Windows.Data.Binding.Converter
- uid: System.Windows.Data.IValueConverter
  parent: System.Windows.Data
  isExternal: false
  name: IValueConverter
  nameWithType: IValueConverter
  fullName: System.Windows.Data.IValueConverter
- uid: System.Windows.Data.Binding.ConverterCulture
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
  fullName: System.Windows.Data.Binding.ConverterCulture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Data.Binding.ConverterParameter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
  fullName: System.Windows.Data.Binding.ConverterParameter
- uid: System.Windows.Data.Binding.DoNothing
  parent: System.Windows.Data.Binding
  isExternal: false
  name: DoNothing
  nameWithType: Binding.DoNothing
  fullName: System.Windows.Data.Binding.DoNothing
- uid: System.Windows.Data.Binding.ElementName
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ElementName
  nameWithType: Binding.ElementName
  fullName: System.Windows.Data.Binding.ElementName
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: GetXmlNamespaceManager(DependencyObject)
  nameWithType: Binding.GetXmlNamespaceManager(DependencyObject)
  fullName: System.Windows.Data.Binding.GetXmlNamespaceManager(DependencyObject)
- uid: System.Xml.XmlNamespaceManager
  parent: System.Xml
  isExternal: true
  name: XmlNamespaceManager
  nameWithType: XmlNamespaceManager
  fullName: System.Xml.XmlNamespaceManager
- uid: System.Windows.Data.Binding.IndexerName
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IndexerName
  nameWithType: Binding.IndexerName
  fullName: System.Windows.Data.Binding.IndexerName
- uid: System.Windows.Data.Binding.IsAsync
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IsAsync
  nameWithType: Binding.IsAsync
  fullName: System.Windows.Data.Binding.IsAsync
- uid: System.Windows.Data.Binding.Mode
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Mode
  nameWithType: Binding.Mode
  fullName: System.Windows.Data.Binding.Mode
- uid: System.Windows.Data.BindingMode
  parent: System.Windows.Data
  isExternal: false
  name: BindingMode
  nameWithType: BindingMode
  fullName: System.Windows.Data.BindingMode
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.Binding.NotifyOnSourceUpdated
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.Binding.NotifyOnTargetUpdated
- uid: System.Windows.Data.Binding.NotifyOnValidationError
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
  fullName: System.Windows.Data.Binding.NotifyOnValidationError
- uid: System.Windows.Data.Binding.Path
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Path
  nameWithType: Binding.Path
  fullName: System.Windows.Data.Binding.Path
- uid: System.Windows.PropertyPath
  parent: System.Windows
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
- uid: System.Windows.Data.Binding.RelativeSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RelativeSource
  nameWithType: Binding.RelativeSource
  fullName: System.Windows.Data.Binding.RelativeSource
- uid: System.Windows.Data.RelativeSource
  parent: System.Windows.Data
  isExternal: false
  name: RelativeSource
  nameWithType: RelativeSource
  fullName: System.Windows.Data.RelativeSource
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  nameWithType: Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  fullName: System.Windows.Data.Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
- uid: System.Windows.Data.Binding.ShouldSerializePath
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializePath()
  nameWithType: Binding.ShouldSerializePath()
  fullName: System.Windows.Data.Binding.ShouldSerializePath()
- uid: System.Windows.Data.Binding.ShouldSerializeSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeSource()
  nameWithType: Binding.ShouldSerializeSource()
  fullName: System.Windows.Data.Binding.ShouldSerializeSource()
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeValidationRules()
  nameWithType: Binding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.Binding.ShouldSerializeValidationRules()
- uid: System.Windows.Data.Binding.Source
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Source
  nameWithType: Binding.Source
  fullName: System.Windows.Data.Binding.Source
- uid: System.Windows.Data.Binding.SourceUpdatedEvent
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SourceUpdatedEvent
  nameWithType: Binding.SourceUpdatedEvent
  fullName: System.Windows.Data.Binding.SourceUpdatedEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Data.Binding.TargetUpdatedEvent
  parent: System.Windows.Data.Binding
  isExternal: false
  name: TargetUpdatedEvent
  nameWithType: Binding.TargetUpdatedEvent
  fullName: System.Windows.Data.Binding.TargetUpdatedEvent
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.Binding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.UpdateSourceExceptionFilterCallback
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceExceptionFilterCallback
  nameWithType: UpdateSourceExceptionFilterCallback
  fullName: System.Windows.Data.UpdateSourceExceptionFilterCallback
- uid: System.Windows.Data.Binding.UpdateSourceTrigger
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
  fullName: System.Windows.Data.Binding.UpdateSourceTrigger
- uid: System.Windows.Data.UpdateSourceTrigger
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: UpdateSourceTrigger
  fullName: System.Windows.Data.UpdateSourceTrigger
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnDataErrors
- uid: System.Windows.Data.Binding.ValidatesOnExceptions
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
  fullName: System.Windows.Data.Binding.ValidatesOnExceptions
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.Binding.ValidationRules
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidationRules
  nameWithType: Binding.ValidationRules
  fullName: System.Windows.Data.Binding.ValidationRules
- uid: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ValidationRule>
  nameWithType: Collection<ValidationRule>
  fullName: System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Windows.Controls.ValidationRule>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.ValidationRule
    name: ValidationRule
    nameWithType: ValidationRule
    fullName: ValidationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XmlNamespaceManagerProperty
  nameWithType: Binding.XmlNamespaceManagerProperty
  fullName: System.Windows.Data.Binding.XmlNamespaceManagerProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Data.Binding.XPath
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XPath
  nameWithType: Binding.XPath
  fullName: System.Windows.Data.Binding.XPath
- uid: System.Windows.Data.Binding.#ctor*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding
  nameWithType: Binding.Binding
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddSourceUpdatedHandler
  nameWithType: Binding.AddSourceUpdatedHandler
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddTargetUpdatedHandler
  nameWithType: Binding.AddTargetUpdatedHandler
- uid: System.Windows.Data.Binding.AsyncState*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AsyncState
  nameWithType: Binding.AsyncState
- uid: System.Windows.Data.Binding.BindsDirectlyToSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
- uid: System.Windows.Data.Binding.Converter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Converter
  nameWithType: Binding.Converter
- uid: System.Windows.Data.Binding.ConverterCulture*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
- uid: System.Windows.Data.Binding.ConverterParameter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
- uid: System.Windows.Data.Binding.ElementName*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ElementName
  nameWithType: Binding.ElementName
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: GetXmlNamespaceManager
  nameWithType: Binding.GetXmlNamespaceManager
- uid: System.Windows.Data.Binding.IsAsync*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IsAsync
  nameWithType: Binding.IsAsync
- uid: System.Windows.Data.Binding.Mode*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Mode
  nameWithType: Binding.Mode
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
- uid: System.Windows.Data.Binding.NotifyOnValidationError*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
- uid: System.Windows.Data.Binding.Path*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Path
  nameWithType: Binding.Path
- uid: System.Windows.Data.Binding.RelativeSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RelativeSource
  nameWithType: Binding.RelativeSource
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveSourceUpdatedHandler
  nameWithType: Binding.RemoveSourceUpdatedHandler
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveTargetUpdatedHandler
  nameWithType: Binding.RemoveTargetUpdatedHandler
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SetXmlNamespaceManager
  nameWithType: Binding.SetXmlNamespaceManager
- uid: System.Windows.Data.Binding.ShouldSerializePath*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializePath
  nameWithType: Binding.ShouldSerializePath
- uid: System.Windows.Data.Binding.ShouldSerializeSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeSource
  nameWithType: Binding.ShouldSerializeSource
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeValidationRules
  nameWithType: Binding.ShouldSerializeValidationRules
- uid: System.Windows.Data.Binding.Source*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Source
  nameWithType: Binding.Source
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.Binding.UpdateSourceTrigger*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
- uid: System.Windows.Data.Binding.ValidatesOnExceptions*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.Binding.ValidationRules*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidationRules
  nameWithType: Binding.ValidationRules
- uid: System.Windows.Data.Binding.XPath*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XPath
  nameWithType: Binding.XPath
