### YamlMime:ManagedReference
items:
- uid: System.Windows.ValueSource
  id: ValueSource
  children:
  - System.Windows.ValueSource.BaseValueSource
  - System.Windows.ValueSource.Equals(System.Object)
  - System.Windows.ValueSource.GetHashCode
  - System.Windows.ValueSource.IsAnimated
  - System.Windows.ValueSource.IsCoerced
  - System.Windows.ValueSource.IsCurrent
  - System.Windows.ValueSource.IsExpression
  - System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)
  - System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)
  langs:
  - csharp
  name: ValueSource
  nameWithType: ValueSource
  fullName: System.Windows.ValueSource
  type: Struct
  summary: "返される情報を報告&lt;xref:System.Windows.DependencyPropertyHelper.GetValueSource%2A?displayProperty=fullName&gt;です。"
  remarks: "ValueSource を転送する情報の大部分が含まれている、<xref:System.Windows.ValueSource.BaseValueSource%2A>プロパティ</xref:System.Windows.ValueSource.BaseValueSource%2A>。 このプロパティには、全体の正確に&1; つの側面を指定する列挙値が含まれています。[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]は依存関係プロパティの有効な値をプロパティ システムです。       ベースの値だけでなく、他の依存関係プロパティの値に関する興味深い可能性のある情報、かどうか、値をアニメーション化されているが、値に (など、バインディング、または動的リソース参照) 式が含まれるかどうか。 この情報は、によって報告される<xref:System.Windows.ValueSource.IsAnimated%2A>と<xref:System.Windows.ValueSource.IsExpression%2A>それぞれ</xref:System.Windows.ValueSource.IsExpression%2A></xref:System.Windows.ValueSource.IsAnimated%2A>。 強制型変換がプロパティ値で動作している場合プロパティは、目的の値を保持します。 また、プロパティの値は、特定の型変換の制約が変更されたか、リフト場合その目的の値に到達しようとしています。 その目的の値ではない資格情報を持つプロパティをレポートで<xref:System.Windows.ValueSource.IsCoerced%2A>は`true`</xref:System.Windows.ValueSource.IsCoerced%2A>。"
  syntax:
    content: public struct ValueSource
  inheritance:
  - System.ValueType
  implements: []
  platform:
  - net462
- uid: System.Windows.ValueSource.BaseValueSource
  id: BaseValueSource
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: BaseValueSource
  nameWithType: ValueSource.BaseValueSource
  fullName: System.Windows.ValueSource.BaseValueSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "値を取得、 <xref href=&quot;System.Windows.BaseValueSource&quot;> </xref>列挙体は、値を持つ依存関係プロパティ システムを提供するソースをレポートします。"
  remarks: "ベース値は、強制またはアニメーションがプロパティに動作している場合、有効な値ではありません。 確認<xref:System.Windows.ValueSource.IsAnimated%2A>と<xref:System.Windows.ValueSource.IsCoerced%2A>底の値が有効な値であるかどうかを判別するかどうか</xref:System.Windows.ValueSource.IsCoerced%2A></xref:System.Windows.ValueSource.IsAnimated%2A>。       確認することも<xref:System.Windows.ValueSource.IsExpression%2A>に式の外に底の値が評価されたかどうかを参照してください</xref:System.Windows.ValueSource.IsExpression%2A>。"
  syntax:
    content: public System.Windows.BaseValueSource BaseValueSource { get; }
    return:
      type: System.Windows.BaseValueSource
      description: "列挙体の値です。"
  overload: System.Windows.ValueSource.BaseValueSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ValueSource.Equals(Object)
  fullName: System.Windows.ValueSource.Equals(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "示す値を返すかどうかこの<xref href=&quot;System.Windows.ValueSource&quot;></xref>が指定したオブジェクトと等しい。"
  remarks: "この実装は、それぞれのそれぞれのプロパティ値に基づいて、値の等価性をサポートしています<xref:System.Windows.ValueSource>構造</xref:System.Windows.ValueSource>。"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "これと比較するオブジェクト<xref href=&quot;System.Windows.ValueSource&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定されたオブジェクトが現在に等しい場合<xref href=&quot;System.Windows.ValueSource&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.ValueSource.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.GetHashCode
  id: GetHashCode
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ValueSource.GetHashCode()
  fullName: System.Windows.ValueSource.GetHashCode()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "このハッシュ コードを返します<xref href=&quot;System.Windows.ValueSource&quot;></xref>です。"
  remarks: "このハッシュ コードがに基づいて、<xref:System.Windows.ValueSource.BaseValueSource%2A>値</xref:System.Windows.ValueSource.BaseValueSource%2A>。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "32 ビット符号なし整数のハッシュ コード。"
  overload: System.Windows.ValueSource.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.IsAnimated
  id: IsAnimated
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: IsAnimated
  nameWithType: ValueSource.IsAnimated
  fullName: System.Windows.ValueSource.IsAnimated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "プロパティをアニメーション化するかどうかを示す値を取得します。"
  remarks: "によって現在アニメーション実行中は、任意のプロパティのソースが報告された<xref:System.Windows.ValueSource.BaseValueSource%2A>に底の値より高いの依存関係プロパティの優先順位でアニメーションが動作するためにすぐに重要ではありません</xref:System.Windows.ValueSource.BaseValueSource%2A>。 優先順位およびアニメーションの詳細については、次を参照してください。[依存関係プロパティの値の優先順位](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public bool IsAnimated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティをアニメーション化します場合。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.ValueSource.IsAnimated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.IsCoerced
  id: IsCoerced
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: IsCoerced
  nameWithType: ValueSource.IsCoerced
  fullName: System.Windows.ValueSource.IsCoerced
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "この値に起因するかどうかを示す値を取得、 <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref>実装の依存関係プロパティに適用します。"
  remarks: "強制型変換がプロパティ値で動作している場合は、プロパティは、目的の値を保持し、特定の型変換の制約が変更されたか、リフト場合その目的の値に到達するプロパティの値を試みます。 その目的の値ではない資格情報を持つプロパティがあると報告 IsCoerced`true`です。       強制型変換では、ベースの値より高い優先順位では機能し、厳密には基本の値を設定する方法に関係するオブジェクトではありません。 値ではなく、このプロパティでに強制的に変換中の状態を報告するため、<xref:System.Windows.BaseValueSource>列挙体です</xref:System.Windows.BaseValueSource>。 強制変換、ベース値、および優先順位の詳細については、次を参照してください。[の依存関係プロパティの値の優先順位](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public bool IsCoerced { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>値が結果の場合、 <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> ; 依存関係プロパティに適用される実装それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.ValueSource.IsCoerced*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.IsCurrent
  id: IsCurrent
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: IsCurrent
  nameWithType: ValueSource.IsCurrent
  fullName: System.Windows.ValueSource.IsCurrent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "によって、値が設定されたかどうかを取得、<xref:System.Windows.DependencyObject.SetCurrentValue*>メソッド</xref:System.Windows.DependencyObject.SetCurrentValue*>。"
  syntax:
    content: public bool IsCurrent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>によって、値が設定された場合、<xref:System.Windows.DependencyObject.SetCurrentValue*>メソッド以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Windows.DependencyObject.SetCurrentValue*> 。"
  overload: System.Windows.ValueSource.IsCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.IsExpression
  id: IsExpression
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: IsExpression
  nameWithType: ValueSource.IsExpression
  fullName: System.Windows.ValueSource.IsExpression
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "この値が評価された式から発生したかどうかを示す値を取得します。 可能性があります、 <xref href=&quot;System.Windows.Data.BindingExpression&quot;> </xref>バインディング、またはサポートするよう内部式をサポートする、 [DynamicResource マークアップ拡張機能](~/add/includes/ajax-current-ext-md.md)します。"
  remarks: "評価された式は、条件を設定するには、ここで、式が適用される、 <xref:System.Windows.ValueSource.BaseValueSource%2A>。</xref:System.Windows.ValueSource.BaseValueSource%2A>値として特定の基本値も報告されます。 <xref:System.Windows.ValueSource.BaseValueSource%2A>はまだ非常に関連する任意のプロパティのある場所 IsExpression `true`</xref:System.Windows.ValueSource.BaseValueSource%2A> 。 値が式によって生成されたものかどうかを知ることは、値が設定されていない場合、直接など、テンプレート、または継承されたプロパティ値に特に役立ちます。       式の評価が失敗する場合 (バインドが失敗しました。 その名前のリソースが見つかりません)、値が取得されますシステムでは、プロパティ、最も可能性の高いいくつかの他の参加者から既定値です。 <xref:System.Windows.ValueSource.BaseValueSource%2A>。</xref:System.Windows.ValueSource.BaseValueSource%2A>そのソースがレポートされます。 失敗した式の評価が返されます`false`IsExpression 用です。"
  syntax:
    content: public bool IsExpression { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>評価された式から値が付属している場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.ValueSource.IsExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)
  id: op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: op_Equality(ValueSource,ValueSource)
  nameWithType: ValueSource.op_Equality(ValueSource,ValueSource)
  fullName: System.Windows.ValueSource.op_Equality(ValueSource,ValueSource)
  type: Operator
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "2 つあるかどうかを決定<xref href=&quot;System.Windows.ValueSource&quot;></xref>インスタンスが同じ値を設定します。"
  remarks: "この実装を呼び出す<xref:System.Windows.ValueSource.Equals%2A>、値の<xref:System.Windows.ValueSource>.</xref:System.Windows.ValueSource>のすべてのプロパティに基づいて、等価性のサポートと</xref:System.Windows.ValueSource.Equals%2A>"
  syntax:
    content: public static bool op_Equality (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);
    parameters:
    - id: vs1
      type: System.Windows.ValueSource
      description: "最初の<xref href=&quot;System.Windows.ValueSource&quot;></xref>と比較します。"
    - id: vs2
      type: System.Windows.ValueSource
      description: "2 番目<xref href=&quot;System.Windows.ValueSource&quot;></xref>を比較します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、2 つ<xref href=&quot;System.Windows.ValueSource&quot;></xref>インスタンスと等価である、それ以外の場合は、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.ValueSource.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)
  id: op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)
  parent: System.Windows.ValueSource
  langs:
  - csharp
  name: op_Inequality(ValueSource,ValueSource)
  nameWithType: ValueSource.op_Inequality(ValueSource,ValueSource)
  fullName: System.Windows.ValueSource.op_Inequality(ValueSource,ValueSource)
  type: Operator
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "2 つあるかどうかを決定<xref href=&quot;System.Windows.ValueSource&quot;></xref>インスタンスには、同じの値はありません。"
  remarks: "この実装は<xref:System.Windows.ValueSource.Equals%2A>、その否定、および<xref:System.Windows.ValueSource>。</xref:System.Windows.ValueSource>のすべてのプロパティに基づくサポート値の等価性の取得</xref:System.Windows.ValueSource.Equals%2A>"
  syntax:
    content: public static bool op_Inequality (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);
    parameters:
    - id: vs1
      type: System.Windows.ValueSource
      description: "最初の<xref href=&quot;System.Windows.ValueSource&quot;></xref>と比較します。"
    - id: vs2
      type: System.Windows.ValueSource
      description: "2 番目<xref href=&quot;System.Windows.ValueSource&quot;></xref>を比較します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、2 つ<xref href=&quot;System.Windows.ValueSource&quot;></xref>と等価である、それ以外の場合、インスタンスがない<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.ValueSource.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Windows.ValueSource.BaseValueSource
  parent: System.Windows.ValueSource
  isExternal: false
  name: BaseValueSource
  nameWithType: ValueSource.BaseValueSource
  fullName: System.Windows.ValueSource.BaseValueSource
- uid: System.Windows.BaseValueSource
  parent: System.Windows
  isExternal: false
  name: BaseValueSource
  nameWithType: BaseValueSource
  fullName: System.Windows.BaseValueSource
- uid: System.Windows.ValueSource.Equals(System.Object)
  parent: System.Windows.ValueSource
  isExternal: false
  name: Equals(Object)
  nameWithType: ValueSource.Equals(Object)
  fullName: System.Windows.ValueSource.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.ValueSource.GetHashCode
  parent: System.Windows.ValueSource
  isExternal: false
  name: GetHashCode()
  nameWithType: ValueSource.GetHashCode()
  fullName: System.Windows.ValueSource.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.ValueSource.IsAnimated
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsAnimated
  nameWithType: ValueSource.IsAnimated
  fullName: System.Windows.ValueSource.IsAnimated
- uid: System.Windows.ValueSource.IsCoerced
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsCoerced
  nameWithType: ValueSource.IsCoerced
  fullName: System.Windows.ValueSource.IsCoerced
- uid: System.Windows.ValueSource.IsCurrent
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsCurrent
  nameWithType: ValueSource.IsCurrent
  fullName: System.Windows.ValueSource.IsCurrent
- uid: System.Windows.ValueSource.IsExpression
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsExpression
  nameWithType: ValueSource.IsExpression
  fullName: System.Windows.ValueSource.IsExpression
- uid: System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)
  parent: System.Windows.ValueSource
  isExternal: false
  name: op_Equality(ValueSource,ValueSource)
  nameWithType: ValueSource.op_Equality(ValueSource,ValueSource)
  fullName: System.Windows.ValueSource.op_Equality(ValueSource,ValueSource)
- uid: System.Windows.ValueSource
  parent: System.Windows
  isExternal: false
  name: ValueSource
  nameWithType: ValueSource
  fullName: System.Windows.ValueSource
- uid: System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)
  parent: System.Windows.ValueSource
  isExternal: false
  name: op_Inequality(ValueSource,ValueSource)
  nameWithType: ValueSource.op_Inequality(ValueSource,ValueSource)
  fullName: System.Windows.ValueSource.op_Inequality(ValueSource,ValueSource)
- uid: System.Windows.ValueSource.BaseValueSource*
  parent: System.Windows.ValueSource
  isExternal: false
  name: BaseValueSource
  nameWithType: ValueSource.BaseValueSource
- uid: System.Windows.ValueSource.Equals*
  parent: System.Windows.ValueSource
  isExternal: false
  name: Equals
  nameWithType: ValueSource.Equals
- uid: System.Windows.ValueSource.GetHashCode*
  parent: System.Windows.ValueSource
  isExternal: false
  name: GetHashCode
  nameWithType: ValueSource.GetHashCode
- uid: System.Windows.ValueSource.IsAnimated*
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsAnimated
  nameWithType: ValueSource.IsAnimated
- uid: System.Windows.ValueSource.IsCoerced*
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsCoerced
  nameWithType: ValueSource.IsCoerced
- uid: System.Windows.ValueSource.IsCurrent*
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsCurrent
  nameWithType: ValueSource.IsCurrent
- uid: System.Windows.ValueSource.IsExpression*
  parent: System.Windows.ValueSource
  isExternal: false
  name: IsExpression
  nameWithType: ValueSource.IsExpression
- uid: System.Windows.ValueSource.op_Equality*
  parent: System.Windows.ValueSource
  isExternal: false
  name: op_Equality
  nameWithType: ValueSource.op_Equality
- uid: System.Windows.ValueSource.op_Inequality*
  parent: System.Windows.ValueSource
  isExternal: false
  name: op_Inequality
  nameWithType: ValueSource.op_Inequality
