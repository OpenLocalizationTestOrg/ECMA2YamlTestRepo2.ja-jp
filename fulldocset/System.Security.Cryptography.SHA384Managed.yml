### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.SHA384Managed
  id: SHA384Managed
  children:
  - System.Security.Cryptography.SHA384Managed.#ctor
  - System.Security.Cryptography.SHA384Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.SHA384Managed.HashFinal
  - System.Security.Cryptography.SHA384Managed.Initialize
  langs:
  - csharp
  name: SHA384Managed
  nameWithType: SHA384Managed
  fullName: System.Security.Cryptography.SHA384Managed
  type: Class
  summary: "計算、 <xref href=&quot;System.Security.Cryptography.SHA384&quot;> </xref>マネージ ライブラリを使用して入力データのハッシュ。"
  remarks: "ハッシュは、大量のデータを表す固定サイズの一意の値として使用されます。 対応するデータも一致する場合にのみ&2; 組のデータのハッシュが一致します。 ハッシュで予期しない変更を大規模なデータの結果を少し変更します。       SHA384Managed アルゴリズム ハッシュ サイズは、384 ビットです。"
  example:
  - "The following example computes the SHA384Managed hash for `data` and stores it in `result`. This example assumes that there is a predefined constant `DATA_SIZE`.  \n  \n [!code-cpp[Classic SHA384Managed Example#1](~/add/codesnippet/cpp/t-system.security.crypto_104_1.cpp)]\n [!code-cs[Classic SHA384Managed Example#1](~/add/codesnippet/csharp/t-system.security.crypto_104_1.cs)]\n [!code-vb[Classic SHA384Managed Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_104_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SHA384Managed : System.Security.Cryptography.SHA384
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.SHA384
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.SHA384.Create
  - System.Security.Cryptography.SHA384.Create(System.String)
  platform:
  - net462
- uid: System.Security.Cryptography.SHA384Managed.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.SHA384Managed
  langs:
  - csharp
  name: SHA384Managed()
  nameWithType: SHA384Managed.SHA384Managed()
  fullName: System.Security.Cryptography.SHA384Managed.SHA384Managed()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.SHA384Managed&quot;> </xref>クラスです。"
  remarks: "ハッシュは、大量のデータを表す固定サイズの一意の値として使用されます。 対応するデータも一致する場合にのみ&2; 組のデータのハッシュが一致します。 ハッシュで予期しない変更を大規模なデータの結果を少し変更します。       ハッシュのサイズ、<xref:System.Security.Cryptography.SHA384Managed>アルゴリズムは、384 ビット</xref:System.Security.Cryptography.SHA384Managed>。       **重要な**ローカル セキュリティ ポリシーのいずれかを設定する次のセキュリティを有効にするか、グループ ポリシーの一部として表示される場合、<xref:System.InvalidOperationException>このコンス トラクターを使用しようとする:**システム暗号化: 暗号化、ハッシュ、署名のための使用の FIPS 準拠アルゴリズム**</xref:System.InvalidOperationException>"
  syntax:
    content: public SHA384Managed ();
    parameters: []
  overload: System.Security.Cryptography.SHA384Managed.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "連邦情報処理規格 (FIPS) のセキュリティ設定を有効にします。 この実装は、Windows プラットフォーム FIPS 検証暗号化アルゴリズムの一部ではありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.SHA384Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.SHA384Managed
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: SHA384Managed.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.SHA384Managed.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、ルーティングにオブジェクトに書き込まれたデータ、 <xref href=&quot;System.Security.Cryptography.SHA384Managed&quot;> </xref>ハッシュ アルゴリズム、ハッシュを計算します。"
  remarks: "このメソッドは、アプリケーション コードでは呼び出されません。       この抽象メソッドでは、ハッシュ計算を実行します。 暗号ストリーム オブジェクトに対するすべての書き込みは、このメソッドをデータを通過します。 データの各ブロックに対しては、このメソッドは、データ ストリームの末尾に正しいハッシュ値が返されるために、ハッシュ オブジェクトの状態を更新します。"
  syntax:
    content: protected override void HashCore (byte[] rgb, int ibStart, int cbSize);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "入力データ。"
    - id: ibStart
      type: System.Int32
      description: "データの使用を開始するバイト配列へのオフセット。"
    - id: cbSize
      type: System.Int32
      description: "データとして使用する配列内のバイト数。"
  overload: System.Security.Cryptography.SHA384Managed.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SHA384Managed.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.SHA384Managed
  langs:
  - csharp
  name: HashFinal()
  nameWithType: SHA384Managed.HashFinal()
  fullName: System.Security.Cryptography.SHA384Managed.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、暗号ストリーム オブジェクトによって最後にデータが処理された後、ハッシュ計算を終了します。"
  remarks: "このメソッドは、アプリケーション コードでは呼び出されません。 このメソッドは、任意の部分的な計算を終了し、データ ストリームの正しいハッシュ値を返します。"
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "計算されたハッシュ コード。"
  overload: System.Security.Cryptography.SHA384Managed.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SHA384Managed.Initialize
  id: Initialize
  parent: System.Security.Cryptography.SHA384Managed
  langs:
  - csharp
  name: Initialize()
  nameWithType: SHA384Managed.Initialize()
  fullName: System.Security.Cryptography.SHA384Managed.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "インスタンスを初期化<xref href=&quot;System.Security.Cryptography.SHA384Managed&quot;></xref>です。"
  remarks: "ハッシュは、大量のデータを表す固定サイズの一意の値として使用されます。 対応するデータも一致する場合にのみ&2; 組のデータのハッシュが一致します。 ハッシュで予期しない変更を大規模なデータの結果を少し変更します。       ハッシュのサイズ、<xref:System.Security.Cryptography.SHA384Managed>アルゴリズムは、384 ビット</xref:System.Security.Cryptography.SHA384Managed>。"
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.SHA384Managed.Initialize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.SHA384
  isExternal: false
  name: System.Security.Cryptography.SHA384
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Cryptography.SHA384Managed.#ctor
  parent: System.Security.Cryptography.SHA384Managed
  isExternal: false
  name: SHA384Managed()
  nameWithType: SHA384Managed.SHA384Managed()
  fullName: System.Security.Cryptography.SHA384Managed.SHA384Managed()
- uid: System.Security.Cryptography.SHA384Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.SHA384Managed
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: SHA384Managed.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.SHA384Managed.HashCore(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.SHA384Managed.HashFinal
  parent: System.Security.Cryptography.SHA384Managed
  isExternal: false
  name: HashFinal()
  nameWithType: SHA384Managed.HashFinal()
  fullName: System.Security.Cryptography.SHA384Managed.HashFinal()
- uid: System.Security.Cryptography.SHA384Managed.Initialize
  parent: System.Security.Cryptography.SHA384Managed
  isExternal: false
  name: Initialize()
  nameWithType: SHA384Managed.Initialize()
  fullName: System.Security.Cryptography.SHA384Managed.Initialize()
- uid: System.Security.Cryptography.SHA384Managed.#ctor*
  parent: System.Security.Cryptography.SHA384Managed
  isExternal: false
  name: SHA384Managed
  nameWithType: SHA384Managed.SHA384Managed
- uid: System.Security.Cryptography.SHA384Managed.HashCore*
  parent: System.Security.Cryptography.SHA384Managed
  isExternal: false
  name: HashCore
  nameWithType: SHA384Managed.HashCore
- uid: System.Security.Cryptography.SHA384Managed.HashFinal*
  parent: System.Security.Cryptography.SHA384Managed
  isExternal: false
  name: HashFinal
  nameWithType: SHA384Managed.HashFinal
- uid: System.Security.Cryptography.SHA384Managed.Initialize*
  parent: System.Security.Cryptography.SHA384Managed
  isExternal: false
  name: Initialize
  nameWithType: SHA384Managed.Initialize
