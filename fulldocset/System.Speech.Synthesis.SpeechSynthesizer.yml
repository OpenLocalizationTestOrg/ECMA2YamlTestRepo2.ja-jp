### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.SpeechSynthesizer
  id: SpeechSynthesizer
  children:
  - System.Speech.Synthesis.SpeechSynthesizer.#ctor
  - System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached
  - System.Speech.Synthesis.SpeechSynthesizer.Dispose
  - System.Speech.Synthesis.SpeechSynthesizer.Finalize
  - System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt
  - System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices
  - System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.SpeechSynthesizer.Pause
  - System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached
  - System.Speech.Synthesis.SpeechSynthesizer.Rate
  - System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)
  - System.Speech.Synthesis.SpeechSynthesizer.Resume
  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)
  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)
  - System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)
  - System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)
  - System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted
  - System.Speech.Synthesis.SpeechSynthesizer.State
  - System.Speech.Synthesis.SpeechSynthesizer.StateChanged
  - System.Speech.Synthesis.SpeechSynthesizer.VisemeReached
  - System.Speech.Synthesis.SpeechSynthesizer.Voice
  - System.Speech.Synthesis.SpeechSynthesizer.VoiceChange
  - System.Speech.Synthesis.SpeechSynthesizer.Volume
  langs:
  - csharp
  name: SpeechSynthesizer
  nameWithType: SpeechSynthesizer
  fullName: System.Speech.Synthesis.SpeechSynthesizer
  type: Class
  summary: "インストールされている音声合成エンジンの機能へのアクセスを提供します。"
  remarks: "新しい SpeechSynthesizer オブジェクトを作成するときに、既定のシステムの音声を使用します。 インストールされている音声合成 (音声合成) 声のいずれかを使用する SpeechSynthesizer を構成するのには、使用、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>または<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>。 音声のインストールに関する情報を取得するには<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドと<xref:System.Speech.Synthesis.VoiceInfo>クラス</xref:System.Speech.Synthesis.VoiceInfo></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を使用します。       このクラスには、音声合成の次の側面を制御も用意されています: SpeechSynthesizer オブジェクトの出力を構成すると、使用する、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>、および<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>。      音声を生成するを使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>。 SpeechSynthesizer は、テキストから音声を生成できる、<xref:System.Speech.Synthesis.Prompt>または<xref:System.Speech.Synthesis.PromptBuilder>オブジェクト、またはから[音声合成マークアップ言語 (SSML) バージョン 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.Prompt> 。      -一時停止を再開する音声合成を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A>と<xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A>。      -を追加または削除の辞書を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>と<xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>。 SpeechSynthesizer では、1 つまたは複数の辞書を使用して、単語、発音のガイドです。      、音声出力の配信を変更するには使用、<xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A>と<xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A>プロパティ</xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A>。       SpeechSynthesizer プロンプトの特定の機能を検出したときにイベントを発生させます (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>、および<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>)。</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> </xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> </xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> </xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> 。 開始を報告するイベントを発生させます (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) と終了 (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) の操作を話すとでは、声の変更 (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>).</xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>      > [!NOTE] > 常に呼び出し<xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A>、SpeechSynthesizer への参照を解放する前にします</xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A>。 それ以外の場合、使用されているリソースは解放されません、ガベージ コレクターを呼び出す SpeechSynthesizer オブジェクトのまで<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A>。"
  example:
  - "The following example is part of a console application that initializes a SpeechSynthesizer object and speaks a string.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Speak a string.  \n      synth.Speak(\"This example demonstrates a basic use of Speech Synthesizer\");  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: 'public sealed class SpeechSynthesizer : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.#ctor
  id: '#ctor'
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeechSynthesizer()
  nameWithType: SpeechSynthesizer.SpeechSynthesizer()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeechSynthesizer()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>クラスです。"
  remarks: "初期化するとき、新しい<xref:System.Speech.Synthesis.SpeechSynthesizer>インスタンス、既定のシステムの音声を使用します</xref:System.Speech.Synthesis.SpeechSynthesizer>。 構成するのには<xref:System.Speech.Synthesis.SpeechSynthesizer>使用するにはインストールされている音声合成 (音声合成) 声のいずれかを使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>または<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A></xref:System.Speech.Synthesis.SpeechSynthesizer>。 音声のインストールに関する情報を取得するには<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドと<xref:System.Speech.Synthesis.VoiceInfo>クラス</xref:System.Speech.Synthesis.VoiceInfo></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を使用します。"
  syntax:
    content: public SpeechSynthesizer ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)
  id: AddLexicon(System.Uri,System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: AddLexicon(Uri,String)
  nameWithType: SpeechSynthesizer.AddLexicon(Uri,String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(Uri,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "辞書を追加、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オブジェクト。"
  remarks: "発音辞書は、単語または語句とその発音では、文字およびサポートされている音標文字からの文字で構成のコレクションです。 辞書を使用すると、アプリケーションで特殊なボキャブラリのカスタムの発音を指定します。       外部の辞書ファイルで指定された発音スピーチ シンセサイザーの内部辞書またはディクショナリの発音よりも優先されます。 ただし、発音がのいずれかで作成されるプロンプトにインラインを指定、 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>、 <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>、または<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>メソッドの辞書で指定された発音よりも優先されます</xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A></xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A></xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>。 インライン発音単語の&1; つのみに適用されます。 参照してください[辞書と音声のアルファベット](http://msdn.microsoft.com/en-us/435e3c6f-6834-4e5a-b0f6-c17b2275dc51)詳細についてはします。       <xref:System.Speech.Synthesis.SpeechSynthesizer>オブジェクトには、複数の辞書を追加できます。2 つの値が現在サポートされている、`mediaType`パラメーター:-値`application/pls+xml`に、辞書が準拠していることを示します、[発音辞書の仕様 (PL) バージョン 1.0](http://go.microsoft.com/fwlink/?LinkId=201766)</xref:System.Speech.Synthesis.SpeechSynthesizer> 。 これは、使用する優先形式です。      -値`application/vdn.ms-sapi-lex`辞書形式が圧縮されていない辞書に独自の Microsoft 形式であることを示します。 これは、従来の形式と、上記の PLS フォーマットを使用することをお勧めします。"
  example:
  - "The following example demonstrates the effect of adding and removing a lexicon that contains a custom pronunciation for the word \"blue\". The lexicon defines the pronunciation of \"blue\" to sound like \"bleep\". While the lexicon is loaded, the speech synthesizer uses the pronunciation defined in the lexicon.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Speak the prompt.  \n        synth.Speak(\"My favorite color is blue.\");  \n  \n        // Add a lexicon that changes the pronunciation of \"blue\".  \n        synth.AddLexicon(new Uri(\"C:\\\\test\\\\Blue.pls\"), \"application/pls+xml\");  \n  \n        // Speak the prompt.  \n        synth.Speak(\"My favorite color is blue.\");  \n  \n        // Remove the lexicon.  \n        synth.RemoveLexicon(new Uri(\"C:\\\\test\\\\Blue.pls\"));  \n  \n        // Speak the prompt.  \n        synth.Speak(\"My favorite color is blue.\");  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```  \n  \n Following are the contents of the lexicon file Blue.pls:  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n  \n<lexicon version=\"1.0\"   \n      xmlns=\"http://www.w3.org/2005/01/pronunciation-lexicon\"  \n      alphabet=\"x-microsoft-ups\" xml:lang=\"en-US\">  \n  \n  <lexeme>  \n    <grapheme> blue </grapheme>  \n    <phoneme> B L I P </phoneme>  \n  </lexeme>  \n  \n</lexicon>  \n```"
  syntax:
    content: public void AddLexicon (Uri uri, string mediaType);
    parameters:
    - id: uri
      type: System.Uri
      description: "辞書の情報の場所です。"
    - id: mediaType
      type: System.String
      description: "辞書のメディアの種類。 メディアの種類の値は大文字と小文字ではありません。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached
  id: BookmarkReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: BookmarkReached
  nameWithType: SpeechSynthesizer.BookmarkReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "いつ発生するか、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>メッセージ内のブックマークを検出します。"
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>のいずれかの処理中にこのイベントを発生させる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A></xref:System.Speech.Synthesis.SpeechSynthesizer>。 イベントに関連付けられているデータについては、 <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>。</xref:System.Speech.Synthesis.BookmarkReachedEventArgs>を参照してください。       使用してブックマークを追加することができます、<xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A>メソッド</xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A>。"
  example:
  - "The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback. The handler for the BookmarkReached event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Build a prompt and append bookmarks.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"The weather forecast for today is partly cloudy with some sun breaks.\");  \n        builder.AppendBookmark(\"Daytime forecast\");  \n        builder.AppendText(  \n          \"Tonight's weather will be cloudy with a 30% chance of showers.\");  \n        builder.AppendBookmark(\"Nightime forecast\");  \n  \n        // Add a handler for the BookmarkReached event.  \n        synth.BookmarkReached +=  \n          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Write the name and position of the bookmark to the console.  \n    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  \n    {  \n      Console.WriteLine(\"Bookmark ({0}) reached at: {1} \",  \n        e.Bookmark, e.AudioPosition);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.BookmarkReachedEventArgs> BookmarkReached;
    return:
      type: System.EventHandler{System.Speech.Synthesis.BookmarkReachedEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Dispose
  id: Dispose
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Dispose()
  nameWithType: SpeechSynthesizer.Dispose()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Dispose()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "破棄、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オブジェクトおよびリリースのリソースが、セッション中に使用します。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Finalize
  id: Finalize
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Finalize()
  nameWithType: SpeechSynthesizer.Finalize()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Finalize()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "リソースをクリーンアップするためのセーフガードの役割を果たしますイベントで、<xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose*>メソッドは呼び出されません</xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose*>。"
  syntax:
    content: ~SpeechSynthesizer ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt
  id: GetCurrentlySpokenPrompt
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: GetCurrentlySpokenPrompt()
  nameWithType: SpeechSynthesizer.GetCurrentlySpokenPrompt()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "プロンプトを取得、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>の音声が出力されます。"
  remarks: ''
  example:
  - "```c#  \n  \n```"
  syntax:
    content: public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();
    parameters: []
    return:
      type: System.Speech.Synthesis.Prompt
      description: "読み上げ現在プロンプトのオブジェクトを返します。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices
  id: GetInstalledVoices
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: GetInstalledVoices()
  nameWithType: SpeechSynthesizer.GetInstalledVoices()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "すべてのインストール済みの音声合成 (音声合成) 声を返します。"
  remarks: "音声とは、システムにインストールされている音声合成音声合成 (TTS) のエンジンです。"
  example:
  - "The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Output information about all of the installed voices.   \n        Console.WriteLine(\"Installed voices -\");  \n        foreach (InstalledVoice voice in synth.GetInstalledVoices())  \n        {  \n          VoiceInfo info = voice.VoiceInfo;  \n          string AudioFormats = \"\";  \n          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  \n          {  \n            AudioFormats += String.Format(\"{0}\\n\",  \n            fmt.EncodingFormat.ToString());  \n          }  \n  \n          Console.WriteLine(\" Name:          \" + info.Name);  \n          Console.WriteLine(\" Culture:       \" + info.Culture);  \n          Console.WriteLine(\" Age:           \" + info.Age);  \n          Console.WriteLine(\" Gender:        \" + info.Gender);  \n          Console.WriteLine(\" Description:   \" + info.Description);  \n          Console.WriteLine(\" ID:            \" + info.Id);  \n          Console.WriteLine(\" Enabled:       \" + voice.Enabled);  \n          if (info.SupportedAudioFormats.Count != 0)  \n          {  \n            Console.WriteLine( \" Audio formats: \" + AudioFormats);  \n          }  \n          else  \n          {  \n            Console.WriteLine(\" No supported audio formats found\");  \n          }  \n  \n          string AdditionalInfo = \"\";  \n          foreach (string key in info.AdditionalInfo.Keys)  \n          {  \n            AdditionalInfo += String.Format(\"  {0}: {1}\\n\", key, info.AdditionalInfo[key]);  \n          }  \n  \n          Console.WriteLine(\" Additional Info - \" + AdditionalInfo);  \n          Console.WriteLine();  \n        }  \n      }  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice> GetInstalledVoices ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Synthesis.InstalledVoice}
      description: "システムに現在インストールされている音声の読み取り専用コレクションを返します。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)
  id: GetInstalledVoices(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: GetInstalledVoices(CultureInfo)
  nameWithType: SpeechSynthesizer.GetInstalledVoices(CultureInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "特定のロケールをサポートする (音声合成) を合成音声で次のインストール済みの音声のすべてを返します。"
  remarks: "インストールされている音声サポート指定されたロケールにない場合、このメソッドは空のコレクションを返します。       Microsoft Windows および System.Speech API は、すべての有効な言語-国コードを受け取ります。 カルチャ プロパティで指定された言語を使用して音声合成を実行するには、言語-国コードをサポートする音声合成エンジンをインストールする必要があります。 次の言語、国コードを持つ Microsoft Windows 7 の作業に同梱されている音声合成エンジン:-EN-US です。 英語 (米国) - ZH-CN です。 中国語 (中国) - zh-tw があります。 &quot;En&quot;などの中国語 (台湾) の&2; 文字言語コードも許可されています。"
  example:
  - "The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices that support the en-US locale.  \n  \n```c#  \nusing System;  \nusing System.Globalization;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the speech synthesizer.  \n      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  \n      {  \n  \n        // Output information about all of the installed voices that  \n        // support the en-US locacale.   \n        Console.WriteLine(\"Installed voices for the en-US locale:\");  \n        foreach (InstalledVoice voice in  \n          synthesizer.GetInstalledVoices(new CultureInfo(\"en-US\")))  \n        {  \n          VoiceInfo info = voice.VoiceInfo;  \n          OutputVoiceInfo(info);  \n        }  \n  \n        // Output information about the current voice.  \n        Console.WriteLine();  \n        Console.WriteLine(\"Current voice:\");  \n        OutputVoiceInfo(synthesizer.Voice);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Display information about a synthesizer voice.  \n    private static void OutputVoiceInfo(VoiceInfo info)  \n    {  \n      Console.WriteLine(\"  Name: {0}, culture: {1}, gender: {2}, age: {3}.\",  \n        info.Name, info.Culture, info.Gender, info.Age);  \n      Console.WriteLine(\"    Description: {0}\", info.Description);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice> GetInstalledVoices (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "音声をサポートする必要があるロケールです。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Synthesis.InstalledVoice}
      description: "指定したロケールをサポートするシステムに現在インストールされている音声の読み取り専用コレクションを返します。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Pause
  id: Pause
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Pause()
  nameWithType: SpeechSynthesizer.Pause()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Pause()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "一時停止、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オブジェクト。"
  syntax:
    content: public void Pause ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.Pause*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached
  id: PhonemeReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: PhonemeReached
  nameWithType: SpeechSynthesizer.PhonemeReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "音素に達したときに発生します。"
  remarks: "音素は、記述された言語の基本コンポーネント、通常のアルファベット (または&2; 文字の組み合わせ) を&1; つまたは複数の個別のサウンドを表す文字です。 たとえば、文字&quot;c&quot;は「シンダー」の&quot;s&quot;のように、または&quot;catch&quot;に&quot;k&quot;のように思えるかもしれませんの音素です。 書き込まれた単語とは、音素の集合体です。 音素を単語内で変更すると、そのスペルが変更されます。       A<xref:System.Speech.Synthesis.SpeechSynthesizer>インスタンス音素のときに使用する単語の各部分 PhonemeReached イベントが生成されます</xref:System.Speech.Synthesis.SpeechSynthesizer>。 たとえば、という単語を「テーマ」が生成 PhonemeReached の&3; つのイベントです。1 つ&quot;th&quot;サウンド、&quot;e&quot;音を出すと&1; つの&quot;m&quot;のサウンド (me) です。       例と、イベントに関連付けられているデータに関する情報については、 <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>。</xref:System.Speech.Synthesis.PhonemeReachedEventArgs>を参照してください。"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.PhonemeReachedEventArgs> PhonemeReached;
    return:
      type: System.EventHandler{System.Speech.Synthesis.PhonemeReachedEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Rate
  id: Rate
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Rate
  nameWithType: SpeechSynthesizer.Rate
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Rate
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "取得または設定の読み上げ速度、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オブジェクト。"
  remarks: ''
  example:
  - "The following example speaks a string with the speaking rate set to -2.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Set a value for the speaking rate.  \n      synth.Rate = -2;  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Speak a text string synchronously.  \n      synth.Speak(\"This example speaks a string with the speaking rate set to -2.\");  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }     \n  }    \n}  \n```"
  syntax:
    content: public int Rate { get; set; }
    return:
      type: System.Int32
      description: "返しますの読み上げ速度、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> 10 から -10 からのオブジェクト。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.Rate*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)
  id: RemoveLexicon(System.Uri)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: RemoveLexicon(Uri)
  nameWithType: SpeechSynthesizer.RemoveLexicon(Uri)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(Uri)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "辞書からの削除、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オブジェクト。"
  remarks: "参照してください<xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>例については、</xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> 。"
  syntax:
    content: public void RemoveLexicon (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "辞書のドキュメントの場所です。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Resume
  id: Resume
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Resume()
  nameWithType: SpeechSynthesizer.Resume()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Resume()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "再開されます、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>が一時停止した後のオブジェクトします。"
  syntax:
    content: public void Resume ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.Resume*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)
  id: SelectVoice(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SelectVoice(String)
  nameWithType: SpeechSynthesizer.SelectVoice(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "名前で特定の音声を選択します。"
  remarks: "使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドおよび<xref:System.Speech.Synthesis.VoiceInfo>クラスの名前を取得するには、選択可能な音声合成 (TTS) 音声がインストールされている</xref:System.Speech.Synthesis.VoiceInfo></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 選択するには、音声の内容全体を渡す、 <xref:System.Speech.Synthesis.VoiceInfo.Name%2A>SelectVoice メソッドの引数としてプロパティ</xref:System.Speech.Synthesis.VoiceInfo.Name%2A>。 <xref:System.Speech.Synthesis.SpeechSynthesizer>オブジェクトの選択を含む最初のインストール済みの音声`name`で音声の<xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=fullName>プロパティ</xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=fullName></xref:System.Speech.Synthesis.SpeechSynthesizer>。 <xref:System.Speech.Synthesis.SpeechSynthesizer>音声と一致するかどうかを決定する、大文字小文字を区別部分文字列比較を実行、 `name`</xref:System.Speech.Synthesis.SpeechSynthesizer> 。       アプリケーションを呼び出すと<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>、メソッドは、最低限の条件を満たして、レジストリ内で見つかった声のことを確認します</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 検証に失敗したすべての音声の<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>設定、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティを`False`</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 アプリケーションが、音声を選択できない持つ<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティは`False`</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>。 通常、アプリケーションは、音声のない設定<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティ</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>。       性別、年齢、またはロケールによって、音声を選択するには、いずれかの操作を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>。"
  syntax:
    content: public void SelectVoice (string name);
    parameters:
    - id: name
      type: System.String
      description: "選択する音声の名前。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)
  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SelectVoiceByHints(VoiceGender)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "特定の性別と音声を選択します。"
  remarks: "使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドおよび<xref:System.Speech.Synthesis.VoiceInfo>クラスの名前を取得するには、選択可能な音声合成 (TTS) 音声がインストールされている</xref:System.Speech.Synthesis.VoiceInfo></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 <xref:System.Speech.Synthesis.SpeechSynthesizer>オブジェクト選択の最初のインストール済みの音声が<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>プロパティと一致する、`gender`パラメーター</xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> 。       アプリケーションを呼び出すと<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>、メソッドは、最低限の条件を満たして、レジストリ内で見つかった声のことを確認します</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 検証に失敗したすべての音声の<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>設定、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティを`False`</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 アプリケーションが、音声を選択できない持つ<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティは`False`</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>。 通常、アプリケーションは、音声のない設定<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティ</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>。       その他の特性に基づいて、音声を選択するを参照してください、他の<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>。       名前で、音声を選択するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>。"
  syntax:
    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "選択する音声の性別。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SelectVoiceByHints(VoiceGender,VoiceAge)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "特定の性別と年齢に音声を選択します。"
  remarks: "使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドおよび<xref:System.Speech.Synthesis.VoiceInfo>クラスの名前を取得するには、選択可能な音声合成 (TTS) 音声がインストールされている</xref:System.Speech.Synthesis.VoiceInfo></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 <xref:System.Speech.Synthesis.SpeechSynthesizer>オブジェクトが最初のインストール済みの音声を選択が<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>と<xref:System.Speech.Synthesis.VoiceInfo.Age%2A>プロパティ一致、`gender`と`age`パラメーター</xref:System.Speech.Synthesis.VoiceInfo.Age%2A> </xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> 。       アプリケーションを呼び出すと<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>、メソッドは、最低限の条件を満たして、レジストリ内で見つかった声のことを確認します</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 検証に失敗したすべての音声の<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>設定、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティを`False`</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 アプリケーションが、音声を選択できない持つ<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティは`False`</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>。 通常、アプリケーションは、音声のない設定<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティ</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>。       その他の特性に基づいて、音声を選択するを参照してください、他の<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>。       名前で、音声を選択するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>。"
  syntax:
    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "選択する音声の性別。"
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "選択する音声の年齢。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "声が順序付けの位置に基づいて特定の性別と年齢と音声を選択します。"
  remarks: "使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドおよび<xref:System.Speech.Synthesis.VoiceInfo>クラスの名前を取得するには、選択可能な音声合成 (TTS) 音声がインストールされている</xref:System.Speech.Synthesis.VoiceInfo></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 <xref:System.Speech.Synthesis.SpeechSynthesizer>オブジェクトの意見を持つ検索がインストールされている<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>と<xref:System.Speech.Synthesis.VoiceInfo.Age%2A>プロパティ一致、`gender`と`age`パラメーター</xref:System.Speech.Synthesis.VoiceInfo.Age%2A> </xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> 。 <xref:System.Speech.Synthesis.SpeechSynthesizer>一致が見つかると、しに等しくなると、音声を返しますのカウント、`voiceAlternate`パラメーター</xref:System.Speech.Synthesis.SpeechSynthesizer> 。       アプリケーションを呼び出すと<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>、メソッドは、最低限の条件を満たして、レジストリ内で見つかった声のことを確認します</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 検証に失敗したすべての音声の<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>設定、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティを`False`</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 アプリケーションが、音声を選択できない持つ<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティは`False`</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>。 通常、アプリケーションは、音声のない設定<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティ</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>。       その他の特性に基づいて、音声を選択するを参照してください、他の<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>オーバー ロード</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>。       名前で、音声を選択するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>。"
  syntax:
    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "選択する音声の性別。"
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "選択する音声の年齢。"
    - id: voiceAlternate
      type: System.Int32
      description: "選択する音声の位置。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)
  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "声が順序付けの位置に基づいて特定の性別、年齢、およびロケールの音声を選択します。"
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>検索意見を持つオブジェクト<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>、 <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>、および<xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>プロパティ一致、 `gender`、 `age`、および`culture`パラメーター</xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> </xref:System.Speech.Synthesis.VoiceInfo.Age%2A> </xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> 。 <xref:System.Speech.Synthesis.SpeechSynthesizer>一致が見つかると、しに等しくなると、音声を返しますのカウント、`voiceAlternate`パラメーター</xref:System.Speech.Synthesis.SpeechSynthesizer> 。       Microsoft Windows および System.Speech API は、すべての有効な言語-国コードを受け取ります。 指定された言語を使用して音声合成を実行する、`culture`パラメーターでは、言語、国コードをインストールする必要があるをサポートする音声合成エンジンです。 次の言語、国コードを持つ Microsoft Windows 7 の作業に同梱されている音声合成エンジン:-EN-US です。 英語 (米国) - ZH-CN です。 中国語 (中国) - zh-tw があります。 &quot;En&quot;などの中国語 (台湾) の&2; 文字言語コードも許可されています。       アプリケーションを呼び出すと<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>、メソッドは、最低限の条件を満たして、レジストリ内で見つかった声のことを確認します</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 検証に失敗したすべての音声の<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>設定、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティを`False`</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>。 アプリケーションが、音声を選択できない持つ<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティは`False`</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>。 通常、アプリケーションは、音声のない設定<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティ</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>。       その他の特性に基づいて、音声を選択するを参照してください、他の<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>オーバー ロード</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>。       名前で、音声を選択するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>。"
  syntax:
    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "選択する音声の性別。"
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "選択する音声の年齢。"
    - id: voiceAlternate
      type: System.Int32
      description: "選択する音声の位置。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "選択する音声のロケールです。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  id: SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
  nameWithType: SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "構成、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オーディオ ストリームに出力を追加するオブジェクト。"
  remarks: "呼び出す<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>を解放する、<xref:System.Speech.Synthesis.SpeechSynthesizer>のストリームへの参照</xref:System.Speech.Synthesis.SpeechSynthesizer></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>。       その他の出力の構成オプションを参照してください、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>、および<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>。"
  syntax:
    content: public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);
    parameters:
    - id: audioDestination
      type: System.IO.Stream
      description: "シンセサイザーの出力を追加するストリーム。"
    - id: formatInfo
      type: System.Speech.AudioFormat.SpeechAudioFormatInfo
      description: "シンセサイザーの出力に使用する形式。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice
  id: SetOutputToDefaultAudioDevice
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToDefaultAudioDevice()
  nameWithType: SpeechSynthesizer.SetOutputToDefaultAudioDevice()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "構成、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>既定のオーディオ デバイスに出力を送信するオブジェクト。"
  remarks: "使用することができます、**サウンド**、Windows のウィンドウ**コントロール パネルの **コンピューターの既定のオーディオ デバイスを構成します。       その他の出力の構成オプションを参照してください、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>、および<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>。"
  example:
  - "The following example uses the synthesizer to speak a phrase to the default audio output.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the speech synthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the synthesizer to send output to the default audio device.  \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Speak a phrase.  \n        synth.Speak(\"This is sample text-to-speech output.\");  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void SetOutputToDefaultAudioDevice ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull
  id: SetOutputToNull
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToNull()
  nameWithType: SpeechSynthesizer.SetOutputToNull()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "構成、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>いないデバイス、ファイル、またはストリームに合成操作から出力を送信するオブジェクト。"
  remarks: "このメソッドを使用して、リリース、<xref:System.Speech.Synthesis.SpeechSynthesizer>のファイルまたはストリームへの参照</xref:System.Speech.Synthesis.SpeechSynthesizer>。 参照してください<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>例については、</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> 。       その他の出力の構成オプションを参照してください、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>、および<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>。"
  syntax:
    content: public void SetOutputToNull ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)
  id: SetOutputToWaveFile(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToWaveFile(String)
  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "構成、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>波形オーディオの設定を含むファイルに出力を追加するオブジェクト。"
  remarks: "出力を構成して、オーディオ形式を指定してを使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>。"
  example:
  - "The following example uses an instance of <xref:System.Media.SoundPlayer> to play a prompt that has been output to a .wav file. Because the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> call is asynchronous, the <xref:System.Media.SoundPlayer> instance is created (and the <xref:System.Media.SoundPlayer.Play%2A> method invoked) in the handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToWaveFile(@\"C:\\Test\\Sample.wav\");  \n  \n      // Register for the SpeakCompleted event.  \n      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  \n  \n      // Build a prompt.  \n      PromptBuilder builder = new PromptBuilder();  \n      builder.AppendText(\"This sample asynchronously speaks a prompt to a WAVE file.\");  \n  \n      // Speak the string asynchronously.  \n      synth.SpeakAsync(builder);  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the SpeakCompleted event.  \n    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  \n    {  \n  \n      // Create a SoundPlayer instance to play the output audio file.  \n      System.Media.SoundPlayer m_SoundPlayer =  \n        new System.Media.SoundPlayer(@\"C:\\Test\\Sample.wav\");  \n  \n      //  Play the output file.  \n      m_SoundPlayer.Play();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void SetOutputToWaveFile (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルへのパス。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  id: SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToWaveFile(String,SpeechAudioFormatInfo)
  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "構成、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>指定の形式で波形オーディオ形式のファイルに出力を追加するオブジェクト。"
  remarks: ''
  example:
  - "The following example specifies the format of the output of speech synthesis and sends it to a WAV file.  \n  \n```c#  \nusing System;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\temp\\test.wav\",   \n          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  \n  \n        // Create a SoundPlayer instance to play output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =   \n          new System.Media.SoundPlayer(@\"C:\\temp\\test.wav\");  \n  \n        // Build a prompt.  \n        PromptBuilder builder = new PromptBuilder();  \n        builder.AppendText(\"This is sample output to a WAVE file.\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);
    parameters:
    - id: path
      type: System.String
      description: "ファイルへのパス。"
    - id: formatInfo
      type: System.Speech.AudioFormat.SpeechAudioFormatInfo
      description: "オーディオ形式情報。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)
  id: SetOutputToWaveStream(System.IO.Stream)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToWaveStream(Stream)
  nameWithType: SpeechSynthesizer.SetOutputToWaveStream(Stream)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(Stream)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "構成、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>波形オーディオの設定を格納しているストリームに出力を追加するオブジェクト。"
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>Reconfigure シンセサイザーの出力、たとえば、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>。</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>を呼び出すことによって、ストリームへの参照</xref:System.Speech.Synthesis.SpeechSynthesizer>を解放するには       その他の出力の構成オプションを参照してください、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>、および<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>。"
  example:
  - "The following example outputs a phrase to a WAV stream.  \n  \n```c#  \nusing System;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the speech synthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      using (MemoryStream stream = new MemoryStream())  \n      {  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        MemoryStream streamAudio = new MemoryStream();  \n        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  \n  \n        // Configure the synthesizer to output to an audio stream.  \n        synth.SetOutputToWaveStream(streamAudio);  \n  \n        // Speak a phrase.  \n        synth.Speak(\"This is sample text-to-speech output.\");  \n        streamAudio.Position = 0;  \n        m_SoundPlayer.Stream = streamAudio;  \n        m_SoundPlayer.Play();  \n  \n        // Set the synthesizer output to null to release the stream.   \n        synth.SetOutputToNull();  \n  \n        // Insert code to persist or process the stream contents here.  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void SetOutputToWaveStream (System.IO.Stream audioDestination);
    parameters:
    - id: audioDestination
      type: System.IO.Stream
      description: "シンセサイザーの出力を追加するストリーム。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)
  id: Speak(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Speak(Prompt)
  nameWithType: SpeechSynthesizer.Speak(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(Prompt)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "内容を同期的に話す、 <xref href=&quot;System.Speech.Synthesis.Prompt&quot;> </xref>オブジェクト。"
  remarks: "<xref:System.Speech.Synthesis.Prompt> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>。</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>を使用して、オブジェクト</xref:System.Speech.Synthesis.Prompt>の内容を非同期的に話を"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.Prompt> object from a string and passes the object as an argument to the Speak method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a prompt from a string.  \n        Prompt color = new Prompt(\"What is your favorite color?\");  \n  \n        // Speak the contents of the prompt synchronously.  \n        synth.Speak(color);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void Speak (System.Speech.Synthesis.Prompt prompt);
    parameters:
    - id: prompt
      type: System.Speech.Synthesis.Prompt
      description: "読み上げるコンテンツ。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.Speak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)
  id: Speak(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Speak(PromptBuilder)
  nameWithType: SpeechSynthesizer.Speak(PromptBuilder)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(PromptBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "内容を同期的に話す、 <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>オブジェクト。"
  remarks: "<xref:System.Speech.Synthesis.PromptBuilder> <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>。</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>を使用して、オブジェクト</xref:System.Speech.Synthesis.PromptBuilder>の内容を非同期的に話を"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from a string and passes the object as an argument to the Speak method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a text string.  \n        PromptBuilder song = new PromptBuilder();  \n        song.AppendText(\"Say the name of the song you want to hear\");  \n  \n        // Speak the contents of the prompt synchronously.  \n        synth.Speak(song);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);
    parameters:
    - id: promptBuilder
      type: System.Speech.Synthesis.PromptBuilder
      description: "読み上げるコンテンツ。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.Speak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)
  id: Speak(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Speak(String)
  nameWithType: SpeechSynthesizer.Speak(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "文字列の内容を同期的に話します。"
  remarks: "SSML マークアップを含む文字列を話す同期的を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>。 文字列の内容を話す非同期的を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>。"
  example:
  - "As shown in the following example, the Speak method provides the simplest means to generate speech output synchronously.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Speak a string synchronously.  \n        synth.Speak(\"What is your favorite color?\");  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void Speak (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "読み上げるテキストです。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.Speak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)
  id: SpeakAsync(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakAsync(Prompt)
  nameWithType: SpeechSynthesizer.SpeakAsync(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(Prompt)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "内容を非同期で話す、 <xref href=&quot;System.Speech.Synthesis.Prompt&quot;> </xref>オブジェクト。"
  remarks: "使用して、プロンプトの非同期話すを取り消すことができます、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>。       <xref:System.Speech.Synthesis.Prompt> <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>。</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>を使用して、オブジェクト</xref:System.Speech.Synthesis.Prompt>の内容を同期的に話を"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.Prompt> object from a string and passes the object as an argument to the SpeakAsync method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Create a prompt from a string.  \n      Prompt color = new Prompt(\"What is your favorite color?\");  \n  \n      // Speak the contents of the prompt asynchronously.  \n      synth.SpeakAsync(color);  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);
    parameters:
    - id: prompt
      type: System.Speech.Synthesis.Prompt
      description: "読み上げるコンテンツ。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)
  id: SpeakAsync(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakAsync(PromptBuilder)
  nameWithType: SpeechSynthesizer.SpeakAsync(PromptBuilder)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(PromptBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "内容を非同期で話す、 <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>オブジェクト。"
  remarks: "<xref:System.Speech.Synthesis.PromptBuilder> <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>。</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>を使用して、オブジェクト</xref:System.Speech.Synthesis.PromptBuilder>の内容を同期的に話を"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from a string and passes the object as an argument to the SpeakAsync method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Create a PromptBuilder object and append a text string.  \n      PromptBuilder song = new PromptBuilder();  \n      song.AppendText(\"Say the name of the song you want to hear\");  \n  \n      // Speak the contents of the prompt asynchronously.  \n      synth.SpeakAsync(song);  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);
    parameters:
    - id: promptBuilder
      type: System.Speech.Synthesis.PromptBuilder
      description: "読み上げるコンテンツ。"
    return:
      type: System.Speech.Synthesis.Prompt
      description: "読み上げるために、コンテンツを含むオブジェクトを返します。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)
  id: SpeakAsync(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakAsync(String)
  nameWithType: SpeechSynthesizer.SpeakAsync(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "文字列の内容を非同期的に話します。"
  remarks: "SSML マークアップを含む文字列を話す非同期的を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>。 文字列の内容を話す同期的を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>。 使用して、プロンプトの非同期話すを取り消すことができます、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>。"
  example:
  - "As shown in the following example, the SpeakAsync method provides the simplest means to generate speech output asynchronously.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Speak a string asynchronously.  \n      synth.SpeakAsync(\"What is your favorite color?\");  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "読み上げるテキストです。"
    return:
      type: System.Speech.Synthesis.Prompt
      description: "読み上げるために、コンテンツを含むオブジェクトを返します。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)
  id: SpeakAsyncCancel(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakAsyncCancel(Prompt)
  nameWithType: SpeechSynthesizer.SpeakAsyncCancel(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(Prompt)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "キューに置かれたメッセージの非同期の合成の操作を取り消します。"
  remarks: "非同期のキャンセルにこのメソッドを使用することもできます次の操作を話す:-の内容、<xref:System.String>によって指定された、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>メソッド。</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> </xref:System.String> 。      -の内容、<xref:System.Speech.Synthesis.PromptBuilder>によって指定された、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName></xref:System.Speech.Synthesis.PromptBuilder>。      -の内容、 <xref:System.String>SSML で指定されたを含む、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A></xref:System.String>。       呼び出すと<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>、または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>、System.Speech を作成、<xref:System.Speech.Synthesis.Prompt>オブジェクトしメソッドのパラメーターの内容の設定を返します、<xref:System.Speech.Synthesis.Prompt>オブジェクト</xref:System.Speech.Synthesis.Prompt></xref:System.Speech.Synthesis.Prompt></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>。 返されたのコピーを保持する場合<xref:System.Speech.Synthesis.Prompt>で指定された話し方の内容をキャンセルする SpeakAsyncCancel に渡すことができます、<xref:System.String>または<xref:System.Speech.Synthesis.PromptBuilder>オブジェクト</xref:System.Speech.Synthesis.PromptBuilder></xref:System.String></xref:System.Speech.Synthesis.Prompt>。"
  syntax:
    content: public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);
    parameters:
    - id: prompt
      type: System.Speech.Synthesis.Prompt
      description: "Speak 操作をキャンセルする対象のコンテンツ。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll
  id: SpeakAsyncCancelAll
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakAsyncCancelAll()
  nameWithType: SpeechSynthesizer.SpeakAsyncCancelAll()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "すべてキューに置かれた、非同期、音声合成の操作をキャンセルします。"
  remarks: ''
  example:
  - "The following example show a use of SpeakAsyncCancelAll to cancel the asynchronous speaking of a prompt, so that a new prompt can be spoken. Note that the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event fires when a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> operation is cancelled.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \nusing System.Threading;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Subscribe to the StateChanged event.  \n      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  \n  \n      // Subscribe to the SpeakProgress event.  \n      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \n  \n      // Subscribe to the SpeakCompleted event.  \n      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  \n  \n      // Begin speaking a text string asynchronously.  \n      synth.SpeakAsync(\"Speech is an effective and natural way for people to interact with applications, \" +  \n        \"complementing or even replacing the use of mice, keyboards, controllers, and gestures.\");  \n  \n      // Speak for four seconds.  \n      Thread.Sleep(4000);  \n  \n      // Cancel the SpeakAsync operation and wait one second.  \n      synth.SpeakAsyncCancelAll();  \n      Thread.Sleep(1000);  \n  \n      // Speak a new text string.  \n      synth.Speak(\"An urgent email message has arrived. Do you want to hear it?\");  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Write to the console when the SpeakAsync operation has been cancelled.  \n    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"\\nThe SpeakAsync operation was cancelled!!\");  \n    }  \n  \n    // When it changes, write the state of the SpeechSynthesizer to the console.  \n    static void synth_StateChanged(object sender, StateChangedEventArgs e)  \n    {  \n      Console.WriteLine(\"\\nSynthesizer State: {0}    Previous State: {1}\\n\", e.State, e.PreviousState);  \n    }  \n  \n    // Write the text being spoken by the SpeechSynthesizer to the console.  \n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \n    {  \n      Console.WriteLine(e.Text);  \n    }      \n  }    \n}  \n  \n```"
  syntax:
    content: public void SpeakAsyncCancelAll ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted
  id: SpeakCompleted
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakCompleted
  nameWithType: SpeechSynthesizer.SpeakCompleted
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "いつ発生するか、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>いえば、プロンプトが完了します。"
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>のいずれかの完了時に SpeakCompleted イベントを発生させる、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer>。       <xref:System.Speech.Synthesis.SpeakCompletedEventArgs>クラスのプロパティを持たないし、SpeakCompleted イベントからデータが返されません</xref:System.Speech.Synthesis.SpeakCompletedEventArgs>。 SpeakCompleted イベントのイベント ハンドラーを記述するアプリケーションの作成者を有効にするものです。"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs> SpeakCompleted;
    return:
      type: System.EventHandler{System.Speech.Synthesis.SpeakCompletedEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress
  id: SpeakProgress
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakProgress
  nameWithType: SpeechSynthesizer.SpeakProgress
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "後に発生した、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>プロンプトの各個々 の単語を話します。"
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>の新しい各単語内のいずれかを使用して、プロンプトで、これは、このイベントを発生させる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A></xref:System.Speech.Synthesis.SpeechSynthesizer>。 例と、イベントに関連付けられているデータの詳細については、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs>。</xref:System.Speech.Synthesis.SpeakProgressEventArgs>を参照してください。"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs> SpeakProgress;
    return:
      type: System.EventHandler{System.Speech.Synthesis.SpeakProgressEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)
  id: SpeakSsml(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakSsml(String)
  nameWithType: SpeechSynthesizer.SpeakSsml(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "同期が話す間、 <xref:System.String>SSML マークアップを格納している</xref:System.String>。"
  remarks: "内容、`textToSpeak`パラメーターを含める必要があります、`speak`要素に従っている必要があります、[音声合成マークアップ言語 (SSML) バージョン 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)です。 詳細については、次を参照してください。[音声合成マークアップ言語リファレンス](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94)です。       SSML マークアップを含む文字列を話す非同期的を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>。 使用することができます<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>を同期と言えば SSML マークアップを含まない文字列を開始します</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>。       このメソッドの呼び出し中に、<xref:System.Speech.Synthesis.SpeechSynthesizer>次のイベントを発生させることができます:- <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged> </xref:System.Speech.Synthesis.SpeechSynthesizer> シンセサイザーの話し方の状態が変更されたときに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> シンセサイザーが音声の生成を開始するときに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> シンセサイザーは文字または音声の言語で音を慎重に構成する文字の組み合わせに達するたびに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> シンセサイザーたびに発生する単語を話す完了します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> 音声出力口または音声の生成に使用される顔筋肉の位置の変更を必要とするたびに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> シンセサイザーがメッセージ内のブックマークを検出したときに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange> シンセサイザーの声が変更されたときに発生します。       <xref:System.Speech.Synthesis.SpeechSynthesizer>は発生しません、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>SpeakSsml メソッドを処理中にイベント</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted></xref:System.Speech.Synthesis.SpeechSynthesizer>。"
  example:
  - "The following example renders the date 1/29/2009 as a date, in month, day, year order.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Build an SSML prompt in a string.  \n      string str = \"<speak version=\\\"1.0\\\"\";  \n      str += \" xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\"\";  \n      str += \" xml:lang=\\\"en-US\\\">\";  \n      str += \"<say-as type=\\\"date:mdy\\\"> 1/29/2009 </say-as>\";  \n      str += \"</speak>\";  \n  \n      // Speak the contents of the prompt asynchronously.  \n      synth.SpeakSsml(str);  \n  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void SpeakSsml (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "話す SSML 文字列。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)
  id: SpeakSsmlAsync(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakSsmlAsync(String)
  nameWithType: SpeechSynthesizer.SpeakSsmlAsync(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "非同期的が話す間、 <xref:System.String>SSML マークアップを格納している</xref:System.String>。"
  remarks: "内容、`textToSpeak`パラメーターを含める必要があります、`speak`要素に従っている必要があります、[音声合成マークアップ言語 (SSML) バージョン 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)です。 詳細については、次を参照してください。[音声合成マークアップ言語リファレンス](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94)です。       SSML マークアップを含む文字列を話す同期的を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>。 使用することができます<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>SSML マークアップを含まない文字列の非同期話すを開始する</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>。       このメソッドの呼び出し中に、<xref:System.Speech.Synthesis.SpeechSynthesizer>次のイベントを発生させることができます:- <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged> </xref:System.Speech.Synthesis.SpeechSynthesizer> シンセサイザーの話し方の状態が変更されたときに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> シンセサイザーが音声の生成を開始するときに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> シンセサイザーは文字または音声の言語で音を慎重に構成する文字の組み合わせに達するたびに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> シンセサイザーたびに発生する単語を話す完了します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> 音声出力口または音声の生成に使用される顔筋肉の位置の変更を必要とするたびに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> シンセサイザーがメッセージ内のブックマークを検出したときに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange> シンセサイザーの声が変更されたときに発生します。      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> シンセサイザー SpeakSsmlAsync 操作の処理が完了すると発生します。       使用することができます、アプリケーション dos 話すときにタスクを実行する必要がない場合、<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>音声を同期的に生成する方法</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>。"
  example:
  - "```  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Build an SSML prompt in a string.  \n      string str = \"<speak version=\\\"1.0\\\"\";  \n      str += \" xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\"\";  \n      str += \" xml:lang=\\\"en-US\\\">\";  \n      str += \"<say-as type=\\\"date:mdy\\\"> 1/29/2009 </say-as>\";  \n      str += \"</speak>\";  \n  \n      // Speak the contents of the prompt asynchronously.  \n      synth.SpeakSsmlAsync(str);  \n  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "発言 SMML マークアップ。"
    return:
      type: System.Speech.Synthesis.Prompt
      description: "非同期的が話す間、 <xref:System.String>SSML マークアップを格納している</xref:System.String>。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted
  id: SpeakStarted
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakStarted
  nameWithType: SpeechSynthesizer.SpeakStarted
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "いつ発生するか、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>いえば、プロンプトを開始します。"
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>のいずれかを使用して、プロンプトの処理が開始したときに、このイベントを発生させる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>、または<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A></xref:System.Speech.Synthesis.SpeechSynthesizer>。       <xref:System.Speech.Synthesis.SpeakStartedEventArgs>クラスのプロパティを持たないし、SpeakStarted イベントからデータが返されません</xref:System.Speech.Synthesis.SpeakStartedEventArgs>。 SpeakStarted イベントのイベント ハンドラーを記述するアプリケーションの作成者を有効にするものです。"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.SpeakStartedEventArgs> SpeakStarted;
    return:
      type: System.EventHandler{System.Speech.Synthesis.SpeakStartedEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.State
  id: State
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: State
  nameWithType: SpeechSynthesizer.State
  fullName: System.Speech.Synthesis.SpeechSynthesizer.State
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "現在の話すの状態を取得、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オブジェクト。"
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer><xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A><xref:System.Speech.Synthesis.StateChangedEventArgs>クラス</xref:System.Speech.Synthesis.StateChangedEventArgs>のプロパティ</xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A>を使用している、変更後</xref:System.Speech.Synthesis.SpeechSynthesizer>の新しい状態を取得するには"
  example:
  - "The following example illustrates the state of the <xref:System.Speech.Synthesis.SpeechSynthesizer> before, during, and after speaking a prompt.  \n  \n```c#  \nusing System;  \nusing System.Threading;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer() ;  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Subscribe to the SpeakProgress event.         \n      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \n  \n      // Write the state of the SpeechSynthesizer to the console.  \n      Console.WriteLine(\"Current Synthesizer state: \" + synth.State + \"\\n\");  \n  \n      // Speak a string asynchronously.  \n      synth.SpeakAsync(\"What is your favorite color?\");  \n  \n      // Write the state of the SpeechSynthesizer to the console while it is speaking.  \n      Thread.Sleep(1000);  \n      Console.WriteLine(\"\\n - Current Synthesizer state: \" + synth.State + \" - \\n\");  \n  \n      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  \n      Thread.Sleep(2000);  \n      Console.WriteLine(\"\\nCurrent Synthesizer state: \" + synth.State);  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \n    {  \n      Console.WriteLine(e.Text);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Synthesis.SynthesizerState State { get; }
    return:
      type: System.Speech.Synthesis.SynthesizerState
      description: "現在の話し方の状態を返す、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オブジェクト。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.State*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.StateChanged
  id: StateChanged
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: StateChanged
  nameWithType: SpeechSynthesizer.StateChanged
  fullName: System.Speech.Synthesis.SpeechSynthesizer.StateChanged
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "いつ発生するかの状態、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>変更します。"
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>このイベントを発生させるときに、話す<xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A>変更します</xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A></xref:System.Speech.Synthesis.SpeechSynthesizer>。 例と、イベントに関連付けられているデータの詳細については、 <xref:System.Speech.Synthesis.StateChangedEventArgs>。</xref:System.Speech.Synthesis.StateChangedEventArgs>を参照してください。       一時停止し、音声合成の再開を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A>と<xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A>。"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.StateChangedEventArgs> StateChanged;
    return:
      type: System.EventHandler{System.Speech.Synthesis.StateChangedEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached
  id: VisemeReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: VisemeReached
  nameWithType: SpeechSynthesizer.VisemeReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Viseme に達したときに発生します。"
  remarks: "Viseme は、音素の発音口とフェイスの基本的な位置です。 Visemes は、音素のビジュアル表現です。       System.Speech では、英語 (米国)、対応する 1 つまたは複数の音素を 21 visemes をサポートしています。  達すると新しい音素が別の対応する viseme に達する前音素より VisemeReached イベントが発生します。 いくつか visemes が&1; つ以上の音素を表すために達すると次の音素が以前の音素として同じ viseme に対応している場合、VisemeReached イベントは生成されません。 たとえば、話された単語「このゾーン」を<xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>&quot;this&quot;で&quot;s&quot;と「ゾーン」で&quot;z&quot;のイベントが発生します</xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>。 ただし、&quot;this&quot;で&quot;s&quot;として同じ viseme に対応しているために、&quot;z&quot;で「ゾーン」に対して VisemeReached イベントは発生しません。       21 SAPI 音素と英語 (米国) で viseme に対応する音素グループの一覧を次に示します。      |Viseme |Phoneme(s) |  |------------|------------------|  |&0; | 無音 |  |&1; | ae、ax、ah |  |&2; | aa |  |&3; | ao |  |&4; | 欄、eh、しかし |  |&5; | er |  |&6; | y、iy、組み込み、ix |  |&7; | w, ワシントン |  |&8; |ow |  |&9; | aw |  |&10; | oy |  |&11; | ay |  |&12; | h |  |&13; | r |  |&14; | l |  |&15; | s、z |  |&16; | sh、ch、jh、zh |  |&17; | th、dh |  |&18; | f、v |  |&19; | d、t、n |  |&20; | k、g、ng |  |&21; | p、b、m |      関連付けられているデータについては、`VisemeReached`イベント、 <xref:System.Speech.Synthesis.VisemeReachedEventArgs>.</xref:System.Speech.Synthesis.VisemeReachedEventArgs>を参照してください。"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.VisemeReachedEventArgs> VisemeReached;
    return:
      type: System.EventHandler{System.Speech.Synthesis.VisemeReachedEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Voice
  id: Voice
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Voice
  nameWithType: SpeechSynthesizer.Voice
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Voice
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "現在の音声に関する情報を取得、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オブジェクト。"
  remarks: "初期化するとき、新しい<xref:System.Speech.Synthesis.SpeechSynthesizer>、既定のシステムの音声を使用します</xref:System.Speech.Synthesis.SpeechSynthesizer>。 構成するのには<xref:System.Speech.Synthesis.SpeechSynthesizer>オブジェクトがインストールされている音声合成の音声のいずれかを使用して、使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>または<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A></xref:System.Speech.Synthesis.SpeechSynthesizer>。 音声のインストールに関する情報を取得するには<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドと<xref:System.Speech.Synthesis.VoiceInfo>クラス</xref:System.Speech.Synthesis.VoiceInfo></xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>を使用します。"
  example:
  - "The following example initializes an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer>and gets information about the current voice.  \n  \n```c#  \nusing System;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Get information about supported audio formats.  \n        string AudioFormats = \"\";  \n        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  \n        {  \n          AudioFormats += String.Format(\"{0}\\n\",  \n          fmt.EncodingFormat.ToString());  \n        }  \n  \n        // Write information about the voice to the console.  \n        Console.WriteLine(\" Name:          \" + synth.Voice.Name);  \n        Console.WriteLine(\" Culture:       \" + synth.Voice.Culture);  \n        Console.WriteLine(\" Age:           \" + synth.Voice.Age);  \n        Console.WriteLine(\" Gender:        \" + synth.Voice.Gender);  \n        Console.WriteLine(\" Description:   \" + synth.Voice.Description);  \n        Console.WriteLine(\" ID:            \" + synth.Voice.Id);  \n        if (synth.Voice.SupportedAudioFormats.Count != 0)  \n        {  \n          Console.WriteLine(\" Audio formats: \" + AudioFormats);  \n        }  \n        else  \n        {  \n          Console.WriteLine(\" No supported audio formats found\");  \n        }  \n  \n        // Get additional information about the voice.  \n        string AdditionalInfo = \"\";  \n        foreach (string key in synth.Voice.AdditionalInfo.Keys)  \n        {  \n          AdditionalInfo += String.Format(\"  {0}: {1}\\n\",  \n            key, synth.Voice.AdditionalInfo[key]);  \n        }  \n  \n        Console.WriteLine(\" Additional Info - \" + AdditionalInfo);  \n        Console.WriteLine();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Synthesis.VoiceInfo Voice { get; }
    return:
      type: System.Speech.Synthesis.VoiceInfo
      description: "現在の音声に関する情報を返します、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オブジェクト。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.Voice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange
  id: VoiceChange
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: VoiceChange
  nameWithType: SpeechSynthesizer.VoiceChange
  fullName: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "いつ発生するの音声、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>変更します。"
  remarks: "例と、イベントに関連付けられているデータに関する情報については、 <xref:System.Speech.Synthesis.VoiceChangeEventArgs>。</xref:System.Speech.Synthesis.VoiceChangeEventArgs>を参照してください。       音声を変更することができますを<xref:System.Speech.Synthesis.SpeechSynthesizer>のいずれかを使用して、<xref:System.Speech.Synthesis.PromptBuilder>の<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>メソッドまたは<xref:System.Speech.Synthesis.SpeechSynthesizer>の<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>または<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A></xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A></xref:System.Speech.Synthesis.SpeechSynthesizer></xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A></xref:System.Speech.Synthesis.PromptBuilder></xref:System.Speech.Synthesis.SpeechSynthesizer>。"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.VoiceChangeEventArgs> VoiceChange;
    return:
      type: System.EventHandler{System.Speech.Synthesis.VoiceChangeEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Volume
  id: Volume
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Volume
  nameWithType: SpeechSynthesizer.Volume
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Volume
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "取得または設定の出力量、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>オブジェクト。"
  remarks: ''
  example:
  - "The following example sets the volume of the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s audio output for the synthesized voice and the WAV file.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Set the volume of the SpeechSynthesizer's ouput.  \n        synth.Volume = 60;  \n  \n        // Build a prompt containing recorded audio and synthesized speech.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendAudio(\"C:\\\\Test\\\\WelcomeToContosoRadio.wav\");  \n        builder.AppendText(  \n          \"The weather forecast for today is partly cloudy with some sun breaks.\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public int Volume { get; set; }
    return:
      type: System.Int32
      description: "ボリュームを返して、 <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>、0 ~ 100 です。"
  overload: System.Speech.Synthesis.SpeechSynthesizer.Volume*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.SpeechSynthesizer.#ctor
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeechSynthesizer()
  nameWithType: SpeechSynthesizer.SpeechSynthesizer()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeechSynthesizer()
- uid: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: AddLexicon(Uri,String)
  nameWithType: SpeechSynthesizer.AddLexicon(Uri,String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(Uri,String)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: BookmarkReached
  nameWithType: SpeechSynthesizer.BookmarkReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached
- uid: System.EventHandler{System.Speech.Synthesis.BookmarkReachedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<BookmarkReachedEventArgs>
  nameWithType: EventHandler<BookmarkReachedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.BookmarkReachedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.BookmarkReachedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.BookmarkReachedEventArgs
    name: BookmarkReachedEventArgs
    nameWithType: BookmarkReachedEventArgs
    fullName: BookmarkReachedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.Dispose
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Dispose()
  nameWithType: SpeechSynthesizer.Dispose()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Dispose()
- uid: System.Speech.Synthesis.SpeechSynthesizer.Finalize
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Finalize()
  nameWithType: SpeechSynthesizer.Finalize()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Finalize()
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: GetCurrentlySpokenPrompt()
  nameWithType: SpeechSynthesizer.GetCurrentlySpokenPrompt()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt()
- uid: System.Speech.Synthesis.Prompt
  parent: System.Speech.Synthesis
  isExternal: false
  name: Prompt
  nameWithType: Prompt
  fullName: System.Speech.Synthesis.Prompt
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: GetInstalledVoices()
  nameWithType: SpeechSynthesizer.GetInstalledVoices()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Synthesis.InstalledVoice}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<InstalledVoice>
  nameWithType: ReadOnlyCollection<InstalledVoice>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.InstalledVoice
    name: InstalledVoice
    nameWithType: InstalledVoice
    fullName: InstalledVoice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: GetInstalledVoices(CultureInfo)
  nameWithType: SpeechSynthesizer.GetInstalledVoices(CultureInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Synthesis.SpeechSynthesizer.Pause
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Pause()
  nameWithType: SpeechSynthesizer.Pause()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Pause()
- uid: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: PhonemeReached
  nameWithType: SpeechSynthesizer.PhonemeReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached
- uid: System.EventHandler{System.Speech.Synthesis.PhonemeReachedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<PhonemeReachedEventArgs>
  nameWithType: EventHandler<PhonemeReachedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.PhonemeReachedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.PhonemeReachedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.PhonemeReachedEventArgs
    name: PhonemeReachedEventArgs
    nameWithType: PhonemeReachedEventArgs
    fullName: PhonemeReachedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.Rate
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Rate
  nameWithType: SpeechSynthesizer.Rate
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Rate
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: RemoveLexicon(Uri)
  nameWithType: SpeechSynthesizer.RemoveLexicon(Uri)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(Uri)
- uid: System.Speech.Synthesis.SpeechSynthesizer.Resume
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Resume()
  nameWithType: SpeechSynthesizer.Resume()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Resume()
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoice(String)
  nameWithType: SpeechSynthesizer.SelectVoice(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoiceByHints(VoiceGender)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender)
- uid: System.Speech.Synthesis.VoiceGender
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceGender
  nameWithType: VoiceGender
  fullName: System.Speech.Synthesis.VoiceGender
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoiceByHints(VoiceGender,VoiceAge)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)
- uid: System.Speech.Synthesis.VoiceAge
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceAge
  nameWithType: VoiceAge
  fullName: System.Speech.Synthesis.VoiceAge
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
  nameWithType: SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo
  parent: System.Speech.AudioFormat
  isExternal: false
  name: SpeechAudioFormatInfo
  nameWithType: SpeechAudioFormatInfo
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToDefaultAudioDevice()
  nameWithType: SpeechSynthesizer.SetOutputToDefaultAudioDevice()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice()
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToNull()
  nameWithType: SpeechSynthesizer.SetOutputToNull()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull()
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToWaveFile(String)
  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToWaveFile(String,SpeechAudioFormatInfo)
  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToWaveStream(Stream)
  nameWithType: SpeechSynthesizer.SetOutputToWaveStream(Stream)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(Stream)
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Speak(Prompt)
  nameWithType: SpeechSynthesizer.Speak(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(Prompt)
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Speak(PromptBuilder)
  nameWithType: SpeechSynthesizer.Speak(PromptBuilder)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(PromptBuilder)
- uid: System.Speech.Synthesis.PromptBuilder
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptBuilder
  nameWithType: PromptBuilder
  fullName: System.Speech.Synthesis.PromptBuilder
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Speak(String)
  nameWithType: SpeechSynthesizer.Speak(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsync(Prompt)
  nameWithType: SpeechSynthesizer.SpeakAsync(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(Prompt)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsync(PromptBuilder)
  nameWithType: SpeechSynthesizer.SpeakAsync(PromptBuilder)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(PromptBuilder)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsync(String)
  nameWithType: SpeechSynthesizer.SpeakAsync(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsyncCancel(Prompt)
  nameWithType: SpeechSynthesizer.SpeakAsyncCancel(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(Prompt)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsyncCancelAll()
  nameWithType: SpeechSynthesizer.SpeakAsyncCancelAll()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll()
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakCompleted
  nameWithType: SpeechSynthesizer.SpeakCompleted
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted
- uid: System.EventHandler{System.Speech.Synthesis.SpeakCompletedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeakCompletedEventArgs>
  nameWithType: EventHandler<SpeakCompletedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.SpeakCompletedEventArgs
    name: SpeakCompletedEventArgs
    nameWithType: SpeakCompletedEventArgs
    fullName: SpeakCompletedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakProgress
  nameWithType: SpeechSynthesizer.SpeakProgress
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress
- uid: System.EventHandler{System.Speech.Synthesis.SpeakProgressEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeakProgressEventArgs>
  nameWithType: EventHandler<SpeakProgressEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.SpeakProgressEventArgs
    name: SpeakProgressEventArgs
    nameWithType: SpeakProgressEventArgs
    fullName: SpeakProgressEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakSsml(String)
  nameWithType: SpeechSynthesizer.SpeakSsml(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakSsmlAsync(String)
  nameWithType: SpeechSynthesizer.SpeakSsmlAsync(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakStarted
  nameWithType: SpeechSynthesizer.SpeakStarted
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted
- uid: System.EventHandler{System.Speech.Synthesis.SpeakStartedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeakStartedEventArgs>
  nameWithType: EventHandler<SpeakStartedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.SpeakStartedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.SpeakStartedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.SpeakStartedEventArgs
    name: SpeakStartedEventArgs
    nameWithType: SpeakStartedEventArgs
    fullName: SpeakStartedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.State
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: State
  nameWithType: SpeechSynthesizer.State
  fullName: System.Speech.Synthesis.SpeechSynthesizer.State
- uid: System.Speech.Synthesis.SynthesizerState
  parent: System.Speech.Synthesis
  isExternal: false
  name: SynthesizerState
  nameWithType: SynthesizerState
  fullName: System.Speech.Synthesis.SynthesizerState
- uid: System.Speech.Synthesis.SpeechSynthesizer.StateChanged
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: StateChanged
  nameWithType: SpeechSynthesizer.StateChanged
  fullName: System.Speech.Synthesis.SpeechSynthesizer.StateChanged
- uid: System.EventHandler{System.Speech.Synthesis.StateChangedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<StateChangedEventArgs>
  nameWithType: EventHandler<StateChangedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.StateChangedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.StateChangedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.StateChangedEventArgs
    name: StateChangedEventArgs
    nameWithType: StateChangedEventArgs
    fullName: StateChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: VisemeReached
  nameWithType: SpeechSynthesizer.VisemeReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached
- uid: System.EventHandler{System.Speech.Synthesis.VisemeReachedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<VisemeReachedEventArgs>
  nameWithType: EventHandler<VisemeReachedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.VisemeReachedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.VisemeReachedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.VisemeReachedEventArgs
    name: VisemeReachedEventArgs
    nameWithType: VisemeReachedEventArgs
    fullName: VisemeReachedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.Voice
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Voice
  nameWithType: SpeechSynthesizer.Voice
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Voice
- uid: System.Speech.Synthesis.VoiceInfo
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceInfo
  nameWithType: VoiceInfo
  fullName: System.Speech.Synthesis.VoiceInfo
- uid: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: VoiceChange
  nameWithType: SpeechSynthesizer.VoiceChange
  fullName: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange
- uid: System.EventHandler{System.Speech.Synthesis.VoiceChangeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<VoiceChangeEventArgs>
  nameWithType: EventHandler<VoiceChangeEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.VoiceChangeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.VoiceChangeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.VoiceChangeEventArgs
    name: VoiceChangeEventArgs
    nameWithType: VoiceChangeEventArgs
    fullName: VoiceChangeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.Volume
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Volume
  nameWithType: SpeechSynthesizer.Volume
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Volume
- uid: System.Speech.Synthesis.SpeechSynthesizer.#ctor*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeechSynthesizer
  nameWithType: SpeechSynthesizer.SpeechSynthesizer
- uid: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: AddLexicon
  nameWithType: SpeechSynthesizer.AddLexicon
- uid: System.Speech.Synthesis.SpeechSynthesizer.Dispose*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Dispose
  nameWithType: SpeechSynthesizer.Dispose
- uid: System.Speech.Synthesis.SpeechSynthesizer.Finalize*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Finalize
  nameWithType: SpeechSynthesizer.Finalize
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: GetCurrentlySpokenPrompt
  nameWithType: SpeechSynthesizer.GetCurrentlySpokenPrompt
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: GetInstalledVoices
  nameWithType: SpeechSynthesizer.GetInstalledVoices
- uid: System.Speech.Synthesis.SpeechSynthesizer.Pause*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Pause
  nameWithType: SpeechSynthesizer.Pause
- uid: System.Speech.Synthesis.SpeechSynthesizer.Rate*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Rate
  nameWithType: SpeechSynthesizer.Rate
- uid: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: RemoveLexicon
  nameWithType: SpeechSynthesizer.RemoveLexicon
- uid: System.Speech.Synthesis.SpeechSynthesizer.Resume*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Resume
  nameWithType: SpeechSynthesizer.Resume
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoice
  nameWithType: SpeechSynthesizer.SelectVoice
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoiceByHints
  nameWithType: SpeechSynthesizer.SelectVoiceByHints
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToAudioStream
  nameWithType: SpeechSynthesizer.SetOutputToAudioStream
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToDefaultAudioDevice
  nameWithType: SpeechSynthesizer.SetOutputToDefaultAudioDevice
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToNull
  nameWithType: SpeechSynthesizer.SetOutputToNull
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToWaveFile
  nameWithType: SpeechSynthesizer.SetOutputToWaveFile
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToWaveStream
  nameWithType: SpeechSynthesizer.SetOutputToWaveStream
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Speak
  nameWithType: SpeechSynthesizer.Speak
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsync
  nameWithType: SpeechSynthesizer.SpeakAsync
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsyncCancel
  nameWithType: SpeechSynthesizer.SpeakAsyncCancel
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsyncCancelAll
  nameWithType: SpeechSynthesizer.SpeakAsyncCancelAll
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakSsml
  nameWithType: SpeechSynthesizer.SpeakSsml
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakSsmlAsync
  nameWithType: SpeechSynthesizer.SpeakSsmlAsync
- uid: System.Speech.Synthesis.SpeechSynthesizer.State*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: State
  nameWithType: SpeechSynthesizer.State
- uid: System.Speech.Synthesis.SpeechSynthesizer.Voice*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Voice
  nameWithType: SpeechSynthesizer.Voice
- uid: System.Speech.Synthesis.SpeechSynthesizer.Volume*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Volume
  nameWithType: SpeechSynthesizer.Volume
