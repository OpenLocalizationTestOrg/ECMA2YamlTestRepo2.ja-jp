### YamlMime:ManagedReference
items:
- uid: System.Web.Compilation.ExpressionBuilder
  id: ExpressionBuilder
  children:
  - System.Web.Compilation.ExpressionBuilder.#ctor
  - System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  - System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  - System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)
  - System.Web.Compilation.ExpressionBuilder.SupportsEvaluate
  langs:
  - csharp
  name: ExpressionBuilder
  nameWithType: ExpressionBuilder
  fullName: System.Web.Compilation.ExpressionBuilder
  type: Class
  summary: "ページの解析中に式を評価します。"
  remarks: "ExpressionBuilder クラスは、式ビルダーの基本クラスなど、<xref:System.Web.Compilation.AppSettingsExpressionBuilder>ページの解析中にコード式を作成するクラス</xref:System.Web.Compilation.AppSettingsExpressionBuilder>。       式ビルダーは、宣言型の式を解析し、コントロールのプロパティにバインドされている値を取得するコードを作成します。 コンパイルなしのシナリオでは、コンパイルなし機能をサポートする式ビルダーは、実行時に式を評価します。       ページのパーサーが文字列で区切られた式を検出すると`<%$ %>`文字列のプレフィックスに基づく式の式ビルダーが作成されます。 プレフィックスは、コロン (:) の左側にある文字列の部分です。 たとえば、パーサーを検出した場合、文字列`<%$ ConnectionStrings:MessageDB %>`、作成、<xref:System.Web.Compilation.ConnectionStringsExpressionBuilder>オブジェクト</xref:System.Web.Compilation.ConnectionStringsExpressionBuilder>。 プレフィックスは、式ビルダーで Web.config ファイルに関連付け、<xref:System.Web.Configuration.CompilationSection.ExpressionBuilders%2A>セクション</xref:System.Web.Configuration.CompilationSection.ExpressionBuilders%2A>。       宣言型の式の右辺は、評価のため、式ビルダーに渡されます。 上書き、<xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A>ページにコンパイルされるコードを生成する方法</xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A>。       またをオーバーライドする必要がある、カスタム式ビルダーがコンパイルされていないページ上でアクティブにする場合は、<xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A>式の結果を表すオブジェクトを返すメソッド</xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A>。 上書きすることも必要があります、<xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A>でカスタム式ビルダーでは、コンパイルなしページはサポートを示すプロパティです</xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A>。       プロパティとメソッドを選択し、式エディターを実装することでのデザイン時にコントロールのプロパティに関連付けられている式を評価するためのセットを定義することができます。 エディターは、クラス レベルのメタデータを式ビルダーでマークされます。 詳細については、 <xref:System.Web.UI.Design.ExpressionEditor>。</xref:System.Web.UI.Design.ExpressionEditor>を参照してください。"
  example:
  - "The following code examples demonstrate how to build a custom expression builder by implementing the ExpressionBuilder abstract class. This implementation of ExpressionBuilder returns an evaluated statement that is passed to the expression. To run this example, you must first register the custom expression builder in the Web.config file. The first code example demonstrates how to register the custom expression builder in the Web.config file.  \n  \n```  \n<configuration>  \n    <system.web>  \n       <compilation>  \n          <expressionBuilders>  \n              <add expressionPrefix=\"MyCustomExpression\"  \n               type=\"MyCustomExpressionBuilder\"/>  \n          </expressionBuilders>  \n       </compilation>  \n    </system.web>  \n</configuration>  \n```  \n  \n The second code example demonstrates how to reference the expression in an .aspx file.  \n  \n```  \n<asp:Label ID=\"Label1\" runat=\"server\"   \nText=\"<%$ MyCustomExpression:Hello, world! %>\" />  \n```  \n  \n The third code example demonstrates how to develop a customized expression builder by deriving from ExpressionBuilder. To run this code example, you must place the class in the App_Code folder.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public abstract class ExpressionBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Compilation.ExpressionBuilder.#ctor
  id: '#ctor'
  parent: System.Web.Compilation.ExpressionBuilder
  langs:
  - csharp
  name: ExpressionBuilder()
  nameWithType: ExpressionBuilder.ExpressionBuilder()
  fullName: System.Web.Compilation.ExpressionBuilder.ExpressionBuilder()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.Compilation.ExpressionBuilder&quot;> </xref>クラスです。"
  remarks: "<xref:System.Web.Compilation.ExpressionBuilder>クラスは抽象クラスのインスタンスを作成することはできません<xref:System.Web.Compilation.ExpressionBuilder>ExpressionBuilder コンス トラクターを使用して直接</xref:System.Web.Compilation.ExpressionBuilder></xref:System.Web.Compilation.ExpressionBuilder>。"
  syntax:
    content: protected ExpressionBuilder ();
    parameters: []
  overload: System.Web.Compilation.ExpressionBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  id: EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  parent: System.Web.Compilation.ExpressionBuilder
  langs:
  - csharp
  name: EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
  nameWithType: ExpressionBuilder.EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
  fullName: System.Web.Compilation.ExpressionBuilder.EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "派生クラスでオーバーライドされると、評価された式を表すオブジェクトを返します。"
  remarks: "場合は、<xref:System.Web.Compilation.ExpressionBuilder>コンパイルなし機能をサポートするページ上でアクティブにするオブジェクト、式の評価メソッドをオーバーライドすることができます、<xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A>プロパティ</xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A></xref:System.Web.Compilation.ExpressionBuilder>。 式の評価方法は、現在の式の評価を返す必要があります。"
  example:
  - "The following code example demonstrates how to use the overridden EvaluateExpression method to return an evaluated expression.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public virtual object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);
    parameters:
    - id: target
      type: System.Object
      description: "式を表すオブジェクト。"
    - id: entry
      type: System.Web.UI.BoundPropertyEntry
      description: "式でバインドされるプロパティに関する情報を表すオブジェクト。"
    - id: parsedData
      type: System.Object
      description: "<xref:System.Web.Compilation.ExpressionBuilder.ParseExpression*>。</xref:System.Web.Compilation.ExpressionBuilder.ParseExpression*>によって返されるデータを解析するオブジェクトを含む"
    - id: context
      type: System.Web.Compilation.ExpressionBuilderContext
      description: "式の評価にコンテキスト情報です。"
    return:
      type: System.Object
      description: "評価した式を表すオブジェクトそれ以外の場合、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>継承するオブジェクトが式の評価を実装していない場合。"
  overload: System.Web.Compilation.ExpressionBuilder.EvaluateExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  id: GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  parent: System.Web.Compilation.ExpressionBuilder
  langs:
  - csharp
  name: GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
  nameWithType: ExpressionBuilder.GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
  fullName: System.Web.Compilation.ExpressionBuilder.GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "派生クラスでオーバーライドされると、式の評価結果を取得するページの実行中に使用されるコードを返します。"
  remarks: "継承するクラス、<xref:System.Web.Compilation.ExpressionBuilder>クラス GetCodeExpression 抽象メソッドを実装する必要があります</xref:System.Web.Compilation.ExpressionBuilder>。"
  example:
  - "The following code example demonstrates how to return a <xref:System.CodeDom.CodeExpression> object by overriding the GetCodeExpression method.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public abstract System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);
    parameters:
    - id: entry
      type: System.Web.UI.BoundPropertyEntry
      description: "式でバインドされるプロパティに関する情報を表すオブジェクト。"
    - id: parsedData
      type: System.Object
      description: "<xref:System.Web.Compilation.ExpressionBuilder.ParseExpression*>。</xref:System.Web.Compilation.ExpressionBuilder.ParseExpression*>によって返されるデータを解析するオブジェクトを含む"
    - id: context
      type: System.Web.Compilation.ExpressionBuilderContext
      description: "式の評価にコンテキスト情報です。"
    return:
      type: System.CodeDom.CodeExpression
      description: "A <xref href=&quot;System.CodeDom.CodeExpression&quot;> </xref>プロパティの割り当てに使用されます。"
  overload: System.Web.Compilation.ExpressionBuilder.GetCodeExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)
  id: ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)
  parent: System.Web.Compilation.ExpressionBuilder
  langs:
  - csharp
  name: ParseExpression(String,Type,ExpressionBuilderContext)
  nameWithType: ExpressionBuilder.ParseExpression(String,Type,ExpressionBuilderContext)
  fullName: System.Web.Compilation.ExpressionBuilder.ParseExpression(String,Type,ExpressionBuilderContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "派生クラスでオーバーライドされると、解析された式を表すオブジェクトを返します。"
  remarks: "派生クラスでオーバーライドされると、このメソッドは、式を解析し、として使用できるオブジェクトとして返します、`parsedData`内のパラメーター、<xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A>または<xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A>メソッド</xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A></xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A>。"
  syntax:
    content: public virtual object ParseExpression (string expression, Type propertyType, System.Web.Compilation.ExpressionBuilderContext context);
    parameters:
    - id: expression
      type: System.String
      description: "宣言型の式の値。"
    - id: propertyType
      type: System.Type
      description: "プロパティの型は、式にバインドします。"
    - id: context
      type: System.Web.Compilation.ExpressionBuilderContext
      description: "式の評価にコンテキスト情報です。"
    return:
      type: System.Object
      description: "<xref:System.Object>; 式の解析済み表現を格納している場合は、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ParseExpression が実装されていない場合</xref:System.Object>。"
  overload: System.Web.Compilation.ExpressionBuilder.ParseExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.ExpressionBuilder.SupportsEvaluate
  id: SupportsEvaluate
  parent: System.Web.Compilation.ExpressionBuilder
  langs:
  - csharp
  name: SupportsEvaluate
  nameWithType: ExpressionBuilder.SupportsEvaluate
  fullName: System.Web.Compilation.ExpressionBuilder.SupportsEvaluate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "派生クラスでオーバーライドされるを示す値を返します。 かどうか、現在<xref href=&quot;System.Web.Compilation.ExpressionBuilder&quot;></xref>オブジェクトは、コンパイルなしのページをサポートしています。"
  remarks: "SupportsEvaluate プロパティの既定値は`false`します。 コンパイルなしのページをサポートするために、両方をオーバーライドする必要があります、<xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A>メソッドおよび SupportsEvaluate プロパティ</xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A>。"
  example:
  - "The following code example demonstrates how to use the SupportsEvaluate property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public virtual bool SupportsEvaluate { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Web.Compilation.ExpressionBuilder&quot;> </xref>式の評価をサポートしています。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Compilation.ExpressionBuilder.SupportsEvaluate*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Compilation.ExpressionBuilder.#ctor
  parent: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: ExpressionBuilder()
  nameWithType: ExpressionBuilder.ExpressionBuilder()
  fullName: System.Web.Compilation.ExpressionBuilder.ExpressionBuilder()
- uid: System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  parent: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
  nameWithType: ExpressionBuilder.EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
  fullName: System.Web.Compilation.ExpressionBuilder.EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
- uid: System.Web.UI.BoundPropertyEntry
  parent: System.Web.UI
  isExternal: false
  name: BoundPropertyEntry
  nameWithType: BoundPropertyEntry
  fullName: System.Web.UI.BoundPropertyEntry
- uid: System.Web.Compilation.ExpressionBuilderContext
  parent: System.Web.Compilation
  isExternal: false
  name: ExpressionBuilderContext
  nameWithType: ExpressionBuilderContext
  fullName: System.Web.Compilation.ExpressionBuilderContext
- uid: System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  parent: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
  nameWithType: ExpressionBuilder.GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
  fullName: System.Web.Compilation.ExpressionBuilder.GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
- uid: System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)
  parent: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: ParseExpression(String,Type,ExpressionBuilderContext)
  nameWithType: ExpressionBuilder.ParseExpression(String,Type,ExpressionBuilderContext)
  fullName: System.Web.Compilation.ExpressionBuilder.ParseExpression(String,Type,ExpressionBuilderContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Compilation.ExpressionBuilder.SupportsEvaluate
  parent: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: SupportsEvaluate
  nameWithType: ExpressionBuilder.SupportsEvaluate
  fullName: System.Web.Compilation.ExpressionBuilder.SupportsEvaluate
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Compilation.ExpressionBuilder.#ctor*
  parent: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: ExpressionBuilder
  nameWithType: ExpressionBuilder.ExpressionBuilder
- uid: System.Web.Compilation.ExpressionBuilder.EvaluateExpression*
  parent: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: EvaluateExpression
  nameWithType: ExpressionBuilder.EvaluateExpression
- uid: System.Web.Compilation.ExpressionBuilder.GetCodeExpression*
  parent: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: GetCodeExpression
  nameWithType: ExpressionBuilder.GetCodeExpression
- uid: System.Web.Compilation.ExpressionBuilder.ParseExpression*
  parent: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: ParseExpression
  nameWithType: ExpressionBuilder.ParseExpression
- uid: System.Web.Compilation.ExpressionBuilder.SupportsEvaluate*
  parent: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: SupportsEvaluate
  nameWithType: ExpressionBuilder.SupportsEvaluate
