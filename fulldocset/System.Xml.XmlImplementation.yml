### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlImplementation
  id: XmlImplementation
  children:
  - System.Xml.XmlImplementation.#ctor
  - System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)
  - System.Xml.XmlImplementation.CreateDocument
  - System.Xml.XmlImplementation.HasFeature(System.String,System.String)
  langs:
  - csharp
  name: XmlImplementation
  nameWithType: XmlImplementation
  fullName: System.Xml.XmlImplementation
  type: Class
  summary: "一連のコンテキストを定義<xref href=&quot;System.Xml.XmlDocument&quot;></xref>オブジェクト。"
  remarks: "`XmlDocument`同じ実装から作成されるオブジェクトが同じ<xref:System.Xml.XmlNameTable>。</xref:System.Xml.XmlNameTable>を共有します。 これにより、ユーザーは、オブジェクトの間で属性と要素の名前をより効率的に比較できます。       ただし、`XmlDocument`オブジェクトは&1; つのドキュメントからノードを移動する、同じ実装を共有、使用する必要があります、<xref:System.Xml.XmlDocument.ImportNode%2A>メソッド</xref:System.Xml.XmlDocument.ImportNode%2A>。"
  syntax:
    content: public class XmlImplementation
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.XmlImplementation.#ctor
  id: '#ctor'
  parent: System.Xml.XmlImplementation
  langs:
  - csharp
  name: XmlImplementation()
  nameWithType: XmlImplementation.XmlImplementation()
  fullName: System.Xml.XmlImplementation.XmlImplementation()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref>クラスです。"
  syntax:
    content: public XmlImplementation ();
    parameters: []
  overload: System.Xml.XmlImplementation.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.XmlImplementation
  langs:
  - csharp
  name: XmlImplementation(XmlNameTable)
  nameWithType: XmlImplementation.XmlImplementation(XmlNameTable)
  fullName: System.Xml.XmlImplementation.XmlImplementation(XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref>クラス、<xref:System.Xml.XmlNameTable>指定します</xref:System.Xml.XmlNameTable>。"
  syntax:
    content: public XmlImplementation (System.Xml.XmlNameTable nt);
    parameters:
    - id: nt
      type: System.Xml.XmlNameTable
      description: "<xref:System.Xml.XmlNameTable>オブジェクト</xref:System.Xml.XmlNameTable>。"
  overload: System.Xml.XmlImplementation.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlImplementation.CreateDocument
  id: CreateDocument
  parent: System.Xml.XmlImplementation
  langs:
  - csharp
  name: CreateDocument()
  nameWithType: XmlImplementation.CreateDocument()
  fullName: System.Xml.XmlImplementation.CreateDocument()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "新たに作成<xref href=&quot;System.Xml.XmlDocument&quot;></xref>です。"
  remarks: "`XmlDocument`同じ実装から作成されたオブジェクトは、同じ名前テーブルを共有します。 これにより、ユーザーは、オブジェクトの間で属性と要素の名前をより効率的に比較できます。       ただし、`XmlDocument`オブジェクトは&1; つのドキュメントからノードを移動する、同じ実装を共有、使用する必要があります、<xref:System.Xml.XmlDocument.ImportNode%2A>メソッド</xref:System.Xml.XmlDocument.ImportNode%2A>。"
  example:
  - "The following example creates two `XmlDocument` objects from the same implementation.  \n  \n [!code-cs[Classic WebData XmlImplementation.CreateDocument Example#1](~/add/codesnippet/csharp/m-system.xml.xmlimplemen_1.cs)]\n [!code-vb[Classic WebData XmlImplementation.CreateDocument Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlimplemen_1.vb)]\n [!code-cpp[Classic WebData XmlImplementation.CreateDocument Example#1](~/add/codesnippet/cpp/m-system.xml.xmlimplemen_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlDocument CreateDocument ();
    parameters: []
    return:
      type: System.Xml.XmlDocument
      description: "新しい<xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;></xref>オブジェクト。"
  overload: System.Xml.XmlImplementation.CreateDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlImplementation.HasFeature(System.String,System.String)
  id: HasFeature(System.String,System.String)
  parent: System.Xml.XmlImplementation
  langs:
  - csharp
  name: HasFeature(String,String)
  nameWithType: XmlImplementation.HasFeature(String,String)
  fullName: System.Xml.XmlImplementation.HasFeature(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "ドキュメント オブジェクト モデル (DOM) の実装は、特定の機能を実装するかどうか。"
  syntax:
    content: public bool HasFeature (string strFeature, string strVersion);
    parameters:
    - id: strFeature
      type: System.String
      description: "テスト機能のパッケージ名。 この名前は区別されません。"
    - id: strVersion
      type: System.String
      description: "これは、テスト パッケージの名前のバージョン番号です。 バージョンが指定されていない場合 (<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>)、によって返されるメソッドを任意のバージョンの機能をサポートする<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定したバージョンで、機能が実装されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。       次の表に、発生の組み合わせ<xref uid=&quot;langword_csharp_HasFeature&quot; name=&quot;HasFeature&quot; href=&quot;&quot;></xref>を返す<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。       <table><thead><tr><th> strFeature       </th><th> strVersion       </th></tr></thead><tbody><tr><td> XML       </td><td> 1.0       </td></tr><tr><td> XML       </td><td> 2.0 以降       </td></tr></tbody></table>"
  overload: System.Xml.XmlImplementation.HasFeature*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.XmlImplementation.#ctor
  parent: System.Xml.XmlImplementation
  isExternal: false
  name: XmlImplementation()
  nameWithType: XmlImplementation.XmlImplementation()
  fullName: System.Xml.XmlImplementation.XmlImplementation()
- uid: System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)
  parent: System.Xml.XmlImplementation
  isExternal: false
  name: XmlImplementation(XmlNameTable)
  nameWithType: XmlImplementation.XmlImplementation(XmlNameTable)
  fullName: System.Xml.XmlImplementation.XmlImplementation(XmlNameTable)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XmlImplementation.CreateDocument
  parent: System.Xml.XmlImplementation
  isExternal: false
  name: CreateDocument()
  nameWithType: XmlImplementation.CreateDocument()
  fullName: System.Xml.XmlImplementation.CreateDocument()
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlImplementation.HasFeature(System.String,System.String)
  parent: System.Xml.XmlImplementation
  isExternal: false
  name: HasFeature(String,String)
  nameWithType: XmlImplementation.HasFeature(String,String)
  fullName: System.Xml.XmlImplementation.HasFeature(String,String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlImplementation.#ctor*
  parent: System.Xml.XmlImplementation
  isExternal: false
  name: XmlImplementation
  nameWithType: XmlImplementation.XmlImplementation
- uid: System.Xml.XmlImplementation.CreateDocument*
  parent: System.Xml.XmlImplementation
  isExternal: false
  name: CreateDocument
  nameWithType: XmlImplementation.CreateDocument
- uid: System.Xml.XmlImplementation.HasFeature*
  parent: System.Xml.XmlImplementation
  isExternal: false
  name: HasFeature
  nameWithType: XmlImplementation.HasFeature
