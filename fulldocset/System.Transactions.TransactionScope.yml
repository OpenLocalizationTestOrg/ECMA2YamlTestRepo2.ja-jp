### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionScope
  id: TransactionScope
  children:
  - System.Transactions.TransactionScope.#ctor
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.Complete
  - System.Transactions.TransactionScope.Dispose
  langs:
  - csharp
  name: TransactionScope
  nameWithType: TransactionScope
  fullName: System.Transactions.TransactionScope
  type: Class
  summary: "コード ブロックがトランザクションになります。 このクラスは継承できません。"
  remarks: "<xref:System.Transactions>インフラストラクチャでは明示的なプログラミング モデルに基づく、<xref:System.Transactions.Transaction>クラスだけでなくトランザクションを自動的にインフラストラクチャを管理する、TransactionScope クラスを使用する暗黙的なプログラミング モデル</xref:System.Transactions.Transaction></xref:System.Transactions>。      > [!IMPORTANT] > のアンビエント トランザクションのコンテキストが自動的に管理できるように、TransactionScope クラスを使用して暗黙のトランザクションを作成することをお勧めします。 TransactionScope を使用することも必要がありますと<xref:System.Transactions.DependentTransaction>複数の関数呼び出しまたは複数のスレッド呼び出しの間で同じトランザクションの使用を必要とするアプリケーションのクラス</xref:System.Transactions.DependentTransaction>。 このモデルの詳細については、次を参照してください。、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)トピックです。 トランザクション アプリケーションの作成の詳細については、次を参照してください。 [A トランザクション アプリケーションの記述](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)です。       TransactionScope をインスタンス化時に、`new`ステートメントでは、トランザクション マネージャーは、どのトランザクションに参加するを決定します。 いったん決定されると、スコープは常にそのトランザクションに参加します。 2 つの要因に基づいて決定された: の値と、アンビエント トランザクションが存在するかどうか、`TransactionScopeOption`コンス トラクターのパラメーターです。  アンビエント トランザクションで、コードが実行されるトランザクションです。 静的<xref:System.Transactions.Transaction.Current%2A><xref:System.Transactions.Transaction>クラス</xref:System.Transactions.Transaction>のプロパティ</xref:System.Transactions.Transaction.Current%2A>を呼び出すことによって、アンビエント トランザクションへの参照を取得することができます。 このパラメーターの使用方法の詳細については、の「トランザクション フローの管理」セクションを参照してください、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)トピックです。       トランザクション スコープ内で例外が発生しない場合 (つまり、TransactionScope の初期化の間でオブジェクトと、呼び出し元の<xref:System.Transactions.TransactionScope.Dispose%2A>メソッド)、スコープが参加しているトランザクションの実行を許可し、</xref:System.Transactions.TransactionScope.Dispose%2A> 。 トランザクション スコープ内で例外が発生、参加しているトランザクションはロールバックされます。       アプリケーションには、すべての作業が完了すると、トランザクションで実行する、呼び出す必要があります、<xref:System.Transactions.TransactionScope.Complete%2A>トランザクション マネージャーがトランザクションをコミットする許容であることを通知するために&1; 回だけ使用するメソッド</xref:System.Transactions.TransactionScope.Complete%2A>。 このメソッドの呼び出しに失敗すると、トランザクションが中止されます。       呼び出し、<xref:System.Transactions.TransactionScope.Dispose%2A>メソッドは、トランザクション スコープの終了を示します</xref:System.Transactions.TransactionScope.Dispose%2A>。 このメソッドの呼び出し後に発生する例外をトランザクションに影響しない可能性があります。       値を変更する場合<xref:System.Transactions.Transaction.Current%2A>、スコープ内で、例外がスロー<xref:System.Transactions.TransactionScope.Dispose%2A>と呼びます</xref:System.Transactions.TransactionScope.Dispose%2A></xref:System.Transactions.Transaction.Current%2A>。 ただし、スコープの最後に、前の値に戻されます。 さらに、呼び出した場合<xref:System.Transactions.TransactionScope.Dispose%2A>で<xref:System.Transactions.Transaction.Current%2A>スコープの最後に、トランザクションを作成したトランザクション スコープ内部トランザクションが中止された</xref:System.Transactions.Transaction.Current%2A></xref:System.Transactions.TransactionScope.Dispose%2A>。"
  example:
  - "The following example demonstrates how to use the TransactionScope class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/t-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/t-system.transactions.tr_0_1.cs)]"
  syntax:
    content: 'public sealed class TransactionScope : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor
  id: '#ctor'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターを作成新しいトランザクション スコープのトランザクション スコープ オプションを使用して<xref:System.Transactions.TransactionScopeOption>。</xref:System.Transactions.TransactionScopeOption>に等しい つまり、新しいスコープでトランザクションが必要な&1; つが既に存在する場合、そのアンビエント トランザクションが使用します。 それ以外の場合、スコープに入る前に新しいトランザクションを作成します。"
  syntax:
    content: public TransactionScope ();
    parameters: []
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  id: '#ctor(System.Transactions.Transaction)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>クラスし、スコープ内で実行されたトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクション、として指定されたトランザクションを設定します。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "スコープ内で行うトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクションとして設定するトランザクションです。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 以降のバージョンでサポート]      新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>クラス、非同期フローを指定したオプションを使用します。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref>タスクまたは async と await の .NET 非同期プログラミング パターンを使用する場合スレッド継続間、トランザクション スコープに関連付けられているアンビエント トランザクションをフローかどうかを表す列挙体です。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  id: '#ctor(System.Transactions.TransactionScopeOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>指定した要件を持つクラス。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref>このトランザクションのスコープに関連付けられているトランザクションの要件を記述する列挙です。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>指定したタイムアウト値を持つクラスし、スコープ内で実行されたトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクション、として指定されたトランザクションを設定します。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "スコープ内で行うトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクションとして設定するトランザクションです。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>するまで、トランザクション スコープがタイムアウトになると、トランザクションを中止します</xref:System.TimeSpan>。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 以降のバージョンでサポート]      新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>クラスし、スコープ内で実行されたトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクション、として指定されたトランザクションを設定します。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "スコープ内で行うトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクションとして設定するトランザクションです。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref>タスクまたは async と await の .NET 非同期プログラミング パターンを使用する場合スレッド継続間、トランザクション スコープに関連付けられているアンビエント トランザクションをフローかどうかを表す列挙体です。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>要件と指定したタイムアウト値を持つクラス。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref>このトランザクションのスコープに関連付けられているトランザクションの要件を記述する列挙です。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>するまで、トランザクション スコープがタイムアウトになると、トランザクションを中止します</xref:System.TimeSpan>。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>指定した要件を持つクラス。"
  remarks: "使用する場合、`transactionOptions`パラメーターを指定、 <xref:System.Transactions.IsolationLevel>、スコープ後でトランザクションを作成して、新しいトランザクションが、指定された分離レベルに関連付けられています</xref:System.Transactions.IsolationLevel>。 分離レベルがトランザクションと共に渡された場合は、トランザクションは、同じ分離レベルが必要または、例外がスローされます。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref>このトランザクションのスコープに関連付けられているトランザクションの要件を記述する列挙です。"
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>構造体の新しいトランザクションが作成された場合に使用するトランザクションのオプションについて説明します。 既存のトランザクションを使用すると、このパラメーターのタイムアウト値は、トランザクション スコープに適用されます。 その時点では、スコープが破棄される前に期限が切れると、トランザクションは中止されます。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 以降のバージョンでサポート]      新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>指定した要件と非同期のフローのオプションを持つクラス。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref>このトランザクションのスコープに関連付けられているトランザクションの要件を記述する列挙です。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref>タスクまたは async と await の .NET 非同期プログラミング パターンを使用する場合スレッド継続間、トランザクション スコープに関連付けられているアンビエント トランザクションをフローかどうかを表す列挙体です。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>指定したタイムアウト値と COM + 相互運用性要件を持つクラスし、スコープ内で実行されたトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクション、として指定されたトランザクションを設定します。"
  remarks: '**注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction>されないようにするで、信頼されていないコードから呼び出されますただし、直前の呼び出し元だけが所有する必要が、`FullTrust`アクセス許可セット。</xref:System.Security.Permissions.SecurityAction> 。'
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "スコープ内で行うトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクションとして設定するトランザクションです。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>するまで、トランザクション スコープがタイムアウトになると、トランザクションを中止します</xref:System.TimeSpan>。"
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;> </xref>関連付けられているトランザクションが COM + トランザクションと対話する方法を説明する列挙です。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 以降のバージョンでサポート]      新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>指定したタイムアウト値を持つクラスし、スコープ内で実行されたトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクション、として指定されたトランザクションを設定します。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "スコープ内で行うトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクションとして設定するトランザクションです。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>するまで、トランザクション スコープがタイムアウトになると、トランザクションを中止します</xref:System.TimeSpan>。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref>タスクまたは async と await の .NET 非同期プログラミング パターンを使用する場合スレッド継続間、トランザクション スコープに関連付けられているアンビエント トランザクションをフローかどうかを表す列挙体です。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 以降のバージョンでサポート]      新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>クラスを指定したタイムアウト値、要件、および非同期フロー オプションを使用します。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref>このトランザクションのスコープに関連付けられているトランザクションの要件を記述する列挙です。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>するまで、トランザクション スコープがタイムアウトになると、トランザクションを中止します</xref:System.TimeSpan>。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref>タスクまたは async と await の .NET 非同期プログラミング パターンを使用する場合スレッド継続間、トランザクション スコープに関連付けられているアンビエント トランザクションをフローかどうかを表す列挙体です。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>指定したスコープと COM + 相互運用性の要件、およびトランザクション オプションを持つクラス。"
  remarks: "使用する場合、`transactionOptions`パラメーターを指定、 <xref:System.Transactions.IsolationLevel>、スコープ後でトランザクションを作成して、新しいトランザクションが、指定された分離レベルに関連付けられています</xref:System.Transactions.IsolationLevel>。 分離レベルがトランザクションと共に渡された場合は、トランザクションは、同じ分離レベルが必要または、例外がスローされます。       **注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction>されないようにするで、信頼されていないコードから呼び出されますただし、直前の呼び出し元だけが所有する必要が、`FullTrust`アクセス許可セット。</xref:System.Security.Permissions.SecurityAction> 。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref>このトランザクションのスコープに関連付けられているトランザクションの要件を記述する列挙です。"
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>構造体の新しいトランザクションが作成された場合に使用するトランザクションのオプションについて説明します。 既存のトランザクションを使用すると、このパラメーターのタイムアウト値は、トランザクション スコープに適用されます。 その時点では、スコープが破棄される前に期限が切れると、トランザクションは中止されます。"
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;> </xref>関連付けられているトランザクションが COM + トランザクションと対話する方法を説明する列挙です。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[.NET Framework 4.5.1 以降のバージョンでサポート]      新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.TransactionScope&quot;> </xref>指定した要件と非同期のフローのオプションを持つクラス。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeOption&quot;> </xref>このトランザクションのスコープに関連付けられているトランザクションの要件を記述する列挙です。"
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>構造体の新しいトランザクションが作成された場合に使用するトランザクションのオプションについて説明します。 既存のトランザクションを使用すると、このパラメーターのタイムアウト値は、トランザクション スコープに適用されます。 その時点では、スコープが破棄される前に期限が切れると、トランザクションは中止されます。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "インスタンス、 <xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;> </xref>タスクまたは async と await の .NET 非同期プログラミング パターンを使用する場合スレッド継続間、トランザクション スコープに関連付けられているアンビエント トランザクションをフローかどうかを表す列挙体です。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Complete
  id: Complete
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "スコープ内のすべての操作が正常に完了したことを示します。"
  remarks: "問題がなければ、スコープ内のすべての操作が正常に完了した、すべてのリソースの状態に一貫性があり、トランザクションをコミットすることは、そのトランザクション マネージャーを通知するために&1; 回だけ、このメソッドを呼び出す必要があります。 最後のステートメントとして呼び出しを配置することを非常に良好である、`using`ブロックします。       このメソッドの使用方法の詳細については、次を参照してください。、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)トピックです。       このメソッドの呼び出しに失敗すると、トランザクション マネージャー、システム障害として解釈するため、またはトランザクションのスコープ内でスローされる例外に、トランザクションが中止します。 ただし、このメソッドを呼び出すことも、トランザクションのコミットは保証されませんを注意する必要があります。 トランザクション マネージャーにステータスを通知する手段だけを実行することをお勧めします。 このメソッドを呼び出した後、アクセスできなくなります経由でのアンビエント トランザクション、<xref:System.Transactions.Transaction.Current%2A>プロパティ、およびスローされる例外になりますしようとしています</xref:System.Transactions.Transaction.Current%2A>。       リソース マネージャー間のコミットの実際の作業のように、`End Using`ステートメント場合、<xref:System.Transactions.TransactionScope>オブジェクトは、トランザクションを作成します</xref:System.Transactions.TransactionScope>。 コミットがされるたびに発生したトランザクションを作成しなかった場合<xref:System.Transactions.CommittableTransaction.Commit%2A>の所有者によって呼び出される、<xref:System.Transactions.CommittableTransaction>オブジェクト</xref:System.Transactions.CommittableTransaction></xref:System.Transactions.CommittableTransaction.Commit%2A>。 その時点でトランザクション マネージャーのリソース マネージャーを呼び出してし、commit または rollback をでこのメソッドが呼び出されたかどうかに基づいてのいずれかを知らせる、<xref:System.Transactions.TransactionScope>オブジェクト</xref:System.Transactions.TransactionScope>。"
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_1_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_1_1.cs)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.TransactionScope.Complete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このメソッドは既に&1; 回呼び出されています。"
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Dispose
  id: Dispose
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクション スコープを終了します。"
  remarks: "このメソッドを呼び出すと、トランザクション スコープの末尾をマークします。 場合、<xref:System.Transactions.TransactionScope>オブジェクトは、トランザクションを作成し、 <xref:System.Transactions.TransactionScope.Complete%2A>、スコープで呼び出されましたが、<xref:System.Transactions.TransactionScope>オブジェクトが、このメソッドが呼び出されたときに、トランザクションをコミットしようとしています。</xref:System.Transactions.TransactionScope> </xref:System.Transactions.TransactionScope.Complete%2A> </xref:System.Transactions.TransactionScope> 。       C# を使用して`using`構築により、例外が発生した場合でもこのメソッドを呼び出すことです。 このメソッドの呼び出し後に発生する例外をトランザクションに影響しない可能性があります。 このメソッドも、アンビエント トランザクションを元の状態を復元します。 A<xref:System.Transactions.TransactionAbortedException>が、トランザクションが実際にコミットされていない場合にスローされます</xref:System.Transactions.TransactionAbortedException>。       このメソッドは、同期トランザクションをコミットまたは中止するまでブロックします。 このため、Windows フォーム (WinForm) のアプリケーションでこのメソッドを使用する場合に非常に注意が必要またはデッドロックが発生することができます。 (たとえば、ボタンをクリックすると)、1 つの WinForm コントロール イベント内でこのメソッドを呼び出すし、同期を使用する場合<xref:System.Windows.Forms.Control.Invoke%2A>、デッドロックが発生するトランザクションの処理中のいくつかの UI タスク (たとえば、変化する色) を実行するコントロールを送信するためのメソッド</xref:System.Windows.Forms.Control.Invoke%2A>。 これは、ため、<xref:System.Windows.Forms.Control.Invoke%2A>メソッドは同期であり、UI スレッドには、そのジョブが完了するまで、ワーカー スレッドをブロックします</xref:System.Windows.Forms.Control.Invoke%2A>。 ただし、このシナリオでは、UI スレッドも待機しているワーカー スレッドがトランザクションをコミットします。 結果とは、[なし] を続行できませんされ、スコープは、コミットの終了を無期限に待機です。 使用する必要があります<xref:System.Windows.Forms.Control.BeginInvoke%2A>なく<xref:System.Windows.Forms.Control.Invoke%2A>可能な限り、非同期、したがってにくくなりましたデッドロックになっているためです。</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A> 。       このメソッドの使用方法の詳細については、次を参照してください。、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)トピックです。"
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_0_1.cs)]"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Transactions.TransactionScope.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionScope.#ctor
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScopeAsyncFlowOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeAsyncFlowOption
  nameWithType: TransactionScopeAsyncFlowOption
  fullName: System.Transactions.TransactionScopeAsyncFlowOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
- uid: System.Transactions.TransactionScopeOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeOption
  nameWithType: TransactionScopeOption
  fullName: System.Transactions.TransactionScopeOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
- uid: System.Transactions.EnterpriseServicesInteropOption
  parent: System.Transactions
  isExternal: false
  name: EnterpriseServicesInteropOption
  nameWithType: EnterpriseServicesInteropOption
  fullName: System.Transactions.EnterpriseServicesInteropOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.Complete
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
- uid: System.Transactions.TransactionScope.Dispose
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
- uid: System.Transactions.TransactionScope.#ctor*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope
  nameWithType: TransactionScope.TransactionScope
- uid: System.Transactions.TransactionScope.Complete*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete
  nameWithType: TransactionScope.Complete
- uid: System.Transactions.TransactionScope.Dispose*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose
  nameWithType: TransactionScope.Dispose
