### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultValue
  id: SemanticResultValue
  children:
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  - System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultValue
  nameWithType: SemanticResultValue
  fullName: System.Speech.Recognition.SemanticResultValue
  type: Class
  summary: "セマンティックの値を表し、必要に応じて値を音声認識の文法のコンポーネントに関連付けます。"
  remarks: "SemanticResultValue と<xref:System.Speech.Recognition.SemanticResultKey><xref:System.Speech.Recognition.GrammarBuilder><xref:System.Speech.Recognition.Choices><xref:System.Speech.Recognition.Grammar>。</xref:System.Speech.Recognition.Grammar>セマンティック構造を設計する最も簡単な方法、</xref:System.Speech.Recognition.Choices>および</xref:System.Speech.Recognition.GrammarBuilder>と組み合わせて、オブジェクト</xref:System.Speech.Recognition.SemanticResultKey>の使用 語句のセマンティックの情報は、のインスタンスを取得することによってアクセスされます<xref:System.Speech.Recognition.SemanticValue>、<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A><xref:System.Speech.Recognition.RecognizedPhrase></xref:System.Speech.Recognition.RecognizedPhrase>プロパティ</xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>を通じて</xref:System.Speech.Recognition.SemanticValue>。      > [!NOTE] > SemanticResultValue オブジェクトによって管理されている値は<xref:System.Object>インスタンスが、コンス トラクターに渡されます</xref:System.Object>。 この基になる型<xref:System.Object>する必要があります`bool`、 `int`、 `float`、または`string`</xref:System.Object>。 その他の型がの構築を防ぐため、 <xref:System.Speech.Recognition.Grammar>、SemanticResultValue を持つインスタンス</xref:System.Speech.Recognition.Grammar>。       SemanticResultValue インスタンスの典型的な使用の認識可能なコンポーネントのインスタンスに関連付けます、 <xref:System.Speech.Recognition.Grammar>、句の場合、ルールなど、または<xref:System.Speech.Recognition.Choices>オブジェクト</xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.Grammar>。 認識操作の一部として関連付けられているコンポーネントを使用すると、返される語句のセマンティクスで値を定義する、SemanticResultValue が使用されます。       SemanticResultValue インスタンスを SemanticResultValue を作成するために使用するコンス トラクターに応じての文法要素に関連付けるための&2; つの基本的な方法はあります。      場合のみ、値 (のインスタンスで指定された<xref:System.Object>) は SemanticResultValue オブジェクトを構築するために使用される、SemanticResultValue が他に、前に、文法コンポーネントに関連付けられて、<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト</xref:System.Speech.Recognition.GrammarBuilder></xref:System.Object>。           インスタンスの場合は、次のコード フラグメントで、<xref:System.Speech.Recognition.Grammar>これを使用して構築<xref:System.Speech.Recognition.GrammarBuilder>インスタンスは、単語「バック グラウンド」の値を認識`true`は認識された語句セマンティクスで設定します</xref:System.Speech.Recognition.GrammarBuilder></xref:System.Speech.Recognition.Grammar>。          ```c#       GrammarBuilder backgroundGB=new GrammarBuilder(&quot;background&quot;);       backgroundGB.Append(new SemanticResultValue(true));       ```詳細については、 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>。</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>の説明を参照してください。      場合、文字列値の語句や特定の<xref:System.Speech.Recognition.GrammarBuilder>インスタンスが使用されていると連携して、 <xref:System.Object>SemanticResultValue 値、値は文字列値の語句で自動的に関連付けられていることを指定する、または<xref:System.Speech.Recognition.GrammarBuilder>インスタンス</xref:System.Speech.Recognition.GrammarBuilder></xref:System.Object></xref:System.Speech.Recognition.GrammarBuilder>。  場合は、語句または<xref:System.Speech.Recognition.GrammarBuilder>認識プロセスでオブジェクトを使用して、値は認識された語句のセマンティクスに割り当てられます</xref:System.Speech.Recognition.GrammarBuilder>。           次の例を示します、機能的には、前の例<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>と<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>。</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29></xref:System.Speech.Recognition.GrammarBuilder.Append%2A>を明示的に呼び出しを使用 認識ロジックは語「バック グラウンド」、値を使ってかどうか`true`認識されたセマンティクスに追加されます。          ```c#       fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;background&quot;, true));       ```詳細について<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>と<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>。</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29></xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>の説明を参照してください。       <xref:System.Speech.Recognition.Grammar>認識では、SemanticResultValue のすべてのインスタンスに関連付けること<xref:System.Speech.Recognition.SemanticValue>がその<xref:System.Speech.Recognition.Grammar>。</xref:System.Speech.Recognition.Grammar>で使用されるオブジェクト</xref:System.Speech.Recognition.SemanticValue>のいずれか</xref:System.Speech.Recognition.Grammar>で使用するには これは、SemanticResultValue とセマンティック キーを関連付けることによって行います。       セマンティック キーは、SemanticResultValue に明示的にアタッチできますを使用して、<xref:System.Speech.Recognition.SemanticResultKey>オブジェクト</xref:System.Speech.Recognition.SemanticResultKey>。  <xref:System.Speech.Recognition.SemanticValue>。</xref:System.Speech.Recognition.SemanticValue>の既定のルート キーに関連付けられている SemanticResultValue インスタンス キーに明示的にアタッチされています。       設定を使用した、SemanticResultValue 後、<xref:System.Speech.Recognition.SemanticValue.Value%2A>はタグ付けまたは特定して既定ルート キーを持つかどうか、<xref:System.Speech.Recognition.SemanticResultKey>その値を変更する必要がない、または認識操作中に例外が発生します</xref:System.Speech.Recognition.SemanticResultKey></xref:System.Speech.Recognition.SemanticValue.Value%2A>。       次の例は、設定し、ルート<xref:System.Speech.Recognition.SemanticValue.Value%2A><xref:System.Speech.Recognition.Grammar>。</xref:System.Speech.Recognition.Grammar></xref:System.Speech.Recognition.SemanticValue.Value%2A>変更されために、例外が発生します。      ```c#   GrammarBuilder gb=new GrammarBuilder();   gb.Append(new SemanticResultValue(&quot;One&quot;));   gb.Append(new SemanticResultValue(&quot;Two&quot;));   ```その一方で、次の例のコードでは許可されます。 SemanticResultValue の複数のインスタンスを定義が含まれている、<xref:System.Speech.Recognition.Choices>オブジェクト、およびこれまで、キーの値を設定するために使用する&1; つだけが`bgOrfgText`</xref:System.Speech.Recognition.Choices>。      ```c#   Choices fgOrbgChoice = new Choices();   fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;background&quot;));   fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;foreground&quot;));   SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(&quot;BgOrFgText&quot;, fgOrbgChoice);   ```SemanticResultValue の使用の詳細についてはおよび<xref:System.Speech.Recognition.SemanticResultKey>、オブジェクトを参照してください[Understanding SemanticResultValue と SemanticResultKey オブジェクト](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)と[、SemanticResultKey を使用して、SemanticResultValue を抽出する](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa)で、[システム音声プログラミング ガイド .NET Framework 4.0 用](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043)</xref:System.Speech.Recognition.SemanticResultKey>。"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\".  SemanticResultValue and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(new SemanticResultValue(introGB, String.Format(\"Command: {0}\", introString)));  \n  }    \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n                       cmdIntro,  \n                       new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")]

      public class SemanticResultValue
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(Object)
  nameWithType: SemanticResultValue.SemanticResultValue(Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>クラスし、意味的な値を指定します。"
  remarks: "A`SemanticResultValue`これによって返されるコンス トラクターは、特定の文法の任意の要素に関連付けられていません。 関連付けのインスタンスを使用して明示的にする必要があります`SemanticResultValue` <xref:System.Speech.Recognition.GrammarBuilder>.</xref:System.Speech.Recognition.GrammarBuilder>と共に       インスタンスの場合は、次のコード フラグメントで、<xref:System.Speech.Recognition.Grammar>これを使用して構築<xref:System.Speech.Recognition.GrammarBuilder>インスタンスは、単語「バック グラウンド」の値を認識`true`は認識された語句セマンティクスで設定します</xref:System.Speech.Recognition.GrammarBuilder></xref:System.Speech.Recognition.Grammar>。      ```c#   GrammarBuilder backgroundGB=new GrammarBuilder(&quot;background&quot;);   backgroundGB.Append(new SemanticResultValue(true));   ```"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```c#  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }           \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n        cmdIntro,   \n        new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public SemanticResultValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "によって管理されている値<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>です。 Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(GrammarBuilder,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>クラスし、のセマンティックの値に関連付けます、 <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>オブジェクト。"
  remarks: "文法要素を指定して場合<xref:System.Speech.Recognition.GrammarBuilder>認識ロジックで使用される`value`は認識されている出力のセマンティクスで設定されます</xref:System.Speech.Recognition.GrammarBuilder>。       場合は、次のコード フラグメントで構築された認識ロジック、<xref:System.Speech.Recognition.GrammarBuilder>インスタンス (`myGb`) を使用して、<xref:System.Speech.Recognition.Choices>オブジェクト (`myChoice`) を識別する値を入力、`true`が認識されたセマンティクスに追加します</xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>。      ```c#   myGb.Append(new SemanticResultValue(myChoice, true);   ```として<xref:System.Speech.Recognition.GrammarBuilder>の暗黙的な変換をサポートしている<xref:System.Speech.Recognition.Choices>、 `SemanticResultValue`、および<xref:System.Speech.Recognition.SemanticResultKey>、このコンス トラクターはそれらのオブジェクトも使用できます</xref:System.Speech.Recognition.SemanticResultKey></xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>。"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```c#  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }           \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n    }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n                      cmdIntro,  \n                      new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "認識で使用される文法コンポーネント。"
    - id: value
      type: System.Object
      description: "によって管理されている値<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>です。 Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  id: '#ctor(System.String,System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(String,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(String,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(String,Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>クラスし、のセマンティックの値に関連付けます、<xref:System.String>オブジェクト</xref:System.String>。"
  remarks: "文字列が指定された場合`phrase`認識ロジックで使用される`value`は認識されている出力のセマンティクスで設定されます。       認識ロジックが構築された場合は次のコード フラグメントで、<xref:System.Speech.Recognition.GrammarBuilder>インスタンス (`myGb`) 文字列「住宅ローン」を使用して識別する値を入力、`true`認識されたセマンティクスに追加されます</xref:System.Speech.Recognition.GrammarBuilder>。      ```c#   myGb.Append(new SemanticResultValue(&quot;my mortgage&quot;, true);   ```"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }  \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(cmdIntro,  \n                         new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public SemanticResultValue (string phrase, object value);
    parameters:
    - id: phrase
      type: System.String
      description: "認識で使用される語句。"
    - id: value
      type: System.Object
      description: "によって管理されている値<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>です。 Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultValue.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "インスタンスを返します<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>現在から構築された<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>インスタンス。"
  remarks: "ToGrammarBuilder の使用を使用すると、<xref:System.Speech.Recognition.GrammarBuilder>を受け取るコンス トラクター、<xref:System.Speech.Recognition.SemanticResultValue>を引数として (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example creates <xref:System.Speech.Recognition.Grammar> objects that support commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances that are obtained from the <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> method on the `SemanticResultValue` objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in the `colorChoice` instance.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RBG.  \n  // Choices constructors do not take a SemanticResultValue parameter, so  \n  // cast SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    SemanticResultValue colorValue =   \n        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n    colorChoice.Add(colorValue.ToGrammarBuilder());  \n  }  \n  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with an introductory phrase and the  \n  // color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the final grammar, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  \n  grammar.Name = \"Set Background Color\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "インスタンスを返します<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>現在から構築された<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>インスタンス。"
  overload: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(Object)
  nameWithType: SemanticResultValue.SemanticResultValue(Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(Object)
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(GrammarBuilder,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(String,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(String,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultValue.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder()
- uid: System.Speech.Recognition.SemanticResultValue.#ctor*
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue
  nameWithType: SemanticResultValue.SemanticResultValue
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultValue.ToGrammarBuilder
