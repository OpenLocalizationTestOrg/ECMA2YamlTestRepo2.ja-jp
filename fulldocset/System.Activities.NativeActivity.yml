### YamlMime:ManagedReference
items:
- uid: System.Activities.NativeActivity
  id: NativeActivity
  children:
  - System.Activities.NativeActivity.#ctor
  - System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)
  - System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)
  - System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)
  - System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)
  - System.Activities.NativeActivity.CanInduceIdle
  - System.Activities.NativeActivity.Execute(System.Activities.NativeActivityContext)
  - System.Activities.NativeActivity.Implementation
  - System.Activities.NativeActivity.ImplementationVersion
  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  - System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  langs:
  - csharp
  name: NativeActivity
  nameWithType: NativeActivity
  fullName: System.Activities.NativeActivity
  type: Class
  summary: "使用する実行ロジックを実装するカスタム アクティビティの抽象基本クラス、<xref:System.Activities.NativeActivity.Execute*>ランタイムの機能を完全にアクセスするメソッド</xref:System.Activities.NativeActivity.Execute*>。"
  remarks: ''
  example:
  - "The following code sample demonstrates creating a class that inherits from <xref:System.Activities.NativeActivity%601>. This example is from the [Custom Composite using Native Activity](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n```  \npublic sealed class MySequence : NativeActivity  \n{  \n    Collection<Activity> children;  \n    Collection<Variable> variables;  \n    Variable<int> currentIndex;  \n    CompletionCallback onChildComplete;  \n  \n    public MySequence()  \n        : base()  \n    {  \n        this.children = new Collection<Activity>();  \n        this.variables = new Collection<Variable>();  \n        this.currentIndex = new Variable<int>();  \n    }  \n  \n    public Collection<Activity> Activities  \n    {  \n        get  \n        {  \n            return this.children;  \n        }  \n    }  \n    public Collection<Variable> Variables  \n    {  \n        get  \n        {  \n            return this.variables;  \n        }  \n    }  \n    protected override void CacheMetadata(NativeActivityMetadata metadata)  \n    {  \n        //call base.CacheMetadata to add the Activities and Variables to this activity's metadata  \n        base.CacheMetadata(metadata);  \n        //add the private implementation variable: currentIndex   \n        metadata.AddImplementationVariable(this.currentIndex);  \n    }                     \n  \n    protected override void Execute(NativeActivityContext context)  \n    {  \n        InternalExecute(context, null);  \n    }  \n    void InternalExecute(NativeActivityContext context, ActivityInstance instance)  \n    {  \n        //grab the index of the current Activity  \n        int currentActivityIndex = this.currentIndex.Get(context);  \n        if (currentActivityIndex == Activities.Count)  \n        {  \n            //if the currentActivityIndex is equal to the count of MySequence's Activities  \n            //MySequence is complete  \n            return;  \n        }  \n  \n        if (this.onChildComplete == null)  \n        {  \n            //on completion of the current child, have the runtime call back on this method  \n            this.onChildComplete = new CompletionCallback(InternalExecute);  \n        }  \n        //grab the next Activity in MySequence.Activities and schedule it  \n        Activity nextChild = Activities[currentActivityIndex];  \n        context.ScheduleActivity(nextChild, this.onChildComplete);  \n  \n        //increment the currentIndex  \n        this.currentIndex.Set(context, ++currentActivityIndex);  \n    }  \n}  \n```"
  syntax:
    content: 'public abstract class NativeActivity : System.Activities.Activity'
  inheritance:
  - System.Object
  - System.Activities.Activity
  implements: []
  inheritedMembers:
  - System.Activities.Activity.CacheId
  - System.Activities.Activity.Constraints
  - System.Activities.Activity.DisplayName
  - System.Activities.Activity.Id
  - System.Activities.Activity.ShouldSerializeDisplayName
  - System.Activities.Activity.ToString
  platform:
  - net462
- uid: System.Activities.NativeActivity.#ctor
  id: '#ctor'
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: NativeActivity()
  nameWithType: NativeActivity.NativeActivity()
  fullName: System.Activities.NativeActivity.NativeActivity()
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "派生クラスとして実装された場合は、派生クラスの新しいインスタンスを作成します。"
  remarks: ''
  example:
  - "The following code sample demonstrates creating a class that inherits from <xref:System.Activities.NativeActivity%601>. This example is from the [Custom Composite using Native Activity](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[wfs_CustomCompositeNativeActivity#1](~/add/codesnippet/csharp/wfs_customcompositenativeactivity.workflow/mysequence.cs#1)]"
  syntax:
    content: protected NativeActivity ();
    parameters: []
  overload: System.Activities.NativeActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)
  id: Abort(System.Activities.NativeActivityAbortContext)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: Abort(NativeActivityAbortContext)
  nameWithType: NativeActivity.Abort(NativeActivityAbortContext)
  fullName: System.Activities.NativeActivity.Abort(NativeActivityAbortContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "派生クラスとして実装された場合は、中止中のアクティビティへの応答アクションを実行します。"
  syntax:
    content: protected virtual void Abort (System.Activities.NativeActivityAbortContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityAbortContext
      description: "アクティビティが実行される実行コンテキスト。"
  overload: System.Activities.NativeActivity.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)
  id: CacheMetadata(System.Activities.ActivityMetadata)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: CacheMetadata(ActivityMetadata)
  nameWithType: NativeActivity.CacheMetadata(ActivityMetadata)
  fullName: System.Activities.NativeActivity.CacheMetadata(ActivityMetadata)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "実装されていません。 使用して、<xref:System.Activities.NativeActivity.CacheMetadata*>メソッド代わりにします</xref:System.Activities.NativeActivity.CacheMetadata*>。"
  remarks: "カスタム アクティビティの作成者はアクティビティの検証ロジックを指定できます<xref:System.Activities.NativeActivity.CacheMetadata%2A>オーバーライドします</xref:System.Activities.NativeActivity.CacheMetadata%2A>。 スローされる例外<xref:System.Activities.NativeActivity.CacheMetadata%2A>検証エラーとして扱われません</xref:System.Activities.NativeActivity.CacheMetadata%2A>。 これらの例外はへの呼び出しからエスケープ<xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>され、呼び出し元によって処理される必要があります</xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>。"
  syntax:
    content: protected override sealed void CacheMetadata (System.Activities.ActivityMetadata metadata);
    parameters:
    - id: metadata
      type: System.Activities.ActivityMetadata
      description: "実装されていません。"
  overload: System.Activities.NativeActivity.CacheMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)
  id: CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: NativeActivity.CacheMetadata(NativeActivityMetadata)
  fullName: System.Activities.NativeActivity.CacheMetadata(NativeActivityMetadata)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "作成し、アクティビティの引数、変数、子アクティビティ、およびアクティビティ デリゲートの説明を検証します。"
  remarks: "ワークフロー ランタイムでは、CacheMetadata の既定の実装を使用して、ワークフローが、ランタイム リレーションシップおよび有効期間ルールを管理の正しく構築されるようにします。 CacheMetadata の既定の実装型の<xref:System.ComponentModel.TypeDescriptor>。</xref:System.ComponentModel.TypeDescriptor>を使用してアクティビティ型のパブリック メンバーを調査します。 これらのパブリック メンバーが型<xref:System.Activities.Argument>、 <xref:System.Activities.Variable>、 [T:System.Collections.Generic.IEnumerable\\<T:System.Activities.Variable >](~/add/includes/ajax-current-ext-md.md)、 <xref:System.Activities.Activity>、 [T:System.Collections.Generic.IEnumerable\\<T:System.Activities.Activity >](~/add/includes/ajax-current-ext-md.md)、または<xref:System.Activities.ActivityDelegate>.</xref:System.Activities.ActivityDelegate> </xref:System.Activities.Activity> </xref:System.Activities.Variable> </xref:System.Activities.Argument> アクティビティのランタイム記述の構築をカスタマイズして、カスタム検証ロジックを提供する、このメソッドをオーバーライドすることができます。 CacheMetadata からスローされる例外は検証エラーとして扱われません。 これらの例外はへの呼び出しからエスケープ<xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>され、呼び出し元によって処理される必要があります</xref:System.Activities.Validation.ActivityValidationServices.Validate%2A>。"
  example:
  - "The following code sample demonstrates using CacheMetadata in a class that inherits from <xref:System.Activities.NativeActivity%601>. This example is from the [Custom Composite using Native Activity](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[wfs_CustomCompositeNativeActivity#2](~/add/codesnippet/csharp/wfs_customcompositenativeactivity.workflow/mysequence.cs#2)]"
  syntax:
    content: protected virtual void CacheMetadata (System.Activities.NativeActivityMetadata metadata);
    parameters:
    - id: metadata
      type: System.Activities.NativeActivityMetadata
      description: "アクティビティの引数、変数、子アクティビティ、およびアクティビティ デリゲートをカプセル化するアクティビティのメタデータ。"
  overload: System.Activities.NativeActivity.CacheMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)
  id: Cancel(System.Activities.NativeActivityContext)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: Cancel(NativeActivityContext)
  nameWithType: NativeActivity.Cancel(NativeActivityContext)
  fullName: System.Activities.NativeActivity.Cancel(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "派生クラスで実装された場合、アクティビティの正常な早期に完了するためのロジックを実行します。"
  remarks: ''
  example:
  - "The following code sample demonstrates using Cancel in a class that inherits from <xref:System.Activities.NativeActivity%601>. This example is from the [Non-Generic ParallelForEach](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[wfs_NonGenericParallelForEach#2](~/add/codesnippet/csharp/nongenericparallelforeach/parallelforeach.cs#2)]"
  syntax:
    content: protected virtual void Cancel (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "アクティビティが実行される実行コンテキスト。"
  overload: System.Activities.NativeActivity.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.CanInduceIdle
  id: CanInduceIdle
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: CanInduceIdle
  nameWithType: NativeActivity.CanInduceIdle
  fullName: System.Activities.NativeActivity.CanInduceIdle
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "取得またはアクティビティがアイドル状態になるワークフローを引き起こすかどうかを示す値を設定します。"
  syntax:
    content: protected virtual bool CanInduceIdle { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、アクティビティには、ワークフローをアイドル状態になる可能性があります。 この値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>既定です。"
  overload: System.Activities.NativeActivity.CanInduceIdle*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.Execute(System.Activities.NativeActivityContext)
  id: Execute(System.Activities.NativeActivityContext)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: Execute(NativeActivityContext)
  nameWithType: NativeActivity.Execute(NativeActivityContext)
  fullName: System.Activities.NativeActivity.Execute(NativeActivityContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "派生クラスとして実装された場合は、アクティビティの実行ロジックを実行します。"
  remarks: ''
  example:
  - "The following code sample demonstrates using Cancel in a class that inherits from <xref:System.Activities.NativeActivity%601>. This example is from the [Non-Generic ParallelForEach](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[wfs_NonGenericParallelForEach#2](~/add/codesnippet/csharp/nongenericparallelforeach/parallelforeach.cs#2)]"
  syntax:
    content: protected abstract void Execute (System.Activities.NativeActivityContext context);
    parameters:
    - id: context
      type: System.Activities.NativeActivityContext
      description: "アクティビティが実行される実行コンテキスト。"
  overload: System.Activities.NativeActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.Implementation
  id: Implementation
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: Implementation
  nameWithType: NativeActivity.Implementation
  fullName: System.Activities.NativeActivity.Implementation
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "アクティビティの実行ロジック。"
  syntax:
    content: protected override sealed Func<System.Activities.Activity> Implementation { get; set; }
    return:
      type: System.Func{System.Activities.Activity}
      description: "実行ロジック。"
  overload: System.Activities.NativeActivity.Implementation*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.ImplementationVersion
  id: ImplementationVersion
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: ImplementationVersion
  nameWithType: NativeActivity.ImplementationVersion
  fullName: System.Activities.NativeActivity.ImplementationVersion
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "取得またはアクティビティの実装のバージョンを設定します。"
  syntax:
    content: protected override sealed Version ImplementationVersion { get; set; }
    return:
      type: System.Version
      description: "アクティビティの実装のバージョン。"
  overload: System.Activities.NativeActivity.ImplementationVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  id: OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  nameWithType: NativeActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  fullName: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "動的更新用のマップを作成するときにイベントを発生させます。"
  syntax:
    content: protected virtual void OnCreateDynamicUpdateMap (System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata metadata, System.Activities.Activity originalActivity);
    parameters:
    - id: metadata
      type: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata
      description: "メタデータ。"
    - id: originalActivity
      type: System.Activities.Activity
      description: "元のアクティビティ。"
  overload: System.Activities.NativeActivity.OnCreateDynamicUpdateMap*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  id: OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
  nameWithType: NativeActivity.OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
  fullName: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "動的更新用のマップを作成するときにイベントを発生させます。"
  syntax:
    content: protected override sealed void OnCreateDynamicUpdateMap (System.Activities.DynamicUpdate.UpdateMapMetadata metadata, System.Activities.Activity originalActivity);
    parameters:
    - id: metadata
      type: System.Activities.DynamicUpdate.UpdateMapMetadata
      description: "メタデータ。"
    - id: originalActivity
      type: System.Activities.Activity
      description: "元のアクティビティ。"
  overload: System.Activities.NativeActivity.OnCreateDynamicUpdateMap*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  id: UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  parent: System.Activities.NativeActivity
  langs:
  - csharp
  name: UpdateInstance(NativeActivityUpdateContext)
  nameWithType: NativeActivity.UpdateInstance(NativeActivityUpdateContext)
  fullName: System.Activities.NativeActivity.UpdateInstance(NativeActivityUpdateContext)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "インスタンスが更新<xref href=&quot;System.Activities.NativeActivity&quot;></xref>です。"
  syntax:
    content: protected virtual void UpdateInstance (System.Activities.DynamicUpdate.NativeActivityUpdateContext updateContext);
    parameters:
    - id: updateContext
      type: System.Activities.DynamicUpdate.NativeActivityUpdateContext
      description: "更新プログラムのコンテキスト。"
  overload: System.Activities.NativeActivity.UpdateInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.Activity
  isExternal: false
  name: System.Activities.Activity
- uid: System.Activities.NativeActivity.#ctor
  parent: System.Activities.NativeActivity
  isExternal: false
  name: NativeActivity()
  nameWithType: NativeActivity.NativeActivity()
  fullName: System.Activities.NativeActivity.NativeActivity()
- uid: System.Activities.NativeActivity.Abort(System.Activities.NativeActivityAbortContext)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Abort(NativeActivityAbortContext)
  nameWithType: NativeActivity.Abort(NativeActivityAbortContext)
  fullName: System.Activities.NativeActivity.Abort(NativeActivityAbortContext)
- uid: System.Activities.NativeActivityAbortContext
  parent: System.Activities
  isExternal: false
  name: NativeActivityAbortContext
  nameWithType: NativeActivityAbortContext
  fullName: System.Activities.NativeActivityAbortContext
- uid: System.Activities.NativeActivity.CacheMetadata(System.Activities.ActivityMetadata)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: CacheMetadata(ActivityMetadata)
  nameWithType: NativeActivity.CacheMetadata(ActivityMetadata)
  fullName: System.Activities.NativeActivity.CacheMetadata(ActivityMetadata)
- uid: System.Activities.ActivityMetadata
  parent: System.Activities
  isExternal: false
  name: ActivityMetadata
  nameWithType: ActivityMetadata
  fullName: System.Activities.ActivityMetadata
- uid: System.Activities.NativeActivity.CacheMetadata(System.Activities.NativeActivityMetadata)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: CacheMetadata(NativeActivityMetadata)
  nameWithType: NativeActivity.CacheMetadata(NativeActivityMetadata)
  fullName: System.Activities.NativeActivity.CacheMetadata(NativeActivityMetadata)
- uid: System.Activities.NativeActivityMetadata
  parent: System.Activities
  isExternal: false
  name: NativeActivityMetadata
  nameWithType: NativeActivityMetadata
  fullName: System.Activities.NativeActivityMetadata
- uid: System.Activities.NativeActivity.Cancel(System.Activities.NativeActivityContext)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Cancel(NativeActivityContext)
  nameWithType: NativeActivity.Cancel(NativeActivityContext)
  fullName: System.Activities.NativeActivity.Cancel(NativeActivityContext)
- uid: System.Activities.NativeActivityContext
  parent: System.Activities
  isExternal: false
  name: NativeActivityContext
  nameWithType: NativeActivityContext
  fullName: System.Activities.NativeActivityContext
- uid: System.Activities.NativeActivity.CanInduceIdle
  parent: System.Activities.NativeActivity
  isExternal: false
  name: CanInduceIdle
  nameWithType: NativeActivity.CanInduceIdle
  fullName: System.Activities.NativeActivity.CanInduceIdle
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.NativeActivity.Execute(System.Activities.NativeActivityContext)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Execute(NativeActivityContext)
  nameWithType: NativeActivity.Execute(NativeActivityContext)
  fullName: System.Activities.NativeActivity.Execute(NativeActivityContext)
- uid: System.Activities.NativeActivity.Implementation
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Implementation
  nameWithType: NativeActivity.Implementation
  fullName: System.Activities.NativeActivity.Implementation
- uid: System.Func{System.Activities.Activity}
  parent: System
  isExternal: true
  name: Func<Activity>
  nameWithType: Func<Activity>
  fullName: System.Func<System.Activities.Activity>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Activities.Activity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Activity
    name: Activity
    nameWithType: Activity
    fullName: Activity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.NativeActivity.ImplementationVersion
  parent: System.Activities.NativeActivity
  isExternal: false
  name: ImplementationVersion
  nameWithType: NativeActivity.ImplementationVersion
  fullName: System.Activities.NativeActivity.ImplementationVersion
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata,System.Activities.Activity)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  nameWithType: NativeActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
  fullName: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata,Activity)
- uid: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata
  parent: System.Activities.DynamicUpdate
  isExternal: false
  name: NativeActivityUpdateMapMetadata
  nameWithType: NativeActivityUpdateMapMetadata
  fullName: System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata
- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(System.Activities.DynamicUpdate.UpdateMapMetadata,System.Activities.Activity)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
  nameWithType: NativeActivity.OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
  fullName: System.Activities.NativeActivity.OnCreateDynamicUpdateMap(UpdateMapMetadata,Activity)
- uid: System.Activities.DynamicUpdate.UpdateMapMetadata
  parent: System.Activities.DynamicUpdate
  isExternal: false
  name: UpdateMapMetadata
  nameWithType: UpdateMapMetadata
  fullName: System.Activities.DynamicUpdate.UpdateMapMetadata
- uid: System.Activities.NativeActivity.UpdateInstance(System.Activities.DynamicUpdate.NativeActivityUpdateContext)
  parent: System.Activities.NativeActivity
  isExternal: false
  name: UpdateInstance(NativeActivityUpdateContext)
  nameWithType: NativeActivity.UpdateInstance(NativeActivityUpdateContext)
  fullName: System.Activities.NativeActivity.UpdateInstance(NativeActivityUpdateContext)
- uid: System.Activities.DynamicUpdate.NativeActivityUpdateContext
  parent: System.Activities.DynamicUpdate
  isExternal: false
  name: NativeActivityUpdateContext
  nameWithType: NativeActivityUpdateContext
  fullName: System.Activities.DynamicUpdate.NativeActivityUpdateContext
- uid: System.Activities.NativeActivity.#ctor*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: NativeActivity
  nameWithType: NativeActivity.NativeActivity
- uid: System.Activities.NativeActivity.Abort*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Abort
  nameWithType: NativeActivity.Abort
- uid: System.Activities.NativeActivity.CacheMetadata*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: CacheMetadata
  nameWithType: NativeActivity.CacheMetadata
- uid: System.Activities.NativeActivity.Cancel*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Cancel
  nameWithType: NativeActivity.Cancel
- uid: System.Activities.NativeActivity.CanInduceIdle*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: CanInduceIdle
  nameWithType: NativeActivity.CanInduceIdle
- uid: System.Activities.NativeActivity.Execute*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Execute
  nameWithType: NativeActivity.Execute
- uid: System.Activities.NativeActivity.Implementation*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: Implementation
  nameWithType: NativeActivity.Implementation
- uid: System.Activities.NativeActivity.ImplementationVersion*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: ImplementationVersion
  nameWithType: NativeActivity.ImplementationVersion
- uid: System.Activities.NativeActivity.OnCreateDynamicUpdateMap*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: OnCreateDynamicUpdateMap
  nameWithType: NativeActivity.OnCreateDynamicUpdateMap
- uid: System.Activities.NativeActivity.UpdateInstance*
  parent: System.Activities.NativeActivity
  isExternal: false
  name: UpdateInstance
  nameWithType: NativeActivity.UpdateInstance
