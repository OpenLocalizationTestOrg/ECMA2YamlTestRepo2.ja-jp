### YamlMime:ManagedReference
items:
- uid: System.Threading.HostExecutionContext
  id: HostExecutionContext
  children:
  - System.Threading.HostExecutionContext.#ctor
  - System.Threading.HostExecutionContext.#ctor(System.Object)
  - System.Threading.HostExecutionContext.CreateCopy
  - System.Threading.HostExecutionContext.Dispose
  - System.Threading.HostExecutionContext.Dispose(System.Boolean)
  - System.Threading.HostExecutionContext.State
  langs:
  - csharp
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
  type: Class
  summary: "カプセル化し、スレッド間でホストの実行コンテキストを伝達します。"
  remarks: "大きな<xref:System.Threading.ExecutionContext>。</xref:System.Threading.ExecutionContext>の一部である、HostExecutionContext ホストのコンテキストでは、移行、または実行コンテキストをフローします。"
  syntax:
    content: 'public class HostExecutionContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor
  id: '#ctor'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref>クラスです。"
  remarks: "既定のコンス トラクターを作成、ホストの実行コンテキストが<xref:System.Threading.HostExecutionContext.State%2A>プロパティの値が`null`</xref:System.Threading.HostExecutionContext.State%2A>。"
  syntax:
    content: public HostExecutionContext ();
    parameters: []
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref>クラスの指定された状態を使用します。"
  remarks: "<xref:System.Threading.HostExecutionContext> <xref:System.Threading.ExecutionContext>。</xref:System.Threading.ExecutionContext>付属している</xref:System.Threading.HostExecutionContext> `state`を表すセーフ ハンドルを表す、`IUnknown`ホストへのポインター。"
  syntax:
    content: public HostExecutionContext (object state);
    parameters:
    - id: state
      type: System.Object
      description: "ホストの実行コンテキストの状態を表すオブジェクト。"
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "現在のホストの実行コンテキストのコピーを作成します。"
  remarks: "パラメーターとして使用できます、コピー、<xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>メソッドの呼び出し</xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>。"
  syntax:
    content: public virtual System.Threading.HostExecutionContext CreateCopy ();
    parameters: []
    return:
      type: System.Threading.HostExecutionContext
      description: "A <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref>現在のスレッドのホスト コンテキストを表すオブジェクト。"
  overload: System.Threading.HostExecutionContext.CreateCopy*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose
  id: Dispose
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "現在のインスタンスによって使用されるすべてのリソースを解放、 <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref>クラスです。"
  remarks: "呼び出す`Dispose` <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext>の使用が終了したときに `Dispose`メソッドによって、<xref:System.Threading.HostExecutionContext>使用不可の状態</xref:System.Threading.HostExecutionContext>。 呼び出した後に`Dispose`へのすべての参照を解放する必要があります、<xref:System.Threading.HostExecutionContext>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Threading.HostExecutionContext>占有されていた</xref:System.Threading.HostExecutionContext></xref:System.Threading.HostExecutionContext>。       詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 常に呼び出し`Dispose`<xref:System.Threading.HostExecutionContext></xref:System.Threading.HostExecutionContext>の最後の参照を解放する前に。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Threading.HostExecutionContext>オブジェクトの`Finalize`メソッド</xref:System.Threading.HostExecutionContext>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "派生クラスでオーバーライドされるで使用されるアンマネージ リソースを解放、 <xref:System.Threading.WaitHandle>、マネージ リソースも解放します</xref:System.Threading.WaitHandle>。"
  remarks: "このメソッドは、<xref:System.Threading.HostExecutionContext.Dispose>メソッドのオーバー ロードとファイナライザー</xref:System.Threading.HostExecutionContext.Dispose> 。 <xref:System.Threading.HostExecutionContext.Dispose>保護されているこのメソッドを呼び出して、`disposing`パラメーターに設定`true`です。</xref:System.Threading.HostExecutionContext.Dispose> ファイナライザーでは、このメソッドを呼び出します`disposing`&quot;éý&quot;`false`です。       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Threading.HostExecutionContext>参照。</xref:System.Threading.HostExecutionContext> 。 このメソッドを呼び出して、`Dispose`参照される各オブジェクトのメソッドです。       このメソッドを他のオブジェクトから複数回呼び出すことができます。 このメソッドをオーバーライドする場合は、以前の呼び出しで既に破棄されているオブジェクトを参照しないように注意します。"
  syntax:
    content: public virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.State
  id: State
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "取得またはホストの実行コンテキストの状態を設定します。"
  remarks: "状態プロパティの値を表すセーフ ハンドルを含む、`IUnknown`ホストへのポインター。"
  syntax:
    content: protected object State { get; set; }
    return:
      type: System.Object
      description: "ホストの実行コンテキストの状態を表すオブジェクト。"
  overload: System.Threading.HostExecutionContext.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.HostExecutionContext.#ctor
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
- uid: System.Threading.HostExecutionContext.CreateCopy
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
- uid: System.Threading.HostExecutionContext
  parent: System.Threading
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
- uid: System.Threading.HostExecutionContext.Dispose
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.HostExecutionContext.State
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
- uid: System.Threading.HostExecutionContext.#ctor*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext.HostExecutionContext
- uid: System.Threading.HostExecutionContext.CreateCopy*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy
  nameWithType: HostExecutionContext.CreateCopy
- uid: System.Threading.HostExecutionContext.Dispose*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose
  nameWithType: HostExecutionContext.Dispose
- uid: System.Threading.HostExecutionContext.State*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
