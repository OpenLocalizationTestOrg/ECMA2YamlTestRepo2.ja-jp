### YamlMime:ManagedReference
items:
- uid: System.Net.PeerToPeer.PeerNameRegistration
  id: PeerNameRegistration
  children:
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)
  - System.Net.PeerToPeer.PeerNameRegistration.Cloud
  - System.Net.PeerToPeer.PeerNameRegistration.Comment
  - System.Net.PeerToPeer.PeerNameRegistration.Data
  - System.Net.PeerToPeer.PeerNameRegistration.Dispose
  - System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)
  - System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  - System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.PeerToPeer.PeerNameRegistration.IsRegistered
  - System.Net.PeerToPeer.PeerNameRegistration.PeerName
  - System.Net.PeerToPeer.PeerNameRegistration.Port
  - System.Net.PeerToPeer.PeerNameRegistration.Start
  - System.Net.PeerToPeer.PeerNameRegistration.Stop
  - System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.PeerToPeer.PeerNameRegistration.Update
  - System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  langs:
  - csharp
  name: PeerNameRegistration
  nameWithType: PeerNameRegistration
  fullName: System.Net.PeerToPeer.PeerNameRegistration
  type: Class
  summary: "登録、<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>で、 <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref>またはクラウドのセット</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>。"
  remarks: "登録を作成 (または更新) に関連付けられているすべての情報、<xref:System.Net.PeerToPeer.PeerName>ピア クラウドまたはクラウドでします</xref:System.Net.PeerToPeer.PeerName>。       同じピア名に対して複数の PeerNameRegistration オブジェクトを設定することができます。 このような場合は、ピア名がセキュリティ保護されている場合、各インスタンスは別のクラウドで PeerNameRegistration を表します。 ただし、ピア名が保護されていない場合登録できます同じクラウドに、複数回各登録とは異なるプロセスです。"
  syntax:
    content: 'public class PeerNameRegistration : IDisposable, System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor
  id: '#ctor'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration()
  nameWithType: PeerNameRegistration.PeerNameRegistration()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration()
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "新しい既定のインスタンスを初期化、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>クラスです。"
  remarks: "型<xref:System.Net.PeerToPeer.PeerNameRegistration>。</xref:System.Net.PeerToPeer.PeerNameRegistration>の新しい既定のインスタンスを返します 構築時に、ピア名の登録を行うことはできません。       このコンス トラクターを持つオブジェクトをインスタンス化した後、呼び出し元が<xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>または<xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>。</xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A></xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>を呼び出す前に、インスタンス内の該当フィールドを設定します。"
  syntax:
    content: public PeerNameRegistration ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)
  id: '#ctor(System.Net.PeerToPeer.PeerName,System.Int32)'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration(PeerName,Int32)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>指定した名前とポート番号を持つクラス。"
  remarks: "すべてのソース アドレス (ipv6 と IPv4 の両方) を登録するために使用するインスタンスを作成するこのコンス トラクターを呼び出すと、ピアが現在参加しているすべてのクラウドの指定されたポートです。  オブジェクトが正常に構築される場合、指定した<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>と<xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>が生成されます</xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A></xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>。       ピア名はセキュリティで保護しで以前に登録されたかどうか、<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>ピアに現在参加している、<xref:System.Net.PeerToPeer.PeerToPeerException>がスローされます</xref:System.Net.PeerToPeer.PeerToPeerException></xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>。       このコンス トラクターを作成するだけ、<xref:System.Net.PeerToPeer.PeerNameRegistration>インスタンスです登録は行いません。</xref:System.Net.PeerToPeer.PeerNameRegistration> 。 このコンス トラクターで登録オブジェクトをインスタンス化すると、そのフィールドを設定する、アプリケーションを呼び出す必要があります<xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>を実際の登録を実行します</xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>。"
  syntax:
    content: public PeerNameRegistration (System.Net.PeerToPeer.PeerName name, int port);
    parameters:
    - id: name
      type: System.Net.PeerToPeer.PeerName
      description: "<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref>登録するオブジェクト。"
    - id: port
      type: System.Int32
      description: "登録するポート番号を指定する整数値。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> name </code>パラメーターを指定できません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定したポート番号が&0; 未満です。  ポート番号は、0 以上 65535 (0 xffff) 未満にする必要があります。"
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "-<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref>指定は、このホストから既に登録されています。      -リモートのピアが所有していない、<xref:System.Net.PeerToPeer.PeerName.Authority*>指定された<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;></xref>オブジェクト</xref:System.Net.PeerToPeer.PeerName.Authority*>。"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "シリアル化可能な新しい初期化<xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;></xref>オブジェクト。"
  syntax:
    content: protected PeerNameRegistration (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "このインスタンスを逆シリアル化に必要なデータを保持するオブジェクトへの参照。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "データを逆シリアル化するための手段を提供するコンテキスト。 シリアル化されたデータのソースとも呼ばれます。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)
  id: '#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration(PeerName,Int32,Cloud)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>指定したピアの名前、ポート番号のクラスと<xref href=&quot;System.Net.PeerToPeer.Cloud&quot;></xref>です。"
  remarks: "すべてのソース アドレス (IPv6 と IPv4 の両方)、指定されたポート、および指定<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>。</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>登録に使用されるインスタンスを作成するこのコンス トラクターの呼び出し  オブジェクトが正常に構築される場合、プロパティが設定されます、指定すると<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>、<xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>および<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>。</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>       クラウドのパラメーターがある場合`null`を使用して名前を登録、<xref:System.Net.PeerToPeer.Cloud.Available>ショートカットの既定値を初期化、 <xref:System.Net.PeerToPeer.Cloud.Name%2A>、 <xref:System.Net.PeerToPeer.Cloud.Scope%2A>、 <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A></xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> </xref:System.Net.PeerToPeer.Cloud.Scope%2A> </xref:System.Net.PeerToPeer.Cloud.Name%2A> </xref:System.Net.PeerToPeer.Cloud.Available> 。       <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A> <xref:System.Net.PeerToPeer.PeerName>。</xref:System.Net.PeerToPeer.PeerName>を登録するメソッドを呼び出す必要があります</xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>、インスタンス化した後"
  syntax:
    content: public PeerNameRegistration (System.Net.PeerToPeer.PeerName name, int port, System.Net.PeerToPeer.Cloud cloud);
    parameters:
    - id: name
      type: System.Net.PeerToPeer.PeerName
      description: "<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref>登録するオブジェクト。"
    - id: port
      type: System.Int32
      description: "登録するポート番号を指定する整数値。"
    - id: cloud
      type: System.Net.PeerToPeer.Cloud
      description: "<xref href=&quot;System.Net.PeerToPeer.Cloud&quot;></xref>ピア名を登録します。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> name </code>パラメーターを指定できません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定したポート番号が&0; 未満です。  ポート番号は、0 以上 65535 (0 xffff) 未満にする必要があります。"
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "-<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref>指定は、このホストから既に登録されています。      -リモートのピアが所有していない、<xref:System.Net.PeerToPeer.PeerName.Authority*>指定された<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;></xref>オブジェクト</xref:System.Net.PeerToPeer.PeerName.Authority*>。"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud
  id: Cloud
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Cloud
  nameWithType: PeerNameRegistration.Cloud
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Cloud
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "情報取得または設定には、このクラウドに<xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*>オブジェクトが登録されます</xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*>。"
  syntax:
    content: public System.Net.PeerToPeer.Cloud Cloud { get; set; }
    return:
      type: System.Net.PeerToPeer.Cloud
      description: "型のオブジェクト<xref href=&quot;System.Net.PeerToPeer.Cloud&quot;></xref>この登録が定義されているピア クラウドを指定します。 このプロパティに設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>既定です。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.Cloud*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment
  id: Comment
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Comment
  nameWithType: PeerNameRegistration.Comment
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Comment
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "取得または追加情報を設定、 <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref>に登録されるオブジェクト、 <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;></xref>です。"
  syntax:
    content: public string Comment { get; set; }
    return:
      type: System.String
      description: "追加情報について説明するコメント、 <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref>に関連付ける、 <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;></xref>です。 このプロパティに設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>既定です。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.Comment*
  exceptions:
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "指定した文字列値は、Unicode で 39 文字を超えています。"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Data
  id: Data
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Data
  nameWithType: PeerNameRegistration.Data
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Data
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "取得または設定用のアプリケーション定義のバイナリ データ、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>オブジェクト。"
  remarks: "指定できるデータの上限は、4,096 バイトです。"
  syntax:
    content: public byte[] Data { get; set; }
    return:
      type: System.Byte[]
      description: "エントリに関連付けられているバイナリ データを保持するバイト配列。 このプロパティに設定<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>既定です。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.Data*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定されたデータは、4096 バイトを超えています。"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose
  id: Dispose
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Dispose()
  nameWithType: PeerNameRegistration.Dispose()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>オブジェクト。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: PeerNameRegistration.Dispose(Boolean)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "アンマネージ リソースを解放し、オプションで使用されるマネージ リソースも解放、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>オブジェクト。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  id: EndPointCollection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: EndPointCollection
  nameWithType: PeerNameRegistration.EndPointCollection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "関連付けられているピア名が登録されているネットワーク エンドポイントのコレクションを取得します。"
  remarks: "<xref:System.Net>名前空間、 <xref:System.Net.IPEndPoint>、IP アドレスとポート番号としてネットワーク エンドポイントを表します</xref:System.Net.IPEndPoint></xref:System.Net>。  PNRP では、各エンドポイントの IP アドレスとポート値を指定する必要があります。  指定できるエンドポイントの最大数は、10 個です。 このパラメーターは、ときに、アドレスの自動選択が使用される`null`です。       登録するアドレスを自動的に選択される登録方法を使用する場合、ピア名が登録されているアドレスを確認する方法はありません。  つまり、EndPointCollection プロパティは、選択したアドレスを反映するためには更新されません。       複数のノードのピア名が登録されているときに各<xref:System.Net.PeerToPeer.PeerNameRegistration>は別個の各登録インスタンスで定義された EndPointCollection プロパティが異なる</xref:System.Net.PeerToPeer.PeerNameRegistration>。 ときに、<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>が&1; つ以上登録されている<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>、各登録が個別になり、エンドポイントのコレクションは通常インスタンスごとに異なる</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A></xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>。"
  syntax:
    content: public System.Net.IPEndPointCollection EndPointCollection { get; }
    return:
      type: System.Net.IPEndPointCollection
      description: "<xref:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection*>関連付けられているピア名が登録されているネットワーク エンドポイントを含むオブジェクト</xref:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection*>。 すべてのプロパティの既定値は、明示的に指定しない限り、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>参照型の場合。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "シリアル化情報オブジェクトをシリアル化に必要なデータを追加、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>インスタンス。"
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "関連付けられているシリアル化されたデータを保持、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>オブジェクト。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "関連付けられているシリアル化ストリームの出力先が含まれています、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>オブジェクト。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered
  id: IsRegistered
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: IsRegistered()
  nameWithType: PeerNameRegistration.IsRegistered()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "取得または設定でピア名が指定されているかどうか、<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>プロパティは、特定の登録<xref href=&quot;System.Net.PeerToPeer.Cloud&quot;></xref>ホスト上でします</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>。"
  syntax:
    content: public bool IsRegistered ();
    parameters: []
    return:
      type: System.Boolean
      description: "場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>でピア名を登録、 <> </> *> ピア ホストします。場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>で、登録プロセスを開始することができます<> *> です。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "既に破棄されているオブジェクトを登録することはできません。"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName
  id: PeerName
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerName
  nameWithType: PeerNameRegistration.PeerName
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerName
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "取得またはピア クラウドに登録するピアの名前を設定します。"
  remarks: "ピア名は、複数のノードに登録できます。各<xref:System.Net.PeerToPeer.PeerNameRegistration>インスタンスは異なります</xref:System.Net.PeerToPeer.PeerNameRegistration>。 <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>プロパティに対応する関連付けられている<xref:System.Net.PeerToPeer.PeerName>インスタンスが異なる</xref:System.Net.PeerToPeer.PeerName></xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>。 また、可能であれば、ノードが; に接続されている&1; つ以上のクラウドのピア名を登録するにはこれらの登録の各は別です。 ピア名の<xref:System.Net.IPEndPointCollection>これらのインスタンスそれぞれで異なります</xref:System.Net.IPEndPointCollection>。"
  syntax:
    content: public System.Net.PeerToPeer.PeerName PeerName { get; set; }
    return:
      type: System.Net.PeerToPeer.PeerName
      description: "型のオブジェクト<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;></xref>これに関連付けられている値を含む<xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;></xref>オブジェクト。 すべてのプロパティの既定値は、明示的に指定しない限り、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>参照型の場合。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.PeerName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Port
  id: Port
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Port
  nameWithType: PeerNameRegistration.Port
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Port
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "取得または設定、 [TCP/IP](http://go.microsoft.com/fwlink?LinkID=98458)ポート番号に登録されているピアで使用される、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>オブジェクト。"
  remarks: "既定のポートが使用される、<xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>メソッド エンドポイントが指定されていない場合にのみです</xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>。"
  syntax:
    content: public int Port { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Net.IPEndPoint>。</xref:System.Net.IPEndPoint>の TCP ポート番号を示す整数値 明示的に指定しない限り、このプロパティの既定値はゼロ (0) にします。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.Port*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定したポートの値が&0; 未満です。  ポート番号は、0 以上 65535 (0 xffff) 未満にする必要があります。"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Start
  id: Start
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Start()
  nameWithType: PeerNameRegistration.Start()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Start()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "登録、 <> </> *> に、 <> </> *> です。 ない場合は<> *> を指定、アドレスの自動選択が使用して指定されたポートの値、 <> </> *> プロパティです。"
  remarks: "メソッドで指定されたピア名の登録、<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>ソースのすべてのアドレスを持つプロパティと<xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>コンス トラクターで指定します</xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A></xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>。 エンドポイントが指定されていない場合にのみ、このメソッドが、既定のポートが使用されます。       場合、<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>プロパティは`null`、このメソッドで指定されたピア名の登録、<xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A>プロパティを使用して、<xref:System.Net.PeerToPeer.Cloud.Available>の既定値を初期化するフィールド、 <xref:System.Net.PeerToPeer.Cloud.Name%2A>、 <xref:System.Net.PeerToPeer.Cloud.Scope%2A>、 <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A></xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> </xref:System.Net.PeerToPeer.Cloud.Scope%2A> </xref:System.Net.PeerToPeer.Cloud.Name%2A> </xref:System.Net.PeerToPeer.Cloud.Available> </xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> 。       後に、<xref:System.Net.PeerToPeer.PeerNameRegistration>オブジェクトを開始すると、<xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>それを停止するメソッドを使用</xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>する</xref:System.Net.PeerToPeer.PeerNameRegistration>       登録を更新する、<xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A>メソッドを使用する必要があります</xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A>。"
  example:
  - "The following code example creates a <xref:System.Net.PeerToPeer.PeerName> and registers it along with the metadata specified.  \n  \n [!code-cs[NCLPNRPRegisterPeerName#1](~/add/codesnippet/csharp/m-system.net.peertopeer._1_1.cs)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Start*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>プロパティに設定されている<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref></xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> 。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが既に Dispose() 以前に呼び出されます。"
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "-<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref>指定は既に登録されています。 <> </> *> メソッドは、登録の更新を使用する必要があります。     -リモートのピアが所有していない、 <> </> *> の<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;></xref>指定します。      -か、 <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref>または<> *> が指定されていません。 少なくとも&1; つを指定する必要があります。     -メッセージまたはデータ要素が無効です。または、 <> </> *> セットとなしのデータ blob ではありませんまたは<xref:System.Net.IPEndPoint>が指定されています</xref:System.Net.IPEndPoint>。"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop
  id: Stop
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Stop()
  nameWithType: PeerNameRegistration.Stop()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Stop()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "指定されたピア名の登録を解除、<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>が登録されているすべてのクラウドからのプロパティ</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>。"
  remarks: "登録プロセスを停止すると後、登録オブジェクトの状態は、状態と同じに既定のコンス トラクターによって構築された後に直接です。 この状態で、値が設定されていないすべてのプロパティと見なされます。 <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>メソッドは、それを再起動するために使用可能性があります</xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>       同じピア名に対して複数の登録オブジェクトを設定することができます。  このような場合は、ピア名が保護されて、各インスタンスがそのさまざまな PNRP 集団内の登録を表します。  ただし、ピア名が保護されていない場合それで登録できます、同じクラウド複数回です。       このインスタンスは既に停止されている場合は、このメソッドを呼び出しても効果はありません。"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Stop*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *> プロパティが登録されていません。これが発生したときに、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>空のコンス トラクターを使用してオブジェクトを構築します。<> </> *> <xref:System.Net.PeerToPeer.PeerNameRegistration.Start*>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Start*>を呼び出す前にこのインスタンスでプロパティを入力する必要があります"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このオブジェクトが既に Dispose() 以前に呼び出されます。"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "実装して、 <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>インターフェイスし、シリアル化に必要なデータを返します、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>インスタンス。"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "関連付けられているシリアル化されたデータを保持、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>インスタンス。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "関連付けられているシリアル化ストリームの転送先を格納、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>インスタンス。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Update
  id: Update
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Update()
  nameWithType: PeerNameRegistration.Update()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Update()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "更新プログラム、 <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref>特定に登録されているノードの<xref href=&quot;System.Net.PeerToPeer.Cloud&quot;></xref>です。 プロパティで指定された情報を使用して、更新プログラムが実行されます。"
  remarks: "このクラウド内のすべての情報が登録されている<xref:System.Net.PeerToPeer.PeerName>呼び出しの前に完全に破棄されます</xref:System.Net.PeerToPeer.PeerName>。  新しいデータは既存の登録と組み合わされていません。  更新する、 <xref:System.Net.PeerToPeer.PeerNameRegistration>、まずこのインスタンスのプロパティを更新してこのメソッドを呼び出します</xref:System.Net.PeerToPeer.PeerNameRegistration>。       後に、<xref:System.Net.PeerToPeer.PeerNameRecord>が登録されている、<xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A>プロパティを更新することはできません</xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A></xref:System.Net.PeerToPeer.PeerNameRecord>。  レコード内の他のすべてのフィールドを更新することがあります。"
  syntax:
    content: public void Update ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>プロパティに設定されている<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref></xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*> 。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "-<> </> *> プロパティが登録されていません。ピア名で指定されるまで、Update メソッドを呼び出すことはできません、 <> </> *> プロパティが&1; つまたは複数のクラウドに登録します。      -で指定されたピア名、<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>以降、対応するプロパティが変更された<xref href=&quot;System.Net.PeerToPeer.PeerNameRecord&quot;></xref>登録されました</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>。"
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "破棄されたオブジェクトを登録することはできません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "A <xref href=&quot;System.Net.PeerToPeer.PeerNameRecord&quot;> </xref>プロパティに設定されている<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  id: UseAutoEndPointSelection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: UseAutoEndPointSelection
  nameWithType: PeerNameRegistration.UseAutoEndPointSelection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "取得またはピアのメッシュまたは<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>。</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>を走査する場合は、エンドポイントの自動選択を使用するかどうかを指定する値の設定"
  remarks: "自動エンドポイントの選択を使用する場合 (このプロパティに設定`true`) エンドポイント情報が指定の開始前に、 <xref:System.Net.PeerToPeer.PeerNameRegistration>、システムは、個々 のエンドポイントを選択し、使用可能なすべてのクラウドに関連付けられているピア名が発行されます</xref:System.Net.PeerToPeer.PeerNameRegistration>。  自動選択が<xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>。</xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>として&0; を選択したポートが指定されていない場合       設定すると`false`、前述のように自動選択は実行されません。  これにより、データ blob と共にピア名を公開する登録プロセス (で指定されたとおり、<xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A>プロパティ).</xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A> エンドポイントの名前に関連付けがありません。       どのような解決を判断するメソッドがない登録メソッドを使用した場合に自動的に登録するアドレスを選択する、<xref:System.Net.PeerToPeer.PeerName>オブジェクトが登録されました</xref:System.Net.PeerToPeer.PeerName>。  つまり、<xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>プロパティは、アドレスを選択を反映するように更新されません</xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>。       ピア名の登録が開始した後、このプロパティを更新しても効果はありません。"
  syntax:
    content: public bool UseAutoEndPointSelection { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>エンドポイントの自動選択するために使用する場合は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>でエンドポイントを決定するその他の方法を使用する場合。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.PeerToPeer.PeerToPeerException
  parent: System.Net.PeerToPeer
  isExternal: false
  name: PeerToPeerException
  nameWithType: PeerToPeerException
  fullName: System.Net.PeerToPeer.PeerToPeerException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration()
  nameWithType: PeerNameRegistration.PeerNameRegistration()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration()
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration(PeerName,Int32)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
- uid: System.Net.PeerToPeer.PeerName
  parent: System.Net.PeerToPeer
  isExternal: false
  name: PeerName
  nameWithType: PeerName
  fullName: System.Net.PeerToPeer.PeerName
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration(PeerName,Int32,Cloud)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
- uid: System.Net.PeerToPeer.Cloud
  parent: System.Net.PeerToPeer
  isExternal: false
  name: Cloud
  nameWithType: Cloud
  fullName: System.Net.PeerToPeer.Cloud
- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Cloud
  nameWithType: PeerNameRegistration.Cloud
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Cloud
- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Comment
  nameWithType: PeerNameRegistration.Comment
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Comment
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.PeerToPeer.PeerNameRegistration.Data
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Data
  nameWithType: PeerNameRegistration.Data
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Data
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Dispose()
  nameWithType: PeerNameRegistration.Dispose()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose()
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: PeerNameRegistration.Dispose(Boolean)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: EndPointCollection
  nameWithType: PeerNameRegistration.EndPointCollection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
- uid: System.Net.IPEndPointCollection
  parent: System.Net
  isExternal: false
  name: IPEndPointCollection
  nameWithType: IPEndPointCollection
  fullName: System.Net.IPEndPointCollection
- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: IsRegistered()
  nameWithType: PeerNameRegistration.IsRegistered()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered()
- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerName
  nameWithType: PeerNameRegistration.PeerName
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerName
- uid: System.Net.PeerToPeer.PeerNameRegistration.Port
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Port
  nameWithType: PeerNameRegistration.Port
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Port
- uid: System.Net.PeerToPeer.PeerNameRegistration.Start
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Start()
  nameWithType: PeerNameRegistration.Start()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Start()
- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Stop()
  nameWithType: PeerNameRegistration.Stop()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Stop()
- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.PeerToPeer.PeerNameRegistration.Update
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Update()
  nameWithType: PeerNameRegistration.Update()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Update()
- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: UseAutoEndPointSelection
  nameWithType: PeerNameRegistration.UseAutoEndPointSelection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration
  nameWithType: PeerNameRegistration.PeerNameRegistration
- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Cloud
  nameWithType: PeerNameRegistration.Cloud
- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Comment
  nameWithType: PeerNameRegistration.Comment
- uid: System.Net.PeerToPeer.PeerNameRegistration.Data*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Data
  nameWithType: PeerNameRegistration.Data
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Dispose
  nameWithType: PeerNameRegistration.Dispose
- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: EndPointCollection
  nameWithType: PeerNameRegistration.EndPointCollection
- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: GetObjectData
  nameWithType: PeerNameRegistration.GetObjectData
- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: IsRegistered
  nameWithType: PeerNameRegistration.IsRegistered
- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerName
  nameWithType: PeerNameRegistration.PeerName
- uid: System.Net.PeerToPeer.PeerNameRegistration.Port*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Port
  nameWithType: PeerNameRegistration.Port
- uid: System.Net.PeerToPeer.PeerNameRegistration.Start*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Start
  nameWithType: PeerNameRegistration.Start
- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Stop
  nameWithType: PeerNameRegistration.Stop
- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Net.PeerToPeer.PeerNameRegistration.Update*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Update
  nameWithType: PeerNameRegistration.Update
- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: UseAutoEndPointSelection
  nameWithType: PeerNameRegistration.UseAutoEndPointSelection
