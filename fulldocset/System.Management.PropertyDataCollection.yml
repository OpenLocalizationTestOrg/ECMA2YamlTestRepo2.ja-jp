### YamlMime:ManagedReference
items:
- uid: System.Management.PropertyDataCollection
  id: PropertyDataCollection
  children:
  - System.Management.PropertyDataCollection.Add(System.String,System.Object)
  - System.Management.PropertyDataCollection.Add(System.String,System.Management.CimType,System.Boolean)
  - System.Management.PropertyDataCollection.Add(System.String,System.Object,System.Management.CimType)
  - System.Management.PropertyDataCollection.CopyTo(System.Array,System.Int32)
  - System.Management.PropertyDataCollection.CopyTo(System.Management.PropertyData[],System.Int32)
  - System.Management.PropertyDataCollection.Count
  - System.Management.PropertyDataCollection.GetEnumerator
  - System.Management.PropertyDataCollection.IsSynchronized
  - System.Management.PropertyDataCollection.Item(System.String)
  - System.Management.PropertyDataCollection.Remove(System.String)
  - System.Management.PropertyDataCollection.SyncRoot
  - System.Management.PropertyDataCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: PropertyDataCollection
  nameWithType: PropertyDataCollection
  fullName: System.Management.PropertyDataCollection
  type: Class
  summary: "WMI オブジェクトのプロパティのセットを表します。"
  remarks: ''
  example:
  - "The following example lists information about the **Win32_OperatingSystem** class using the <xref:System.Management.PropertyData> class. For more information about **Win32_OperatingSystem**, see the Windows Management Instrumentation documentation in the MSDN Library at http://msdn.microsoft.com/library.  \n  \n [!code-cs[wminet_PropertyDataCollection#1](~/add/codesnippet/csharp/t-system.management.prop_1_1.cs)]\n [!code-vb[wminet_PropertyDataCollection#1](~/add/codesnippet/visualbasic/t-system.management.prop_1_1.vb)]"
  syntax:
    content: 'public class PropertyDataCollection : System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.Add(System.String,System.Object)
  id: Add(System.String,System.Object)
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: Add(String,Object)
  nameWithType: PropertyDataCollection.Add(String,Object)
  fullName: System.Management.PropertyDataCollection.Add(String,Object)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "新しく追加<xref href=&quot;System.Management.PropertyData&quot;></xref>指定した値です。 値は null にすることはできませんし、Common Information Model (CIM) の型に変換する必要があります。"
  remarks: "プロパティは、インスタンスが、クラス定義にのみ追加できます。 このメソッドは、のみ<xref:System.Management.PropertyDataCollection><xref:System.Management.ManagementClass>。</xref:System.Management.ManagementClass></xref:System.Management.PropertyDataCollection>で呼び出されると有効です。      ## 直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public virtual void Add (string propertyName, object propertyValue);
    parameters:
    - id: propertyName
      type: System.String
      description: "新しいプロパティの名前。"
    - id: propertyValue
      type: System.Object
      description: "(Null にすることはできません) プロパティの値。"
  overload: System.Management.PropertyDataCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.Add(System.String,System.Management.CimType,System.Boolean)
  id: Add(System.String,System.Management.CimType,System.Boolean)
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: Add(String,CimType,Boolean)
  nameWithType: PropertyDataCollection.Add(String,CimType,Boolean)
  fullName: System.Management.PropertyDataCollection.Add(String,CimType,Boolean)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "新しく追加<xref href=&quot;System.Management.PropertyData&quot;></xref>で割り当てられている値はありません。"
  remarks: "プロパティは、インスタンスが、クラス定義にのみ追加できます。 このメソッドは、のみ<xref:System.Management.PropertyDataCollection><xref:System.Management.ManagementClass>。</xref:System.Management.ManagementClass></xref:System.Management.PropertyDataCollection>で呼び出されると有効です。      ## 直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void Add (string propertyName, System.Management.CimType propertyType, bool isArray);
    parameters:
    - id: propertyName
      type: System.String
      description: "プロパティの名前です。"
    - id: propertyType
      type: System.Management.CimType
      description: "プロパティの Common Information Model (CIM) の型。"
    - id: isArray
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティが配列型であることを指定するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Management.PropertyDataCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.Add(System.String,System.Object,System.Management.CimType)
  id: Add(System.String,System.Object,System.Management.CimType)
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: Add(String,Object,CimType)
  nameWithType: PropertyDataCollection.Add(String,Object,CimType)
  fullName: System.Management.PropertyDataCollection.Add(String,Object,CimType)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "新しく追加<xref href=&quot;System.Management.PropertyData&quot;></xref>では、指定した値と Common Information Model (CIM) を入力します。"
  remarks: "プロパティは、インスタンスが、クラス定義にのみ追加できます。 このメソッドは、のみ<xref:System.Management.PropertyDataCollection><xref:System.Management.ManagementClass>。</xref:System.Management.ManagementClass></xref:System.Management.PropertyDataCollection>で呼び出されると有効です。      ## 直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void Add (string propertyName, object propertyValue, System.Management.CimType propertyType);
    parameters:
    - id: propertyName
      type: System.String
      description: "プロパティの名前です。"
    - id: propertyValue
      type: System.Object
      description: "(を null にすることができます) プロパティの値。"
    - id: propertyType
      type: System.Management.CimType
      description: "プロパティの CIM 型です。"
  overload: System.Management.PropertyDataCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: PropertyDataCollection.CopyTo(Array,Int32)
  fullName: System.Management.PropertyDataCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "コピー、 <xref href=&quot;System.Management.PropertyDataCollection&quot;> </xref>を配列にします。"
  remarks: "##直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "コピー先の配列、 <xref href=&quot;System.Management.PropertyDataCollection&quot;></xref>です。"
    - id: index
      type: System.Int32
      description: "元のコピーを開始するインデックス。"
  overload: System.Management.PropertyDataCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.CopyTo(System.Management.PropertyData[],System.Int32)
  id: CopyTo(System.Management.PropertyData[],System.Int32)
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: CopyTo(PropertyData[],Int32)
  nameWithType: PropertyDataCollection.CopyTo(PropertyData[],Int32)
  fullName: System.Management.PropertyDataCollection.CopyTo(PropertyData[],Int32)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "コピー、 <xref href=&quot;System.Management.PropertyDataCollection&quot;> </xref>に特化した<xref href=&quot;System.Management.PropertyData&quot;></xref>オブジェクトの配列。"
  remarks: "##直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void CopyTo (System.Management.PropertyData[] propertyArray, int index);
    parameters:
    - id: propertyArray
      type: System.Management.PropertyData[]
      description: "コピー先の配列を含む、先ほどコピーした<xref href=&quot;System.Management.PropertyDataCollection&quot;></xref>です。"
    - id: index
      type: System.Int32
      description: "コピー開始位置からコピー先の配列内のインデックス。"
  overload: System.Management.PropertyDataCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.Count
  id: Count
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: Count
  nameWithType: PropertyDataCollection.Count
  fullName: System.Management.PropertyDataCollection.Count
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "内のオブジェクトの数を取得、 <xref href=&quot;System.Management.PropertyDataCollection&quot;></xref>です。"
  remarks: "##プロパティ値のコレクション内のオブジェクトの数。      ## 直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "返します、<xref:System.Int32>コレクション内のオブジェクトの数を表す値</xref:System.Int32>。"
  overload: System.Management.PropertyDataCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PropertyDataCollection.GetEnumerator()
  fullName: System.Management.PropertyDataCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "この列挙子を返します<xref href=&quot;System.Management.PropertyDataCollection&quot;></xref>です。"
  remarks: "反復処理することができますのみ (Visual Basic .NET のように`For Each`ステートメントまたは c#`For`ステートメント)、順方向専用列挙子を&1; 回使用します。 インスタンスを含むメモリは、列挙子を巻き戻しできないように、WMI によって解放されます。 したがって、<xref:System.Management.PropertyDataCollection.Count%2A>巻き戻し、列挙子を必要となるために、メソッドを使用することはできません</xref:System.Management.PropertyDataCollection.Count%2A>。       <xref:System.Management.PropertyDataCollection.PropertyDataEnumerator.Reset%2A>。</xref:System.Management.PropertyDataCollection.PropertyDataEnumerator.Reset%2A>への呼び出しを許可しませんが、順方向専用の列挙子は、一般にはるかに高速および従来の列挙子よりも少ないメモリの使用       列挙子が巻き戻し可能な場合は、コレクション内のオブジェクトが保持されます列挙体の複数使用できます。      ## 直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Management.PropertyDataCollection.PropertyDataEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Management.PropertyDataCollection.PropertyDataEnumerator
      description: "<xref:System.Collections.IEnumerator>コレクションを反復処理に使用できる</xref:System.Collections.IEnumerator>。"
  overload: System.Management.PropertyDataCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: PropertyDataCollection.IsSynchronized
  fullName: System.Management.PropertyDataCollection.IsSynchronized
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "オブジェクトが同期されているかどうかを示す値を取得します。"
  remarks: "##プロパティ値`true`オブジェクトが同期されている、それ以外の場合は`false`します。      ## 直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "返します、<xref:System.Boolean>オブジェクトが同期されているかどうかを示す値</xref:System.Boolean>。"
  overload: System.Management.PropertyDataCollection.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: PropertyDataCollection.Item(String)
  fullName: System.Management.PropertyDataCollection.Item(String)
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "指定したプロパティの取得、 <xref href=&quot;System.Management.PropertyDataCollection&quot;> </xref>、の構文を使用します。 このプロパティは、のインデクサー、 <xref href=&quot;System.Management.PropertyDataCollection&quot;> </xref>クラスです。"
  remarks: "##プロパティ値 A<xref:System.Management.PropertyData>指定された名前に基づいて、</xref:System.Management.PropertyData> 。      ## 直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example gets the **Freespace** property from a <xref:System.Management.ManagementClass>.  \n  \n [!code-vb[wminet_PropertyDataCollection_Item#1](~/add/codesnippet/visualbasic/p-system.management.prop_4_1.vb)]\n [!code-cs[wminet_PropertyDataCollection_Item#1](~/add/codesnippet/csharp/p-system.management.prop_4_1.cs)]"
  syntax:
    content: public virtual System.Management.PropertyData this[string propertyName] { get; }
    parameters:
    - id: propertyName
      type: System.String
      description: "取得するプロパティの名前。"
    return:
      type: System.Management.PropertyData
      description: "返します、 <xref href=&quot;System.Management.PropertyData&quot;> </xref>コレクション内の指定したプロパティのデータを格納します。"
  overload: System.Management.PropertyDataCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: PropertyDataCollection.Remove(String)
  fullName: System.Management.PropertyDataCollection.Remove(String)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Removes a <xref href=&quot;System.Management.PropertyData&quot;></xref> from the <xref href=&quot;System.Management.PropertyDataCollection&quot;></xref>."
  remarks: "プロパティは、インスタンスからではなく、クラス定義からのみ削除できます。 このメソッドは、のみ<xref:System.Management.ManagementClass>。</xref:System.Management.ManagementClass>プロパティ コレクションで呼び出されると有効です。      ## 直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public virtual void Remove (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "削除するプロパティの名前。"
  overload: System.Management.PropertyDataCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.SyncRoot
  id: SyncRoot
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: PropertyDataCollection.SyncRoot
  fullName: System.Management.PropertyDataCollection.SyncRoot
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "同期に使用するオブジェクトを取得します。"
  remarks: "##同期に使用するオブジェクトのプロパティ値します。      ## 直前の呼び出し元の .NET framework のセキュリティの完全な信頼。 このメンバーは、部分信頼コードから使用することはできません。 詳細については、次を参照してください。[部分信頼コードからライブラリを使用して](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "返します、<xref:System.Object>の同期に使用するオブジェクトを含む値です</xref:System.Object>。"
  overload: System.Management.PropertyDataCollection.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Management.PropertyDataCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Management.PropertyDataCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: PropertyDataCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Management.PropertyDataCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "返します、<xref:System.Collections.IEnumerator>を反復処理する、 <xref href=&quot;System.Management.PropertyDataCollection&quot;> </xref></xref:System.Collections.IEnumerator> 。"
  remarks: "[Visual Basic、C# の場合]      `foreach` C# 言語のステートメント (`for each` Visual Basic で)、列挙子の複雑さが隠されています。  したがってを使用して`foreach`列挙子を直接操作せずにお勧めします。       列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。       最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。 <xref:System.Collections.IEnumerator.Reset%2A>列挙子をこの位置に戻さ点もあります。</xref:System.Collections.IEnumerator.Reset%2A> この位置で、呼び出す<xref:System.Collections.IEnumerator.Current%2A>例外をスローします</xref:System.Collections.IEnumerator.Current%2A>。 したがって、 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.Current%2A>の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに</xref:System.Collections.IEnumerator.MoveNext%2A>呼び出す必要があります。       <xref:System.Collections.IEnumerator.Current%2A>いずれかのまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>と呼びます</xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.IEnumerator.Current%2A>次の要素にします</xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>       場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`</xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`</xref:System.Collections.IEnumerator.MoveNext%2A>。 場合は、最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、呼び出し元<xref:System.Collections.IEnumerator.Current%2A>例外をスローします</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 <xref:System.Collections.IEnumerator.Current%2A>再度、コレクションの最初の要素に<xref:System.Collections.IEnumerator.Reset%2A><xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>続けて</xref:System.Collections.IEnumerator.Reset%2A>を呼び出すことができます</xref:System.Collections.IEnumerator.Current%2A>を設定するには       コレクションが変更されない限り、列挙子は有効です。 コレクションの変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子は回復不可能な無効なり、次を<xref:System.Collections.IEnumerator.MoveNext%2A><xref:System.Collections.IEnumerator.Reset%2A><xref:System.InvalidOperationException>。</xref:System.InvalidOperationException>をスロー</xref:System.Collections.IEnumerator.Reset%2A>または</xref:System.Collections.IEnumerator.MoveNext%2A> 間で、コレクションが変更された場合<xref:System.Collections.IEnumerator.MoveNext%2A>と<xref:System.Collections.IEnumerator.Current%2A>、<xref:System.Collections.IEnumerator.Current%2A>列挙子が既に無効になっている場合でもに設定されている要素を返します</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。       列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は本質的にスレッド セーフな処理 コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。       このメソッドは、o (1) 操作です。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Management.PropertyDataCollection&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Management.PropertyDataCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Management.PropertyDataCollection.Add(System.String,System.Object)
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: Add(String,Object)
  nameWithType: PropertyDataCollection.Add(String,Object)
  fullName: System.Management.PropertyDataCollection.Add(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Management.PropertyDataCollection.Add(System.String,System.Management.CimType,System.Boolean)
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: Add(String,CimType,Boolean)
  nameWithType: PropertyDataCollection.Add(String,CimType,Boolean)
  fullName: System.Management.PropertyDataCollection.Add(String,CimType,Boolean)
- uid: System.Management.CimType
  parent: System.Management
  isExternal: false
  name: CimType
  nameWithType: CimType
  fullName: System.Management.CimType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Management.PropertyDataCollection.Add(System.String,System.Object,System.Management.CimType)
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: Add(String,Object,CimType)
  nameWithType: PropertyDataCollection.Add(String,Object,CimType)
  fullName: System.Management.PropertyDataCollection.Add(String,Object,CimType)
- uid: System.Management.PropertyDataCollection.CopyTo(System.Array,System.Int32)
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: PropertyDataCollection.CopyTo(Array,Int32)
  fullName: System.Management.PropertyDataCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Management.PropertyDataCollection.CopyTo(System.Management.PropertyData[],System.Int32)
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: CopyTo(PropertyData[],Int32)
  nameWithType: PropertyDataCollection.CopyTo(PropertyData[],Int32)
  fullName: System.Management.PropertyDataCollection.CopyTo(PropertyData[],Int32)
- uid: System.Management.PropertyData[]
  parent: System.Management
  isExternal: false
  name: PropertyData
  nameWithType: PropertyData
  fullName: System.Management.PropertyData[]
  spec.csharp:
  - uid: System.Management.PropertyData
    name: PropertyData
    nameWithType: PropertyData
    fullName: PropertyData[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Management.PropertyDataCollection.Count
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: Count
  nameWithType: PropertyDataCollection.Count
  fullName: System.Management.PropertyDataCollection.Count
- uid: System.Management.PropertyDataCollection.GetEnumerator
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: PropertyDataCollection.GetEnumerator()
  fullName: System.Management.PropertyDataCollection.GetEnumerator()
- uid: System.Management.PropertyDataCollection.PropertyDataEnumerator
  parent: System.Management
  isExternal: false
  name: PropertyDataCollection+PropertyDataEnumerator
  nameWithType: PropertyDataCollection+PropertyDataEnumerator
  fullName: System.Management.PropertyDataCollection+PropertyDataEnumerator
- uid: System.Management.PropertyDataCollection.IsSynchronized
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: PropertyDataCollection.IsSynchronized
  fullName: System.Management.PropertyDataCollection.IsSynchronized
- uid: System.Management.PropertyDataCollection.Item(System.String)
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: Item(String)
  nameWithType: PropertyDataCollection.Item(String)
  fullName: System.Management.PropertyDataCollection.Item(String)
- uid: System.Management.PropertyData
  parent: System.Management
  isExternal: false
  name: PropertyData
  nameWithType: PropertyData
  fullName: System.Management.PropertyData
- uid: System.Management.PropertyDataCollection.Remove(System.String)
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: Remove(String)
  nameWithType: PropertyDataCollection.Remove(String)
  fullName: System.Management.PropertyDataCollection.Remove(String)
- uid: System.Management.PropertyDataCollection.SyncRoot
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: SyncRoot
  nameWithType: PropertyDataCollection.SyncRoot
  fullName: System.Management.PropertyDataCollection.SyncRoot
- uid: System.Management.PropertyDataCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: PropertyDataCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Management.PropertyDataCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Management.PropertyDataCollection.Add*
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: Add
  nameWithType: PropertyDataCollection.Add
- uid: System.Management.PropertyDataCollection.CopyTo*
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: CopyTo
  nameWithType: PropertyDataCollection.CopyTo
- uid: System.Management.PropertyDataCollection.Count*
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: Count
  nameWithType: PropertyDataCollection.Count
- uid: System.Management.PropertyDataCollection.GetEnumerator*
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: PropertyDataCollection.GetEnumerator
- uid: System.Management.PropertyDataCollection.IsSynchronized*
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: PropertyDataCollection.IsSynchronized
- uid: System.Management.PropertyDataCollection.Item*
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: Item
  nameWithType: PropertyDataCollection.Item
- uid: System.Management.PropertyDataCollection.Remove*
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: Remove
  nameWithType: PropertyDataCollection.Remove
- uid: System.Management.PropertyDataCollection.SyncRoot*
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: SyncRoot
  nameWithType: PropertyDataCollection.SyncRoot
- uid: System.Management.PropertyDataCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Management.PropertyDataCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: PropertyDataCollection.System.Collections.IEnumerable.GetEnumerator
