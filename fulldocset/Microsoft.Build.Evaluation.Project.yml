### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Evaluation.Project
  id: Project
  children:
  - Microsoft.Build.Evaluation.Project.#ctor
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  - Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  - Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  - Microsoft.Build.Evaluation.Project.Build
  - Microsoft.Build.Evaluation.Project.Build(Microsoft.Build.Framework.ILogger)
  - Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Evaluation.Project.Build(System.String)
  - Microsoft.Build.Evaluation.Project.Build(System.String[])
  - Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Evaluation.Project.ConditionedProperties
  - Microsoft.Build.Evaluation.Project.CreateProjectInstance
  - Microsoft.Build.Evaluation.Project.CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  - Microsoft.Build.Evaluation.Project.DirectoryPath
  - Microsoft.Build.Evaluation.Project.DisableMarkDirty
  - Microsoft.Build.Evaluation.Project.EvaluationCounter
  - Microsoft.Build.Evaluation.Project.ExpandString(System.String)
  - Microsoft.Build.Evaluation.Project.FullPath
  - Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  - Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  - Microsoft.Build.Evaluation.Project.GetItems(System.String)
  - Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(System.String)
  - Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(System.String)
  - Microsoft.Build.Evaluation.Project.GetLogicalProject
  - Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  - Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  - Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  - Microsoft.Build.Evaluation.Project.GetProperty(System.String)
  - Microsoft.Build.Evaluation.Project.GetPropertyValue(System.String)
  - Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  - Microsoft.Build.Evaluation.Project.GlobalProperties
  - Microsoft.Build.Evaluation.Project.Imports
  - Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  - Microsoft.Build.Evaluation.Project.IsBuildEnabled
  - Microsoft.Build.Evaluation.Project.IsDirty
  - Microsoft.Build.Evaluation.Project.ItemDefinitions
  - Microsoft.Build.Evaluation.Project.Items
  - Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  - Microsoft.Build.Evaluation.Project.ItemTypes
  - Microsoft.Build.Evaluation.Project.MarkDirty
  - Microsoft.Build.Evaluation.Project.ProjectCollection
  - Microsoft.Build.Evaluation.Project.ProjectFileLocation
  - Microsoft.Build.Evaluation.Project.Properties
  - Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary
  - Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(System.String)
  - Microsoft.Build.Evaluation.Project.RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  - Microsoft.Build.Evaluation.Project.RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  - Microsoft.Build.Evaluation.Project.RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  - Microsoft.Build.Evaluation.Project.Save
  - Microsoft.Build.Evaluation.Project.Save(System.IO.TextWriter)
  - Microsoft.Build.Evaluation.Project.Save(System.String)
  - Microsoft.Build.Evaluation.Project.Save(System.Text.Encoding)
  - Microsoft.Build.Evaluation.Project.Save(System.String,System.Text.Encoding)
  - Microsoft.Build.Evaluation.Project.SaveLogicalProject(System.IO.TextWriter)
  - Microsoft.Build.Evaluation.Project.SetGlobalProperty(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.SetProperty(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.SkipEvaluation
  - Microsoft.Build.Evaluation.Project.SubToolsetVersion
  - Microsoft.Build.Evaluation.Project.Targets
  - Microsoft.Build.Evaluation.Project.ToolsVersion
  - Microsoft.Build.Evaluation.Project.Xml
  langs:
  - csharp
  name: Project
  nameWithType: Project
  fullName: Microsoft.Build.Evaluation.Project
  type: Class
  summary: "デザイン時のセマンティクスを持つプロジェクトを表します。 このクラスでは、プロジェクト ファイルを読み込み、アイテムとプロパティを編集、およびプロジェクトをビルドできます。"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{FullPath} EffectiveToolsVersion={ToolsVersion} #GlobalProperties={data.globalProperties.Count} #Properties={data.Properties.Count} #ItemTypes={data.ItemTypes.Count} #ItemDefinitions={data.ItemDefinitions.Count} #Items={data.Items.Count} #Targets={data.Targets.Count}")]

      public class Project
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor
  id: '#ctor'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project()
  nameWithType: Project.Project()
  fullName: Microsoft.Build.Evaluation.Project.Project()
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "グローバル プロジェクト コレクションのグローバル プロパティと既定のツール バージョンを使用して空のプロジェクトを構築します。"
  remarks: "通常、プロジェクトを保存することによって、ソース プロジェクト ファイルの完全なパスを指定した場合、このプロジェクトはグローバル プロジェクト コレクションに追加します。"
  syntax:
    content: public Project ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement)
  nameWithType: Project.Project(ProjectRootElement)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "空のプロジェクトを構築し、指定したプロジェクトのルートと、グローバル プロジェクト コレクション グローバル プロパティ、および既定のツール バージョンを使用して評価します。"
  remarks: "このプロジェクトまたは指定されたプロジェクトのルートには、ソース プロジェクト ファイルに完全なパスを指定した場合、このプロジェクトはグローバル プロジェクト コレクションに追加します。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。"
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "評価に使用する ProjectRootElement です。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectCollection)
  nameWithType: Project.Project(ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定されたプロジェクト コレクションのグローバル プロパティと既定のツール バージョンを使用して空のプロジェクトを構築します。"
  remarks: "通常、プロジェクトを保存することによって、ソース プロジェクト ファイルの完全なパスを指定した場合、このプロジェクトは特定のプロジェクト コレクションに追加します。"
  syntax:
    content: public Project (Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "新しいプロジェクトに追加されるプロジェクトのコレクション。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String)
  nameWithType: Project.Project(String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトの構築を使用して、グローバル プロジェクト コレクションのグローバル プロパティと既定のツール バージョンを使用して指定したソース プロジェクト ファイルから評価します。"
  remarks: "プロジェクトがグローバル プロジェクト コレクションに追加されます。       このソース プロジェクト ファイルを評価するプロジェクト コレクションでプロジェクトが既に InvalidOperationException をスローします。 IO 関連の例外をスローすることがあります。"
  syntax:
    content: public Project (string projectFile);
    parameters:
    - id: projectFile
      type: System.String
      description: "評価するソース プロジェクト ファイルです。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions:
  - type: Microsoft.Build.Exceptions.InvalidProjectFileException
    commentId: T:Microsoft.Build.Exceptions.InvalidProjectFileException
    description: "評価が失敗するとします。"
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader)
  id: '#ctor(System.Xml.XmlReader)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader)
  nameWithType: Project.Project(XmlReader)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築し、指定した XML リーダーからソース コードを評価します。 ソース コードは、グローバル プロジェクト コレクションのグローバル プロパティと既定のツール バージョンで評価されます。"
  remarks: "通常、プロジェクトを保存することによって、ソース プロジェクト ファイルの完全なパスを指定した場合、このプロジェクトはグローバル プロジェクト コレクションに追加します。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。"
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "プロジェクトのソース コードを読み取る Xml リーダー。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "空のプロジェクトを構築して、指定したプロジェクトのルートを使用して評価し、指定のグローバル プロパティとツール バージョン。"
  remarks: "このプロジェクトまたは指定されたプロジェクトのルートには、ソース プロジェクト ファイルに完全なパスを指定した場合、このプロジェクトはグローバル プロジェクト コレクションに追加します。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。"
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "評価に使用するプロジェクトのルートです。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "評価に使用するツール バージョン。 Null にすることがあります。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "特定のプロジェクト コレクションを使用して、指定のグローバル プロパティを使用して評価するツール バージョンを指定する、空のプロジェクトを構築します。"
  remarks: "通常、プロジェクトを保存することによって、ソース プロジェクト ファイルの完全なパスを指定した場合、プロジェクトが指定されたプロジェクト コレクションに追加されます。"
  syntax:
    content: public Project (System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "プロジェクトを評価するために使用するツール バージョン。 Null にすることがあります。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "新しいプロジェクトのプロジェクト コレクションに追加されます。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String)
  nameWithType: Project.Project(String,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築して、指定したソース プロジェクト ファイルから、指定のグローバル プロパティとツール バージョン評価します。"
  remarks: "プロジェクトがグローバル プロジェクト コレクションに追加されます。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。 IO 関連の例外をスローすることがあります。"
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion);
    parameters:
    - id: projectFile
      type: System.String
      description: "評価するソース プロジェクト ファイルへのパス。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "評価に使用するツール バージョン。 Null にすることがあります。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築し、指定した XML リーダーからソース コードを評価します。 ソース コードが指定のグローバル プロパティを使用して評価し、ツール バージョンを指定します。"
  remarks: "通常、プロジェクトを保存することによって、ソース プロジェクト ファイルの完全なパスを指定した場合、このプロジェクトはグローバル プロジェクト コレクションに追加します。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。"
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "プロジェクトのソース コードを読み取る Xml リーダー。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "評価に使用するツール バージョン。 Null にすることがあります。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築して、指定したプロジェクトのルートを使用して評価し、指定のグローバル プロパティとツール バージョン。"
  remarks: "このプロジェクトまたは指定されたプロジェクトのルートには、ソース プロジェクト ファイルへの完全パスを指定した場合、このプロジェクトは特定のプロジェクト コレクションに追加します。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。"
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "評価に使用するプロジェクトのルートです。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "評価に使用するツール バージョン。 Null にすることがあります。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "プロジェクト コレクション、プロジェクトが追加されます。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築して、指定したソース プロジェクト ファイルから、指定のグローバル プロパティとツール バージョン評価します。"
  remarks: "プロジェクトは、特定のプロジェクト コレクションに追加されます。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。 IO 関連の例外をスローすることがあります。"
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: projectFile
      type: System.String
      description: "評価するソース プロジェクト ファイルへのパス。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "グローバル プロパティ。 Null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "ツール バージョン。 Null にすることがあります。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "プロジェクト コレクション、プロジェクトが追加されます。 Null は許可されません。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築し、指定した XML リーダーからソース コードを評価します。 ソース コードが指定のグローバル プロパティを使用して評価し、ツール バージョンを指定します。"
  remarks: "このプロジェクトまたは指定されたプロジェクトのルートには、ソース プロジェクト ファイルへの完全パスを指定した場合、このプロジェクトは特定のプロジェクト コレクションに追加します。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。"
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "プロジェクトのソース コードを読み取る Xml リーダー。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "評価に使用するツール バージョン。 Null にすることがあります。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "プロジェクト コレクション、プロジェクトが追加されます。 Null は許可されません。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築して、指定したプロジェクトのルートを使用して評価し、指定のグローバル プロパティとツール バージョン、および読み込みの設定を指定します。"
  remarks: "このプロジェクトまたは指定されたプロジェクトのルートには、ソース プロジェクト ファイルへの完全パスを指定した場合、このプロジェクトは特定のプロジェクト コレクションに追加します。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。"
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "評価に使用するプロジェクトのルートです。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "評価に使用するツール バージョン。 Null にすることがあります。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "プロジェクト コレクション、プロジェクトが追加されます。 Null は許可されません。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "評価に使用する設定の読み込みします。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築し、ツール バージョン、および読み込み設定の指定のグローバル プロパティを使用して指定したソース プロジェクト ファイルから評価します。"
  remarks: "プロジェクトは、特定のプロジェクト コレクションに追加されます。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。 IO 関連の例外をスローすることがあります。"
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: projectFile
      type: System.String
      description: "評価するソース プロジェクト ファイルへのパス。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "ツール バージョン。 Null にすることがあります。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "プロジェクト コレクション、プロジェクトが追加されます。 Null は許可されません。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "評価に使用する設定の読み込みします。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築し、指定した XML リーダーからソース コードを評価します。 ソース コードが指定のグローバル プロパティを使用して評価し、ツール バージョンを指定します。"
  remarks: "このプロジェクトまたは指定されたプロジェクトのルートには、ソース プロジェクト ファイルへの完全パスを指定した場合、このプロジェクトは特定のプロジェクト コレクションに追加します。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。"
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "プロジェクトのソース コードを読み取り元の Xml リーダーです。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "評価に使用するツール バージョン。 Null にすることがあります。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "プロジェクト コレクション、プロジェクトが追加されます。 Null は許可されません。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "評価に使用する設定の読み込みします。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築、指定したプロジェクトのルートを使用して評価しで指定のグローバル プロパティ、ツール、サブツール セットのバージョンのプロジェクト コレクション、および設定を読み込めません。"
  remarks: "このプロジェクトまたは指定されたプロジェクトのルートには、ソース プロジェクト ファイルへの完全パスを指定した場合、このプロジェクトは特定のプロジェクト コレクションに追加します。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。"
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "評価に使用するプロジェクトのルートです。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "評価に使用するツール バージョン。 Null にすることがあります。"
    - id: subToolsetVersion
      type: System.String
      description: "評価に使用するには、ツールセットのバージョンを sub です。 Null にすることがあります。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "プロジェクト コレクション、プロジェクトが追加されます。 Null は許可されません。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "評価に使用する設定の読み込みします。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築して、指定のグローバル プロパティ、ツール、サブツール セットのバージョン、プロジェクト コレクション、および設定の読み込みを使用して指定したソース プロジェクト ファイルから評価します。"
  remarks: "プロジェクトは、特定のプロジェクト コレクションに追加されます。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。 IO 関連の例外をスローすることがあります。"
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: projectFile
      type: System.String
      description: "評価するソース プロジェクト ファイルへのパス。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "ツール バージョン。 Null にすることがあります。"
    - id: subToolsetVersion
      type: System.String
      description: "Sub ツールセットのバージョン。 Null にすることがあります。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "プロジェクト コレクション、プロジェクトが追加されます。 Null は許可されません。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "評価に使用する設定の読み込みします。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトを構築し、指定した XML リーダーからソース コードを評価します。 ソース コードは、指定のグローバル プロパティ、ツール、サブツール セットのバージョン、プロジェクト コレクション、および設定の読み込みと評価されます。"
  remarks: "このプロジェクトまたは指定されたプロジェクトのルートには、ソース プロジェクト ファイルへの完全パスを指定した場合、このプロジェクトは特定のプロジェクト コレクションに追加します。       評価に失敗した場合は、InvalidProjectFileException をスローします。 スローされます InvalidOperationException 同等のプロジェクトが既にある場合は、プロジェクト コレクションに読み込まれます。"
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "プロジェクトのソース コードを読み取る Xml リーダー。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "評価に使用するグローバル プロパティ。 その場合は、親プロジェクト コレクションのグローバル プロパティが使用されます null にすることがあります。"
    - id: toolsVersion
      type: System.String
      description: "評価に使用するツール バージョン。 Null にすることがあります。"
    - id: subToolsetVersion
      type: System.String
      description: "評価に使用するツールセットのバージョンをサブです。 Null にすることがあります。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "プロジェクト コレクション、プロジェクトが追加されます。 Null は許可されません。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "評価に使用する設定の読み込みします。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String)
  id: AddItem(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItem(String,String)
  nameWithType: Project.AddItem(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "メタデータの項目をプロジェクトに追加しません。"
  remarks: "すべてのメタデータは、後で追加できます。 既にワイルドカードの式には、新しい項目が含まれている場合は、プロジェクトのソースを変更しません。       評価は、ベスト エフォートの原則で行われます。 次の新しい項目のプロジェクトのソースで定義されている項目を使用して、評価版の可能性があります。 このアイテムのみが評価されます。 依存しているその他の項目には影響しません。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItem (string itemType, string unevaluatedInclude);
    parameters:
    - id: itemType
      type: System.String
      description: "追加する項目の項目の種類。"
    - id: unevaluatedInclude
      type: System.String
      description: "追加する項目の属性が含まれます。"
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "追加された項目を返します。"
  overload: Microsoft.Build.Evaluation.Project.AddItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定したメタデータを持つ項目をプロジェクトに追加します。"
  remarks: "メタデータがあります null でないことを示しますメタデータ。       評価は、ベスト エフォートの原則で行われます。 次の新しい項目のプロジェクトのソースで定義されている項目を使用して、評価版の可能性があります。 このアイテムのみが評価されます。 依存しているその他の項目には影響しません。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItem (string itemType, string unevaluatedInclude, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,string>> metadata);
    parameters:
    - id: itemType
      type: System.String
      description: "追加する項目の項目の種類。"
    - id: unevaluatedInclude
      type: System.String
      description: "追加する項目の属性が含まれます。"
    - id: metadata
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: "追加する項目のメタデータ。"
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "追加された項目を返します。"
  overload: Microsoft.Build.Evaluation.Project.AddItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String)
  id: AddItemFast(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItemFast(String,String)
  nameWithType: Project.AddItemFast(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "メタデータの項目をプロジェクトに追加しません。  項目グループの最初の項目である場合を除き、かどうか既存のワイルドカードが一致する、新しい項目を表示するには、残存作業時間は行いません。  類似した項目の近くの新しい項目を検索するための努力を行いません。"
  remarks: "最初の子は、同じ種類の項目または条件を持たないを子がないかを持つ最初の項目グループに、項目を追加します。       ベスト エフォートの原則に評価します。-すべての項目が展開されます。 実際の評価でことができない場合でも、新しい項目の下の XML で定義されている項目を使用することがあります。       このアイテムのみが評価されます。 依存しているその他の項目には影響しません。       これは、利便性のため理解されているが必ずしものままにして完全に首尾一貫した状態で、プロジェクト再評価されるまでです。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItemFast (string itemType, string unevaluatedInclude);
    parameters:
    - id: itemType
      type: System.String
      description: "追加する項目の種類。"
    - id: unevaluatedInclude
      type: System.String
      description: "項目に追加する未評価の Include 属性です。"
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "追加されたプロジェクト項目の一覧を返します。"
  overload: Microsoft.Build.Evaluation.Project.AddItemFast*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトにメタデータを持つ項目を追加します。 メタデータが null であるメタデータがないことを示します。 項目グループの最初の項目である場合を除き、かどうか既存のワイルドカードが一致する、新しい項目を表示するには、残存作業時間は行いません。 類似した項目の近くの新しい項目を検索するための努力を行いません。"
  remarks: "最初の子は、同じ種類の項目または条件を持たないを子がないかを持つ最初の項目グループに、項目を追加します。       ベスト エフォートの原則に評価します。-すべての項目が展開されます。 実際の評価でことができない場合でも、新しい項目の下の XML で定義されている項目を使用することがあります。       このアイテムのみが評価されます。 依存しているその他の項目は影響はありません。       これは、利便性のため理解されているが必ずしものままにして完全に首尾一貫した状態で、プロジェクト再評価されるまでです。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItemFast (string itemType, string unevaluatedInclude, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,string>> metadata);
    parameters:
    - id: itemType
      type: System.String
      description: "追加する項目の種類。"
    - id: unevaluatedInclude
      type: System.String
      description: "項目に追加する未評価の Include 属性です。"
    - id: metadata
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: "追加するメタデータ。"
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "追加されたプロジェクト項目の一覧を返します。"
  overload: Microsoft.Build.Evaluation.Project.AddItemFast*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  id: AllEvaluatedItemDefinitionMetadata
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AllEvaluatedItemDefinitionMetadata
  nameWithType: Project.AllEvaluatedItemDefinitionMetadata
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "評価中に発生したすべてのアイテム定義のメタデータを取得します。"
  remarks: "項目メタデータは、2 つ目の評価パス中に読み取られます。 異なり ItemDefinitions プロパティによって返されるメタデータは、このメタデータが順序付けに、項目の種類と同じ名前で後でオーバーライドされたメタデータが含まれています。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectMetadata> AllEvaluatedItemDefinitionMetadata { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectMetadata}
      description: "評価中に発生したすべてのアイテム定義のメタデータを返します。 これは、すべての要素の条件が true に評価されなかったも最後の評価されてから追加された任意のアイテム定義メタデータには含まれません。"
  overload: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  id: AllEvaluatedItems
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AllEvaluatedItems
  nameWithType: Project.AllEvaluatedItems
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "評価中に検出されたすべての項目に対する列挙子を取得します。 これらは、3 つ目の評価パス中に読み取られます。"
  remarks: "項目プロパティによって返されるそれらのアイテムとは異なり、同じ項目の種類の項目に対してだけでなく順序付けの評価中に発生した他のすべてのアイテムに関してこれら並べ替えられています。       一部のアプリケーションでこの完全な相互順序付けは重大であるとこのようなホストは、このプロパティを使用できます。       列挙体では、条件が true に評価されなかったすべての要素は含まれません。 また最後の評価以降に追加された項目は含まできません。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> AllEvaluatedItems { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "評価中に検出されたすべての項目に対する列挙子を返します。 これらは、3 つ目の評価パス中に読み取られます。"
  overload: Microsoft.Build.Evaluation.Project.AllEvaluatedItems*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  id: AllEvaluatedProperties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AllEvaluatedProperties
  nameWithType: Project.AllEvaluatedProperties
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "評価中に検出されたすべてのプロパティを取得します。"
  remarks: "これらのプロパティは、最初の評価パス中に読み取られます。 Properties プロパティによって返されるプロパティ、これらは順序付けし、異なり、同じ名前で後でオーバーライドされたプロパティを含みます。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectProperty> AllEvaluatedProperties { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectProperty}
      description: "評価中に発生したすべてのプロパティを返します。 これは、任意のプロパティを持つ条件が true に評価されなかったも最後の評価されてから追加された任意のプロパティには含まれません。"
  overload: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build
  id: Build
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build()
  nameWithType: Project.Build()
  fullName: Microsoft.Build.Evaluation.Project.Build()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "既定のターゲットを使用して、このプロジェクトをビルドします。"
  remarks: "設定またはビルドのための仮想アイテムを取得、プロジェクトのインスタンスを明示的に複製およびを構築します。 このメソッドは、プロジェクトのオブジェクトを変更しません。"
  syntax:
    content: public bool Build ();
    parameters: []
    return:
      type: System.Boolean
      description: "成功した場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(Microsoft.Build.Framework.ILogger)
  id: Build(Microsoft.Build.Framework.ILogger)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(ILogger)
  nameWithType: Project.Build(ILogger)
  fullName: Microsoft.Build.Evaluation.Project.Build(ILogger)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "既定のターゲットと指定したロガーを使用して、このプロジェクトをビルドします。"
  remarks: "設定またはビルドのための仮想アイテムを取得、プロジェクトのインスタンスを明示的に複製およびを構築します。 このメソッドは、プロジェクトのオブジェクトを変更しません。"
  syntax:
    content: public bool Build (Microsoft.Build.Framework.ILogger logger);
    parameters:
    - id: logger
      type: Microsoft.Build.Framework.ILogger
      description: "ビルド時に使用するロガー。"
    return:
      type: System.Boolean
      description: "成功した場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(IEnumerable<ILogger>)
  nameWithType: Project.Build(IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "既定のターゲットと指定したロガーを使用して、このプロジェクトをビルドします。"
  remarks: "設定またはビルドのための仮想アイテムを取得、プロジェクトのインスタンスを明示的に複製およびを構築します。 このメソッドは、プロジェクトのオブジェクトを変更しません。"
  syntax:
    content: public bool Build (System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "ビルド中に使用されるすべてのロガーに対する列挙子。"
    return:
      type: System.Boolean
      description: "成功した場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String)
  id: Build(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String)
  nameWithType: Project.Build(String)
  fullName: Microsoft.Build.Evaluation.Project.Build(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定したターゲットを使用して、このプロジェクトをビルドします。"
  remarks: "設定またはビルドのための仮想アイテムを取得、プロジェクトのインスタンスを明示的に複製およびを構築します。 このメソッドは、プロジェクトのオブジェクトを変更しません。"
  syntax:
    content: public bool Build (string target);
    parameters:
    - id: target
      type: System.String
      description: "ビルドするターゲット。"
    return:
      type: System.Boolean
      description: "成功した場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[])
  id: Build(System.String[])
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String[])
  nameWithType: Project.Build(String[])
  fullName: Microsoft.Build.Evaluation.Project.Build(String[])
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定したターゲットを使用して、このプロジェクトをビルドします。"
  remarks: "設定またはビルドのための仮想アイテムを取得、プロジェクトのインスタンスを明示的に複製およびを構築します。 このメソッドは、プロジェクトのオブジェクトを変更しません。"
  syntax:
    content: public bool Build (string[] targets);
    parameters:
    - id: targets
      type: System.String[]
      description: "ビルドされるターゲットの配列。"
    return:
      type: System.Boolean
      description: "成功した場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "既定のターゲットと指定したロガーとリモート ロガーを使用して、このプロジェクトをビルドします。"
  remarks: "設定またはビルドのための仮想アイテムを取得、プロジェクトのインスタンスを明示的に複製およびを構築します。 このメソッドは、プロジェクトのオブジェクトを変更しません。"
  syntax:
    content: public bool Build (System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "ビルド時に使用するロガー。"
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "ビルド中に使用されるリモート ロガー。"
    return:
      type: System.Boolean
      description: "成功した場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String,IEnumerable<ILogger>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定されたターゲットの構築と、指定したロガーを使用して、このプロジェクトをビルドします。"
  remarks: "設定またはビルドのための仮想アイテムを取得、プロジェクトのインスタンスを明示的に複製およびを構築します。 このメソッドは、プロジェクトのオブジェクトを変更しません。"
  syntax:
    content: public bool Build (string target, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: target
      type: System.String
      description: "ビルドするターゲット。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "ビルド時に使用するロガー。"
    return:
      type: System.Boolean
      description: "成功した場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String[],IEnumerable<ILogger>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "ビルド ターゲットを指定し、指定したロガーを使用して、このプロジェクトをビルドします。"
  remarks: "設定またはビルドのための仮想アイテムを取得、プロジェクトのインスタンスを明示的に複製およびを構築します。 このメソッドは、プロジェクトのオブジェクトを変更しません。"
  syntax:
    content: public bool Build (string[] targets, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: targets
      type: System.String[]
      description: "ビルドするターゲット。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "ビルド時に使用するロガー。"
    return:
      type: System.Boolean
      description: "成功した場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定したターゲットと指定したロガーとリモート ロガーを使用して、このプロジェクトをビルドします。"
  remarks: "設定またはビルドのための仮想アイテムを取得、プロジェクトのインスタンスを明示的に複製およびを構築します。 このメソッドは、プロジェクトのオブジェクトを変更しません。"
  syntax:
    content: public bool Build (string target, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: target
      type: System.String
      description: "ビルドするターゲット。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "ビルド時に使用するロガー。"
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "ビルド中に使用されるリモート ロガー。"
    return:
      type: System.Boolean
      description: "成功した場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定したターゲットをビルドして、指定したロガーとリモート ロガーを使用して、このプロジェクトをビルドします。"
  remarks: "設定またはビルドのための仮想アイテムを取得、プロジェクトのインスタンスを明示的に複製およびを構築します。 このメソッドは、プロジェクトのオブジェクトを変更しません。"
  syntax:
    content: public bool Build (string[] targets, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: targets
      type: System.String[]
      description: "ビルドするターゲット。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "ビルド時に使用するロガー。"
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "ビルド中に使用されるリモート ロガー。"
    return:
      type: System.Boolean
      description: "成功した場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ConditionedProperties
  id: ConditionedProperties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ConditionedProperties
  nameWithType: Project.ConditionedProperties
  fullName: Microsoft.Build.Evaluation.Project.ConditionedProperties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロパティ、プロパティ グループ、インポート、検出された条件を評価するためのプロパティの有効なプロパティ値のコレクションを取得し、場合のです。"
  remarks: 'For example, if the following conditions existed on properties in a project: Condition="''$(Configuration)&#124;$(Platform)'' == ''Debug&#124;x86''" Condition="''$(Configuration)'' == ''Release''" the table would be populated with { "Configuration", { "Debug", "Release" }} { "Platform", { "x86" }} This collection is used by Visual Studio to determine the configurations defined in the project'
  syntax:
    content: public System.Collections.Generic.IDictionary<string,System.Collections.Generic.List<string>> ConditionedProperties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}}
      description: "プロパティ、プロパティ グループ、インポート、検出された条件を評価するためのプロパティの有効なプロパティ値のコレクションを返しますとタイミングのです。 コレクションは、正規の形式です。 エントリの名前は、評価するプロパティの名前と値が有効なプロパティ値の一覧を示します。"
  overload: Microsoft.Build.Evaluation.Project.ConditionedProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance
  id: CreateProjectInstance
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: CreateProjectInstance()
  nameWithType: Project.CreateProjectInstance()
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトに基づいていますが、そこから完全に切断されているプロジェクトのインスタンスを作成します。"
  remarks: "個別にビルドするために使用します。 必要に応じて、元のプロジェクトとしてマークされているように変更されていない場合、元のプロジェクトは、インスタンスを作成する前に評価されます。"
  syntax:
    content: public Microsoft.Build.Execution.ProjectInstance CreateProjectInstance ();
    parameters: []
    return:
      type: Microsoft.Build.Execution.ProjectInstance
      description: "プロジェクト インスタンスを返します。"
  overload: Microsoft.Build.Evaluation.Project.CreateProjectInstance*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  id: CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: CreateProjectInstance(ProjectInstanceSettings)
  nameWithType: Project.CreateProjectInstance(ProjectInstanceSettings)
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance(ProjectInstanceSettings)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトに基づいていますが、そこから完全に切断されているプロジェクトのインスタンスを作成します。"
  remarks: "個別にビルドするために使用します。 必要に応じて、元のプロジェクトとしてマークされているように変更されていない場合、元のプロジェクトは、インスタンスを作成する前に評価されます。"
  syntax:
    content: public Microsoft.Build.Execution.ProjectInstance CreateProjectInstance (Microsoft.Build.Execution.ProjectInstanceSettings settings);
    parameters:
    - id: settings
      type: Microsoft.Build.Execution.ProjectInstanceSettings
      description: "作成されたプロジェクト インスタンスが変更可能かどうかと、パフォーマンスを向上させるためにテーブルを検索してが含まれているかどうかを判断します。"
    return:
      type: Microsoft.Build.Execution.ProjectInstance
      description: "プロジェクト インスタンスを返します。"
  overload: Microsoft.Build.Evaluation.Project.CreateProjectInstance*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.DirectoryPath
  id: DirectoryPath
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: DirectoryPath
  nameWithType: Project.DirectoryPath
  fullName: Microsoft.Build.Evaluation.Project.DirectoryPath
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトのルート ディレクトリを取得します。"
  syntax:
    content: public string DirectoryPath { get; }
    return:
      type: System.String
      description: "このプロジェクトのルート ディレクトリを返します。 ルート ディレクトリは null 以外ではありません。メモリ内のプロジェクトでは、プロジェクトの読み込み時に、現在のディレクトリを使用します。"
  overload: Microsoft.Build.Evaluation.Project.DirectoryPath*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.DisableMarkDirty
  id: DisableMarkDirty
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: DisableMarkDirty
  nameWithType: Project.DisableMarkDirty
  fullName: Microsoft.Build.Evaluation.Project.DisableMarkDirty
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "フラグの設定を取得またはを決定するかどうか<xref:Microsoft.Build.Evaluation.Project.MarkDirty*>は一時的に無効になります</xref:Microsoft.Build.Evaluation.Project.MarkDirty*>。 これにより、たとえば、グローバル プロパティを設定して、結果として再評価マーク プロジェクトもできます。"
  syntax:
    content: public bool DisableMarkDirty { get; set; }
    return:
      type: System.Boolean
      description: "フラグを返しますを決定するかどうか<xref uid=&quot;langword_csharp_MarkDirty&quot; name=&quot;MarkDirty&quot; href=&quot;&quot;></xref>一時的に無効にします。"
  overload: Microsoft.Build.Evaluation.Project.DisableMarkDirty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.EvaluationCounter
  id: EvaluationCounter
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: EvaluationCounter
  nameWithType: Project.EvaluationCounter
  fullName: Microsoft.Build.Evaluation.Project.EvaluationCounter
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトが再評価されるたびにインクリメントされる値を取得します。"
  remarks: "この値は、プロジェクトが再度評価されたかどうかに表示する前の値と比較する必要があります。 1 つ以上の特定の再評価の増加する可能性がありますので、プロジェクトが再評価された回数を決定するは使用できません。"
  syntax:
    content: public int EvaluationCounter { get; }
    return:
      type: System.Int32
      description: "インクリメントされた値を返します。"
  overload: Microsoft.Build.Evaluation.Project.EvaluationCounter*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ExpandString(System.String)
  id: ExpandString(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ExpandString(String)
  nameWithType: Project.ExpandString(String)
  fullName: Microsoft.Build.Evaluation.Project.ExpandString(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "アイテムとプロパティを展開して、指定した文字列を評価します。 文字列は、プロジェクト ファイルの最後に検出されたかのように評価します。"
  remarks: "このメソッドは、ベスト エフォートの評価であるための十分なときに使用できます。"
  syntax:
    content: public string ExpandString (string unexpandedValue);
    parameters:
    - id: unexpandedValue
      type: System.String
      description: "評価する文字列。"
    return:
      type: System.String
      description: "評価済みの文字列を返します。"
  overload: Microsoft.Build.Evaluation.Project.ExpandString*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.FullPath
  id: FullPath
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: FullPath
  nameWithType: Project.FullPath
  fullName: Microsoft.Build.Evaluation.Project.FullPath
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "取得またはプロジェクトのソース ファイルへの完全パスを設定します。"
  remarks: "プロジェクト コレクション内のプロジェクトでこのプロパティの設定、プロジェクトの名前を変更します。"
  syntax:
    content: public string FullPath { get; set; }
    return:
      type: System.String
      description: "プロジェクトのソース ファイルへの完全なパスを返します。 プロジェクトがディスクから読み込まれていない場合は、空の文字列を返します。"
  overload: Microsoft.Build.Evaluation.Project.FullPath*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  id: GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetEvaluatedItemIncludeEscaped(ProjectItem)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定した項目の Include 属性の値をエスケープ、評価を取得します。"
  syntax:
    content: public static string GetEvaluatedItemIncludeEscaped (Microsoft.Build.Evaluation.ProjectItem item);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItem
      description: "評価してエスケープする項目。"
    return:
      type: System.String
      description: "返しますの評価には、提供されているアイテムの Include 属性の値がエスケープされます。"
  overload: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  id: GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定した項目の定義の Include 属性の評価、エスケープされた値を取得します。"
  syntax:
    content: public static string GetEvaluatedItemIncludeEscaped (Microsoft.Build.Evaluation.ProjectItemDefinition item);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItemDefinition
      description: "評価してエスケープするアイテム定義です。"
    return:
      type: System.String
      description: "Include 属性の値を返します。"
  overload: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetItems(System.String)
  id: GetItems(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetItems(String)
  nameWithType: Project.GetItems(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItems(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定した項目の種類のプロジェクト内のすべての項目を取得します。 資格情報がない場合は、空のリストを返します。 このプロジェクトで項目を変更するのにには、AddItem または RemoveItem を使用します。"
  remarks: "このプロジェクトで項目を変更するのにには、AddItem または RemoveItem を使用します。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> GetItems (string itemType);
    parameters:
    - id: itemType
      type: System.String
      description: "取得する項目の種類。"
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "指定した項目の種類のプロジェクト内のすべての項目を返します。 指定した項目の名前を持つ項目がない場合は、空のリストを返します。"
  overload: Microsoft.Build.Evaluation.Project.GetItems*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(System.String)
  id: GetItemsByEvaluatedInclude(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetItemsByEvaluatedInclude(String)
  nameWithType: Project.GetItemsByEvaluatedInclude(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "特定の評価の Include 属性を持つすべての項目を取得します。"
  remarks: "たとえば、このメソッドは、評価された Include 属性&quot;component.cpp&quot;を持つすべての項目を返す可能性があります。 通常、0 個または&1; つの項目が返されます。 ただし、複数の項目を同じパスと異なる項目の種類、または項目の種類が同じでもあります。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> GetItemsByEvaluatedInclude (string evaluatedInclude);
    parameters:
    - id: evaluatedInclude
      type: System.String
      description: "評価の Include 属性です。"
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "特定の評価の Include 属性を持つすべての項目を返します。"
  overload: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(System.String)
  id: GetItemsIgnoringCondition(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetItemsIgnoringCondition(String)
  nameWithType: Project.GetItemsIgnoringCondition(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: '項目の評価が true かどうかは、プロジェクト内の指定された型のすべての項目を取得します。 これは、読み取り専用のリスト: AddItem または RemoveItem を使用してこのプロジェクトの項目を変更します。'
  remarks: "これは、読み取り専用のリストです。 このプロジェクトで項目を変更するのにには、AddItem または RemoveItem を使用します。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> GetItemsIgnoringCondition (string itemType);
    parameters:
    - id: itemType
      type: System.String
      description: "取得する項目の種類。"
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "項目の評価が true かどうかは、プロジェクト内の指定された型のすべての項目を返します。"
  overload: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetLogicalProject
  id: GetLogicalProject
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetLogicalProject()
  nameWithType: Project.GetLogicalProject()
  fullName: Microsoft.Build.Evaluation.Project.GetLogicalProject()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "&quot;論理&quot;プロジェクト内のすべての要素に対する列挙子を取得します。 論理のプロジェクトがの結果である&1; つの MSBuild ファイルから取得した未評価プロジェクトとして定義はインライン展開元 MSBuild プロジェクトのマニフェスト ファイルのインポートはすべてのテキスト。"
  remarks: "論理のプロジェクトは、元の MSBuild プロジェクトのマニフェスト ファイルのインポートはすべてのテキストのようなインラインの結果である&1; つの MSBuild ファイルから取得した未評価のプロジェクトに定義されます。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<Microsoft.Build.Construction.ProjectElement> GetLogicalProject ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Construction.ProjectElement}
      description: "&quot;論理&quot;プロジェクト内のすべての要素に対する列挙子を返します。"
  overload: Microsoft.Build.Evaluation.Project.GetLogicalProject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  id: GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectMetadata)
  nameWithType: Project.GetMetadataValueEscaped(ProjectMetadata)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectMetadata)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定したメタデータのエスケープ値を取得します。"
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Evaluation.ProjectMetadata metadatum);
    parameters:
    - id: metadatum
      type: Microsoft.Build.Evaluation.ProjectMetadata
      description: "エスケープするメタデータ。"
    return:
      type: System.String
      description: "指定したメタデータのエスケープ値を取得します。"
  overload: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  id: GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectItem,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItem,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItem,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定した項目には、指定された名前のメタデータのエスケープ値を取得します。"
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Evaluation.ProjectItem item, string name);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItem
      description: "エスケープするのには、メタデータを持つ項目。"
    - id: name
      type: System.String
      description: "エスケープするメタデータの名前。"
    return:
      type: System.String
      description: "指定した項目には、指定された名前のメタデータのエスケープ値を取得します。"
  overload: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  id: GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectItemDefinition,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定した項目の定義で指定された名前のメタデータのエスケープ値を取得します。"
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Evaluation.ProjectItemDefinition item, string name);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItemDefinition
      description: "エスケープするのには、メタデータを持つアイテム定義です。"
    - id: name
      type: System.String
      description: "エスケープするメタデータの名前。"
    return:
      type: System.String
      description: "指定した項目の定義で指定された名前のメタデータのエスケープ値を返します。"
  overload: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetProperty(System.String)
  id: GetProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetProperty(String)
  nameWithType: Project.GetProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.GetProperty(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定した名前をプロジェクト内の任意のプロパティを取得します。"
  syntax:
    content: public Microsoft.Build.Evaluation.ProjectProperty GetProperty (string name);
    parameters:
    - id: name
      type: System.String
      description: "取得するプロパティの名前。"
    return:
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "指定の名前を持つプロジェクト内の任意のプロパティを返します。 その名前のプロパティがない場合、null を返しますが存在します。"
  overload: Microsoft.Build.Evaluation.Project.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValue(System.String)
  id: GetPropertyValue(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetPropertyValue(String)
  nameWithType: Project.GetPropertyValue(String)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValue(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトで指定されたプロパティの値を取得します。"
  remarks: "空の文字列値を持つプロパティとプロパティはありませんすべてのでは区別されない間でこのメソッドです。 プロジェクトで、すべてのかどうか、プロパティを設定するには、GetProperty(name) を使用します。"
  syntax:
    content: public string GetPropertyValue (string name);
    parameters:
    - id: name
      type: System.String
      description: "値を取得するプロパティの名前。"
    return:
      type: System.String
      description: "このプロジェクトで指定されたプロパティの値を返します。 その名前のプロパティが存在しない場合は、空の文字列を返します。 エスケープ シーケンスは、文字列を返す前に変換されます。"
  overload: Microsoft.Build.Evaluation.Project.GetPropertyValue*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  id: GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetPropertyValueEscaped(ProjectProperty)
  nameWithType: Project.GetPropertyValueEscaped(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(ProjectProperty)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "指定されたプロパティのエスケープ値を取得します。"
  syntax:
    content: public static string GetPropertyValueEscaped (Microsoft.Build.Evaluation.ProjectProperty property);
    parameters:
    - id: property
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "エスケープするプロパティです。"
    return:
      type: System.String
      description: "指定されたプロパティのエスケープ値を返します。"
  overload: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GlobalProperties
  id: GlobalProperties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GlobalProperties
  nameWithType: Project.GlobalProperties
  fullName: Microsoft.Build.Evaluation.Project.GlobalProperties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトの評価に使用されるグローバル プロパティのディクショナリを取得します。"
  remarks: "This is the publicly exposed getter, that translates into a read-only dead IDictionary\\<string, string>.  \n  \n In order to easily tell when we're dirtied, setting and removing global properties is done with <xref:Microsoft.Build.Evaluation.Project.SetGlobalProperty%2A> and <xref:Microsoft.Build.Evaluation.Project.RemoveGlobalProperty%2A>."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> GlobalProperties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "このプロジェクトの評価に使用されるグローバル プロパティの辞書を返します。"
  overload: Microsoft.Build.Evaluation.Project.GlobalProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Imports
  id: Imports
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Imports
  nameWithType: Project.Imports
  fullName: Microsoft.Build.Evaluation.Project.Imports
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトの評価に寄与するすべてのファイルの一覧を取得します。"
  remarks: "このプロジェクトのプロジェクトのルートは含まれません。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ResolvedImport> Imports { get; }
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ResolvedImport}
      description: "このプロジェクトの評価に貢献するすべてのファイルの一覧を返します。       各項目の名前は、インポートするファイルの原因となったインポート要素です。 各項目の値は、インポートされたプロジェクトのプロジェクト ルートです。 False に評価される条件属性を持つインポート要素は含まれません。"
  overload: Microsoft.Build.Evaluation.Project.Imports*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  id: ImportsIncludingDuplicates
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ImportsIncludingDuplicates
  nameWithType: Project.ImportsIncludingDuplicates
  fullName: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "インポートがインポートされた複数回場合は、重複するインポートの一覧を取得します。 ただし、最初のインポートだけが評価で使用されました。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ResolvedImport> ImportsIncludingDuplicates { get; }
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ResolvedImport}
      description: "重複するインポートの一覧を返します。"
  overload: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.IsBuildEnabled
  id: IsBuildEnabled
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: IsBuildEnabled
  nameWithType: Project.IsBuildEnabled
  fullName: Microsoft.Build.Evaluation.Project.IsBuildEnabled
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "取得またはターゲットとこのプロジェクトのタスクを作成できるかどうかを選択するプロパティを設定します。"
  remarks: "セキュリティのために使用できます。 新しいプロジェクトの既定値はそれを含む親プロジェクト コレクションと同じ IsBuildEnabled 設定です。 IsBuildEnabled が false の場合は、このプロジェクトでビルド メソッドが失敗します。"
  syntax:
    content: public bool IsBuildEnabled { get; set; }
    return:
      type: System.Boolean
      description: "ターゲットとタスクのこのプロジェクトをビルドできます; 場合は true を返しますfalse それ以外の場合。"
  overload: Microsoft.Build.Evaluation.Project.IsBuildEnabled*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.IsDirty
  id: IsDirty
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: IsDirty
  nameWithType: Project.IsDirty
  fullName: Microsoft.Build.Evaluation.Project.IsDirty
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトが変更されているため、再評価する必要があるかどうかを示すプロパティを取得します。"
  remarks: "プロジェクトが変更され、変更を含む、基になるプロジェクト ソース コード ファイルをインポートする場合に再評価する必要があります。 プロジェクトが変更も、プロジェクトのツール セットが変更された場合に再評価する必要があります。"
  syntax:
    content: public bool IsDirty { get; }
    return:
      type: System.Boolean
      description: "このプロジェクトが変更されているため、再評価する必要があるかどうかを示すプロパティを返します。"
  overload: Microsoft.Build.Evaluation.Project.IsDirty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ItemDefinitions
  id: ItemDefinitions
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ItemDefinitions
  nameWithType: Project.ItemDefinitions
  fullName: Microsoft.Build.Evaluation.Project.ItemDefinitions
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトで、項目の種類によってキー指定された項目の定義のディクショナリを取得します。"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,Microsoft.Build.Evaluation.ProjectItemDefinition> ItemDefinitions { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItemDefinition}
      description: "このプロジェクトで、項目の種類によってキー指定された項目の定義のディクショナリを返します。"
  overload: Microsoft.Build.Evaluation.Project.ItemDefinitions*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Items
  id: Items
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Items
  nameWithType: Project.Items
  fullName: Microsoft.Build.Evaluation.Project.Items
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトで、項目の種類のグループ内に順序付けのすべての項目に対する列挙子を取得します。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> Items { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "項目の種類のグループ内に順序付け、このプロジェクトのすべてのアイテムに対する列挙子を返します。"
  overload: Microsoft.Build.Evaluation.Project.Items*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  id: ItemsIgnoringCondition
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ItemsIgnoringCondition
  nameWithType: Project.ItemsIgnoringCondition
  fullName: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトで、項目の種類のグループ内に順序付けのすべての項目に対する列挙子を取得します。"
  remarks: "現在の構成でビルドの一部でない場合でも、すべての項目を表示する使用できます。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> ItemsIgnoringCondition { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "このプロジェクトに、条件が false に評価されるまたは条件が false と評価された項目のグループ内に含まれる項目を含む項目の種類のグループ内に順序付けのすべての項目に対する列挙子を返します。"
  overload: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ItemTypes
  id: ItemTypes
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ItemTypes
  nameWithType: Project.ItemTypes
  fullName: Microsoft.Build.Evaluation.Project.ItemTypes
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトで、すべての項目の種類に対する列挙子を取得します。"
  syntax:
    content: public System.Collections.Generic.ICollection<string> ItemTypes { get; }
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "このプロジェクトのすべての項目の種類に対する列挙子を返します。 これは、順序付けられたコレクションです。"
  overload: Microsoft.Build.Evaluation.Project.ItemTypes*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.MarkDirty
  id: MarkDirty
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: MarkDirty()
  nameWithType: Project.MarkDirty()
  fullName: Microsoft.Build.Evaluation.Project.MarkDirty()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトを変更済みとしてマークします。"
  remarks: "変更として自動的にプロジェクトに影響するすべての編集マークするため、明示的に、このメソッドを呼び出す必要はほとんどありません。       場合によっては、ただし、このメソッド呼び出す必要があります。 たとえば、プロジェクトには、ディスク上に存在するファイルに条件が依存 Import 要素があります。 場合は、評価時にそのファイルが存在しないため、変更項目として、プロジェクトを明示的に設定する必要がありますし、評価した後で作成されます。       <xref:Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary%2A>メソッドはこのプロパティを使用して、評価版が必要かを判断します</xref:Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary%2A>。"
  syntax:
    content: public void MarkDirty ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.MarkDirty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ProjectCollection
  id: ProjectCollection
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ProjectCollection
  nameWithType: Project.ProjectCollection
  fullName: Microsoft.Build.Evaluation.Project.ProjectCollection
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトを含むプロジェクト コレクションを取得します。"
  syntax:
    content: public Microsoft.Build.Evaluation.ProjectCollection ProjectCollection { get; }
    return:
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "このプロジェクトを含むプロジェクト コレクションを返します。"
  overload: Microsoft.Build.Evaluation.Project.ProjectCollection*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ProjectFileLocation
  id: ProjectFileLocation
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ProjectFileLocation
  nameWithType: Project.ProjectFileLocation
  fullName: Microsoft.Build.Evaluation.Project.ProjectFileLocation
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "自体内ではなく特定のコンテンツ ファイルの元の場所。 ファイルに名前が指定されたいない場合は空の場所です。 これは、場所を持たないの正当なケースです。"
  syntax:
    content: public Microsoft.Build.Construction.ElementLocation ProjectFileLocation { get; }
    return:
      type: Microsoft.Build.Construction.ElementLocation
      description: "元のファイルの場所または空の場所を返します。"
  overload: Microsoft.Build.Evaluation.Project.ProjectFileLocation*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Properties
  id: Properties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Properties
  nameWithType: Project.Properties
  fullName: Microsoft.Build.Evaluation.Project.Properties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトで、すべてのプロパティに対する列挙子を取得します。 これは、順序付けられていないコレクションです。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectProperty> Properties { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectProperty}
      description: "このプロジェクトのすべてのプロパティに対する列挙子を返します。 プロパティは、表示されるとおりに評価されますが、これは順序付けられていないコレクションです。"
  overload: Microsoft.Build.Evaluation.Project.Properties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary
  id: ReevaluateIfNecessary
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ReevaluateIfNecessary()
  nameWithType: Project.ReevaluateIfNecessary()
  fullName: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "すべての変更を組み込むプロジェクトを再評価します。"
  remarks: "プロジェクトが変更済みとしてマークされている場合にのみ再評価されます。 再評価には、プロジェクトのソース コードに加えられたすべての変更が組み込まれています。       評価に失敗した場合は、InvalidProjectFileException をスローします。"
  syntax:
    content: public void ReevaluateIfNecessary ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(System.String)
  id: RemoveGlobalProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveGlobalProperty(String)
  nameWithType: Project.RemoveGlobalProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "グローバル プロパティを削除し、プロジェクトを変更済みとしてマークします。"
  syntax:
    content: public bool RemoveGlobalProperty (string name);
    parameters:
    - id: name
      type: System.String
      description: "削除するグローバル プロパティの名前。"
    return:
      type: System.Boolean
      description: "グローバル プロパティの値が設定された場合は true を返します。"
  overload: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  id: RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveItem(ProjectItem)
  nameWithType: Project.RemoveItem(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItem(ProjectItem)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトから項目を削除します。 削除する項目は、プロジェクト内に存在する必要があり、インポートされたファイルから取得する必要がありますされませんです。"
  remarks: "項目を含む項目グループが空になった場合にも削除されます。       ワイルドカードまたはセミコロンで区切られた式から項目を生成する場合、式は最初に複数のアイテムに展開されます。       プロジェクトを更新するが再評価されるまでそれ以上の評価は行われません。 たとえば場合の項目&quot;i&quot;の種類は削除は、&quot;j&quot;から評価される&quot;@(i)&quot;再評価されるまでは変更されません。"
  syntax:
    content: public bool RemoveItem (Microsoft.Build.Evaluation.ProjectItem item);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItem
      description: "削除する項目。"
    return:
      type: System.Boolean
      description: "項目が評価されたこのプロジェクト内に存在する場合、true を返しますそれ以外の場合は false。 通常このメソッドは、メソッドが例外をスローする場合は、要求された項目が存在しないので true の場合、返します。 項目が ItemsIgnoringCondition コレクションにのみ存在する場合、ただし、false が返されます。"
  overload: Microsoft.Build.Evaluation.Project.RemoveItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  id: RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveItems(IEnumerable<ProjectItem>)
  nameWithType: Project.RemoveItems(IEnumerable<ProjectItem>)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItems(IEnumerable<ProjectItem>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "インポートされたプロジェクトから発生する場合を除き、プロジェクトから、指定されたすべての項目を削除します。"
  remarks: "インポートされたプロジェクトから項目を生成する場合は単にスキップします。"
  syntax:
    content: public void RemoveItems (System.Collections.Generic.IEnumerable<Microsoft.Build.Evaluation.ProjectItem> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem}
      description: "削除する項目。"
  overload: Microsoft.Build.Evaluation.Project.RemoveItems*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  id: RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveProperty(ProjectProperty)
  nameWithType: Project.RemoveProperty(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.RemoveProperty(ProjectProperty)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトから、プロパティを削除します。 削除するプロパティは、プロジェクト内に存在する必要があり、インポートされたファイルから取得する必要がありますされません。"
  remarks: "プロパティを含むプロパティ グループが空になった場合にも削除されます。       プロジェクトを更新するが再評価されるまでそれ以上の評価は行われません。 たとえば、&quot;p&quot;が削除された場合は評価は「$(p)」から&quot;q&quot;は再評価されるまで変更されません。"
  syntax:
    content: public bool RemoveProperty (Microsoft.Build.Evaluation.ProjectProperty property);
    parameters:
    - id: property
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "削除するプロパティです。"
    return:
      type: System.Boolean
      description: "プロパティが評価されたこのプロジェクトで存在する場合、true を返しますそれ以外の場合は false。"
  overload: Microsoft.Build.Evaluation.Project.RemoveProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save
  id: Save
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save()
  nameWithType: Project.Save()
  fullName: Microsoft.Build.Evaluation.Project.Save()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "変更された場合、既定の文字エンコーディングを使用して、ファイル システムにプロジェクトを保存します。"
  syntax:
    content: public void Save ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(TextWriter)
  nameWithType: Project.Save(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.Save(TextWriter)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトが変更されたかどうか、指定されたテキスト ライターに、プロジェクトを保存します。 テキスト ライターの文字エンコーディングを使用し、変更されていないとプロジェクトをマークします。"
  syntax:
    content: public void Save (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "プロジェクトを保存するテキスト ライター。"
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.String)
  id: Save(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(String)
  nameWithType: Project.Save(String)
  fullName: Microsoft.Build.Evaluation.Project.Save(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "変更またはプロジェクトのソース コードへのパスが変更された場合は、既定の文字エンコーディングを使用している場合は、ファイル システムにプロジェクトを保存します。"
  syntax:
    content: public void Save (string path);
    parameters:
    - id: path
      type: System.String
      description: "プロジェクトのソース コードへのパス。"
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.Text.Encoding)
  id: Save(System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(Encoding)
  nameWithType: Project.Save(Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(Encoding)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "変更された場合、指定された文字エンコーディングを使用して、ファイル システムにプロジェクトを保存します。"
  syntax:
    content: public void Save (System.Text.Encoding encoding);
    parameters:
    - id: encoding
      type: System.Text.Encoding
      description: "プロジェクトを保存に使用する文字エンコーディングします。"
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.String,System.Text.Encoding)
  id: Save(System.String,System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(String,Encoding)
  nameWithType: Project.Save(String,Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(String,Encoding)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "変更またはプロジェクトのソース コードへのパスが変更された場合は、指定した文字エンコーディングを使用している場合は、ファイル システムにプロジェクトを保存します。"
  syntax:
    content: public void Save (string path, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "プロジェクトのソース コードへのパス。"
    - id: encoding
      type: System.Text.Encoding
      description: "プロジェクトを保存に使用する文字エンコーディングします。"
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SaveLogicalProject(System.IO.TextWriter)
  id: SaveLogicalProject(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SaveLogicalProject(TextWriter)
  nameWithType: Project.SaveLogicalProject(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.SaveLogicalProject(TextWriter)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "1 つのファイルを形成する場合と同様に、インポートされたすべてのファイルを含む、「論理」または「前処理済み」のプロジェクト ファイルを保存します。"
  syntax:
    content: public void SaveLogicalProject (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "プロジェクト ファイルを保存するライター。"
  overload: Microsoft.Build.Evaluation.Project.SaveLogicalProject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SetGlobalProperty(System.String,System.String)
  id: SetGlobalProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SetGlobalProperty(String,String)
  nameWithType: Project.SetGlobalProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetGlobalProperty(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "プロジェクトが評価された後は、グローバル プロパティを設定します。 値が変更された場合、プロジェクトが要再評価としてマークはします。"
  syntax:
    content: public bool SetGlobalProperty (string name, string escapedValue);
    parameters:
    - id: name
      type: System.String
      description: "グローバル プロパティを設定の名前。"
    - id: escapedValue
      type: System.String
      description: "グローバル プロパティの新しい値。"
    return:
      type: System.Boolean
      description: "返します<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>値が変更された場合、それ以外の場合を返します<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.Build.Evaluation.Project.SetGlobalProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SetProperty(System.String,System.String)
  id: SetProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SetProperty(String,String)
  nameWithType: Project.SetProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetProperty(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "設定または指定された名前と値を持つプロパティをプロジェクトに追加します。 インポートされたファイルに基づいている場合は、同じ名前のプロパティの値を上書きします。"
  remarks: "指定した名前のプロパティが存在しない場合は、インポートされたファイル外の発生しない限り、指定した名前をそのリング自体またはそのプロパティ グループの条件を持たない最後の既存のプロパティを更新します。       それ以外の場合、最初のプロパティ グループ、条件がない最後既存プロパティ グループの後、プロジェクトの開始時にその他必要な場合は、プロパティ グループを作成する新しいプロパティを追加します。       評価は、ベスト エフォートの原則で行われます。 新しいプロパティに続いて、プロジェクトのソースで定義されているプロパティは、評価のために使用できます。 このプロパティのみが評価されます。 依存しているその他のプロパティは影響しません。"
  syntax:
    content: public Microsoft.Build.Evaluation.ProjectProperty SetProperty (string name, string unevaluatedValue);
    parameters:
    - id: name
      type: System.String
      description: "設定するプロパティの名前。"
    - id: unevaluatedValue
      type: System.String
      description: "プロパティの新しい未評価の値。"
    return:
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "プロパティを返します。"
  overload: Microsoft.Build.Evaluation.Project.SetProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SkipEvaluation
  id: SkipEvaluation
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SkipEvaluation
  nameWithType: Project.SkipEvaluation
  fullName: Microsoft.Build.Evaluation.Project.SkipEvaluation
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "取得または設定、フラグ、ReevaluateIfNecessary を一時的に無効にするかどうかを決定します。 これは、ホストが読み取りの数を行う必要がプロジェクトに書き込むときに、一時的にパフォーマンスの正確性を犠牲にする必要があり。"
  syntax:
    content: public bool SkipEvaluation { get; set; }
    return:
      type: System.Boolean
      description: "フラグを返します、ReevaluateIfNecessary を一時的に無効にするかどうかを決定します。"
  overload: Microsoft.Build.Evaluation.Project.SkipEvaluation*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SubToolsetVersion
  id: SubToolsetVersion
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SubToolsetVersion
  nameWithType: Project.SubToolsetVersion
  fullName: Microsoft.Build.Evaluation.Project.SubToolsetVersion
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "存在する場合は、SubToolsetVersion 属性の値を取得します。 この値は、このプロジェクトのツールセットのプロパティを決定する ToolsVersion 属性の値と結合されました。"
  syntax:
    content: public string SubToolsetVersion { get; }
    return:
      type: System.String
      description: "SubToolsetVersion 属性値を返します。 属性が存在しない場合は、空の文字列を返します。"
  overload: Microsoft.Build.Evaluation.Project.SubToolsetVersion*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Targets
  id: Targets
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Targets
  nameWithType: Project.Targets
  fullName: Microsoft.Build.Evaluation.Project.Targets
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "ターゲット名によってキー指定された、このプロジェクト内のすべてのターゲットのディクショナリを取得します。"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,Microsoft.Build.Execution.ProjectTargetInstance> Targets { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.ProjectTargetInstance}
      description: "このプロジェクトで、ターゲット名によってキー指定には、すべてのターゲットのディクショナリを返します。 オーバーライドされたターゲットは、このコレクションには含まれません。 このディクショナリは、読み取り専用です。"
  overload: Microsoft.Build.Evaluation.Project.Targets*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ToolsVersion
  id: ToolsVersion
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ToolsVersion
  nameWithType: Project.ToolsVersion
  fullName: Microsoft.Build.Evaluation.Project.ToolsVersion
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "存在する場合は、このプロジェクトの評価時に使用したツール バージョンを取得します。"
  remarks: "コンス トラクターによって設定されます。 これは必ずしもプロジェクト タグでは、ツールのバージョンと同じです。可能性がありますが外部から指定されて、たとえばコマンド ラインで/tv スイッチを使用しています。 プロジェクト タグの実際のツール バージョンを<xref:Microsoft.Build.Evaluation.Project.Xml%2A>。</xref:Microsoft.Build.Evaluation.Project.Xml%2A>から取得できます。 プロジェクトを作成した後、ツール バージョンを変更できません。"
  syntax:
    content: public string ToolsVersion { get; }
    return:
      type: System.String
      description: "存在する場合は、このプロジェクトの評価時に使用したツール バージョンを取得します。"
  overload: Microsoft.Build.Evaluation.Project.ToolsVersion*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Xml
  id: Xml
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Xml
  nameWithType: Project.Xml
  fullName: Microsoft.Build.Evaluation.Project.Xml
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "このプロジェクトに関連付けられているルート プロジェクトを取得します。 Null することはできません。"
  remarks: "このプロパティを設定する方法はありません。 新しいプロジェクトのルートがある場合は、新しいプロジェクトに評価します。"
  syntax:
    content: public Microsoft.Build.Construction.ProjectRootElement Xml { get; }
    return:
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "このプロジェクトに関連付けられているルート プロジェクトを返します。"
  overload: Microsoft.Build.Evaluation.Project.Xml*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.Build.Exceptions.InvalidProjectFileException
  parent: Microsoft.Build.Exceptions
  isExternal: false
  name: InvalidProjectFileException
  nameWithType: InvalidProjectFileException
  fullName: Microsoft.Build.Exceptions.InvalidProjectFileException
- uid: Microsoft.Build.Evaluation.Project.#ctor
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project()
  nameWithType: Project.Project()
  fullName: Microsoft.Build.Evaluation.Project.Project()
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement)
  nameWithType: Project.Project(ProjectRootElement)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement)
- uid: Microsoft.Build.Construction.ProjectRootElement
  parent: Microsoft.Build.Construction
  isExternal: false
  name: ProjectRootElement
  nameWithType: ProjectRootElement
  fullName: Microsoft.Build.Construction.ProjectRootElement
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectCollection)
  nameWithType: Project.Project(ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectCollection)
- uid: Microsoft.Build.Evaluation.ProjectCollection
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectCollection
  nameWithType: ProjectCollection
  fullName: Microsoft.Build.Evaluation.ProjectCollection
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String)
  nameWithType: Project.Project(String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader)
  nameWithType: Project.Project(XmlReader)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String)
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String)
  nameWithType: Project.Project(String,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String)
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.ProjectLoadSettings
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectLoadSettings
  nameWithType: ProjectLoadSettings
  fullName: Microsoft.Build.Evaluation.ProjectLoadSettings
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItem(String,String)
  nameWithType: Project.AddItem(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String)
- uid: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ProjectItem>
  nameWithType: IList<ProjectItem>
  fullName: System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<Microsoft.Build.Evaluation.ProjectItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectItem
    name: ProjectItem
    nameWithType: ProjectItem
    fullName: ProjectItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,String>>
  nameWithType: IEnumerable<KeyValuePair<String,String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItemFast(String,String)
  nameWithType: Project.AddItemFast(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String)
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItemDefinitionMetadata
  nameWithType: Project.AllEvaluatedItemDefinitionMetadata
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectMetadata}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectMetadata>
  nameWithType: ICollection<ProjectMetadata>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectMetadata>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Evaluation.ProjectMetadata>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectMetadata
    name: ProjectMetadata
    nameWithType: ProjectMetadata
    fullName: ProjectMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItems
  nameWithType: Project.AllEvaluatedItems
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectItem>
  nameWithType: ICollection<ProjectItem>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Evaluation.ProjectItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectItem
    name: ProjectItem
    nameWithType: ProjectItem
    fullName: ProjectItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedProperties
  nameWithType: Project.AllEvaluatedProperties
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectProperty}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectProperty>
  nameWithType: ICollection<ProjectProperty>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectProperty>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Evaluation.ProjectProperty>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectProperty
    name: ProjectProperty
    nameWithType: ProjectProperty
    fullName: ProjectProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Build
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build()
  nameWithType: Project.Build()
  fullName: Microsoft.Build.Evaluation.Project.Build()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Build.Evaluation.Project.Build(Microsoft.Build.Framework.ILogger)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(ILogger)
  nameWithType: Project.Build(ILogger)
  fullName: Microsoft.Build.Evaluation.Project.Build(ILogger)
- uid: Microsoft.Build.Framework.ILogger
  parent: Microsoft.Build.Framework
  isExternal: false
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Build.Framework.ILogger
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(IEnumerable<ILogger>)
  nameWithType: Project.Build(IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ILogger>
  nameWithType: IEnumerable<ILogger>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Framework.ILogger>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Framework.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Build(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String)
  nameWithType: Project.Build(String)
  fullName: Microsoft.Build.Evaluation.Project.Build(String)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[])
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String[])
  nameWithType: Project.Build(String[])
  fullName: Microsoft.Build.Evaluation.Project.Build(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ForwardingLoggerRecord>
  nameWithType: IEnumerable<ForwardingLoggerRecord>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Logging.ForwardingLoggerRecord
    name: ForwardingLoggerRecord
    nameWithType: ForwardingLoggerRecord
    fullName: ForwardingLoggerRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String,IEnumerable<ILogger>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String[],IEnumerable<ILogger>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: Microsoft.Build.Evaluation.Project.ConditionedProperties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ConditionedProperties
  nameWithType: Project.ConditionedProperties
  fullName: Microsoft.Build.Evaluation.Project.ConditionedProperties
- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,List<String>>
  nameWithType: IDictionary<String,List<String>>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Collections.Generic.List<System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Collections.Generic.List<System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: CreateProjectInstance()
  nameWithType: Project.CreateProjectInstance()
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance()
- uid: Microsoft.Build.Execution.ProjectInstance
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectInstance
  nameWithType: ProjectInstance
  fullName: Microsoft.Build.Execution.ProjectInstance
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: CreateProjectInstance(ProjectInstanceSettings)
  nameWithType: Project.CreateProjectInstance(ProjectInstanceSettings)
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance(ProjectInstanceSettings)
- uid: Microsoft.Build.Execution.ProjectInstanceSettings
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectInstanceSettings
  nameWithType: ProjectInstanceSettings
  fullName: Microsoft.Build.Execution.ProjectInstanceSettings
- uid: Microsoft.Build.Evaluation.Project.DirectoryPath
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DirectoryPath
  nameWithType: Project.DirectoryPath
  fullName: Microsoft.Build.Evaluation.Project.DirectoryPath
- uid: Microsoft.Build.Evaluation.Project.DisableMarkDirty
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DisableMarkDirty
  nameWithType: Project.DisableMarkDirty
  fullName: Microsoft.Build.Evaluation.Project.DisableMarkDirty
- uid: Microsoft.Build.Evaluation.Project.EvaluationCounter
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: EvaluationCounter
  nameWithType: Project.EvaluationCounter
  fullName: Microsoft.Build.Evaluation.Project.EvaluationCounter
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Build.Evaluation.Project.ExpandString(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ExpandString(String)
  nameWithType: Project.ExpandString(String)
  fullName: Microsoft.Build.Evaluation.Project.ExpandString(String)
- uid: Microsoft.Build.Evaluation.Project.FullPath
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: FullPath
  nameWithType: Project.FullPath
  fullName: Microsoft.Build.Evaluation.Project.FullPath
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped(ProjectItem)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
- uid: Microsoft.Build.Evaluation.ProjectItem
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectItem
  nameWithType: ProjectItem
  fullName: Microsoft.Build.Evaluation.ProjectItem
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
- uid: Microsoft.Build.Evaluation.ProjectItemDefinition
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectItemDefinition
  nameWithType: ProjectItemDefinition
  fullName: Microsoft.Build.Evaluation.ProjectItemDefinition
- uid: Microsoft.Build.Evaluation.Project.GetItems(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItems(String)
  nameWithType: Project.GetItems(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItems(String)
- uid: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsByEvaluatedInclude(String)
  nameWithType: Project.GetItemsByEvaluatedInclude(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(String)
- uid: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsIgnoringCondition(String)
  nameWithType: Project.GetItemsIgnoringCondition(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(String)
- uid: Microsoft.Build.Evaluation.Project.GetLogicalProject
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetLogicalProject()
  nameWithType: Project.GetLogicalProject()
  fullName: Microsoft.Build.Evaluation.Project.GetLogicalProject()
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Construction.ProjectElement}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ProjectElement>
  nameWithType: IEnumerable<ProjectElement>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Construction.ProjectElement>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Construction.ProjectElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Construction.ProjectElement
    name: ProjectElement
    nameWithType: ProjectElement
    fullName: ProjectElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped(ProjectMetadata)
  nameWithType: Project.GetMetadataValueEscaped(ProjectMetadata)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectMetadata)
- uid: Microsoft.Build.Evaluation.ProjectMetadata
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectMetadata
  nameWithType: ProjectMetadata
  fullName: Microsoft.Build.Evaluation.ProjectMetadata
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped(ProjectItem,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItem,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItem,String)
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped(ProjectItemDefinition,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
- uid: Microsoft.Build.Evaluation.Project.GetProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetProperty(String)
  nameWithType: Project.GetProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.GetProperty(String)
- uid: Microsoft.Build.Evaluation.ProjectProperty
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectProperty
  nameWithType: ProjectProperty
  fullName: Microsoft.Build.Evaluation.ProjectProperty
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValue(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValue(String)
  nameWithType: Project.GetPropertyValue(String)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValue(String)
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValueEscaped(ProjectProperty)
  nameWithType: Project.GetPropertyValueEscaped(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(ProjectProperty)
- uid: Microsoft.Build.Evaluation.Project.GlobalProperties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GlobalProperties
  nameWithType: Project.GlobalProperties
  fullName: Microsoft.Build.Evaluation.Project.GlobalProperties
- uid: Microsoft.Build.Evaluation.Project.Imports
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Imports
  nameWithType: Project.Imports
  fullName: Microsoft.Build.Evaluation.Project.Imports
- uid: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ResolvedImport}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ResolvedImport>
  nameWithType: IList<ResolvedImport>
  fullName: System.Collections.Generic.IList<Microsoft.Build.Evaluation.ResolvedImport>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<Microsoft.Build.Evaluation.ResolvedImport>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ResolvedImport
    name: ResolvedImport
    nameWithType: ResolvedImport
    fullName: ResolvedImport
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ImportsIncludingDuplicates
  nameWithType: Project.ImportsIncludingDuplicates
  fullName: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
- uid: Microsoft.Build.Evaluation.Project.IsBuildEnabled
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsBuildEnabled
  nameWithType: Project.IsBuildEnabled
  fullName: Microsoft.Build.Evaluation.Project.IsBuildEnabled
- uid: Microsoft.Build.Evaluation.Project.IsDirty
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsDirty
  nameWithType: Project.IsDirty
  fullName: Microsoft.Build.Evaluation.Project.IsDirty
- uid: Microsoft.Build.Evaluation.Project.ItemDefinitions
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemDefinitions
  nameWithType: Project.ItemDefinitions
  fullName: Microsoft.Build.Evaluation.Project.ItemDefinitions
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItemDefinition}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,ProjectItemDefinition>
  nameWithType: IDictionary<String,ProjectItemDefinition>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Evaluation.ProjectItemDefinition>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,Microsoft.Build.Evaluation.ProjectItemDefinition>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.Build.Evaluation.ProjectItemDefinition
    name: ProjectItemDefinition
    nameWithType: ProjectItemDefinition
    fullName: ProjectItemDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Items
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Items
  nameWithType: Project.Items
  fullName: Microsoft.Build.Evaluation.Project.Items
- uid: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemsIgnoringCondition
  nameWithType: Project.ItemsIgnoringCondition
  fullName: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
- uid: Microsoft.Build.Evaluation.Project.ItemTypes
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemTypes
  nameWithType: Project.ItemTypes
  fullName: Microsoft.Build.Evaluation.Project.ItemTypes
- uid: System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.MarkDirty
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: MarkDirty()
  nameWithType: Project.MarkDirty()
  fullName: Microsoft.Build.Evaluation.Project.MarkDirty()
- uid: Microsoft.Build.Evaluation.Project.ProjectCollection
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectCollection
  nameWithType: Project.ProjectCollection
  fullName: Microsoft.Build.Evaluation.Project.ProjectCollection
- uid: Microsoft.Build.Evaluation.Project.ProjectFileLocation
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectFileLocation
  nameWithType: Project.ProjectFileLocation
  fullName: Microsoft.Build.Evaluation.Project.ProjectFileLocation
- uid: Microsoft.Build.Construction.ElementLocation
  parent: Microsoft.Build.Construction
  isExternal: false
  name: ElementLocation
  nameWithType: ElementLocation
  fullName: Microsoft.Build.Construction.ElementLocation
- uid: Microsoft.Build.Evaluation.Project.Properties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Properties
  nameWithType: Project.Properties
  fullName: Microsoft.Build.Evaluation.Project.Properties
- uid: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ReevaluateIfNecessary()
  nameWithType: Project.ReevaluateIfNecessary()
  fullName: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary()
- uid: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveGlobalProperty(String)
  nameWithType: Project.RemoveGlobalProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(String)
- uid: Microsoft.Build.Evaluation.Project.RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItem(ProjectItem)
  nameWithType: Project.RemoveItem(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItem(ProjectItem)
- uid: Microsoft.Build.Evaluation.Project.RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItems(IEnumerable<ProjectItem>)
  nameWithType: Project.RemoveItems(IEnumerable<ProjectItem>)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItems(IEnumerable<ProjectItem>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ProjectItem>
  nameWithType: IEnumerable<ProjectItem>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Evaluation.ProjectItem>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Evaluation.ProjectItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectItem
    name: ProjectItem
    nameWithType: ProjectItem
    fullName: ProjectItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveProperty(ProjectProperty)
  nameWithType: Project.RemoveProperty(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.RemoveProperty(ProjectProperty)
- uid: Microsoft.Build.Evaluation.Project.Save
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save()
  nameWithType: Project.Save()
  fullName: Microsoft.Build.Evaluation.Project.Save()
- uid: Microsoft.Build.Evaluation.Project.Save(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(TextWriter)
  nameWithType: Project.Save(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.Save(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: Microsoft.Build.Evaluation.Project.Save(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(String)
  nameWithType: Project.Save(String)
  fullName: Microsoft.Build.Evaluation.Project.Save(String)
- uid: Microsoft.Build.Evaluation.Project.Save(System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(Encoding)
  nameWithType: Project.Save(Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.Build.Evaluation.Project.Save(System.String,System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(String,Encoding)
  nameWithType: Project.Save(String,Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(String,Encoding)
- uid: Microsoft.Build.Evaluation.Project.SaveLogicalProject(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SaveLogicalProject(TextWriter)
  nameWithType: Project.SaveLogicalProject(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.SaveLogicalProject(TextWriter)
- uid: Microsoft.Build.Evaluation.Project.SetGlobalProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetGlobalProperty(String,String)
  nameWithType: Project.SetGlobalProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetGlobalProperty(String,String)
- uid: Microsoft.Build.Evaluation.Project.SetProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetProperty(String,String)
  nameWithType: Project.SetProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetProperty(String,String)
- uid: Microsoft.Build.Evaluation.Project.SkipEvaluation
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SkipEvaluation
  nameWithType: Project.SkipEvaluation
  fullName: Microsoft.Build.Evaluation.Project.SkipEvaluation
- uid: Microsoft.Build.Evaluation.Project.SubToolsetVersion
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SubToolsetVersion
  nameWithType: Project.SubToolsetVersion
  fullName: Microsoft.Build.Evaluation.Project.SubToolsetVersion
- uid: Microsoft.Build.Evaluation.Project.Targets
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Targets
  nameWithType: Project.Targets
  fullName: Microsoft.Build.Evaluation.Project.Targets
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.ProjectTargetInstance}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,ProjectTargetInstance>
  nameWithType: IDictionary<String,ProjectTargetInstance>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Execution.ProjectTargetInstance>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,Microsoft.Build.Execution.ProjectTargetInstance>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.Build.Execution.ProjectTargetInstance
    name: ProjectTargetInstance
    nameWithType: ProjectTargetInstance
    fullName: ProjectTargetInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.ToolsVersion
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ToolsVersion
  nameWithType: Project.ToolsVersion
  fullName: Microsoft.Build.Evaluation.Project.ToolsVersion
- uid: Microsoft.Build.Evaluation.Project.Xml
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Xml
  nameWithType: Project.Xml
  fullName: Microsoft.Build.Evaluation.Project.Xml
- uid: Microsoft.Build.Evaluation.Project.#ctor*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project
  nameWithType: Project.Project
- uid: Microsoft.Build.Evaluation.Project.AddItem*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItem
  nameWithType: Project.AddItem
- uid: Microsoft.Build.Evaluation.Project.AddItemFast*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItemFast
  nameWithType: Project.AddItemFast
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItemDefinitionMetadata
  nameWithType: Project.AllEvaluatedItemDefinitionMetadata
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItems*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItems
  nameWithType: Project.AllEvaluatedItems
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedProperties
  nameWithType: Project.AllEvaluatedProperties
- uid: Microsoft.Build.Evaluation.Project.Build*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build
  nameWithType: Project.Build
- uid: Microsoft.Build.Evaluation.Project.ConditionedProperties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ConditionedProperties
  nameWithType: Project.ConditionedProperties
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: CreateProjectInstance
  nameWithType: Project.CreateProjectInstance
- uid: Microsoft.Build.Evaluation.Project.DirectoryPath*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DirectoryPath
  nameWithType: Project.DirectoryPath
- uid: Microsoft.Build.Evaluation.Project.DisableMarkDirty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DisableMarkDirty
  nameWithType: Project.DisableMarkDirty
- uid: Microsoft.Build.Evaluation.Project.EvaluationCounter*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: EvaluationCounter
  nameWithType: Project.EvaluationCounter
- uid: Microsoft.Build.Evaluation.Project.ExpandString*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ExpandString
  nameWithType: Project.ExpandString
- uid: Microsoft.Build.Evaluation.Project.FullPath*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: FullPath
  nameWithType: Project.FullPath
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped
  nameWithType: Project.GetEvaluatedItemIncludeEscaped
- uid: Microsoft.Build.Evaluation.Project.GetItems*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItems
  nameWithType: Project.GetItems
- uid: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsByEvaluatedInclude
  nameWithType: Project.GetItemsByEvaluatedInclude
- uid: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsIgnoringCondition
  nameWithType: Project.GetItemsIgnoringCondition
- uid: Microsoft.Build.Evaluation.Project.GetLogicalProject*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetLogicalProject
  nameWithType: Project.GetLogicalProject
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped
  nameWithType: Project.GetMetadataValueEscaped
- uid: Microsoft.Build.Evaluation.Project.GetProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetProperty
  nameWithType: Project.GetProperty
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValue*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValue
  nameWithType: Project.GetPropertyValue
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValueEscaped
  nameWithType: Project.GetPropertyValueEscaped
- uid: Microsoft.Build.Evaluation.Project.GlobalProperties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GlobalProperties
  nameWithType: Project.GlobalProperties
- uid: Microsoft.Build.Evaluation.Project.Imports*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Imports
  nameWithType: Project.Imports
- uid: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ImportsIncludingDuplicates
  nameWithType: Project.ImportsIncludingDuplicates
- uid: Microsoft.Build.Evaluation.Project.IsBuildEnabled*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsBuildEnabled
  nameWithType: Project.IsBuildEnabled
- uid: Microsoft.Build.Evaluation.Project.IsDirty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsDirty
  nameWithType: Project.IsDirty
- uid: Microsoft.Build.Evaluation.Project.ItemDefinitions*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemDefinitions
  nameWithType: Project.ItemDefinitions
- uid: Microsoft.Build.Evaluation.Project.Items*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Items
  nameWithType: Project.Items
- uid: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemsIgnoringCondition
  nameWithType: Project.ItemsIgnoringCondition
- uid: Microsoft.Build.Evaluation.Project.ItemTypes*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemTypes
  nameWithType: Project.ItemTypes
- uid: Microsoft.Build.Evaluation.Project.MarkDirty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: MarkDirty
  nameWithType: Project.MarkDirty
- uid: Microsoft.Build.Evaluation.Project.ProjectCollection*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectCollection
  nameWithType: Project.ProjectCollection
- uid: Microsoft.Build.Evaluation.Project.ProjectFileLocation*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectFileLocation
  nameWithType: Project.ProjectFileLocation
- uid: Microsoft.Build.Evaluation.Project.Properties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Properties
  nameWithType: Project.Properties
- uid: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ReevaluateIfNecessary
  nameWithType: Project.ReevaluateIfNecessary
- uid: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveGlobalProperty
  nameWithType: Project.RemoveGlobalProperty
- uid: Microsoft.Build.Evaluation.Project.RemoveItem*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItem
  nameWithType: Project.RemoveItem
- uid: Microsoft.Build.Evaluation.Project.RemoveItems*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItems
  nameWithType: Project.RemoveItems
- uid: Microsoft.Build.Evaluation.Project.RemoveProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveProperty
  nameWithType: Project.RemoveProperty
- uid: Microsoft.Build.Evaluation.Project.Save*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save
  nameWithType: Project.Save
- uid: Microsoft.Build.Evaluation.Project.SaveLogicalProject*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SaveLogicalProject
  nameWithType: Project.SaveLogicalProject
- uid: Microsoft.Build.Evaluation.Project.SetGlobalProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetGlobalProperty
  nameWithType: Project.SetGlobalProperty
- uid: Microsoft.Build.Evaluation.Project.SetProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetProperty
  nameWithType: Project.SetProperty
- uid: Microsoft.Build.Evaluation.Project.SkipEvaluation*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SkipEvaluation
  nameWithType: Project.SkipEvaluation
- uid: Microsoft.Build.Evaluation.Project.SubToolsetVersion*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SubToolsetVersion
  nameWithType: Project.SubToolsetVersion
- uid: Microsoft.Build.Evaluation.Project.Targets*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Targets
  nameWithType: Project.Targets
- uid: Microsoft.Build.Evaluation.Project.ToolsVersion*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ToolsVersion
  nameWithType: Project.ToolsVersion
- uid: Microsoft.Build.Evaluation.Project.Xml*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Xml
  nameWithType: Project.Xml
