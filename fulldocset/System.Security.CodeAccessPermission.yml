### YamlMime:ManagedReference
items:
- uid: System.Security.CodeAccessPermission
  id: CodeAccessPermission
  children:
  - System.Security.CodeAccessPermission.#ctor
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Copy
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  - System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  - System.Security.CodeAccessPermission.ToXml
  - System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission
  fullName: System.Security.CodeAccessPermission
  type: Class
  summary: "すべてのコード アクセス許可の基になる構造を定義します。"
  remarks: "コード アクセス許可では、スタック ウォークを使用して、アクセス許可がコードのすべての呼び出し元に付与されていることを確認します。 権限オブジェクトが場合`null`、 <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>.</xref:System.Security.Permissions.PermissionState?displayProperty=fullName>の状態でアクセス許可オブジェクトと同様に処理には       通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。       CodeAccessPermission クラスの継承元には、セキュリティ インフラストラクチャを拡張するアクセス許可として正しく機能する完全な信頼を付与する必要があります。 継承元が完全に信頼された、CodeAccessPermission 問題であるため、<xref:System.Security.Permissions.SecurityAction>の<xref:System.Security.Permissions.SecurityPermissionFlag>=`true`と<xref:System.Security.Permissions.SecurityPermissionFlag>= `true`</xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityAction> 。"
  example:
  - "The following code example shows a permission derived from the CodeAccessPermission class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/csharp/t-system.security.codeac_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/cpp/t-system.security.codeac_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/visualbasic/t-system.security.codeac_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.IStackWalk
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.#ctor
  id: '#ctor'
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: CodeAccessPermission()
  nameWithType: CodeAccessPermission.CodeAccessPermission()
  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターは、派生クラスのインスタンスが作成されるたびに、型の状態を初期化するために呼び出されます。 派生クラスのコンス トラクターのコンス トラクター宣言で、このコンス トラクターを明示的に呼び出すことができますが一致しない通常必要です。ほとんどのコンパイラでは、呼び出しを自動的に生成されます。"
  syntax:
    content: protected CodeAccessPermission ();
    parameters: []
  overload: System.Security.CodeAccessPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Assert
  id: Assert
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: System.Security.CodeAccessPermission.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "呼び出し元のコードがスタック内の上位の呼び出し元がリソースにアクセスする権限が許可されていない場合でも、このメソッドを呼び出すコードを通じてアクセス許可要求によって保護されているリソースにアクセスできることを宣言します。 Assert を使用すると、セキュリティの問題を作成できます。"
  remarks: "通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。 Assert を呼び出すには、元このメソッドを呼び出すコードを超える呼び出し履歴を先に進むからのコール スタックの下位のスタック ウォークができなくなります。 そのため、場合でも、呼び出し履歴の上位の呼び出し元には、リソースにアクセスするために必要なアクセス許可がない、それらにアクセスできることにより、コードをこのメソッドを呼び出すために必要なアクセス許可。 アサーションは、アサートを呼び出すコードをアサートしている、権限のセキュリティ チェックに合格する場合にのみ有効です。       Assert への呼び出しは、呼び出し元のコードは、呼び出し元に返されるまで有効です。 1 つだけのアサートはフレーム上でアクティブにすることはできます。 アクティブなアサートが<xref:System.Security.SecurityException>。</xref:System.Security.SecurityException>フレーム結果に存在する場合は、アサートを呼び出そうとすると 呼び出す<xref:System.Security.CodeAccessPermission.RevertAssert%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>active アサートを削除する</xref:System.Security.CodeAccessPermission.RevertAll%2A></xref:System.Security.CodeAccessPermission.RevertAssert%2A>。       アサートはそのアクセス許可の確認要求は成功しませんので許可されていなかった権限は無視されます。 ただし、コール スタックの下部のコードを呼び出す場合<xref:System.Security.CodeAccessPermission.Demand%2A>そのアクセス許可、<xref:System.Security.SecurityException>スタック ウォークがアサートを呼び出すしようとしたコードに達した場合にスローされます</xref:System.Security.SecurityException></xref:System.Security.CodeAccessPermission.Demand%2A>。 これはことをアサートするしようとした場合でも、アサートを呼び出したコードに、アクセス許可が与えられていないためです。      > [!CAUTION] > Assert を呼び出すには、呼び出しチェーン内のすべてのコードに対して、指定されたリソースにアクセスする権限を付与する必要がある要件が解除されます、ために開くことができるセキュリティの問題を誤ってまたは不適切に使用する場合。 そのため、注意深く使用してください。"
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元のコードはありません<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;></xref>です。       または、現在のフレームのアクティブなアサートが既に存在します。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Copy
  id: Copy
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: CodeAccessPermission.Copy()
  fullName: System.Security.CodeAccessPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "派生クラスで実装された場合、作成し、現在のアクセス許可オブジェクトの完全なコピーを返します。"
  remarks: "アクセス許可オブジェクトのコピーは、元のアクセス許可オブジェクトと、リソースに対して同じアクセス権を表します。"
  example:
  - "The following code example shows an override of the Copy method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/csharp/m-system.security.codeac_0_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/cpp/m-system.security.codeac_0_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/visualbasic/m-system.security.codeac_0_1.vb)]"
  syntax:
    content: public abstract System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "現在のアクセス許可オブジェクトのコピー。"
  overload: System.Security.CodeAccessPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Demand
  id: Demand
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: System.Security.CodeAccessPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "強制的な<xref:System.Security.SecurityException>実行時に現在のインスタンスによって指定されたアクセス許可が呼び出し履歴内の上位にあるすべての呼び出し元に付与されていない場合</xref:System.Security.SecurityException>。"
  remarks: "このメソッドは呼び出し元がリソースにアクセスする権限を持っていることを確認する、セキュリティで保護されたライブラリで通常使用されます。 たとえば、安全なクラス ライブラリ内のファイル クラスが、必要なの需要を呼び出します<xref:System.Security.Permissions.FileIOPermission>、呼び出し元によって要求されたファイルの操作を実行する前にします</xref:System.Security.Permissions.FileIOPermission>。       このメソッドを呼び出すコードのアクセス許可はチェックされません。チェックは、そのコードの直前の呼び出し元から開始され、スタックの上位に進みます。 通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。 しかない場合、要求が成功した<xref:System.Security.SecurityException>が発生します</xref:System.Security.SecurityException>。"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し履歴の上位の呼び出し元には、現在のインスタンスによって指定されたアクセス許可がありません。       - または - 呼び出し履歴の上位の呼び出し元が呼び出されて<xref:System.Security.CodeAccessPermission.Deny*>、現在のアクセス許可オブジェクトです</xref:System.Security.CodeAccessPermission.Deny*>。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Deny
  id: Deny
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: System.Security.CodeAccessPermission.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "呼び出し履歴の上位の呼び出し元が現在のインスタンスによって指定されたリソースにアクセスするには、このメソッドを呼び出すコードを使用するを防ぎます。"
  remarks: "> [!IMPORTANT]> 完全に信頼されたコードでは、偶発的なアクセスからリソースを保護する場合にのみ Deny メソッドを使用してください。 指定しないでリソースを意図的な誤用から保護する信頼されていないコードでします。 たとえば場合、メソッド`A`権限の拒否を発行し、メソッドを呼び出して、 `B`、メソッド`B` <xref:System.Security.CodeAccessPermission.Assert%2A>.</xref:System.Security.CodeAccessPermission.Assert%2A>を発行して拒否する を上書き獲得できます 呼び出されたメソッドは、スタック内の上位は常にします。 したがって場合、メソッド`B`保護されたリソース、セキュリティ システムへのアクセスの試行がためアクセス許可と、その確認を開始メソッド`B`直前の呼び出し元は、上下してウォーク Deny がないことを確認するスタックまたは<xref:System.Security.CodeAccessPermission.PermitOnly%2A>、スタック内の下位</xref:System.Security.CodeAccessPermission.PermitOnly%2A>。 メソッド`B`、リソースにアクセスしようとするは直ちに停止できるスタック ウォークを使用して、<xref:System.Security.CodeAccessPermission.Assert%2A>メソッド</xref:System.Security.CodeAccessPermission.Assert%2A>。 その場合は、Deny スタック上に配置メソッドによって`A`(呼び出し元のメソッド) が検出されることはありません。       このメソッドは、コール スタックの上位の呼び出し元がそれらの呼び出し元にはそれにアクセスする権限が付与されている場合でもこのメソッドを呼び出すコードを保護されたリソースにアクセスすることを防ぎます。 通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。       Deny では、プログラマの責任を制限したり、拒否されたアクセス許可によって保護されているリソースへのアクセスに使用されるを拒否を呼び出されるメソッドを防ぐのに役立つので偶発的なセキュリティの問題を防止することができます。 メソッドでアクセス許可、拒否を呼び出す場合と場合、 <xref:System.Security.CodeAccessPermission.Demand%2A>Deny になったときにそのアクセス許可は、呼び出し履歴内の下位にある呼び出し元によって呼び出されるのセキュリティ チェックは失敗します</xref:System.Security.CodeAccessPermission.Demand%2A>。       拒否への呼び出しは、呼び出し元のコードは、呼び出し元に返されるまで有効です。 1 つだけの拒否はフレーム上でアクティブにすることはできます。 アクティブな拒否は<xref:System.Security.SecurityException>。</xref:System.Security.SecurityException>フレーム結果に存在する場合は、拒否を呼び出そうとすると 呼び出す<xref:System.Security.CodeAccessPermission.RevertDeny%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>active 拒否を削除する</xref:System.Security.CodeAccessPermission.RevertAll%2A></xref:System.Security.CodeAccessPermission.RevertDeny%2A>。 拒否した権限を与えないため、そのアクセス許可の確認要求は成功しませんは無視されます。"
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "現在のフレームの作業中の Deny が既に存在します。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: System.Security.CodeAccessPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定するかどうか、指定した<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>オブジェクトが現在<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>です。"
  remarks: "詳細については、 <xref:System.Object.Equals%2A>。</xref:System.Object.Equals%2A>を参照してください。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>現在と比較するオブジェクト<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、指定した<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>オブジェクトが現在<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.CodeAccessPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: CodeAccessPermission.FromXml(SecurityElement)
  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "派生クラスでオーバーライドされると、XML エンコードから指定された状態で、セキュリティ オブジェクトを再構築します。"
  remarks: "セキュリティ オブジェクトを拡張するカスタム コードを実装する必要があります、<xref:System.Security.CodeAccessPermission.ToXml%2A>とする、オブジェクトはセキュリティ encodable FromXml メソッド</xref:System.Security.CodeAccessPermission.ToXml%2A>。"
  example:
  - "The following code example shows an override of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/csharp/m-system.security.codeac_1_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/cpp/m-system.security.codeac_1_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/visualbasic/m-system.security.codeac_1_1.vb)]"
  syntax:
    content: public abstract void FromXml (System.Security.SecurityElement elem);
    parameters:
    - id: elem
      type: System.Security.SecurityElement
      description: "XML は、セキュリティ オブジェクトを再構築に使用するエンコーディングします。"
  overload: System.Security.CodeAccessPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>elem</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> elem </code>パラメーターには、現在のインスタンスと同じ型のインスタンスの XML エンコードが含まれていません。       - または - のバージョン番号、 <code> elem </code>パラメーターはサポートされていません。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: System.Security.CodeAccessPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "ハッシュ コードを取得、 <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>ハッシュ ハッシュ テーブルなどのアルゴリズムとデータ構造で使用するために適切なオブジェクトです。"
  remarks: "同じアクセス許可の&2; つのインスタンスのハッシュ コードが異なる可能性があります、ためハッシュ コードを比較する&2; つ使用するされません<xref:System.Security.CodeAccessPermission>オブジェクト</xref:System.Security.CodeAccessPermission>。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "現在のハッシュ コード<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>オブジェクト。"
  overload: System.Security.CodeAccessPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: CodeAccessPermission.Intersect(IPermission)
  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "派生クラスで実装された場合、作成し、現在のアクセス許可と指定したアクセス許可の積集合であるアクセス許可を返します。"
  remarks: "2 つのアクセス許可の積集合は、一連の両方に共通する操作を説明する権限です。 元の両方の権限を通過する要求だけでは、積集合を渡されます。"
  example:
  - "The following code example shows an override of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/csharp/m-system.security.codeac_3_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/cpp/m-system.security.codeac_3_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/visualbasic/m-system.security.codeac_3_1.vb)]"
  syntax:
    content: public abstract System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "現在のアクセス許可と交差するアクセス許可。 これは、現在のアクセス許可と同じ型でなければなりません。"
    return:
      type: System.Security.IPermission
      description: "現在のアクセス許可と指定したアクセス許可の積集合を表す新しいアクセス許可。 この新しいアクセス許可は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>積集合が空の場合。"
  overload: System.Security.CodeAccessPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>パラメーターではありません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>し、現在のアクセス許可と同じクラスのインスタンスではありません。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)
  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "派生クラスで実装された場合、現在のアクセス許可、指定した権限のサブセットであるかどうかを判断します。"
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all overrides of the IsSubsetOf method. *X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState>.  \n  \n-   *X*.IsSubsetOf(*X*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.  \n  \n-   If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*U*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*N*) returns `false`.  \n  \n-   *N*.IsSubsetOf(*X*) returns `true`.  \n  \n If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`. If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission."
  example:
  - "The following code example shows an override of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/csharp/m-system.security.codeac_5_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/cpp/m-system.security.codeac_5_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/visualbasic/m-system.security.codeac_5_1.vb)]"
  syntax:
    content: public abstract bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "サブセットの関係をテストするのには権限です。 このアクセス許可は、現在のアクセス許可と同じ型でなければなりません。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>現在のアクセス許可が指定した権限のサブセットの場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.CodeAccessPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>パラメーターではありません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>と現在のアクセス許可と同じ型でもありません。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.PermitOnly
  id: PermitOnly
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: System.Security.CodeAccessPermission.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "呼び出し履歴の上位の呼び出し元が現在のインスタンスによって指定されたリソースを除くすべてのリソースにアクセスするには、このメソッドを呼び出すコードを使用するを防ぎます。"
  remarks: "> [!IMPORTANT]> 完全に信頼されたコードでは、偶発的なアクセスからリソースを保護する場合にのみ PermitOnly メソッドを使用してください。 指定しないでリソースを意図的な誤用から保護する信頼されていないコードでします。 たとえば場合、メソッド`A`アクセス許可の PermitOnly を発行し、メソッドを呼び出して、 `B`、メソッド`B` <xref:System.Security.CodeAccessPermission.Assert%2A>.</xref:System.Security.CodeAccessPermission.Assert%2A>を発行することで、PermitOnly をオーバーライドできます獲得 呼び出されたメソッドは、スタック内の上位は常にします。 したがって場合、メソッド`B`保護されたリソース、セキュリティ システムへのアクセスの試行がためアクセス許可と、その確認を開始メソッド`B`直前の呼び出し元は、上下しウォークがあることを確認するスタックありません<xref:System.Security.CodeAccessPermission.Deny%2A>または PermitOnly、スタック内の下位</xref:System.Security.CodeAccessPermission.Deny%2A>。 メソッド`B`、リソースにアクセスしようとするは直ちに停止できるスタック ウォークを使用して、<xref:System.Security.CodeAccessPermission.Assert%2A>メソッド</xref:System.Security.CodeAccessPermission.Assert%2A>。 その場合は、PermitOnly スタック上に配置メソッドによって`A`(呼び出し元のメソッド) が検出されることはありません。       PermitOnly と似ています<xref:System.Security.CodeAccessPermission.Deny%2A>、それ以外の場合操作が成功すると失敗するスタック ウォークが発生する両方でその</xref:System.Security.CodeAccessPermission.Deny%2A>。 その違いは<xref:System.Security.CodeAccessPermission.Deny%2A>を指定するスタックを原因となるアクセス許可が失敗するため、説明は PermitOnly は失敗するスタック ウォークが発生しないのみのアクセス許可を指定します</xref:System.Security.CodeAccessPermission.Deny%2A>。       このメソッドを呼び出して、指定されたリソースのみにアクセスするコードを使用できることを確認してください。 PermitOnly への呼び出しは、呼び出し元のコードは、呼び出し元に返されるまで有効です。 1 つだけ PermitOnly はフレーム上でアクティブにすることはできます。 アクティブな PermitOnly は<xref:System.Security.SecurityException>。</xref:System.Security.SecurityException>フレーム結果に存在する場合は、PermitOnly を呼び出そうとすると 呼び出す<xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>または<xref:System.Security.CodeAccessPermission.RevertAll%2A>active PermitOnly を削除する</xref:System.Security.CodeAccessPermission.RevertAll%2A></xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>。       そのアクセス許可の確認要求は成功しませんので許可されていなかった権限 PermitOnly は無視されます。 ただし、コードのコール スタックを後で場合呼び出し<xref:System.Security.CodeAccessPermission.Demand%2A>そのアクセス許可、<xref:System.Security.SecurityException>スタック ウォークが PermitOnly を呼び出すしようとしたコードに達した場合にスローされます</xref:System.Security.SecurityException></xref:System.Security.CodeAccessPermission.Demand%2A>。 これは、そのアクセス許可に対して PermitOnly が呼び出されていなくても、PermitOnly を呼び出したコードに、アクセス許可が与えられていないためです。 通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。"
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.CodeAccessPermission.PermitOnly*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "現在のフレームの作業中の PermitOnly が既に存在します。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertAll
  id: RevertAll
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: System.Security.CodeAccessPermission.RevertAll()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のフレームを削除して効果で不要になったすべての以前の上書きが発生します。"
  remarks: "上書きがない場合 (<xref:System.Security.CodeAccessPermission.Assert%2A>、 <xref:System.Security.CodeAccessPermission.Deny%2A>、または<xref:System.Security.CodeAccessPermission.PermitOnly%2A>) 現在のフレーム、<xref:System.ExecutionEngineException>がスローされます</xref:System.ExecutionEngineException></xref:System.Security.CodeAccessPermission.PermitOnly%2A></xref:System.Security.CodeAccessPermission.Deny%2A></xref:System.Security.CodeAccessPermission.Assert%2A>。"
  syntax:
    content: public static void RevertAll ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertAll*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ない<> *>、 <> </> *>、または<xref:System.Security.CodeAccessPermission.PermitOnly*>現在のフレーム</xref:System.Security.CodeAccessPermission.PermitOnly*>。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertAssert
  id: RevertAssert
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: System.Security.CodeAccessPermission.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "以前のど<xref:System.Security.CodeAccessPermission.Assert*>現在のフレームを削除して効果で不要になった</xref:System.Security.CodeAccessPermission.Assert*>。"
  remarks: "ある場合ありません<xref:System.Security.CodeAccessPermission.Assert%2A>現在のフレーム、<xref:System.ExecutionEngineException>がスローされます</xref:System.ExecutionEngineException></xref:System.Security.CodeAccessPermission.Assert%2A>。"
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ない<xref:System.Security.CodeAccessPermission.Assert*>現在のフレーム</xref:System.Security.CodeAccessPermission.Assert*>。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertDeny
  id: RevertDeny
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: System.Security.CodeAccessPermission.RevertDeny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "以前のど<xref:System.Security.CodeAccessPermission.Deny*>現在のフレームを削除して効果で不要になった</xref:System.Security.CodeAccessPermission.Deny*>。"
  remarks: "ある場合ありません<xref:System.Security.CodeAccessPermission.Deny%2A>現在のフレーム、<xref:System.ExecutionEngineException>がスローされます</xref:System.ExecutionEngineException></xref:System.Security.CodeAccessPermission.Deny%2A>。"
  syntax:
    content: public static void RevertDeny ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertDeny*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ない<xref:System.Security.CodeAccessPermission.Deny*>現在のフレーム</xref:System.Security.CodeAccessPermission.Deny*>。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  id: RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "以前のど<xref:System.Security.CodeAccessPermission.PermitOnly*>現在のフレームを削除して効果で不要になった</xref:System.Security.CodeAccessPermission.PermitOnly*>。"
  remarks: "ある場合ありません<xref:System.Security.CodeAccessPermission.PermitOnly%2A>現在のフレーム、<xref:System.ExecutionEngineException>がスローされます</xref:System.ExecutionEngineException></xref:System.Security.CodeAccessPermission.PermitOnly%2A>。"
  syntax:
    content: public static void RevertPermitOnly ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertPermitOnly*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ない<xref:System.Security.CodeAccessPermission.PermitOnly*>現在のフレーム</xref:System.Security.CodeAccessPermission.PermitOnly*>。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.ToString
  id: ToString
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: System.Security.CodeAccessPermission.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "作成し、現在のアクセス許可オブジェクトの文字列表現を返します。"
  remarks: "このメソッドは、文字列として、アクセス許可を表示する必要がある場合のデバッグに役立ちます。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "現在のアクセス許可オブジェクトの文字列形式。"
  overload: System.Security.CodeAccessPermission.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.ToXml
  id: ToXml
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: CodeAccessPermission.ToXml()
  fullName: System.Security.CodeAccessPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "派生クラスでオーバーライドされると、セキュリティ オブジェクトと現在の状態の XML エンコードを作成します。"
  remarks: "セキュリティ オブジェクトを拡張するカスタム コードを ToXml を実装する必要があると<xref:System.Security.CodeAccessPermission.FromXml%2A>セキュリティ encodable オブジェクトを作成する方法</xref:System.Security.CodeAccessPermission.FromXml%2A>。"
  example:
  - "The following code example shows an override of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/csharp/m-system.security.codeac_4_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/cpp/m-system.security.codeac_4_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/visualbasic/m-system.security.codeac_4_1.vb)]"
  syntax:
    content: public abstract System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "状態情報を含む、セキュリティ オブジェクトの XML エンコード。"
  overload: System.Security.CodeAccessPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: CodeAccessPermission.Union(IPermission)
  fullName: System.Security.CodeAccessPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "派生クラスでオーバーライドされると、現在のアクセス許可と、指定した権限の和集合であるアクセス許可を作成します。"
  remarks: "共用体への呼び出しの結果は、現在のアクセス許可と、指定した権限の両方で表されるすべての操作を表すアクセス許可です。 いずれかのアクセス許可に適合する要求は、その共用体を渡します。"
  example:
  - "The following code example shows an override of the Union method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/csharp/m-system.security.codeac_2_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/cpp/m-system.security.codeac_2_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/visualbasic/m-system.security.codeac_2_1.vb)]"
  syntax:
    content: public virtual System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "現在のアクセス許可と結合するアクセス許可。 これは、現在のアクセス許可と同じ型でなければなりません。"
    return:
      type: System.Security.IPermission
      description: "現在のアクセス許可と、指定した権限の和集合を表す新しいアクセス許可。"
  overload: System.Security.CodeAccessPermission.Union*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <code>other</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. このメソッドは渡されたときに、このレベルでのみサポート<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.CodeAccessPermission.#ctor
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: CodeAccessPermission()
  nameWithType: CodeAccessPermission.CodeAccessPermission()
  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()
- uid: System.Security.CodeAccessPermission.Assert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: System.Security.CodeAccessPermission.Assert()
- uid: System.Security.CodeAccessPermission.Copy
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Copy()
  nameWithType: CodeAccessPermission.Copy()
  fullName: System.Security.CodeAccessPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.CodeAccessPermission.Demand
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: System.Security.CodeAccessPermission.Demand()
- uid: System.Security.CodeAccessPermission.Deny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: System.Security.CodeAccessPermission.Deny()
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: System.Security.CodeAccessPermission.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: CodeAccessPermission.FromXml(SecurityElement)
  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.CodeAccessPermission.GetHashCode
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: System.Security.CodeAccessPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: CodeAccessPermission.Intersect(IPermission)
  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)
- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)
  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)
- uid: System.Security.CodeAccessPermission.PermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: System.Security.CodeAccessPermission.PermitOnly()
- uid: System.Security.CodeAccessPermission.RevertAll
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: System.Security.CodeAccessPermission.RevertAll()
- uid: System.Security.CodeAccessPermission.RevertAssert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: System.Security.CodeAccessPermission.RevertAssert()
- uid: System.Security.CodeAccessPermission.RevertDeny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: System.Security.CodeAccessPermission.RevertDeny()
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()
- uid: System.Security.CodeAccessPermission.ToString
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: System.Security.CodeAccessPermission.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.CodeAccessPermission.ToXml
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToXml()
  nameWithType: CodeAccessPermission.ToXml()
  fullName: System.Security.CodeAccessPermission.ToXml()
- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: CodeAccessPermission.Union(IPermission)
  fullName: System.Security.CodeAccessPermission.Union(IPermission)
- uid: System.Security.CodeAccessPermission.#ctor*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission.CodeAccessPermission
- uid: System.Security.CodeAccessPermission.Assert*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert
  nameWithType: CodeAccessPermission.Assert
- uid: System.Security.CodeAccessPermission.Copy*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Copy
  nameWithType: CodeAccessPermission.Copy
- uid: System.Security.CodeAccessPermission.Demand*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand
  nameWithType: CodeAccessPermission.Demand
- uid: System.Security.CodeAccessPermission.Deny*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny
  nameWithType: CodeAccessPermission.Deny
- uid: System.Security.CodeAccessPermission.Equals*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals
  nameWithType: CodeAccessPermission.Equals
- uid: System.Security.CodeAccessPermission.FromXml*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: FromXml
  nameWithType: CodeAccessPermission.FromXml
- uid: System.Security.CodeAccessPermission.GetHashCode*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode
  nameWithType: CodeAccessPermission.GetHashCode
- uid: System.Security.CodeAccessPermission.Intersect*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Intersect
  nameWithType: CodeAccessPermission.Intersect
- uid: System.Security.CodeAccessPermission.IsSubsetOf*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: CodeAccessPermission.IsSubsetOf
- uid: System.Security.CodeAccessPermission.PermitOnly*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly
  nameWithType: CodeAccessPermission.PermitOnly
- uid: System.Security.CodeAccessPermission.RevertAll*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll
  nameWithType: CodeAccessPermission.RevertAll
- uid: System.Security.CodeAccessPermission.RevertAssert*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert
  nameWithType: CodeAccessPermission.RevertAssert
- uid: System.Security.CodeAccessPermission.RevertDeny*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny
  nameWithType: CodeAccessPermission.RevertDeny
- uid: System.Security.CodeAccessPermission.RevertPermitOnly*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly
  nameWithType: CodeAccessPermission.RevertPermitOnly
- uid: System.Security.CodeAccessPermission.ToString*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString
  nameWithType: CodeAccessPermission.ToString
- uid: System.Security.CodeAccessPermission.ToXml*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToXml
  nameWithType: CodeAccessPermission.ToXml
- uid: System.Security.CodeAccessPermission.Union*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Union
  nameWithType: CodeAccessPermission.Union
