### YamlMime:ManagedReference
items:
- uid: System.Net.Http.DelegatingHandler
  id: DelegatingHandler
  children:
  - System.Net.Http.DelegatingHandler.#ctor
  - System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  - System.Net.Http.DelegatingHandler.InnerHandler
  - System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: DelegatingHandler
  nameWithType: DelegatingHandler
  fullName: System.Net.Http.DelegatingHandler
  type: Class
  summary: "別のハンドラーに HTTP 応答メッセージの処理をデリゲートする HTTP ハンドラーの型には、内部ハンドラーが呼び出されます。"
  remarks: "このアプリケーション通常このクラスのインスタンスを作成し、内部ハンドラーを設定またはコンス トラクターで内部ハンドラーを提供します。       なお<xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>プロパティがあります、デリゲート ハンドラーすぎます</xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>。 この方法は、HTTP 応答メッセージを処理するハンドラー スタックの作成を許可します。"
  syntax:
    content: 'public abstract class DelegatingHandler : System.Net.Http.HttpMessageHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: DelegatingHandler()
  nameWithType: DelegatingHandler.DelegatingHandler()
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "新しいインスタンスを作成、 <xref href=&quot;System.Net.Http.DelegatingHandler&quot;> </xref>クラスです。"
  remarks: "内部ハンドルは、 <xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>。</xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>を使用して設定できます。"
  syntax:
    content: protected DelegatingHandler ();
    parameters: []
  overload: System.Net.Http.DelegatingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: DelegatingHandler(HttpMessageHandler)
  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "新しいインスタンスを作成、 <xref href=&quot;System.Net.Http.DelegatingHandler&quot;> </xref>固有の内部ハンドラーを持つクラス。"
  syntax:
    content: protected DelegatingHandler (System.Net.Http.HttpMessageHandler innerHandler);
    parameters:
    - id: innerHandler
      type: System.Net.Http.HttpMessageHandler
      description: "HTTP 応答メッセージを処理する内部ハンドラー。"
  overload: System.Net.Http.DelegatingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DelegatingHandler.Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Net.Http.DelegatingHandler&quot;> </xref>、必要に応じてマネージ リソースを破棄します。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Net.Http.DelegatingHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  id: InnerHandler
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "取得または HTTP 応答メッセージを処理する内部ハンドラーを設定します。"
  remarks: "この InnerHandler プロパティは、クラスを使用する前にのみ設定できます (、<xref:System.Net.Http.DelegatingHandler.SendAsync%2A>メソッドが呼び出されます).</xref:System.Net.Http.DelegatingHandler.SendAsync%2A>       これは一般的ではありませんが、InnerHandler プロパティでも、デリゲート ハンドラーする可能性がある注意してください。 この方法は、HTTP 応答メッセージのハンドラー スタックの作成を許可します。"
  syntax:
    content: public System.Net.Http.HttpMessageHandler InnerHandler { get; set; }
    return:
      type: System.Net.Http.HttpMessageHandler
      description: "HTTP 応答メッセージの内部ハンドラー。"
  overload: System.Net.Http.DelegatingHandler.InnerHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "非同期操作としてサーバーに送信する内部ハンドラーに HTTP 要求を送信します。"
  remarks: "この操作はブロックされません。 このオーバーライド可能な実装の<xref:System.Net.Http.HttpClientHandler.SendAsync%2A>メソッドが非同期操作としてサーバーに送信する内部ハンドラーに HTTP 要求を転送します</xref:System.Net.Http.HttpClientHandler.SendAsync%2A>。       SendAsync メソッドは、システムやアプリケーションではなく、主に使用します。 このメソッドが呼び出されたときに、SendAsync メソッドを内部ハンドラーを呼び出します。"
  syntax:
    content: protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "サーバーに送信する HTTP 要求メッセージ。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "操作を取り消すキャンセル トークン。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.DelegatingHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: System.Net.Http.HttpMessageHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.DelegatingHandler.#ctor
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler()
  nameWithType: DelegatingHandler.DelegatingHandler()
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()
- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler(HttpMessageHandler)
  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DelegatingHandler.Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.DelegatingHandler.#ctor*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler
  nameWithType: DelegatingHandler.DelegatingHandler
- uid: System.Net.Http.DelegatingHandler.Dispose*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: Dispose
  nameWithType: DelegatingHandler.Dispose
- uid: System.Net.Http.DelegatingHandler.InnerHandler*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.SendAsync*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: SendAsync
  nameWithType: DelegatingHandler.SendAsync
