### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogInstaller
  id: EventLogInstaller
  children:
  - System.Diagnostics.EventLogInstaller.#ctor
  - System.Diagnostics.EventLogInstaller.CategoryCount
  - System.Diagnostics.EventLogInstaller.CategoryResourceFile
  - System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.Diagnostics.EventLogInstaller.Log
  - System.Diagnostics.EventLogInstaller.MessageResourceFile
  - System.Diagnostics.EventLogInstaller.ParameterResourceFile
  - System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.Source
  - System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.UninstallAction
  langs:
  - csharp
  name: EventLogInstaller
  nameWithType: EventLogInstaller
  fullName: System.Diagnostics.EventLogInstaller
  type: Class
  summary: "使用すると、インストールして、アプリケーションからに対して読み取りまたは書き込みを実行しているときにイベント ログを構成できます。"
  remarks: "The EventLogInstaller is used by the [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md) when installing an event log. The EventLogInstaller class can install event logs only on the local computer.  \n  \n Use the EventLogInstaller class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \n  \n> [!NOTE]\n>  The Security log is read-only.  \n  \n The installer creates the event source that you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property and registers it for the event log specified in <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. This behavior is similar to calling <xref:System.Diagnostics.EventLog.CreateEventSource%2A> on the <xref:System.Diagnostics.EventLog> component.  \n  \n Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configurations. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an EventLogInstaller, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n To install an event log, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> for the class to `true`. Within your project, create an EventLogInstaller for each event log that your application will write to and add the instance to your project installer class.  \n  \n When the [Installutil.exe (Installer Tool)](../Topic/Installutil.exe%20\\(Installer%20Tool\\).md) is called, it looks at the <xref:System.ComponentModel.RunInstallerAttribute>. If it is `true`, the tool installs all the items in the <xref:System.Configuration.Install.Installer.Installers%2A> collection that are associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the tool ignores the project installer.  \n  \n You modify other properties of an EventLogInstaller either before or after adding the instance to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer, but before the installer tool runs. You must set the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property if your application will be writing to the event log.  \n  \n Use EventLogInstaller to register a new source for a new or existing event log; do not use EventLogInstaller to change an existing source. The EventLogInstaller class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \n  \n You can register the event source with localized resource files for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Create a different source without resource files and then use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n Typically, you do not call the methods of the EventLogInstaller class from within your code; they are generally called only by Installutil.exe. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process. It backs out failures, if necessary, by calling the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method for the object that generated the exception."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the source name and the event log name, and adds the EventLogInstaller to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n [!code-cpp[EventLogInstaller#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_5_1.cpp)]\n [!code-cs[EventLogInstaller#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_5_1.cs)]\n [!code-vb[EventLogInstaller#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_5_1.vb)]"
  syntax:
    content: 'public class EventLogInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.HelpText
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: EventLogInstaller()
  nameWithType: EventLogInstaller.EventLogInstaller()
  fullName: System.Diagnostics.EventLogInstaller.EventLogInstaller()
  type: Constructor
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.EventLogInstaller&quot;> </xref>クラスです。"
  syntax:
    content: public EventLogInstaller ();
    parameters: []
  overload: System.Diagnostics.EventLogInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CategoryCount
  id: CategoryCount
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
  fullName: System.Diagnostics.EventLogInstaller.CategoryCount
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "取得またはカテゴリのリソース ファイル内の項目数を設定します。"
  remarks: "使用して、CategoryCount と<xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>プロパティとイベントを書き込むためにローカライズされたカテゴリ</xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>。 イベント ビューアーでは、イベントを記述するときに、カテゴリを指定する場合に、イベントのエントリのカテゴリが表示されます。 イベント ログのカテゴリとは、イベントをフィルター処理、またはイベントに関する情報を提供するアプリケーション定義の文字列です。 たとえば、アプリケーションでは、異なるコンポーネントまたは操作ごとに個別のカテゴリを定義できます。       イベント カテゴリは省略可能です。アプリケーションがカテゴリを使用していない場合、CategoryCount は設定しないでと<xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>プロパティ</xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>。       詳細については、イベント メッセージを定義し、イベントのリソース ファイルを構築する、プラットフォーム SDK のドキュメントの「メッセージ コンパイラ」トピックを参照してください[http://msdn.microsoft.com](http://msdn.microsoft.com/)です。"
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_14_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_14_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_14_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryCount { get; set; }
    return:
      type: System.Int32
      description: "カテゴリのリソース ファイル内のカテゴリの数。 既定値は&0; です。"
  overload: System.Diagnostics.EventLogInstaller.CategoryCount*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  id: CategoryResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
  fullName: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "取得またはソースのカテゴリ文字列を含むリソース ファイルのパスを設定します。"
  remarks: "使用して、 <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>、ローカライズされたカテゴリ文字列を CategoryResourceFile プロパティとイベントを書き込めません</xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>。 イベント ビューアーでは、イベントを記述するときに、カテゴリを指定する場合、イベントのエントリのカテゴリが表示されます。 イベント ログのカテゴリとは、イベントをフィルター処理、またはイベントに関する情報を提供するアプリケーション定義の文字列です。 たとえば、アプリケーションには、異なるコンポーネントまたは操作ごとに個別のカテゴリがあります。       イベント カテゴリは省略可能です。アプリケーションがカテゴリを使用していない場合は設定しないで、<xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>と CategoryResourceFile プロパティ</xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>。       詳細については、イベント メッセージを定義し、イベントのリソース ファイルを構築する、プラットフォーム SDK のドキュメントの「メッセージ コンパイラ」トピックを参照してください[http://msdn.microsoft.com](http://msdn.microsoft.com/)です。"
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_22_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_22_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_22_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string CategoryResourceFile { get; set; }
    return:
      type: System.String
      description: "カテゴリのリソース ファイルのパス。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Diagnostics.EventLogInstaller.CategoryResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: EventLogInstaller.CopyFromComponent(IComponent)
  fullName: System.Diagnostics.EventLogInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "プロパティ値をコピー、 <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>イベント ログのインストール時に必要なコンポーネントです。"
  remarks: "指定されたコンポーネント、`component`パラメーターである必要があります、<xref:System.Diagnostics.EventLog>ですそれ以外の場合、例外がスローされます。</xref:System.Diagnostics.EventLog> 。       メソッドを呼び出すこと、通常は、<xref:System.Diagnostics.EventLogInstaller>から、コード内で一般的に呼び出されるだけで、 [Installutil.exe (インストーラー ツール)](~/add/includes/ajax-current-ext-md.md)</xref:System.Diagnostics.EventLogInstaller> 。 <xref:System.Diagnostics.EventLogInstaller>既存の<xref:System.Diagnostics.EventLog>。</xref:System.Diagnostics.EventLog>の値に</xref:System.Diagnostics.EventLogInstaller>プロパティ値を設定する CopyFromComponent が Installutil.exe によって使用されます。       場合、<xref:System.Diagnostics.EventLog.Log%2A>の<xref:System.Diagnostics.EventLog>は空の文字列が渡される (&quot;&quot;)、設定する必要があります、<xref:System.Diagnostics.EventLog.Log%2A>プロパティをインストーラーが実行される前に有効な値です</xref:System.Diagnostics.EventLog.Log%2A></xref:System.Diagnostics.EventLog></xref:System.Diagnostics.EventLog.Log%2A>。"
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>用のテンプレートとして使用する、 <xref href=&quot;System.Diagnostics.EventLogInstaller&quot;></xref>です。"
  overload: System.Diagnostics.EventLogInstaller.CopyFromComponent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定したコンポーネントではない、 <xref href=&quot;System.Diagnostics.EventLog&quot;></xref>です。       - または -、 <> </> *> または<> *> 指定されたコンポーネントのプロパティが、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または空です。"
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: EventLogInstaller.Install(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "インストールを実行し、イベント ログの情報をレジストリに書き込みます。"
  remarks: "インストール方法は、イベント ログ情報をレジストリに書き込みで指定されたログにイベント ログを関連付けます、<xref:System.Diagnostics.EventLogInstaller.Log%2A>プロパティ</xref:System.Diagnostics.EventLogInstaller.Log%2A>。 ログが存在しない (、ソースが指定されている) 場合、インストールはログを作成し、新しいソースを関連付けます。       メソッドを呼び出すこと、通常は、<xref:System.Diagnostics.EventLogInstaller>から、コード内で一般的に呼び出されるだけで、 [Installutil.exe (インストーラー ツール)](~/add/includes/ajax-current-ext-md.md)</xref:System.Diagnostics.EventLogInstaller> 。 ツールは、インストール中にインストールされているイベント ログに関連付けられているレジストリ情報を書き込むためのインストール方法を自動的に呼び出します。 インストールは、トランザクションが失敗したインストール プロジェクト コンポーネントのインストール中に、以前にインストールされているすべてのコンポーネントがロールバックをインストール前の状態にします。 これは、各コンポーネントを呼び出すことによって実現<xref:System.Diagnostics.EventLogInstaller.Rollback%2A>メソッド</xref:System.Diagnostics.EventLogInstaller.Rollback%2A>。       使用して<xref:System.Diagnostics.EventLogInstaller>を新規または既存のイベント ログ; 用に新しいソースを登録する使用しない<xref:System.Diagnostics.EventLogInstaller>を既存のソースを変更する</xref:System.Diagnostics.EventLogInstaller></xref:System.Diagnostics.EventLogInstaller>。 <xref:System.Diagnostics.EventLogInstaller>クラスは、指定したインストールのプロパティと一致する既存のソースの構成プロパティを変更しません</xref:System.Diagnostics.EventLogInstaller>。 インストール方法は例外をスロー、<xref:System.Diagnostics.EventLogInstaller.Source%2A>コンピューター上の別のイベント ログに対して登録されているソース名と一致するプロパティ</xref:System.Diagnostics.EventLogInstaller.Source%2A>。 インストール方法が場合、ソースの登録をスキップ、<xref:System.Diagnostics.EventLogInstaller.Source%2A>で指定された同じイベント ログに対して既に登録されているソース名と一致するプロパティ、<xref:System.Diagnostics.EventLogInstaller.Log%2A>プロパティ</xref:System.Diagnostics.EventLogInstaller.Log%2A></xref:System.Diagnostics.EventLogInstaller.Source%2A>。       アプリケーションのインストールに使用してプロジェクト インストーラーの<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>プロパティが既にインストールされているコンポーネントに関する情報を自動的に維持します</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>。 としてインストールするには、この状態情報、`stateSaver`パラメーターは継続的にツール各<xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller>をインストールするように更新 通常、コードのこの状態情報を明示的に変更する必要はありません。"
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>ロールバックを実行またはアンインストール操作に必要な情報を保存するために使用します</xref:System.Collections.IDictionary>。"
  overload: System.Diagnostics.EventLogInstaller.Install*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "インストーラーが使用しようとしているプラットフォームは、Windows NT 4.0 以降ではありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Diagnostics.EventLogInstaller.Source*>プロパティは既に登録されている別のイベント ログ</xref:System.Diagnostics.EventLogInstaller.Source*>で指定された名前"
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "インストーラーと指定したもう&1; つのインストーラーが同じソースを参照しているかどうかを判断します。"
  remarks: "メソッドを呼び出すこと、通常は、<xref:System.Diagnostics.EventLogInstaller>から、コード内で一般的に呼び出されるインストーラー ツール (Installutil.exe) によってのみ</xref:System.Diagnostics.EventLogInstaller>。"
  syntax:
    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);
    parameters:
    - id: otherInstaller
      type: System.Configuration.Install.ComponentInstaller
      description: "比較対象のインストーラーです。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このインストーラーとで指定された場合、 <code> otherInstaller </code>パラメーターがインストールまたは同じソースをアンインストールすると、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Log
  id: Log
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Log
  nameWithType: EventLogInstaller.Log
  fullName: System.Diagnostics.EventLogInstaller.Log
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "取得またはソースを設定するログの名前を設定します。"
  remarks: "You can use the Log property to associate the source you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property with either an existing log or a new log on the local computer. The [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md) uses this information to map the source to the log in the computer's registry. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \n  \n To write entries to an event log, you must create a source and register it with an event log. An event source can only write to one log at a time. The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify a new source and an existing log, the installer creates a new event source and associates it with the log you specify. If you specify both a new source and a new log, the installer associates the new source with the new log in the registry, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the Log property with the \".evt\" file name extension.  \n  \n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the Log property.  \n  \n For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties."
  syntax:
    content: public string Log { get; set; }
    return:
      type: System.String
      description: "ログの名前。 アプリケーション、システム、またはカスタム ログ名を指定できます。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Diagnostics.EventLogInstaller.Log*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile
  id: MessageResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
  fullName: System.Diagnostics.EventLogInstaller.MessageResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "取得またはメッセージのソースの文字列を書式設定を含むリソース ファイルのパスを設定します。"
  remarks: "Use the MessageResourceFile property to configure an event log source to write localized event messages. Event messages are application-defined strings that describe the event to the user.  \n  \n Your application can write event log entries using resource identifiers. A resource identifier indexes a message located in the MessageResourceFile. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.  \n  \n The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.  \n  \n If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the MessageResourceFile property.  \n  \n If the <xref:System.Diagnostics.EventLog.MachineName%2A> property is not the local computer identifier (\".\"), the .NET Framework assumes that the resource file is on a remote computer. If the MessageResourceFile property value contains a drive letter, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\\\<drive\\>$ share (for example, \\\\\\server\\c$). If the value contains the string %systemroot%, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\admin$ share (for example, \\\\\\server\\admin$).  \n  \n For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_9_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_9_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_9_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string MessageResourceFile { get; set; }
    return:
      type: System.String
      description: "メッセージ リソース ファイルのパス。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Diagnostics.EventLogInstaller.MessageResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  id: ParameterResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
  fullName: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "取得またはソースのメッセージ パラメーターの文字列を含むリソース ファイルのパスを設定します。"
  remarks: "ParameterResourceFile プロパティを使用して、挿入されたパラメーター文字列をローカライズされたイベント メッセージに書き込むイベント ログ ソースを構成します。 指定した各ローカライズされたイベント メッセージ、<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>プロパティは、挿入文字列のプレース ホルダーを含めることができます</xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>。 これらのプレース ホルダーを使用して、位置と、イベント メッセージ内の言語に依存しない文字列のリソース識別子を指定します。 イベント ビューアーは、ParameterResourceFile から対応する文字列のプレース ホルダーを置換し、ローカライズされたイベント エントリのイベント ログ メッセージの形式をします。       メッセージのテキスト ファイルの次のセクションがパラメーターのプレース ホルダーを含む文字列を定義するなど、:```      MessageId = 1501   Severity = Success   Facility = Application   SymbolicName = COMPONENT_STARTING   Language=English   Component %%6050 is starting.   .   ```パラメーター リソース ファイル内で挿入文字列で定義されなければなりません、プレース ホルダーに対応するリソース識別子次に示すよう:```   MessageId = 6050   Severity = Success   Facility = Application   SymbolicName = COMPONENT_NAME_MSGID   Language=English   TRIGGER.EXE   .   ```ローカライズされたエントリを書き込むか、または直接の文字列を作成するため、イベント ソースを構成する必要があります。 使用して、<xref:System.Diagnostics.EventLog.WriteEvent%2A>メッセージ リソース ファイルで構成されているソースのローカライズされたエントリを書き込みます</xref:System.Diagnostics.EventLog.WriteEvent%2A>。       アプリケーションがイベント ログに直接イベント メッセージ文字列を書き込む場合、または、<xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>メッセージが含まれていないパラメーター カーソルのプレース ホルダーでプロパティを設定しない、ParameterResourceFile</xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> 。       詳細については、イベント メッセージを定義し、イベントのリソース ファイルを構築する、プラットフォーム SDK のドキュメントの「メッセージ コンパイラ」トピックを参照してください[http://msdn.microsoft.com](http://msdn.microsoft.com/)です。"
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_26_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_26_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_26_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string ParameterResourceFile { get; set; }
    return:
      type: System.String
      description: "メッセージ パラメーターのリソース ファイルのパス。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Diagnostics.EventLogInstaller.ParameterResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: EventLogInstaller.Rollback(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "状態でインストールする前に、インストール手順がレジストリに書き込まれたイベント ログの情報をロールバックしてにコンピューターを復元します。"
  remarks: "Rollback メソッドの効果を元に戻します、<xref:System.Diagnostics.EventLogInstaller.Install%2A>メソッド</xref:System.Diagnostics.EventLogInstaller.Install%2A>。 ロールバックは、インストールのプロジェクトの任意のコンポーネントのインストールが失敗した場合に呼び出されます。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>メソッドを作成またはイベント ログとイベント ソースのプロパティを設定します</xref:System.Diagnostics.EventLogInstaller.Install%2A>。 Rollback は、イベント ログとソースを削除するか、既存のソースのプロパティをインストール前の値にリセットします。       メソッドを呼び出すこと、通常は、<xref:System.Diagnostics.EventLogInstaller>から、コード内で一般的に呼び出されるだけで、 [Installutil.exe (インストーラー ツール)](~/add/includes/ajax-current-ext-md.md)</xref:System.Diagnostics.EventLogInstaller> 。 このツールは、インストールする、インストール プロセスが既に行った変更を取り消すには、同じまたは別のコンポーネントが失敗したときに、ロールバック メソッドを呼び出します。       アプリケーションのインストールに使用してプロジェクト インストーラーの<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>プロパティが既にインストールされているコンポーネントに関する情報を自動的に維持します</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>。 この状態情報、としてロールバックに渡される、`savedState`パラメーターでは継続的にツールが各<xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller>をロールバックするときに更新 通常、コードのこの状態情報を明示的に変更する必要はありません。"
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>コンピューターのインストール前の状態を格納している</xref:System.Collections.IDictionary>。"
  overload: System.Diagnostics.EventLogInstaller.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Source
  id: Source
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Source
  nameWithType: EventLogInstaller.Source
  fullName: System.Diagnostics.EventLogInstaller.Source
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "取得またはソースの名前をログに登録を設定します。"
  remarks: "イベント ソースは、イベントをログに記録新機能を示します。 通常は、アプリケーションの名前か、アプリケーションが大規模なコンポーネントの名前です。       インストーラーでは、基になるプロパティの値を使用して、有効なエントリのソースとしてイベント ログにアプリケーションを登録します。 新しいソース名には、既存のソース名または既存のイベント ログ名を一致ことはできません。 同時に、各ソースは&1; つのイベント ログに書き込むだけことができます。ただし、アプリケーションでは、複数のイベント ログに書き込むに複数のソースを使用することができます。 たとえば、アプリケーションでは、異なるイベント ログまたは別のリソース ファイル用に構成された複数のソースが必要です。       アプリケーションとサービスは、アプリケーション ログまたはカスタムのログに書き込む必要があります。 デバイス ドライバーは、システム ログに書き込む必要があります。 インストーラーを実行する前にログの名前を指定しない場合、インストーラーは、アプリケーション ログに、ソースを登録します。 存在しないログの名前を指定すると、システム ログには、ソースを登録しますが、まで、ログを作成しないことを最初のエントリが書き込まれます。       使用して<xref:System.Diagnostics.EventLogInstaller>を新規または既存のイベント ログ; 用に新しいソースを登録する使用しない<xref:System.Diagnostics.EventLogInstaller>を既存のソースを変更する</xref:System.Diagnostics.EventLogInstaller></xref:System.Diagnostics.EventLogInstaller>。 <xref:System.Diagnostics.EventLogInstaller>クラスは、指定したインストールのプロパティと一致する既存のソースの構成プロパティを変更しません</xref:System.Diagnostics.EventLogInstaller>。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>Source プロパティには、コンピューター上の別のイベント ログに対して登録されているソース名が一致する場合、メソッドが例外をスローします</xref:System.Diagnostics.EventLogInstaller.Install%2A>。 <xref:System.Diagnostics.EventLogInstaller.Install%2A>メソッドは、ソース プロパティで指定された同じイベント ログに対して既に登録されているソース名に一致する場合に、ソースを登録できません、<xref:System.Diagnostics.EventLogInstaller.Log%2A>プロパティ</xref:System.Diagnostics.EventLogInstaller.Log%2A></xref:System.Diagnostics.EventLogInstaller.Install%2A>。       詳細についてはイベント ログとソースの動作に関する情報を参照してください、<xref:System.Diagnostics.EventLog>クラスのドキュメント、<xref:System.Diagnostics.EventLog.Log%2A>と<xref:System.Diagnostics.EventLog.Source%2A>プロパティ</xref:System.Diagnostics.EventLog.Source%2A></xref:System.Diagnostics.EventLog.Log%2A></xref:System.Diagnostics.EventLog>。"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "イベント ログ エントリのソースとして登録する名前。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Diagnostics.EventLogInstaller.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  id: Uninstall(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Uninstall(IDictionary)
  nameWithType: EventLogInstaller.Uninstall(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Uninstall(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "イベント ログの情報をレジストリから削除して、インストールを削除します。"
  remarks: "場合、<xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A>プロパティの値が`Remove`アンインストール メソッドは、ソースを削除、および関連付けられたログイン場合に作成されたインストーラー、<xref:System.Diagnostics.EventLogInstaller.Log%2A>と<xref:System.Diagnostics.EventLogInstaller.Source%2A>プロパティは、新しいイベント ログとソースの作成を指定します</xref:System.Diagnostics.EventLogInstaller.Source%2A></xref:System.Diagnostics.EventLogInstaller.Log%2A></xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A>。       メソッドを呼び出すこと、通常は、<xref:System.Diagnostics.EventLogInstaller>から、コード内で一般的に呼び出されるだけで、 [Installutil.exe (インストーラー ツール)](~/add/includes/ajax-current-ext-md.md)アンインストール モードでします</xref:System.Diagnostics.EventLogInstaller>。 このツールは、自動的のインストールで、インストール前の状態に影響を受けた、システムの部分を復元するアンインストール メソッドを呼び出します。 これをアンインストールして、イベント ログに関連付けられているレジストリ情報の削除が含まれます。       アプリケーションのアンインストール ルーチン プロジェクト インストーラーの<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>既にアンインストールされているコンポーネントに関する情報を自動的に維持するためにプロパティ</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>。 この状態情報、としてアンインストールに渡される、`savedState`ツール各<xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller>をアンインストールすると、パラメーターは継続的に更新 通常、コードのこの状態情報を明示的に変更する必要はありません。"
  syntax:
    content: public override void Uninstall (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>コンピューターのインストール前の状態を格納している</xref:System.Collections.IDictionary>。"
  overload: System.Diagnostics.EventLogInstaller.Uninstall*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.UninstallAction
  id: UninstallAction
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
  fullName: System.Diagnostics.EventLogInstaller.UninstallAction
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "取得またはを示す値を設定するかどうか、 [Installutil.exe (インストーラー ツール)](~/add/includes/ajax-current-ext-md.md)でインストールされている状態でアンインストールするときのままにして、イベント ログを削除する必要があります。"
  remarks: "イベント ログをインストールするときに必要に応じて、既存のログに接続することができます。 その場合は、ログが、インストール前の状態に戻る必要があるかどうか、または、現在のインストール後の状態のままかどうかを決定する必要があります。 インストール前の状態には、イベント ログを返すように選択した場合、インストール時にイベント ログ エントリへの変更は復元されません。 関連付けられているイベント ログのプロパティのみをリセットすることができます、<xref:System.Diagnostics.EventLogInstaller>インストール前の値にします</xref:System.Diagnostics.EventLogInstaller>。"
  syntax:
    content: public System.Configuration.Install.UninstallAction UninstallAction { get; set; }
    return:
      type: System.Configuration.Install.UninstallAction
      description: "1 つ、 <xref href=&quot;System.Configuration.Install.UninstallAction&quot;> </xref>した場合に、イベント ログのままにする状態を示す値、 <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>をアンインストールします。 既定値は<xref uid=&quot;langword_csharp_Remove&quot; name=&quot;Remove&quot; href=&quot;&quot;></xref>です。"
  overload: System.Diagnostics.EventLogInstaller.UninstallAction*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "UninstallAction には、無効な値が含まれています。 このプロパティの唯一の有効な値は<xref uid=&quot;langword_csharp_Remove&quot; name=&quot;Remove&quot; href=&quot;&quot;></xref>と<xref uid=&quot;langword_csharp_NoAction&quot; name=&quot;NoAction&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Diagnostics.EventLogInstaller.#ctor
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: EventLogInstaller()
  nameWithType: EventLogInstaller.EventLogInstaller()
  fullName: System.Diagnostics.EventLogInstaller.EventLogInstaller()
- uid: System.Diagnostics.EventLogInstaller.CategoryCount
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
  fullName: System.Diagnostics.EventLogInstaller.CategoryCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
  fullName: System.Diagnostics.EventLogInstaller.CategoryResourceFile
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: EventLogInstaller.CopyFromComponent(IComponent)
  fullName: System.Diagnostics.EventLogInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: EventLogInstaller.Install(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogInstaller.Log
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Log
  nameWithType: EventLogInstaller.Log
  fullName: System.Diagnostics.EventLogInstaller.Log
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
  fullName: System.Diagnostics.EventLogInstaller.MessageResourceFile
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
  fullName: System.Diagnostics.EventLogInstaller.ParameterResourceFile
- uid: System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: EventLogInstaller.Rollback(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Rollback(IDictionary)
- uid: System.Diagnostics.EventLogInstaller.Source
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Source
  nameWithType: EventLogInstaller.Source
  fullName: System.Diagnostics.EventLogInstaller.Source
- uid: System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Uninstall(IDictionary)
  nameWithType: EventLogInstaller.Uninstall(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Uninstall(IDictionary)
- uid: System.Diagnostics.EventLogInstaller.UninstallAction
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
  fullName: System.Diagnostics.EventLogInstaller.UninstallAction
- uid: System.Configuration.Install.UninstallAction
  parent: System.Configuration.Install
  isExternal: false
  name: UninstallAction
  nameWithType: UninstallAction
  fullName: System.Configuration.Install.UninstallAction
- uid: System.Diagnostics.EventLogInstaller.#ctor*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: EventLogInstaller
  nameWithType: EventLogInstaller.EventLogInstaller
- uid: System.Diagnostics.EventLogInstaller.CategoryCount*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: EventLogInstaller.CopyFromComponent
- uid: System.Diagnostics.EventLogInstaller.Install*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Install
  nameWithType: EventLogInstaller.Install
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: IsEquivalentInstaller
  nameWithType: EventLogInstaller.IsEquivalentInstaller
- uid: System.Diagnostics.EventLogInstaller.Log*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Log
  nameWithType: EventLogInstaller.Log
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
- uid: System.Diagnostics.EventLogInstaller.Rollback*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Rollback
  nameWithType: EventLogInstaller.Rollback
- uid: System.Diagnostics.EventLogInstaller.Source*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Source
  nameWithType: EventLogInstaller.Source
- uid: System.Diagnostics.EventLogInstaller.Uninstall*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Uninstall
  nameWithType: EventLogInstaller.Uninstall
- uid: System.Diagnostics.EventLogInstaller.UninstallAction*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
