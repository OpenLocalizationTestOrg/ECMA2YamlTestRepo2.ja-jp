### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ICryptoTransform
  id: ICryptoTransform
  children:
  - System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  - System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  - System.Security.Cryptography.ICryptoTransform.InputBlockSize
  - System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  - System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
  type: Interface
  summary: "暗号変換の基本的な操作を定義します。"
  remarks: "ハッシュ アルゴリズムは、暗号変換の例 (<xref:System.Security.Cryptography.HashAlgorithm>).</xref:System.Security.Cryptography.HashAlgorithm>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ICryptoTransform : IDisposable
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: ICryptoTransform.CanReuseTransform
  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在の変換を再利用できるかどうかを示す値を取得します。"
  syntax:
    content: public bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、現在の変換を再利用できます。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.ICryptoTransform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: ICryptoTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "複数のブロックを変換できるかどうかを示す値を取得します。"
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>複数のブロックを変換できる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: ICryptoTransform.InputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "入力ブロック サイズを取得します。"
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "入力データのサイズ (バイト単位) をブロックします。"
  overload: System.Security.Cryptography.ICryptoTransform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: ICryptoTransform.OutputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "出力ブロック サイズを取得します。"
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "出力データ ブロックのサイズ (バイト単位)。"
  overload: System.Security.Cryptography.ICryptoTransform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "入力バイト配列の指定した領域に変換され、変換された結果を出力バイト配列の指定した領域にコピーされます。"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "トランス フォームを計算する対象の入力です。"
    - id: inputOffset
      type: System.Int32
      description: "データの使用を開始位置を示す入力バイト配列へのオフセット。"
    - id: inputCount
      type: System.Int32
      description: "データとして使用する入力バイト配列内のバイト数。"
    - id: outputBuffer
      type: System.Byte[]
      description: "変換の書き込み先の出力。"
    - id: outputOffset
      type: System.Int32
      description: "データの書き込み開始位置を示す出力バイト配列へのオフセット。"
    return:
      type: System.Int32
      description: "書き込まれたバイト数。"
  overload: System.Security.Cryptography.ICryptoTransform.TransformBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したバイト配列の指定した領域に変換します。"
  remarks: "TransformFinalBlock は、最後のブロックまたはストリームに部分的なブロックを変換するための特別な機能です。 変換後の残りのバイトを格納する新しい配列を返します。 パディングが追加されたときに、最後に返される情報量が&1; つのブロックを超える可能性があるため、新しい配列が返されます。"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "トランス フォームを計算する対象の入力です。"
    - id: inputOffset
      type: System.Int32
      description: "データの使用を開始するバイト配列へのオフセット。"
    - id: inputCount
      type: System.Int32
      description: "データとして使用するバイト配列内のバイト数。"
    return:
      type: System.Byte[]
      description: "計算された変換します。"
  overload: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: ICryptoTransform.CanReuseTransform
  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: ICryptoTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: ICryptoTransform.InputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: ICryptoTransform.OutputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: ICryptoTransform.CanReuseTransform
- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: ICryptoTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: ICryptoTransform.InputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: ICryptoTransform.OutputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformBlock
  nameWithType: ICryptoTransform.TransformBlock
- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: ICryptoTransform.TransformFinalBlock
