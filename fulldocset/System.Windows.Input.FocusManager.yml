### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.FocusManager
  id: FocusManager
  children:
  - System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.FocusedElementProperty
  - System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GotFocusEvent
  - System.Windows.Input.FocusManager.IsFocusScopeProperty
  - System.Windows.Input.FocusManager.LostFocusEvent
  - System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  - System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  langs:
  - csharp
  name: FocusManager
  nameWithType: FocusManager
  fullName: System.Windows.Input.FocusManager
  type: Class
  summary: "確認し、フォーカスのスコープを設定し、スコープ内でフォーカスがある要素を設定するために、静的メソッド、アタッチされるプロパティ、およびイベントのセットを提供します。"
  remarks: "[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]フォーカスに関して&2; つの概念があります。 キーボード フォーカスと論理フォーカスします。       キーボード フォーカスはキーボード入力を受け取っては現在の要素に関連します。  キーボード フォーカスを持つ&1; つだけの要素があります。  この要素にキーボード フォーカスが<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>&quot;éý&quot; `true`</xref:System.Windows.IInputElement.IsKeyboardFocused%2A> 。  <xref:System.Windows.Input.Keyboard.FocusedElement%2A?displayProperty=fullName>キーボード フォーカスを持つ要素を返します。</xref:System.Windows.Input.Keyboard.FocusedElement%2A?displayProperty=fullName>       論理フォーカスは、<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>フォーカスの特定のスコープ内で</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>。       フォーカス範囲を追跡するコンテナー要素とは、<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>そのスコープ内で</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>。  既定では、<xref:System.Windows.Window>クラスは、フォーカスの範囲は、 <xref:System.Windows.Controls.Menu>、 <xref:System.Windows.Controls.ContextMenu>、および<xref:System.Windows.Controls.ToolBar>クラス</xref:System.Windows.Controls.ToolBar></xref:System.Windows.Controls.ContextMenu></xref:System.Windows.Controls.Menu></xref:System.Windows.Window>。  フォーカスの範囲である要素には<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>&quot;éý&quot; `true`</xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 。       論理フォーカスを持つ複数の要素がありますが、フォーカスを&1; つのスコープ内で論理フォーカスを持つ要素を&1; つしか存在できません。  論理フォーカスを持つ要素によって、キーボード フォーカスがあるとは限りませんが、キーボード フォーカスを持つ要素が論理フォーカスを持ちます。  フォーカスのスコープ内でフォーカスのスコープを定義することができます。  この場合、親フォーカス スコープおよびフォーカスの子スコープの両方<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>ことができます。       次のシナリオで、キーボード フォーカスと論理フォーカスが変更する方法を示しています、 [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] <xref:System.Windows.Window> <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.Menu> <xref:System.Windows.Controls.MenuItem>.</xref:System.Windows.Controls.MenuItem>が</xref:System.Windows.Controls.Menu></xref:System.Windows.Controls.TextBox></xref:System.Windows.Window>持つアプリケーション  キーボード フォーカスが変更されたとき、<xref:System.Windows.Controls.TextBox>を<xref:System.Windows.Controls.MenuItem>、<xref:System.Windows.Controls.TextBox>損失キーボード フォーカスの論理フォーカスは保持されます、<xref:System.Windows.Window>スコープに注目します</xref:System.Windows.Window></xref:System.Windows.Controls.TextBox></xref:System.Windows.Controls.MenuItem></xref:System.Windows.Controls.TextBox>。  <xref:System.Windows.Controls.MenuItem>がキーボード フォーカスを取得しの論理フォーカスを取得、<xref:System.Windows.Controls.Menu>スコープに注目します</xref:System.Windows.Controls.Menu></xref:System.Windows.Controls.MenuItem>。  ルート<xref:System.Windows.Window>、<xref:System.Windows.Window>論理フォーカスとスコープにフォーカスが<xref:System.Windows.Controls.TextBox>。</xref:System.Windows.Controls.TextBox>この例では、キーボード フォーカスを取得する</xref:System.Windows.Window>内の要素</xref:System.Windows.Window>にキーボード フォーカスを返す場合  <xref:System.Windows.Controls.TextBox>キーボード フォーカスと論理フォーカスようになりました</xref:System.Windows.Controls.TextBox>。  <xref:System.Windows.Controls.MenuItem>がキーボード フォーカスを失ったがの論理フォーカスを保持、<xref:System.Windows.Controls.Menu>スコープに注目します</xref:System.Windows.Controls.Menu></xref:System.Windows.Controls.MenuItem>。       既定値<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>上、 <xref:System.Windows.Window>、 <xref:System.Windows.Controls.Menu>、 <xref:System.Windows.Controls.ToolBar>、および<xref:System.Windows.Controls.ContextMenu>は`true`</xref:System.Windows.Controls.ContextMenu></xref:System.Windows.Controls.ToolBar></xref:System.Windows.Controls.Menu></xref:System.Windows.Window></xref:System.Windows.Input.FocusManager.IsFocusScope%2A>。       フォーカスの詳細については、次を参照してください。、[入力概要](~/add/includes/ajax-current-ext-md.md)と[フォーカス概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static class FocusManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "ハンドラーを追加、<xref:System.Windows.Input.FocusManager.GotFocus>アタッチされるイベント</xref:System.Windows.Input.FocusManager.GotFocus>。"
  syntax:
    content: public static void AddGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>または<xref href=&quot;System.Windows.ContentElement&quot;></xref>このイベントをリッスンします。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "追加するイベント ハンドラー。"
  overload: System.Windows.Input.FocusManager.AddGotFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "ハンドラーを追加、<xref:System.Windows.Input.FocusManager.LostFocus>アタッチされるイベント</xref:System.Windows.Input.FocusManager.LostFocus>。"
  syntax:
    content: public static void AddLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>または<xref href=&quot;System.Windows.ContentElement&quot;></xref>このイベントをリッスンします。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "追加するイベント ハンドラー。"
  overload: System.Windows.Input.FocusManager.AddLostFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.FocusedElementProperty
  id: FocusedElementProperty
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: FocusedElementProperty
  nameWithType: FocusManager.FocusedElementProperty
  fullName: System.Windows.Input.FocusManager.FocusedElementProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別、<xref:System.Windows.Input.FocusManager.FocusedElement*>添付プロパティ</xref:System.Windows.Input.FocusManager.FocusedElement*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusedElementProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  id: GetFocusedElement(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetFocusedElement(DependencyObject)
  nameWithType: FocusManager.GetFocusedElement(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusedElement(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "指定したフォーカスのスコープ内で論理フォーカスを持つ要素を取得します。"
  remarks: "<xref:System.Windows.Input.FocusManager.FocusedElement%2A>フォーカス特定範囲の論理フォーカスを持つ要素</xref:System.Windows.Input.FocusManager.FocusedElement%2A>。  このオブジェクトは、キーボード フォーカスがない可能性があります。  キーボード フォーカスはキーボード入力を受け取る要素を指します。  フォーカス、キーボード フォーカス、および論理フォーカスの詳細については、次を参照してください。、[入力概要](~/add/includes/ajax-current-ext-md.md)です。       場合`element`はフォーカス スコープでは、このメソッドは`null`します。       使用して<xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>、指定したフォーカスのスコープ内で論理フォーカスを持つ要素を指定します</xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>。"
  example:
  - "The following example sets the element with logical focus by using the <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A> and it gets the element with logical focus by using the GetFocusedElement.  \n  \n [!code-cs[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focusgetsetfocusedelement)]\n [!code-vb[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focusgetsetfocusedelement)]"
  syntax:
    content: public static System.Windows.IInputElement GetFocusedElement (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "指定したフォーカスのスコープ内の論理フォーカスを持つ要素。"
    return:
      type: System.Windows.IInputElement
      description: "論理フォーカスを持つ指定したフォーカスのスコープ内の要素。"
  overload: System.Windows.Input.FocusManager.GetFocusedElement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  id: GetFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetFocusScope(DependencyObject)
  nameWithType: FocusManager.GetFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "指定した要素の最も近い先祖の決定<xref:System.Windows.Input.FocusManager.IsFocusScope*>&quot;éý&quot; <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref></xref:System.Windows.Input.FocusManager.IsFocusScope*> 。"
  remarks: "既定値の<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>上、 <xref:System.Windows.Window>、 <xref:System.Windows.Controls.Menu>、 <xref:System.Windows.Controls.ToolBar>、<xref:System.Windows.Controls.ContextMenu>は`true`</xref:System.Windows.Controls.ContextMenu></xref:System.Windows.Controls.ToolBar></xref:System.Windows.Controls.Menu></xref:System.Windows.Window></xref:System.Windows.Input.FocusManager.IsFocusScope%2A>。       フォーカス範囲を追跡するコンテナー要素とは、<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>そのスコープ内で</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>。  既定では、<xref:System.Windows.Window>クラスは、フォーカスの範囲は、 <xref:System.Windows.Controls.Menu>、 <xref:System.Windows.Controls.ContextMenu>、および<xref:System.Windows.Controls.ToolBar>クラス</xref:System.Windows.Controls.ToolBar></xref:System.Windows.Controls.ContextMenu></xref:System.Windows.Controls.Menu></xref:System.Windows.Window>。  フォーカスの範囲である要素には<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>&quot;éý&quot; `true`</xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 。       フォーカス、キーボード フォーカス、および論理フォーカスの詳細については、次を参照してください。、[入力概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static System.Windows.DependencyObject GetFocusScope (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "最も近いフォーカス スコープを取得する要素。"
    return:
      type: System.Windows.DependencyObject
      description: "指定した要素のフォーカス スコープです。"
  overload: System.Windows.Input.FocusManager.GetFocusScope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  id: GetIsFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetIsFocusScope(DependencyObject)
  nameWithType: FocusManager.GetIsFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetIsFocusScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "決定するかどうか、指定した<xref href=&quot;System.Windows.DependencyObject&quot;></xref>フォーカス スコープです。"
  remarks: "フォーカス範囲を追跡するコンテナー要素とは、<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>そのスコープ内で</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>。  既定では、<xref:System.Windows.Window>クラスは、フォーカスの範囲は、 <xref:System.Windows.Controls.Menu>、 <xref:System.Windows.Controls.ContextMenu>、および<xref:System.Windows.Controls.ToolBar>クラス</xref:System.Windows.Controls.ToolBar></xref:System.Windows.Controls.ContextMenu></xref:System.Windows.Controls.Menu></xref:System.Windows.Window>。  フォーカスの範囲である要素には<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>&quot;éý&quot; `true`</xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 。       フォーカス、キーボード フォーカス、および論理フォーカスの詳細については、次を参照してください。、[入力概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static bool GetIsFocusScope (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "添付プロパティの読み込み元の要素。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<xref:System.Windows.Input.FocusManager.IsFocusScope*>に設定されている<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定した要素ですそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Input.FocusManager.IsFocusScope*> 。"
  overload: System.Windows.Input.FocusManager.GetIsFocusScope*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: FocusManager.GotFocusEvent
  fullName: System.Windows.Input.FocusManager.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別、<xref:System.Windows.Input.FocusManager.GotFocus>アタッチされるイベント</xref:System.Windows.Input.FocusManager.GotFocus>。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.IsFocusScopeProperty
  id: IsFocusScopeProperty
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: IsFocusScopeProperty
  nameWithType: FocusManager.IsFocusScopeProperty
  fullName: System.Windows.Input.FocusManager.IsFocusScopeProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別、<xref:System.Windows.Input.FocusManager.IsFocusScope*>添付プロパティ</xref:System.Windows.Input.FocusManager.IsFocusScope*>。"
  remarks: "既定値の<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>上、 <xref:System.Windows.Window>、 <xref:System.Windows.Controls.Menu>、 <xref:System.Windows.Controls.ToolBar>、<xref:System.Windows.Controls.ContextMenu>は`true`</xref:System.Windows.Controls.ContextMenu></xref:System.Windows.Controls.ToolBar></xref:System.Windows.Controls.Menu></xref:System.Windows.Window></xref:System.Windows.Input.FocusManager.IsFocusScope%2A>。       フォーカス範囲を追跡するコンテナー要素とは、<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>そのスコープ内で</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>。  既定では、<xref:System.Windows.Window>クラスは、フォーカスの範囲は、 <xref:System.Windows.Controls.Menu>、 <xref:System.Windows.Controls.ContextMenu>、および<xref:System.Windows.Controls.ToolBar>クラス</xref:System.Windows.Controls.ToolBar></xref:System.Windows.Controls.ContextMenu></xref:System.Windows.Controls.Menu></xref:System.Windows.Window>。  フォーカスの範囲である要素には<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>&quot;éý&quot; `true`</xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 。       フォーカス、キーボード フォーカス、および論理フォーカスの詳細については、次を参照してください。、[入力概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusScopeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: FocusManager.LostFocusEvent
  fullName: System.Windows.Input.FocusManager.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別、<xref:System.Windows.Input.FocusManager.LostFocus>アタッチされるイベント</xref:System.Windows.Input.FocusManager.LostFocus>。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "ハンドラーを削除、<xref:System.Windows.Input.FocusManager.GotFocus>アタッチされるイベント</xref:System.Windows.Input.FocusManager.GotFocus>。"
  syntax:
    content: public static void RemoveGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>または<xref href=&quot;System.Windows.ContentElement&quot;></xref>このイベントをリッスンします。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "削除するイベント ハンドラー。"
  overload: System.Windows.Input.FocusManager.RemoveGotFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "ハンドラーを削除、<xref:System.Windows.Input.FocusManager.LostFocus>アタッチされるイベント</xref:System.Windows.Input.FocusManager.LostFocus>。"
  syntax:
    content: public static void RemoveLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>または<xref href=&quot;System.Windows.ContentElement&quot;></xref>このイベントをリッスンします。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "削除するイベント ハンドラー。"
  overload: System.Windows.Input.FocusManager.RemoveLostFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  id: SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: SetFocusedElement(DependencyObject,IInputElement)
  nameWithType: FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  fullName: System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "論理セットは、指定した要素に注目します。"
  remarks: "<xref:System.Windows.Input.FocusManager.FocusedElement%2A>フォーカス特定範囲の論理フォーカスを持つ要素</xref:System.Windows.Input.FocusManager.FocusedElement%2A>。  このオブジェクトは、キーボード フォーカスがない可能性があります。  キーボード フォーカスはキーボード入力を受け取る要素を指します。  フォーカス、キーボード フォーカス、および論理フォーカスの詳細については、次を参照してください。、[入力概要](~/add/includes/ajax-current-ext-md.md)です。       要素がフォーカス スコープの先祖であるフォーカス スコープを指定することができます。  たとえば場合、<xref:System.Windows.Controls.StackPanel>フォーカス スコープとその親は、<xref:System.Windows.Window>フォーカス範囲、<xref:System.Windows.Controls.TextBox>の子、<xref:System.Windows.Controls.StackPanel>を指定できます、 <xref:System.Windows.Window>SetFocusedElement を呼び出すときに、フォーカス スコープとして</xref:System.Windows.Window></xref:System.Windows.Controls.StackPanel></xref:System.Windows.Controls.TextBox></xref:System.Windows.Window></xref:System.Windows.Controls.StackPanel>。  <xref:System.Windows.Controls.TextBox>、<xref:System.Windows.Input.FocusManager.FocusedElement%2A>両方に対して、<xref:System.Windows.Window>スコープを集中と<xref:System.Windows.Controls.StackPanel>スコープを集中</xref:System.Windows.Controls.StackPanel></xref:System.Windows.Window></xref:System.Windows.Input.FocusManager.FocusedElement%2A></xref:System.Windows.Controls.TextBox>。       SetFocusedElement を使用して、指定したフォーカスの範囲で指定した要素の論理フォーカスになります、要素にキーボード フォーカスを試みます。"
  example:
  - "The following example sets the element with logical focus by using the SetFocusedElement and it gets the element with logical focus by using the <xref:System.Windows.Input.FocusManager.GetFocusedElement%2A>.  \n  \n [!code-cs[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focusgetsetfocusedelement)]\n [!code-vb[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focusgetsetfocusedelement)]"
  syntax:
    content: public static void SetFocusedElement (System.Windows.DependencyObject element, System.Windows.IInputElement value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "フォーカス スコープを指定した要素に<xref:System.Windows.Input.FocusManager.FocusedElement*>。</xref:System.Windows.Input.FocusManager.FocusedElement*>を行う"
    - id: value
      type: System.Windows.IInputElement
      description: "論理フォーカスを移動する要素。"
  overload: System.Windows.Input.FocusManager.SetFocusedElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  id: SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: SetIsFocusScope(DependencyObject,Boolean)
  nameWithType: FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  fullName: System.Windows.Input.FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "指定した設定<xref href=&quot;System.Windows.DependencyObject&quot;></xref>フォーカス スコープとします。"
  remarks: "フォーカス範囲を追跡するコンテナー要素とは、<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>そのスコープ内で</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>。  既定では、<xref:System.Windows.Window>クラスは、フォーカスの範囲は、 <xref:System.Windows.Controls.Menu>、 <xref:System.Windows.Controls.ContextMenu>、および<xref:System.Windows.Controls.ToolBar>クラス</xref:System.Windows.Controls.ToolBar></xref:System.Windows.Controls.ContextMenu></xref:System.Windows.Controls.Menu></xref:System.Windows.Window>。  フォーカスの範囲である要素には<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>&quot;éý&quot; `true`</xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 。       フォーカス、キーボード フォーカス、および論理フォーカスの詳細については、次を参照してください。、[入力概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The follow example makes an element a focus scope by using SetIsFocusScope.  \n  \n [!code-cs[focussnippets#FocusSetIsFocusScope](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focussetisfocusscope)]\n [!code-vb[focussnippets#FocusSetIsFocusScope](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focussetisfocusscope)]"
  syntax:
    content: public static void SetIsFocusScope (System.Windows.DependencyObject element, bool value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "フォーカスのスコープを作成する要素。"
    - id: value
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合`element`フォーカス範囲します。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Input.FocusManager.SetIsFocusScope*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.FocusedElementProperty
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: FocusedElementProperty
  nameWithType: FocusManager.FocusedElementProperty
  fullName: System.Windows.Input.FocusManager.FocusedElementProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusedElement(DependencyObject)
  nameWithType: FocusManager.GetFocusedElement(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusedElement(DependencyObject)
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusScope(DependencyObject)
  nameWithType: FocusManager.GetFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusScope(DependencyObject)
- uid: System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetIsFocusScope(DependencyObject)
  nameWithType: FocusManager.GetIsFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetIsFocusScope(DependencyObject)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.FocusManager.GotFocusEvent
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GotFocusEvent
  nameWithType: FocusManager.GotFocusEvent
  fullName: System.Windows.Input.FocusManager.GotFocusEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Input.FocusManager.IsFocusScopeProperty
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: IsFocusScopeProperty
  nameWithType: FocusManager.IsFocusScopeProperty
  fullName: System.Windows.Input.FocusManager.IsFocusScopeProperty
- uid: System.Windows.Input.FocusManager.LostFocusEvent
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: LostFocusEvent
  nameWithType: FocusManager.LostFocusEvent
  fullName: System.Windows.Input.FocusManager.LostFocusEvent
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetFocusedElement(DependencyObject,IInputElement)
  nameWithType: FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  fullName: System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject,IInputElement)
- uid: System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetIsFocusScope(DependencyObject,Boolean)
  nameWithType: FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  fullName: System.Windows.Input.FocusManager.SetIsFocusScope(DependencyObject,Boolean)
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddGotFocusHandler
  nameWithType: FocusManager.AddGotFocusHandler
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddLostFocusHandler
  nameWithType: FocusManager.AddLostFocusHandler
- uid: System.Windows.Input.FocusManager.GetFocusedElement*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusedElement
  nameWithType: FocusManager.GetFocusedElement
- uid: System.Windows.Input.FocusManager.GetFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusScope
  nameWithType: FocusManager.GetFocusScope
- uid: System.Windows.Input.FocusManager.GetIsFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetIsFocusScope
  nameWithType: FocusManager.GetIsFocusScope
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveGotFocusHandler
  nameWithType: FocusManager.RemoveGotFocusHandler
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveLostFocusHandler
  nameWithType: FocusManager.RemoveLostFocusHandler
- uid: System.Windows.Input.FocusManager.SetFocusedElement*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetFocusedElement
  nameWithType: FocusManager.SetFocusedElement
- uid: System.Windows.Input.FocusManager.SetIsFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetIsFocusScope
  nameWithType: FocusManager.SetIsFocusScope
