### YamlMime:ManagedReference
items:
- uid: System.Windows.VisualStateGroup
  id: VisualStateGroup
  children:
  - System.Windows.VisualStateGroup.#ctor
  - System.Windows.VisualStateGroup.CurrentState
  - System.Windows.VisualStateGroup.CurrentStateChanged
  - System.Windows.VisualStateGroup.CurrentStateChanging
  - System.Windows.VisualStateGroup.Name
  - System.Windows.VisualStateGroup.States
  - System.Windows.VisualStateGroup.Transitions
  langs:
  - csharp
  name: VisualStateGroup
  nameWithType: VisualStateGroup
  fullName: System.Windows.VisualStateGroup
  type: Class
  summary: "相互に排他的なが含まれています<xref href=&quot;System.Windows.VisualState&quot;></xref>オブジェクトおよび<xref href=&quot;System.Windows.VisualTransition&quot;> </xref>&1; つの状態間を移動するに使用されるオブジェクト。"
  remarks: "コレクションを格納する各 VisualStateGroup<xref:System.Windows.VisualState>オブジェクト</xref:System.Windows.VisualState>。 A<xref:System.Windows.VisualState>のコレクションを格納<xref:System.Windows.Media.Animation.Storyboard>コントロールが特定の状態のときに、コントロールの外観がどのように変化するかを指定するオブジェクト</xref:System.Windows.Media.Animation.Storyboard></xref:System.Windows.VisualState>。 たとえば、<xref:System.Windows.Controls.Button>が押されていない場合よりもそれが押されたとき、少し異なる外観を持つ可能性があります</xref:System.Windows.Controls.Button>。 2 つの状態を<xref:System.Windows.Controls.Button>定義が押されたときに対応 (`&quot;Pressed&quot;`)、されていないと (`&quot;Normal&quot;`).</xref:System.Windows.Controls.Button>       追加する<xref:System.Windows.VisualState>を設定して、コントロールを`VisualStateManager.VisualStateGroups`添付コントロールのプロパティ</xref:System.Windows.VisualState>。 同じ VisualStateGroup で互いに相互に排他的である状態を配置することです。 たとえば、 <xref:System.Windows.Controls.CheckBox>VisualStateGroup の&2; つのオブジェクトがある</xref:System.Windows.Controls.CheckBox>。 州を&1; つ含まれる`Normal`、 `MouseOver`、 `Pressed`、および`Disabled`です。 州を含む、他の`Checked`、 `UnChecked`、および`Indeterminate`です。 <xref:System.Windows.Controls.CheckBox>は状態になり`MouseOver`と`UnChecked`、同時にすることはできませんの`MouseOver`と`Pressed`同時に状態です</xref:System.Windows.Controls.CheckBox>。       <xref:System.Windows.VisualState>特に便利<xref:System.Windows.Controls.Control>。</xref:System.Windows.Controls.Control>の視覚的な動作を再定義可能にするには、任意の要素にオブジェクト</xref:System.Windows.VisualState>を追加できますが、 使用するカスタム コントロールを作成する場合、 <xref:System.Windows.Controls.ControlTemplate>、制御できることで追加することによって示すを指定することができます、<xref:System.Windows.TemplateVisualStateAttribute>にそのクラス定義</xref:System.Windows.TemplateVisualStateAttribute></xref:System.Windows.Controls.ControlTemplate>。 すべてのユーザーを作成、新しい<xref:System.Windows.Controls.ControlTemplate>コントロールを追加できるの<xref:System.Windows.VisualState>テンプレートにオブジェクト</xref:System.Windows.VisualState></xref:System.Windows.Controls.ControlTemplate>。 <xref:System.Windows.TemplateVisualStateAttribute>コントロールの状態を公開する、Expression Blend などのデザイナー ツールを有効にします</xref:System.Windows.TemplateVisualStateAttribute>。 状態を同じ<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName>同じ VisualStateGroup に属している</xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName>。       VisualStateGroup オブジェクトを使用する方法について、<xref:System.Windows.Controls.ControlTemplate>を参照してください[、ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](~/add/includes/ajax-current-ext-md.md)</xref:System.Windows.Controls.ControlTemplate>。 作成する方法の詳細についてはコントロールを使用する、<xref:System.Windows.VisualStateManager>を参照してください[を作成する、コントロールのある外観をカスタマイズできる](~/add/includes/ajax-current-ext-md.md)</xref:System.Windows.VisualStateManager>。       <xref:System.Windows.VisualStateGroup.Transitions%2A>プロパティが含まれます<xref:System.Windows.VisualTransition>、VisualStateGroup でコントロールの移行間という場合に適用されるオブジェクトが定義されています</xref:System.Windows.VisualTransition></xref:System.Windows.VisualStateGroup.Transitions%2A>。"
  example:
  - "The following example creates a simple <xref:System.Windows.Controls.ControlTemplate> for a <xref:System.Windows.Controls.Button> that contains one <xref:System.Windows.Controls.Grid>. It also contains a VisualStateGroup named `CommonStates`, which defines the `MouseOver` and `Normal` states. The VisualStateGroup also has a <xref:System.Windows.VisualTransition> that specifies that it takes one half second for the <xref:System.Windows.Controls.Grid> to change from green to red when the user moves the mouse pointer over the <xref:System.Windows.Controls.Button>.  \n  \n [!code-xml[VSMButtonTemplate#11](~/add/codesnippet/xaml/vsmbuttontemplate/window1.xaml#11)]"
  syntax:
    content: >-
      [System.Windows.Markup.ContentProperty("States")]

      [System.Windows.Markup.RuntimeNameProperty("Name")]

      public class VisualStateGroup : System.Windows.DependencyObject
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.VisualStateGroup.#ctor
  id: '#ctor'
  parent: System.Windows.VisualStateGroup
  langs:
  - csharp
  name: VisualStateGroup()
  nameWithType: VisualStateGroup.VisualStateGroup()
  fullName: System.Windows.VisualStateGroup.VisualStateGroup()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.VisualStateGroup&quot;> </xref>クラスです。"
  syntax:
    content: public VisualStateGroup ();
    parameters: []
  overload: System.Windows.VisualStateGroup.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.VisualStateGroup.CurrentState
  id: CurrentState
  parent: System.Windows.VisualStateGroup
  langs:
  - csharp
  name: CurrentState
  nameWithType: VisualStateGroup.CurrentState
  fullName: System.Windows.VisualStateGroup.CurrentState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得、 <xref href=&quot;System.Windows.VisualState&quot;> </xref>コントロールに現在適用されています。"
  syntax:
    content: public System.Windows.VisualState CurrentState { get; }
    return:
      type: System.Windows.VisualState
      description: "<xref href=&quot;System.Windows.VisualState&quot;> </xref>コントロールに現在適用されています。"
  overload: System.Windows.VisualStateGroup.CurrentState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.VisualStateGroup.CurrentStateChanged
  id: CurrentStateChanged
  parent: System.Windows.VisualStateGroup
  langs:
  - csharp
  name: CurrentStateChanged
  nameWithType: VisualStateGroup.CurrentStateChanged
  fullName: System.Windows.VisualStateGroup.CurrentStateChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "コントロールが別の状態に遷移した後に発生します。"
  remarks: "このイベントは、コントロール、新規の状態に遷移した後に発生し、<xref:System.Windows.VisualStateGroup.CurrentStateChanging>イベントが発生します</xref:System.Windows.VisualStateGroup.CurrentStateChanging>。"
  syntax:
    content: public event EventHandler<System.Windows.VisualStateChangedEventArgs> CurrentStateChanged;
    return:
      type: System.EventHandler{System.Windows.VisualStateChangedEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.VisualStateGroup.CurrentStateChanging
  id: CurrentStateChanging
  parent: System.Windows.VisualStateGroup
  langs:
  - csharp
  name: CurrentStateChanging
  nameWithType: VisualStateGroup.CurrentStateChanging
  fullName: System.Windows.VisualStateGroup.CurrentStateChanging
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "別の状態に遷移するコントロールの開始時に発生します。"
  remarks: "コントロールが状態の遷移を開始すると、イベントが発生します。 場合、<xref:System.Windows.VisualTransition>が適用される移行の開始時にこのイベントが発生の状態変更</xref:System.Windows.VisualTransition>。 場合、<xref:System.Windows.VisualTransition>が適用されず、このイベントが発生したコントロールがその前に、新しい状態に遷移した後、<xref:System.Windows.VisualStateGroup.CurrentStateChanged>イベント</xref:System.Windows.VisualStateGroup.CurrentStateChanged></xref:System.Windows.VisualTransition>。"
  syntax:
    content: public event EventHandler<System.Windows.VisualStateChangedEventArgs> CurrentStateChanging;
    return:
      type: System.EventHandler{System.Windows.VisualStateChangedEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.VisualStateGroup.Name
  id: Name
  parent: System.Windows.VisualStateGroup
  langs:
  - csharp
  name: Name
  nameWithType: VisualStateGroup.Name
  fullName: System.Windows.VisualStateGroup.Name
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または設定の名前、 <xref href=&quot;System.Windows.VisualStateGroup&quot;></xref>です。"
  remarks: "コントロールの作成者を指定する状態コントロールがで追加することによって、<xref:System.Windows.TemplateVisualStateAttribute>にそのクラス定義</xref:System.Windows.TemplateVisualStateAttribute>。 状態を<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName>同じ<xref:System.Windows.VisualStateGroup>。</xref:System.Windows.VisualStateGroup>属する</xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName>同じ 名前を設定、<xref:System.Windows.VisualStateGroup>の値に、<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName>プロパティ</xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName></xref:System.Windows.VisualStateGroup>。"
  example:
  - "The following example creates two <xref:System.Windows.VisualStateGroup> objects that are named `CommonStates` and `FocusStates`. The control will be in exactly one state from each <xref:System.Windows.VisualStateGroup> at all times. For the entire example, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[VSMButtonTemplate#5](~/add/codesnippet/xaml/vsmbuttontemplate/skinnedbutton.xaml#5)]"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "名前、 <xref href=&quot;System.Windows.VisualStateGroup&quot;></xref>です。"
  overload: System.Windows.VisualStateGroup.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.VisualStateGroup.States
  id: States
  parent: System.Windows.VisualStateGroup
  langs:
  - csharp
  name: States
  nameWithType: VisualStateGroup.States
  fullName: System.Windows.VisualStateGroup.States
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "相互に排他的のコレクションを取得<xref href=&quot;System.Windows.VisualState&quot;></xref>オブジェクト。"
  remarks: ''
  example:
  - "The following example creates a simple <xref:System.Windows.Controls.ControlTemplate> for a <xref:System.Windows.Controls.Button> that contains one <xref:System.Windows.Controls.Grid>. It also contains a <xref:System.Windows.VisualStateGroup> named `CommonStates`, which defines the `MouseOver` and `Normal` states. The <xref:System.Windows.VisualStateGroup> also has a <xref:System.Windows.VisualTransition> that specifies that it takes one half second for the <xref:System.Windows.Controls.Grid> to change from green to red when the user moves the mouse pointer over the <xref:System.Windows.Controls.Button>.  \n  \n [!code-xml[VSMButtonTemplate#11](~/add/codesnippet/xaml/vsmbuttontemplate/window1.xaml#11)]"
  syntax:
    content: public System.Collections.IList States { get; }
    return:
      type: System.Collections.IList
      description: "一連の相互に排他的な<xref href=&quot;System.Windows.VisualState&quot;></xref>オブジェクト。"
  overload: System.Windows.VisualStateGroup.States*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.VisualStateGroup.Transitions
  id: Transitions
  parent: System.Windows.VisualStateGroup
  langs:
  - csharp
  name: Transitions
  nameWithType: VisualStateGroup.Transitions
  fullName: System.Windows.VisualStateGroup.Transitions
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "コレクションを取得<xref href=&quot;System.Windows.VisualTransition&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Windows.VisualTransition>遷移内のオブジェクトがコントロールへの移行状態<xref:System.Windows.VisualStateGroup>。</xref:System.Windows.VisualStateGroup>で定義されているときに適用されます</xref:System.Windows.VisualTransition>"
  example:
  - "The following example creates a simple <xref:System.Windows.Controls.ControlTemplate> for a <xref:System.Windows.Controls.Button> that contains one <xref:System.Windows.Controls.Grid>. It also contains a <xref:System.Windows.VisualStateGroup> named `CommonStates`, which defines the `MouseOver` and `Normal` states. The <xref:System.Windows.VisualStateGroup> also has a <xref:System.Windows.VisualTransition> that specifies that it takes one half second for the <xref:System.Windows.Controls.Grid> to change from green to red when the user moves the mouse pointer over the <xref:System.Windows.Controls.Button>.  \n  \n [!code-xml[VSMButtonTemplate#11](~/add/codesnippet/xaml/vsmbuttontemplate/window1.xaml#11)]"
  syntax:
    content: public System.Collections.IList Transitions { get; }
    return:
      type: System.Collections.IList
      description: "コレクション<xref href=&quot;System.Windows.VisualTransition&quot;></xref>オブジェクト。"
  overload: System.Windows.VisualStateGroup.Transitions*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.DependencyObject
  isExternal: false
  name: System.Windows.DependencyObject
- uid: System.Windows.VisualStateGroup.#ctor
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: VisualStateGroup()
  nameWithType: VisualStateGroup.VisualStateGroup()
  fullName: System.Windows.VisualStateGroup.VisualStateGroup()
- uid: System.Windows.VisualStateGroup.CurrentState
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: CurrentState
  nameWithType: VisualStateGroup.CurrentState
  fullName: System.Windows.VisualStateGroup.CurrentState
- uid: System.Windows.VisualState
  parent: System.Windows
  isExternal: false
  name: VisualState
  nameWithType: VisualState
  fullName: System.Windows.VisualState
- uid: System.Windows.VisualStateGroup.CurrentStateChanged
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: CurrentStateChanged
  nameWithType: VisualStateGroup.CurrentStateChanged
  fullName: System.Windows.VisualStateGroup.CurrentStateChanged
- uid: System.EventHandler{System.Windows.VisualStateChangedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<VisualStateChangedEventArgs>
  nameWithType: EventHandler<VisualStateChangedEventArgs>
  fullName: System.EventHandler<System.Windows.VisualStateChangedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.VisualStateChangedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.VisualStateChangedEventArgs
    name: VisualStateChangedEventArgs
    nameWithType: VisualStateChangedEventArgs
    fullName: VisualStateChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.VisualStateGroup.CurrentStateChanging
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: CurrentStateChanging
  nameWithType: VisualStateGroup.CurrentStateChanging
  fullName: System.Windows.VisualStateGroup.CurrentStateChanging
- uid: System.Windows.VisualStateGroup.Name
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: Name
  nameWithType: VisualStateGroup.Name
  fullName: System.Windows.VisualStateGroup.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.VisualStateGroup.States
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: States
  nameWithType: VisualStateGroup.States
  fullName: System.Windows.VisualStateGroup.States
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Windows.VisualStateGroup.Transitions
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: Transitions
  nameWithType: VisualStateGroup.Transitions
  fullName: System.Windows.VisualStateGroup.Transitions
- uid: System.Windows.VisualStateGroup.#ctor*
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: VisualStateGroup
  nameWithType: VisualStateGroup.VisualStateGroup
- uid: System.Windows.VisualStateGroup.CurrentState*
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: CurrentState
  nameWithType: VisualStateGroup.CurrentState
- uid: System.Windows.VisualStateGroup.Name*
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: Name
  nameWithType: VisualStateGroup.Name
- uid: System.Windows.VisualStateGroup.States*
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: States
  nameWithType: VisualStateGroup.States
- uid: System.Windows.VisualStateGroup.Transitions*
  parent: System.Windows.VisualStateGroup
  isExternal: false
  name: Transitions
  nameWithType: VisualStateGroup.Transitions
