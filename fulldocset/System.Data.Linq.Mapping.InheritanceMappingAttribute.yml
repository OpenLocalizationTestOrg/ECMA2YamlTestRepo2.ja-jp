### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute
  id: InheritanceMappingAttribute
  children:
  - System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor
  - System.Data.Linq.Mapping.InheritanceMappingAttribute.Code
  - System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault
  - System.Data.Linq.Mapping.InheritanceMappingAttribute.Type
  langs:
  - csharp
  name: InheritanceMappingAttribute
  nameWithType: InheritanceMappingAttribute
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute
  type: Class
  summary: "継承階層内のマップ、[!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]アプリケーションです。"
  remarks: "InheritanceMappingAttribute がマップされているクラスごとに指定されたいずれかです。       継承階層をマップするときに、次に注意してください:-階層のすべてのクラスは、1 つのテーブルにマップする必要があります。      -継承階層の表は、階層の最上位にあるマップされた型で宣言されなければなりません。 最上位のクラスから派生したクラスでは、テーブルまたはマッピング属性を指定できません。      -階層では、インターフェイスを使用することができますが、[!INCLUDE[vbtecLinq](~/add/includes/vbteclinq-md.md)]マップしません。      -クラスをマップが、マップされたクラスのみに対してクエリを実行することができる場合は、階層内のクラスをスキップできます。       正しい結果の具体化の識別子コード値が一意であり、データベース内の値と一致する必要があります。 完全に一致しない (しても大文字と小文字) 識別子のコード値を持つ行を使用して、クラスをインスタンス化<xref:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault%2A>&quot;éý&quot; `true`</xref:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault%2A> 。"
  example:
  - "This example shows inheritance mapping for a hierarchy where the top, mapped class (`Shape`) is abstract.  \n  \n [!code-cs[System.Data.Linq.Mapping.InheritanceMappingAttribute#1](~/add/codesnippet/csharp/inherit/Program.cs#1)]\n [!code-vb[System.Data.Linq.Mapping.InheritanceMappingAttribute#1](~/add/codesnippet/visualbasic/inherit/Module1.vb#1)]  \n  \n The following example shows the inclusion of unmapped classes. You can put unmapped classes anywhere in the hierarchy.  \n  \n [!code-cs[System.Data.Linq.Mapping.InheritanceMappingAttribute#2](~/add/codesnippet/csharp/inherit/Program.cs#2)]\n [!code-vb[System.Data.Linq.Mapping.InheritanceMappingAttribute#2](~/add/codesnippet/visualbasic/inherit/Module1.vb#2)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=true, Inherited=false)]

      public sealed class InheritanceMappingAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor
  id: '#ctor'
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  langs:
  - csharp
  name: InheritanceMappingAttribute()
  nameWithType: InheritanceMappingAttribute.InheritanceMappingAttribute()
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.InheritanceMappingAttribute()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.Linq.Mapping.InheritanceMappingAttribute&quot;> </xref>クラスです。"
  syntax:
    content: public InheritanceMappingAttribute ();
    parameters: []
  overload: System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code
  id: Code
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  langs:
  - csharp
  name: Code
  nameWithType: InheritanceMappingAttribute.Code
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得またはマップされた継承階層の識別子のコード値を設定します。"
  syntax:
    content: public object Code { get; set; }
    return:
      type: System.Object
      description: "ユーザー指定である必要があります。 既定値はありません。"
  overload: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault
  id: IsDefault
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  langs:
  - csharp
  name: IsDefault
  nameWithType: InheritanceMappingAttribute.IsDefault
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得または識別子の値が、指定した値と一致しない場合にこの種類のオブジェクトをインスタンス化するかどうかを設定します。"
  remarks: "1 つだけ、<xref:System.Data.Linq.Mapping.InheritanceMappingAttribute>として IsDefault で属性を宣言する必要があります`true`</xref:System.Data.Linq.Mapping.InheritanceMappingAttribute>。"
  syntax:
    content: public bool IsDefault { get; set; }
    return:
      type: System.Boolean
      description: "Default = <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type
  id: Type
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  langs:
  - csharp
  name: Type
  nameWithType: InheritanceMappingAttribute.Type
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "取得または、階層内のクラスの型を設定します。"
  remarks: "ルート型を含む、継承階層内の任意の非抽象型を使用します。"
  syntax:
    content: public Type Type { get; set; }
    return:
      type: System.Type
      description: "ユーザー指定である必要があります。 既定値はありません。"
  overload: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: InheritanceMappingAttribute()
  nameWithType: InheritanceMappingAttribute.InheritanceMappingAttribute()
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.InheritanceMappingAttribute()
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: Code
  nameWithType: InheritanceMappingAttribute.Code
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: IsDefault
  nameWithType: InheritanceMappingAttribute.IsDefault
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: Type
  nameWithType: InheritanceMappingAttribute.Type
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor*
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: InheritanceMappingAttribute
  nameWithType: InheritanceMappingAttribute.InheritanceMappingAttribute
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code*
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: Code
  nameWithType: InheritanceMappingAttribute.Code
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault*
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: IsDefault
  nameWithType: InheritanceMappingAttribute.IsDefault
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type*
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: Type
  nameWithType: InheritanceMappingAttribute.Type
