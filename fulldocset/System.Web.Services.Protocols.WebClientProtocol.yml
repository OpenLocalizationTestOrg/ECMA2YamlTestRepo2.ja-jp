### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.WebClientProtocol
  id: WebClientProtocol
  children:
  - System.Web.Services.Protocols.WebClientProtocol.#ctor
  - System.Web.Services.Protocols.WebClientProtocol.Abort
  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  - System.Web.Services.Protocols.WebClientProtocol.Credentials
  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  - System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)
  - System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)
  - System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  - System.Web.Services.Protocols.WebClientProtocol.Timeout
  - System.Web.Services.Protocols.WebClientProtocol.Url
  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  langs:
  - csharp
  name: WebClientProtocol
  nameWithType: WebClientProtocol
  fullName: System.Web.Services.Protocols.WebClientProtocol
  type: Class
  summary: "ASP.NET を使用して作成されたすべての XML Web サービス クライアント プロキシの基本クラスを指定します。"
  remarks: "WebClientProtocol クラスのプロパティは、XML Web サービス要求と応答の送信に使用するトランスポートの動作を制御に使用されます。 このクラスにマップ<xref:System.Net.WebRequest>。</xref:System.Net.WebRequest>で検出されたプロパティのプロパティ 派生するクラスのインスタンス<xref:System.Net.WebRequest>など<xref:System.Net.HttpWebRequest>、ASP.NET を使用して作成された XML Web サービスのトランスポート メカニズムとして使用されます</xref:System.Net.HttpWebRequest></xref:System.Net.WebRequest>。       XML Web サービスと通信するためには、直接派生するプロキシ クラスを作成する必要があります。 または XML Web サービスの WebClientProtocol から直接を呼び出したいです。 プロキシ クラスを手動で作成するには、代わりに、Wsdl.exe ツールを使用して指定された XML Web サービスのサービスの説明のプロキシ クラスを作成することができます。 WebClientProtocol が、クライアント プロキシの基底クラスであるため、プロキシ クラスでそのプロパティが表示されます。 これらのプロパティは、基になるトランスポートの要求の動作を制御するために役立ちます。 インスタンスを使用して、<xref:System.Web.Services.Protocols.WebClientProtocol.Credentials%2A>呼び出し元のプロパティは、XML Web サービスを認証します</xref:System.Web.Services.Protocols.WebClientProtocol.Credentials%2A>。 WebClientProtocol プロパティの多くは、初期化に使用される、 <xref:System.Net.WebRequest>Web 要求を行うために使用されるオブジェクト</xref:System.Net.WebRequest>。"
  example:
  - "The following example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form sets proxy information and client credentials on the proxy class prior to calling the remote XML Web service method.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[Classic WebClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_0_1.aspx)]\n [!code-vb[Classic WebClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_0_1.aspx)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class WebClientProtocol : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: WebClientProtocol()
  nameWithType: WebClientProtocol.WebClientProtocol()
  fullName: System.Web.Services.Protocols.WebClientProtocol.WebClientProtocol()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.Services.Protocols.WebClientProtocol&quot;> </xref>クラスです。"
  remarks: ''
  example:
  - >-
    [!code-cs[System.Web.Services.Protocols.WebClientProtocol constructor#1](~/add/codesnippet/csharp/m-system.web.services.pr_11_1.cs)]
     [!code-cpp[System.Web.Services.Protocols.WebClientProtocol constructor#1](~/add/codesnippet/cpp/m-system.web.services.pr_11_1.cpp)]
     [!code-vb[System.Web.Services.Protocols.WebClientProtocol constructor#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_11_1.vb)]
  syntax:
    content: protected WebClientProtocol ();
    parameters: []
  overload: System.Web.Services.Protocols.WebClientProtocol.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.Abort
  id: Abort
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: Abort()
  nameWithType: WebClientProtocol.Abort()
  fullName: System.Web.Services.Protocols.WebClientProtocol.Abort()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "XML Web サービス メソッドへの要求を取り消します。"
  syntax:
    content: public virtual void Abort ();
    parameters: []
  overload: System.Web.Services.Protocols.WebClientProtocol.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  id: AddToCache(System.Type,System.Object)
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: AddToCache(Type,Object)
  nameWithType: WebClientProtocol.AddToCache(Type,Object)
  fullName: System.Web.Services.Protocols.WebClientProtocol.AddToCache(Type,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "クライアント プロトコル ハンドラーのインスタンスをキャッシュに追加します。"
  syntax:
    content: protected static void AddToCache (Type type, object value);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>クライアント プロトコル ハンドラー.. の</xref:System.Type>"
    - id: value
      type: System.Object
      description: "キャッシュに追加するクライアント プロトコル ハンドラー。"
  overload: System.Web.Services.Protocols.WebClientProtocol.AddToCache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  id: ConnectionGroupName
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: ConnectionGroupName
  nameWithType: WebClientProtocol.ConnectionGroupName
  fullName: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得または要求の接続グループの名前を設定します。"
  remarks: "ConnectionGroupName プロパティを使用すると、接続グループに要求を関連付けることができます。 詳細については、 <xref:System.Net.HttpWebRequest.ConnectionGroupName%2A>。</xref:System.Net.HttpWebRequest.ConnectionGroupName%2A>を参照してください。"
  syntax:
    content: public string ConnectionGroupName { get; set; }
    return:
      type: System.String
      description: "接続グループの名前です。 既定値は<xref:System.String>。</xref:System.String>"
  overload: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.Credentials
  id: Credentials
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: Credentials
  nameWithType: WebClientProtocol.Credentials
  fullName: System.Web.Services.Protocols.WebClientProtocol.Credentials
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得または XML Web サービス クライアントの認証のセキュリティ資格情報を設定します。"
  remarks: "使用する場合、`Credentials`プロパティ、XML Web サービス クライアントが実装するクラスをインスタンス化する必要があります<xref:System.Net.ICredentials>など<xref:System.Net.NetworkCredential>、クライアントの資格情報に固有の設定、認証メカニズムと</xref:System.Net.NetworkCredential></xref:System.Net.ICredentials>。 <xref:System.Net.NetworkCredential>、Basic を使用して認証資格情報を設定するクラスを使用できるダイジェスト、NTLM と Kerberos 認証のメカニズム</xref:System.Net.NetworkCredential>。       資格情報のプロパティを設定すると<xref:System.Net.CredentialCache.DefaultCredentials%2A?displayProperty=fullName>クライアントがサーバーの構成方法に応じて Kerberos または NTLM 認証を行う、サーバーとネゴシエートし、</xref:System.Net.CredentialCache.DefaultCredentials%2A?displayProperty=fullName> 。"
  example:
  - "The following example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form explicitly sets authentication credentials using the `Credentials` property. The user name, password and domain are passed into the constructor for the <xref:System.Net.NetworkCredential> class.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see.  \n  \n [!code-vb[Classic WebClientProtocol.Credentials Example#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_41_1.aspx)]\n [!code-cs[Classic WebClientProtocol.Credentials Example#1](~/add/codesnippet/csharp/p-system.web.services.pr_41_1.aspx)]"
  syntax:
    content: public System.Net.ICredentials Credentials { get; set; }
    return:
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>XML Web サービス クライアントの</xref:System.Net.ICredentials>。"
  overload: System.Web.Services.Protocols.WebClientProtocol.Credentials*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  id: GetFromCache(System.Type)
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: GetFromCache(Type)
  nameWithType: WebClientProtocol.GetFromCache(Type)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetFromCache(Type)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "クライアント プロトコル ハンドラーのインスタンスをキャッシュから取得します。"
  syntax:
    content: protected static object GetFromCache (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>のキャッシュから返されるクライアント プロトコル ハンドラー</xref:System.Type> 。"
    return:
      type: System.Object
      description: "キャッシュからのクライアント プロトコル ハンドラーのインスタンス。"
  overload: System.Web.Services.Protocols.WebClientProtocol.GetFromCache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)
  id: GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: GetWebRequest(Uri)
  nameWithType: WebClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(Uri)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "作成、 <xref:System.Net.WebRequest>、指定されたインスタンス<code> uri </code></xref:System.Net.WebRequest> 。 この保護されたメソッドは、新しいを取得するには、XML Web サービス クライアント インフラストラクチャによって<xref:System.Net.WebRequest>XML Web サービス要求を送信するトランスポート オブジェクト</xref:System.Net.WebRequest>。"
  remarks: "このメソッドをオーバーライドして、カスタマイズ、<xref:System.Net.WebRequest>オブジェクトの XML Web サービス要求が行われる前にします</xref:System.Net.WebRequest>。 たとえば、要求にカスタム ヘッダーを追加する可能性があります。"
  syntax:
    content: protected virtual System.Net.WebRequest GetWebRequest (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "<xref:System.Uri> <xref:System.Net.WebRequest>。</xref:System.Net.WebRequest>を作成するときに使用するには</xref:System.Uri>"
    return:
      type: System.Net.WebRequest
      description: "<xref:System.Net.WebRequest>インスタンス</xref:System.Net.WebRequest>。"
  overload: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <code>uri</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)
  id: GetWebResponse(System.Net.WebRequest)
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: GetWebResponse(WebRequest)
  nameWithType: WebClientProtocol.GetWebResponse(WebRequest)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "XML Web サービス メソッドへの同期要求から応答を返します。"
  syntax:
    content: protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request);
    parameters:
    - id: request
      type: System.Net.WebRequest
      description: "<xref:System.Net.WebRequest>からの応答を取得します</xref:System.Net.WebRequest>。"
    return:
      type: System.Net.WebResponse
      description: "同期要求から XML Web サービス メソッドへの応答。"
  overload: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse*
  exceptions:
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "場合<xref:System.Web.Services.Protocols.WebClientProtocol.Abort*>GetWebResponse を呼び出す前に呼び出されます</xref:System.Web.Services.Protocols.WebClientProtocol.Abort*>。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  id: GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: GetWebResponse(WebRequest,IAsyncResult)
  nameWithType: WebClientProtocol.GetWebResponse(WebRequest,IAsyncResult)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest,IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "XML Web サービス メソッドへの非同期要求から応答を返します。 このプロテクト メソッドが非同期の XML Web サービス要求から応答を取得するには、XML Web サービス クライアント インフラストラクチャによって呼び出されます。"
  syntax:
    content: protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request, IAsyncResult result);
    parameters:
    - id: request
      type: System.Net.WebRequest
      description: "<xref:System.Net.WebRequest>からの応答を取得します</xref:System.Net.WebRequest>。"
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>に渡す<xref:System.Net.HttpWebRequest.EndGetResponse*>応答が完了するとします</xref:System.Net.HttpWebRequest.EndGetResponse*></xref:System.IAsyncResult>。"
    return:
      type: System.Net.WebResponse
      description: "XML Web サービス メソッドへの非同期要求からの応答。"
  overload: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse*
  exceptions:
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "場合<> *> 呼び出しの前に呼び出される<> *> です。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  id: PreAuthenticate
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: PreAuthenticate
  nameWithType: WebClientProtocol.PreAuthenticate
  fullName: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得または事前認証が有効になっているかどうかを設定します。"
  remarks: "クライアントは、資格情報を使用せず、リソースを要求するときに、サーバーが要求され、どのような認証スキームをサポートしていることを示します。 クライアントの認証方式を選択し、適切な`WWW-authenticate`ヘッダー、サーバーにします。 PreAuthenticate が場合`true`、`WWW-authenticate`ヘッダーはすべての後続の要求と共に送信されます。       PreAuthenticate が場合`false`要求が最初にユーザーを認証しようとせず、XML Web サービス メソッドを作成します。 XML Web サービスは、匿名アクセスを許可している場合は、XML Web サービス メソッドが実行されます。 匿名アクセスが許可されていない場合、HTTP 401 リターン コードがクライアントに送信されます。 その応答として、<xref:System.Web.Services.Protocols.WebClientProtocol>クラスは、Web サーバーに認証の資格情報を返します</xref:System.Web.Services.Protocols.WebClientProtocol>。 クライアントが認証され、その後アクセスを承認する XML Web サービス、XML Web サービス メソッドが実行されます。それ以外の場合、クライアントには、アクセスが拒否されました。"
  syntax:
    content: public bool PreAuthenticate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>事前の要求を認証するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  id: RequestEncoding
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: RequestEncoding
  nameWithType: WebClientProtocol.RequestEncoding
  fullName: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "<xref:System.Text.Encoding>XML Web サービスへのクライアント要求を作成するために使用します</xref:System.Text.Encoding>。"
  remarks: "RequestEncoding は、要求メッセージのエンコードを決定します。 <xref:System.Net.WebRequest.ContentType%2A>の要求はで注釈を付けるエンコーディング値</xref:System.Net.WebRequest.ContentType%2A>。       派生するクラス<xref:System.Web.Services.Protocols.WebClientProtocol>など、特定のプロトコルのサポート<xref:System.Web.Services.Protocols.SoapHttpClientProtocol>は soap の特定のプロトコルのエンコーディングの要件に準拠するには、このプロパティを設定します</xref:System.Web.Services.Protocols.SoapHttpClientProtocol></xref:System.Web.Services.Protocols.WebClientProtocol>。 たとえば、<xref:System.Web.Services.Protocols.SoapHttpClientProtocol>を utf-8 に既定のエンコーディングを設定します</xref:System.Web.Services.Protocols.SoapHttpClientProtocol>。"
  example:
  - "The following example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form explicitly sets RequestEncoding to UTF-8.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[Classic WebClientProtocol.RequestEncoding Example#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_59_1.aspx)]\n [!code-cs[Classic WebClientProtocol.RequestEncoding Example#1](~/add/codesnippet/csharp/p-system.web.services.pr_59_1.aspx)]"
  syntax:
    content: public System.Text.Encoding RequestEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "クライアントの要求の文字エンコーディング。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、基になるトランスポートとプロトコルの既定のエンコーディングを使用します。"
  overload: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.Timeout
  id: Timeout
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: Timeout
  nameWithType: WebClientProtocol.Timeout
  fullName: System.Web.Services.Protocols.WebClientProtocol.Timeout
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "XML Web サービス クライアントがミリ秒単位で到着する XML Web サービス要求を同期への応答を待機する時間を示します。"
  remarks: "タイムアウト プロパティを設定<xref:System.Threading.Timeout.Infinite?displayProperty=fullName>要求にタイムアウトがないことを示します</xref:System.Threading.Timeout.Infinite?displayProperty=fullName>。 場合でも、XML Web サービス クライアントは、タイムアウトしないに Timeout プロパティを設定することができます、Web サーバーは、サーバー側で、要求がタイムアウトをでも生じることがします。"
  example:
  - "The following example sets the `Timeout` value to 15000 (15 seconds) for the synchronous call to the `Add` XML Web service method within the `Math` XML Web service.  \n  \n [!code-cs[Classic WebClientProtocol.Timeout Example#1](~/add/codesnippet/csharp/p-system.web.services.pr_35_1.cs)]\n [!code-cpp[Classic WebClientProtocol.Timeout Example#1](~/add/codesnippet/cpp/p-system.web.services.pr_35_1.cpp)]\n [!code-vb[Classic WebClientProtocol.Timeout Example#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_35_1.vb)]"
  syntax:
    content: public int Timeout { get; set; }
    return:
      type: System.Int32
      description: "タイムアウトを XML Web サービスへの同期呼び出し (ミリ秒)。 既定値は、100000 ミリ秒です。"
  overload: System.Web.Services.Protocols.WebClientProtocol.Timeout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.Url
  id: Url
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: Url
  nameWithType: WebClientProtocol.Url
  fullName: System.Web.Services.Protocols.WebClientProtocol.Url
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得または XML Web サービス クライアントの URL を要求する底を設定します。"
  remarks: "Wsdl.exe を使用して生成されたプロキシ クラスでは、使用するクライアントの既定の Url プロパティを設定します。 既定の Url は、プロキシ クラスの生成元となるサービスの説明内に見つかった場所の属性によって決定されます。       など、特定のプロトコルをサポートするクラスを派生<xref:System.Web.Services.Protocols.HttpGetClientProtocol>と<xref:System.Web.Services.Protocols.HttpPostClientProtocol>XML Web サービス要求を行うための Url に余分な情報を追加する場合があります</xref:System.Web.Services.Protocols.HttpPostClientProtocol></xref:System.Web.Services.Protocols.HttpGetClientProtocol>。       Url プロパティは、同じサービスの説明から生成されたプロキシ クラスを実装する任意の XML Web サービスへの参照を変更できます。"
  example:
  - "The following example changes the Url property for the `math` XML Web service to the Web server named `http:// www.contoso.com`.  \n  \n [!code-cs[Classic WebClientProtocol.Url Example#1](~/add/codesnippet/csharp/p-system.web.services.pr_49_1.cs)]\n [!code-vb[Classic WebClientProtocol.Url Example#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_49_1.vb)]\n [!code-cpp[Classic WebClientProtocol.Url Example#1](~/add/codesnippet/cpp/p-system.web.services.pr_49_1.cpp)]"
  syntax:
    content: public string Url { get; set; }
    return:
      type: System.String
      description: "XML Web サービス クライアントのベース URL を要求しています。 既定値は<xref:System.String>。</xref:System.String>"
  overload: System.Web.Services.Protocols.WebClientProtocol.Url*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Web.Services.Protocols.WebClientProtocol
  langs:
  - csharp
  name: UseDefaultCredentials
  nameWithType: WebClientProtocol.UseDefaultCredentials
  fullName: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得または設定するかどうかを示す値を設定、<xref:System.Web.Services.Protocols.WebClientProtocol.Credentials*>プロパティの値を&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A?displayProperty=fullName&gt;プロパティ</xref:System.Web.Services.Protocols.WebClientProtocol.Credentials*>。"
  syntax:
    content: public bool UseDefaultCredentials { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>値に資格情報のプロパティを設定するかどうか、 &lt;xref:System.Net.CredentialCache.DefaultCredentials%2A?displayProperty=fullName&gt;プロパティ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.Web.Services.Protocols.WebClientProtocol.#ctor
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: WebClientProtocol()
  nameWithType: WebClientProtocol.WebClientProtocol()
  fullName: System.Web.Services.Protocols.WebClientProtocol.WebClientProtocol()
- uid: System.Web.Services.Protocols.WebClientProtocol.Abort
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Abort()
  nameWithType: WebClientProtocol.Abort()
  fullName: System.Web.Services.Protocols.WebClientProtocol.Abort()
- uid: System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: AddToCache(Type,Object)
  nameWithType: WebClientProtocol.AddToCache(Type,Object)
  fullName: System.Web.Services.Protocols.WebClientProtocol.AddToCache(Type,Object)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: ConnectionGroupName
  nameWithType: WebClientProtocol.ConnectionGroupName
  fullName: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Services.Protocols.WebClientProtocol.Credentials
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Credentials
  nameWithType: WebClientProtocol.Credentials
  fullName: System.Web.Services.Protocols.WebClientProtocol.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetFromCache(Type)
  nameWithType: WebClientProtocol.GetFromCache(Type)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetFromCache(Type)
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetWebRequest(Uri)
  nameWithType: WebClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest(Uri)
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: true
  name: WebRequest
  nameWithType: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetWebResponse(WebRequest)
  nameWithType: WebClientProtocol.GetWebResponse(WebRequest)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest)
- uid: System.Net.WebResponse
  parent: System.Net
  isExternal: true
  name: WebResponse
  nameWithType: WebResponse
  fullName: System.Net.WebResponse
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetWebResponse(WebRequest,IAsyncResult)
  nameWithType: WebClientProtocol.GetWebResponse(WebRequest,IAsyncResult)
  fullName: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest,IAsyncResult)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: PreAuthenticate
  nameWithType: WebClientProtocol.PreAuthenticate
  fullName: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: RequestEncoding
  nameWithType: WebClientProtocol.RequestEncoding
  fullName: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Web.Services.Protocols.WebClientProtocol.Timeout
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Timeout
  nameWithType: WebClientProtocol.Timeout
  fullName: System.Web.Services.Protocols.WebClientProtocol.Timeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Services.Protocols.WebClientProtocol.Url
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Url
  nameWithType: WebClientProtocol.Url
  fullName: System.Web.Services.Protocols.WebClientProtocol.Url
- uid: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebClientProtocol.UseDefaultCredentials
  fullName: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
- uid: System.Web.Services.Protocols.WebClientProtocol.#ctor*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: WebClientProtocol
  nameWithType: WebClientProtocol.WebClientProtocol
- uid: System.Web.Services.Protocols.WebClientProtocol.Abort*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Abort
  nameWithType: WebClientProtocol.Abort
- uid: System.Web.Services.Protocols.WebClientProtocol.AddToCache*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: AddToCache
  nameWithType: WebClientProtocol.AddToCache
- uid: System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: ConnectionGroupName
  nameWithType: WebClientProtocol.ConnectionGroupName
- uid: System.Web.Services.Protocols.WebClientProtocol.Credentials*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Credentials
  nameWithType: WebClientProtocol.Credentials
- uid: System.Web.Services.Protocols.WebClientProtocol.GetFromCache*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetFromCache
  nameWithType: WebClientProtocol.GetFromCache
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebRequest*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetWebRequest
  nameWithType: WebClientProtocol.GetWebRequest
- uid: System.Web.Services.Protocols.WebClientProtocol.GetWebResponse*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: GetWebResponse
  nameWithType: WebClientProtocol.GetWebResponse
- uid: System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: PreAuthenticate
  nameWithType: WebClientProtocol.PreAuthenticate
- uid: System.Web.Services.Protocols.WebClientProtocol.RequestEncoding*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: RequestEncoding
  nameWithType: WebClientProtocol.RequestEncoding
- uid: System.Web.Services.Protocols.WebClientProtocol.Timeout*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Timeout
  nameWithType: WebClientProtocol.Timeout
- uid: System.Web.Services.Protocols.WebClientProtocol.Url*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: Url
  nameWithType: WebClientProtocol.Url
- uid: System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials*
  parent: System.Web.Services.Protocols.WebClientProtocol
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebClientProtocol.UseDefaultCredentials
