### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.FileIO.FileSystem
  id: FileSystem
  children:
  - Microsoft.VisualBasic.FileIO.FileSystem.#ctor
  - Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(System.String,System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory
  - Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.Drives
  - Microsoft.VisualBasic.FileIO.FileSystem.FileExists(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  - Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  - Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  - Microsoft.VisualBasic.FileIO.FileSystem.GetName(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName
  - Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  - Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.Int32[])
  - Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.String[])
  - Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)
  - Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean)
  - Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)
  - Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String,System.Text.Encoding)
  - Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(System.String,System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(System.String,System.String)
  - Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)
  - Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean)
  - Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)
  langs:
  - csharp
  name: FileSystem
  nameWithType: FileSystem
  fullName: Microsoft.VisualBasic.FileIO.FileSystem
  type: Class
  summary: "プロパティとドライブ、ファイル、およびディレクトリを操作するためのメソッドを提供します。"
  remarks: "次の表に、関連するタスクの例については、`My.Computer.FileSystem`オブジェクト。      |||  |-|-|  ||参照してください |  |テキスト ファイルから読み取る |[する方法: テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|  |区切られたテキスト ファイルからの読み取り |[する方法: コンマ区切りのテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |固定幅テキスト ファイルから読み取る |[する方法: 固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|  |複数の形式を持つテキスト ファイルから読み取る |[する方法: 複数の形式を持つテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |バイナリ ファイルから読み取る |[する方法: バイナリ ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|  |<xref:System.IO.StreamReader>を持つテキスト ファイルから読み取る |[方法: StreamReader を持つファイルからテキストを読み取る](~/add/includes/ajax-current-ext-md.md)|  |テキスト ファイルに書き込む |[する方法: テキスト ファイルを書き込む](~/add/includes/ajax-current-ext-md.md)|  |テキスト ファイルへの追加 |[する方法: テキスト ファイルに追記](~/add/includes/ajax-current-ext-md.md)|  |バイナリ ファイルへの書き込み |[する方法: バイナリ ファイルに書き込む](~/add/includes/ajax-current-ext-md.md)|  |テキスト ファイルに書き込み、**マイ ドキュメント**ディレクトリ |[方法: テキスト内のファイルを書き込む、My Documents ディレクトリ](~/add/includes/ajax-current-ext-md.md)|  |持つテキスト ファイルに書き込む、 `StreamWriter` |[する方法: StreamWriter を持つファイルに書き込むテキスト](~/add/includes/ajax-current-ext-md.md)|  |特定のパターンを持つファイルをコピー |[する方法: 特定のパターンを持つファイルをディレクトリにコピー](~/add/includes/ajax-current-ext-md.md)|  |同じディレクトリにファイルをコピー |[する方法: ファイルのコピーを同じディレクトリに作成](~/add/includes/ajax-current-ext-md.md)|  |別のディレクトリにファイルをコピー |[する方法: 別のディレクトリにファイルのコピーを作成する](~/add/includes/ajax-current-ext-md.md)|  |ファイルを作成 |[する方法: ファイルを作成する](~/add/includes/ajax-current-ext-md.md)|  |ファイルの削除 |[する方法: ファイルを削除](~/add/includes/ajax-current-ext-md.md)|  |特定のパターンを持つファイルを検索する |[する方法: 特定のパターンを持つファイルを検索する](~/add/includes/ajax-current-ext-md.md)|  |ファイルを移動 |[する方法: ファイルを移動](~/add/includes/ajax-current-ext-md.md)|  |ファイル名の変更 |[する方法: ファイル名を変更](~/add/includes/ajax-current-ext-md.md)|  |別のディレクトリにディレクトリをコピー |[する方法: ディレクトリを別のディレクトリにコピー](~/add/includes/ajax-current-ext-md.md)|  |ディレクトリを作成 |[する方法: ディレクトリを作成](~/add/includes/ajax-current-ext-md.md)|  |特定のパターンを持つサブディレクトリを検索する |[する方法: 特定のパターンを持つサブディレクトリを検索する](~/add/includes/ajax-current-ext-md.md)|  |ディレクトリ内のファイルのコレクションを取得する |[する方法: ディレクトリ内のファイルのコレクションを取得](~/add/includes/ajax-current-ext-md.md)|  |読み取り、**マイ ドキュメント**ディレクトリ |[方法: の内容を取得、My Documents ディレクトリ](~/add/includes/ajax-current-ext-md.md)|  |ファイル パスを解析 |[する方法: ファイル パスを解析](~/add/includes/ajax-current-ext-md.md)| </xref:System.IO.StreamReader>"
  example:
  - "This example checks to determine whether the folder `C:\\backup\\logs` exists and checks its properties.  \n  \n [!code-vb[VbVbcnMyFileSystem#23](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._1_1.vb)]"
  syntax:
    content: public class FileSystem
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: FileSystem()
  nameWithType: FileSystem.FileSystem()
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.FileSystem()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しいインスタンスを初期化、 <xref href=&quot;Microsoft.VisualBasic.FileIO.FileSystem&quot;> </xref>クラスです。"
  remarks: ''
  example:
  - '[Objects (Visual Basic)](~/add/includes/ajax-current-ext-md.md)'
  syntax:
    content: public FileSystem ();
    parameters: []
  overload: Microsoft.VisualBasic.FileIO.FileSystem.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(System.String,System.String)
  id: CombinePath(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CombinePath(String,String)
  nameWithType: FileSystem.CombinePath(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "2 つのパスを結合し、正しく書式設定されたパスを返します。"
  remarks: "このメソッドは、正しく書式設定されたパスを作成する余分なスラッシュ (/) 文字をトリムします。       次の表に、関連するタスクの例、`My.Computer.FileSystem.CombinePath`メソッドです。      |||  |-|-|  ||参照してください |  |ディレクトリ パスとファイル名を結合 |[する方法: Visual Basic でファイル パスの解析](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example combines a directory path and file name to create a properly formatted path.  \n  \n [!code-vb[VbRefFile#3](~/add/codesnippet/visualbasic/7e0ca449-b1a8-4acd-a607-_1.vb)]  \n  \n This example combines two paths to create a properly formatted path.  \n  \n [!code-vb[VbRefFile#4](~/add/codesnippet/visualbasic/7e0ca449-b1a8-4acd-a607-_2.vb)]  \n  \n This example returns `C:\\Dir1\\Dir2\\Dir4\\Dir5\\File.txt`."
  syntax:
    content: public static string CombinePath (string baseDirectory, string relativePath);
    parameters:
    - id: baseDirectory
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 最初のパスを結合します。"
    - id: relativePath
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 2 番目のパスを結合します。"
    return:
      type: System.String
      description: "指定したパスの組み合わせ。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CombinePath*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>baseDirectory</code>または<code>relativePath</code>パスが正しくありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String)
  id: CopyDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CopyDirectory(String,String)
  nameWithType: FileSystem.CopyDirectory(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリの内容を別のディレクトリにコピーします。"
  remarks: "このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリの新しい名前を指定できます。       ディレクトリ内のファイルをコピーするときに例外スローされる可能性が引き起こされる、特定のファイルでします。 このような例外がスローされると、それらに統合されます&1; つの例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>をファイルまたはディレクトリのパスは、キーであり、特定の例外メッセージが、対応する値に含まれている。</xref:System.Collections.IDictionary> 。 使用して`For…Each`エントリを列挙します。       次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッドです。      |||  |-|-|  ||参照してください |  |ディレクトリをコピー |[する方法: Visual Basic での別のディレクトリにディレクトリをコピー](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example copies the contents of directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  \n  \n [!code-vb[VbVbcnMyFileSystem#49](~/add/codesnippet/visualbasic/02942d01-133a-478f-ae50-_1.vb)]  \n  \n Replace `C:\\TestDirectory1` and `C:\\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it."
  syntax:
    content: public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "コピーされるディレクトリです。"
    - id: destinationDirectoryName
      type: System.String
      description: "ディレクトリの内容のコピー先となる場所です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationDirectoryName</code>または<code>sourceDirectoryName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ソース ディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ソース パスとターゲット パスは、同じです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は循環使用します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスにフォルダー名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "コピー先ファイルが存在しますが、アクセスできません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  id: CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CopyDirectory(String,String,UIOption)
  nameWithType: FileSystem.CopyDirectory(String,String,UIOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(String,String,UIOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリの内容を別のディレクトリにコピーします。"
  remarks: "このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリの新しい名前を指定できます。       ディレクトリ内のファイルをコピーするときに例外スローされる可能性が引き起こされる、特定のファイルでします。 このような例外がスローされると、それらに統合されます&1; つの例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>をファイルまたはディレクトリのパスは、キーであり、特定の例外メッセージが、対応する値に含まれている。</xref:System.Collections.IDictionary> 。 使用して`For…Each`エントリを列挙します。       次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッドです。      |||  |-|-|  ||参照してください |  |ディレクトリをコピー |[する方法: Visual Basic での別のディレクトリにディレクトリをコピー](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example copies the contents of directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  \n  \n [!code-vb[VbVbcnMyFileSystem#49](~/add/codesnippet/visualbasic/8f7d2df3-4266-47ac-8381-_1.vb)]  \n  \n Replace `C:\\TestDirectory1` and `C:\\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it."
  syntax:
    content: public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "コピーされるディレクトリです。"
    - id: destinationDirectoryName
      type: System.String
      description: "ディレクトリの内容のコピー先となる場所です。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうか。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationDirectoryName</code>または<code>sourceDirectoryName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ソース ディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ソース パスとターゲット パスは、同じです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は循環使用します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスにフォルダー名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "コピー先ファイルが存在しますが、アクセスできません。"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "<code>ShowUI</code>設定されている<xref uid=&quot;langword_csharp_UIOption.AllDialogs&quot; name=&quot;UIOption.AllDialogs&quot; href=&quot;&quot;></xref>と、ユーザーが、操作をキャンセルまたはディレクトリ内の&1; つまたは複数のファイルをコピーすることはできません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)
  id: CopyDirectory(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CopyDirectory(String,String,Boolean)
  nameWithType: FileSystem.CopyDirectory(String,String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(String,String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリの内容を別のディレクトリにコピーします。"
  remarks: "このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリの新しい名前を指定できます。       ディレクトリ内のファイルをコピーするときに例外スローされる可能性が引き起こされる中にマージ中に既存のファイルなど、特定のファイルで`overwrite`に設定されている`False`です。 このような例外がスローされると、それらに統合されます&1; つの例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>をファイルまたはディレクトリのパスは、キーであり、特定の例外メッセージが、対応する値に含まれている。</xref:System.Collections.IDictionary> 。 使用して`For…Each`エントリを列挙します。       次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッドです。      |||  |-|-|  ||参照してください |  |ディレクトリをコピー |[する方法: Visual Basic での別のディレクトリにディレクトリをコピー](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example copies the contents of directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  \n  \n [!code-vb[VbVbcnMyFileSystem#49](~/add/codesnippet/visualbasic/fdc93a8a-3025-4efd-8987-_1.vb)]  \n  \n Replace `C:\\TestDirectory1` and `C:\\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it."
  syntax:
    content: public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "コピーされるディレクトリです。"
    - id: destinationDirectoryName
      type: System.String
      description: "ディレクトリの内容のコピー先となる場所です。"
    - id: overwrite
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>既存のファイルを上書きするにはそれ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationDirectoryName</code>または<code>sourceDirectoryName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ソース ディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ソース パスとターゲット パスは、同じです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は循環使用します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスにフォルダー名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "コピー先ファイルが存在しますが、アクセスできません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CopyDirectory(String,String,UIOption,UICancelOption)
  nameWithType: FileSystem.CopyDirectory(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(String,String,UIOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリの内容を別のディレクトリにコピーします。"
  remarks: "このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリの新しい名前を指定できます。       ディレクトリ内のファイルをコピーするときに例外スローされる可能性が引き起こされる、特定のファイルでします。 このような例外がスローされると、それらに統合されます&1; つの例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>をファイルまたはディレクトリのパスは、キーであり、特定の例外メッセージが、対応する値に含まれている。</xref:System.Collections.IDictionary> 。 使用して`For…Each`エントリを列挙します。       次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッドです。      |||  |-|-|  ||参照してください |  |ディレクトリをコピー |[する方法: Visual Basic での別のディレクトリにディレクトリをコピー](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example copies the contents of directory `TestDirectory1` into `TestDirectory2`, overwriting existing files.  \n  \n [!code-vb[VbVbcnMyFileSystem#49](~/add/codesnippet/visualbasic/c0cf1625-22a4-46e5-a6cf-_1.vb)]  \n  \n Replace `C:\\TestDirectory1` and `C:\\TestDirectory2` with the path and name of the directory you wish to copy and the location to which you wish to copy it."
  syntax:
    content: public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "コピーされるディレクトリです。"
    - id: destinationDirectoryName
      type: System.String
      description: "ディレクトリの内容のコピー先となる場所です。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうか。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "どのくらいにする必要がありますを指定します、ユーザーがクリックした場合は実行**キャンセル**操作中にします。 既定値は<xref href=&quot;Microsoft.VisualBasic.FileIO.UICancelOption&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationDirectoryName</code>または<code>sourceDirectoryName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ソース ディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ソース パスとターゲット パスは、同じです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は循環使用します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスにフォルダー名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "コピー先ファイルが存在しますが、アクセスできません。"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "<code>ShowUI</code>設定されている<xref uid=&quot;langword_csharp_UIOption.AllDialogs&quot; name=&quot;UIOption.AllDialogs&quot; href=&quot;&quot;></xref>と、ユーザーが、操作をキャンセルまたはディレクトリ内の&1; つまたは複数のファイルをコピーすることはできません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)
  id: CopyFile(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CopyFile(String,String)
  nameWithType: FileSystem.CopyFile(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しい場所にファイルをコピーします。"
  remarks: "`CopyFile`Ace (アクセス制御エントリ) は保持されません。 新しく作成されたファイルは、作成されているディレクトリから既定の Ace を継承します。       次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッドです。      |||  |-|-|  ||参照してください |  |同じディレクトリにファイルをコピーします |。[する方法: Visual Basic でディレクトリにファイルのコピーを作成する](~/add/includes/ajax-current-ext-md.md)|  |別のディレクトリにファイルをコピーします |。[する方法: Visual Basic での別のディレクトリにファイルのコピーを作成します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  \n  \n [!code-vb[VbRefFile#15](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._216_1.vb)]  \n  \n Replace the file paths with the paths you want to use in your code.  \n  \n This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  \n  \n [!code-vb[VbRefFile#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._216_2.vb)]  \n  \n Replace the file paths with the paths you want to use in your code."
  syntax:
    content: public static void CopyFile (string sourceFileName, string destinationFileName);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "コピーするファイルです。"
    - id: destinationFileName
      type: System.String
      description: "ファイルのコピー先となる場所です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destinationFileName </code>パス情報が含まれています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code>または<code>sourceFileName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ソース ファイルは、正しくないか、存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "同じ名前のターゲット ディレクトリ内のファイルは、使用中です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可がありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  id: CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CopyFile(String,String,UIOption)
  nameWithType: FileSystem.CopyFile(String,String,UIOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(String,String,UIOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しい場所にファイルをコピーします。"
  remarks: "`CopyFile`Ace (アクセス制御エントリ) は保持されません。 新しく作成されたファイルは、作成されているディレクトリから既定の Ace を継承します。       次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッドです。      |||  |-|-|  ||参照してください |  |同じディレクトリにファイルをコピーします |。[する方法: Visual Basic でディレクトリにファイルのコピーを作成する](~/add/includes/ajax-current-ext-md.md)|  |別のディレクトリにファイルをコピーします |。[する方法: Visual Basic での別のディレクトリにファイルのコピーを作成します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  \n  \n [!code-vb[VbRefFile#15](~/add/codesnippet/visualbasic/10e9e45a-2651-4a04-992d-_1.vb)]  \n  \n Replace the file paths with the paths you want to use in your code.  \n  \n This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  \n  \n [!code-vb[VbRefFile#16](~/add/codesnippet/visualbasic/10e9e45a-2651-4a04-992d-_2.vb)]  \n  \n Replace the file paths with the paths you want to use in your code."
  syntax:
    content: public static void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "コピーするファイルです。"
    - id: destinationFileName
      type: System.String
      description: "ファイルのコピー先となる場所です。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうか。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destinationFileName </code>パス情報が含まれています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code>または<code>sourceFileName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ソース ファイルは、正しくないか、存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "変換先ファイルが存在し、 <code> overwrite </code>に設定されている<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可がありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,System.Boolean)
  id: CopyFile(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CopyFile(String,String,Boolean)
  nameWithType: FileSystem.CopyFile(String,String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(String,String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しい場所にファイルをコピーします。"
  remarks: "`CopyFile`Ace (アクセス制御エントリ) は保持されません。 新しく作成されたファイルは、作成されているディレクトリから既定の Ace を継承します。       次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッドです。      |||  |-|-|  ||参照してください |  |同じディレクトリにファイルをコピーします |。[する方法: Visual Basic でディレクトリにファイルのコピーを作成する](~/add/includes/ajax-current-ext-md.md)|  |別のディレクトリにファイルをコピーします |。[する方法: Visual Basic での別のディレクトリにファイルのコピーを作成します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  \n  \n [!code-vb[VbRefFile#15](~/add/codesnippet/visualbasic/a6a3d787-8022-457c-b6ec-_1.vb)]  \n  \n Replace the file paths with the paths you want to use in your code.  \n  \n This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  \n  \n [!code-vb[VbRefFile#16](~/add/codesnippet/visualbasic/a6a3d787-8022-457c-b6ec-_2.vb)]  \n  \n Replace the file paths with the paths you want to use in your code."
  syntax:
    content: public static void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "コピーするファイルです。"
    - id: destinationFileName
      type: System.String
      description: "ファイルのコピー先となる場所です。"
    - id: overwrite
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>既存のファイルを上書きする場合それ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destinationFileName </code>パス情報が含まれています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code>または<code>sourceFileName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ソース ファイルは、正しくないか、存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "変換先ファイルが存在し、 <code> overwrite </code>に設定されている<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可がありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CopyFile(String,String,UIOption,UICancelOption)
  nameWithType: FileSystem.CopyFile(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(String,String,UIOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "新しい場所にファイルをコピーします。"
  remarks: "`CopyFile`Ace (アクセス制御エントリ) は保持されません。 新しく作成されたファイルは、作成されているディレクトリから既定の Ace を継承します。       次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッドです。      |||  |-|-|  ||参照してください |  |同じディレクトリにファイルをコピーします |。[する方法: Visual Basic でディレクトリにファイルのコピーを作成する](~/add/includes/ajax-current-ext-md.md)|  |別のディレクトリにファイルをコピーします |。[する方法: Visual Basic での別のディレクトリにファイルのコピーを作成します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example copies the file `Test.txt` to the directory `TestFiles2` without overwriting existing files.  \n  \n [!code-vb[VbRefFile#15](~/add/codesnippet/visualbasic/6cd9502b-4283-47ba-b4e5-_1.vb)]  \n  \n Replace the file paths with the paths you want to use in your code.  \n  \n This example copies the file `Test.txt` to the directory `TestFiles2` and renames it `NewFile.txt`.  \n  \n [!code-vb[VbRefFile#16](~/add/codesnippet/visualbasic/6cd9502b-4283-47ba-b4e5-_2.vb)]  \n  \n Replace the file paths with the paths you want to use in your code."
  syntax:
    content: public static void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "コピーするファイルです。"
    - id: destinationFileName
      type: System.String
      description: "ファイルのコピー先となる場所です。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうか。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "どのくらいにする必要がありますを指定します、ユーザーがクリックした場合は実行**キャンセル**操作中にします。 既定値は<xref href=&quot;Microsoft.VisualBasic.FileIO.UICancelOption&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destinationFileName </code>パス情報が含まれています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code>または<code>sourceFileName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ソース ファイルは、正しくないか、存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "変換先ファイルが存在し、 <code> overwrite </code>に設定されている<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可がありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "<code>UICancelOption</code>設定されている<xref uid=&quot;langword_csharp_ThrowException&quot; name=&quot;ThrowException&quot; href=&quot;&quot;> </xref>、およびユーザーが操作の取り消しまたは未指定の I/O エラーが発生します。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)
  id: CreateDirectory(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CreateDirectory(String)
  nameWithType: FileSystem.CreateDirectory(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリを作成します。"
  remarks: "ディレクトリが既に存在する場合、例外はスローされません。       次の表に、関連するタスクの例、`My.Computer.FileSystem.CreateDirectory`メソッドです。      |||  |-|-|  ||参照してください |  |ディレクトリを作成 |[する方法: Visual Basic でディレクトリを作成します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example creates the directory, `NewDirectory`, in `C:\\Documents and Settings\\All Users\\Documents`.  \n  \n [!code-vb[VbVbcnMyFileSystem#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._120_1.vb)]"
  syntax:
    content: public static void CreateDirectory (string directory);
    parameters:
    - id: directory
      type: System.String
      description: "名前とディレクトリの場所。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ディレクトリ名が正しくありません。 たとえば、無効な文字が含まれていますかは、空白のみです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "ディレクトリ名が長すぎます。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ディレクトリ名は、コロン (:) だけです。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "作成するディレクトリの親ディレクトリは読み取り専用"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、ディレクトリを作成する権限がありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory
  id: CurrentDirectory
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: CurrentDirectory
  nameWithType: FileSystem.CurrentDirectory
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "取得または現在のディレクトリを設定します。"
  remarks: '`CurrentDirectory`システム全体の環境変数です。'
  example:
  - "This example returns the current directory and displays it in a message box.  \n  \n [!code-vb[VbVbcnMyFileSystem#18](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._62_1.vb)]  \n  \n This example sets the current directory to `C:\\TestDirectory`.  \n  \n [!code-vb[VbVbcnMyFileSystem#19](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._62_2.vb)]"
  syntax:
    content: public static string CurrentDirectory { get; set; }
    return:
      type: System.String
      description: "ファイル I/O 操作の現在のディレクトリ。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "パスが正しくありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)
  id: DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: DeleteDirectory(String,DeleteDirectoryOption)
  nameWithType: FileSystem.DeleteDirectory(String,DeleteDirectoryOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(String,DeleteDirectoryOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリを削除します。"
  remarks: ''
  example:
  - "The example deletes the directory `OldDirectory` only if it is empty.  \n  \n [!code-vb[VbVbcnMyFileSystem#56](~/add/codesnippet/visualbasic/37e2cb0d-2f7b-442f-bdee-_1.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents.  \n  \n [!code-vb[VbVbcnMyFileSystem#57](~/add/codesnippet/visualbasic/37e2cb0d-2f7b-442f-bdee-_2.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, asking the user to confirm the deletion, but does not send the contents to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#58](~/add/codesnippet/visualbasic/37e2cb0d-2f7b-442f-bdee-_3.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, sending them to the **Recycle Bin**, but does not show the progress of the operation.  \n  \n [!code-vb[VbVbcnMyFileSystem#59](~/add/codesnippet/visualbasic/37e2cb0d-2f7b-442f-bdee-_4.vb)]"
  syntax:
    content: public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);
    parameters:
    - id: directory
      type: System.String
      description: "削除するディレクトリ。"
    - id: onDirectoryNotEmpty
      type: Microsoft.VisualBasic.FileIO.DeleteDirectoryOption
      description: "削除するのには、ディレクトリには、ファイルまたはディレクトリが含まれている場合に実行する内容を指定します。 既定値は<xref uid=&quot;langword_csharp_DeleteDirectoryOption.DeleteAllContents&quot; name=&quot;DeleteDirectoryOption.DeleteAllContents&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "パスは、長さ&0; の文字列は、形式が正しくありません化か、空白のみが含まれています (ワイルドカード文字を含む) の無効な文字が含まれています。 パスでは、デバイス (で始まる\\\\ \\\\.\\\\)。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ディレクトリが存在しないか、ファイルは、します。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ディレクトリまたはサブディレクトリ内のファイルは、使用中です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ディレクトリ名には、コロン (:) が含まれています。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、必要なアクセス許可がありません。"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "ユーザーが操作をキャンセルまたはディレクトリを削除することはできません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  id: DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: DeleteDirectory(String,UIOption,RecycleOption)
  nameWithType: FileSystem.DeleteDirectory(String,UIOption,RecycleOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(String,UIOption,RecycleOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリを削除します。"
  remarks: "`showUI`と`recycle`ユーザーの Windows サービスなど、対話型ではないアプリケーションでは、パラメーターはサポートされていません。"
  example:
  - "The example deletes the directory `OldDirectory` only if it is empty.  \n  \n [!code-vb[VbVbcnMyFileSystem#56](~/add/codesnippet/visualbasic/774235a1-3e7f-4503-99ae-_1.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents.  \n  \n [!code-vb[VbVbcnMyFileSystem#57](~/add/codesnippet/visualbasic/774235a1-3e7f-4503-99ae-_2.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, asking the user to confirm the deletion, but does not send the contents to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#58](~/add/codesnippet/visualbasic/774235a1-3e7f-4503-99ae-_3.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, sending them to the **Recycle Bin**, but does not show the progress of the operation.  \n  \n [!code-vb[VbVbcnMyFileSystem#59](~/add/codesnippet/visualbasic/774235a1-3e7f-4503-99ae-_4.vb)]"
  syntax:
    content: public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);
    parameters:
    - id: directory
      type: System.String
      description: "削除するディレクトリ。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
    - id: recycle
      type: Microsoft.VisualBasic.FileIO.RecycleOption
      description: "削除されたファイルに送信されるかどうかを指定、**ごみ箱**です。 既定値は<xref uid=&quot;langword_csharp_RecycleOption.DeletePermanently&quot; name=&quot;RecycleOption.DeletePermanently&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "パスは、長さ&0; の文字列は、形式が正しくありません化か、空白のみが含まれています (ワイルドカード文字を含む) の無効な文字が含まれています。 パスでは、デバイス (で始まる\\\\ \\\\.\\\\)。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ディレクトリが存在しないか、ファイルは、します。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ディレクトリまたはサブディレクトリ内のファイルは、使用中です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ディレクトリ名には、コロン (:) が含まれています。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、必要なアクセス許可がありません。"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "ユーザーが操作をキャンセルまたはディレクトリを削除することはできません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
  nameWithType: FileSystem.DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリを削除します。"
  remarks: "`showUI`、 `recycle`、および`onUserCancel`パラメーターは、ユーザーの Windows サービスなど、対話型ではないアプリケーションでサポートされていません。"
  example:
  - "The example deletes the directory `OldDirectory` only if it is empty.  \n  \n [!code-vb[VbVbcnMyFileSystem#56](~/add/codesnippet/visualbasic/03b0278b-ea6f-4e00-928c-_1.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents.  \n  \n [!code-vb[VbVbcnMyFileSystem#57](~/add/codesnippet/visualbasic/03b0278b-ea6f-4e00-928c-_2.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, asking the user to confirm the deletion, but does not send the contents to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#58](~/add/codesnippet/visualbasic/03b0278b-ea6f-4e00-928c-_3.vb)]  \n  \n This example deletes the directory `OldDirectory` and all of its contents, sending them to the **Recycle Bin**, but does not show the progress of the operation.  \n  \n [!code-vb[VbVbcnMyFileSystem#59](~/add/codesnippet/visualbasic/03b0278b-ea6f-4e00-928c-_4.vb)]"
  syntax:
    content: public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: directory
      type: System.String
      description: "削除するディレクトリ。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
    - id: recycle
      type: Microsoft.VisualBasic.FileIO.RecycleOption
      description: "削除されたファイルに送信されるかどうかを指定、**ごみ箱**です。 既定値は<xref uid=&quot;langword_csharp_RecycleOption.DeletePermanently&quot; name=&quot;RecycleOption.DeletePermanently&quot; href=&quot;&quot;></xref>です。"
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "ユーザーがクリックした場合に例外をスローするかどうかを示す**キャンセル**です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "パスは、長さ&0; の文字列は、形式が正しくありません化か、空白のみが含まれています (ワイルドカード文字を含む) の無効な文字が含まれています。 パスでは、デバイス (で始まる\\\\ \\\\.\\\\)。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ディレクトリが存在しないか、ファイルは、します。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ディレクトリまたはサブディレクトリ内のファイルは、使用中です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ディレクトリ名には、コロン (:) が含まれています。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、必要なアクセス許可がありません。"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "ユーザーが操作をキャンセルまたはディレクトリを削除することはできません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String)
  id: DeleteFile(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: DeleteFile(String)
  nameWithType: FileSystem.DeleteFile(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ファイルを削除します。"
  remarks: "次の表に、関連するタスクの例、`My.Computer.FileSystem.DeleteFile`メソッドです。      |||  |-|-|  ||参照してください |  |ファイルを削除する |[する方法: Visual Basic でファイルを削除](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example deletes the file `Test.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#3](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._19_1.vb)]  \n  \n This example deletes the file `Test.txt` and allows the user to confirm that the file should be deleted.  \n  \n [!code-vb[VbVbcnMyFileSystem#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._19_2.vb)]  \n  \n This example deletes the file `Test.txt` and sends it to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._19_3.vb)]"
  syntax:
    content: public static void DeleteFile (string file);
    parameters:
    - id: file
      type: System.String
      description: "削除するファイルのパスと名前。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますここでファイルを指定する必要があります。 末尾にスラッシュをがデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルが使用されています。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーにファイルを削除するアクセス許可がないか、ファイルは読み取り専用です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  id: DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: DeleteFile(String,UIOption,RecycleOption)
  nameWithType: FileSystem.DeleteFile(String,UIOption,RecycleOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(String,UIOption,RecycleOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ファイルを削除します。"
  remarks: "`showUI`と`recycle`ユーザーの Windows サービスなど、対話型ではないアプリケーションでは、パラメーターはサポートされていません。       次の表に、関連するタスクの例、`My.Computer.FileSystem.DeleteFile`メソッドです。      |||  |-|-|  ||参照してください |  |ファイルを削除する |[する方法: Visual Basic でファイルを削除](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example deletes the file `Test.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#3](~/add/codesnippet/visualbasic/99989061-6d67-4b10-9ec4-_1.vb)]  \n  \n This example deletes the file `Test.txt` and allows the user to confirm that the file should be deleted.  \n  \n [!code-vb[VbVbcnMyFileSystem#4](~/add/codesnippet/visualbasic/99989061-6d67-4b10-9ec4-_2.vb)]  \n  \n This example deletes the file `Test.txt` and sends it to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#5](~/add/codesnippet/visualbasic/99989061-6d67-4b10-9ec4-_3.vb)]"
  syntax:
    content: public static void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);
    parameters:
    - id: file
      type: System.String
      description: "削除するファイルのパスと名前。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうか。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
    - id: recycle
      type: Microsoft.VisualBasic.FileIO.RecycleOption
      description: "削除されたファイルを送信するかどうか、**ごみ箱**です。 既定値は<xref uid=&quot;langword_csharp_RecycleOption.DeletePermanently&quot; name=&quot;RecycleOption.DeletePermanently&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますここでファイルを指定する必要があります。 末尾にスラッシュをがデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルが使用されています。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーにファイルを削除するアクセス許可がないか、ファイルは読み取り専用です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: DeleteFile(String,UIOption,RecycleOption,UICancelOption)
  nameWithType: FileSystem.DeleteFile(String,UIOption,RecycleOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(String,UIOption,RecycleOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ファイルを削除します。"
  remarks: "`showUI`、 `recycle`、および`onUserCancel`パラメーターは、ユーザーの Windows サービスなど、対話型ではないアプリケーションでサポートされていません。       次の表に、関連するタスクの例、`My.Computer.FileSystem.DeleteFile`メソッドです。      |||  |-|-|  ||参照してください |  |ファイルを削除する |[する方法: Visual Basic でファイルを削除](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example deletes the file `Test.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#3](~/add/codesnippet/visualbasic/cad1fd49-c6fe-4568-9bc0-_1.vb)]  \n  \n This example deletes the file `Test.txt` and allows the user to confirm that the file should be deleted.  \n  \n [!code-vb[VbVbcnMyFileSystem#4](~/add/codesnippet/visualbasic/cad1fd49-c6fe-4568-9bc0-_2.vb)]  \n  \n This example deletes the file `Test.txt` and sends it to the **Recycle Bin**.  \n  \n [!code-vb[VbVbcnMyFileSystem#5](~/add/codesnippet/visualbasic/cad1fd49-c6fe-4568-9bc0-_3.vb)]"
  syntax:
    content: public static void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: file
      type: System.String
      description: "削除するファイルのパスと名前。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうか。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
    - id: recycle
      type: Microsoft.VisualBasic.FileIO.RecycleOption
      description: "削除されたファイルを送信するかどうか、**ごみ箱**です。 既定値は<xref uid=&quot;langword_csharp_RecycleOption.DeletePermanently&quot; name=&quot;RecycleOption.DeletePermanently&quot; href=&quot;&quot;></xref>です。"
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "ユーザーが、操作をキャンセルすると、例外はスローかどうかを指定します。 既定値は<xref uid=&quot;langword_csharp_UICancelOption.ThrowException&quot; name=&quot;UICancelOption.ThrowException&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますここでファイルを指定する必要があります。 末尾にスラッシュをがデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルが使用されています。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーにファイルを削除するアクセス許可がないか、ファイルは読み取り専用です。"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "ユーザーが操作をキャンセルし、 <code> onUserCancel </code>に設定されている<xref href=&quot;Microsoft.VisualBasic.FileIO.UICancelOption&quot;></xref>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(System.String)
  id: DirectoryExists(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: DirectoryExists(String)
  nameWithType: FileSystem.DirectoryExists(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "返します<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>指定されたディレクトリが存在する場合。"
  remarks: ''
  example:
  - "This example determines whether the directory `C:\\backup\\logs` exists and checks its properties.  \n  \n [!code-vb[VbRefFile#13](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._66_1.vb)]"
  syntax:
    content: public static bool DirectoryExists (string directory);
    parameters:
    - id: directory
      type: System.String
      description: "ディレクトリのパス。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>ディレクトリが存在する場合それ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.Drives
  id: Drives
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: Drives
  nameWithType: FileSystem.Drives
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.Drives
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "すべての利用可能なドライブ名の読み取り専用コレクションを返します。"
  remarks: "このプロパティは、すべての論理ドライブを返します。"
  example:
  - "This example displays the available drive names in a message box.  \n  \n [!code-vb[VbRefFile#19](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._109_1.vb)]"
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<System.IO.DriveInfo> Drives { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.DriveInfo}
      description: "すべての利用可能なドライブとしての読み取り専用コレクション<xref href=&quot;System.IO.DriveInfo&quot;></xref>オブジェクト。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.Drives*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.FileExists(System.String)
  id: FileExists(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: FileExists(String)
  nameWithType: FileSystem.FileExists(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.FileExists(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "返します<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>指定したファイルが存在する場合。"
  remarks: "アプリケーションが指定のファイルを読み取るための十分なアクセス許可を持っていない場合、`FileExists`メソッドを返します。 `False`、; パスの有無にかかわらず、メソッドは例外をスローしません。"
  example:
  - "This example checks to see whether or not the file `Check.txt` exists and supplies the information in a message box.  \n  \n [!code-vb[VbRefFile#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._163_1.vb)]"
  syntax:
    content: public static bool FileExists (string file);
    parameters:
    - id: file
      type: System.String
      description: "ファイルのパスと名前。"
    return:
      type: System.Boolean
      description: "返します<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>ファイルが存在する場合は、それ以外の場合このメソッドが戻る<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.FileExists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "バック スラッシュで終わるファイルの名前 (\\\\)。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)
  id: FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: FindInFiles(String,String,Boolean,SearchOption)
  nameWithType: FileSystem.FindInFiles(String,String,Boolean,SearchOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(String,String,Boolean,SearchOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "指定したテキストを含むファイルの名前を表す文字列の読み取り専用コレクションを返します。"
  remarks: "指定したパターンに一致するファイルが見つからない場合は、空のコレクションが返されます。       次の表に、関連するタスクの例、`My.Computer.FileSystem.FindInFiles`メソッドです。      |||  |-|-|  ||参照してください |  |ディレクトリの特定の文字列を含むファイルを検索する |[チュートリアル: Visual Basic でファイルおよびディレクトリを操作します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example searches the directory `C:\\TestDir` for any files containing the string `\"sample string\"` and displays the results in `ListBox1`.  \n  \n [!code-vb[VbRefFile#12](~/add/codesnippet/visualbasic/c1aba623-4b25-4809-b962-_1.vb)]  \n  \n In order to work, the project must contain a `ListBox` named `ListBox1`."
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<string> FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);
    parameters:
    - id: directory
      type: System.String
      description: "検索するディレクトリ。"
    - id: containsText
      type: System.String
      description: "検索するテキスト。"
    - id: ignoreCase
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>検索を区別する必要がある場合それ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>です。"
    - id: searchType
      type: Microsoft.VisualBasic.FileIO.SearchOption
      description: "サブフォルダーを含めるかどうか。 既定値は<xref uid=&quot;langword_csharp_SearchOption.SearchTopLevelOnly&quot; name=&quot;SearchOption.SearchTopLevelOnly&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "指定したテキストを含むファイルの名前の読み取り専用コレクション."
  overload: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる`\\.\`)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定したディレクトリは存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "指定したディレクトリは、既存のファイルを指します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "指定したディレクトリ パスでは、コロン (:) が含まれていますか、無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  id: FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: FindInFiles(String,String,Boolean,SearchOption,String[])
  nameWithType: FileSystem.FindInFiles(String,String,Boolean,SearchOption,String[])
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(String,String,Boolean,SearchOption,String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "指定したテキストを含むファイルの名前を表す文字列の読み取り専用コレクションを返します。"
  remarks: "指定したパターンに一致するファイルが見つからない場合は、空のコレクションが返されます。       次の表に、関連するタスクの例、`My.Computer.FileSystem.FindInFiles`メソッドです。      |||  |-|-|  ||参照してください |  |ディレクトリの特定の文字列を含むファイルを検索する |[チュートリアル: Visual Basic でファイルおよびディレクトリを操作します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example searches the directory `C:\\TestDir` for any files containing the string `\"sample string\"` and displays the results in `ListBox1`.  \n  \n [!code-vb[VbRefFile#12](~/add/codesnippet/visualbasic/3de7a74a-9724-4c87-9247-_1.vb)]  \n  \n In order to work, the project must contain a `ListBox` named `ListBox1`."
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<string> FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards);
    parameters:
    - id: directory
      type: System.String
      description: "検索するディレクトリ。"
    - id: containsText
      type: System.String
      description: "検索するテキスト。"
    - id: ignoreCase
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>検索を区別する必要がある場合それ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>です。"
    - id: searchType
      type: Microsoft.VisualBasic.FileIO.SearchOption
      description: "サブフォルダーを含めるかどうか。 既定値は<xref uid=&quot;langword_csharp_SearchOption.SearchTopLevelOnly&quot; name=&quot;SearchOption.SearchTopLevelOnly&quot; href=&quot;&quot;></xref>です。"
    - id: fileWildcards
      type: System.String[]
      description: "照合するパターン。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "指定したテキストを含むファイルの名前の読み取り専用コレクション."
  overload: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる`\\.\`)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定したディレクトリは存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "指定したディレクトリは、既存のファイルを指します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "指定したディレクトリ パスでは、コロン (:) が含まれていますか、無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: GetDirectories(String)
  nameWithType: FileSystem.GetDirectories(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリ内のサブディレクトリのパス名を表す文字列のコレクションを返します。"
  remarks: "次の表に、関連するタスクの例、`My.Computer.FileSystem.GetDirectories`メソッドです。      |||  |-|-|  ||参照してください |  |特定のパターンに一致するサブディレクトリのリスト |[する方法: Visual Basic で特定のパターンを持つサブディレクトリを検索します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example returns all the directories in the directory structure that contain the word `Logs` in their names and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._39_1.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form."
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<string> GetDirectories (string directory);
    parameters:
    - id: directory
      type: System.String
      description: "ディレクトリのパスと名前。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "指定したディレクトリのサブディレクトリのパス名の読み取り専用コレクション."
  overload: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定したディレクトリは存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "指定したディレクトリは、既存のファイルを指します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  id: GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: GetDirectories(String,SearchOption,String[])
  nameWithType: FileSystem.GetDirectories(String,SearchOption,String[])
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(String,SearchOption,String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリ内のサブディレクトリのパス名を表す文字列のコレクションを返します。"
  remarks: "使用することができます、`wildcards`パラメーターを特定のパターンを指定します。 検索にサブディレクトリの内容を含める場合は、設定、`searchType`パラメーターを`SearchAllSubDirectories`です。       指定したパターンに一致するディレクトリが見つからない場合は、空のコレクションが返されます。       次の表に、関連するタスクの例、`My.Computer.FileSystem.GetDirectories`メソッドです。      |||  |-|-|  ||参照してください |  |特定のパターンに一致するサブディレクトリのリスト |[する方法: Visual Basic で特定のパターンを持つサブディレクトリを検索します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example returns all the directories in the directory structure that contain the word `Logs` in their names and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#10](~/add/codesnippet/visualbasic/7bb013c4-a081-4298-a67c-_1.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form."
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<string> GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards);
    parameters:
    - id: directory
      type: System.String
      description: "ディレクトリのパスと名前。"
    - id: searchType
      type: Microsoft.VisualBasic.FileIO.SearchOption
      description: "サブフォルダーを含めるかどうか。 既定値は<xref uid=&quot;langword_csharp_SearchOption.SearchTopLevelOnly&quot; name=&quot;SearchOption.SearchTopLevelOnly&quot; href=&quot;&quot;></xref>です。"
    - id: wildcards
      type: System.String[]
      description: "名前と一致するパターン。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "指定したディレクトリのサブディレクトリのパス名の読み取り専用のコレクションです。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "指定したワイルドカード文字の&1; つ以上が<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、空の文字列またはスペースのみが含まれています。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定したディレクトリは存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "指定したディレクトリは、既存のファイルを指します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)
  id: GetDirectoryInfo(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: GetDirectoryInfo(String)
  nameWithType: FileSystem.GetDirectoryInfo(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "返します、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>指定されたパスのオブジェクト。"
  remarks: "ディレクトリが存在しない場合、例外はスローされません、初めてまでプロパティ、<xref:System.IO.DirectoryInfo>オブジェクトにアクセスします</xref:System.IO.DirectoryInfo>。"
  example:
  - "This example gets a <xref:System.IO.DirectoryInfo> object for the directory `C:\\Documents and Settings` and displays the directory's creation time, last access time, and last write time.  \n  \n [!code-vb[VbRefFile#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._121_1.vb)]"
  syntax:
    content: public static System.IO.DirectoryInfo GetDirectoryInfo (string directory);
    parameters:
    - id: directory
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. ディレクトリのパス。"
    return:
      type: System.IO.DirectoryInfo
      description: "<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>指定されたパスのオブジェクト。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ディレクトリ パスは、コロン (:) または、形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーは、パスを表示するために必要なアクセス許可を持っていません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(System.String)
  id: GetDriveInfo(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: GetDriveInfo(String)
  nameWithType: FileSystem.GetDriveInfo(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "返します、 <xref href=&quot;System.IO.DriveInfo&quot;> </xref>指定されたドライブのオブジェクト。"
  remarks: "<xref:System.IO.DriveInfo>クラスは、ドライブをモデル化し、ドライブ情報を照会するメソッドとプロパティを提供します</xref:System.IO.DriveInfo>。 使用して<xref:System.IO.DriveInfo>をドライブの種類が使用可能なとドライブの種類を決定します</xref:System.IO.DriveInfo>。 容量と、ドライブの空き容量を決定するプロパティをクエリすることもできます。"
  example:
  - "This example obtains a <xref:System.IO.DriveInfo> object for the C drive and uses it to display information about the drive.  \n  \n [!code-vb[VbRefFile#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._132_1.vb)]  \n  \n For information on the different drive types, see <xref:System.IO.DriveType>."
  syntax:
    content: public static System.IO.DriveInfo GetDriveInfo (string drive);
    parameters:
    - id: drive
      type: System.String
      description: "調査するドライブです。"
    return:
      type: System.IO.DriveInfo
      description: "<xref href=&quot;System.IO.DriveInfo&quot;></xref>指定されたドライブのオブジェクトです。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>drive</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーは、パスを表示するために必要なアクセス許可を持っていません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)
  id: GetFileInfo(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: GetFileInfo(String)
  nameWithType: FileSystem.GetFileInfo(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "返します、 <xref href=&quot;System.IO.FileInfo&quot;> </xref>指定したファイルのオブジェクト。"
  remarks: "ファイルが存在しません。 例外はスローされません。代わりに、スローされる初めてオブジェクトのプロパティにアクセスします。       次の表に、関連するタスクの例、`My.Computer.FileSystem.GetFileInfo`メソッドです。      |||  |-|-|  ||参照してください |  |ファイルの名前とパスを決定 |[する方法: Visual Basic でファイル パスの解析](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example retrieves a <xref:System.IO.FileInfo?displayProperty=fullName> object for the file `MyLogFile.log` and uses it to report the file's full name, last access time, and length.  \n  \n [!code-vb[VbRefFile#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._167_1.vb)]"
  syntax:
    content: public static System.IO.FileInfo GetFileInfo (string file);
    parameters:
    - id: file
      type: System.String
      description: "ファイルのパスと名前。"
    return:
      type: System.IO.FileInfo
      description: "<xref href=&quot;System.IO.FileInfo&quot;></xref>指定したファイルのオブジェクト"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "パス名が正しくありません。 たとえば、無効な文字が含まれていますかは、空白のみです。 ファイル名には末尾のスラッシュ記号。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスには、文字列の途中にコロンが含まれています。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスが長すぎます。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーは、ACL (アクセス制御リスト) ファイルのアクセス権がありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: GetFiles(String)
  nameWithType: FileSystem.GetFiles(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリ内のファイルの名前を表す文字列の読み取り専用コレクションを返します。"
  remarks: "指定したパターンに一致するファイルが見つからない場合は、空のコレクションが返されます。       次の表に、関連するタスクの例については、`My.Computer.FileSystem.GetFiles`メソッドです。      |||  |-|-|  ||参照してください |  |ディレクトリ内のファイルのコレクションを取得する |[する方法: Visual Basic でディレクトリ内のファイルのコレクションを取得](~/add/includes/ajax-current-ext-md.md)|  |ディレクトリ内で特定のパターンを持つファイル検索 |[する方法: Visual Basic で特定のパターンを持つファイルを検索します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example returns all files in the directory and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._183_1.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form.  \n  \n This example returns all files in the directory with the extension `.txt` and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._183_2.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form."
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<string> GetFiles (string directory);
    parameters:
    - id: directory
      type: System.String
      description: "検索するディレクトリ。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "指定したディレクトリからファイル名の読み取り専用のコレクションです。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "検索するディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>directory</code>既存のファイルへのポインター。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  id: GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: GetFiles(String,SearchOption,String[])
  nameWithType: FileSystem.GetFiles(String,SearchOption,String[])
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(String,SearchOption,String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリ内のファイルの名前を表す文字列の読み取り専用コレクションを返します。"
  remarks: "指定したパターンに一致するファイルが見つからない場合は、空のコレクションが返されます。       次の表に、関連するタスクの例については、`My.Computer.FileSystem.GetFiles`メソッドです。      |||  |-|-|  ||参照してください |  |ディレクトリ内のファイルのコレクションを取得する |[する方法: Visual Basic でディレクトリ内のファイルのコレクションを取得](~/add/includes/ajax-current-ext-md.md)|  |ディレクトリ内で特定のパターンを持つファイル検索 |[する方法: Visual Basic で特定のパターンを持つファイルを検索します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example returns all files in the directory and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#5](~/add/codesnippet/visualbasic/5e6a1ffc-ea51-43c3-854b-_1.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form.  \n  \n This example returns all files in the directory with the extension `.txt` and adds them to `ListBox1`.  \n  \n [!code-vb[VbRefFile#6](~/add/codesnippet/visualbasic/5e6a1ffc-ea51-43c3-854b-_2.vb)]  \n  \n This example requires that you have a `ListBox` named `ListBox1` on your form."
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<string> GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards);
    parameters:
    - id: directory
      type: System.String
      description: "検索するディレクトリ。"
    - id: searchType
      type: Microsoft.VisualBasic.FileIO.SearchOption
      description: "サブフォルダーを含めるかどうか。 既定値は<xref uid=&quot;langword_csharp_SearchOption.SearchTopLevelOnly&quot; name=&quot;SearchOption.SearchTopLevelOnly&quot; href=&quot;&quot;></xref>です。"
    - id: wildcards
      type: System.String[]
      description: "照合するパターン。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: "指定したディレクトリからファイル名の読み取り専用のコレクションです。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "検索するディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>directory</code>既存のファイルへのポインター。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetName(System.String)
  id: GetName(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: GetName(String)
  nameWithType: FileSystem.GetName(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetName(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "指定されたパスからファイル名を解析します。"
  remarks: "これは、文字列操作です。`FileSystem`は説明しません。       `GetName`メソッドは、パスの末尾にスラッシュ (/) を無視します。       次の表に、関連するタスクの例、`My.Computer.FileSystem.GetFileName`メソッドです。      |||  |-|-|  ||参照してください |  |ファイル パスを解析 |[する方法: Visual Basic でファイル パスの解析](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "The following example parses a file path and returns the name of the file.  \n  \n [!code-vb[VbVbcnMyFileSystem#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._3_1.vb)]  \n  \n Replace the path `C:\\Testdirectory\\Testfile` with the path you wish to parse."
  syntax:
    content: public static string GetName (string path);
    parameters:
    - id: path
      type: System.String
      description: "必須。 解析するパス。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>."
    return:
      type: System.String
      description: "指定されたパスからファイル名。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.GetName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)
  id: GetParentPath(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: GetParentPath(String)
  nameWithType: FileSystem.GetParentPath(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "指定されたパスの親パスを返します。"
  remarks: "これは、文字列操作です。ファイル システムはチェックされません。"
  example:
  - "This example gets the parent path for `C:\\Backups\\Tmp\\Test`.  \n  \n [!code-vb[VbRefFile#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._2_1.vb)]"
  syntax:
    content: public static string GetParentPath (string path);
    parameters:
    - id: path
      type: System.String
      description: "調査するパス。"
    return:
      type: System.String
      description: "指定されたパスの親パスです。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ルートのパスであるために、パスは、親パスがありません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName
  id: GetTempFileName
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: GetTempFileName()
  nameWithType: FileSystem.GetTempFileName()
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディスクに一意の名前付き&0; バイトの一時ファイルを作成してそのファイルの完全なパスを返します。"
  remarks: "このメソッドは、一時ファイルの作成に使用できます。"
  example:
  - "This example creates a temp file and returns its path.  \n  \n [!code-vb[VbVbcnMyFileSystem#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._71_1.vb)]"
  syntax:
    content: public static string GetTempFileName ();
    parameters: []
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>一時ファイルの完全なパスを含むです。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String)
  id: MoveDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: MoveDirectory(String,String)
  nameWithType: FileSystem.MoveDirectory(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "1 つの場所から別のディレクトリに移動します。"
  remarks: "ディレクトリが存在しないディレクトリ内を移動しようとすると、対象の構造が作成されます。"
  example:
  - "This example moves `Directory1` inside `Directory2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#81](~/add/codesnippet/visualbasic/9b938424-f0a1-43e1-91c4-_1.vb)]  \n  \n This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  \n  \n [!code-vb[VbVbcnMyFileSystem#82](~/add/codesnippet/visualbasic/9b938424-f0a1-43e1-91c4-_2.vb)]"
  syntax:
    content: public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "移動するディレクトリのパス。"
    - id: destinationDirectoryName
      type: System.String
      description: "ソース ディレクトリの移動先ディレクトリのパス。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code>または<code>destinationDirectoryName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ソースがルート ディレクトリまたはソース パスと、対象のパスが同じです。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は循環使用します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  id: MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: MoveDirectory(String,String,UIOption)
  nameWithType: FileSystem.MoveDirectory(String,String,UIOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(String,String,UIOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "1 つの場所から別のディレクトリに移動します。"
  remarks: "ディレクトリが存在しないディレクトリ内を移動しようとすると、対象の構造が作成されます。"
  example:
  - "This example moves `Directory1` inside `Directory2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#81](~/add/codesnippet/visualbasic/fe61004d-06a2-46b1-a90d-_1.vb)]  \n  \n This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  \n  \n [!code-vb[VbVbcnMyFileSystem#82](~/add/codesnippet/visualbasic/fe61004d-06a2-46b1-a90d-_2.vb)]"
  syntax:
    content: public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "移動するディレクトリのパス。"
    - id: destinationDirectoryName
      type: System.String
      description: "ソース ディレクトリの移動先ディレクトリのパス。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code>または<code>destinationDirectoryName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ターゲット ディレクトリが既に存在して o<code> verwrite </code>に設定されている<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は循環使用します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)
  id: MoveDirectory(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: MoveDirectory(String,String,Boolean)
  nameWithType: FileSystem.MoveDirectory(String,String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(String,String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "1 つの場所から別のディレクトリに移動します。"
  remarks: "ディレクトリが存在しないディレクトリ内を移動しようとすると、対象の構造が作成されます。"
  example:
  - "This example moves `Directory1` inside `Directory2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#81](~/add/codesnippet/visualbasic/9ecf6293-7b0b-405f-882c-_1.vb)]  \n  \n This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  \n  \n [!code-vb[VbVbcnMyFileSystem#82](~/add/codesnippet/visualbasic/9ecf6293-7b0b-405f-882c-_2.vb)]"
  syntax:
    content: public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "移動するディレクトリのパス。"
    - id: destinationDirectoryName
      type: System.String
      description: "ソース ディレクトリの移動先ディレクトリのパス。"
    - id: overwrite
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>既存のディレクトリを上書きする場合それ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code>または<code>destinationDirectoryName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ターゲット ディレクトリが既に存在して o<code> verwrite </code>に設定されている<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は循環使用します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: MoveDirectory(String,String,UIOption,UICancelOption)
  nameWithType: FileSystem.MoveDirectory(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(String,String,UIOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "1 つの場所から別のディレクトリに移動します。"
  remarks: "ディレクトリが存在しないディレクトリ内を移動しようとすると、対象の構造が作成されます。"
  example:
  - "This example moves `Directory1` inside `Directory2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#81](~/add/codesnippet/visualbasic/d810659f-78df-493e-93de-_1.vb)]  \n  \n This example moves `Directory1` inside `Directory2`, overwriting the directory if it already exists.  \n  \n [!code-vb[VbVbcnMyFileSystem#82](~/add/codesnippet/visualbasic/d810659f-78df-493e-93de-_2.vb)]"
  syntax:
    content: public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "移動するディレクトリのパス。"
    - id: destinationDirectoryName
      type: System.String
      description: "ソース ディレクトリの移動先ディレクトリのパス。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "ユーザーが、操作をキャンセルすると、例外はスローかどうかを指定します。 既定値は<xref uid=&quot;langword_csharp_UICancelOption.ThrowException&quot; name=&quot;UICancelOption.ThrowException&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\)。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirectoryName</code>または<code>destinationDirectoryName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>onUserCancel</code>設定されている<xref uid=&quot;langword_csharp_ThrowException&quot; name=&quot;ThrowException&quot; href=&quot;&quot;></xref>ファイルのサブディレクトリをコピーすることはできません。"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "<code>onUserCancel</code>設定されている<xref uid=&quot;langword_csharp_ThrowException&quot; name=&quot;ThrowException&quot; href=&quot;&quot;></xref>ユーザーが、操作を取り消すし、操作を完了できません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は循環使用します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String)
  id: MoveFile(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: MoveFile(String,String)
  nameWithType: FileSystem.MoveFile(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ファイルを新しい場所に移動します。"
  remarks: "ターゲット構造が存在しない場合は作成されます。       `MoveFile`メソッドのみが同じボリューム内でのファイルを移動するとき (アクセス制御エントリ) の Ace が保持されます。 これには、継承された Ace には、直接の Ace (直接 Ace が優先継承された Ace) を移動したときになりますが含まれます。 ボリューム間でファイルを移動すると、Ace はコピーされません。       次の表に、関連するタスクの例、`My.Computer.FileSystem.MoveFile`メソッドです。      |||  |-|-|  ||参照してください |  |ファイルを移動 |[する方法: Visual Basic でファイルを移動](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#86](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._133_1.vb)]  \n  \n This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#87](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._133_2.vb)]"
  syntax:
    content: public static void MoveFile (string sourceFileName, string destinationFileName);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "移動するファイルのパス。"
    - id: destinationFileName
      type: System.String
      description: "ファイルの移動先となるディレクトリのパス。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ソース ファイルは、正しくないか、存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  id: MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: MoveFile(String,String,UIOption)
  nameWithType: FileSystem.MoveFile(String,String,UIOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(String,String,UIOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ファイルを新しい場所に移動します。"
  remarks: "ターゲット構造が存在しない場合は作成されます。       `MoveFile`メソッドのみが同じボリューム内でのファイルを移動するとき (アクセス制御エントリ) の Ace が保持されます。 これには、継承された Ace には、直接の Ace (直接 Ace が優先継承された Ace) を移動したときになりますが含まれます。 ボリューム間でファイルを移動すると、Ace はコピーされません。       次の表に、関連するタスクの例、`My.Computer.FileSystem.MoveFile`メソッドです。      |||  |-|-|  ||参照してください |  |ファイルを移動 |[する方法: Visual Basic でファイルを移動](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#86](~/add/codesnippet/visualbasic/3e6ad2aa-c200-49f5-9d85-_1.vb)]  \n  \n This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#87](~/add/codesnippet/visualbasic/3e6ad2aa-c200-49f5-9d85-_2.vb)]"
  syntax:
    content: public static void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "移動するファイルのパス。"
    - id: destinationFileName
      type: System.String
      description: "ファイルの移動先となるディレクトリのパス。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ソース ファイルは、正しくないか、存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,System.Boolean)
  id: MoveFile(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: MoveFile(String,String,Boolean)
  nameWithType: FileSystem.MoveFile(String,String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(String,String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ファイルを新しい場所に移動します。"
  remarks: "ターゲット構造が存在しない場合は作成されます。       `MoveFile`メソッドのみが同じボリューム内でのファイルを移動するとき (アクセス制御エントリ) の Ace が保持されます。 これには、継承された Ace には、直接の Ace (直接 Ace が優先継承された Ace) を移動したときになりますが含まれます。 ボリューム間でファイルを移動すると、Ace はコピーされません。       次の表に、関連するタスクの例、`My.Computer.FileSystem.MoveFile`メソッドです。      |||  |-|-|  ||参照してください |  |ファイルを移動 |[する方法: Visual Basic でファイルを移動](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#86](~/add/codesnippet/visualbasic/061580cd-dc37-447c-a290-_1.vb)]  \n  \n This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#87](~/add/codesnippet/visualbasic/061580cd-dc37-447c-a290-_2.vb)]"
  syntax:
    content: public static void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "移動するファイルのパス。"
    - id: destinationFileName
      type: System.String
      description: "ファイルの移動先となるディレクトリのパス。"
    - id: overwrite
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>既存のファイルを上書きするにはそれ以外の場合<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ソース ファイルは、正しくないか、存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  id: MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: MoveFile(String,String,UIOption,UICancelOption)
  nameWithType: FileSystem.MoveFile(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(String,String,UIOption,UICancelOption)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ファイルを新しい場所に移動します。"
  remarks: "ターゲット構造が存在しない場合は作成されます。       `MoveFile`メソッドのみが同じボリューム内でのファイルを移動するとき (アクセス制御エントリ) の Ace が保持されます。 これには、継承された Ace には、直接の Ace (直接 Ace が優先継承された Ace) を移動したときになりますが含まれます。 ボリューム間でファイルを移動すると、Ace はコピーされません。       次の表に、関連するタスクの例、`My.Computer.FileSystem.MoveFile`メソッドです。      |||  |-|-|  ||参照してください |  |ファイルを移動 |[する方法: Visual Basic でファイルを移動](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example moves the file `Test.txt` from `TestDir1` to `TestDir2`.  \n  \n [!code-vb[VbVbcnMyFileSystem#86](~/add/codesnippet/visualbasic/4184c832-c8dc-48e4-b29a-_1.vb)]  \n  \n This example moves the file `Test.txt` from `TestDir1` to `TestDir2` and renames it `Test2.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#87](~/add/codesnippet/visualbasic/4184c832-c8dc-48e4-b29a-_2.vb)]"
  syntax:
    content: public static void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "移動するファイルのパス。"
    - id: destinationFileName
      type: System.String
      description: "ファイルの移動先となるディレクトリのパス。"
    - id: showUI
      type: Microsoft.VisualBasic.FileIO.UIOption
      description: "操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は<xref uid=&quot;langword_csharp_UIOption.OnlyErrorDialogs&quot; name=&quot;UIOption.OnlyErrorDialogs&quot; href=&quot;&quot;></xref>です。"
    - id: onUserCancel
      type: Microsoft.VisualBasic.FileIO.UICancelOption
      description: "ユーザーが、操作をキャンセルすると、例外はスローかどうかを指定します。 既定値は<xref uid=&quot;langword_csharp_UICancelOption.ThrowException&quot; name=&quot;UICancelOption.ThrowException&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destinationFileName</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>または空の文字列。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ソース ファイルは、正しくないか、存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "<code>onUserCancel</code>設定されている<xref uid=&quot;langword_csharp_ThrowException&quot; name=&quot;ThrowException&quot; href=&quot;&quot;> </xref>、いずれかと、ユーザーが操作をキャンセルまたは未指定の I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)
  id: OpenTextFieldParser(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: OpenTextFieldParser(String)
  nameWithType: FileSystem.OpenTextFieldParser(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "<xref uid=&quot;langword_csharp_OpenTextFieldParser&quot; name=&quot;OpenTextFieldParser&quot; href=&quot;&quot;> </xref>メソッドでは、作成することができます、 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref>オブジェクトで、簡単かつ効率的には、ログなどの構造化テキスト ファイルを解析する方法を提供します。 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>区切りと固定幅の両方のファイルを読み取るオブジェクトを使用できます。"
  remarks: "次の表に、関連するタスクの例については、`My.Computer.FileSystem.OpenTextFieldParser`メソッドです。      |||  |-|-|  ||参照してください |  |区切られたテキスト ファイルからの読み取り |[する方法: Visual Basic でコンマ区切りのテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |固定幅テキスト ファイルから読み取る |[する方法: Visual Basic で固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|  |複数の形式を持つテキスト ファイルから読み取る |[する方法: Visual Basic での複数の形式を持つテキスト ファイルからの読み取り](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens the `TextFieldParser``reader` and uses it to read from `C:\\TestFolder1\\Test1.txt`.  \n  \n [!code-vb[VbRefFile#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._156_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);
    parameters:
    - id: file
      type: System.String
      description: "で開かれるファイル、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref>です。"
    return:
      type: Microsoft.VisualBasic.FileIO.TextFieldParser
      description: "<xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;></xref>指定したファイルを読み取れません。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: Microsoft.VisualBasic.FileIO.MalformedLineException
    commentId: T:Microsoft.VisualBasic.FileIO.MalformedLineException
    description: "指定された形式を使用して行を解析できません。 例外メッセージは、行を指定中に例外が発生、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*>プロパティには、行に含まれるテキストが割り当てられます</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.Int32[])
  id: OpenTextFieldParser(System.String,System.Int32[])
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: OpenTextFieldParser(String,Int32[])
  nameWithType: FileSystem.OpenTextFieldParser(String,Int32[])
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(String,Int32[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "<xref uid=&quot;langword_csharp_OpenTextFieldParser&quot; name=&quot;OpenTextFieldParser&quot; href=&quot;&quot;> </xref>メソッドでは、作成することができます、 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref>オブジェクトで、簡単かつ効率的には、ログなどの構造化テキスト ファイルを解析する方法を提供します。 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>区切りと固定幅の両方のファイルを読み取るオブジェクトを使用できます。"
  remarks: "次の表に、関連するタスクの例については、`My.Computer.FileSystem.OpenTextFieldParser`メソッドです。      |||  |-|-|  ||参照してください |  |区切られたテキスト ファイルからの読み取り |[する方法: Visual Basic でコンマ区切りのテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |固定幅テキスト ファイルから読み取る |[する方法: Visual Basic で固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|  |複数の形式を持つテキスト ファイルから読み取る |[する方法: Visual Basic での複数の形式を持つテキスト ファイルからの読み取り](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens the `TextFieldParser``reader` and uses it to read from `C:\\TestFolder1\\Test1.txt`.  \n  \n [!code-vb[VbRefFile#18](~/add/codesnippet/visualbasic/23049b6e-0913-4641-bd0f-_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, int[] fieldWidths);
    parameters:
    - id: file
      type: System.String
      description: "で開かれるファイル、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref>です。"
    - id: fieldWidths
      type: System.Int32[]
      description: "フィールドの幅。"
    return:
      type: Microsoft.VisualBasic.FileIO.TextFieldParser
      description: "<xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;></xref>指定したファイルを読み取れません。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: Microsoft.VisualBasic.FileIO.MalformedLineException
    commentId: T:Microsoft.VisualBasic.FileIO.MalformedLineException
    description: "指定された形式を使用して行を解析できません。 例外メッセージは、行を指定中に例外が発生、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*>プロパティには、行に含まれるテキストが割り当てられます</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.String[])
  id: OpenTextFieldParser(System.String,System.String[])
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: OpenTextFieldParser(String,String[])
  nameWithType: FileSystem.OpenTextFieldParser(String,String[])
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(String,String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "<xref uid=&quot;langword_csharp_OpenTextFieldParser&quot; name=&quot;OpenTextFieldParser&quot; href=&quot;&quot;> </xref>メソッドでは、作成することができます、 <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref>オブジェクトで、簡単かつ効率的には、ログなどの構造化テキスト ファイルを解析する方法を提供します。 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref>区切りと固定幅の両方のファイルを読み取るオブジェクトを使用できます。"
  remarks: "次の表に、関連するタスクの例については、`My.Computer.FileSystem.OpenTextFieldParser`メソッドです。      |||  |-|-|  ||参照してください |  |区切られたテキスト ファイルからの読み取り |[する方法: Visual Basic でコンマ区切りのテキスト ファイルから読み取られた](~/add/includes/ajax-current-ext-md.md)|  |固定幅テキスト ファイルから読み取る |[する方法: Visual Basic で固定幅テキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|  |複数の形式を持つテキスト ファイルから読み取る |[する方法: Visual Basic での複数の形式を持つテキスト ファイルからの読み取り](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens the `TextFieldParser``reader` and uses it to read from `C:\\TestFolder1\\Test1.txt`.  \n  \n [!code-vb[VbRefFile#18](~/add/codesnippet/visualbasic/714bc4c9-ee52-4bdc-875b-_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, string[] delimiters);
    parameters:
    - id: file
      type: System.String
      description: "で開かれるファイル、 <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref>です。"
    - id: delimiters
      type: System.String[]
      description: "フィールドの区切り記号。"
    return:
      type: Microsoft.VisualBasic.FileIO.TextFieldParser
      description: "<xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;></xref>指定したファイルを読み取れません。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: Microsoft.VisualBasic.FileIO.MalformedLineException
    commentId: T:Microsoft.VisualBasic.FileIO.MalformedLineException
    description: "指定された形式を使用して行を解析できません。 例外メッセージは、行を指定中に例外が発生、<xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*>プロパティには、行に含まれるテキストが割り当てられます</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String)
  id: OpenTextFileReader(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: OpenTextFileReader(String)
  nameWithType: FileSystem.OpenTextFileReader(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "開く、<xref:System.IO.StreamReader>ファイルから読み取るオブジェクト</xref:System.IO.StreamReader>。"
  remarks: "<xref:System.IO.StreamReader>。</xref:System.IO.StreamReader>テキスト ファイルだけを読み取ることができます。       次の表に、関連するタスクの例、`My.Computer.FileSystem.OpenTextFileReader`メソッドです。      |||  |-|-|  ||参照してください |  |ファイルは、<xref:System.IO.StreamReader>開く |[方法: StreamReader (Visual Basic) でファイルからテキストを読み取る](~/add/includes/ajax-current-ext-md.md)| </xref:System.IO.StreamReader>"
  example:
  - "This example opens the file `Testfile.txt`, reads a line from it, and displays the line in a `MessageBox`.  \n  \n [!code-vb[VbRefFile#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._86_1.vb)]"
  syntax:
    content: public static System.IO.StreamReader OpenTextFileReader (string file);
    parameters:
    - id: file
      type: System.String
      description: "読み取るファイルです。"
    return:
      type: System.IO.StreamReader
      description: "<xref:System.IO.StreamReader>ファイルから読み取るオブジェクト</xref:System.IO.StreamReader>"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ファイル名が円記号で終わる (\\\\)。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定したファイルが見つかりません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、ファイルからの読み取りに必要な権限が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)
  id: OpenTextFileReader(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: OpenTextFileReader(String,Encoding)
  nameWithType: FileSystem.OpenTextFileReader(String,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(String,Encoding)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "開く、<xref:System.IO.StreamReader>ファイルから読み取るオブジェクト</xref:System.IO.StreamReader>。"
  remarks: "<xref:System.IO.StreamReader>。</xref:System.IO.StreamReader>テキスト ファイルだけを読み取ることができます。       次の表に、関連するタスクの例、`My.Computer.FileSystem.OpenTextFileReader`メソッドです。      |||  |-|-|  ||参照してください |  |ファイルは、<xref:System.IO.StreamReader>開く |[方法: StreamReader (Visual Basic) でファイルからテキストを読み取る](~/add/includes/ajax-current-ext-md.md)| </xref:System.IO.StreamReader>"
  example:
  - "This example opens the file `Testfile.txt`, reads a line from it, and displays the line in a `MessageBox`.  \n  \n [!code-vb[VbRefFile#2](~/add/codesnippet/visualbasic/86e418b6-8642-47bd-853b-_1.vb)]"
  syntax:
    content: public static System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);
    parameters:
    - id: file
      type: System.String
      description: "読み取るファイルです。"
    - id: encoding
      type: System.Text.Encoding
      description: "ファイルの内容を使用するエンコーディング。 既定値は ASCII です。"
    return:
      type: System.IO.StreamReader
      description: "<xref:System.IO.StreamReader>ファイルから読み取るオブジェクト</xref:System.IO.StreamReader>"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ファイル名が円記号で終わる (\\\\)。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定したファイルが見つかりません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、ファイルからの読み取りに必要な権限が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean)
  id: OpenTextFileWriter(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: OpenTextFileWriter(String,Boolean)
  nameWithType: FileSystem.OpenTextFileWriter(String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "開く、 <xref:System.IO.StreamWriter>、指定したファイルに書き込むオブジェクト</xref:System.IO.StreamWriter>。"
  remarks: "`OpenTextFileWriter`メソッドと、ファイルのストリームを初期化を開きを返します、<xref:System.IO.StreamWriter>ストリームにオブジェクト</xref:System.IO.StreamWriter>。 必要な数だけストリームに書き込むしが完了したら、閉じますことができます。      > [!NOTE] > 呼び出す必要があります、<xref:System.IO.StreamWriter.Close%2A>メソッドを<xref:System.IO.StreamWriter>オブジェクトをすべてのデータが、基になるストリームを不適切に記述されたことを確認してください</xref:System.IO.StreamWriter></xref:System.IO.StreamWriter.Close%2A>。       ファイルをいくつかの文字列のみを記述することが考えられます使いやすく、<xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A>メソッド</xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A>。       次の表に、関連するタスクの例、`My.Computer.FileSystem.OpenTextFileWriter`メソッドです。      |||  |-|-|  ||参照してください |  |テキストを持つファイルを書き込む、 `StreamWriter` |[する方法: Visual Basic で StreamWriter を持つファイルに書き込むテキスト](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens a <xref:System.IO.StreamWriter> with the `My.Computer.FileSystem.OpenTextFileWriter` method and uses it to write a string to a text file with the `WriteLine` method of the `StreamWriter` class.  \n  \n [!code-vb[VbRefFile#14](~/add/codesnippet/visualbasic/01606e79-13a9-4f6b-a18a-_1.vb)]"
  syntax:
    content: public static System.IO.StreamWriter OpenTextFileWriter (string file, bool append);
    parameters:
    - id: file
      type: System.String
      description: "書き込まれるファイルです。"
    - id: append
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>ファイルの内容に追加するには<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>ファイルの内容を上書きします。 既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.IO.StreamWriter
      description: "<xref:System.IO.StreamWriter>指定したファイルに書き込むオブジェクト。</xref:System.IO.StreamWriter>"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ファイル名は、末尾のスラッシュで終わります。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)
  id: OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: OpenTextFileWriter(String,Boolean,Encoding)
  nameWithType: FileSystem.OpenTextFileWriter(String,Boolean,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(String,Boolean,Encoding)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "開きます、 <xref:System.IO.StreamWriter>、指定したファイルに書き込めません</xref:System.IO.StreamWriter>。"
  remarks: "`OpenTextFileWriter`メソッドと、ファイルのストリームを初期化を開きを返します、<xref:System.IO.StreamWriter>ストリームにオブジェクト</xref:System.IO.StreamWriter>。 必要な数だけストリームに書き込むしが完了したら、閉じますことができます。      > [!NOTE] > 呼び出す必要があります、<xref:System.IO.StreamWriter.Close%2A>メソッドを<xref:System.IO.StreamWriter>オブジェクトをすべてのデータが、基になるストリームを不適切に記述されたことを確認してください</xref:System.IO.StreamWriter></xref:System.IO.StreamWriter.Close%2A>。       ファイルをいくつかの文字列のみを記述することが考えられます使いやすく、<xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A>メソッド</xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A>。       次の表に、関連するタスクの例、`My.Computer.FileSystem.OpenTextFileWriter`メソッドです。      |||  |-|-|  ||参照してください |  |テキストを持つファイルを書き込む、 `StreamWriter` |[する方法: Visual Basic で StreamWriter を持つファイルに書き込むテキスト](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens a <xref:System.IO.StreamWriter> with the `My.Computer.FileSystem.OpenTextFileWriter` method and uses it to write a string to a text file with the `WriteLine` method of the `StreamWriter` class.  \n  \n [!code-vb[VbRefFile#14](~/add/codesnippet/visualbasic/dde0fe7a-3324-4e07-ba75-_1.vb)]"
  syntax:
    content: public static System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);
    parameters:
    - id: file
      type: System.String
      description: "書き込まれるファイルです。"
    - id: append
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>ファイルの内容に追加するには<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>ファイルの内容を上書きします。 既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
    - id: encoding
      type: System.Text.Encoding
      description: "ファイルへの書き込みに使用されるエンコーディング。 既定値は ASCII です。"
    return:
      type: System.IO.StreamWriter
      description: "<xref:System.IO.StreamWriter>指定したファイルに書き込むオブジェクト。</xref:System.IO.StreamWriter>"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ファイル名は、末尾のスラッシュで終わります。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(System.String)
  id: ReadAllBytes(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: ReadAllBytes(String)
  nameWithType: FileSystem.ReadAllBytes(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ファイルの内容をバイト配列として返します。"
  remarks: "`ReadAllBytes`のメソッド、`My.Computer.FileSystem`オブジェクトでは、バイナリ ファイルを読み取ることができます。 ファイルの内容は、バイト配列として返されます。       ファイルの名前に基づいて、ファイルの内容を判断しないでください。 たとえば、form1.vb というファイルには、Visual Basic のソース ファイルができません。 アプリケーションでデータを使用する前にすべての入力を検証してください。       次の表に、関連するタスクの例、`My.Computer.FileSystem.ReadAllBytes`メソッドです。      |||  |-|-|  ||参照してください |  |バイナリ ファイルから読み取る |[する方法: Visual Basic でバイナリ ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads from the file `C:/Documents and Settings/selfportrait.jpg.`  \n  \n [!code-vb[VbVbcnMyFileSystem#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._186_1.vb)]"
  syntax:
    content: public static byte[] ReadAllBytes (string file);
    parameters:
    - id: file
      type: System.String
      description: "読み取るファイルです。"
    return:
      type: System.Byte[]
      description: "<xref uid=&quot;langword_csharp_Byte&quot; name=&quot;Byte&quot; href=&quot;&quot;></xref>ファイルの内容を含む配列です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "文字列をバッファーに書き込むのに十分なメモリがありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String)
  id: ReadAllText(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: ReadAllText(String)
  nameWithType: FileSystem.ReadAllText(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "テキスト ファイルとしての内容を返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>です。"
  remarks: "`ReadAllText`のメソッド、`My.Computer.FileSystem`オブジェクトは、テキスト ファイルから読み込むことができます。 ファイルの内容は、文字列として返されます。       ファイルのエンコーディングを指定できるかどうか、ファイルの内容は ASCII または utf-8 などのエンコーディングを指定します。 拡張文字を含むファイルから読み込む場合の別のオーバー ロードを使用してファイルのエンコードを指定する必要があります、<xref:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText%2A>メソッド</xref:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText%2A>。       ファイルの名前に基づいて、ファイルの内容を判断しないでください。 たとえば、form1.vb というファイルには、Visual Basic のソース ファイルができません。 アプリケーションでデータを使用する前にすべての入力を検証してください。       次の表に、関連するタスクの例、`My.Computer.FileSystem.ReadAllText`メソッドです。      |||  |-|-|  ||参照してください |  |テキスト ファイルから読み取る |[する方法: Visual Basic でのテキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads the contents of `Test.txt` into a string and then displays it in a message box.  \n  \n [!code-vb[VbRefFile#8](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._107_1.vb)]  \n  \n This example reads the contents of the ASCII file `Test.txt` into a string and then displays it in a message box.  \n  \n [!code-vb[VbRefFile#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._107_2.vb)]"
  syntax:
    content: public static string ReadAllText (string file);
    parameters:
    - id: file
      type: System.String
      description: "読み取るファイルのパスと名前。"
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>ファイルの内容を含むです。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "文字列をバッファーに書き込むのに十分なメモリがありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String,System.Text.Encoding)
  id: ReadAllText(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: ReadAllText(String,Encoding)
  nameWithType: FileSystem.ReadAllText(String,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(String,Encoding)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "テキスト ファイルとしての内容を返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>です。"
  remarks: "`ReadAllText`のメソッド、`My.Computer.FileSystem`オブジェクトは、テキスト ファイルから読み込むことができます。 ファイルの内容は、文字列として返されます。       ファイルのエンコーディングを指定できるかどうか、ファイルの内容は ASCII または utf-8 などのエンコーディングを指定します。 拡張文字を含むファイルから読み込む場合は、ファイルのエンコーディングを指定する必要があります。       ファイルの名前に基づいて、ファイルの内容を判断しないでください。 たとえば、form1.vb というファイルには、Visual Basic のソース ファイルができません。 アプリケーションでデータを使用する前にすべての入力を検証してください。       次の表に、関連するタスクの例、`My.Computer.FileSystem.ReadAllText`メソッドです。      |||  |-|-|  ||参照してください |  |テキスト ファイルから読み取る |[する方法: Visual Basic でのテキスト ファイルを読み取る](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads the contents of `Test.txt` into a string and then displays it in a message box.  \n  \n [!code-vb[VbRefFile#8](~/add/codesnippet/visualbasic/1582cda5-304c-4525-b252-_1.vb)]  \n  \n This example reads the contents of the ASCII file `Test.txt` into a string and then displays it in a message box.  \n  \n [!code-vb[VbRefFile#9](~/add/codesnippet/visualbasic/1582cda5-304c-4525-b252-_2.vb)]"
  syntax:
    content: public static string ReadAllText (string file, System.Text.Encoding encoding);
    parameters:
    - id: file
      type: System.String
      description: "読み取るファイルのパスと名前。"
    - id: encoding
      type: System.Text.Encoding
      description: "ファイルの読み取りに使用する文字エンコーディングします。 既定値は utf-8 です。"
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>ファイルの内容を含むです。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "文字列をバッファーに書き込むのに十分なメモリがありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(System.String,System.String)
  id: RenameDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: RenameDirectory(String,String)
  nameWithType: FileSystem.RenameDirectory(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ディレクトリの名前を変更します。"
  remarks: "このメソッドは、ディレクトリを移動を使用することはできません。使用して、`MoveDirectory`メソッドに移動し、ディレクトリの名前を変更します。"
  example:
  - "This example renames the `Test` directory to `SecondTest`.  \n  \n [!code-vb[VbVbcnMyFileSystem#13](~/add/codesnippet/visualbasic/313534a3-4c32-4f3e-9ae2-_1.vb)]"
  syntax:
    content: public static void RenameDirectory (string directory, string newName);
    parameters:
    - id: directory
      type: System.String
      description: "パスと名前を変更するディレクトリの名前。"
    - id: newName
      type: System.String
      description: "ディレクトリの新しい名前。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>newName</code>パス情報が含まれています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>directory</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>.       - または -<code>newName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "既存のファイルまたはで指定された名前のディレクトリがある<code> newName</code>です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは 248 文字を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(System.String,System.String)
  id: RenameFile(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: RenameFile(String,String)
  nameWithType: FileSystem.RenameFile(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "ファイルの名前を変更します。"
  remarks: "このメソッドは、ファイルを移動を使用することはできません。使用して、<xref:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile%2A>メソッドに移動し、ファイルの名前を変更します</xref:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile%2A>。       次の表に、関連するタスクの例、`My.Computer.FileSystem.RenameFile`メソッドです。      |||  |-|-|  ||参照してください |  |ファイル名の変更 |[する方法: Visual Basic でファイルの名前を変更](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example renames the file `Test.txt` to `SecondTest.txt`.  \n  \n [!code-vb[VbVbcnMyFileSystem#1](~/add/codesnippet/visualbasic/39c53cd2-9477-4e35-83cb-_1.vb)]  \n  \n Change \"`C:\\Test.txt`\" to the path and file name of the file that you want to rename."
  syntax:
    content: public static void RenameFile (string file, string newName);
    parameters:
    - id: file
      type: System.String
      description: "名前を変更するファイルです。"
    - id: newName
      type: System.String
      description: "ファイルの新しい名前。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.RenameFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>newName</code>パス情報を格納またはバック スラッシュで終わる (\\\\)。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>.       - または -<code>newName</code>は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>または空の文字列。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ディレクトリが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "既存のファイルまたはで指定された名前のディレクトリがある<code> newName</code>です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ユーザーには、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)
  id: WriteAllBytes(System.String,System.Byte[],System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: WriteAllBytes(String,Byte[],Boolean)
  nameWithType: FileSystem.WriteAllBytes(String,Byte[],Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(String,Byte[],Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "バイナリ ファイルにデータを書き込みます。"
  remarks: "ファイル名を除く、指定されたパスが有効でない場合、<xref:System.IO.DirectoryNotFoundException>例外がスローされます</xref:System.IO.DirectoryNotFoundException>。 パスが有効では、ファイルが存在しない場合、ファイルが作成されます。      > [!NOTE] >、`WriteAllBytes`メソッドは、ファイルを開き、による書き込みが、それを閉じます。 使用するコード、`WriteAllBytes`メソッドにコードを使用するよりも簡単です、<xref:System.IO.BinaryWriter>オブジェクト</xref:System.IO.BinaryWriter>。 ただし、ループを使用してファイルにデータを追加する場合は、<xref:System.IO.BinaryWriter>のみファイルを&1; 回開閉する必要があるために、オブジェクトは優れたパフォーマンスを実現できます</xref:System.IO.BinaryWriter>。       次の表に、関連するタスクの例、`My.Computer.FileSystem.WriteAllBytes`メソッドです。      |||  |-|-|  ||参照してください |  |バイナリ ファイルへの書き込み |[する方法: Visual Basic でバイナリ ファイルへの書き込み](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example appends the data array `CustomerData` to the file `CollectedData`.  \n  \n [!code-vb[VbVbcnMyFileSystem#50](~/add/codesnippet/visualbasic/45dbfd83-d122-4e5f-a7b8-_1.vb)]"
  syntax:
    content: public static void WriteAllBytes (string file, byte[] data, bool append);
    parameters:
    - id: file
      type: System.String
      description: "パスと名前に書き込まれるファイル。"
    - id: data
      type: System.Byte[]
      description: "ファイルに書き込まれるデータ。"
    - id: append
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>ファイルの内容に追加するには<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>ファイルの内容を上書きします。 既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "文字列をバッファーに書き込むのに十分なメモリがありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean)
  id: WriteAllText(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: WriteAllText(String,String,Boolean)
  nameWithType: FileSystem.WriteAllText(String,String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(String,String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "テキストをファイルに書き込みます。"
  remarks: "Utf-8 エンコードは、ファイルへの書き込みに使用されます。 別のエンコードを指定するには、異なるオーバー ロードを使用して、<xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A>メソッド</xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A>。       指定したファイルが存在しない場合は作成されます。       指定したエンコーディングが一致しない場合、ファイルの既存のエンコーディングを指定したコードは無視されます。      > [!NOTE] >、`WriteAllText`メソッドは、ファイルを開き、による書き込みが、それを閉じます。 使用するコード、`WriteAllText`メソッドにコードを使用するよりも簡単です、<xref:System.IO.StreamWriter>オブジェクト</xref:System.IO.StreamWriter>。 ただし、ループを使用して文字列をファイルに追加する場合、<xref:System.IO.StreamWriter>を開いたり閉じたり、ファイルに&1; 回だけで済むために、オブジェクトは優れたパフォーマンスを実現できます</xref:System.IO.StreamWriter>。 詳細については、次を参照してください、<xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter%2A>メソッド。</xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter%2A> 。       次の表に、関連するタスクの例については、`My.Computer.FileSystem.WriteAllText`メソッドです。      |||  |-|-|  ||参照してください |  |テキスト ファイルを書き込む |[する方法: Visual Basic でファイルにテキストを書き込む](~/add/includes/ajax-current-ext-md.md)|  |テキスト ファイルを追加 |[する方法: Visual Basic でのテキスト ファイルに追記します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example writes the line `\"This is new text to be added.\"` to the file `Test.txt`, overwriting any existing text in the file.  \n  \n [!code-vb[VbRefFile#21](~/add/codesnippet/visualbasic/1188930b-d690-4775-ad99-_1.vb)]  \n  \n This example writes the names of the files in the `Documents and Settings` folder to `FileList.txt`, inserting a carriage return between each for better readability.  \n  \n [!code-vb[VbRefFile#22](~/add/codesnippet/visualbasic/1188930b-d690-4775-ad99-_2.vb)]"
  syntax:
    content: public static void WriteAllText (string file, string text, bool append);
    parameters:
    - id: file
      type: System.String
      description: "書き込まれるファイルです。"
    - id: text
      type: System.String
      description: "ファイルに書き込まれるテキストです。"
    - id: append
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>ファイルの内容に追加するには<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>ファイルの内容を上書きします。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "文字列をバッファーに書き込むのに十分なメモリがありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)
  id: WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  langs:
  - csharp
  name: WriteAllText(String,String,Boolean,Encoding)
  nameWithType: FileSystem.WriteAllText(String,String,Boolean,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(String,String,Boolean,Encoding)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "テキストをファイルに書き込みます。"
  remarks: "指定したファイルが存在しない場合は作成されます。       指定したエンコーディングが一致しない場合、ファイルの既存のエンコーディングを指定したコードは無視されます。      > [!NOTE] >、`WriteAllText`メソッドは、ファイルを開き、による書き込みが、それを閉じます。 使用するコード、`WriteAllText`メソッドにコードを使用するよりも簡単です、<xref:System.IO.StreamWriter>オブジェクト</xref:System.IO.StreamWriter>。 ただし、ループを使用して文字列をファイルに追加する場合、<xref:System.IO.StreamWriter>を開いたり閉じたり、ファイルに&1; 回だけで済むために、オブジェクトは優れたパフォーマンスを実現できます</xref:System.IO.StreamWriter>。 詳細については、次を参照してください、<xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter%2A>メソッド。</xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter%2A> 。       次の表に、関連するタスクの例については、`My.Computer.FileSystem.WriteAllText`メソッドです。      |||  |-|-|  ||参照してください |  |テキスト ファイルを書き込む |[する方法: Visual Basic でファイルにテキストを書き込む](~/add/includes/ajax-current-ext-md.md)|  |テキスト ファイルを追加 |[する方法: Visual Basic でのテキスト ファイルに追記します。](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example writes the line `\"This is new text to be added.\"` to the file `Test.txt`, overwriting any existing text in the file.  \n  \n [!code-vb[VbRefFile#21](~/add/codesnippet/visualbasic/aa785e67-61d7-4ff0-b9bf-_1.vb)]  \n  \n This example writes the names of the files in the `Documents and Settings` folder to `FileList.txt`, inserting a carriage return between each for better readability.  \n  \n [!code-vb[VbRefFile#22](~/add/codesnippet/visualbasic/aa785e67-61d7-4ff0-b9bf-_2.vb)]"
  syntax:
    content: public static void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);
    parameters:
    - id: file
      type: System.String
      description: "書き込まれるファイルです。"
    - id: text
      type: System.String
      description: "ファイルに書き込まれるテキストです。"
    - id: append
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>ファイルの内容に追加するには<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>ファイルの内容を上書きします。"
    - id: encoding
      type: System.Text.Encoding
      description: "ファイルへの書き込み時に使用するエンコーディングします。"
  overload: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'パスが正しくない、次の理由のいずれかの: は長さ&0; の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか (で始まる\\ \\.\\); 末尾のスラッシュを終了します。'
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>file</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが存在しません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルは別のプロセスによって使用されています。 または、I/O エラーが発生します。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "パスは、システム定義の最大長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "パスのファイルまたはディレクトリ名は、コロン (:) が含まれています。 または形式が無効です。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "文字列をバッファーに書き込むのに十分なメモリがありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "ユーザーには、パスを表示するために必要なアクセス許可が不足しています。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.OperationCanceledException
  isExternal: true
  name: System.OperationCanceledException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: Microsoft.VisualBasic.FileIO.MalformedLineException
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: MalformedLineException
  nameWithType: MalformedLineException
  fullName: Microsoft.VisualBasic.FileIO.MalformedLineException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: Microsoft.VisualBasic.FileIO.FileSystem.#ctor
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: FileSystem()
  nameWithType: FileSystem.FileSystem()
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.FileSystem()
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CombinePath(String,String)
  nameWithType: FileSystem.CombinePath(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CopyDirectory(String,String)
  nameWithType: FileSystem.CopyDirectory(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(String,String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CopyDirectory(String,String,UIOption)
  nameWithType: FileSystem.CopyDirectory(String,String,UIOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(String,String,UIOption)
- uid: Microsoft.VisualBasic.FileIO.UIOption
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: UIOption
  nameWithType: UIOption
  fullName: Microsoft.VisualBasic.FileIO.UIOption
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CopyDirectory(String,String,Boolean)
  nameWithType: FileSystem.CopyDirectory(String,String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CopyDirectory(String,String,UIOption,UICancelOption)
  nameWithType: FileSystem.CopyDirectory(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(String,String,UIOption,UICancelOption)
- uid: Microsoft.VisualBasic.FileIO.UICancelOption
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: UICancelOption
  nameWithType: UICancelOption
  fullName: Microsoft.VisualBasic.FileIO.UICancelOption
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CopyFile(String,String)
  nameWithType: FileSystem.CopyFile(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(String,String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CopyFile(String,String,UIOption)
  nameWithType: FileSystem.CopyFile(String,String,UIOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(String,String,UIOption)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CopyFile(String,String,Boolean)
  nameWithType: FileSystem.CopyFile(String,String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(String,String,Boolean)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CopyFile(String,String,UIOption,UICancelOption)
  nameWithType: FileSystem.CopyFile(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(String,String,UIOption,UICancelOption)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CreateDirectory(String)
  nameWithType: FileSystem.CreateDirectory(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CurrentDirectory
  nameWithType: FileSystem.CurrentDirectory
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: DeleteDirectory(String,DeleteDirectoryOption)
  nameWithType: FileSystem.DeleteDirectory(String,DeleteDirectoryOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(String,DeleteDirectoryOption)
- uid: Microsoft.VisualBasic.FileIO.DeleteDirectoryOption
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: DeleteDirectoryOption
  nameWithType: DeleteDirectoryOption
  fullName: Microsoft.VisualBasic.FileIO.DeleteDirectoryOption
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: DeleteDirectory(String,UIOption,RecycleOption)
  nameWithType: FileSystem.DeleteDirectory(String,UIOption,RecycleOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(String,UIOption,RecycleOption)
- uid: Microsoft.VisualBasic.FileIO.RecycleOption
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: RecycleOption
  nameWithType: RecycleOption
  fullName: Microsoft.VisualBasic.FileIO.RecycleOption
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
  nameWithType: FileSystem.DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(String,UIOption,RecycleOption,UICancelOption)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: DeleteFile(String)
  nameWithType: FileSystem.DeleteFile(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: DeleteFile(String,UIOption,RecycleOption)
  nameWithType: FileSystem.DeleteFile(String,UIOption,RecycleOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(String,UIOption,RecycleOption)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: DeleteFile(String,UIOption,RecycleOption,UICancelOption)
  nameWithType: FileSystem.DeleteFile(String,UIOption,RecycleOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(String,UIOption,RecycleOption,UICancelOption)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: DirectoryExists(String)
  nameWithType: FileSystem.DirectoryExists(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.Drives
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: Drives
  nameWithType: FileSystem.Drives
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.Drives
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.DriveInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<DriveInfo>
  nameWithType: ReadOnlyCollection<DriveInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IO.DriveInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IO.DriveInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.DriveInfo
    name: DriveInfo
    nameWithType: DriveInfo
    fullName: DriveInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.VisualBasic.FileIO.FileSystem.FileExists(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: FileExists(String)
  nameWithType: FileSystem.FileExists(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.FileExists(String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: FindInFiles(String,String,Boolean,SearchOption)
  nameWithType: FileSystem.FindInFiles(String,String,Boolean,SearchOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(String,String,Boolean,SearchOption)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<String>
  nameWithType: ReadOnlyCollection<String>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.VisualBasic.FileIO.SearchOption
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: SearchOption
  nameWithType: SearchOption
  fullName: Microsoft.VisualBasic.FileIO.SearchOption
- uid: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: FindInFiles(String,String,Boolean,SearchOption,String[])
  nameWithType: FileSystem.FindInFiles(String,String,Boolean,SearchOption,String[])
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(String,String,Boolean,SearchOption,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetDirectories(String)
  nameWithType: FileSystem.GetDirectories(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetDirectories(String,SearchOption,String[])
  nameWithType: FileSystem.GetDirectories(String,SearchOption,String[])
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(String,SearchOption,String[])
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetDirectoryInfo(String)
  nameWithType: FileSystem.GetDirectoryInfo(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(String)
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetDriveInfo(String)
  nameWithType: FileSystem.GetDriveInfo(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(String)
- uid: System.IO.DriveInfo
  parent: System.IO
  isExternal: false
  name: DriveInfo
  nameWithType: DriveInfo
  fullName: System.IO.DriveInfo
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetFileInfo(String)
  nameWithType: FileSystem.GetFileInfo(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(String)
- uid: System.IO.FileInfo
  parent: System.IO
  isExternal: false
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetFiles(String)
  nameWithType: FileSystem.GetFiles(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetFiles(String,SearchOption,String[])
  nameWithType: FileSystem.GetFiles(String,SearchOption,String[])
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(String,SearchOption,String[])
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetName(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetName(String)
  nameWithType: FileSystem.GetName(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetName(String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetParentPath(String)
  nameWithType: FileSystem.GetParentPath(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetTempFileName()
  nameWithType: FileSystem.GetTempFileName()
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName()
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: MoveDirectory(String,String)
  nameWithType: FileSystem.MoveDirectory(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(String,String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: MoveDirectory(String,String,UIOption)
  nameWithType: FileSystem.MoveDirectory(String,String,UIOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(String,String,UIOption)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: MoveDirectory(String,String,Boolean)
  nameWithType: FileSystem.MoveDirectory(String,String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(String,String,Boolean)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: MoveDirectory(String,String,UIOption,UICancelOption)
  nameWithType: FileSystem.MoveDirectory(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(String,String,UIOption,UICancelOption)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: MoveFile(String,String)
  nameWithType: FileSystem.MoveFile(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(String,String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: MoveFile(String,String,UIOption)
  nameWithType: FileSystem.MoveFile(String,String,UIOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(String,String,UIOption)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: MoveFile(String,String,Boolean)
  nameWithType: FileSystem.MoveFile(String,String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(String,String,Boolean)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: MoveFile(String,String,UIOption,UICancelOption)
  nameWithType: FileSystem.MoveFile(String,String,UIOption,UICancelOption)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(String,String,UIOption,UICancelOption)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: OpenTextFieldParser(String)
  nameWithType: FileSystem.OpenTextFieldParser(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(String)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: TextFieldParser
  nameWithType: TextFieldParser
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.Int32[])
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: OpenTextFieldParser(String,Int32[])
  nameWithType: FileSystem.OpenTextFieldParser(String,Int32[])
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(String,Int32[])
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.String[])
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: OpenTextFieldParser(String,String[])
  nameWithType: FileSystem.OpenTextFieldParser(String,String[])
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(String,String[])
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: OpenTextFileReader(String)
  nameWithType: FileSystem.OpenTextFileReader(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(String)
- uid: System.IO.StreamReader
  parent: System.IO
  isExternal: true
  name: StreamReader
  nameWithType: StreamReader
  fullName: System.IO.StreamReader
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: OpenTextFileReader(String,Encoding)
  nameWithType: FileSystem.OpenTextFileReader(String,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(String,Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: OpenTextFileWriter(String,Boolean)
  nameWithType: FileSystem.OpenTextFileWriter(String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(String,Boolean)
- uid: System.IO.StreamWriter
  parent: System.IO
  isExternal: true
  name: StreamWriter
  nameWithType: StreamWriter
  fullName: System.IO.StreamWriter
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: OpenTextFileWriter(String,Boolean,Encoding)
  nameWithType: FileSystem.OpenTextFileWriter(String,Boolean,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(String,Boolean,Encoding)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: ReadAllBytes(String)
  nameWithType: FileSystem.ReadAllBytes(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: ReadAllText(String)
  nameWithType: FileSystem.ReadAllText(String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: ReadAllText(String,Encoding)
  nameWithType: FileSystem.ReadAllText(String,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(String,Encoding)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: RenameDirectory(String,String)
  nameWithType: FileSystem.RenameDirectory(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(String,String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(System.String,System.String)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: RenameFile(String,String)
  nameWithType: FileSystem.RenameFile(String,String)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(String,String)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: WriteAllBytes(String,Byte[],Boolean)
  nameWithType: FileSystem.WriteAllBytes(String,Byte[],Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(String,Byte[],Boolean)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: WriteAllText(String,String,Boolean)
  nameWithType: FileSystem.WriteAllText(String,String,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(String,String,Boolean)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: WriteAllText(String,String,Boolean,Encoding)
  nameWithType: FileSystem.WriteAllText(String,String,Boolean,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(String,String,Boolean,Encoding)
- uid: Microsoft.VisualBasic.FileIO.FileSystem.#ctor*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: FileSystem
  nameWithType: FileSystem.FileSystem
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CombinePath*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CombinePath
  nameWithType: FileSystem.CombinePath
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CopyDirectory
  nameWithType: FileSystem.CopyDirectory
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CopyFile*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CopyFile
  nameWithType: FileSystem.CopyFile
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CreateDirectory
  nameWithType: FileSystem.CreateDirectory
- uid: Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: CurrentDirectory
  nameWithType: FileSystem.CurrentDirectory
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: DeleteDirectory
  nameWithType: FileSystem.DeleteDirectory
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: DeleteFile
  nameWithType: FileSystem.DeleteFile
- uid: Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: DirectoryExists
  nameWithType: FileSystem.DirectoryExists
- uid: Microsoft.VisualBasic.FileIO.FileSystem.Drives*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: Drives
  nameWithType: FileSystem.Drives
- uid: Microsoft.VisualBasic.FileIO.FileSystem.FileExists*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: FileExists
  nameWithType: FileSystem.FileExists
- uid: Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: FindInFiles
  nameWithType: FileSystem.FindInFiles
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetDirectories
  nameWithType: FileSystem.GetDirectories
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetDirectoryInfo
  nameWithType: FileSystem.GetDirectoryInfo
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetDriveInfo
  nameWithType: FileSystem.GetDriveInfo
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetFileInfo
  nameWithType: FileSystem.GetFileInfo
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetFiles*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetFiles
  nameWithType: FileSystem.GetFiles
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetName*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetName
  nameWithType: FileSystem.GetName
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetParentPath
  nameWithType: FileSystem.GetParentPath
- uid: Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: GetTempFileName
  nameWithType: FileSystem.GetTempFileName
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: MoveDirectory
  nameWithType: FileSystem.MoveDirectory
- uid: Microsoft.VisualBasic.FileIO.FileSystem.MoveFile*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: MoveFile
  nameWithType: FileSystem.MoveFile
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: OpenTextFieldParser
  nameWithType: FileSystem.OpenTextFieldParser
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: OpenTextFileReader
  nameWithType: FileSystem.OpenTextFileReader
- uid: Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: OpenTextFileWriter
  nameWithType: FileSystem.OpenTextFileWriter
- uid: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: ReadAllBytes
  nameWithType: FileSystem.ReadAllBytes
- uid: Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: ReadAllText
  nameWithType: FileSystem.ReadAllText
- uid: Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: RenameDirectory
  nameWithType: FileSystem.RenameDirectory
- uid: Microsoft.VisualBasic.FileIO.FileSystem.RenameFile*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: RenameFile
  nameWithType: FileSystem.RenameFile
- uid: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: WriteAllBytes
  nameWithType: FileSystem.WriteAllBytes
- uid: Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText*
  parent: Microsoft.VisualBasic.FileIO.FileSystem
  isExternal: false
  name: WriteAllText
  nameWithType: FileSystem.WriteAllText
