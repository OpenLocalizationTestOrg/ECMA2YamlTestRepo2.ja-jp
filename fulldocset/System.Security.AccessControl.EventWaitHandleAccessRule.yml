### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  id: EventWaitHandleAccessRule
  children:
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  langs:
  - csharp
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
  type: Class
  summary: "ユーザーまたはグループに対して許可または拒否の権限のセットを表します。 このクラスは継承できません。"
  remarks: "EventWaitHandleAccessRule クラスは、一連の名前付きシステム イベントに Windows アクセス制御セキュリティを管理するために、.NET Framework が提供するクラスです。 これらのクラスと、基になる Windows アクセス制御構造との関係の概要については、 <xref:System.Security.AccessControl.EventWaitHandleSecurity>。</xref:System.Security.AccessControl.EventWaitHandleSecurity>を参照してください。      > [!NOTE] > という名前のシステム イベントの Windows アクセス制御セキュリティはに対してのみ有効です。 場合、<xref:System.Threading.EventWaitHandle>オブジェクトがローカル イベントを表す、アクセス制御は使用されません</xref:System.Threading.EventWaitHandle>。       名前付きイベントに現在適用されている規則の一覧を取得する、<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>取得するメソッド、<xref:System.Security.AccessControl.EventWaitHandleSecurity>オブジェクトを使用して、その<xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>EventWaitHandleAccessRule オブジェクトのコレクションを取得します</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A></xref:System.Security.AccessControl.EventWaitHandleSecurity></xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>。       EventWaitHandleAccessRule オブジェクトは基になる随意アクセス制御リスト (DACL) でアクセス制御エントリを一対一でマップしません。 イベントのすべてのアクセス規則のセットを取得するときに、セットには、すべてのアクセス制御エントリを表すために必要な現在のルールの最小数が含まれています。      > [!NOTE] > 基になるアクセス制御エントリの変更を適用して規則を削除するとします。 規則の情報は、アクセス制御エントリの最小数を維持するために可能な場合は、結合されます。 したがって、現在のルールの一覧を取得すると、追加したすべてのルールの一覧とまったく同じ体裁に可能性がありますとは限りません。       EventWaitHandleAccessRule オブジェクトを使用すると、ユーザーまたはグループを許可または拒否するのにアクセス権を指定します。 EventWaitHandleAccessRule 常にオブジェクトを表しますがアクセスを許可または決して両方のアクセスを拒否します。       名前付きシステム イベントにルールを適用するには、使用、<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>取得するメソッド、<xref:System.Security.AccessControl.EventWaitHandleSecurity>オブジェクト</xref:System.Security.AccessControl.EventWaitHandleSecurity></xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>。 変更、 <xref:System.Security.AccessControl.EventWaitHandleSecurity>、ルールを追加し、使用してそのメソッドを使用して、オブジェクト、<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>セキュリティ オブジェクトを再アタッチするメソッド</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName></xref:System.Security.AccessControl.EventWaitHandleSecurity>。      > [!IMPORTANT] > に対して行った変更、<xref:System.Security.AccessControl.EventWaitHandleSecurity>オブジェクトが呼び出されるまで、指定したイベントのアクセス レベルには影響しません、<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>名前付きのイベントには、変更されたセキュリティ オブジェクトを割り当てる方法</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName></xref:System.Security.AccessControl.EventWaitHandleSecurity>。       EventWaitHandleAccessRule オブジェクトは変更できません。 メソッドを使用して、イベントのセキュリティが変更された、<xref:System.Security.AccessControl.EventWaitHandleSecurity>ルールを追加または削除するクラスですこれを行うと、基になるアクセス制御エントリが変更されます。</xref:System.Security.AccessControl.EventWaitHandleSecurity> 。      > [!NOTE] > する同期オブジェクトにセキュリティが Windows 98 または Windows Millennium Edition のサポートされていません。"
  example:
  - "The following code example demonstrates the creation and use of EventWaitHandleAccessRule objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_0_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_0_1.vb)]"
  syntax:
    content: 'public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref>指定して、ユーザーまたはグループのアクセス権を規則を適用し、指定したアクセス権を許可または拒否するかどうか。"
  remarks: "上で待機する、 <xref:System.Threading.EventWaitHandle>(を呼び出して、 <xref:System.Threading.WaitHandle.WaitOne%2A>、<xref:System.Threading.WaitHandle.WaitAny%2A>または<xref:System.Threading.WaitHandle.WaitAll%2A>メソッド)、ユーザーがいる必要があります<xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>アクセス</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName></xref:System.Threading.WaitHandle.WaitAll%2A></xref:System.Threading.WaitHandle.WaitAny%2A></xref:System.Threading.WaitHandle.WaitOne%2A></xref:System.Threading.EventWaitHandle>。 呼び出してイベントを通知する、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドを呼び出すことによって unsignaled 状態にリセットしたり、<xref:System.Threading.EventWaitHandle.Reset%2A>メソッド、ユーザーがいる必要があります<xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>アクセス</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName></xref:System.Threading.EventWaitHandle.Reset%2A></xref:System.Threading.EventWaitHandle.Set%2A>。 通知、<xref:System.Threading.EventWaitHandle>オブジェクトを呼び出すことによって待機し、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッド、ユーザーがいる必要があります<xref:System.Security.AccessControl.EventWaitHandleRights>と<xref:System.Security.AccessControl.EventWaitHandleRights>アクセス</xref:System.Security.AccessControl.EventWaitHandleRights></xref:System.Security.AccessControl.EventWaitHandleRights></xref:System.Threading.WaitHandle.SignalAndWait%2A></xref:System.Threading.EventWaitHandle>。"
  syntax:
    content: public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "ユーザーまたはグループのルールを適用します。 型でなければなりません<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>またはなど型<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>型に変換できる<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>です。"
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;></xref>権限を指定する値を許可または拒否します。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>権限を許可または拒否するかどうかを指定する値。"
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>無効な値を指定します。       - または -<code>type</code>無効な値を指定します。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>eventRights</code>ゼロです。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>型のどちらも<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>もなどの型の<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>型に変換できる<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref>クラス、ユーザーまたはアクセス権を規則が適用されるグループの名前を指定し、指定したアクセス権を許可または拒否するかどうか。"
  remarks: "上で待機する、 <xref:System.Threading.EventWaitHandle>(を呼び出して、 <xref:System.Threading.WaitHandle.WaitOne%2A>、<xref:System.Threading.WaitHandle.WaitAny%2A>または<xref:System.Threading.WaitHandle.WaitAll%2A>メソッド)、ユーザーがいる必要があります<xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>アクセス</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName></xref:System.Threading.WaitHandle.WaitAll%2A></xref:System.Threading.WaitHandle.WaitAny%2A></xref:System.Threading.WaitHandle.WaitOne%2A></xref:System.Threading.EventWaitHandle>。 呼び出してイベントを通知する、<xref:System.Threading.EventWaitHandle.Set%2A>メソッドを呼び出すことによって unsignaled 状態にリセットしたり、<xref:System.Threading.EventWaitHandle.Reset%2A>メソッド、ユーザーがいる必要があります<xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>アクセス</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName></xref:System.Threading.EventWaitHandle.Reset%2A></xref:System.Threading.EventWaitHandle.Set%2A>。 通知、<xref:System.Threading.EventWaitHandle>オブジェクトを呼び出すことによって待機し、<xref:System.Threading.WaitHandle.SignalAndWait%2A>メソッド、ユーザーがいる必要があります<xref:System.Security.AccessControl.EventWaitHandleRights>と<xref:System.Security.AccessControl.EventWaitHandleRights>アクセス</xref:System.Security.AccessControl.EventWaitHandleRights></xref:System.Security.AccessControl.EventWaitHandleRights></xref:System.Threading.WaitHandle.SignalAndWait%2A></xref:System.Threading.EventWaitHandle>。       このコンス トラクターを作成するのには、<xref:System.Security.Principal.NTAccount>を渡すことによって、オブジェクト`identity`を<xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>コンス トラクター、および新しく作成された渡す<xref:System.Security.Principal.NTAccount>オブジェクトを<xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29>コンス トラクター</xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount> 。"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/ffb3828f-bc0d-4880-b857-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/ffb3828f-bc0d-4880-b857-_1.vb)]"
  syntax:
    content: public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "ユーザーまたはグループの名前に、ルールが適用されます。"
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;></xref>権限を指定する値を許可または拒否します。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>権限を許可または拒否するかどうかを指定する値。"
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>無効な値を指定します。       - または -<code>type</code>無効な値を指定します。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>0 です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>identity</code>は長さ&0; の文字列。       - または -<code>identity</code>が 512 文字を超えています。"
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  id: EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "アクセス規則によって許可または拒否の権限を取得します。"
  remarks: "<xref:System.Security.AccessControl.EventWaitHandleAccessRule>オブジェクトは変更できません。</xref:System.Security.AccessControl.EventWaitHandleAccessRule> 別のユーザー、異なる権限、または異なるを表す新しいアクセス ルールを作成する<xref:System.Security.AccessControl.AccessControlType>が、既存のアクセス ルールを変更することはできません</xref:System.Security.AccessControl.AccessControlType>。"
  example:
  - "The following code example demonstrates the use of the EventWaitHandleRights property to display the rights in the set of rules contained in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_2_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_2_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }
    return:
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;></xref>権限を示す値を許可またはアクセス ルールによって拒否されます。"
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.EventWaitHandleRights
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
