### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherTimer
  id: DispatcherTimer
  children:
  - System.Windows.Threading.DispatcherTimer.#ctor
  - System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)
  - System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)
  - System.Windows.Threading.DispatcherTimer.Dispatcher
  - System.Windows.Threading.DispatcherTimer.Interval
  - System.Windows.Threading.DispatcherTimer.IsEnabled
  - System.Windows.Threading.DispatcherTimer.Start
  - System.Windows.Threading.DispatcherTimer.Stop
  - System.Windows.Threading.DispatcherTimer.Tag
  - System.Windows.Threading.DispatcherTimer.Tick
  langs:
  - csharp
  name: DispatcherTimer
  nameWithType: DispatcherTimer
  fullName: System.Windows.Threading.DispatcherTimer
  type: Class
  summary: "タイマーに統合されている、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>時間の指定された間隔で、指定された優先順位では処理キュー。"
  remarks: "上部にある、DispatcherTimer は再評価すべて<xref:System.Windows.Threading.Dispatcher>ループ</xref:System.Windows.Threading.Dispatcher>。       タイマーが時間間隔が発生しても、時間間隔で発生する前に実行されないことが保証されるときにだけ実行する保証はありません。  これは、DispatcherTimer 操作を配置しているため、<xref:System.Windows.Threading.Dispatcher>他の操作と同様にキュー</xref:System.Windows.Threading.Dispatcher> 。  DispatcherTimer 操作が実行される場合は、他のジョブ キューとその優先度に依存します。       場合、<xref:System.Timers.Timer?displayProperty=fullName>で使用される、[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]点に注意は、アプリケーション、<xref:System.Timers.Timer?displayProperty=fullName>別のスレッドで実行されて、[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]スレッド</xref:System.Timers.Timer?displayProperty=fullName></xref:System.Timers.Timer?displayProperty=fullName>。  オブジェクトにアクセスするために、[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]に操作を行う必要がある、スレッド、<xref:System.Windows.Threading.Dispatcher>の[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してスレッド</xref:System.Windows.Threading.Dispatcher> はなく DispatcherTimer を使用する理由、 <xref:System.Timers.Timer?displayProperty=fullName>、DispatcherTimer と同じスレッドで実行されているが、<xref:System.Windows.Threading.Dispatcher>と<xref:System.Windows.Threading.DispatcherPriority>、DispatcherTimer に設定することができます</xref:System.Windows.Threading.DispatcherPriority></xref:System.Windows.Threading.Dispatcher></xref:System.Timers.Timer?displayProperty=fullName>。       オブジェクトのメソッドは、このタイマーへバインドされるたびに、DispatcherTimer には、オブジェクトがアライブは保持します。      <a name=&quot;xamlTextUsage_DispatcherTimer&quot;></a>## XAML テキストの使用方法"
  example:
  - "The following example creates a DispatcherTimer that updates the contents of a <xref:System.Windows.Controls.Label> and calls the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method on the <xref:System.Windows.Input.CommandManager>.  \n  \n A DispatcherTimer object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event of `dispatcherTimer`.  The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.Windows.Duration.TimeSpan%2A> object, and the timer is started.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]  \n  \n The <xref:System.Windows.Threading.DispatcherTimer.Tick> event handler updates a <xref:System.Windows.Controls.Label> that displays the current second, and it calls <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> on the <xref:System.Windows.Input.CommandManager>.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimer)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimer)]"
  syntax:
    content: public class DispatcherTimer
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor
  id: '#ctor'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer()
  nameWithType: DispatcherTimer.DispatcherTimer()
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref>クラスです。"
  remarks: '<xref:System.Windows.Threading.DispatcherTimer>実行されて、<xref:System.Windows.Threading.Dispatcher>で現在のスレッドの<xref:System.Windows.Threading.DispatcherPriority>優先度</xref:System.Windows.Threading.DispatcherPriority></xref:System.Windows.Threading.Dispatcher>。</xref:System.Windows.Threading.DispatcherTimer>  異なる<xref:System.Windows.Threading.Dispatcher>、次のコンス トラクターを使用して: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=fullName>.</xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=fullName> </xref:System.Windows.Threading.Dispatcher>'
  syntax:
    content: public DispatcherTimer ();
    parameters: []
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)
  id: '#ctor(System.Windows.Threading.DispatcherPriority)'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer(DispatcherPriority)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref>クラスは、指定された優先順位でタイマー イベントを処理します。"
  remarks: '<xref:System.Windows.Threading.DispatcherTimer>実行されて、 <xref:System.Windows.Threading.Dispatcher>、現在のスレッド</xref:System.Windows.Threading.Dispatcher>。</xref:System.Windows.Threading.DispatcherTimer>  異なる<xref:System.Windows.Threading.Dispatcher>、次のコンス トラクターを使用して: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.</xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29> </xref:System.Windows.Threading.Dispatcher>'
  syntax:
    content: public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "タイマーを起動する優先順位。"
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)
  id: '#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer(DispatcherPriority,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref> 、指定した上で実行されるクラス<xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>指定された優先順位でします。"
  syntax:
    content: public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "タイマーを起動する優先順位。"
    - id: dispatcher
      type: System.Windows.Threading.Dispatcher
      description: "ディスパッチャー タイマーが関連付けられています。"
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dispatcher</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)
  id: '#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)'
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;> </xref>指定時間間隔、優先度、イベント ハンドラーを使用するクラスと<xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
  syntax:
    content: public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);
    parameters:
    - id: interval
      type: System.TimeSpan
      description: "ティック間の時間の期間。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "タイマーを起動する優先順位。"
    - id: callback
      type: System.EventHandler
      description: "ときに呼び出すイベント ハンドラー、 <xref href=&quot;System.Windows.Threading.DispatcherTimer.Tick&quot;> </xref>イベントが発生します。"
    - id: dispatcher
      type: System.Windows.Threading.Dispatcher
      description: "ディスパッチャー タイマーが関連付けられています。"
  overload: System.Windows.Threading.DispatcherTimer.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callback</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>interval</code>0 未満かより大きい<xref:System.Int32.MaxValue>です。"
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherTimer.Dispatcher
  fullName: System.Windows.Threading.DispatcherTimer.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "取得、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>これに関連付けられている<xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;></xref>です。"
  remarks: "ディスパッチャーのプロパティは、の作成時に決定、<xref:System.Windows.Threading.DispatcherTimer>オブジェクト</xref:System.Windows.Threading.DispatcherTimer>。  <xref:System.Windows.Threading.Dispatcher>プロパティが現在<xref:System.Windows.Threading.Dispatcher>は作成時にしない限り、異なる<xref:System.Windows.Threading.Dispatcher>が指定されている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher>。"
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "ディスパッチャー。"
  overload: System.Windows.Threading.DispatcherTimer.Dispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Interval
  id: Interval
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Interval
  nameWithType: DispatcherTimer.Interval
  fullName: System.Windows.Threading.DispatcherTimer.Interval
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "取得またはタイマー ティック間の時間の期間を設定します。"
  remarks: "タイマーが時間間隔が発生しても、時間間隔で発生する前に実行されないことが保証されるときにだけ実行する保証はありません。  これは、ため<xref:System.Windows.Threading.DispatcherTimer>操作は、<xref:System.Windows.Threading.Dispatcher>他の操作と同様にキュー</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.DispatcherTimer> 。  ときに、<xref:System.Windows.Threading.DispatcherTimer>操作の実行は、他のジョブ キューとその優先度に依存します</xref:System.Windows.Threading.DispatcherTimer>。      <a name=&quot;XAMLTextUsage_Interval&quot;></a>## XAML テキストの使用方法"
  example:
  - "The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.  A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.  The Interval is set to 1 second using a <xref:System.TimeSpan> object.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]"
  syntax:
    content: public TimeSpan Interval { get; set; }
    return:
      type: System.TimeSpan
      description: "ティック間の時間の期間。 既定値は、00時 00分: 00 です。"
  overload: System.Windows.Threading.DispatcherTimer.Interval*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>interval</code>0 未満かより大きい<xref:System.Int32.MaxValue>(ミリ秒)。"
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.IsEnabled
  id: IsEnabled
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: IsEnabled
  nameWithType: DispatcherTimer.IsEnabled
  fullName: System.Windows.Threading.DispatcherTimer.IsEnabled
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "取得またはタイマーが実行されているかどうかを示す値を設定します。"
  remarks: "IsEnabled に設定する必要があります`true`の<xref:System.Windows.Threading.DispatcherTimer.Tick>イベントが発生する</xref:System.Windows.Threading.DispatcherTimer.Tick>。       呼び出す<xref:System.Windows.Threading.DispatcherTimer.Start%2A>設定 IsEnabled `true`</xref:System.Windows.Threading.DispatcherTimer.Start%2A> 。       呼び出す<xref:System.Windows.Threading.DispatcherTimer.Stop%2A>設定 IsEnabled `false`</xref:System.Windows.Threading.DispatcherTimer.Stop%2A> 。      <a name=&quot;XAMLTextUsage_IsEnabled&quot;></a>## XAML テキストの使用方法"
  example:
  - "The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.  A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.  The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.TimeSpan> object.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>タイマーが有効である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。  既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Threading.DispatcherTimer.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Start
  id: Start
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Start()
  nameWithType: DispatcherTimer.Start()
  fullName: System.Windows.Threading.DispatcherTimer.Start()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "開始、 <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;></xref>です。"
  remarks: "設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`false`タイマーが開始されたときにタイマーを停止します</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>。       設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`true`タイマーを開始、タイマーが停止した場合</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>。       セットを開始<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`true`</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>。       開始<xref:System.Windows.Threading.DispatcherTimer.Interval%2A>。</xref:System.Windows.Threading.DispatcherTimer.Interval%2A>タイマーをリセットします。"
  example:
  - "The following example creates a <xref:System.Windows.Threading.DispatcherTimer>.  A new <xref:System.Windows.Threading.DispatcherTimer> object named `dispatcherTimer` is created.  The event handler `dispatcherTimer_Tick` is added to the <xref:System.Windows.Threading.DispatcherTimer.Tick> event.  The <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> is set to 1 second using a <xref:System.Windows.Duration.TimeSpan%2A> object.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimerinit)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimerinit)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Windows.Threading.DispatcherTimer.Start*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Stop
  id: Stop
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Stop()
  nameWithType: DispatcherTimer.Stop()
  fullName: System.Windows.Threading.DispatcherTimer.Stop()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "停止、 <xref href=&quot;System.Windows.Threading.DispatcherTimer&quot;></xref>です。"
  remarks: "設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`false`タイマーが開始されたときにタイマーを停止します</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>。       設定<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`true`タイマーを開始、タイマーが停止した場合</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>。       停止のセットを呼び出す<xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>に`false`</xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A>。"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Windows.Threading.DispatcherTimer.Stop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Tag
  id: Tag
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Tag
  nameWithType: DispatcherTimer.Tag
  fullName: System.Windows.Threading.DispatcherTimer.Tag
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "取得またはユーザー定義のデータ オブジェクトを設定します。"
  remarks: "<a name=&quot;XAMLTextUsage_Tag&quot;></a>## XAML テキストの使用方法"
  syntax:
    content: public object Tag { get; set; }
    return:
      type: System.Object
      description: "ユーザー定義データ。  既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Threading.DispatcherTimer.Tag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherTimer.Tick
  id: Tick
  parent: System.Windows.Threading.DispatcherTimer
  langs:
  - csharp
  name: Tick
  nameWithType: DispatcherTimer.Tick
  fullName: System.Windows.Threading.DispatcherTimer.Tick
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "タイマーの間隔が経過したときに発生します。"
  remarks: "<a name=&quot;xamlTextUsage_Tick&quot;></a>## XAML テキストの使用方法"
  example:
  - "The following example creates a Tick event handler.  The event handler updates a <xref:System.Windows.Controls.Label> that displays the current second, and it calls <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> on the <xref:System.Windows.Input.CommandManager>.  \n  \n [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimer)]\n [!code-cs[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimer)]"
  syntax:
    content: public event EventHandler Tick;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Windows.Threading.DispatcherTimer.#ctor
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer()
  nameWithType: DispatcherTimer.DispatcherTimer()
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer()
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer(DispatcherPriority)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority)
- uid: System.Windows.Threading.DispatcherPriority
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherPriority
  nameWithType: DispatcherPriority
  fullName: System.Windows.Threading.DispatcherPriority
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer(DispatcherPriority,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(DispatcherPriority,Dispatcher)
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  nameWithType: DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
  fullName: System.Windows.Threading.DispatcherTimer.DispatcherTimer(TimeSpan,DispatcherPriority,EventHandler,Dispatcher)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Threading.DispatcherTimer.Dispatcher
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherTimer.Dispatcher
  fullName: System.Windows.Threading.DispatcherTimer.Dispatcher
- uid: System.Windows.Threading.DispatcherTimer.Interval
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Interval
  nameWithType: DispatcherTimer.Interval
  fullName: System.Windows.Threading.DispatcherTimer.Interval
- uid: System.Windows.Threading.DispatcherTimer.IsEnabled
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: IsEnabled
  nameWithType: DispatcherTimer.IsEnabled
  fullName: System.Windows.Threading.DispatcherTimer.IsEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherTimer.Start
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Start()
  nameWithType: DispatcherTimer.Start()
  fullName: System.Windows.Threading.DispatcherTimer.Start()
- uid: System.Windows.Threading.DispatcherTimer.Stop
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Stop()
  nameWithType: DispatcherTimer.Stop()
  fullName: System.Windows.Threading.DispatcherTimer.Stop()
- uid: System.Windows.Threading.DispatcherTimer.Tag
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Tag
  nameWithType: DispatcherTimer.Tag
  fullName: System.Windows.Threading.DispatcherTimer.Tag
- uid: System.Windows.Threading.DispatcherTimer.Tick
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Tick
  nameWithType: DispatcherTimer.Tick
  fullName: System.Windows.Threading.DispatcherTimer.Tick
- uid: System.Windows.Threading.DispatcherTimer.#ctor*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: DispatcherTimer
  nameWithType: DispatcherTimer.DispatcherTimer
- uid: System.Windows.Threading.DispatcherTimer.Dispatcher*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherTimer.Dispatcher
- uid: System.Windows.Threading.DispatcherTimer.Interval*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Interval
  nameWithType: DispatcherTimer.Interval
- uid: System.Windows.Threading.DispatcherTimer.IsEnabled*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: IsEnabled
  nameWithType: DispatcherTimer.IsEnabled
- uid: System.Windows.Threading.DispatcherTimer.Start*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Start
  nameWithType: DispatcherTimer.Start
- uid: System.Windows.Threading.DispatcherTimer.Stop*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Stop
  nameWithType: DispatcherTimer.Stop
- uid: System.Windows.Threading.DispatcherTimer.Tag*
  parent: System.Windows.Threading.DispatcherTimer
  isExternal: false
  name: Tag
  nameWithType: DispatcherTimer.Tag
