### YamlMime:ManagedReference
items:
- uid: System.Data.OracleClient.OracleLob
  id: OracleLob
  children:
  - System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)
  - System.Data.OracleClient.OracleLob.BeginBatch
  - System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)
  - System.Data.OracleClient.OracleLob.CanRead
  - System.Data.OracleClient.OracleLob.CanSeek
  - System.Data.OracleClient.OracleLob.CanWrite
  - System.Data.OracleClient.OracleLob.ChunkSize
  - System.Data.OracleClient.OracleLob.Clone
  - System.Data.OracleClient.OracleLob.Connection
  - System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)
  - System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)
  - System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)
  - System.Data.OracleClient.OracleLob.Dispose(System.Boolean)
  - System.Data.OracleClient.OracleLob.EndBatch
  - System.Data.OracleClient.OracleLob.Erase
  - System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)
  - System.Data.OracleClient.OracleLob.Flush
  - System.Data.OracleClient.OracleLob.IsBatched
  - System.Data.OracleClient.OracleLob.IsNull
  - System.Data.OracleClient.OracleLob.IsTemporary
  - System.Data.OracleClient.OracleLob.Length
  - System.Data.OracleClient.OracleLob.LobType
  - System.Data.OracleClient.OracleLob.Null
  - System.Data.OracleClient.OracleLob.Position
  - System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)
  - System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Data.OracleClient.OracleLob.SetLength(System.Int64)
  - System.Data.OracleClient.OracleLob.Value
  - System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)
  - System.Data.OracleClient.OracleLob.WriteByte(System.Byte)
  langs:
  - csharp
  name: OracleLob
  nameWithType: OracleLob
  fullName: System.Data.OracleClient.OracleLob
  type: Class
  summary: "バイナリ ラージ オブジェクトを表します (<xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;></xref>)、Oracle サーバー上に格納されているデータ型。 このクラスは継承できません。"
  remarks: "OracleLob とは異なります、<xref:System.Data.OracleClient.OracleBFile>の代わりに、オペレーティング システムの物理ファイル内のサーバーにデータを格納します</xref:System.Data.OracleClient.OracleBFile>。 異なり、読み取り/書き込みオブジェクトにも、<xref:System.Data.OracleClient.OracleBFile>は常に読み取り専用です</xref:System.Data.OracleClient.OracleBFile>。       OracleLob では、これらのいずれかの可能性があります<xref:System.Data.OracleClient.OracleType>データ型</xref:System.Data.OracleClient.OracleType>。      |OracleType データ タイプ |説明 |  |--------------------------|-----------------|  |`Blob`|Oracle `BLOB` 4 ギガバイト (GB) の最大サイズのバイナリ データを格納するデータ型。 これは、<xref:System.Array><xref:System.Byte>型にマップします |。  |`Clob`|Oracle`CLOB`サーバーで、4 GB の最大サイズを既定の文字に基づく文字データを含むデータ型を設定します</xref:System.Byte></xref:System.Array>。 これは<xref:System.String>にマップします |。  |`NClob`|Oracle`NCLOB`各国語文字が 4 GB の最大サイズを使用してサーバー セットに基づいて、データ型を文字データが含まれています</xref:System.String>。 <xref:System.String>をマップします |。      .NET アプリケーションの開発者は、Oracle で取得できる`LOB`などの基本的な .NET データ型に値<xref:System.Array>型の<xref:System.Byte>と<xref:System.String>、または特殊な OracleLob データ型</xref:System.String></xref:System.Byte></xref:System.Array></xref:System.String>。 OracleLob クラスがサポートするデータからの読み取りと書き込み、Oracle `LOB` Oracle データベースでします。       .NET の基本データ型から区別する OracleLob データ型の主な特徴を次に示します: Oracle を取得した後に -`LOB`値 OracleLob クラスに、Oracle データベースから変更することができます、`LOB`開いているトランザクションで変更データはデータベースに直接反映されます。 Oracle を取得する場合`LOB`値に、<xref:System.Array>型の<xref:System.Byte>または<xref:System.String>これらの配列を更新し、変更はデータベースに反映されません</xref:System.String></xref:System.Byte></xref:System.Array>。      のチャンクにアクセスする OracleLob クラスを使用する場合、 `LOB` 、チャンクだけ値は、Oracle データベースからクライアントにします。 使用すると、<xref:System.Data.OracleClient.OracleDataReader.GetChars%2A>のチャンクにアクセスするメソッド、`LOB`値、値の内容全体がクライアントに渡され、Oracle データベースから</xref:System.Data.OracleClient.OracleDataReader.GetChars%2A>。       OracleLob オブジェクトを取得するには、呼び出し、<xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A>メソッド</xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A>。       この形式を使用して NULL である OracleLob を構築することができます:```   OracleLob myLob = OracleLob.Null;   ```をテストするには、主に、この手法を使用するかどうか、`LOB`はこの例のように、NULL の場合、サーバーから返された: ```   If(myLob == OracleLob.Null)   ``` NULL `LOB`&0; バイトと同様に動作`LOB`点で<xref:System.Data.OracleClient.OracleLob.Read%2A>が成功し、常に&0; バイトを返します</xref:System.Data.OracleClient.OracleLob.Read%2A>。       選択すると、 `LOB` null 値を含む列には、 <xref:System.Data.OracleClient.OracleLob.Null>.</xref:System.Data.OracleClient.OracleLob.Null>が返されます。       一時的なを取得する前にトランザクションを開始する必要があります`LOB`です。 それ以外の場合、<xref:System.Data.OracleClient.OracleDataReader>後でデータを取得できない可能性があります</xref:System.Data.OracleClient.OracleDataReader>。       一時的なを開くことも`LOB`DBMS_LOB を呼び出すことによって Oracle でします。CREATETEMPORARY システム ストアド プロシージャとバインディング、`LOB`出力パラメーターです。 クライアント側で、一時的な`LOB`はテーブルに基づくように動作`LOB`です。 例については、一時的なを更新する`LOB`トランザクションで囲む必要があります。       次の c# の例は、一時的なを開く方法を示します`LOB`です。      ```   OracleConnection connection = new OracleConnection(&quot;server=MyServer; integrated security=yes;&quot;);   connection.Open();   OracleTransaction transaction = connection.BeginTransaction();   OracleCommand command = connection.CreateCommand();   command.Transaction = transaction;   command.CommandText = &quot;declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;&quot;;   command.Parameters.Add(new OracleParameter(&quot;tempblob&quot;, OracleType.Blob)).Direction = ParameterDirection.Output;   command.ExecuteNonQuery();   OracleLob tempLob = (OracleLob)command.Parameters[0].Value;   byte[] tempbuff = new byte[10000];   tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);   tempLob.Write(tempbuff,0,tempbuff.Length);   tempLob.EndBatch();   command.Parameters.Clear();   command.CommandText = &quot;MyTable.MyProc&quot;;   command.CommandType = CommandType.StoredProcedure;     command.Parameters.Add(new OracleParameter(&quot;ImportDoc&quot;, OracleType.Blob)).Value = tempLob;   command.ExecuteNonQuery();   transaction.Commit();   connection.Close   ```      > [!NOTE]>、継承された<xref:System.IO.Stream.WriteByte%2A>、文字データと共に使用した場合、メソッドが失敗したと<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.IO.Stream.WriteByte%2A>。 使用して、<xref:System.Data.OracleClient.OracleLob.Write%2A>メソッド代わりにします</xref:System.Data.OracleClient.OracleLob.Write%2A>。   >> 一時`LOB`が閉じ、接続が閉じられたときにのみでは、プールところですが、負荷の一時的な`LOB`は閉じられません。 一時的な廃棄することにより解決できます`LOB`、呼び出すことによって`tempLob.Dispose()`です。"
  syntax:
    content: 'public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable'
  inheritance:
  - System.IO.Stream
  implements:
  - System.Data.SqlTypes.INullable
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)
  id: Append(System.Data.OracleClient.OracleLob)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Append(OracleLob)
  nameWithType: OracleLob.Append(OracleLob)
  fullName: System.Data.OracleClient.OracleLob.Append(OracleLob)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "指定された対象からデータを追加<xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;></xref>現在<xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;></xref>です。"
  remarks: "書き込む、 `LOB`、取得する必要があります、`LOB`開始されたローカル トランザクションを使用して、SQL SELECT ステートメントの FOR UPDATE 句が必要です。       すべてのデータ ソースから`LOB`が現在の末尾に追加されます`LOB`です。 どちらの位置`LOB`が評価されるか、このプロセス中に変更します。       基になるデータ型では、同じでなければなりません常にします。 たとえばから<xref:System.Data.OracleClient.OracleType>、 <xref:System.Data.OracleClient.OracleLob> <xref:System.Data.OracleClient.OracleType>。</xref:System.Data.OracleClient.OracleType>必要もあります</xref:System.Data.OracleClient.OracleLob>変換先</xref:System.Data.OracleClient.OracleType>を追加します。      > [!NOTE] > このリリースでは、読み取り専用への書き込み操作で`LOB`可能性がありますが、更新されない、`LOB`サーバーでします。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す場合があります</xref:System.Data.OracleClient.OracleLob>。"
  syntax:
    content: public void Append (System.Data.OracleClient.OracleLob source);
    parameters:
    - id: source
      type: System.Data.OracleClient.OracleLob
      description: "<xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;> </xref>元となるデータを追加します。"
  overload: System.Data.OracleClient.OracleLob.Append*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "ソース<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>が null です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ソース<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>が null、または接続が閉じられました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "ソース<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>オブジェクトが終了または破棄します。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.BeginBatch
  id: BeginBatch
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: BeginBatch()
  nameWithType: OracleLob.BeginBatch()
  fullName: System.Data.OracleClient.OracleLob.BeginBatch()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "サーバー側のトリガーが複数の読み取り操作の実行中に発生しないようにします。"
  remarks: "開く、`LOB`で<xref:System.Data.OracleClient.OracleLobOpenMode>モードですしたがって、、`LOB`のみ読み取ることができます、 <xref:System.Data.OracleClient.OracleLob.EndBatch%2A>。</xref:System.Data.OracleClient.OracleLob.EndBatch%2A>の対応する呼び出しまで、には書き込まれません</xref:System.Data.OracleClient.OracleLobOpenMode>。 バッチ書き込みを実行する、 `LOB`、<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A><xref:System.Data.OracleClient.OracleLobOpenMode></xref:System.Data.OracleClient.OracleLobOpenMode></xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>を呼び出す。       Oracle BeginBatch&2; 回以上同じトランザクション内で現在の呼び出しをスロー&quot;か&22293;: LOB は、同じトランザクションで既に開かれて&quot;エラーです。 さらに、取得した場合、`LOB`を使用して別<xref:System.Data.OracleClient.OracleDataReader>、最初の呼び出し元が呼び出されると、<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>メソッド、同じエラーが生成されます</xref:System.Data.OracleClient.OracleLob.EndBatch%2A></xref:System.Data.OracleClient.OracleDataReader>。 したがって、 <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> <xref:System.Data.OracleClient.OracleLob>。</xref:System.Data.OracleClient.OracleLob>の使用が終了したときにメソッド</xref:System.Data.OracleClient.OracleLob.EndBatch%2A>を呼び出す必要があります。"
  syntax:
    content: public void BeginBatch ();
    parameters: []
  overload: System.Data.OracleClient.OracleLob.BeginBatch*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)
  id: BeginBatch(System.Data.OracleClient.OracleLobOpenMode)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: BeginBatch(OracleLobOpenMode)
  nameWithType: OracleLob.BeginBatch(OracleLobOpenMode)
  fullName: System.Data.OracleClient.OracleLob.BeginBatch(OracleLobOpenMode)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "サーバー側のトリガーを実行する複数の読み取り中に発生させると、指定されたアクセス モードでの書き込み操作に防ぎます。"
  remarks: "書き込む、 `LOB`、取得する必要があります、`LOB`開始されたローカル トランザクションを使用して、SQL SELECT ステートメントの FOR UPDATE 句が必要です。       呼び出す<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>、同じトランザクション内で複数回現在スロー Oracle&quot;か&22293;: LOB は、同じトランザクションで既に開かれて&quot;エラー</xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> 。 さらに、取得した場合、`LOB`を使用して別<xref:System.Data.OracleClient.OracleDataReader>、最初の呼び出し元が呼び出されると、<xref:System.Data.OracleClient.OracleLob.EndBatch%2A>メソッド、同じエラーが生成されます</xref:System.Data.OracleClient.OracleLob.EndBatch%2A></xref:System.Data.OracleClient.OracleDataReader>。 したがって、 <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> <xref:System.Data.OracleClient.OracleLob>。</xref:System.Data.OracleClient.OracleLob>の使用が終了したときにメソッド</xref:System.Data.OracleClient.OracleLob.EndBatch%2A>を呼び出す必要があります。"
  syntax:
    content: public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);
    parameters:
    - id: mode
      type: System.Data.OracleClient.OracleLobOpenMode
      description: "モード (のいずれか、 <xref href=&quot;System.Data.OracleClient.OracleLobOpenMode&quot;> </xref>値) を<xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;></xref>この BeginBatch 呼び出しと、対応する間アクセスできる<xref:System.Data.OracleClient.OracleLob.EndBatch*>呼び出します</xref:System.Data.OracleClient.OracleLob.EndBatch*>。"
  overload: System.Data.OracleClient.OracleLob.BeginBatch*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.CanRead
  id: CanRead
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: CanRead
  nameWithType: OracleLob.CanRead
  fullName: System.Data.OracleClient.OracleLob.CanRead
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "示す値を取得するかどうか、 <xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;> </xref>ストリームを読み取ることができます。"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;> </xref>ストリームが読み取りをサポート、それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>場合、 <xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;> </xref>が終了または破棄します。"
  overload: System.Data.OracleClient.OracleLob.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.CanSeek
  id: CanSeek
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: CanSeek
  nameWithType: OracleLob.CanSeek
  fullName: System.Data.OracleClient.OracleLob.CanSeek
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "実行できる前方と後方のシーク操作をするかどうかを示す値を取得します。"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>場合、 <xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;> </xref>が終了または破棄されると、それ以外の場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。 Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> for <xref href=&quot;System.Data.OracleClient.OracleLob.Null&quot;></xref>."
  overload: System.Data.OracleClient.OracleLob.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.CanWrite
  id: CanWrite
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: CanWrite
  nameWithType: OracleLob.CanWrite
  fullName: System.Data.OracleClient.OracleLob.CanWrite
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "常に true を返します、かどうかに関係なく、 <xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;> </xref>かの書き込みをサポートします。"
  remarks: "書き込みを`LOB`、取得する必要があります、`LOB`を使用して、SQL SELECT ステートメントの FOR UPDATE 句は、開始必要がありますが、ローカル トランザクション。"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "常に返します<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>かどうかに関係なく、開くか、破棄されていない、 <xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;> </xref>で記述するか、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>場合、 <xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;> </xref>が終了または破棄します。"
  overload: System.Data.OracleClient.OracleLob.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.ChunkSize
  id: ChunkSize
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: ChunkSize
  nameWithType: OracleLob.ChunkSize
  fullName: System.Data.OracleClient.OracleLob.ChunkSize
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "取得したり、読み取り/書き込み操作中に、サーバーに送信するバイトの最小数を示す値を取得します。"
  remarks: "ChunkSize プロパティによって返される値は、.NET Framework Data Provider for Oracle の設定ではありません。 代わりに、これは、Oracle Call Interface (OCI) がサーバーとの通信に使用する値です。 ChunkSize を使用して、クライアント側のチャンクが同じサイズであることを確認します。 小さいチャンクで読み取りまたは書き込みが、データをキャッシュしていないと、完全なパケットの受信または送信されていないため、サーバーへの低い最適化ラウンド トリップが原因でします。"
  syntax:
    content: public int ChunkSize { get; }
    return:
      type: System.Int32
      description: "取得または送信するバイト数の最小数。"
  overload: System.Data.OracleClient.OracleLob.ChunkSize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Clone
  id: Clone
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Clone()
  nameWithType: OracleLob.Clone()
  fullName: System.Data.OracleClient.OracleLob.Clone()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "新たに作成<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>同じ Oracle が参照するオブジェクト<xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;></xref>元<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>オブジェクト。"
  remarks: "新しいプロパティ<xref:System.Data.OracleClient.OracleLob>オブジェクトが最初に元のオブジェクトと同じ値を持ちます</xref:System.Data.OracleClient.OracleLob>。 ただし、複製完了後、各<xref:System.Data.OracleClient.OracleLob>オブジェクトは、他から独立しています</xref:System.Data.OracleClient.OracleLob>。 値を変更するなど、<xref:System.Data.OracleClient.OracleLob.Position%2A>元のプロパティ<xref:System.Data.OracleClient.OracleLob>の値は変わりません<xref:System.Data.OracleClient.OracleLob.Position%2A>コピーにします</xref:System.Data.OracleClient.OracleLob.Position%2A></xref:System.Data.OracleClient.OracleLob></xref:System.Data.OracleClient.OracleLob.Position%2A>。"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "新しい<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>同じ Oracle が参照するオブジェクト<xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;></xref>元<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>オブジェクト。"
  overload: System.Data.OracleClient.OracleLob.Clone*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Connection
  id: Connection
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Connection
  nameWithType: OracleLob.Connection
  fullName: System.Data.OracleClient.OracleLob.Connection
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "取得、 <xref href=&quot;System.Data.OracleClient.OracleConnection&quot;> </xref>のこのインスタンスによって使用される、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>です。"
  syntax:
    content: public System.Data.OracleClient.OracleConnection Connection { get; }
    return:
      type: System.Data.OracleClient.OracleConnection
      description: "データ ソースに接続します。"
  overload: System.Data.OracleClient.OracleLob.Connection*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)
  id: CopyTo(System.Data.OracleClient.OracleLob)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: CopyTo(OracleLob)
  nameWithType: OracleLob.CopyTo(OracleLob)
  fullName: System.Data.OracleClient.OracleLob.CopyTo(OracleLob)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "これをコピーします。 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>先<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>です。"
  remarks: "基になるデータ型では、同じでなければなりません常にします。 たとえば、コピーする場合はから<xref:System.Data.OracleClient.OracleType>、移行先の<xref:System.Data.OracleClient.OracleLob><xref:System.Data.OracleClient.OracleType>。</xref:System.Data.OracleClient.OracleType>必要もあります。</xref:System.Data.OracleClient.OracleLob> </xref:System.Data.OracleClient.OracleType>       コピー先のオフセットが変換先の末尾を越えるかどうか`LOB`、`LOB`データがコピーに拡張します。 最後の間隔、`LOB`最後を越えたコピー先のオフセットは&0; で埋められますと`BLOB`データ型とスペースを`CLOB`と`NCLOB`データ型。       書き込む、 `LOB`、取得する必要があります、`LOB`開始されたローカル トランザクションを使用して、SQL SELECT ステートメントの FOR UPDATE 句が必要です。      > [!NOTE] > このリリースでは、読み取り専用への書き込み操作で`LOB`が成功したが更新されない可能性があります、`LOB`サーバーにします。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す場合があります</xref:System.Data.OracleClient.OracleLob>。   >>、`CopyTo`メソッドでは、対象のコンテンツはクリアしません`OracleLob`コピー操作を実行する前にします。"
  syntax:
    content: public long CopyTo (System.Data.OracleClient.OracleLob destination);
    parameters:
    - id: destination
      type: System.Data.OracleClient.OracleLob
      description: "転送先<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>です。"
    return:
      type: System.Int64
      description: "コピーされたバイト数。 これには、すべての埋め込みバイトが含まれません。"
  overload: System.Data.OracleClient.OracleLob.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>で指定されている、 <code> destination </code>パラメーターが null です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は、トランザクション内で、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>オブジェクトが null、または接続が閉じられました。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)
  id: CopyTo(System.Data.OracleClient.OracleLob,System.Int64)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: CopyTo(OracleLob,Int64)
  nameWithType: OracleLob.CopyTo(OracleLob,Int64)
  fullName: System.Data.OracleClient.OracleLob.CopyTo(OracleLob,Int64)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "これをコピーします。 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>先<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>で指定されたデータ量。"
  remarks: "基になるデータ型では、同じでなければなりません常にします。 たとえば、コピーする場合はから<xref:System.Data.OracleClient.OracleType>、移行先の<xref:System.Data.OracleClient.OracleLob><xref:System.Data.OracleClient.OracleType>。</xref:System.Data.OracleClient.OracleType>必要もあります。</xref:System.Data.OracleClient.OracleLob> </xref:System.Data.OracleClient.OracleType>       コピー先のオフセットが変換先の末尾を越えるかどうか`LOB`、`LOB`データがコピーに拡張します。 末尾の間の空白`LOB`末尾を越えるコピー先のオフセットはの場合は&0; で埋められますと`BLOB`データ型とスペースを`CLOB`と`NCLOB`データ型。       書き込む、 `LOB`、取得する必要があります、`LOB`開始されたローカル トランザクションを使用して、SQL SELECT ステートメントの FOR UPDATE 句が必要です。      > [!NOTE] > このリリースでは、読み取り専用への書き込み操作で`LOB`可能性がありますが、更新されない、`LOB`サーバーでします。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す場合があります</xref:System.Data.OracleClient.OracleLob>。   >>、`CopyTo`メソッドでは、対象のコンテンツはクリアしません`OracleLob`コピー操作を実行する前にします。"
  syntax:
    content: public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);
    parameters:
    - id: destination
      type: System.Data.OracleClient.OracleLob
      description: "変換先<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>"
    - id: destinationOffset
      type: System.Int64
      description: "コピー先にオフセットします。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型をバイト数は偶数でなければなりません。"
    return:
      type: System.Int64
      description: "コピーされたバイト数。 これには、すべての埋め込みバイトが含まれません。"
  overload: System.Data.OracleClient.OracleLob.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>で指定されている、 <code> destination </code>パラメーターがいっぱいです。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定された値、 <code> destinationOffset </code>パラメーターは、ゼロ未満か 4 ギガバイトより大きい。       - または - で指定された値、 <code> destinationOffset </code>のパラメーター、 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>または<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型が均等でないです。       - または - を指定する必要があります<xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;></xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>数が偶数バイトのデータ型。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は、トランザクション内で、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>オブジェクトが null、または接続が閉じられました。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)
  id: CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: CopyTo(Int64,OracleLob,Int64,Int64)
  nameWithType: OracleLob.CopyTo(Int64,OracleLob,Int64,Int64)
  fullName: System.Data.OracleClient.OracleLob.CopyTo(Int64,OracleLob,Int64,Int64)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "これをコピーします。 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>先<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>データ、およびソース オフセットの指定した容量を持つ。"
  remarks: "基になるデータ型では、同じでなければなりません常にします。 たとえば、コピーする場合はから<xref:System.Data.OracleClient.OracleType>、移行先の<xref:System.Data.OracleClient.OracleLob><xref:System.Data.OracleClient.OracleType>。</xref:System.Data.OracleClient.OracleType>必要もあります。</xref:System.Data.OracleClient.OracleLob> </xref:System.Data.OracleClient.OracleType>       コピー先のオフセットが変換先の末尾を越えるかどうか`LOB`、`LOB`データがコピーに拡張します。 末尾の間の空白`LOB`末尾を越えるコピー先のオフセットはの場合は&0; で埋められますと`BLOB`データ型とスペースを`CLOB`と`NCLOB`データ型。       書き込む、 `LOB`、取得する必要があります、`LOB`開始されたローカル トランザクションを使用して、SQL SELECT ステートメントの FOR UPDATE 句が必要です。      > [!NOTE] > このリリースでは、読み取り専用への書き込み操作で`LOB`可能性がありますが、更新されない、`LOB`サーバーでします。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す場合があります</xref:System.Data.OracleClient.OracleLob>。   >>、`CopyTo`メソッドでは、対象のコンテンツはクリアしません`OracleLob`コピー操作を実行する前にします。"
  syntax:
    content: public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);
    parameters:
    - id: sourceOffset
      type: System.Int64
      description: "コピー先からのオフセット。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型の場合は偶数でなければなりません。"
    - id: destination
      type: System.Data.OracleClient.OracleLob
      description: "The destination <xref uid=&quot;langword_csharp_OracleLob&quot; name=&quot;OracleLob&quot; href=&quot;&quot;></xref><xref href=&quot;System.Data.OracleClient&quot;></xref>."
    - id: destinationOffset
      type: System.Int64
      description: "コピーする先のオフセット。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型の場合は偶数でなければなりません。"
    - id: amount
      type: System.Int64
      description: "(バイト単位) をコピーする、データの量。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型の場合は偶数でなければなりません。"
    return:
      type: System.Int64
      description: "コピーされたバイト数。 これには、すべての埋め込みバイトが含まれません。"
  overload: System.Data.OracleClient.OracleLob.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>で指定されている、 <code> destination </code>パラメーターがいっぱいです。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定された値、 <code> amount </code>、 <code> sourceOffset </code>、または<code> destinationOffset </code>パラメーターは、ゼロ未満か 4 ギガバイトより大きい。       -or-       A value specified in the <code>amount</code>, <code>sourceOffset</code>, or <code>destinationOffset</code> parameter for a <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref> data type is not even."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は、トランザクション内で、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>オブジェクトが null、または接続が閉じられました。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: OracleLob.Dispose(Boolean)
  fullName: System.Data.OracleClient.OracleLob.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.Data.OracleClient.OracleLob.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.EndBatch
  id: EndBatch
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: EndBatch()
  nameWithType: OracleLob.EndBatch()
  fullName: System.Data.OracleClient.OracleLob.EndBatch()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "により、サーバー側のトリガーを複数の書き込み操作を実行した後の起動処理を再開します。"
  remarks: "<xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> <xref:System.Data.OracleClient.OracleLob>。</xref:System.Data.OracleClient.OracleLob>で書き込み操作の実行を開始する前にメソッド</xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>を呼び出す"
  syntax:
    content: public void EndBatch ();
    parameters: []
  overload: System.Data.OracleClient.OracleLob.EndBatch*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Erase
  id: Erase
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Erase()
  nameWithType: OracleLob.Erase()
  fullName: System.Data.OracleClient.OracleLob.Erase()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "このデータはすべて消去<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>です。"
  remarks: "消去では、データは切り捨てられません。 `LOB`の長さは一定の`BLOB`データ型と 0x00 で、消去されたデータを交換します。 `CLOB`および`NCLOB`データ型はスペースで置き換えられます。       書き込む、 `LOB`、取得する必要があります、`LOB`開始されたローカル トランザクションを使用して、SQL SELECT ステートメントの FOR UPDATE 句が必要です。      > [!NOTE] > このリリースでは、読み取り専用への書き込み操作で`LOB`可能性がありますが、更新されない、`LOB`サーバーでします。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す場合があります</xref:System.Data.OracleClient.OracleLob>。"
  syntax:
    content: public long Erase ();
    parameters: []
    return:
      type: System.Int64
      description: "消去されたバイト数。"
  overload: System.Data.OracleClient.OracleLob.Erase*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は、トランザクション内で、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>オブジェクトが null、または接続が閉じられました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)
  id: Erase(System.Int64,System.Int64)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Erase(Int64,Int64)
  nameWithType: OracleLob.Erase(Int64,Int64)
  fullName: System.Data.OracleClient.OracleLob.Erase(Int64,Int64)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "指定されたこのからのデータ量が消去される<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>です。"
  remarks: "内の値の合計、`offset`と`amount`パラメーターは<xref:System.Data.OracleClient.OracleLob>.</xref:System.Data.OracleClient.OracleLob>のサイズよりも大きくすることができます したがって、によって返されるより大きい値を指定する、<xref:System.Data.OracleClient.OracleLob.Length%2A>プロパティが成功したただし<xref:System.Data.OracleClient.OracleLob.Erase%2A><xref:System.Data.OracleClient.OracleLob>.</xref:System.Data.OracleClient.OracleLob>の末尾に消去するだけ</xref:System.Data.OracleClient.OracleLob.Erase%2A></xref:System.Data.OracleClient.OracleLob.Length%2A> (負の値が渡された場合に同様に、 `offset`、<xref:System.Data.OracleClient.OracleLob.Erase%2A>は成功しますが、限り消去の先頭から始まる、 <xref:System.Data.OracleClient.OracleLob>.)</xref:System.Data.OracleClient.OracleLob> </xref:System.Data.OracleClient.OracleLob.Erase%2A>この動作は異なる、<xref:System.Data.OracleClient.OracleLob.Read%2A>と<xref:System.Data.OracleClient.OracleLob.Write%2A>メソッド、およびプランで指定された値からすべてのデータを消去できるという利点`offset`を実際のサイズを確認するサーバーに追加のラウンドト リップを行わず</xref:System.Data.OracleClient.OracleLob.Write%2A></xref:System.Data.OracleClient.OracleLob.Read%2A>。       <xref:System.Data.OracleClient.OracleLob.Erase%2A>データは切り捨てられません。</xref:System.Data.OracleClient.OracleLob.Erase%2A> `LOB`の長さは一定の`BLOB`データ型と 0x00 で、消去されたデータを交換します。 `CLOB`および`NCLOB`データ型はスペースで置き換えられます。       書き込む、 `LOB`、取得する必要があります、`LOB`開始されたローカル トランザクションを使用して、SQL SELECT ステートメントの FOR UPDATE 句が必要です。      > [!NOTE] > このリリースでは、読み取り専用への書き込み操作で`LOB`可能性がありますが、更新されない、`LOB`サーバーでします。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す場合があります</xref:System.Data.OracleClient.OracleLob>。"
  syntax:
    content: public long Erase (long offset, long amount);
    parameters:
    - id: offset
      type: System.Int64
      description: "位置のオフセットを消去します。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型の場合は偶数でなければなりません。"
    - id: amount
      type: System.Int64
      description: "データ量 (バイト単位) を消去します。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型の場合は偶数でなければなりません。"
    return:
      type: System.Int64
      description: "消去されたバイト数。"
  overload: System.Data.OracleClient.OracleLob.Erase*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は、トランザクション内で、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>オブジェクトが null、または接続が閉じられました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Flush
  id: Flush
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Flush()
  nameWithType: OracleLob.Flush()
  fullName: System.Data.OracleClient.OracleLob.Flush()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "現在サポートされていません。"
  remarks: "このリリースでこのメソッドは機能しません。"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Data.OracleClient.OracleLob.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.IsBatched
  id: IsBatched
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: IsBatched
  nameWithType: OracleLob.IsBatched
  fullName: System.Data.OracleClient.OracleLob.IsBatched
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "アプリケーションを呼び出すかどうかを示す値を取得、<xref:System.Data.OracleClient.OracleLob.BeginBatch*>メソッド</xref:System.Data.OracleClient.OracleLob.BeginBatch*>。"
  remarks: 'Oracle 8.0.5 サーバー、Oracle の使用時に&quot;か 00600: 内部エラー コード&quot;例外がスローされます。'
  syntax:
    content: public bool IsBatched { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>アプリケーションが呼び出された場合、<xref:System.Data.OracleClient.OracleLob.BeginBatch*>メソッド、それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Data.OracleClient.OracleLob.BeginBatch*> 。"
  overload: System.Data.OracleClient.OracleLob.IsBatched*
  exceptions:
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.IsNull
  id: IsNull
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: IsNull
  nameWithType: OracleLob.IsNull
  fullName: System.Data.OracleClient.OracleLob.IsNull
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>は、 <xref href=&quot;System.Data.OracleClient.OracleBFile.Null&quot;> </xref>ストリーム。"
  syntax:
    content: public bool IsNull { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref> is a <xref href=&quot;System.Data.OracleClient.OracleBFile.Null&quot;></xref> stream, otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.OracleClient.OracleLob.IsNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.IsTemporary
  id: IsTemporary
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: IsTemporary
  nameWithType: OracleLob.IsTemporary
  fullName: System.Data.OracleClient.OracleLob.IsTemporary
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>は一時的な<xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;></xref>です。"
  remarks: "次の例は、一時的なを作成する方法を示します`LOB`です。      ```   OracleConnection connection = new OracleConnection(&quot;server=MyServer; integrated security=yes;&quot;);   connection.Open();   OracleTransaction transaction = connection.BeginTransaction();   OracleCommand command = connection.CreateCommand();   command.Transaction = transaction;   command.CommandText = &quot;declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;&quot;;   command.Parameters.Add(new OracleParameter(&quot;tempblob&quot;, OracleType.Blob)).Direction = ParameterDirection.Output;   command.ExecuteNonQuery();   OracleLob tempLob = (OracleLob)command.Parameters[0].Value;   tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);   tempLob.Write(tempbuff,0,tempbuff.Length);   tempLob.EndBatch();   command.Parameters.Clear();   command.CommandText = &quot;MyTable.MyProc&quot;;   command.CommandType = CommandType.StoredProcedure;     command.Parameters.Add(new OracleParameter(&quot;ImportDoc&quot;, OracleType.Blob)).Value = tempLob;   command.ExecuteNonQuery();   transaction.Commit();   connection.Close   ```"
  syntax:
    content: public bool IsTemporary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>は一時的な<xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;></xref>それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.OracleClient.OracleLob.IsTemporary*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Length
  id: Length
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Length
  nameWithType: OracleLob.Length
  fullName: System.Data.OracleClient.OracleLob.Length
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "サイズを表す値を取得、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>です。"
  remarks: "サイズ、<xref:System.Data.OracleClient.OracleLob>が常にすべてのデータ型のバイト単位で返されます</xref:System.Data.OracleClient.OracleLob>。"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "サイズ、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref> (バイト単位)。"
  overload: System.Data.OracleClient.OracleLob.Length*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.LobType
  id: LobType
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: LobType
  nameWithType: OracleLob.LobType
  fullName: System.Data.OracleClient.OracleLob.LobType
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "返す値を取得、 <xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;> </xref>データ型。"
  remarks: "<xref:System.Data.OracleClient.OracleLob>、次のいずれかの<xref:System.Data.OracleClient.OracleType>データ型</xref:System.Data.OracleClient.OracleType></xref:System.Data.OracleClient.OracleLob>。      |OracleType データ タイプ |説明 |  |--------------------------|-----------------|  |`Blob`|Oracle `BLOB` 4 ギガバイト単位の最大サイズのバイナリ データを格納するデータ型。 これは、<xref:System.Array><xref:System.Byte>型にマップします |。  |`Clob`|Oracle`CLOB`データ型に基づいて既定の文字、文字データを含む 4 ギガバイト単位の最大サイズは、サーバーに設定します</xref:System.Byte></xref:System.Array>。 これは<xref:System.String>にマップします |。  |`NClob`|Oracle`NCLOB`を文字データを含むデータ型が各国語文字が 4 ギガバイト単位の最大サイズを使用してサーバー セットに基づく</xref:System.String>。 これはマップ<xref:System.String>. |</xref:System.String>"
  syntax:
    content: public System.Data.OracleClient.OracleType LobType { get; }
    return:
      type: System.Data.OracleClient.OracleType
      description: "1 つ、 <xref href=&quot;System.Data.OracleClient.OracleType&quot;> </xref> <xref uid=&quot;langword_csharp_LOB&quot; name=&quot;LOB&quot; href=&quot;&quot;> </xref>データ型。"
  overload: System.Data.OracleClient.OracleLob.LobType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Null
  id: "Null"
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: "Null"
  nameWithType: OracleLob.Null
  fullName: System.Data.OracleClient.OracleLob.Null
  type: Field
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "Null 値を表す<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>オブジェクト。"
  remarks: "構築できます、<xref:System.Data.OracleClient.OracleLob>この形式を使用して NULL である:```   OracleLob myLob = OracleLOB.Null;   ```をテストするには、主に、この手法を使用するかどうか、`LOB`はこの例のように、NULL の場合、サーバーから返さ: ```   If(myLob == OracleLob.Null)   ``` NULL`LOB`ゼロのバイトと同様に動作`LOB`点で<xref:System.Data.OracleClient.OracleLob.Read%2A>が成功し、常に&0; バイトを返します</xref:System.Data.OracleClient.OracleLob.Read%2A></xref:System.Data.OracleClient.OracleLob>。"
  syntax:
    content: public static readonly System.Data.OracleClient.OracleLob Null;
    return:
      type: System.Data.OracleClient.OracleLob
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Position
  id: Position
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Position
  nameWithType: OracleLob.Position
  fullName: System.Data.OracleClient.OracleLob.Position
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "内の位置を読み取り、現在の取得、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>ストリーム。"
  remarks: "ストリームは、取得または位置を設定するシークをサポートする必要があります。 使用して、 <xref:System.Data.OracleClient.OracleLob.CanSeek%2A>、ストリームがシークをサポートしているかどうかを決定するプロパティ</xref:System.Data.OracleClient.OracleLob.CanSeek%2A>。       ストリームの長さを超えた位置にシークはサポートされています。 奇数の位置までシーク`CLOB`と`NCLOB`データ型もサポートされています。 詳細については、の「解説」セクションを参照してください、<xref:System.Data.OracleClient.OracleLob.Read%2A>プロパティ</xref:System.Data.OracleClient.OracleLob.Read%2A>。       位置プロパティはありませんの追跡が消費されている、スキップ、ストリーム、またはその両方からのバイト数。"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "内の現在位置、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>ストリーム。"
  overload: System.Data.OracleClient.OracleLob.Position*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: OracleLob.Read(Byte[],Int32,Int32)
  fullName: System.Data.OracleClient.OracleLob.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "現在のバイトのシーケンスを読み取り<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>バイト数だけストリーム内の位置が読み取るストリーム。"
  remarks: "Read メソッドは、最大数を読み取ります`count`現在からのバイト ストリームおよびそれらの格納に`buffer`始点`offset`です。 読み取りバイト数だけストリーム内の現在位置が高度なただし、例外が発生する場合、ストリーム内の現在の位置は変更されません。 読み取りでは、読み取られたバイト数を返します。 ストリームの末尾には、位置は現在場合にのみ、戻り値は&0; です。 読み取りは、データがないことには、少なくとも 1 バイトのデータを読み取ることができるまでブロックされます。読み取りを試行した場合は 0 を返しますを読み取り、`LOB`の最後に、現在の位置が場合`LOB`です。 ストリームの末尾に達していない場合でも、読み取りは要求されたより少ないバイト数を返すことができます。       .NET Framework Data Provider for Oracle は、すべて処理`CLOB`と`NCLOB`データを Unicode として。 そのため、アクセスするときに`CLOB`と`NCLOB`データ型の場合は、常に扱うバイトの各文字は 2 バイトの数。 たとえば、3 文字の文字列として保存する場合、`NCLOB`ここで、文字セットが 1 文字を 4 バイトを実行する Oracle サーバー、`Read`操作、サーバーで、12 バイトとして格納されますが、6 バイトを文字列の長さを指定します。       次の c# の例を読み取る方法を示します<xref:System.Data.OracleClient.OracleLob>オブジェクト</xref:System.Data.OracleClient.OracleLob>。      ```   public static void ReadLobExample(OracleCommand command)   {      int actual = 0;         //Select some data.      // Table Schema:      //  &quot;CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)&quot;;      //  &quot;INSERT INTO TableWithLobs values (1, &quot;AA&quot;, &quot;AAA&quot;, N&quot;AAAA&quot;)&quot;;      command.CommandText = &quot;SELECT * FROM TableWithLobs&quot;;      OracleDataReader reader = command.ExecuteReader();      using(reader)      {         //Obtain the first row of data.         reader.Read();         //Obtain the LOBs (all 3 varieties).         OracleLob BLOB = reader.GetOracleLob(1);         OracleLob CLOB  = reader.GetOracleLob(2);         OracleLob NCLOB = reader.GetOracleLob(3);            //Example - Reading binary data (in chunks).         byte[] buffer = new byte[100];         while((actual = BLOB.Read(buffer, 0, buffer.Length)) >0)            Console.WriteLine(BLOB.LobType + &quot;.Read(&quot; + buffer + &quot;, &quot; + buffer.Length + &quot;) => &quot; + actual);            //Example - Reading CLOB/NCLOB data (in chunks).         //Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).         //However, because the OracleLob object inherits directly from the.NET stream object,          //all the existing classes that manipluate streams can also be used. For example, the          //.NET StreamReader makes converting the raw bytes into actual characters easier.         StreamReader streamreader = new StreamReader(CLOB, Encoding.Unicode);         char[] cbuffer = new char[100];         while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)            Console.WriteLine(CLOB.LobType + &quot;.Read(&quot; + new string(cbuffer, 0, actual) + &quot;, &quot; + cbuffer.Length + &quot;) => &quot; + actual);            //Example - Reading data (all at once).         //You could use StreamReader.ReadToEnd to obtain all the string data,or simply         //call OracleLob.Value to obtain a contiguous allocation of all the data.         Console.WriteLine(NCLOB.LobType + &quot;.Value => &quot; + NCLOB.Value);      }   }   ```構築することができます、<xref:System.Data.OracleClient.OracleLob>この形式を使用して NULL である:```   OracleLob myLob = OracleLob.Null;   ```をテストするには、主に、この手法を使用するかどうか、`LOB`は次の例に示すように、NULL の場合、サーバーから返される</xref:System.Data.OracleClient.OracleLob>。      ```   If(myLob == OracleLob.Null)   ```NULL`LOB`ゼロのバイトと同様に動作`LOB`で、読み取り成功を常に&0; バイトを返します。"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "バイトの配列。 指定したバイト配列の値を持つが、バッファーに含まれているこのメソッドが戻るとき`offset`と (`offset` + `count`)、現在のソースから読み取られたバイトに置き換えします。"
    - id: offset
      type: System.Int32
      description: "内の&0; から始まるバイト オフセット`buffer`開始位置を示す現在のストリームから読み取ったデータの格納します。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型の場合は偶数でなければなりません。"
    - id: count
      type: System.Int32
      description: "現在のストリームから読み取られるバイトの最大数。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型の場合は偶数でなければなりません。"
    return:
      type: System.Int32
      description: "バッファーに読み取られた合計バイト数。 バイト数は要求より小さくバイト数が、現在ご利用いただけませんまたはゼロ (0) の場合、ストリームの末尾に達していることがあります。"
  overload: System.Data.OracleClient.OracleLob.Read*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> buffer </code> Null 参照 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual Basic で)。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "値、 <code> offset </code>または<code> count </code>パラメーターは正の値ではありません。       または、オフセットとカウントのパラメーターの合計がバッファーの長さよりも大きくします。       - または - で指定された値、 <code> amount </code>または<code> offset </code>パラメーターは、ゼロ未満か 4 ギガバイトより大きい。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は、トランザクション内で、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>オブジェクトが null、または接続が閉じられました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: OracleLob.Seek(Int64,SeekOrigin)
  fullName: System.Data.OracleClient.OracleLob.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "現在の位置を設定<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>ストリーム。"
  remarks: "場合`offset`は負の場合、新しい位置はによって指定された位置を付ける必要があります`origin`で指定したバイト数だけ`offset`です。 場合`offset`0 の場合は、新しい位置がで指定した位置にある必要があります`origin`です。 場合`offset`が正の値であり、新しい位置で指定した位置に従う必要あります`origin`で指定したバイト数だけ`offset`です。       ストリームの長さを超えた位置にシークはサポートされています。 奇数の位置までシーク`CLOB`と`NCLOB`データ型もサポートされています。 詳細については、の「解説」セクションを参照してください、<xref:System.Data.OracleClient.OracleLob.Read%2A>プロパティ</xref:System.Data.OracleClient.OracleLob.Read%2A>。"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "原点からのバイト オフセット。 場合`offset`は負の場合、新しい位置の前に指定した位置`origin`で指定したバイト数だけ`offset`です。 場合`offset`0 の場合は、指定した位置は、新しい位置は`origin`します。 場合`offset`が正の値であり、新しい位置で指定した位置に依存して`origin`で指定したバイト数だけ`offset`です。"
    - id: origin
      type: System.IO.SeekOrigin
      description: "型の値<xref:System.IO.SeekOrigin>新しい位置を取得するために使用する参照ポイントを示すします</xref:System.IO.SeekOrigin>。"
    return:
      type: System.Int64
      description: "現在のストリーム内の新しい位置。"
  overload: System.Data.OracleClient.OracleLob.Seek*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> origin </code>パラメーターに有効な値が含まれていません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "結果として得られる位置は、値の長さを超えてです。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>オブジェクトが終了または破棄します。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: OracleLob.SetLength(Int64)
  fullName: System.Data.OracleClient.OracleLob.SetLength(Int64)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "長さを設定、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>ストリームを現在の長さ未満の値。"
  remarks: "長さを拡張しよう、<xref:System.Data.OracleClient.OracleLob>ストリーム失敗し、返します&quot;メッセージ: か&22926;: 指定トリムの長さは現在の LOB 値の長さより大きい&quot;Oracle サーバーから</xref:System.Data.OracleClient.OracleLob>。       ストリームには、書き込みと関数に SetLength をシークする両方をサポートする必要があります。       .NET Framework Data Provider for Oracle は、すべて処理`CLOB`と`NCLOB`データを Unicode として。 そのため、アクセスするときに`CLOB`と`NCLOB`データ型の場合は、常に扱うバイトの各文字は 2 バイトの数。 たとえば、3 文字の文字列として保存する場合、`NCLOB`ここで、文字セットが 1 文字を 4 バイトを実行する Oracle サーバー、`SetLength`操作、サーバーで、12 バイトとして格納されますが、6 バイトを文字列の長さを指定します。       書き込む、 `LOB`、取得する必要があります、`LOB`開始されたローカル トランザクションを使用して、SQL SELECT ステートメントの FOR UPDATE 句が必要です。      > [!NOTE] > を読み取り専用の書き込み操作`LOB`可能性がありますが、更新されない、`LOB`サーバーでします。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す場合があります</xref:System.Data.OracleClient.OracleLob>。"
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "現在の希望の長さ<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>バイト単位のストリーム。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型の場合は偶数でなければなりません。"
  overload: System.Data.OracleClient.OracleLob.SetLength*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定された値、 <code> value </code>のパラメーター、 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>または<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型が均等でないです。       - または - で指定された値、 <code> value </code>パラメーターは、ゼロ未満か 4 ギガバイトより大きい。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は、トランザクション内で、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>オブジェクトが null、または接続が閉じられました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Value
  id: Value
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Value
  nameWithType: OracleLob.Value
  fullName: System.Data.OracleClient.OracleLob.Value
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "等価の基になる値の共通言語ランタイム ストリームの値を取得します。"
  remarks: "<xref:System.Data.OracleClient.OracleType>、連続した型の配列として、データ型の値を返します全体の基になるデータ`Byte[]`</xref:System.Data.OracleClient.OracleType>。 <xref:System.Data.OracleClient.OracleType>と<xref:System.Data.OracleClient.OracleType>データ型、値を返します、すべてのデータとして、`String`データ型</xref:System.Data.OracleClient.OracleType></xref:System.Data.OracleClient.OracleType>。 Null データの場合は、値は<xref:System.DBNull>。</xref:System.DBNull>を返します。 返された値を比較すると、できると区別する空のデータの間でデータ、およびデータは null です。      > [!NOTE] > を使用する利点`LOB`データ型は、大量のクライアント側のチャンク単位でデータを取得する機能。 ただし、値を使用する場合に、すべてのデータを取得、`LOB`アプリケーションのオーバーヘッドを大幅に向上する可能性が&1; つの連続したチャンクとして列です。"
  syntax:
    content: public object Value { get; }
    return:
      type: System.Object
      description: "For <xref href=&quot;System.Data.OracleClient.OracleType&quot;></xref>, an array of type <xref uid=&quot;langword_csharp_Byte[]&quot; name=&quot;Byte[]&quot; href=&quot;&quot;></xref>. For <xref href=&quot;System.Data.OracleClient.OracleType&quot;></xref> and <xref href=&quot;System.Data.OracleClient.OracleType&quot;></xref>, a <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Null のデータの<xref href=&quot;System.DBNull&quot;></xref>です。"
  overload: System.Data.OracleClient.OracleLob.Value*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: OracleLob.Write(Byte[],Int32,Int32)
  fullName: System.Data.OracleClient.OracleLob.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "現在のバイトのシーケンスを書き込み<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>ストリーム、および、書き込まれたバイト数だけストリーム内の現在位置を進めます。"
  remarks: "書き込み操作が成功した場合、ストリーム内の位置は、書き込まれたバイト数だけ進めます。 例外が発生する場合、ストリーム内の位置は変更されません。       末尾を越えて書き込み`LOB`が許可され、拡大、`LOB`によって書き込まれたバイト数。       .NET Framework Data Provider for Oracle は、すべて処理`CLOB`と`NCLOB`データを Unicode として。 そのため、アクセスするときに`CLOB`と`NCLOB`データ型の場合は、常に扱うバイトの各文字は 2 バイトの数。 たとえば、3 文字の文字列として保存する場合、`NCLOB`ここで、文字セットが 1 文字を 4 バイトを実行する Oracle サーバー、`Write`操作、サーバーで、12 バイトとして格納されますが、6 バイトを文字列の長さを指定します。       書き込む、 `LOB`、取得する必要があります、`LOB`開始されたローカル トランザクションを使用して、SQL SELECT ステートメントの FOR UPDATE 句が必要です。       次の c# の例を書き込む方法を示しています<xref:System.Data.OracleClient.OracleLob>オブジェクト</xref:System.Data.OracleClient.OracleLob>。      ```   public static void WriteLobExample(OracleCommand command)   {      //Note: Updating LOB data requires a transaction.      command.Transaction = command.Connection.BeginTransaction();      //Select some data.      //    Table Schema:      //        &quot;CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)&quot;;      //        &quot;INSERT INTO tablewithlobs values (1, &quot;AA&quot;, &quot;AAA&quot;)&quot;;      command.CommandText = &quot;SELECT * FROM TableWithLobs FOR UPDATE&quot;;      OracleDataReader reader = command.ExecuteReader();      using(reader)      {         //Obtain the first row of data.         reader.Read();         //Obtain both LOBs.         OracleLob BLOB1    = reader.GetOracleLob(1);         OracleLob BLOB2    = reader.GetOracleLob(2);         //Perform any desired operations on the LOB, (read, position, and so on).         //...         //Example - Writing binary data (directly to the backend).         //To write, you can use any of the stream classes, or write raw binary data using          //the OracleLob write method. Writing character vs. binary is the same;         //however note that character is always in terms of Unicode byte counts         //(for example: even number of bytes - 2 bytes for every Unicode character).         byte[] buffer = new byte[100];         buffer[0] = 0xCC;         buffer[1] = 0xDD;         BLOB1.Write(buffer, 0, 2);         BLOB1.Position = 0;         Console.WriteLine(BLOB1.LobType + &quot;.Write(&quot; + buffer + &quot;, 0, 2) => &quot; + BLOB1.Value);            //Example - Copying data into another LOB.         long actual = BLOB1.CopyTo(BLOB2);         Console.WriteLine(BLOB1.LobType + &quot;.CopyTo(&quot; + BLOB2.Value + &quot;) => &quot; + actual);            //Commit the transaction now that everything succeeded.         //Note: On error, Transaction.Dispose is called (from the using statement)         //and will automatically roll-back the pending transaction.         command.Transaction.Commit();      }   }   ```      > [!NOTE]> の書き込み操作を読み取り専用に`LOB`可能性がありますが、更新されない、`LOB`サーバーでします。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す場合があります</xref:System.Data.OracleClient.OracleLob>。"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "バイトの配列。 このメソッドで指定されたバイト数はコピー`count`から`buffer`現在のストリームにします。"
    - id: offset
      type: System.Int32
      description: "内の&0; から始まるバイト オフセット`buffer`現在のストリームにバイトのコピーを開始する位置。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型の場合は偶数でなければなりません。"
    - id: count
      type: System.Int32
      description: "現在のストリームに書き込むバイト数。 <xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;> </xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>データ型の場合は偶数でなければなりません。"
  overload: System.Data.OracleClient.OracleLob.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> buffer </code>パラメーターが null 参照 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual Basic で)。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "値、 <code> offset </code>または<code> count </code>パラメーターは正の値ではありません。       - または - の合計、 <code> offset </code>と<code> count </code>パラメーターがよりも大きい、 <code> buffer </code>長さ。       - または - で指定された値、 <code> count </code>または<code> offset </code>パラメーターは、ゼロ未満か 4 ギガバイトより大きい。       - または - を指定する必要があります<xref uid=&quot;langword_csharp_CLOB&quot; name=&quot;CLOB&quot; href=&quot;&quot;></xref>と<xref uid=&quot;langword_csharp_NCLOB&quot; name=&quot;NCLOB&quot; href=&quot;&quot;></xref>数が偶数バイトのデータ型。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は、トランザクション内で、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>オブジェクトが null、または接続が閉じられました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトが閉じられたか、破棄されます。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "Oracle のエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleLob.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.Data.OracleClient.OracleLob
  langs:
  - csharp
  name: WriteByte(Byte)
  nameWithType: OracleLob.WriteByte(Byte)
  fullName: System.Data.OracleClient.OracleLob.WriteByte(Byte)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "内の現在位置にバイトを書き込み、 <xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>ストリームし、を&1; バイト、ストリーム内の位置を進めます。"
  remarks: "書き込み操作が成功した場合、ストリーム内の位置は&1; バイト進めます。 例外が発生する場合、ストリーム内の位置は変更されません。       末尾を越えて書き込み、`LOB`が許可され、拡大、 `LOB`&1; バイトです。       書き込む、 `LOB`、取得する必要があります、`LOB`開始されたローカル トランザクションを使用して、SQL SELECT ステートメントの FOR UPDATE 句が必要です。      > [!NOTE] > を読み取り専用の書き込み操作`LOB`可能性がありますが、更新されない、`LOB`サーバーでします。 この場合、ただし、ローカル コピーの`LOB`が更新されます。 読み取り操作が後で、そのため、<xref:System.Data.OracleClient.OracleLob>オブジェクトは、書き込み操作の結果を返す場合があります</xref:System.Data.OracleClient.OracleLob>。"
  syntax:
    content: public override void WriteByte (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: "ストリームに書き込むバイト。"
  overload: System.Data.OracleClient.OracleLob.WriteByte*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Data.OracleClient.OracleException
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleException
  nameWithType: OracleException
  fullName: System.Data.OracleClient.OracleException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Append(OracleLob)
  nameWithType: OracleLob.Append(OracleLob)
  fullName: System.Data.OracleClient.OracleLob.Append(OracleLob)
- uid: System.Data.OracleClient.OracleLob
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleLob
  nameWithType: OracleLob
  fullName: System.Data.OracleClient.OracleLob
- uid: System.Data.OracleClient.OracleLob.BeginBatch
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: BeginBatch()
  nameWithType: OracleLob.BeginBatch()
  fullName: System.Data.OracleClient.OracleLob.BeginBatch()
- uid: System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: BeginBatch(OracleLobOpenMode)
  nameWithType: OracleLob.BeginBatch(OracleLobOpenMode)
  fullName: System.Data.OracleClient.OracleLob.BeginBatch(OracleLobOpenMode)
- uid: System.Data.OracleClient.OracleLobOpenMode
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleLobOpenMode
  nameWithType: OracleLobOpenMode
  fullName: System.Data.OracleClient.OracleLobOpenMode
- uid: System.Data.OracleClient.OracleLob.CanRead
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: CanRead
  nameWithType: OracleLob.CanRead
  fullName: System.Data.OracleClient.OracleLob.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.OracleClient.OracleLob.CanSeek
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: CanSeek
  nameWithType: OracleLob.CanSeek
  fullName: System.Data.OracleClient.OracleLob.CanSeek
- uid: System.Data.OracleClient.OracleLob.CanWrite
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: CanWrite
  nameWithType: OracleLob.CanWrite
  fullName: System.Data.OracleClient.OracleLob.CanWrite
- uid: System.Data.OracleClient.OracleLob.ChunkSize
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: ChunkSize
  nameWithType: OracleLob.ChunkSize
  fullName: System.Data.OracleClient.OracleLob.ChunkSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.OracleClient.OracleLob.Clone
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Clone()
  nameWithType: OracleLob.Clone()
  fullName: System.Data.OracleClient.OracleLob.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OracleClient.OracleLob.Connection
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Connection
  nameWithType: OracleLob.Connection
  fullName: System.Data.OracleClient.OracleLob.Connection
- uid: System.Data.OracleClient.OracleConnection
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleConnection
  nameWithType: OracleConnection
  fullName: System.Data.OracleClient.OracleConnection
- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: CopyTo(OracleLob)
  nameWithType: OracleLob.CopyTo(OracleLob)
  fullName: System.Data.OracleClient.OracleLob.CopyTo(OracleLob)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: CopyTo(OracleLob,Int64)
  nameWithType: OracleLob.CopyTo(OracleLob,Int64)
  fullName: System.Data.OracleClient.OracleLob.CopyTo(OracleLob,Int64)
- uid: System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: CopyTo(Int64,OracleLob,Int64,Int64)
  nameWithType: OracleLob.CopyTo(Int64,OracleLob,Int64,Int64)
  fullName: System.Data.OracleClient.OracleLob.CopyTo(Int64,OracleLob,Int64,Int64)
- uid: System.Data.OracleClient.OracleLob.Dispose(System.Boolean)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: OracleLob.Dispose(Boolean)
  fullName: System.Data.OracleClient.OracleLob.Dispose(Boolean)
- uid: System.Data.OracleClient.OracleLob.EndBatch
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: EndBatch()
  nameWithType: OracleLob.EndBatch()
  fullName: System.Data.OracleClient.OracleLob.EndBatch()
- uid: System.Data.OracleClient.OracleLob.Erase
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Erase()
  nameWithType: OracleLob.Erase()
  fullName: System.Data.OracleClient.OracleLob.Erase()
- uid: System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Erase(Int64,Int64)
  nameWithType: OracleLob.Erase(Int64,Int64)
  fullName: System.Data.OracleClient.OracleLob.Erase(Int64,Int64)
- uid: System.Data.OracleClient.OracleLob.Flush
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Flush()
  nameWithType: OracleLob.Flush()
  fullName: System.Data.OracleClient.OracleLob.Flush()
- uid: System.Data.OracleClient.OracleLob.IsBatched
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: IsBatched
  nameWithType: OracleLob.IsBatched
  fullName: System.Data.OracleClient.OracleLob.IsBatched
- uid: System.Data.OracleClient.OracleLob.IsNull
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: IsNull
  nameWithType: OracleLob.IsNull
  fullName: System.Data.OracleClient.OracleLob.IsNull
- uid: System.Data.OracleClient.OracleLob.IsTemporary
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: IsTemporary
  nameWithType: OracleLob.IsTemporary
  fullName: System.Data.OracleClient.OracleLob.IsTemporary
- uid: System.Data.OracleClient.OracleLob.Length
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Length
  nameWithType: OracleLob.Length
  fullName: System.Data.OracleClient.OracleLob.Length
- uid: System.Data.OracleClient.OracleLob.LobType
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: LobType
  nameWithType: OracleLob.LobType
  fullName: System.Data.OracleClient.OracleLob.LobType
- uid: System.Data.OracleClient.OracleType
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleType
  nameWithType: OracleType
  fullName: System.Data.OracleClient.OracleType
- uid: System.Data.OracleClient.OracleLob.Null
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: "Null"
  nameWithType: OracleLob.Null
  fullName: System.Data.OracleClient.OracleLob.Null
- uid: System.Data.OracleClient.OracleLob.Position
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Position
  nameWithType: OracleLob.Position
  fullName: System.Data.OracleClient.OracleLob.Position
- uid: System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: OracleLob.Read(Byte[],Int32,Int32)
  fullName: System.Data.OracleClient.OracleLob.Read(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: OracleLob.Seek(Int64,SeekOrigin)
  fullName: System.Data.OracleClient.OracleLob.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Data.OracleClient.OracleLob.SetLength(System.Int64)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: SetLength(Int64)
  nameWithType: OracleLob.SetLength(Int64)
  fullName: System.Data.OracleClient.OracleLob.SetLength(Int64)
- uid: System.Data.OracleClient.OracleLob.Value
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Value
  nameWithType: OracleLob.Value
  fullName: System.Data.OracleClient.OracleLob.Value
- uid: System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: OracleLob.Write(Byte[],Int32,Int32)
  fullName: System.Data.OracleClient.OracleLob.Write(Byte[],Int32,Int32)
- uid: System.Data.OracleClient.OracleLob.WriteByte(System.Byte)
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: WriteByte(Byte)
  nameWithType: OracleLob.WriteByte(Byte)
  fullName: System.Data.OracleClient.OracleLob.WriteByte(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.OracleClient.OracleLob.Append*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Append
  nameWithType: OracleLob.Append
- uid: System.Data.OracleClient.OracleLob.BeginBatch*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: BeginBatch
  nameWithType: OracleLob.BeginBatch
- uid: System.Data.OracleClient.OracleLob.CanRead*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: CanRead
  nameWithType: OracleLob.CanRead
- uid: System.Data.OracleClient.OracleLob.CanSeek*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: CanSeek
  nameWithType: OracleLob.CanSeek
- uid: System.Data.OracleClient.OracleLob.CanWrite*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: CanWrite
  nameWithType: OracleLob.CanWrite
- uid: System.Data.OracleClient.OracleLob.ChunkSize*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: ChunkSize
  nameWithType: OracleLob.ChunkSize
- uid: System.Data.OracleClient.OracleLob.Clone*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Clone
  nameWithType: OracleLob.Clone
- uid: System.Data.OracleClient.OracleLob.Connection*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Connection
  nameWithType: OracleLob.Connection
- uid: System.Data.OracleClient.OracleLob.CopyTo*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: CopyTo
  nameWithType: OracleLob.CopyTo
- uid: System.Data.OracleClient.OracleLob.Dispose*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Dispose
  nameWithType: OracleLob.Dispose
- uid: System.Data.OracleClient.OracleLob.EndBatch*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: EndBatch
  nameWithType: OracleLob.EndBatch
- uid: System.Data.OracleClient.OracleLob.Erase*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Erase
  nameWithType: OracleLob.Erase
- uid: System.Data.OracleClient.OracleLob.Flush*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Flush
  nameWithType: OracleLob.Flush
- uid: System.Data.OracleClient.OracleLob.IsBatched*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: IsBatched
  nameWithType: OracleLob.IsBatched
- uid: System.Data.OracleClient.OracleLob.IsNull*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: IsNull
  nameWithType: OracleLob.IsNull
- uid: System.Data.OracleClient.OracleLob.IsTemporary*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: IsTemporary
  nameWithType: OracleLob.IsTemporary
- uid: System.Data.OracleClient.OracleLob.Length*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Length
  nameWithType: OracleLob.Length
- uid: System.Data.OracleClient.OracleLob.LobType*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: LobType
  nameWithType: OracleLob.LobType
- uid: System.Data.OracleClient.OracleLob.Position*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Position
  nameWithType: OracleLob.Position
- uid: System.Data.OracleClient.OracleLob.Read*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Read
  nameWithType: OracleLob.Read
- uid: System.Data.OracleClient.OracleLob.Seek*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Seek
  nameWithType: OracleLob.Seek
- uid: System.Data.OracleClient.OracleLob.SetLength*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: SetLength
  nameWithType: OracleLob.SetLength
- uid: System.Data.OracleClient.OracleLob.Value*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Value
  nameWithType: OracleLob.Value
- uid: System.Data.OracleClient.OracleLob.Write*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: Write
  nameWithType: OracleLob.Write
- uid: System.Data.OracleClient.OracleLob.WriteByte*
  parent: System.Data.OracleClient.OracleLob
  isExternal: false
  name: WriteByte
  nameWithType: OracleLob.WriteByte
