### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDiffieHellmanCng
  id: ECDiffieHellmanCng
  children:
  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor
  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)
  - System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)
  - System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  - System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  - System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  - System.Security.Cryptography.ECDiffieHellmanCng.Key
  - System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  - System.Security.Cryptography.ECDiffieHellmanCng.Label
  - System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  - System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  - System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  - System.Security.Cryptography.ECDiffieHellmanCng.Seed
  - System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  - System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  langs:
  - csharp
  name: ECDiffieHellmanCng
  nameWithType: ECDiffieHellmanCng
  fullName: System.Security.Cryptography.ECDiffieHellmanCng
  type: Class
  summary: "Diffie-hellman ECDH (Elliptic Curve) アルゴリズムの Cryptography Next Generation (CNG) 実装を提供します。 このクラスは、暗号化操作の実行に使用します。"
  remarks: "ECDiffieHellmanCng クラスには、パブリック チャネルを介して通信している場合でも、秘密キー マテリアルを交換する&2; つのパーティができるようにします。  両方のパーティが同じシークレット、値を計算と呼ばれる、*秘密協定*マネージ Diffie-hellman クラスでします。 秘密協定は、さまざまな目的で、対称キーとして使用できます。 ただし、秘密協定を直接公開するには、代わりに ECDiffieHellmanCng クラスがいくつかの値を提供する前に、アグリーメントで後処理できます。 この後の処理と呼びます、*キー派生関数 (KDF)*; を使用し、Diffie-hellman オブジェクトのインスタンスのプロパティのセットをそのパラメーターを設定するどの KDF を選択することができます。      |キー派生関数 |プロパティ |  |-----------------------------|----------------|  |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A>-秘密協定を処理するために使用するハッシュ アルゴリズム</xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A></xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>。<br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>-先頭ハッシュする前に、秘密のアグリーメントに追加する省略可能なバイト配列。</xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A><br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A>-ハッシュする前に、秘密のアグリーメントに追加するには、、省略可能なバイト配列です |。  |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A>-秘密協定を処理するために使用するハッシュ アルゴリズム</xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A></xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>。</xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A><br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>-先頭ハッシュする前に、秘密のアグリーメントに追加する省略可能なバイト配列。</xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A><br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A>-省略可能なバイト配列をハッシュする前に、秘密のアグリーメントに追加します |。  |<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>|<xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A>-キー派生のラベル</xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A></xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>。</xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A><br /><br /> <xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A>キー派生のシードです |。      キー派生関数を通じた秘密協定を渡す場合の結果は、アプリケーションのキー マテリアルとして使用できるをバイト配列です。</xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> 生成されたキー マテリアルのバイト数が、キー派生関数に依存します。たとえば、SHA 256 であっても、sha-512 512 ビットのキー マテリアルが生成されますが、256 ビットのキー マテリアルが生成されます。ECDH キー交換の基本的な流れを次に示します: 1。  Alice と Bob は、Diffie-hellman キー交換操作 2 を使用するキー ペアを作成します。  Alice と Bob パラメーターを使用して、同意上、KDF を構成します。      3.  Alice は、Bob に公開キーを送信します。      4.  Bob は、公開鍵を Alice に送信します。      5.  Alice と Bob は、互いの公開キーを使用して秘密協定を生成し、キー マテリアルを生成する秘密協定に、KDF を適用します。"
  example:
  - "The following example shows how to use the ECDiffieHellmanCng class to establish a key exchange and how to use that key to encrypt a message that can be sent over a public channel and decrypted by the receiver.  \n  \n [!code-vb[ECDiffieHellmanCng#1](~/add/codesnippet/visualbasic/t-system.security.crypto_88_1.vb)]\n [!code-cs[ECDiffieHellmanCng#1](~/add/codesnippet/csharp/t-system.security.crypto_88_1.cs)]"
  syntax:
    content: 'public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.ECDiffieHellman
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.ECDiffieHellman.Create
  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ECDiffieHellmanCng()
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng()
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;> </xref>ランダム キーのペアを持つクラス。"
  remarks: "ランダムなキー ペアは、521 ビットの既定の公開キー長を持ちます。"
  syntax:
    content: public ECDiffieHellmanCng ();
    parameters: []
  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ECDiffieHellmanCng(Int32)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;> </xref>指定されたキー サイズを使用して、ランダムなキー ペアを持つクラス。"
  remarks: "ランダムなキー ペアがによって定義されたパブリック キーの長さが、`keySize`パラメーター。"
  syntax:
    content: public ECDiffieHellmanCng (int keySize);
    parameters:
    - id: keySize
      type: System.Int32
      description: "キーのサイズ。 有効なキー サイズは 256、384、および 521 ビットです。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keySize</code>無効な長さを指定します。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) クラスは、このシステムではサポートされません。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)
  id: '#ctor(System.Security.Cryptography.CngKey)'
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ECDiffieHellmanCng(CngKey)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;> </xref>クラスを指定して<xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref>オブジェクト。"
  syntax:
    content: public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);
    parameters:
    - id: key
      type: System.Security.Cryptography.CngKey
      description: "現在のオブジェクトによって実行された暗号化操作への入力として使用されるキー。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>key</code>Diffie-hellman ECDH (Elliptic Curve) アルゴリズム グループは指定しません。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) クラスは、このシステムではサポートされません。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "別のパーティの公開キー、ハッシュ アルゴリズムの名前、prepend 値および追加の値を指定されたハッシュ関数を使用して、キーとして使用できるバイト数を取得します。"
  remarks: "場合の値`secretPrepend`または`secretAppend`は`null`、空の配列として扱われます。"
  syntax:
    content: public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "その他のパーティの公開キー。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "使用して、キー マテリアルを派生するハッシュ アルゴリズム。"
    - id: secretPrepend
      type: System.Byte[]
      description: "ハッシュする前に、派生のシークレットを先頭に付加する値。"
    - id: secretAppend
      type: System.Byte[]
      description: "ハッシュする前に、派生のシークレットを追加する値。"
    return:
      type: System.Byte[]
      description: "他のパーティの公開キーを持つキー交換のキー マテリアル。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code>ECDH キーではないか、適切なサイズではありません。       -or-       <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "その他のすべてのエラーです。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "ハッシュ ベース メッセージ認証コード (HMAC) を使用して、キーとして使用できるバイト数を取得します。"
  remarks: "場合の値`secretPrepend`または`secretAppend`は`null`、空の配列として扱われます。 場合の値`hmacKey`は`null`、Diffie-hellman ECDH (Elliptic Curve) アルゴリズムの結果は、HMAC キーとして使用されます。"
  syntax:
    content: public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "その他のパーティの公開キー。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "使用して、キー マテリアルを派生するハッシュ アルゴリズム。"
    - id: hmacKey
      type: System.Byte[]
      description: "HMAC キー。"
    - id: secretPrepend
      type: System.Byte[]
      description: "ハッシュする前に、派生のシークレットを先頭に付加する値。"
    - id: secretAppend
      type: System.Byte[]
      description: "ハッシュする前に、派生のシークレットを追加する値。"
    return:
      type: System.Byte[]
      description: "他のパーティの公開キーを持つキー交換のキー マテリアル。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code>ECDH キーではないか、適切なサイズではありません。       -or-       <code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>または&lt;xref:System.String.Empty?displayProperty=fullName&gt;です。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "その他のすべてのエラーです。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyMaterial(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定された&2; つのパーティ間の秘密協定から生成されるキー マテリアルを派生して、 <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref>&2; 番目のパーティの公開キーを含むオブジェクトです。"
  syntax:
    content: public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.CngKey
      description: "キー交換の相手側から Diffie-hellman ECDH (Elliptic Curve) キーのパブリックの部分を格納するオブジェクト。"
    return:
      type: System.Byte[]
      description: "キー マテリアルを格納するバイト配列。 この情報は、現在のオブジェクトの秘密キーと指定した公開キーから計算される秘密協定から生成されます。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code>正しくありません。 いずれかの<xref:System.Security.Cryptography.CngKey.AlgorithmGroup*>プロパティが指定されていない<xref:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman*>か、そのキーのサイズがこのインスタンスのキーのサイズと一致しません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このオブジェクトの<> *> プロパティを指定します、 <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;> </xref>キー派生関数が、いずれかの<> *> または<xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed*>は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed*>"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "その他のすべてのエラーです。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定された&2; つのパーティ間の秘密協定から生成されるキー マテリアルを派生して、 <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanPublicKey&quot;> </xref>&2; 番目のパーティの公開キーを含むオブジェクトです。"
  syntax:
    content: public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "キー交換の相手側から公開キー。"
    return:
      type: System.Byte[]
      description: "キー マテリアルを格納するバイト配列。 この情報は、現在のオブジェクトの秘密キーと指定した公開キーから計算される秘密協定から生成されます。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code><xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCngPublicKey&quot;> </xref>キー。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "トランスポート層セキュリティ (TLS) 擬似関数 (PRF) 派生アルゴリズムを使用して、キーとして使用できるバイト数を取得します。"
  syntax:
    content: public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "その他のパーティの公開キー。"
    - id: prfLabel
      type: System.Byte[]
      description: "ASCII エンコードの PRF ラベルです。"
    - id: prfSeed
      type: System.Byte[]
      description: "64 バイトの PRF シードです。"
    return:
      type: System.Byte[]
      description: "他のパーティの公開キーを持つキー交換のキー マテリアル。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>prfLabel</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>prfSeed</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code>ECDH キーではないか、適切なサイズではありません。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>prfSeed</code>長さは 64 バイトが正確に一致しません。       または、他のすべての暗号化エラー。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  id: DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveSecretAgreementHandle(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定された&2; つのパーティ間で生成された秘密協定へのハンドルを取得、 <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref>&2; 番目のパーティの公開キーを含むオブジェクトです。"
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.CngKey
      description: "キー交換の相手側から Diffie-hellman ECDH (Elliptic Curve) キーのパブリックの部分を格納するオブジェクト。"
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
      description: "秘密協定へのハンドル。 この情報は、現在のオブジェクトの秘密キーと指定した公開キーから計算されます。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code>ECDH キーではないか、適切なサイズではありません。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "その他のすべてのエラーです。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定された&2; つのパーティ間で生成された秘密協定へのハンドルを取得、 <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanPublicKey&quot;> </xref>&2; 番目のパーティの公開キーを含むオブジェクトです。"
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "キー交換の相手側から公開キー。"
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
      description: "秘密協定へのハンドル。 この情報は、現在のオブジェクトの秘密キーと指定した公開キーから計算されます。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>otherPartyPublicKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>otherPartyPublicKey</code><xref href=&quot;System.Security.Cryptography.ECDiffieHellmanPublicKey&quot;> </xref>キー。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ECDiffieHellmanCng.Dispose(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "このメソッドは実装されていません。"
  remarks: "XML キーを逆シリアル化を使用して、<xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29>オーバー ロードを代用します</xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29>。"
  syntax:
    content: public override void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: "XML に基づくキー情報を逆シリアル化できません。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "このインスタンスのこのメソッドはオーバーライドされませんでした。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  id: FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: FromXmlString(String,ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定された形式を使用して、XML 文字列からキーの情報を逆シリアル化します。"
  syntax:
    content: public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);
    parameters:
    - id: xml
      type: System.String
      description: "XML に基づくキー情報を逆シリアル化できません。"
    - id: format
      type: System.Security.Cryptography.ECKeyXmlFormat
      description: "XML 文字列の形式を指定する列挙値の&1; つ。 唯一現在受け付け形式は<xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;></xref>です。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xml</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>xml</code>正しくありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>format</code>無効な形式を指定します。 のみ指定できる値は<xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;></xref>です。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "その他のすべてのエラーです。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  id: HashAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: ECDiffieHellmanCng.HashAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得またはキー マテリアルを生成するときに使用するハッシュ アルゴリズムを設定します。"
  remarks: "このプロパティは、Cryptography Next Generation (CNG) のオブジェクトの場合のみ、使用、<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>または<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>値が設定されて、<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>プロパティ</xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A></xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction></xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>。       このプロパティでは、次のアルゴリズム: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>、 <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>、 <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>、 <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>、 <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A></xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A> </xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A> </xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A> </xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A> </xref:System.Security.Cryptography.CngAlgorithm.MD5%2A> 。       その他のカスタムのハッシュ アルゴリズムも使用できます。       既定のアルゴリズムは<xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>。</xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>"
  syntax:
    content: public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "ハッシュ アルゴリズムを指定するオブジェクト。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "値は、します。<xref uid=&quot;langword_csharp_null.&quot; name=&quot;null.&quot; href=&quot;&quot;></xref>"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  id: HmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: HmacKey
  nameWithType: ECDiffieHellmanCng.HmacKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得またはキー マテリアルを派生している場合に使用するハッシュ ベース メッセージ認証コード (HMAC) キーを設定します。"
  remarks: "このプロパティは適用される場合にのみ、<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>値が設定されて、<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>プロパティ、および<xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A>プロパティは`false`</xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A></xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A></xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>。 値は、既定では、`null`です。"
  syntax:
    content: public byte[] HmacKey { get; set; }
    return:
      type: System.Byte[]
      description: "キー マテリアルを派生するときに使用するハッシュ ベース メッセージ認証コード (HMAC) キー。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key
  id: Key
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Key
  nameWithType: ECDiffieHellmanCng.Key
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Key
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定します、 <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref>暗号化操作に現在のオブジェクトによって使用されます。"
  syntax:
    content: public System.Security.Cryptography.CngKey Key { get; }
    return:
      type: System.Security.Cryptography.CngKey
      description: "暗号化操作の実行にこのオブジェクトによって使用されるキーのペア。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  id: KeyDerivationFunction
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: KeyDerivationFunction
  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "キー派生関数を取得または設定、 <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;> </xref>クラスです。"
  remarks: "このプロパティは、キー マテリアルに秘密協定を変換に使用されるキーの派生関数を指定します。"
  syntax:
    content: public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
      description: 'One of the <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref> enumeration values: <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref>, <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref>, or <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref>. 既定値は<xref href=&quot;System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction&quot;></xref>です。'
  overload: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "列挙値が範囲外です。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label
  id: Label
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Label
  nameWithType: ECDiffieHellmanCng.Label
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Label
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得またはキーの派生で使用されるラベル値を設定します。"
  remarks: "場合、この値がキー派生の使用は、<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>値が設定されて、<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>プロパティ</xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A></xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>。 既定では`null`します。"
  syntax:
    content: public byte[] Label { get; set; }
    return:
      type: System.Byte[]
      description: "ラベルの値。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Label*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: PublicKey
  nameWithType: ECDiffieHellmanCng.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "別の作業で使用できる公開キーを取得<xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref>共有秘密協定を生成するオブジェクト。"
  syntax:
    content: public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "このインスタンスに関連付けられている公開キー、 <xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  id: SecretAppend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: SecretAppend
  nameWithType: ECDiffieHellmanCng.SecretAppend
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得またはキー マテリアルを生成するときに、秘密協定に追加する値を設定します。"
  remarks: "場合、この値がキー派生の使用は、<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>または<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>キー派生関数 (KDF) を使用します</xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction></xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>。 秘密協定に値が追加され、キー マテリアルを生成する KDF を総合した値が渡されます。 値は、既定では、`null`です。"
  syntax:
    content: public byte[] SecretAppend { get; set; }
    return:
      type: System.Byte[]
      description: "秘密協定に追加される値。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  id: SecretPrepend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: SecretPrepend
  nameWithType: ECDiffieHellmanCng.SecretPrepend
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得またはキー マテリアルを派生している場合に、秘密協定の先頭に追加する値を設定します。"
  remarks: "場合、この値がキー派生の使用は、<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>プロパティは、次の値のいずれかに設定:- <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>-<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>秘密協定に値が前に、合計値が、キー マテリアルを生成するキーの派生関数 (KDF) に渡されます</xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction></xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction></xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A>。 値は、既定では、`null`です。"
  syntax:
    content: public byte[] SecretPrepend { get; set; }
    return:
      type: System.Byte[]
      description: "キー派生の中に秘密協定の先頭に付加される値。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed
  id: Seed
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: Seed
  nameWithType: ECDiffieHellmanCng.Seed
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Seed
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "取得またはキー マテリアルを派生している場合に使用されるシード値を設定します。"
  remarks: "場合、この値がキー派生の使用は<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A><xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>.</xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>にプロパティが設定されています。</xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> 値は、既定では、`null`です。"
  syntax:
    content: public byte[] Seed { get; set; }
    return:
      type: System.Byte[]
      description: "シード値。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.Seed*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: ECDiffieHellmanCng.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "このメソッドは実装されていません。"
  remarks: "現在のキーを XML 表現に変換するを使用して、<xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29>オーバー ロードを代用します</xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29>。"
  syntax:
    content: public override string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プライベート パラメーターを含めるそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.String
      description: "該当なし。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "このインスタンスのこのメソッドはオーバーライドされませんでした。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  id: ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: ToXmlString(ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "指定された形式を使用して、キー情報を XML 文字列をシリアル化します。"
  syntax:
    content: public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);
    parameters:
    - id: format
      type: System.Security.Cryptography.ECKeyXmlFormat
      description: "XML 文字列の形式を指定する列挙値の&1; つ。 唯一現在受け付け形式は<xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;></xref>です。"
    return:
      type: System.String
      description: "要求された書式に従って、XML 文字列にシリアル化、キー情報を含む文字列オブジェクト。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>format</code>無効な形式を指定します。 のみ指定できる値は<xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  id: UseSecretAgreementAsHmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  langs:
  - csharp
  name: UseSecretAgreementAsHmacKey
  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "キー マテリアルを派生させる秘密協定がハッシュ ベース メッセージ認証コード (HMAC) のキーとして使用されるかどうかを示す値を取得します。"
  remarks: '-場合、この値がキー派生の使用は<xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A><xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>.</xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction>にプロパティが設定されています。</xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> 値は、既定では、`false`です。'
  syntax:
    content: public bool UseSecretAgreementAsHmacKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>キー マテリアルを派生させる秘密協定が HMAC キーとして使用する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: System.Security.Cryptography.ECDiffieHellman
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng()
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng()
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng()
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng(Int32)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng(CngKey)
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ECDiffieHellmanCng(CngKey)
- uid: System.Security.Cryptography.CngKey
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyMaterial(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(CngKey)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveSecretAgreementHandle(CngKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(CngKey)
- uid: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeNCryptSecretHandle
  nameWithType: SafeNCryptSecretHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(ECDiffieHellmanPublicKey)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ECDiffieHellmanCng.Dispose(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: FromXmlString(String)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: FromXmlString(String,ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(String,ECKeyXmlFormat)
- uid: System.Security.Cryptography.ECKeyXmlFormat
  parent: System.Security.Cryptography
  isExternal: false
  name: ECKeyXmlFormat
  nameWithType: ECKeyXmlFormat
  fullName: System.Security.Cryptography.ECKeyXmlFormat
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HashAlgorithm
  nameWithType: ECDiffieHellmanCng.HashAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm
- uid: System.Security.Cryptography.CngAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithm
  nameWithType: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HmacKey
  nameWithType: ECDiffieHellmanCng.HmacKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Key
  nameWithType: ECDiffieHellmanCng.Key
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Key
- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: KeyDerivationFunction
  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction
- uid: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanKeyDerivationFunction
  nameWithType: ECDiffieHellmanKeyDerivationFunction
  fullName: System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Label
  nameWithType: ECDiffieHellmanCng.Label
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Label
- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellmanCng.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretAppend
  nameWithType: ECDiffieHellmanCng.SecretAppend
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretPrepend
  nameWithType: ECDiffieHellmanCng.SecretPrepend
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Seed
  nameWithType: ECDiffieHellmanCng.Seed
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.Seed
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: ECDiffieHellmanCng.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(Boolean)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ToXmlString(ECKeyXmlFormat)
  nameWithType: ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(ECKeyXmlFormat)
- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: UseSecretAgreementAsHmacKey
  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
  fullName: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.#ctor*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ECDiffieHellmanCng
  nameWithType: ECDiffieHellmanCng.ECDiffieHellmanCng
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHash
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHash
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyFromHmac
  nameWithType: ECDiffieHellmanCng.DeriveKeyFromHmac
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyMaterial
  nameWithType: ECDiffieHellmanCng.DeriveKeyMaterial
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveKeyTls
  nameWithType: ECDiffieHellmanCng.DeriveKeyTls
- uid: System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: DeriveSecretAgreementHandle
  nameWithType: ECDiffieHellmanCng.DeriveSecretAgreementHandle
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Dispose*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Dispose
  nameWithType: ECDiffieHellmanCng.Dispose
- uid: System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: FromXmlString
  nameWithType: ECDiffieHellmanCng.FromXmlString
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HashAlgorithm
  nameWithType: ECDiffieHellmanCng.HashAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellmanCng.HmacKey*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: HmacKey
  nameWithType: ECDiffieHellmanCng.HmacKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Key*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Key
  nameWithType: ECDiffieHellmanCng.Key
- uid: System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: KeyDerivationFunction
  nameWithType: ECDiffieHellmanCng.KeyDerivationFunction
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Label*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Label
  nameWithType: ECDiffieHellmanCng.Label
- uid: System.Security.Cryptography.ECDiffieHellmanCng.PublicKey*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellmanCng.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretAppend
  nameWithType: ECDiffieHellmanCng.SecretAppend
- uid: System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: SecretPrepend
  nameWithType: ECDiffieHellmanCng.SecretPrepend
- uid: System.Security.Cryptography.ECDiffieHellmanCng.Seed*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: Seed
  nameWithType: ECDiffieHellmanCng.Seed
- uid: System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: ToXmlString
  nameWithType: ECDiffieHellmanCng.ToXmlString
- uid: System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey*
  parent: System.Security.Cryptography.ECDiffieHellmanCng
  isExternal: false
  name: UseSecretAgreementAsHmacKey
  nameWithType: ECDiffieHellmanCng.UseSecretAgreementAsHmacKey
