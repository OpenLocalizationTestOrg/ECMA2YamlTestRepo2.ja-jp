### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.SymbolStore.SymMethod
  id: SymMethod
  children:
  - System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  - System.Diagnostics.SymbolStore.SymMethod.Dispose
  - System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  - System.Diagnostics.SymbolStore.SymMethod.Finalize
  - System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  - System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetParameters
  - System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.SymMethod.RootScope
  - System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  - System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  - System.Diagnostics.SymbolStore.SymMethod.Token
  langs:
  - csharp
  name: SymMethod
  nameWithType: SymMethod
  fullName: System.Diagnostics.SymbolStore.SymMethod
  type: Class
  summary: "シンボル ストア内のメソッドを表します。"
  remarks: "SymMethod クラスでは、シーケンス ポイント、構文のスコープ、およびパラメーター情報など、メソッドの記号に関連する属性にのみアクセスを提供します。 使用して、<xref:System.Reflection>クラス メソッドの型に関連する属性を読み取れません</xref:System.Reflection>。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SymMethod : System.Diagnostics.SymbolStore.SymMethodBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolMethod
  inheritance:
  - System.Object
  - System.Diagnostics.SymbolStore.SymMethodBase
  implements:
  - System.Diagnostics.SymbolStore.ISymbolMethod
  - System.IDisposable
  inheritedMembers:
  - System.Diagnostics.SymbolStore.SymMethodBase.{dtor}
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  id: '#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)'
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: SymMethod(ISymUnmanagedMethod*)
  nameWithType: SymMethod.SymMethod(ISymUnmanagedMethod*)
  fullName: System.Diagnostics.SymbolStore.SymMethod.SymMethod(ISymUnmanagedMethod*)
  type: Constructor
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  syntax:
    content: public SymMethod (System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod* pMethod);
    parameters:
    - id: pMethod
      type: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*
      description: "追加します。"
  overload: System.Diagnostics.SymbolStore.SymMethod.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose
  id: Dispose
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Dispose()
  nameWithType: SymMethod.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "現在のインスタンスによって使用されるリソースを解放、 <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref>クラスです。"
  syntax:
    content: public override sealed void Dispose ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SymMethod.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose(Boolean)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "によって呼び出される、 <> </> *> と<> *> の現在のインスタンスによって使用されるマネージ コードとアンマネージ リソースを解放するメソッド、 <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref>クラスです。"
  remarks: "このメソッドは、パブリックによってのみ呼び出さ<xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A>と<xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A>メソッドですこのメソッドを直接呼び出さないでください。</xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A> </xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A> 。"
  syntax:
    content: protected virtual void Dispose (bool A_0);
    parameters:
    - id: A_0
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize
  id: Finalize
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Finalize()
  nameWithType: SymMethod.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Finalize()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "アンマネージ リソースを解放し、前に他のクリーンアップ操作を実行、 <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref>がガベージ コレクションによって回収されます。"
  remarks: "このメソッドは<xref:System.Object.Finalize%2A>。</xref:System.Object.Finalize%2A> アプリケーション コードではこのメソッドを呼び出す必要がありますいません。オブジェクトの`Finalize`への呼び出しによって、ガベージ コレクターによって終了処理が無効になっていない限り、ガベージ コレクション中にメソッドが自動的に起動、<xref:System.GC.SuppressFinalize%2A>メソッド</xref:System.GC.SuppressFinalize%2A>。"
  syntax:
    content: ~SymMethod ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymMethod.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  id: GetNamespace
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetNamespace()
  nameWithType: SymMethod.GetNamespace()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetNamespace()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "スロー、<xref:System.NotSupportedException>常にします</xref:System.NotSupportedException>。"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolNamespace
      description: "スロー、<xref:System.NotSupportedException>常にします</xref:System.NotSupportedException>。"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetNamespace*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "すべての場合。"
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetOffset(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "指定した位置に対応するメソッド内のオフセット Microsoft intermediate language (MSIL) を取得します。"
  syntax:
    content: public virtual int GetOffset (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "オフセットを要求する対象のドキュメントです。"
    - id: line
      type: System.Int32
      description: "オフセットの要求対象となるドキュメント行。"
    - id: column
      type: System.Int32
      description: "オフセットの要求対象となるドキュメント列。"
    return:
      type: System.Int32
      description: "ドキュメント内の指定位置の現在のメソッド内の IL オフセット。"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters
  id: GetParameters
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetParameters()
  nameWithType: SymMethod.GetParameters()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetParameters()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "現在のメソッドのパラメーターを取得します。"
  remarks: "パラメーターは、メソッドのシグネチャ内で定義されている順序で返されます。 返される配列は、メソッドにパラメーターがあるない場合は、空です。"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolVariable[]
      description: "現在のメソッドのパラメーターの配列。"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetRanges(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "先頭と末尾オフセットのペアの Microsoft intermediate language (MSIL) は、このメソッド内の指定された位置に含まれることをオフセットの範囲に対応する配列を取得します。"
  remarks: "配列の形式で整数の配列は、{{開始日&1;、end1}、{開始日&2;、end2}...}、各ペアがメソッド内での IL オフセット範囲を表します。 範囲の数は、2 で割った値配列の長さです。"
  syntax:
    content: public virtual int[] GetRanges (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "IL オフセット範囲を要求する対象のドキュメントです。"
    - id: line
      type: System.Int32
      description: "IL オフセットの範囲をドキュメントの行が要求されます。"
    - id: column
      type: System.Int32
      description: "IL オフセットの範囲の要求対象となるドキュメント列。"
    return:
      type: System.Int32[]
      description: "配列の先頭と末尾の IL オフセットのペア。"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetRanges*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  id: GetScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetScope(Int32)
  nameWithType: SymMethod.GetScope(Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetScope(Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "メソッド内のオフセットに対応する最も外側の構文のスコープを返します。"
  remarks: "使用することができます、<xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A>ローカル変数の検索を開始するメソッド</xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A>。"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope GetScope (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "検索するメソッド内での IL オフセット。"
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "メソッド内で指定した IL オフセットの最も外側の構文スコープ。"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  id: GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "現在のメソッドのシーケンス ポイントを取得し、指定した配列内の情報を格納します。"
  remarks: "シーケンス ポイントは、ソース ファイルの場所、および IL オフセットの間でマップに使用されます。  IL オフセットでは、各シーケンス ポイントで構成され、番号が相対的に開始日および終了行/列で指定されたソース ファイルの領域、<xref:System.Diagnostics.SymbolStore.ISymbolDocument>オブジェクト</xref:System.Diagnostics.SymbolStore.ISymbolDocument>。  すべての配列の特定のインデックス位置には、各要素は、特定のシーケンス ポイントに対応します。 呼び出し元は、返される情報を保持するために事前に割り当てられた配列を指定する必要があります。 配列内の値が上書きされます。 使用して<xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A>のすべてのシーケンス ポイントの数を取得し、適切なサイズの配列を作成する</xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A>。 シーケンス ポイントは、オフセットで並べ替えられ、メソッドのすべてのドキュメント用です。 <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A>各配列のサイズを確認し、それぞれにシーケンス ポイントの情報を格納します。</xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A> 場合は、配列が`null`、その配列のデータは返されません。"
  syntax:
    content: public virtual void GetSequencePoints (int[] offsets, System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);
    parameters:
    - id: offsets
      type: System.Int32[]
      description: "シーケンス ポイントのメソッドの先頭からのオフセットを IL を格納する配列。"
    - id: documents
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "シーケンス ポイントが存在するドキュメントを格納する配列。"
    - id: lines
      type: System.Int32[]
      description: "シーケンス ポイントが存在するドキュメントの行を格納する配列。"
    - id: columns
      type: System.Int32[]
      description: "シーケンス ポイントが存在するドキュメント内の列を格納する配列。"
    - id: endLines
      type: System.Int32[]
      description: "シーケンス ポイントが終了するドキュメント内の行の配列。"
    - id: endColumns
      type: System.Int32[]
      description: "シーケンス ポイントが終了するドキュメント内の列の配列。"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  id: GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  nameWithType: SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "スロー、<xref:System.NotSupportedException>常にします</xref:System.NotSupportedException>。"
  syntax:
    content: public virtual bool GetSourceStartEnd (System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int[] lines, int[] columns);
    parameters:
    - id: docs
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "このパラメーターは使用されません。"
    - id: lines
      type: System.Int32[]
      description: "このパラメーターは使用されません。"
    - id: columns
      type: System.Int32[]
      description: "このパラメーターは使用されません。"
    return:
      type: System.Boolean
      description: "スロー、<xref:System.NotSupportedException>常にします</xref:System.NotSupportedException>。"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "すべての場合。"
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope
  id: RootScope
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: RootScope
  nameWithType: SymMethod.RootScope
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScope
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "現在のメソッドのルート構文スコープを取得します。 このスコープはメソッド全体を囲みます。"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScope { get; }
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "メソッド全体を囲むルート構文スコープ。"
  overload: System.Diagnostics.SymbolStore.SymMethod.RootScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  id: RootScopeInternal
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: RootScopeInternal()
  nameWithType: SymMethod.RootScopeInternal()
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "現在のメソッドのルート構文スコープを取得します。 このスコープはメソッド全体を囲みます。"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScopeInternal ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "メソッド全体を囲むルート構文スコープ。"
  overload: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  id: SequencePointCount
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
  fullName: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "メソッドのシーケンス ポイントの数を取得します。"
  syntax:
    content: public virtual int SequencePointCount { get; }
    return:
      type: System.Int32
      description: "メソッド内のシーケンス ポイントの数。"
  overload: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Token
  id: Token
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Token
  nameWithType: SymMethod.Token
  fullName: System.Diagnostics.SymbolStore.SymMethod.Token
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "取得、 <xref href=&quot;System.Diagnostics.SymbolStore.SymbolToken&quot;> </xref>の現在のメソッドのメタデータを格納します。"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.SymbolToken Token { get; }
    return:
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "現在のメソッドのメタデータ トークンです。"
  overload: System.Diagnostics.SymbolStore.SymMethod.Token*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.SymbolStore.SymMethodBase
  isExternal: false
  name: System.Diagnostics.SymbolStore.SymMethodBase
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SymMethod(ISymUnmanagedMethod*)
  nameWithType: SymMethod.SymMethod(ISymUnmanagedMethod*)
  fullName: System.Diagnostics.SymbolStore.SymMethod.SymMethod(ISymUnmanagedMethod*)
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose()
  nameWithType: SymMethod.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose()
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymMethod.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Finalize()
  nameWithType: SymMethod.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Finalize()
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetNamespace()
  nameWithType: SymMethod.GetNamespace()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetNamespace()
- uid: System.Diagnostics.SymbolStore.ISymbolNamespace
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolNamespace
  nameWithType: ISymbolNamespace
  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetOffset(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.SymbolStore.ISymbolDocument
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetParameters()
  nameWithType: SymMethod.GetParameters()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetParameters()
- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolVariable
  nameWithType: ISymbolVariable
  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolVariable
    name: ISymbolVariable
    nameWithType: ISymbolVariable
    fullName: ISymbolVariable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetRanges(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetScope(Int32)
  nameWithType: SymMethod.GetScope(Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetScope(Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolScope
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolScope
  nameWithType: ISymbolScope
  fullName: System.Diagnostics.SymbolStore.ISymbolScope
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
- uid: System.Diagnostics.SymbolStore.ISymbolDocument[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolDocument
    name: ISymbolDocument
    nameWithType: ISymbolDocument
    fullName: ISymbolDocument[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  nameWithType: SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScope
  nameWithType: SymMethod.RootScope
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScope
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScopeInternal()
  nameWithType: SymMethod.RootScopeInternal()
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal()
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
  fullName: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
- uid: System.Diagnostics.SymbolStore.SymMethod.Token
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Token
  nameWithType: SymMethod.Token
  fullName: System.Diagnostics.SymbolStore.SymMethod.Token
- uid: System.Diagnostics.SymbolStore.SymbolToken
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: SymbolToken
  nameWithType: SymbolToken
  fullName: System.Diagnostics.SymbolStore.SymbolToken
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SymMethod
  nameWithType: SymMethod.SymMethod
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose
  nameWithType: SymMethod.Dispose
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Finalize
  nameWithType: SymMethod.Finalize
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetNamespace
  nameWithType: SymMethod.GetNamespace
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetOffset
  nameWithType: SymMethod.GetOffset
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetParameters
  nameWithType: SymMethod.GetParameters
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetRanges
  nameWithType: SymMethod.GetRanges
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetScope
  nameWithType: SymMethod.GetScope
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSequencePoints
  nameWithType: SymMethod.GetSequencePoints
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSourceStartEnd
  nameWithType: SymMethod.GetSourceStartEnd
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScope
  nameWithType: SymMethod.RootScope
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScopeInternal
  nameWithType: SymMethod.RootScopeInternal
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
- uid: System.Diagnostics.SymbolStore.SymMethod.Token*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Token
  nameWithType: SymMethod.Token
