### YamlMime:ManagedReference
items:
- uid: System.Net.IPEndPointCollection
  id: IPEndPointCollection
  children:
  - System.Net.IPEndPointCollection.#ctor
  - System.Net.IPEndPointCollection.InsertItem(System.Int32,System.Net.IPEndPoint)
  - System.Net.IPEndPointCollection.SetItem(System.Int32,System.Net.IPEndPoint)
  langs:
  - csharp
  name: IPEndPointCollection
  nameWithType: IPEndPointCollection
  fullName: System.Net.IPEndPointCollection
  type: Class
  summary: "ネットワーク エンドポイントとしての格納に使用されるコレクションを表します<xref:System.Net.IPEndPoint>オブジェクト</xref:System.Net.IPEndPoint>。"
  remarks: "IPEndPointCollection クラスは、<xref:System.Collections.ObjectModel.Collection%601?displayProperty=fullName>クラス</xref:System.Collections.ObjectModel.Collection%601?displayProperty=fullName>から派生します。       <xref:System.Net.IPEndPoint>クラスには、ホストとホスト上のサービスに接続するアプリケーションで必要なローカルまたはリモートのポート情報が含まれています</xref:System.Net.IPEndPoint>。 ホストの IP アドレスと、サービスのポート番号を組み合わせることによって、<xref:System.Net.IPEndPoint>クラスのフォームへの接続がサービス をポイントします</xref:System.Net.IPEndPoint>。       IPEndPointCollection クラスが内のクラスによって使用される、<xref:System.Net.PeerToPeer?displayProperty=fullName>名前空間</xref:System.Net.PeerToPeer?displayProperty=fullName>。"
  syntax:
    content: 'public class IPEndPointCollection : System.Collections.ObjectModel.Collection<System.Net.IPEndPoint>'
  inheritance:
  - System.Collections.ObjectModel.Collection`1
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.IPEndPointCollection.#ctor
  id: '#ctor'
  parent: System.Net.IPEndPointCollection
  langs:
  - csharp
  name: IPEndPointCollection()
  nameWithType: IPEndPointCollection.IPEndPointCollection()
  fullName: System.Net.IPEndPointCollection.IPEndPointCollection()
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.IPEndPointCollection&quot;> </xref>クラスです。"
  syntax:
    content: public IPEndPointCollection ();
    parameters: []
  overload: System.Net.IPEndPointCollection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.IPEndPointCollection.InsertItem(System.Int32,System.Net.IPEndPoint)
  id: InsertItem(System.Int32,System.Net.IPEndPoint)
  parent: System.Net.IPEndPointCollection
  langs:
  - csharp
  name: InsertItem(Int32,IPEndPoint)
  nameWithType: IPEndPointCollection.InsertItem(Int32,IPEndPoint)
  fullName: System.Net.IPEndPointCollection.InsertItem(Int32,IPEndPoint)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net
  summary: "挿入、<xref:System.Net.IPEndPoint>に要素を<xref href=&quot;System.Net.IPEndPointCollection&quot;></xref>指定したインデックス位置</xref:System.Net.IPEndPoint>。"
  remarks: "<xref:System.Net.IPEndPointCollection>受け付けない`null`として有効な値です。</xref:System.Net.IPEndPointCollection> <xref:System.Net.IPEndPointCollection>重複する要素を許可します。</xref:System.Net.IPEndPointCollection>       場合`index`が内のアイテムの現在の数と等しく、 <xref:System.Net.IPEndPointCollection>、 `item` <xref:System.Net.IPEndPointCollection>.</xref:System.Net.IPEndPointCollection>の末尾に追加された</xref:System.Net.IPEndPointCollection>       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ObjectModel.Collection%601.Count%2A?displayProperty=fullName>.</xref:System.Collections.ObjectModel.Collection%601.Count%2A?displayProperty=fullName>は、"
  syntax:
    content: protected override void InsertItem (int index, System.Net.IPEndPoint item);
    parameters:
    - id: index
      type: System.Int32
      description: "位置の&0; から始まるインデックス`item`挿入する必要があります。"
    - id: item
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>挿入するオブジェクト</xref:System.Net.IPEndPoint>。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>参照型の場合。"
  overload: System.Net.IPEndPointCollection.InsertItem*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> index </code>パラメーターが&0; より小さい - または -、 <code> index </code>パラメーターが現在のアイテムの数より大きい、 <xref href=&quot;System.Net.IPEndPointCollection&quot;></xref>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>item</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.IPEndPointCollection.SetItem(System.Int32,System.Net.IPEndPoint)
  id: SetItem(System.Int32,System.Net.IPEndPoint)
  parent: System.Net.IPEndPointCollection
  langs:
  - csharp
  name: SetItem(Int32,IPEndPoint)
  nameWithType: IPEndPointCollection.SetItem(Int32,IPEndPoint)
  fullName: System.Net.IPEndPointCollection.SetItem(Int32,IPEndPoint)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net
  summary: "置換、<xref:System.Net.IPEndPoint>指定したインデックス位置にある要素</xref:System.Net.IPEndPoint>。"
  remarks: "<xref:System.Net.IPEndPointCollection>受け付けない`null`として有効な値です。</xref:System.Net.IPEndPointCollection> <xref:System.Net.IPEndPointCollection>重複する要素を許可します。</xref:System.Net.IPEndPointCollection>       このメソッドは、o (1) 操作です。"
  syntax:
    content: protected override void SetItem (int index, System.Net.IPEndPoint item);
    parameters:
    - id: index
      type: System.Int32
      description: "置換する要素の&0; から始まるインデックス。"
    - id: item
      type: System.Net.IPEndPoint
      description: "新しい<xref:System.Net.IPEndPoint>要素の値が指定したインデックス位置</xref:System.Net.IPEndPoint>。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>参照型の場合。"
  overload: System.Net.IPEndPointCollection.SetItem*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> index </code>パラメーターが&0; より小さい - または -、 <code> index </code>パラメーターが現在のアイテムの数より大きい、 <xref href=&quot;System.Net.IPEndPointCollection&quot;></xref>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>item</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.ObjectModel.Collection<System.Net.IPEndPoint>
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.IPEndPointCollection.#ctor
  parent: System.Net.IPEndPointCollection
  isExternal: false
  name: IPEndPointCollection()
  nameWithType: IPEndPointCollection.IPEndPointCollection()
  fullName: System.Net.IPEndPointCollection.IPEndPointCollection()
- uid: System.Net.IPEndPointCollection.InsertItem(System.Int32,System.Net.IPEndPoint)
  parent: System.Net.IPEndPointCollection
  isExternal: false
  name: InsertItem(Int32,IPEndPoint)
  nameWithType: IPEndPointCollection.InsertItem(Int32,IPEndPoint)
  fullName: System.Net.IPEndPointCollection.InsertItem(Int32,IPEndPoint)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.IPEndPointCollection.SetItem(System.Int32,System.Net.IPEndPoint)
  parent: System.Net.IPEndPointCollection
  isExternal: false
  name: SetItem(Int32,IPEndPoint)
  nameWithType: IPEndPointCollection.SetItem(Int32,IPEndPoint)
  fullName: System.Net.IPEndPointCollection.SetItem(Int32,IPEndPoint)
- uid: System.Net.IPEndPointCollection.#ctor*
  parent: System.Net.IPEndPointCollection
  isExternal: false
  name: IPEndPointCollection
  nameWithType: IPEndPointCollection.IPEndPointCollection
- uid: System.Net.IPEndPointCollection.InsertItem*
  parent: System.Net.IPEndPointCollection
  isExternal: false
  name: InsertItem
  nameWithType: IPEndPointCollection.InsertItem
- uid: System.Net.IPEndPointCollection.SetItem*
  parent: System.Net.IPEndPointCollection
  isExternal: false
  name: SetItem
  nameWithType: IPEndPointCollection.SetItem
