### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlCommand
  id: SqlCommand
  children:
  - System.Data.SqlClient.SqlCommand.#ctor
  - System.Data.SqlClient.SqlCommand.#ctor(System.String)
  - System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)
  - System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery
  - System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)
  - System.Data.SqlClient.SqlCommand.BeginExecuteReader
  - System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)
  - System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader
  - System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)
  - System.Data.SqlClient.SqlCommand.Cancel
  - System.Data.SqlClient.SqlCommand.Clone
  - System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting
  - System.Data.SqlClient.SqlCommand.CommandText
  - System.Data.SqlClient.SqlCommand.CommandTimeout
  - System.Data.SqlClient.SqlCommand.CommandType
  - System.Data.SqlClient.SqlCommand.Connection
  - System.Data.SqlClient.SqlCommand.CreateDbParameter
  - System.Data.SqlClient.SqlCommand.CreateParameter
  - System.Data.SqlClient.SqlCommand.DbConnection
  - System.Data.SqlClient.SqlCommand.DbParameterCollection
  - System.Data.SqlClient.SqlCommand.DbTransaction
  - System.Data.SqlClient.SqlCommand.DesignTimeVisible
  - System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)
  - System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)
  - System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)
  - System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteNonQuery
  - System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteReader
  - System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteScalar
  - System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteXmlReader
  - System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync
  - System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.Notification
  - System.Data.SqlClient.SqlCommand.NotificationAutoEnlist
  - System.Data.SqlClient.SqlCommand.Parameters
  - System.Data.SqlClient.SqlCommand.Prepare
  - System.Data.SqlClient.SqlCommand.ResetCommandTimeout
  - System.Data.SqlClient.SqlCommand.StatementCompleted
  - System.Data.SqlClient.SqlCommand.System#ICloneable#Clone
  - System.Data.SqlClient.SqlCommand.Transaction
  - System.Data.SqlClient.SqlCommand.UpdatedRowSource
  langs:
  - csharp
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
  type: Class
  summary: "TRANSACT-SQL ステートメントまたは SQL Server データベースに対して実行するストアド プロシージャを表します。 このクラスは継承できません。"
  remarks: "SqlCommand のインスタンスが作成されると、読み取り/書き込みプロパティは、初期値に設定されます。 これらの値の一覧は、SqlCommand コンス トラクターを参照してください。       SqlCommand の機能で SQL Server データベースからのコマンドを実行するため、次の方法: |項目 |説明 |  |----------|-----------------|  |<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>|TRANSACT-SQL ステートメントまたは INSERT、DELETE、UPDATE、およびセット ステートメントなどのコマンドを実行する、通常、この SqlCommand で説明されているストアド プロシージャの非同期実行を開始します</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>。 別のスレッドで通常の操作を完了する<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>を呼び出して<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>への各呼び出しを組み合わせる必要があります |。  |<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>|TRANSACT-SQL ステートメントまたはこの SqlCommand で記述され、1 つまたは複数の結果を取得するストアド プロシージャの非同期実行をサーバーから設定を開始します</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A></xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>。 別のスレッドで通常の操作を完了する<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>を呼び出して<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>への各呼び出しを組み合わせる必要があります |。  |<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>|TRANSACT-SQL ステートメントまたはこの SqlCommand で説明されているストアド プロシージャの非同期実行を開始します</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A></xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。 各呼び出し`BeginExecuteXmlReader`への呼び出しと組み合わせる必要がある`EndExecuteXmlReader`、通常、別のスレッド上で、操作を終了して<xref:System.Xml.XmlReader>オブジェクトを返します |。  |<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>|行を返すコマンドを実行します</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A></xref:System.Xml.XmlReader>。 パフォーマンスを向上させる<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>Transact SQL を使用してコマンドを呼び出します`sp_executesql`システム ストアド プロシージャ</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 したがって、<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>いない可能性があります、目的の効果を使用する場合: TRANSACT-SQL の SET ステートメントなどのコマンドを実行します |。  |<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>|Transact SQL の INSERT、DELETE、UPDATE、および一連のステートメントなどのコマンドを実行します |。  |<xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>|データベースから単一の値 (たとえば、集計値) を取得します |。  |<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>に、<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>を送信し、<xref:System.Xml.XmlReader>オブジェクトを構築します |。      リセットすることができます、<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>プロパティと SqlCommand オブジェクトを再利用します</xref:System.Data.SqlClient.SqlCommand.CommandText%2A></xref:System.Xml.XmlReader></xref:System.Data.SqlClient.SqlCommand.CommandText%2A></xref:System.Data.SqlClient.SqlCommand.Connection%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 ただし、閉じる必要があります、<xref:System.Data.SqlClient.SqlDataReader>新しいまたは前のコマンドを実行する前にします</xref:System.Data.SqlClient.SqlDataReader>。       場合、 <xref:System.Data.SqlClient.SqlException>SqlCommand を実行しているメソッドによって生成される、<xref:System.Data.SqlClient.SqlConnection>重大度レベルが 19 以下の場合は開いたままです</xref:System.Data.SqlClient.SqlConnection></xref:System.Data.SqlClient.SqlException>。 重大度レベルが 20 以上の場合、サーバーは、 <xref:System.Data.SqlClient.SqlConnection>。</xref:System.Data.SqlClient.SqlConnection>通常を閉じます。 ただし、ユーザーことができます、接続を再び開き、続行します。      > [!NOTE] > Nameless、序数に基づくとも呼ばれます。 パラメーターが、SQL Server の .NET Framework データ プロバイダーによってサポートされていません。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a SqlCommand, and a <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it to the console. Finally, the example closes the <xref:System.Data.SqlClient.SqlDataReader> and then the <xref:System.Data.SqlClient.SqlConnection> as it exits the `Using` code blocks.  \n  \n [!code-cs[Classic WebData SqlCommand Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._6_1.cs)]\n [!code-vb[Classic WebData SqlCommand Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._6_1.vb)]  \n  \n The following sample shows how to create and execute different types of SqlCommand objects.  \n  \n First you must create the sample database, by executing the following script:  \n  \n```  \nUSE [master]  \nGO  \n  \nCREATE DATABASE [MySchool]  \nGO  \n  \nUSE [MySchool]  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE procedure [dbo].[CourseExtInfo] @CourseId int  \nas  \nselect c.CourseID,c.Title,c.Credits,d.Name as DepartmentName  \nfrom Course as c left outer join Department as d on c.DepartmentID=d.DepartmentID  \nwhere c.CourseID=@CourseId  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \ncreate procedure [dbo].[DepartmentInfo] @DepartmentId int,@CourseCount int output  \nas  \nselect @CourseCount=Count(c.CourseID)  \nfrom course as c  \nwhere c.DepartmentID=@DepartmentId  \n  \nselect d.DepartmentID,d.Name,d.Budget,d.StartDate,d.Administrator  \nfrom Department as d  \nwhere d.DepartmentID=@DepartmentId  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCreate PROCEDURE [dbo].[GetDepartmentsOfSpecifiedYear]   \n@Year int,@BudgetSum money output  \nAS  \nBEGIN  \n        SELECT @BudgetSum=SUM([Budget])  \n  FROM [MySchool].[dbo].[Department]  \n  Where YEAR([StartDate])=@Year   \n  \nSELECT [DepartmentID]  \n      ,[Name]  \n      ,[Budget]  \n      ,[StartDate]  \n      ,[Administrator]  \n  FROM [MySchool].[dbo].[Department]  \n  Where YEAR([StartDate])=@Year  \n  \nEND  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,  \n[Year] [smallint] NOT NULL,  \n[Title] [nvarchar](100) NOT NULL,  \n[Credits] [int] NOT NULL,  \n[DepartmentID] [int] NOT NULL,  \n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \n(  \n[CourseID] ASC,  \n[Year] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \n[Name] [nvarchar](50) NOT NULL,  \n[Budget] [money] NOT NULL,  \n[StartDate] [datetime] NOT NULL,  \n[Administrator] [int] NULL,  \n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \n(  \n[DepartmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Person](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \n[LastName] [nvarchar](50) NOT NULL,  \n[FirstName] [nvarchar](50) NOT NULL,  \n[HireDate] [datetime] NULL,  \n[EnrollmentDate] [datetime] NULL,  \n CONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED   \n(  \n[PersonID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[StudentGrade](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \n[CourseID] [nvarchar](10) NOT NULL,  \n[StudentID] [int] NOT NULL,  \n[Grade] [decimal](3, 2) NOT NULL,  \n CONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED   \n(  \n[EnrollmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \ncreate view [dbo].[EnglishCourse]  \nas  \nselect c.CourseID,c.Title,c.Credits,c.DepartmentID  \nfrom Course as c join Department as d on c.DepartmentID=d.DepartmentID  \nwhere d.Name=N'English'  \n  \nGO  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  \nSET IDENTITY_INSERT [dbo].[Department] ON   \n  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \nSET IDENTITY_INSERT [dbo].[Department] OFF  \nSET IDENTITY_INSERT [dbo].[Person] ON   \n  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (1, N'Hu', N'Nan', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (2, N'Norman', N'Laura', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (3, N'Olivotto', N'Nino', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (4, N'Anand', N'Arturo', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (5, N'Jai', N'Damien', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (6, N'Holt', N'Roger', CAST(0x000097F100000000 AS DateTime), NULL)  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (7, N'Martin', N'Randall', CAST(0x00008B1A00000000 AS DateTime), NULL)  \nSET IDENTITY_INSERT [dbo].[Person] OFF  \nSET IDENTITY_INSERT [dbo].[StudentGrade] ON   \n  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (1, N'C1045', 1, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (2, N'C1045', 2, CAST(3.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (3, N'C1045', 3, CAST(2.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (4, N'C1045', 4, CAST(4.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (5, N'C1045', 5, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (6, N'C1061', 1, CAST(4.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (7, N'C1061', 3, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (8, N'C1061', 4, CAST(2.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (9, N'C1061', 5, CAST(1.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (10, N'C2021', 1, CAST(2.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (11, N'C2021', 2, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (12, N'C2021', 4, CAST(3.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (13, N'C2021', 5, CAST(3.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (14, N'C2042', 1, CAST(2.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (15, N'C2042', 2, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (16, N'C2042', 3, CAST(4.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (17, N'C2042', 5, CAST(3.00 AS Decimal(3, 2)))  \nSET IDENTITY_INSERT [dbo].[StudentGrade] OFF  \nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \nREFERENCES [dbo].[Department] ([DepartmentID])  \nGO  \nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \nGO  \nALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  CONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])  \nREFERENCES [dbo].[Person] ([PersonID])  \nGO  \nALTER TABLE [dbo].[StudentGrade] CHECK CONSTRAINT [FK_StudentGrade_Student]  \nGO  \n```  \n  \n Next, compile and execute the following:  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \nusing System.Threading.Tasks;  \n  \nclass Program {  \n  \n   static class SqlHelper {  \n      // Set the connection, command, and then execute the command with non query.  \n      public static Int32 ExecuteNonQuery(String connectionString, String commandText,  \n          CommandType commandType, params SqlParameter[] parameters) {  \n         using (SqlConnection conn = new SqlConnection(connectionString)) {  \n            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  \n               // There're three command types: StoredProcedure, Text, TableDirect. The TableDirect   \n               // type is only for OLE DB.    \n               cmd.CommandType = commandType;  \n               cmd.Parameters.AddRange(parameters);  \n  \n               conn.Open();  \n               return cmd.ExecuteNonQuery();  \n            }  \n         }  \n      }  \n  \n      // Set the connection, command, and then execute the command and only return one value.  \n      public static Object ExecuteScalar(String connectionString, String commandText,  \n          CommandType commandType, params SqlParameter[] parameters) {  \n         using (SqlConnection conn = new SqlConnection(connectionString)) {  \n            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  \n               cmd.CommandType = commandType;  \n               cmd.Parameters.AddRange(parameters);  \n  \n               conn.Open();  \n               return cmd.ExecuteScalar();  \n            }  \n         }  \n      }  \n  \n      // Set the connection, command, and then execute the command with query and return the reader.  \n      public static SqlDataReader ExecuteReader(String connectionString, String commandText,  \n          CommandType commandType, params SqlParameter[] parameters) {  \n         SqlConnection conn = new SqlConnection(connectionString);  \n  \n         using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  \n            cmd.CommandType = commandType;  \n            cmd.Parameters.AddRange(parameters);  \n  \n            conn.Open();  \n            // When using CommandBehavior.CloseConnection, the connection will be closed when the   \n            // IDataReader is closed.  \n            SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);  \n  \n            return reader;  \n         }  \n      }  \n   }  \n  \n   static void Main(string[] args) {  \n      String connectionString = \"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;\";  \n  \n      CountCourses(connectionString, 2012);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Following result is the departments that started from 2007:\");  \n      GetDepartments(connectionString, 2007);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Add the credits when the credits of course is lower than 4.\");  \n      AddCredits(connectionString, 4);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Please press any key to exit...\");  \n      Console.ReadKey();  \n   }  \n  \n   static void CountCourses(String connectionString, Int32 year) {  \n      String commandText = \"Select Count([CourseID]) FROM [MySchool].[dbo].[Course] Where Year=@Year\";  \n      SqlParameter parameterYear = new SqlParameter(\"@Year\", SqlDbType.Int);  \n      parameterYear.Value = year;  \n  \n      Object oValue = SqlHelper.ExecuteScalar(connectionString, commandText, CommandType.Text, parameterYear);  \n      Int32 count;  \n      if (Int32.TryParse(oValue.ToString(), out count))  \n         Console.WriteLine(\"There {0} {1} course{2} in {3}.\", count > 1 ? \"are\" : \"is\", count, count > 1 ? \"s\" : null, year);  \n   }  \n  \n   // Display the Departments that start from the specified year.  \n   static void GetDepartments(String connectionString, Int32 year) {  \n      String commandText = \"dbo.GetDepartmentsOfSpecifiedYear\";  \n  \n      // Specify the year of StartDate  \n      SqlParameter parameterYear = new SqlParameter(\"@Year\", SqlDbType.Int);  \n      parameterYear.Value = year;  \n  \n      // When the direction of parameter is set as Output, you can get the value after   \n      // executing the command.  \n      SqlParameter parameterBudget = new SqlParameter(\"@BudgetSum\", SqlDbType.Money);  \n      parameterBudget.Direction = ParameterDirection.Output;  \n  \n      using (SqlDataReader reader = SqlHelper.ExecuteReader(connectionString, commandText,  \n          CommandType.StoredProcedure, parameterYear, parameterBudget)) {  \n         Console.WriteLine(\"{0,-20}{1,-20}{2,-20}{3,-20}\", \"Name\", \"Budget\", \"StartDate\",  \n             \"Administrator\");  \n         while (reader.Read()) {  \n            Console.WriteLine(\"{0,-20}{1,-20:C}{2,-20:d}{3,-20}\", reader[\"Name\"],  \n                reader[\"Budget\"], reader[\"StartDate\"], reader[\"Administrator\"]);  \n         }  \n      }  \n      Console.WriteLine(\"{0,-20}{1,-20:C}\", \"Sum:\", parameterBudget.Value);  \n   }  \n  \n   // If credits of course is lower than the certain value, the method will add the credits.  \n   static void AddCredits(String connectionString, Int32 creditsLow) {  \n      String commandText = \"Update [MySchool].[dbo].[Course] Set Credits=Credits+1 Where Credits<@Credits\";  \n  \n      SqlParameter parameterCredits = new SqlParameter(\"@Credits\", creditsLow);  \n  \n      Int32 rows = SqlHelper.ExecuteNonQuery(connectionString, commandText, CommandType.Text, parameterCredits);  \n  \n      Console.WriteLine(\"{0} row{1} {2} updated.\", rows, rows > 1 ? \"s\" : null, rows > 1 ? \"are\" : \"is\");  \n   }  \n}  \n```"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RecordsAffected")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(true)]

      public sealed class SqlCommand : System.Data.Common.DbCommand, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbCommand
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbCommand.ExecuteNonQueryAsync
  - System.Data.Common.DbCommand.ExecuteScalarAsync
  - System.Data.Common.DbCommand.System#Data#IDbCommand#Connection
  - System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter
  - System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader
  - System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)
  - System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters
  - System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: SqlCommand()
  nameWithType: SqlCommand.SqlCommand()
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>クラスです。"
  remarks: "基本コンス トラクターは、すべてのフィールドを既定値を初期化します。 次の表は、 <xref:System.Data.SqlClient.SqlCommand>。</xref:System.Data.SqlClient.SqlCommand>のインスタンスの初期プロパティ値を示しています。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>| 空の文字列 (&quot;&quot;) |  |<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|&30; |  |<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  |<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|Null |      これらのプロパティをプロパティに別個の呼び出しのいずれかの値を変更することができます</xref:System.Data.SqlClient.SqlCommand.Connection%2A></xref:System.Data.SqlClient.SqlCommand.CommandType%2A></xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A></xref:System.Data.SqlClient.SqlCommand.CommandText%2A>。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets the `CommandTimeout` property.  \n  \n [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._39_1.vb)]\n [!code-cs[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._39_1.cs)]"
  syntax:
    content: public SqlCommand ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: SqlCommand(String)
  nameWithType: SqlCommand.SqlCommand(String)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>クエリのテキストを持つクラス。"
  remarks: "インスタンス<xref:System.Data.SqlClient.SqlCommand>作成されると、次読み取り/書き込みプロパティの初期値に設定されます</xref:System.Data.SqlClient.SqlCommand>。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  |<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|&30; |  |<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  |<xref:System.Data.SqlClient.SqlCommand.Connection%2A>| null |      これらのプロパティをプロパティに別個の呼び出しのいずれかの値を変更することができます</xref:System.Data.SqlClient.SqlCommand.Connection%2A></xref:System.Data.SqlClient.SqlCommand.CommandType%2A></xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A></xref:System.Data.SqlClient.SqlCommand.CommandText%2A>。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand>, passing in the connection string and command text.  \n  \n [!code-vb[Classic WebData SqlCommand.SqlCommand1 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._21_1.vb)]\n [!code-cs[Classic WebData SqlCommand.SqlCommand1 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._21_1.cs)]"
  syntax:
    content: public SqlCommand (string cmdText);
    parameters:
    - id: cmdText
      type: System.String
      description: "クエリのテキスト。"
  overload: System.Data.SqlClient.SqlCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.String,System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: SqlCommand(String,SqlConnection)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>クエリのテキストを持つクラスと<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>です。"
  remarks: "次の表は、 <xref:System.Data.SqlClient.SqlCommand>。</xref:System.Data.SqlClient.SqlCommand>のインスタンスの初期プロパティ値を示しています。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  |<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|&30; |  |<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  |<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|値である新しい<xref:System.Data.SqlClient.SqlConnection>、`connection`パラメーターです |。      これらのパラメーターのいずれかの値を変更するには、関連するプロパティを設定します</xref:System.Data.SqlClient.SqlConnection></xref:System.Data.SqlClient.SqlCommand.Connection%2A></xref:System.Data.SqlClient.SqlCommand.CommandType%2A></xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A></xref:System.Data.SqlClient.SqlCommand.CommandText%2A>。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-cs[Classic WebData SqlCommand.SqlCommand2 Example#1](~/add/codesnippet/csharp/c858d494-4959-470c-91ba-_1.cs)]\n [!code-vb[Classic WebData SqlCommand.SqlCommand2 Example#1](~/add/codesnippet/visualbasic/c858d494-4959-470c-91ba-_1.vb)]"
  syntax:
    content: public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: cmdText
      type: System.String
      description: "クエリのテキスト。"
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "A <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> SQL Server のインスタンスへの接続を表すです。"
  overload: System.Data.SqlClient.SqlCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: SqlCommand(String,SqlConnection,SqlTransaction)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> 、クエリのテキストを持つクラス、 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>、および<xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;></xref>です。"
  remarks: "次の表は、 <xref:System.Data.SqlClient.SqlCommand>。</xref:System.Data.SqlClient.SqlCommand>のインスタンスの初期プロパティ値を示しています。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  |<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|&30; |  |<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  |<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|値である新しい<xref:System.Data.SqlClient.SqlConnection>、`connection`パラメーターです |。      これらのパラメーターのいずれかの値を変更するには、関連するプロパティを設定します</xref:System.Data.SqlClient.SqlConnection></xref:System.Data.SqlClient.SqlCommand.Connection%2A></xref:System.Data.SqlClient.SqlCommand.CommandType%2A></xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A></xref:System.Data.SqlClient.SqlCommand.CommandText%2A>。"
  syntax:
    content: public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction);
    parameters:
    - id: cmdText
      type: System.String
      description: "クエリのテキスト。"
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "A <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> SQL Server のインスタンスへの接続を表すです。"
    - id: transaction
      type: System.Data.SqlClient.SqlTransaction
      description: "<xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref>を<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>を実行します。"
  overload: System.Data.SqlClient.SqlCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)
  id: '#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>指定したコマンド テキスト、接続、トランザクション、および暗号化の設定を持つクラス。"
  syntax:
    content: public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction, System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    parameters:
    - id: cmdText
      type: System.String
      description: "クエリのテキスト。"
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "A <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> SQL Server のインスタンスへの接続を表すです。"
    - id: transaction
      type: System.Data.SqlClient.SqlTransaction
      description: "<xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref>を<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>を実行します。"
    - id: columnEncryptionSetting
      type: System.Data.SqlClient.SqlCommandColumnEncryptionSetting
      description: "暗号化の設定。 詳細については、次を参照してください。 [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx)です。"
  overload: System.Data.SqlClient.SqlCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery
  id: BeginExecuteNonQuery
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteNonQuery()
  nameWithType: SqlCommand.BeginExecuteNonQuery()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL ステートメントまたはこの記載されているストアド プロシージャの非同期実行を開始<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。"
  remarks: "BeginExecuteNonQuery メソッドが非同期に実行のプロセスを開始、[!INCLUDE[tsql](~/add/includes/tsql-md.md)]ステートメントまたはステートメントが実行中に同時に他のタスクを実行できるように、行を返さないストアド プロシージャです。 開発者は、ステートメントが完了したらを呼び出す必要があります、<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>メソッドが、操作を完了する</xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>。 BeginExecuteNonQuery メソッドからすぐに (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> BeginExecuteNonQuery で影響を与えません)、コードでは、対応するが実行されるまで、<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し<xref:System.Data.SqlClient.SqlCommand>オブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A></xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>。 呼び出す、<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>コマンドの実行が完了する前に、<xref:System.Data.SqlClient.SqlCommand>実行が終了するまでブロックするオブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>。       コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドまたは多数のパラメーターが送信される場合、このメソッドは、書き込み中にブロック可能性があります。 コマンドを送信すると、メソッドは、サーバーからの応答を待つことがなく直ちにを返します。 つまり、読み取りは非同期です。       このオーバー ロードでは、コールバック プロシージャはサポートされていません、開発者には、コマンドが完了するかどうかを決定するいずれかのポーリングを使用して、<xref:System.IAsyncResult.IsCompleted%2A>のプロパティ、 <xref:System.IAsyncResult>BeginExecuteNonQuery メソッドによって返された<xref:System.IAsyncResult.AsyncWaitHandle%2A>、返された<xref:System.IAsyncResult>.</xref:System.IAsyncResult>のプロパティ</xref:System.IAsyncResult.AsyncWaitHandle%2A>を使用して&1; つまたは複数のコマンドの完了を待つまたは</xref:System.IAsyncResult></xref:System.IAsyncResult.IsCompleted%2A>"
  example:
  - "The following console application creates updates data within the **AdventureWorks** sample database, doing its work asynchronously. In order to emulate a long-running process, this example inserts a WAITFOR statement in the command text. Normally, you would not take efforts to make your commands run slower, but doing this in this case makes it easier to demonstrate the asynchronous behavior.  \n  \n [!code-vb[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._34_1.vb)]\n [!code-cs[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/add/codesnippet/csharp/m-system.data.sqlclient._34_1.cs)]"
  syntax:
    content: public IAsyncResult BeginExecuteNonQuery ();
    parameters: []
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>、結果のポーリング、待機に使用できる、または両方この値は、を呼び出すときにも必要<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*>、影響を受けた行の数が返されます。</xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*> </xref:System.IAsyncResult> 。"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "コマンド テキストの実行中に発生したエラーです。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "名前/値ペア&quot;非同期処理 = true&quot;の接続を定義する接続文字列内に含まれていない<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)
  id: BeginExecuteNonQuery(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteNonQuery(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteNonQuery(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL ステートメントまたはこの記載されているストアド プロシージャの非同期実行を開始<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>、コールバック プロシージャと状態情報を指定します。"
  remarks: "<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>メソッドは非同期的に実行する TRANSACT-SQL ステートメントまたは行を返さないストアド プロシージャ ステートメントが実行中に同時に他のタスクを実行できるようにプロセスを開始します</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>。 開発者は、ステートメントが完了したらを呼び出す必要があります、<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>メソッドが、操作を完了する</xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>メソッドからすぐに (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> BeginExecuteNonQuery に影響を与えません)、コードでは、対応するが実行されるまで、<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し<xref:System.Data.SqlClient.SqlCommand>オブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A></xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A></xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>。 呼び出す、<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>コマンドの実行が完了する前に、<xref:System.Data.SqlClient.SqlCommand>実行が終了するまでブロックするオブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>。       `callback`パラメーターを指定できます、 <xref:System.AsyncCallback>、ステートメントが完了したときに呼び出されるデリゲート</xref:System.AsyncCallback>。 呼び出すことができます、<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>このデリゲート プロシージャまたはアプリケーション内で他の任意の場所から</xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>。 さらの任意のオブジェクトを渡すことができます、`asyncStateObject`パラメーターと、コールバック プロシージャを使用してこの情報を取得できる、<xref:System.IAsyncResult.AsyncState%2A>プロパティ</xref:System.IAsyncResult.AsyncState%2A>。       コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドまたは多数のパラメーターが送信される場合、このメソッドは、書き込み中にブロック可能性があります。 コマンドを送信すると、メソッドは、サーバーからの応答を待つことがなく直ちにを返します。 つまり、読み取りは非同期です。       コールバック プロシージャは、Microsoft .NET 共通言語ランタイムによって提供される、バック グラウンド スレッド内から実行するため、非常に重要なは、アプリケーションでのスレッド間の対話を処理する厳密なアプローチを取っておくことです。 たとえば、する通信してはいけませんのフォームの内容と、コールバック プロシージャ内でフォームを更新する必要を切り替える必要があります、フォームのスレッドに作業するためにします。 このトピックの例では、この動作を示します。       操作の実行中に発生するすべてのエラーは、コールバック プロシージャ内の例外としてスローされます。 コールバック プロシージャではなく、メイン アプリケーションの例外を処理する必要があります。 コールバック プロシージャ内の例外を処理する方法の詳細については、このトピックの例を参照してください。"
  example:
  - "The following Windows application demonstrates the use of the BeginExecuteNonQuery method, executing a Transact-SQL statement that includes a delay of several seconds (emulating a long-running command).  \n  \n This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  \n  \n To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteNonQueryForm.TesterFormCS/Form1.cs#1)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteNonQueryForm.TesterFormVB/Form1.vb#1)]"
  syntax:
    content: public IAsyncResult BeginExecuteNonQuery (AsyncCallback callback, object stateObject);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>コマンドの実行が完了したときに呼び出されるデリゲート</xref:System.AsyncCallback>。 渡す<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Microsoft Visual Basic で) をコールバックが必要ないことを示します。"
    - id: stateObject
      type: System.Object
      description: "コールバック プロシージャに渡されるユーザー定義の状態オブジェクト。 コールバック プロシージャを使用して、内からこのオブジェクトを取得、<xref:System.IAsyncResult.AsyncState*>プロパティ</xref:System.IAsyncResult.AsyncState*>。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>、結果のポーリング、待機に使用できる、または両方この値は、を呼び出すときにも必要<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*>、影響を受けた行の数が返されます。</xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*> </xref:System.IAsyncResult> 。"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "コマンド テキストの実行中に発生したエラーです。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "名前/値ペア&quot;非同期処理 = true&quot;の接続を定義する接続文字列内に含まれていない<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader
  id: BeginExecuteReader
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteReader()
  nameWithType: SqlCommand.BeginExecuteReader()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL ステートメントまたはこの記載されているストアド プロシージャの非同期実行を開始<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>、し、サーバーから&1; つまたは複数の結果セットを取得します。"
  remarks: "多くのメソッドは、非同期的に実行する TRANSACT-SQL ステートメントまたは行を返すストアド プロシージャ ステートメントが実行中に同時に他のタスクを実行できるように、プロセスを開始します。 開発者は、ステートメントが完了したらを呼び出す必要があります、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>を操作を完了し、取得、<xref:System.Data.SqlClient.SqlDataReader>コマンドによって返される</xref:System.Data.SqlClient.SqlDataReader></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。 多くのメソッドを即座に返しますが、コードでは、対応するが実行されるまで<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し<xref:System.Data.SqlClient.SqlCommand>オブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。 呼び出す、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>コマンドの実行が完了する前に、<xref:System.Data.SqlClient.SqlCommand>実行が終了するまでブロックするオブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。       コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドまたは多数のパラメーターが送信される場合、このメソッドは、書き込み中にブロック可能性があります。 コマンドを送信すると、メソッドは、サーバーからの応答を待つことがなく直ちにを返します。 つまり、読み取りは非同期です。 コマンドの実行は、非同期が、まだ同期している値を取得します。 型を呼び出すことを意味<xref:System.Data.SqlClient.SqlDataReader.Read%2A>より多くのデータが必要な場合をブロックする可能性があり、基になるネットワークの読み取り操作がブロックされます</xref:System.Data.SqlClient.SqlDataReader.Read%2A>。       このオーバー ロードでは、コールバック プロシージャはサポートされていません、開発者には、コマンドが完了するかどうかを決定するいずれかのポーリングを使用して、<xref:System.IAsyncResult.IsCompleted%2A>のプロパティ、<xref:System.IAsyncResult>多くメソッドによって返された<xref:System.IAsyncResult.AsyncWaitHandle%2A>、返された<xref:System.IAsyncResult>.</xref:System.IAsyncResult>のプロパティ</xref:System.IAsyncResult.AsyncWaitHandle%2A>を使用して&1; つまたは複数のコマンドの完了を待つまたは</xref:System.IAsyncResult></xref:System.IAsyncResult.IsCompleted%2A>       使用する場合<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>またはデータにアクセスする XML、SQL Server の多くは、XML で結果を返す 2,033 文字を超えるそれぞれ 2,033 文字の複数の行の長さ</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 この問題を回避するには、次のように使用します<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>を FOR XML クエリを読み取る。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> 。 詳細については、http://support.microsoft.com で Microsoft サポート技術情報の記事 Q310378、&quot;[prb]:: XML データが切り捨てられたときに、使用 SqlDataReader、&quot;を参照してください。"
  example:
  - "The following console application starts the process of retrieving a data reader asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <xref:System.IAsyncResult.IsCompleted%2A> property value. As soon as the process has completed, the code retrieves the <xref:System.Data.SqlClient.SqlDataReader> and displays its contents.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteReader#1](~/add/codesnippet/csharp/m-system.data.sqlclient._4_1.cs)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteReader#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._4_1.vb)]"
  syntax:
    content: public IAsyncResult BeginExecuteReader ();
    parameters: []
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>、結果のポーリング、待機に使用できる、または両方この値は、を呼び出すときにも必要<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*>、返された、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>インスタンスを使用して、返された行を取得することができます。</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*> </xref:System.IAsyncResult> 。"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "コマンド テキストの実行中に発生したエラーです。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "名前/値ペア&quot;非同期処理 = true&quot;の接続を定義する接続文字列内に含まれていない<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)
  id: BeginExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteReader(CommandBehavior)
  nameWithType: SqlCommand.BeginExecuteReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL ステートメントまたはこの記載されているストアド プロシージャの非同期実行を開始<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>のいずれかを使用して、 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>値。"
  remarks: "<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>メソッドは非同期的に実行する TRANSACT-SQL ステートメントまたは行を返すストアド プロシージャ ステートメントが実行中に同時に他のタスクを実行できるようにプロセスを開始します</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。 開発者は、ステートメントが完了したらを呼び出す必要があります、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>を操作を完了し、取得、<xref:System.Data.SqlClient.SqlDataReader>コマンドによって返される</xref:System.Data.SqlClient.SqlDataReader></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>メソッドからすぐに、コードでは、対応するが実行されるまで、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し<xref:System.Data.SqlClient.SqlCommand>オブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。 呼び出す、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>コマンドの実行が完了する前に、<xref:System.Data.SqlClient.SqlCommand>実行が終了するまでブロックするオブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。       `behavior`パラメーターでは、コマンドと、その接続の動作を制御するオプションを指定することができます。 これらの値を一緒に組み合わせられることができます (プログラミング言語の`OR`演算子) 以外の場合は、通常、開発者が使用して、`CommandBehavior.CloseConnection`ランタイムによって接続が閉じているか確認してくださいときに、<xref:System.Data.SqlClient.SqlDataReader>が閉じられた</xref:System.Data.SqlClient.SqlDataReader>。       コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドまたは多数のパラメーターが送信される場合、このメソッドは、書き込み中にブロック可能性があります。 コマンドを送信すると、メソッドは、サーバーからの応答を待つことがなく直ちにを返します。 つまり、読み取りは非同期です。 コマンドの実行は、非同期が、まだ同期している値を取得します。 型を呼び出すことを意味<xref:System.Data.SqlClient.SqlDataReader.Read%2A>より多くのデータが必要な場合をブロックする可能性があり、基になるネットワークの読み取り操作がブロックされます</xref:System.Data.SqlClient.SqlDataReader.Read%2A>。       このオーバー ロードでは、コールバック プロシージャはサポートされていません、開発者ポーリングする必要がありますか、コマンドが完了するかどうかを決定する<xref:System.IAsyncResult.IsCompleted%2A><xref:System.IAsyncResult>、<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>メソッドまたは<xref:System.IAsyncResult.AsyncWaitHandle%2A>返された<xref:System.IAsyncResult>。</xref:System.IAsyncResult>のプロパティ</xref:System.IAsyncResult.AsyncWaitHandle%2A>を使用して&1; つまたは複数のコマンドの完了を待って</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>から返される</xref:System.IAsyncResult>プロパティ</xref:System.IAsyncResult.IsCompleted%2A>を使用します。       使用する場合<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>XML データにアクセスする SQL Server 結果を返します XML 2,033 文字を超える複数の行各 2,033 文字の長さ</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 この問題を回避するには、次のように使用します<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>を FOR XML クエリを読み取る。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> 。 詳細については、http://support.microsoft.com で Microsoft サポート技術情報の記事 Q310378、&quot;[prb]:: XML データが切り捨てられたときに、使用 SqlDataReader、&quot;を参照してください。"
  example:
  - "The following console application starts the process of retrieving a data reader asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <xref:System.IAsyncResult.IsCompleted%2A> property value. Once the process has completed, the code retrieves the <xref:System.Data.SqlClient.SqlDataReader> and displays its contents.  \n  \n This example also passes the `CommandBehavior.CloseConnection` and `CommandBehavior.SingleRow` values in the behavior parameter, causing the connection to be closed with the returned <xref:System.Data.SqlClient.SqlDataReader> is closed, and to optimize for a single row result.  \n  \n [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/add/codesnippet/visualbasic/d7d83823-a2e6-4b2d-a7a2-_1.vb)]\n [!code-cs[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/add/codesnippet/csharp/d7d83823-a2e6-4b2d-a7a2-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginExecuteReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "1 つ、 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>ステートメント実行とデータの取得に関するオプションを示す値。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>結果、またはその両方のポーリング、待機に使用できる; を呼び出す場合にも、この値が必要<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*>、返された、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>インスタンスを使用して、返された行を取得することができます</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*></xref:System.IAsyncResult>。"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "コマンド テキストの実行中に発生したエラーです。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "名前/値ペア&quot;非同期処理 = true&quot;の接続を定義する接続文字列内に含まれていない<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)
  id: BeginExecuteReader(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteReader(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteReader(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL ステートメントまたはこの記載されているストアド プロシージャの非同期実行を開始<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>し、コールバック プロシージャと状態情報を指定、サーバーから&1; つまたは複数の結果セットを取得します。"
  remarks: "<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>メソッドは非同期的に実行する TRANSACT-SQL ステートメントまたは行を返すストアド プロシージャ ステートメントが実行中に同時に他のタスクを実行できるようにプロセスを開始します</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。 開発者は、ステートメントが完了したらを呼び出す必要があります、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>を操作を完了し、取得、<xref:System.Data.SqlClient.SqlDataReader>コマンドによって返される</xref:System.Data.SqlClient.SqlDataReader></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>メソッドからすぐに、コードでは、対応するが実行されるまで、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し<xref:System.Data.SqlClient.SqlCommand>オブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。 呼び出す、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>コマンドの実行が完了する前に原因、<xref:System.Data.SqlClient.SqlCommand>実行が終了するまでブロックするオブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。       `callback`パラメーターを指定できます、 <xref:System.AsyncCallback>、ステートメントが完了したときに呼び出されるデリゲート</xref:System.AsyncCallback>。 呼び出すことができます、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>このデリゲート プロシージャまたはアプリケーション内で他の任意の場所から</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。 さらの任意のオブジェクトを渡すことができます、`stateObject`パラメーターと、コールバック プロシージャを使用してこの情報を取得できる、<xref:System.IAsyncResult.AsyncState%2A>プロパティ</xref:System.IAsyncResult.AsyncState%2A>。       コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドまたは多数のパラメーターが送信される場合、このメソッドは、書き込み中にブロック可能性があります。 コマンドを送信すると、メソッドは、サーバーからの応答を待つことがなく直ちにを返します。 つまり、読み取りは非同期です。 コマンドの実行は、非同期が、まだ同期している値を取得します。 型を呼び出すことを意味<xref:System.Data.SqlClient.SqlDataReader.Read%2A>より多くのデータが必要な場合をブロックする可能性があり、基になるネットワークの読み取り操作がブロックされます</xref:System.Data.SqlClient.SqlDataReader.Read%2A>。       コールバック プロシージャは、Microsoft .NET ランタイムによって提供される、バック グラウンド スレッド内から実行するため、非常に重要なは、アプリケーションでのスレッド間の対話を処理する厳密なアプローチを取っておくことです。 たとえば、する通信してはいけませんのフォームの内容と、コールバック プロシージャ内でフォームを更新する必要を切り替える必要があります、フォームのスレッドに作業するためにします。 このトピックの例では、この動作を示します。       操作の実行中に発生するすべてのエラーは、コールバック プロシージャ内の例外としてスローされます。 コールバック プロシージャではなく、メイン アプリケーションの例外を処理する必要があります。 コールバック プロシージャ内の例外を処理する方法の詳細については、このトピックの例を参照してください。       使用する場合<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>XML データにアクセスする SQL Server 結果を返します XML 2,033 文字を超える複数の行各 2,033 文字の長さ</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 この問題を回避するには、次のように使用します<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>を FOR XML クエリを読み取る。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> 。 詳細については、http://support.microsoft.com で Microsoft サポート技術情報の記事 Q310378、&quot;[prb]:: XML データが切り捨てられたときに、使用 SqlDataReader、&quot;を参照してください。"
  example:
  - "The following Windows application demonstrates the use of the BeginExecuteReader method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). Because the sample executes the command asynchronously, the form remains responsive while awaiting the results. This example passes the executing <xref:System.Data.SqlClient.SqlCommand> object as the `stateObject` parameter; doing so makes it simple to retrieve the <xref:System.Data.SqlClient.SqlCommand> object from within the callback procedure, so that the code can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method corresponding to the initial call to BeginExecuteReader.  \n  \n This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  \n  \n To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.DataGridView> control, and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteReaderAsync.TesterFormCS/Form1.cs#1)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteReaderAsync.TesterFormVB/Form1.vb#1)]"
  syntax:
    content: public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>コマンドの実行が完了したときに呼び出されるデリゲート</xref:System.AsyncCallback>。 渡す<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Microsoft Visual Basic で) をコールバックが必要ないことを示します。"
    - id: stateObject
      type: System.Object
      description: "コールバック プロシージャに渡されるユーザー定義の状態オブジェクト。 コールバック プロシージャを使用して、内からこのオブジェクトを取得、<xref:System.IAsyncResult.AsyncState*>プロパティ</xref:System.IAsyncResult.AsyncState*>。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>結果、またはその両方のポーリング、待機に使用できる; を呼び出す場合にも、この値が必要<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*>、返された、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>返された行を取得するために使用するインスタンス</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*></xref:System.IAsyncResult>。"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "コマンド テキストの実行中に発生したエラーです。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "名前/値ペア&quot;非同期処理 = true&quot;の接続を定義する接続文字列内に含まれていない<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)
  id: BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
  nameWithType: SqlCommand.BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL ステートメントまたはこの記載されているストアド プロシージャの非同期実行を開始<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>のいずれかを使用して、 <xref uid=&quot;langword_csharp_CommandBehavior&quot; name=&quot;CommandBehavior&quot; href=&quot;&quot;> </xref>値、および取得する&1; つまたは複数の結果セットをサーバーでは、コールバック プロシージャと状態情報を指定します。"
  remarks: "<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>メソッドは非同期的に実行する TRANSACT-SQL ステートメントまたは行を返すストアド プロシージャ ステートメントが実行中に同時に他のタスクを実行できるようにプロセスを開始します</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。 開発者は、ステートメントが完了したらを呼び出す必要があります、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>を操作を完了し、取得、<xref:System.Data.SqlClient.SqlDataReader>コマンドによって返される</xref:System.Data.SqlClient.SqlDataReader></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>メソッドからすぐに、コードでは、対応するが実行されるまで、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し<xref:System.Data.SqlClient.SqlCommand>オブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。 呼び出す、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>コマンドの実行が完了する前に、<xref:System.Data.SqlClient.SqlCommand>実行が終了するまでブロックするオブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。       `callback`パラメーターを指定できます、 <xref:System.AsyncCallback>、ステートメントが完了したときに呼び出されるデリゲート</xref:System.AsyncCallback>。 呼び出すことができます、<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>このデリゲート プロシージャまたはアプリケーション内で他の任意の場所から</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>。 さらの任意のオブジェクトを渡すことができます、`stateObject`パラメーターと、コールバック プロシージャを使用してこの情報を取得できる、<xref:System.IAsyncResult.AsyncState%2A>プロパティ</xref:System.IAsyncResult.AsyncState%2A>。       `behavior`パラメーターでは、コマンドと、その接続の動作を制御するオプションを指定することができます。 これらの値を一緒に組み合わせられることができます (プログラミング言語の`Or`演算子) 以外の場合は、通常、開発者が使用して、`CloseConnection`ランタイムによって接続が閉じているか確認してくださいときに、<xref:System.Data.SqlClient.SqlDataReader>が閉じられた</xref:System.Data.SqlClient.SqlDataReader>。 開発者は、の動作を最適化できますも、<xref:System.Data.SqlClient.SqlDataReader>を指定して、`SingleRow`事前にわかっていることにより、TRANSACT-SQL ステートメントまたはストアド プロシージャのみ単一行を返すときの値します</xref:System.Data.SqlClient.SqlDataReader>。       コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドまたは多数のパラメーターが送信される場合、このメソッドは、書き込み中にブロック可能性があります。 コマンドを送信すると、メソッドは、サーバーからの応答を待つことがなく直ちにを返します。 つまり、読み取りは非同期です。 コマンドの実行は、非同期が、まだ同期している値を取得します。 型を呼び出すことを意味<xref:System.Data.SqlClient.SqlDataReader.Read%2A>より多くのデータが必要な場合をブロックする可能性があり、基になるネットワークの読み取り操作がブロックされます</xref:System.Data.SqlClient.SqlDataReader.Read%2A>。       コールバック プロシージャは、Microsoft .NET 共通言語ランタイムによって提供される、バック グラウンド スレッド内から実行するため、非常に重要なは、アプリケーションでのスレッド間の対話を処理する厳密なアプローチを取っておくことです。 たとえば、する通信してはいけませんコールバック プロシージャ内から、フォームの内容を持つフォームを更新する必要切り替える必要があります、フォームのスレッドに作業するためにします。 このトピックの例では、この動作を示します。       操作の実行中に発生するすべてのエラーは、コールバック プロシージャ内の例外としてスローされます。 コールバック プロシージャではなく、メイン アプリケーションの例外を処理する必要があります。 コールバック プロシージャ内の例外を処理する方法の詳細については、このトピックの例を参照してください。       使用する場合<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>XML データにアクセスする SQL Server は、XML で結果を返す 2,033 文字を超えるそれぞれ 2,033 文字の複数の行の長さ</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 この問題を回避するには、次のように使用します<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>を FOR XML クエリを読み取る。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> 。 詳細については、http://support.microsoft.com で Microsoft サポート技術情報の記事 Q310378、&quot;[prb]:: XML データが切り捨てられたときに、使用 SqlDataReader、&quot;を参照してください。"
  example:
  - "The following Windows application demonstrates the use of the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). Because the sample executes the command asynchronously, the form remains responsive while awaiting the results. This example passes the executing <xref:System.Data.SqlClient.SqlCommand> object as the `stateObject` parameter; doing so makes it simple to retrieve the <xref:System.Data.SqlClient.SqlCommand> object from within the callback procedure, so that the code can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method corresponding to the initial call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  \n  \n This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  \n  \n To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.DataGridView> control, and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  \n  \n This example passes the `CommandBehavior.CloseConnection` value in the `behavior` parameter, causing the returned <xref:System.Data.SqlClient.SqlDataReader> to automatically close its connection when it is closed.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior.TesterFormCS/Form1.cs#1)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior.TesterFormVB/Form1.vb#1)]"
  syntax:
    content: public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject, System.Data.CommandBehavior behavior);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>コマンドの実行が完了したときに呼び出されるデリゲート</xref:System.AsyncCallback>。 渡す<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Microsoft Visual Basic で) をコールバックが必要ないことを示します。"
    - id: stateObject
      type: System.Object
      description: "コールバック プロシージャに渡されるユーザー定義の状態オブジェクト。 コールバック プロシージャを使用して、内からこのオブジェクトを取得、<xref:System.IAsyncResult.AsyncState*>プロパティ</xref:System.IAsyncResult.AsyncState*>。"
    - id: behavior
      type: System.Data.CommandBehavior
      description: "1 つ、 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>ステートメント実行とデータの取得に関するオプションを示す値。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>、結果のポーリング、待機に使用できる、または両方この値は、を呼び出すときにも必要<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*>、返された、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 、返された行を取得するために使用するインスタンス。</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*> </xref:System.IAsyncResult> 。"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "コマンド テキストの実行中に発生したエラーです。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "名前/値ペア&quot;非同期処理 = true&quot;の接続を定義する接続文字列内に含まれていない<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader
  id: BeginExecuteXmlReader
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteXmlReader()
  nameWithType: SqlCommand.BeginExecuteXmlReader()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL ステートメントまたはこの記載されているストアド プロシージャの非同期実行を開始<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>として結果を返すと、<xref:System.Xml.XmlReader>オブジェクト</xref:System.Xml.XmlReader>。"
  remarks: "BeginExecuteXmlReader メソッドでは、ステートメントが実行中に同時に他のタスクを実行するために非同期的に XML として行を返す TRANSACT-SQL ステートメントを実行するプロセスを開始します。 開発者は、ステートメントが完了したらを呼び出す必要があります、`EndExecuteXmlReader`コマンドで操作を完了して、XML を取得するメソッドが返されます。 BeginExecuteXmlReader メソッドを即座に返しますが、コードでは、対応するが実行されるまで`EndExecuteXmlReader`メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し<xref:System.Data.SqlClient.SqlCommand>オブジェクト</xref:System.Data.SqlClient.SqlCommand>。 呼び出す、`EndExecuteXmlReader`コマンドの実行が完了する前に、<xref:System.Data.SqlClient.SqlCommand>実行が終了するまでブロックするオブジェクト</xref:System.Data.SqlClient.SqlCommand>。       <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>プロパティが有効な FOR XML 句を使用して通常 TRANSACT-SQL ステートメントを指定します</xref:System.Data.SqlClient.SqlCommand.CommandText%2A>。 ただし、`CommandText`を返すステートメントを指定できますも`ntext`有効な XML に含まれるデータ。       一般的な<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>クエリは、c# の例を次のようにフォーマットされていることができます:```   SqlCommand command = new SqlCommand(&quot;SELECT ContactID, FirstName, LastName FROM dbo.Contact FOR XML AUTO, XMLDATA&quot;, SqlConn);   ```このメソッドは、単一行、単一列の結果セットを取得するも使用できます</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>。 ここでは、数より多い場合は、1 つの行が返されます、`EndExecuteXmlReader`メソッドのアタッチ、<xref:System.Xml.XmlReader>最初の行、および破棄の値に結果の残りの部分を設定します</xref:System.Xml.XmlReader>。       複数のアクティブな結果セット (MARS) 機能では、複数のアクションが同じ接続を使用することができます。       コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドまたは多数のパラメーターが送信される場合、このメソッドは、書き込み中にブロック可能性があります。 コマンドを送信すると、メソッドは、サーバーからの応答を待つことがなく直ちにを返します。 つまり、読み取りは非同期です。 コマンドの実行は、非同期が、まだ同期している値を取得します。       このオーバー ロードでは、コールバック プロシージャはサポートされていません、開発者、いずれかの投票を決定する必要かどうか、コマンドが完了したらを使用して、<xref:System.IAsyncResult.IsCompleted%2A>のプロパティ、 <xref:System.IAsyncResult>BeginExecuteXmlReader メソッドによって返された<xref:System.IAsyncResult.AsyncWaitHandle%2A>、返された<xref:System.IAsyncResult>.</xref:System.IAsyncResult>のプロパティ</xref:System.IAsyncResult.AsyncWaitHandle%2A>を使用して&1; つまたは複数のコマンドの完了を待つまたは</xref:System.IAsyncResult></xref:System.IAsyncResult.IsCompleted%2A>       使用する場合<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>XML データにアクセスする SQL Server 結果を返します XML 2,033 文字を超える複数の行各 2,033 文字の長さ</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 この問題を回避するには、次のように使用します<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>を FOR XML クエリを読み取る。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> 。 詳細については、http://support.microsoft.com で Microsoft サポート技術情報の記事 Q310378、&quot;[prb]:: XML データが切り捨てられたときに、使用 SqlDataReader、&quot;を参照してください。"
  example:
  - "The following console application starts the process of retrieving XML data asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <xref:System.IAsyncResult.IsCompleted%2A> property value. Once the process has completed, the code retrieves the XML and displays its contents.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/add/codesnippet/csharp/m-system.data.sqlclient._41_1.cs)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._41_1.vb)]"
  syntax:
    content: public IAsyncResult BeginExecuteXmlReader ();
    parameters: []
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>、結果のポーリング、待機に使用できる、または両方この値は、を呼び出すときにも必要<xref uid=&quot;langword_csharp_EndExecuteXmlReader&quot; name=&quot;EndExecuteXmlReader&quot; href=&quot;&quot;> </xref>、1 つの XML 値が返されます。</xref:System.IAsyncResult> 。"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "コマンド テキストの実行中に発生したエラーです。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "名前/値ペア&quot;非同期処理 = true&quot;の接続を定義する接続文字列内に含まれていない<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)
  id: BeginExecuteXmlReader(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteXmlReader(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteXmlReader(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL ステートメントまたはこの記載されているストアド プロシージャの非同期実行を開始<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>として結果を返すと、<xref:System.Xml.XmlReader>オブジェクトをコールバック プロシージャを使用します</xref:System.Xml.XmlReader>。"
  remarks: "<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>メソッドは非同期的にまたはを実行する TRANSACT-SQL ステートメントを XML として行を返すストアド プロシージャ ステートメントが実行中に同時に他のタスクを実行するためのプロセスを開始します</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>。 開発者は、ステートメントが完了したらを呼び出す必要があります、<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>を操作を完了し、要求された XML データを取得します</xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>。 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>メソッドからすぐに、コードでは、対応するが実行されるまで、<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し<xref:System.Data.SqlClient.SqlCommand>オブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A></xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>。 呼び出す、<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>コマンドの実行が完了する前に、<xref:System.Data.SqlClient.SqlCommand>実行が終了するまでブロックするオブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>。       <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>プロパティが有効な FOR XML 句を使用して通常 TRANSACT-SQL ステートメントを指定します</xref:System.Data.SqlClient.SqlCommand.CommandText%2A>。 ただし、`CommandText`を有効な XML に含まれるデータを返すステートメントを指定することもできます。 このメソッドは、単一行、単一列の結果セットを取得するも使用できます。 ここでは、数より多い場合は、1 つの行が返されます、<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>メソッドのアタッチ、<xref:System.Xml.XmlReader>最初の行、および破棄の値に結果の残りの部分を設定します</xref:System.Xml.XmlReader></xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>。       一般的な BeginExecuteXmlReader クエリは、次の c# の例のように形式指定できる:```   SqlCommand command = new SqlCommand(&quot;SELECT ContactID, FirstName, LastName FROM Contact FOR XML AUTO, XMLDATA&quot;, SqlConn);   ```このメソッドは、単一行、単一列の結果セットを取得するも使用できます。 ここでは、数より多い場合は、1 つの行が返されます、<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>メソッドのアタッチ、<xref:System.Xml.XmlReader>最初の行、および破棄の値に結果の残りの部分を設定します</xref:System.Xml.XmlReader></xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>。       複数のアクティブな結果セット (MARS) 機能では、複数のアクションが同じ接続を使用することができます。       `callback`パラメーターを指定できます、 <xref:System.AsyncCallback>、ステートメントが完了したときに呼び出されるデリゲート</xref:System.AsyncCallback>。 呼び出すことができます、<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>このデリゲート プロシージャまたはアプリケーション内で他の任意の場所から</xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>。 さらの任意のオブジェクトを渡すことができます、`stateObject`パラメーターと、コールバック プロシージャを使用してこの情報を取得できる、<xref:System.IAsyncResult.AsyncState%2A>プロパティ</xref:System.IAsyncResult.AsyncState%2A>。       コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドまたは多数のパラメーターを送信する場合、このメソッドは、書き込み中にブロック可能性があります。 コマンドを送信すると、メソッドは、サーバーからの応答を待つことがなく直ちにを返します。 つまり、読み取りは非同期です。       操作の実行中に発生するすべてのエラーは、コールバック プロシージャ内の例外としてスローされます。 コールバック プロシージャではなく、メイン アプリケーションの例外を処理する必要があります。 コールバック プロシージャ内の例外を処理する方法の詳細については、このトピックの例を参照してください。       使用する場合<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>XML データにアクセスする SQL Server は、XML で結果を返す 2,033 文字を超えるそれぞれ 2,033 文字の複数の行の長さ</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 この問題を回避するには、次のように使用します<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>を FOR XML クエリを読み取る。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> 。 詳細については、http://support.microsoft.com で Microsoft サポート技術情報の記事 Q310378、&quot;[prb]:: XML データが切り捨てられたときに、使用 SqlDataReader、&quot;を参照してください。"
  example:
  - "The following Windows application demonstrates the use of the BeginExecuteXmlReader method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). This example passes the executing <xref:System.Data.SqlClient.SqlCommand> object as the `stateObject` parameter--doing so makes it simple to retrieve the <xref:System.Data.SqlClient.SqlCommand> object from within the callback procedure, so that the code can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> method corresponding to the initial call to BeginExecuteXmlReader.  \n  \n This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  \n  \n To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.ListBox> control, and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteXmlReaderAsync.TesterFormCS/Form1.cs#1)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteXmlReaderAsync.TesterFormVB/Form1.vb#1)]"
  syntax:
    content: public IAsyncResult BeginExecuteXmlReader (AsyncCallback callback, object stateObject);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>コマンドの実行が完了したときに呼び出されるデリゲート</xref:System.AsyncCallback>。 渡す<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Microsoft Visual Basic で) をコールバックが必要ないことを示します。"
    - id: stateObject
      type: System.Object
      description: "コールバック プロシージャに渡されるユーザー定義の状態オブジェクト。 コールバック プロシージャを使用して、内からこのオブジェクトを取得、<xref:System.IAsyncResult.AsyncState*>プロパティ</xref:System.IAsyncResult.AsyncState*>。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>結果、またはその両方のポーリング、待機に使用できる; この値も必要なときに、<xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader*>が呼び出されると、XML としてコマンドの結果が返されます</xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader*></xref:System.IAsyncResult>。"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "コマンド テキストの実行中に発生したエラーです。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "名前/値ペア&quot;非同期処理 = true&quot;の接続を定義する接続文字列内に含まれていない<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Cancel
  id: Cancel
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Cancel()
  nameWithType: SqlCommand.Cancel()
  fullName: System.Data.SqlClient.SqlCommand.Cancel()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "実行をキャンセルしようとする、 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。"
  remarks: "[キャンセル] を何も行われませんが、何が発生します。 ただし、プロセスでは、コマンドが、キャンセルの試行が失敗した場合は、例外は生成されません。       場合によっては、まれを呼び出す場合に<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>呼び出して<xref:System.Data.SqlClient.SqlDataReader.Close%2A>(implicitily または明示的に)、キャンセル、し呼び出しキャンセルを呼び出す前に、キャンセル コマンドは送信されませんを SQL Server と、結果セットが<xref:System.Data.SqlClient.SqlConnection.Close%2A>.</xref:System.Data.SqlClient.SqlConnection.Close%2A>を呼び出した後にストリームを続行できます</xref:System.Data.SqlClient.SqlDataReader.Close%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> これを回避するには、リーダーまたは接続を閉じる前にキャンセルを呼び出すことを確認します。"
  example:
  - "The following example demonstrates the use of the Cancel method.  \n  \n [!code-vb[Classic WebData SqlCommand.Cancel#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._13_1.vb)]\n [!code-cs[Classic WebData SqlCommand.Cancel#1](~/add/codesnippet/csharp/m-system.data.sqlclient._13_1.cs)]"
  syntax:
    content: public override void Cancel ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommand.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Clone
  id: Clone
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Clone()
  nameWithType: SqlCommand.Clone()
  fullName: System.Data.SqlClient.SqlCommand.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新たに作成<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>現在のインスタンスのコピーであるオブジェクト。"
  syntax:
    content: public System.Data.SqlClient.SqlCommand Clone ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "新しい<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>のこのインスタンスのコピーであるオブジェクト。"
  overload: System.Data.SqlClient.SqlCommand.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting
  id: ColumnEncryptionSetting
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ColumnEncryptionSetting
  nameWithType: SqlCommand.ColumnEncryptionSetting
  fullName: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または、このコマンドの列の暗号化設定を設定します。"
  syntax:
    content: public System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }
    return:
      type: System.Data.SqlClient.SqlCommandColumnEncryptionSetting
      description: "このコマンドの列暗号化設定です。"
  overload: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.CommandText
  id: CommandText
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: CommandText
  nameWithType: SqlCommand.CommandText
  fullName: System.Data.SqlClient.SqlCommand.CommandText
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または TRANSACT-SQL ステートメント、テーブル名またはデータ ソースで実行するストアド プロシージャを設定します。"
  remarks: "ときに、<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>プロパティに設定されている`StoredProcedure`、ストアド プロシージャの名前に、CommandText プロパティを設定する必要があります</xref:System.Data.SqlClient.SqlCommand.CommandType%2A>。 ユーザーが、ストアド プロシージャ名に特殊文字が含まれている場合は、エスケープ文字構文を使用する必要あります。 コマンドのいずれかを呼び出すときにこのストアド プロシージャが実行される、`Execute`メソッドです。       Microsoft .NET Framework Data Provider for SQL Server は、TRANSACT-SQL ステートメントまたはのコマンドによって呼び出されるストアド プロシージャにパラメーターを渡すの疑問符 (?) プレース ホルダーをサポートしていません`CommandType.Text`です。 この場合、名前付きパラメーターを使用する必要があります。 例:```   SELECT * FROM dbo.Customers WHERE CustomerID = @CustomerID   ```詳細については、次を参照してください。[構成パラメーターとパラメーターのデータ型](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData SqlCommand.CommandText Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._56_1.vb)]\n [!code-cs[Classic WebData SqlCommand.CommandText Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._56_1.cs)]"
  syntax:
    content: public override string CommandText { get; set; }
    return:
      type: System.String
      description: "TRANSACT-SQL ステートメントまたはストアド プロシージャを実行します。 既定では、空の文字列です。"
  overload: System.Data.SqlClient.SqlCommand.CommandText*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.CommandTimeout
  id: CommandTimeout
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: CommandTimeout
  nameWithType: SqlCommand.CommandTimeout
  fullName: System.Data.SqlClient.SqlCommand.CommandTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得またはコマンドを実行する試行を終了し、エラーを生成するまでの待機時間を設定します。"
  remarks: "値 0 は、(コマンドを実行すると無期限に待機) の制限がないことを示します。      > [!NOTE] > <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>などの非同期メソッドの呼び出し中に、CommandTimeout プロパティは無視されます       CommandTimeout が影響を与えませんコンテキスト接続に対してコマンドを実行する (、<xref:System.Data.SqlClient.SqlConnection>で開かれた&quot;コンテキスト接続 = true&quot;、接続文字列に).</xref:System.Data.SqlClient.SqlConnection>      > [!NOTE] > このプロパティは、累積的なタイムアウト (すべてのネットワーク パケットがメソッドの呼び出し中に読み取られる) コマンドの実行または結果の処理中にすべてのネットワークの読み取り。 タイムアウトは、最初の行が返され、ユーザーの処理時間は含まれません後にも発生することができます、時刻の読み取り、ネットワークのみです。   >> かどうかを 30 秒の時刻となど<xref:System.Data.SqlClient.SqlDataReader.Read%2A>2 つのネットワーク パケットを次に 30 秒に両方のネットワーク パケットを読み取る必要があります</xref:System.Data.SqlClient.SqlDataReader.Read%2A>。 呼び出す場合<xref:System.Data.SqlClient.SqlDataReader.Read%2A>もう一度、なりますが、必要なすべてのデータを読み取る別の 30 秒です</xref:System.Data.SqlClient.SqlDataReader.Read%2A>。      ```   using System;   using System.Data.SqlClient;   ///    public class A {      ///       public static void Main() {         string connectionString = &quot;&quot;;         // Wait for 5 second delay in the command         string queryString = &quot;waitfor delay &quot;00:00:05&quot;&quot;;         using (SqlConnection connection = new SqlConnection(connectionString)) {            connection.Open();            SqlCommand command = new SqlCommand(queryString, connection);            // Setting command timeout to 1 second            command.CommandTimeout = 1;            try {               command.ExecuteNonQuery();            }            catch (SqlException e) {               Console.WriteLine(&quot;Got expected SqlException due to command timeout &quot;);               Console.WriteLine(e);            }         }      }   }   ```"
  syntax:
    content: public override int CommandTimeout { get; set; }
    return:
      type: System.Int32
      description: "コマンドの実行を待機する秒単位の時間。 既定は 30 秒です。"
  overload: System.Data.SqlClient.SqlCommand.CommandTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.CommandType
  id: CommandType
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: CommandType
  nameWithType: SqlCommand.CommandType
  fullName: System.Data.SqlClient.SqlCommand.CommandType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または設定を示す値、<xref:System.Data.SqlClient.SqlCommand.CommandText*>プロパティはことを意味します</xref:System.Data.SqlClient.SqlCommand.CommandText*>。"
  remarks: "CommandType プロパティに設定すると`StoredProcedure`、設定する必要があります、<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>プロパティをストアド プロシージャの名前にします</xref:System.Data.SqlClient.SqlCommand.CommandText%2A>。 コマンドは、Execute メソッドの&1; つを呼び出すときに、このストアド プロシージャを実行します。       Microsoft .NET Framework Data Provider for SQL Server が SQL ステートメントにパラメーターを渡すの疑問符 (?) プレース ホルダーをサポートしていないか、ストアド プロシージャ<xref:System.Data.CommandType>。</xref:System.Data.CommandType> CommandType で呼び出されました この場合、名前付きパラメーターを使用する必要があります。 例: 選択 * FROM Customers WHERE CustomerID =@CustomerID詳細については、次を参照してください。[構成パラメーターとパラメーターのデータ型](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._8_1.vb)]\n [!code-cs[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._8_1.cs)]"
  syntax:
    content: public override System.Data.CommandType CommandType { get; set; }
    return:
      type: System.Data.CommandType
      description: "1 つ、 <xref href=&quot;System.Data.CommandType&quot;> </xref>値。 既定値は<xref uid=&quot;langword_csharp_Text&quot; name=&quot;Text&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlCommand.CommandType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "値が有効ないなかった<xref href=&quot;System.Data.CommandType&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Connection
  nameWithType: SqlCommand.Connection
  fullName: System.Data.SqlClient.SqlCommand.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または設定、 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>のこのインスタンスによって使用される、 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>です。"
  remarks: "コマンドが、既存のトランザクションに参加しているし、接続が変更され、コマンドを実行しようとしていますがスローされます<xref:System.InvalidOperationException>。</xref:System.InvalidOperationException>       場合、<xref:System.Data.SqlClient.SqlCommand.Transaction%2A>プロパティが null でないと、トランザクションは既にコミットまたはロールバック<xref:System.Data.SqlClient.SqlCommand.Transaction%2A>設定を null にします</xref:System.Data.SqlClient.SqlCommand.Transaction%2A></xref:System.Data.SqlClient.SqlCommand.Transaction%2A>。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData SqlCommand.Connection Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._22_1.vb)]\n [!code-cs[Classic WebData SqlCommand.Connection Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._22_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlConnection Connection { get; set; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: "データ ソースに接続します。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlCommand.Connection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "コマンドがトランザクションに参加している接続のプロパティが変更されました."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.CreateDbParameter
  id: CreateDbParameter
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: CreateDbParameter()
  nameWithType: SqlCommand.CreateDbParameter()
  fullName: System.Data.SqlClient.SqlCommand.CreateDbParameter()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbParameter CreateDbParameter ();
    parameters: []
    return:
      type: System.Data.Common.DbParameter
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommand.CreateDbParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.CreateParameter
  id: CreateParameter
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: CreateParameter()
  nameWithType: SqlCommand.CreateParameter()
  fullName: System.Data.SqlClient.SqlCommand.CreateParameter()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを作成、 <xref href=&quot;System.Data.SqlClient.SqlParameter&quot;> </xref>オブジェクト。"
  remarks: "CreateParameter メソッドは、厳密に型指定されたバージョンの<xref:System.Data.IDbCommand.CreateParameter%2A>。</xref:System.Data.IDbCommand.CreateParameter%2A>"
  syntax:
    content: public System.Data.SqlClient.SqlParameter CreateParameter ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlParameter
      description: "A <xref href=&quot;System.Data.SqlClient.SqlParameter&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommand.CreateParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.DbConnection
  id: DbConnection
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: DbConnection
  nameWithType: SqlCommand.DbConnection
  fullName: System.Data.SqlClient.SqlCommand.DbConnection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbConnection DbConnection { get; set; }
    return:
      type: System.Data.Common.DbConnection
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommand.DbConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.DbParameterCollection
  id: DbParameterCollection
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: DbParameterCollection
  nameWithType: SqlCommand.DbParameterCollection
  fullName: System.Data.SqlClient.SqlCommand.DbParameterCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }
    return:
      type: System.Data.Common.DbParameterCollection
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommand.DbParameterCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.DbTransaction
  id: DbTransaction
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: DbTransaction
  nameWithType: SqlCommand.DbTransaction
  fullName: System.Data.SqlClient.SqlCommand.DbTransaction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbTransaction DbTransaction { get; set; }
    return:
      type: System.Data.Common.DbTransaction
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommand.DbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.DesignTimeVisible
  id: DesignTimeVisible
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: DesignTimeVisible
  nameWithType: SqlCommand.DesignTimeVisible
  fullName: System.Data.SqlClient.SqlCommand.DesignTimeVisible
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または、コマンド オブジェクトを Windows フォーム デザイナー コントロールに表示するかどうかを示す値を設定します。"
  syntax:
    content: public override bool DesignTimeVisible { get; set; }
    return:
      type: System.Boolean
      description: "コマンド オブジェクトをコントロールに表示するかどうかを示す値。 既定値は**true**です。"
  overload: System.Data.SqlClient.SqlCommand.DesignTimeVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlCommand.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlCommand.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommand.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)
  id: EndExecuteNonQuery(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: EndExecuteNonQuery(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteNonQuery(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(IAsyncResult)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL ステートメントの非同期実行を終了します。"
  remarks: "呼び出すと<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>を実行する、[!INCLUDE[tsql](~/add/includes/tsql-md.md)]ステートメントでは、操作を完了するために、EndExecuteNonQuery に呼び出す必要があります</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>。 コマンドを実行するプロセスがまだ終了して、操作が完了するまでこのメソッドはブロックされます。 ユーザーがコマンドを使用して、操作が完了したことを確認することができます、<xref:System.IAsyncResult>によって返されるインスタンス、<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>メソッド</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A></xref:System.IAsyncResult>。 コールバック プロシージャが呼び出しでは、指定したかどうかは<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>、このメソッドを呼び出す必要があります</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>。"
  example:
  - For examples demonstrating the use of the EndExecuteNonQuery method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>.
  syntax:
    content: public int EndExecuteNonQuery (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult> <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*>。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*>への呼び出しによって返される</xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "影響を受ける行の数 (と同じ動作<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery*>).</xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery*>"
  overload: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>パラメーターが null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Microsoft Visual Basic で)"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndExecuteNonQuery が&1; つのコマンドの実行で複数回呼び出されたか、メソッドが (たとえば、コード、EndExecuteNonQuery <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*>。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*>への呼び出しの実行が完了すると呼ばれる実行メソッドに対して一致していません"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "指定された時間<> *> 経過し、非同期操作がで指定された<> *> が完了していません。       一部の状況で<xref:System.IAsyncResult>に設定することができます<xref uid=&quot;langword_csharp_IsCompleted&quot; name=&quot;IsCompleted&quot; href=&quot;&quot;></xref>が正しくない</xref:System.IAsyncResult>。 時間が指定されている場合に、EndExecuteNonQuery が SqlException エラーを生じる可能性がありますこれが発生した、EndExecuteNonQuery が呼び出された場合は、 <> </> *> 経過し、非同期操作がで指定された<> *> が完了していません。 このような状況を解決するのには、CommandTimeout の値を増やすか、非同期操作が実行されている作業を削減する必要があります。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)
  id: EndExecuteReader(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: EndExecuteReader(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteReader(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteReader(IAsyncResult)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "要求されたを返す TRANSACT-SQL ステートメントの非同期実行を終了<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>です。"
  remarks: "呼び出すと<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>TRANSACT-SQL ステートメントを実行する操作を完了するために EndExecuteReader を呼び出す必要があります</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。 コマンドを実行するプロセスがまだ終了して、操作が完了するまでこのメソッドはブロックされます。 ユーザーがコマンドを使用して、操作が完了したことを確認することができます、<xref:System.IAsyncResult>によって返されるインスタンス、<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>メソッド</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A></xref:System.IAsyncResult>。 コールバック プロシージャが呼び出しでは、指定したかどうかは<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>、このメソッドを呼び出す必要があります</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。"
  example:
  - For examples demonstrating the use of the EndExecuteReader method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.
  syntax:
    content: public System.Data.SqlClient.SqlDataReader EndExecuteReader (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult> <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader*>。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader*>への呼び出しによって返される</xref:System.IAsyncResult>"
    return:
      type: System.Data.SqlClient.SqlDataReader
      description: "A <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>要求された行を取得するために使用できるオブジェクト。"
  overload: System.Data.SqlClient.SqlCommand.EndExecuteReader*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>パラメーターが null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Microsoft Visual Basic で)"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndExecuteReader が&1; つのコマンドの実行で複数回呼び出されました。 または、メソッドが (たとえば、コード EndExecuteReader <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*>。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*>への呼び出しの実行が完了すると呼ばれる実行メソッドに対して一致していません"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)
  id: EndExecuteXmlReader(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: EndExecuteXmlReader(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteXmlReader(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(IAsyncResult)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "要求されたデータを XML として返す、TRANSACT-SQL ステートメントの非同期実行を終了します。"
  remarks: "呼び出すと<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>TRANSACT-SQL ステートメントを実行する操作を完了するために EndExecuteXmlReader を呼び出す必要があります</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>。 コマンドを実行するプロセスがまだ終了して、操作が完了するまでこのメソッドはブロックされます。 ユーザーがコマンドを使用して、操作が完了したことを確認することができます、<xref:System.IAsyncResult>によって返されるインスタンス、<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>メソッド</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A></xref:System.IAsyncResult>。 コールバック プロシージャが呼び出しでは、指定したかどうかは<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>、このメソッドを呼び出す必要があります</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>。"
  example:
  - For examples demonstrating the use of the EndExecuteXmlReader method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>.
  syntax:
    content: public System.Xml.XmlReader EndExecuteXmlReader (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult> <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*>。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*>への呼び出しによって返される</xref:System.IAsyncResult>"
    return:
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>結果の XML データをフェッチするために使用できるオブジェクト</xref:System.Xml.XmlReader>。"
  overload: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>パラメーターが null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Microsoft Visual Basic で)"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndExecuteXmlReader が&1; つのコマンドの実行で複数回呼び出されました。 または、メソッドが (たとえば、コード EndExecuteXmlReader <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*>。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*>への呼び出しの実行が完了すると呼ばれる実行メソッドに対して一致していません"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  id: ExecuteDbDataReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteDbDataReader(CommandBehavior)
  nameWithType: SqlCommand.ExecuteDbDataReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "追加します。"
    return:
      type: System.Data.Common.DbDataReader
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  id: ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
  nameWithType: SqlCommand.ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteDbDataReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "追加します。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "追加します。"
    return:
      type: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQuery
  id: ExecuteNonQuery
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteNonQuery()
  nameWithType: SqlCommand.ExecuteNonQuery()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "接続に対して TRANSACT-SQL ステートメントを実行し、影響を受ける行の数を返します。"
  remarks: "カタログ操作 (データベースの構造をクエリやテーブルなどのデータベース オブジェクトを作成するなど) を実行する、またはデータベース内のデータの変更を使用せずに、ExecuteNonQuery を使用することができます、 <xref:System.Data.DataSet>UPDATE、INSERT、または DELETE ステートメントを実行しています</xref:System.Data.DataSet>。       ExecuteNonQuery に行が返されなかったが、出力パラメーターまたは戻り値のパラメーターにマップ データが挿入されます。       UPDATE、INSERT、および DELETE ステートメントでは、戻り値は、コマンドによって影響を受ける行の数です。 トリガーは、挿入または更新されているテーブルに存在する場合、戻り値には、insert または update 操作とトリガーの影響を受ける行の数の両方の影響を受ける行の数が含まれています。 その他のすべての種類のステートメントは、戻り値は-1 です。 ロールバックが発生した場合、戻り値も-1 にです。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using ExecuteNonQuery. The example is passed a string that is a Transact-SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._23_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._23_1.vb)]"
  syntax:
    content: public override int ExecuteNonQuery ();
    parameters: []
    return:
      type: System.Int32
      description: "影響を受ける行の数。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "ロックされた行に対するコマンドの実行中に例外が発生しました。 Microsoft .NET Framework version 1.0 を使用しているときに、この例外は生成されません。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  id: ExecuteNonQueryAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteNonQueryAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteNonQueryAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery*>が実行される、[!INCLUDE[tsql](~/add/includes/tsql-md.md)]ステートメントに対して、接続と影響を受ける行の数を返します</xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery*>。 キャンセル トークンを使用してをコマンド タイムアウトが経過する前に、操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "非同期プログラミングの詳細については、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public override System.Threading.Tasks.Task<int> ExecuteNonQueryAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取り消し命令。"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "タスクの完了前に、同じインスタンスに対して ExecuteNonQueryAsync を複数回呼び出しています。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader
  id: ExecuteReader
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReader()
  nameWithType: SqlCommand.ExecuteReader()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "送信、 <> </> *> を<> *> をビルドし、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>です。"
  remarks: "ときに、<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>プロパティに設定されている`StoredProcedure`、<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>プロパティは、ストアド プロシージャの名前に設定する必要があります</xref:System.Data.SqlClient.SqlCommand.CommandText%2A></xref:System.Data.SqlClient.SqlCommand.CommandType%2A>。 コマンドは、ExecuteReader を呼び出すときに、このストアド プロシージャを実行します。      > [!NOTE] > までに、例外、トランザクションがデッドロックされている場合はスローされません可能性があります<xref:System.Data.SqlClient.SqlDataReader.Read%2A>と呼びます</xref:System.Data.SqlClient.SqlDataReader.Read%2A>。       複数のアクティブな結果セット (MARS) 機能により、同じ接続を使用して複数のアクション。       ExecuteReader を使用する場合または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>XML データにアクセスする SQL Server は、XML で結果を返す 2,033 文字を超えるそれぞれ 2,033 文字の複数の行の長さ</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>。 この問題を回避するには、次のように使用します<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>を FOR XML クエリを読み取る。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> 。 詳細については、http://support.microsoft.com で Microsoft サポート技術情報の記事 Q310378、&quot;[prb]:: XML データが切り捨てられたときに、使用 SqlDataReader、&quot;を参照してください。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand>, and then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteReader Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._22_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteReader Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._22_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlDataReader ExecuteReader ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlDataReader
      description: "A <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommand.ExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "ロックされた行に対するコマンドの実行中に例外が発生しました。 Microsoft .NET Framework version 1.0 を使用しているときに、この例外は生成されません。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続の現在の状態は閉じられます。 ExecuteReader が開いている必要があります<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>です。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)
  id: ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReader(CommandBehavior)
  nameWithType: SqlCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "送信、 <> </> *> を<> *>、およびビルド、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>のいずれかを使用して、 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>値。"
  remarks: "ときに、<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>プロパティに設定されている`StoredProcedure`、<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>プロパティは、ストアド プロシージャの名前に設定する必要があります</xref:System.Data.SqlClient.SqlCommand.CommandText%2A></xref:System.Data.SqlClient.SqlCommand.CommandType%2A>。 コマンドは、 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>を呼び出すときにこのストアド プロシージャを実行します。      > [!NOTE] > 使用<xref:System.Data.CommandBehavior>大きな値やバイナリ データを取得します</xref:System.Data.CommandBehavior>。 それ以外の場合、<xref:System.OutOfMemoryException>が発生して、接続は閉じられます</xref:System.OutOfMemoryException>。       複数のアクティブな結果セット (MARS) 機能により、同じ接続を使用して複数のアクション。       使用する場合<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>XML データにアクセスする SQL Server は、XML で結果を返す 2,033 文字を超えるそれぞれ 2,033 文字の複数の行の長さ</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 この問題を回避するには、次のように使用します<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>を FOR XML クエリを読み取る。</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> 。 詳細については、http://support.microsoft.com で Microsoft サポート技術情報の記事 Q310378、&quot;[prb]:: XML データが切り捨てられたときに、使用 SqlDataReader、&quot;を参照してください。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand>, and then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source. <xref:System.Data.CommandBehavior> is set to <xref:System.Data.CommandBehavior>.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteReader2#1](~/add/codesnippet/csharp/m-system.data.sqlclient._14_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteReader2#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._14_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlDataReader ExecuteReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "1 つ、 <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>値。"
    return:
      type: System.Data.SqlClient.SqlDataReader
      description: "A <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommand.ExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync
  id: ExecuteReaderAsync
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReaderAsync()
  nameWithType: SqlCommand.ExecuteReaderAsync()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<> *>、送信し、 <> </> *> を<xref:System.Data.SqlClient.SqlCommand.Connection*>をビルドし、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>.</xref:System.Data.SqlClient.SqlCommand.Connection*> 例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "非同期プログラミングの詳細については、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無効な<xref href=&quot;System.Data.CommandBehavior&quot;></xref>値。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "タスクの完了前に、同じインスタンスに対して ExecuteReaderAsync を複数回呼び出しています。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  id: ExecuteReaderAsync(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReaderAsync(CommandBehavior)
  nameWithType: SqlCommand.ExecuteReaderAsync(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<> *>、送信し、 <> </> *> を<xref:System.Data.SqlClient.SqlCommand.Connection*>、およびビルド、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>.</xref:System.Data.SqlClient.SqlCommand.Connection*> 例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "非同期プログラミングの詳細については、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "ステートメントの実行とデータの取得のオプションです。  設定されているときに<xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;> </xref>、<xref:System.Data.SqlClient.SqlDataReader.ReadAsync*>完全なタスクを返す前に行全体を読み取ります</xref:System.Data.SqlClient.SqlDataReader.ReadAsync*>。"
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無効な<xref href=&quot;System.Data.CommandBehavior&quot;></xref>値。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "タスクの完了前に、同じインスタンスに対して ExecuteReaderAsync を複数回呼び出しています。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  id: ExecuteReaderAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReaderAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteReaderAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<> *>、送信し、 <> </> *> を<xref:System.Data.SqlClient.SqlCommand.Connection*>をビルドし、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>.</xref:System.Data.SqlClient.SqlCommand.Connection*>       キャンセル トークンを使用してをコマンド タイムアウトが経過する前に、操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "非同期プログラミングの詳細については、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取り消し命令。"
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無効な<xref href=&quot;System.Data.CommandBehavior&quot;></xref>値。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼び出す<xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*>タスクの完了前に、同じインスタンスに対して&2; 回以上</xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*>。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  id: ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReaderAsync(CommandBehavior,CancellationToken)
  nameWithType: SqlCommand.ExecuteReaderAsync(CommandBehavior,CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CommandBehavior,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<> *>、送信し、 <> </> *> を<xref:System.Data.SqlClient.SqlCommand.Connection*>、およびビルド、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> 、コマンド タイムアウトが経過する前に、操作を破棄することを要求するキャンセル トークンを使用することができます</xref:System.Data.SqlClient.SqlCommand.Connection*>。  例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "非同期プログラミングの詳細については、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "ステートメントの実行とデータの取得のオプションです。  設定されているときに<xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;> </xref>、<xref:System.Data.SqlClient.SqlDataReader.ReadAsync*>完全なタスクを返す前に行全体を読み取ります</xref:System.Data.SqlClient.SqlDataReader.ReadAsync*>。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取り消し命令。"
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無効な<xref href=&quot;System.Data.CommandBehavior&quot;></xref>値。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "タスクの完了前に、同じインスタンスに対して ExecuteReaderAsync を複数回呼び出しています。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalar
  id: ExecuteScalar
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteScalar()
  nameWithType: SqlCommand.ExecuteScalar()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteScalar()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "クエリを実行し、クエリによって返される結果セットの最初の行の最初の列を返します。 追加の列または行は無視されます。"
  remarks: "ExecuteScalar メソッドを使用すると、データベースから&1; つの値 (たとえば、集計値) を取得できます。 使用して、<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>メソッド、および<xref:System.Data.SqlClient.SqlDataReader>。</xref:System.Data.SqlClient.SqlDataReader>によって返されるデータを使用して&1; つの値を生成する必要のある操作を実行すること</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>よりも少ないコードが必要です。       一般的な ExecuteScalar クエリは、次の c# の例のようにフォーマットできます。```   cmd.CommandText = &quot;SELECT COUNT(*) FROM dbo.region&quot;;   Int32 count = (Int32) cmd.ExecuteScalar();   ```"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using ExecuteScalar. The example is passed a string representing a new value to be inserted into a table, and a string to use to connect to the data source. The function returns the new **Identity** column value if a new row was inserted, 0 on failure.  \n  \n [!code-vb[DataWorks SqlCommand.ExecuteScalar#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._31_1.vb)]\n [!code-cs[DataWorks SqlCommand.ExecuteScalar#1](~/add/codesnippet/csharp/m-system.data.sqlclient._31_1.cs)]"
  syntax:
    content: public override object ExecuteScalar ();
    parameters: []
    return:
      type: System.Object
      description: "結果セット、または null 参照の最初の行の最初の列 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual Basic で)、結果セットが空の場合。 最大 2,033 文字を返します。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteScalar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "ロックされた行に対するコマンドの実行中に例外が発生しました。 Microsoft .NET Framework version 1.0 を使用しているときに、この例外は生成されません。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  id: ExecuteScalarAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteScalarAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteScalarAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<xref:System.Data.SqlClient.SqlCommand.ExecuteScalar*>、クエリを非同期的に実行され、クエリによって返される結果セット内の最初の行の最初の列を返します</xref:System.Data.SqlClient.SqlCommand.ExecuteScalar*>。 追加の列または行は無視されます。       キャンセル トークンを使用してをコマンド タイムアウトが経過する前に、操作を破棄することを要求できます。 例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "非同期プログラミングの詳細については、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public override System.Threading.Tasks.Task<object> ExecuteScalarAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取り消し命令。"
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "タスクの完了前に、同じインスタンスに対して ExecuteScalarAsync を複数回呼び出しています。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReader
  id: ExecuteXmlReader
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteXmlReader()
  nameWithType: SqlCommand.ExecuteXmlReader()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "送信、 <> </> *> を<> *> をビルドし、<xref:System.Xml.XmlReader>オブジェクト</xref:System.Xml.XmlReader>。"
  remarks: "<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>プロパティは通常を指定します、[!INCLUDE[tsql](~/add/includes/tsql-md.md)]有効な FOR XML 句を含むステートメント</xref:System.Data.SqlClient.SqlCommand.CommandText%2A>。 ただし、<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>を返すステートメントを指定できますも`ntext`または`nvarchar`有効な XML、または定義された列の内容に含まれるデータ、`xml`データ型</xref:System.Data.SqlClient.SqlCommand.CommandText%2A>。       一般的な ExecuteXmlReader クエリは、次の Microsoft Visual c# の例のように形式指定できる:```   SqlCommand command = new SqlCommand(&quot;SELECT * FROM dbo.Customers FOR XML AUTO, XMLDATA&quot;, SqlConn);   ```このメソッドは、XML データを含む、単一行、単一列の結果を取得するためにも使用できます。 ここでは、複数の行が返される場合は、ExecuteXmlReader メソッドをアタッチ、<xref:System.Xml.XmlReader>最初の行、および破棄の値に結果の残りの部分を設定します</xref:System.Xml.XmlReader>。       複数のアクティブな結果セット (MARS) 機能により、同じ接続を使用して複数のアクション。       使用する場合<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>XML データにアクセスする SQL Server は、XML で結果を返す 2,033 文字を超えるそれぞれ 2,033 文字の複数の行の長さ</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A></xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 この問題を回避するには、使用 ExecuteXmlReader または<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>を FOR XML クエリを読み取る</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>。 詳細については、http://support.microsoft.com で Microsoft サポート技術情報の記事 Q310378、&quot;[prb]:: XML データが切り捨てられたときに、使用 SqlDataReader、&quot;を参照してください。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using ExecuteXmlReader. The example is passed a string that is a Transact-SQL FOR XML SELECT statement, and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteXmlReader#1](~/add/codesnippet/csharp/m-system.data.sqlclient._42_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._42_1.vb)]"
  syntax:
    content: public System.Xml.XmlReader ExecuteXmlReader ();
    parameters: []
    return:
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>オブジェクト</xref:System.Xml.XmlReader>。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteXmlReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "ロックされた行に対するコマンドの実行中に例外が発生しました。 Microsoft .NET Framework version 1.0 を使用しているときに、この例外は生成されません。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync
  id: ExecuteXmlReaderAsync
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteXmlReaderAsync()
  nameWithType: SqlCommand.ExecuteXmlReaderAsync()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<> *>、送信し、 <> </> *> を<xref:System.Data.SqlClient.SqlCommand.Connection*>をビルドし、<xref:System.Xml.XmlReader>オブジェクト</xref:System.Xml.XmlReader></xref:System.Data.SqlClient.SqlCommand.Connection*>。       例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "非同期プログラミングの詳細については、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Xml.XmlReader> ExecuteXmlReaderAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Xml.XmlReader}
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼び出す<xref:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*>タスクの完了前に、同じインスタンスに対して&2; 回以上</xref:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*>。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  id: ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteXmlReaderAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteXmlReaderAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<> *>、送信し、 <> </> *> を<xref:System.Data.SqlClient.SqlCommand.Connection*>をビルドし、<xref:System.Xml.XmlReader>オブジェクト</xref:System.Xml.XmlReader></xref:System.Data.SqlClient.SqlCommand.Connection*>。       キャンセル トークンを使用してをコマンド タイムアウトが経過する前に、操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "非同期プログラミングの詳細については、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Xml.XmlReader> ExecuteXmlReaderAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取り消し命令。"
    return:
      type: System.Threading.Tasks.Task{System.Xml.XmlReader}
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼び出す<xref:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*>タスクの完了前に、同じインスタンスに対して&2; 回以上</xref:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*>。       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>閉じられたか、ストリーミング操作中に削除します。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。       ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "エラーが発生しました、 <xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクト</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>、<xref:System.Xml.XmlReader>または<xref:System.IO.TextReader>ストリーミング操作中にオブジェクトが閉じられました</xref:System.IO.TextReader></xref:System.Xml.XmlReader></xref:System.IO.Stream>。  ストリーミングの詳細については、次を参照してください。 [SqlClient ストリーミング サポート](../Topic/SqlClient%20Streaming%20Support.md)です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Notification
  id: Notification
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Notification
  nameWithType: SqlCommand.Notification
  fullName: System.Data.SqlClient.SqlCommand.Notification
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または設定を指定する値、 <xref href=&quot;System.Data.Sql.SqlNotificationRequest&quot;> </xref>オブジェクトは、このコマンドにバインドします。"
  remarks: "有効にするためには、コマンドが実行される前に、このプロパティの値を設定する必要があります。"
  syntax:
    content: public System.Data.Sql.SqlNotificationRequest Notification { get; set; }
    return:
      type: System.Data.Sql.SqlNotificationRequest
      description: "Null (既定) に設定すると、通知をする要求はできません。"
  overload: System.Data.SqlClient.SqlCommand.Notification*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist
  id: NotificationAutoEnlist
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: NotificationAutoEnlist
  nameWithType: SqlCommand.NotificationAutoEnlist
  fullName: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "共通の場合、アプリケーションで自動的にクエリ通知を受信するかどうかを示す値を取得または<xref href=&quot;System.Data.SqlClient.SqlDependency&quot;></xref>オブジェクト。"
  remarks: "この機能は、SQL Server に対して ASP ページで実行されたすべてのコマンドの通知を受信する ASP.NET アプリケーションで使用されます。 これにより、ASP.NET ページを表示するために使用するクエリが異なる結果を生成するまでキャッシュできます。 自動参加します。       このプロパティは、クエリ通知をサポートしている SQL Server のバージョンにのみ適用されます。 以前のバージョンでは、このプロパティを設定**true**のアプリケーションに影響を与えません。"
  syntax:
    content: public bool NotificationAutoEnlist { get; set; }
    return:
      type: System.Boolean
      description: '**true**場合は、アプリケーションでは、クエリ通知を受信する必要がありますに自動的にそれ以外の場合**false**です。 既定値は**true**です。'
  overload: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Parameters
  id: Parameters
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Parameters
  nameWithType: SqlCommand.Parameters
  fullName: System.Data.SqlClient.SqlCommand.Parameters
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gets the <xref href=&quot;System.Data.SqlClient.SqlParameterCollection&quot;></xref>."
  remarks: "Microsoft .NET Framework Data Provider for SQL Server が SQL ステートメントまたはのコマンドによって呼び出されるストアド プロシージャにパラメーターを渡す場合、疑問符 (?) プレース ホルダーをサポートしていません`CommandType.Text`です。 この場合、名前付きパラメーターを使用する必要があります。 例: 選択 * FROM Customers WHERE CustomerID = @CustomerID > [!NOTE] > コレクション内のパラメーターが実行されるクエリの要件が一致しない場合、エラーが発生します。       詳細については、次を参照してください。[構成パラメーターとパラメーターのデータ型](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates how to create a <xref:System.Data.SqlClient.SqlCommand> and add parameters to the <xref:System.Data.SqlClient.SqlParameterCollection>.  \n  \n [!code-vb[DataWorks SqlParameterCollection.AddWithValue#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._32_1.vb)]\n [!code-cs[DataWorks SqlParameterCollection.AddWithValue#1](~/add/codesnippet/csharp/p-system.data.sqlclient._32_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlParameterCollection Parameters { get; }
    return:
      type: System.Data.SqlClient.SqlParameterCollection
      description: "TRANSACT-SQL ステートメントまたはストアド プロシージャのパラメーターです。 既定では、空のコレクションです。"
  overload: System.Data.SqlClient.SqlCommand.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Prepare
  id: Prepare
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Prepare()
  nameWithType: SqlCommand.Prepare()
  fullName: System.Data.SqlClient.SqlCommand.Prepare()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "SQL Server のインスタンスを準備済みのコマンドを作成します。"
  remarks: "場合<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>に設定されている`StoredProcedure`場合がありますが、準備する呼び出しは成功する必要があります</xref:System.Data.SqlClient.SqlCommand.CommandType%2A>       準備を呼び出す前に、準備されたステートメントの各パラメーターのデータ型を指定します。 可変長データ型を持つパラメーターごとに設定する必要があります、<xref:System.Data.SqlClient.SqlParameter.Size%2A>プロパティを必要な最大サイズ</xref:System.Data.SqlClient.SqlParameter.Size%2A>。 準備するこれらの条件が満たされない場合はエラーを返します。      > [!NOTE] > Transact SQL を実行することによって、データベース コンテキストが変更されたかどうかは`USE <database>`ステートメント、または呼び出すことによって、<xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>メソッド、その準備呼び出す必要があります、2 回目</xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>。       呼び出す場合は、 `Execute` Prepare を任意のパラメーター値を呼び出すことがで指定された値より大きい後に、<xref:System.Data.SqlClient.SqlParameter.Size%2A>プロパティは、パラメーターの指定した元のサイズを自動的に切り捨てられます、切り捨てエラーは返されません</xref:System.Data.SqlClient.SqlParameter.Size%2A>。       出力では、(準備またはない) かどうかをパラメーター ユーザー指定のデータ型である必要があります。 可変長データ型を指定する場合は、最大<xref:System.Data.SqlClient.SqlParameter.Size%2A>。</xref:System.Data.SqlClient.SqlParameter.Size%2A>をも指定する必要があります。       Visual Studio 2010 より前の準備には、例外がスローされました。  Visual Studio 2010 以降では、このメソッドは例外をスローされません。"
  example:
  - "The following example demonstrates the use of the Prepare method.  \n  \n [!code-vb[Classic WebData SqlCommand.Prepare#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._45_1.vb)]\n [!code-cs[Classic WebData SqlCommand.Prepare#1](~/add/codesnippet/csharp/m-system.data.sqlclient._45_1.cs)]"
  syntax:
    content: public override void Prepare ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommand.Prepare*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ResetCommandTimeout
  id: ResetCommandTimeout
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ResetCommandTimeout()
  nameWithType: SqlCommand.ResetCommandTimeout()
  fullName: System.Data.SqlClient.SqlCommand.ResetCommandTimeout()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "リセット、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout*>プロパティをその既定値にします</xref:System.Data.SqlClient.SqlCommand.CommandTimeout*>。"
  remarks: "既定値、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>は 30 秒です</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>。"
  syntax:
    content: public void ResetCommandTimeout ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommand.ResetCommandTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.StatementCompleted
  id: StatementCompleted
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: StatementCompleted
  nameWithType: SqlCommand.StatementCompleted
  fullName: System.Data.SqlClient.SqlCommand.StatementCompleted
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "TRANSACT-SQL ステートメントの実行が完了したときに発生します。"
  syntax:
    content: public event System.Data.StatementCompletedEventHandler StatementCompleted;
    return:
      type: System.Data.StatementCompletedEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: SqlCommand.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlCommand.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新たに作成<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>現在のインスタンスのコピーであるオブジェクト。"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "新しい<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>のこのインスタンスのコピーであるオブジェクト。"
  overload: System.Data.SqlClient.SqlCommand.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Transaction
  id: Transaction
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Transaction
  nameWithType: SqlCommand.Transaction
  fullName: System.Data.SqlClient.SqlCommand.Transaction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または設定、 <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref>を<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>を実行します。"
  remarks: "場合は、既に特定の値に設定し、コマンドが実行中はトランザクションのプロパティを設定することはできません。 トランザクションのプロパティを設定する場合、<xref:System.Data.SqlClient.SqlTransaction>に同じ接続されていないオブジェクト<xref:System.Data.SqlClient.SqlConnection>として、<xref:System.Data.SqlClient.SqlCommand>オブジェクト、例外がスローされて、次回ステートメントを実行しようとする</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlConnection></xref:System.Data.SqlClient.SqlTransaction>。"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction Transaction { get; set; }
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "The <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;></xref>. 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlCommand.Transaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.UpdatedRowSource
  id: UpdatedRowSource
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: UpdatedRowSource
  nameWithType: SqlCommand.UpdatedRowSource
  fullName: System.Data.SqlClient.SqlCommand.UpdatedRowSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または設定にコマンドの結果を適用する方法、 <xref href=&quot;System.Data.DataRow&quot;> </xref>で使用された場合、**更新**のメソッド、 <xref href=&quot;System.Data.Common.DbDataAdapter&quot;></xref>です。"
  remarks: "既定値<xref:System.Data.UpdateRowSource>値は**両方**コマンドが自動的に生成される場合を除き、(同様の場合、 <xref:System.Data.SqlClient.SqlCommandBuilder>) の場合、既定値は**None**</xref:System.Data.SqlClient.SqlCommandBuilder> </xref:System.Data.UpdateRowSource> 。       使用しての詳細については、 **UpdatedRowSource**プロパティを参照してください[DataAdapter パラメーター](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }
    return:
      type: System.Data.UpdateRowSource
      description: "1 つ、 <xref href=&quot;System.Data.UpdateRowSource&quot;> </xref>値。"
  overload: System.Data.SqlClient.SqlCommand.UpdatedRowSource*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbCommand
  isExternal: false
  name: System.Data.Common.DbCommand
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.SqlClient.SqlCommand.#ctor
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand()
  nameWithType: SqlCommand.SqlCommand()
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand()
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand(String)
  nameWithType: SqlCommand.SqlCommand(String)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand(String,SqlConnection)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand(String,SqlConnection,SqlTransaction)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction)
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
- uid: System.Data.SqlClient.SqlCommandColumnEncryptionSetting
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommandColumnEncryptionSetting
  nameWithType: SqlCommandColumnEncryptionSetting
  fullName: System.Data.SqlClient.SqlCommandColumnEncryptionSetting
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteNonQuery()
  nameWithType: SqlCommand.BeginExecuteNonQuery()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery()
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteNonQuery(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteNonQuery(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(AsyncCallback,Object)
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteReader()
  nameWithType: SqlCommand.BeginExecuteReader()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader()
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteReader(CommandBehavior)
  nameWithType: SqlCommand.BeginExecuteReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteReader(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteReader(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(AsyncCallback,Object)
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
  nameWithType: SqlCommand.BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteXmlReader()
  nameWithType: SqlCommand.BeginExecuteXmlReader()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader()
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteXmlReader(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteXmlReader(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(AsyncCallback,Object)
- uid: System.Data.SqlClient.SqlCommand.Cancel
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Cancel()
  nameWithType: SqlCommand.Cancel()
  fullName: System.Data.SqlClient.SqlCommand.Cancel()
- uid: System.Data.SqlClient.SqlCommand.Clone
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Clone()
  nameWithType: SqlCommand.Clone()
  fullName: System.Data.SqlClient.SqlCommand.Clone()
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ColumnEncryptionSetting
  nameWithType: SqlCommand.ColumnEncryptionSetting
  fullName: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting
- uid: System.Data.SqlClient.SqlCommand.CommandText
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandText
  nameWithType: SqlCommand.CommandText
  fullName: System.Data.SqlClient.SqlCommand.CommandText
- uid: System.Data.SqlClient.SqlCommand.CommandTimeout
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: SqlCommand.CommandTimeout
  fullName: System.Data.SqlClient.SqlCommand.CommandTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlCommand.CommandType
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandType
  nameWithType: SqlCommand.CommandType
  fullName: System.Data.SqlClient.SqlCommand.CommandType
- uid: System.Data.CommandType
  parent: System.Data
  isExternal: false
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Data.SqlClient.SqlCommand.Connection
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Connection
  nameWithType: SqlCommand.Connection
  fullName: System.Data.SqlClient.SqlCommand.Connection
- uid: System.Data.SqlClient.SqlCommand.CreateDbParameter
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CreateDbParameter()
  nameWithType: SqlCommand.CreateDbParameter()
  fullName: System.Data.SqlClient.SqlCommand.CreateDbParameter()
- uid: System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: false
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.SqlClient.SqlCommand.CreateParameter
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CreateParameter()
  nameWithType: SqlCommand.CreateParameter()
  fullName: System.Data.SqlClient.SqlCommand.CreateParameter()
- uid: System.Data.SqlClient.SqlParameter
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlParameter
  nameWithType: SqlParameter
  fullName: System.Data.SqlClient.SqlParameter
- uid: System.Data.SqlClient.SqlCommand.DbConnection
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbConnection
  nameWithType: SqlCommand.DbConnection
  fullName: System.Data.SqlClient.SqlCommand.DbConnection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlCommand.DbParameterCollection
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbParameterCollection
  nameWithType: SqlCommand.DbParameterCollection
  fullName: System.Data.SqlClient.SqlCommand.DbParameterCollection
- uid: System.Data.Common.DbParameterCollection
  parent: System.Data.Common
  isExternal: false
  name: DbParameterCollection
  nameWithType: DbParameterCollection
  fullName: System.Data.Common.DbParameterCollection
- uid: System.Data.SqlClient.SqlCommand.DbTransaction
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbTransaction
  nameWithType: SqlCommand.DbTransaction
  fullName: System.Data.SqlClient.SqlCommand.DbTransaction
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.SqlClient.SqlCommand.DesignTimeVisible
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DesignTimeVisible
  nameWithType: SqlCommand.DesignTimeVisible
  fullName: System.Data.SqlClient.SqlCommand.DesignTimeVisible
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlCommand.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlCommand.Dispose(Boolean)
- uid: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteNonQuery(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteNonQuery(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(IAsyncResult)
- uid: System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteReader(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteReader(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteReader(IAsyncResult)
- uid: System.Data.SqlClient.SqlDataReader
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlDataReader
  nameWithType: SqlDataReader
  fullName: System.Data.SqlClient.SqlDataReader
- uid: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteXmlReader(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteXmlReader(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(IAsyncResult)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteDbDataReader(CommandBehavior)
  nameWithType: SqlCommand.ExecuteDbDataReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
  nameWithType: SqlCommand.ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<DbDataReader>
  nameWithType: Task<DbDataReader>
  fullName: System.Threading.Tasks.Task<System.Data.Common.DbDataReader>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Data.Common.DbDataReader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    nameWithType: DbDataReader
    fullName: DbDataReader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQuery
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteNonQuery()
  nameWithType: SqlCommand.ExecuteNonQuery()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteNonQueryAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteNonQueryAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReader()
  nameWithType: SqlCommand.ExecuteReader()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReader()
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReader(CommandBehavior)
  nameWithType: SqlCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior)
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReaderAsync()
  nameWithType: SqlCommand.ExecuteReaderAsync()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync()
- uid: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<SqlDataReader>
  nameWithType: Task<SqlDataReader>
  fullName: System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Data.SqlClient.SqlDataReader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.SqlClient.SqlDataReader
    name: SqlDataReader
    nameWithType: SqlDataReader
    fullName: SqlDataReader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReaderAsync(CommandBehavior)
  nameWithType: SqlCommand.ExecuteReaderAsync(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CommandBehavior)
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReaderAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteReaderAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CancellationToken)
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReaderAsync(CommandBehavior,CancellationToken)
  nameWithType: SqlCommand.ExecuteReaderAsync(CommandBehavior,CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CommandBehavior,CancellationToken)
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalar
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteScalar()
  nameWithType: SqlCommand.ExecuteScalar()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteScalar()
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteScalarAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteScalarAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(CancellationToken)
- uid: System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReader
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteXmlReader()
  nameWithType: SqlCommand.ExecuteXmlReader()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReader()
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteXmlReaderAsync()
  nameWithType: SqlCommand.ExecuteXmlReaderAsync()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync()
- uid: System.Threading.Tasks.Task{System.Xml.XmlReader}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<XmlReader>
  nameWithType: Task<XmlReader>
  fullName: System.Threading.Tasks.Task<System.Xml.XmlReader>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Xml.XmlReader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: XmlReader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteXmlReaderAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteXmlReaderAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(CancellationToken)
- uid: System.Data.SqlClient.SqlCommand.Notification
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Notification
  nameWithType: SqlCommand.Notification
  fullName: System.Data.SqlClient.SqlCommand.Notification
- uid: System.Data.Sql.SqlNotificationRequest
  parent: System.Data.Sql
  isExternal: false
  name: SqlNotificationRequest
  nameWithType: SqlNotificationRequest
  fullName: System.Data.Sql.SqlNotificationRequest
- uid: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: NotificationAutoEnlist
  nameWithType: SqlCommand.NotificationAutoEnlist
  fullName: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist
- uid: System.Data.SqlClient.SqlCommand.Parameters
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Parameters
  nameWithType: SqlCommand.Parameters
  fullName: System.Data.SqlClient.SqlCommand.Parameters
- uid: System.Data.SqlClient.SqlParameterCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlParameterCollection
  nameWithType: SqlParameterCollection
  fullName: System.Data.SqlClient.SqlParameterCollection
- uid: System.Data.SqlClient.SqlCommand.Prepare
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Prepare()
  nameWithType: SqlCommand.Prepare()
  fullName: System.Data.SqlClient.SqlCommand.Prepare()
- uid: System.Data.SqlClient.SqlCommand.ResetCommandTimeout
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ResetCommandTimeout()
  nameWithType: SqlCommand.ResetCommandTimeout()
  fullName: System.Data.SqlClient.SqlCommand.ResetCommandTimeout()
- uid: System.Data.SqlClient.SqlCommand.StatementCompleted
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: StatementCompleted
  nameWithType: SqlCommand.StatementCompleted
  fullName: System.Data.SqlClient.SqlCommand.StatementCompleted
- uid: System.Data.StatementCompletedEventHandler
  parent: System.Data
  isExternal: false
  name: StatementCompletedEventHandler
  nameWithType: StatementCompletedEventHandler
  fullName: System.Data.StatementCompletedEventHandler
- uid: System.Data.SqlClient.SqlCommand.System#ICloneable#Clone
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: SqlCommand.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlCommand.System.ICloneable.Clone()
- uid: System.Data.SqlClient.SqlCommand.Transaction
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Transaction
  nameWithType: SqlCommand.Transaction
  fullName: System.Data.SqlClient.SqlCommand.Transaction
- uid: System.Data.SqlClient.SqlCommand.UpdatedRowSource
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: SqlCommand.UpdatedRowSource
  fullName: System.Data.SqlClient.SqlCommand.UpdatedRowSource
- uid: System.Data.UpdateRowSource
  parent: System.Data
  isExternal: false
  name: UpdateRowSource
  nameWithType: UpdateRowSource
  fullName: System.Data.UpdateRowSource
- uid: System.Data.SqlClient.SqlCommand.#ctor*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand.SqlCommand
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteNonQuery
  nameWithType: SqlCommand.BeginExecuteNonQuery
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteReader
  nameWithType: SqlCommand.BeginExecuteReader
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteXmlReader
  nameWithType: SqlCommand.BeginExecuteXmlReader
- uid: System.Data.SqlClient.SqlCommand.Cancel*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Cancel
  nameWithType: SqlCommand.Cancel
- uid: System.Data.SqlClient.SqlCommand.Clone*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Clone
  nameWithType: SqlCommand.Clone
- uid: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ColumnEncryptionSetting
  nameWithType: SqlCommand.ColumnEncryptionSetting
- uid: System.Data.SqlClient.SqlCommand.CommandText*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandText
  nameWithType: SqlCommand.CommandText
- uid: System.Data.SqlClient.SqlCommand.CommandTimeout*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: SqlCommand.CommandTimeout
- uid: System.Data.SqlClient.SqlCommand.CommandType*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandType
  nameWithType: SqlCommand.CommandType
- uid: System.Data.SqlClient.SqlCommand.Connection*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Connection
  nameWithType: SqlCommand.Connection
- uid: System.Data.SqlClient.SqlCommand.CreateDbParameter*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CreateDbParameter
  nameWithType: SqlCommand.CreateDbParameter
- uid: System.Data.SqlClient.SqlCommand.CreateParameter*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CreateParameter
  nameWithType: SqlCommand.CreateParameter
- uid: System.Data.SqlClient.SqlCommand.DbConnection*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbConnection
  nameWithType: SqlCommand.DbConnection
- uid: System.Data.SqlClient.SqlCommand.DbParameterCollection*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbParameterCollection
  nameWithType: SqlCommand.DbParameterCollection
- uid: System.Data.SqlClient.SqlCommand.DbTransaction*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbTransaction
  nameWithType: SqlCommand.DbTransaction
- uid: System.Data.SqlClient.SqlCommand.DesignTimeVisible*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DesignTimeVisible
  nameWithType: SqlCommand.DesignTimeVisible
- uid: System.Data.SqlClient.SqlCommand.Dispose*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Dispose
  nameWithType: SqlCommand.Dispose
- uid: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteNonQuery
  nameWithType: SqlCommand.EndExecuteNonQuery
- uid: System.Data.SqlClient.SqlCommand.EndExecuteReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteReader
  nameWithType: SqlCommand.EndExecuteReader
- uid: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteXmlReader
  nameWithType: SqlCommand.EndExecuteXmlReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteDbDataReader
  nameWithType: SqlCommand.ExecuteDbDataReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteDbDataReaderAsync
  nameWithType: SqlCommand.ExecuteDbDataReaderAsync
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQuery*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteNonQuery
  nameWithType: SqlCommand.ExecuteNonQuery
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteNonQueryAsync
  nameWithType: SqlCommand.ExecuteNonQueryAsync
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReader
  nameWithType: SqlCommand.ExecuteReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReaderAsync
  nameWithType: SqlCommand.ExecuteReaderAsync
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalar*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteScalar
  nameWithType: SqlCommand.ExecuteScalar
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteScalarAsync
  nameWithType: SqlCommand.ExecuteScalarAsync
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteXmlReader
  nameWithType: SqlCommand.ExecuteXmlReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteXmlReaderAsync
  nameWithType: SqlCommand.ExecuteXmlReaderAsync
- uid: System.Data.SqlClient.SqlCommand.Notification*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Notification
  nameWithType: SqlCommand.Notification
- uid: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: NotificationAutoEnlist
  nameWithType: SqlCommand.NotificationAutoEnlist
- uid: System.Data.SqlClient.SqlCommand.Parameters*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Parameters
  nameWithType: SqlCommand.Parameters
- uid: System.Data.SqlClient.SqlCommand.Prepare*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Prepare
  nameWithType: SqlCommand.Prepare
- uid: System.Data.SqlClient.SqlCommand.ResetCommandTimeout*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ResetCommandTimeout
  nameWithType: SqlCommand.ResetCommandTimeout
- uid: System.Data.SqlClient.SqlCommand.System#ICloneable#Clone*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: SqlCommand.System.ICloneable.Clone
- uid: System.Data.SqlClient.SqlCommand.Transaction*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Transaction
  nameWithType: SqlCommand.Transaction
- uid: System.Data.SqlClient.SqlCommand.UpdatedRowSource*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: SqlCommand.UpdatedRowSource
