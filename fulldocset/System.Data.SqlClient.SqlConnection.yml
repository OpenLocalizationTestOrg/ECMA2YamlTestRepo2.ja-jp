### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlConnection
  id: SqlConnection
  children:
  - System.Data.SqlClient.SqlConnection.#ctor
  - System.Data.SqlClient.SqlConnection.#ctor(System.String)
  - System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  - System.Data.SqlClient.SqlConnection.AccessToken
  - System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.SqlClient.SqlConnection.BeginTransaction
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  - System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  - System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  - System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  - System.Data.SqlClient.SqlConnection.ClearAllPools
  - System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlConnection.ClientConnectionId
  - System.Data.SqlClient.SqlConnection.Close
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  - System.Data.SqlClient.SqlConnection.ConnectionString
  - System.Data.SqlClient.SqlConnection.ConnectionTimeout
  - System.Data.SqlClient.SqlConnection.CreateCommand
  - System.Data.SqlClient.SqlConnection.CreateDbCommand
  - System.Data.SqlClient.SqlConnection.Credential
  - System.Data.SqlClient.SqlConnection.Database
  - System.Data.SqlClient.SqlConnection.DataSource
  - System.Data.SqlClient.SqlConnection.DbProviderFactory
  - System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  - System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  - System.Data.SqlClient.SqlConnection.GetSchema
  - System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  - System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  - System.Data.SqlClient.SqlConnection.InfoMessage
  - System.Data.SqlClient.SqlConnection.Open
  - System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlConnection.PacketSize
  - System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  - System.Data.SqlClient.SqlConnection.ResetStatistics
  - System.Data.SqlClient.SqlConnection.RetrieveStatistics
  - System.Data.SqlClient.SqlConnection.ServerVersion
  - System.Data.SqlClient.SqlConnection.State
  - System.Data.SqlClient.SqlConnection.StatisticsEnabled
  - System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  - System.Data.SqlClient.SqlConnection.WorkstationId
  langs:
  - csharp
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
  type: Class
  summary: "開いている接続を表す、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]データベース。 このクラスは継承できません。"
  remarks: "A SqlConnection object represents a unique session to a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] data source. With a client/server database system, it is equivalent to a network connection to the server. SqlConnection is used together with <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlCommand> to increase performance when connecting to a Microsoft [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database. For all third-party [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] products, and other OLE DB-supported data sources, use <xref:System.Data.OleDb.OleDbConnection>.  \n  \n When you create an instance of SqlConnection, all properties are set to their initial values. For a list of these values, see the SqlConnection constructor.  \n  \n See <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> for a list of the keywords in a connection string.  \n  \n If the SqlConnection goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling `Close` or `Dispose`. `Close` and `Dispose` are functionally equivalent. If the connection pooling value `Pooling` is set to `true` or `yes`, the underlying connection is returned back to the connection pool. On the other hand, if `Pooling` is set to `false` or `no`, the underlying connection to the server is actually closed.  \n  \n> [!NOTE]\n>  Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md).  \n  \n To ensure that connections are always closed, open the connection inside of a `using` block, as shown in the following code fragment. Doing so ensures that the connection is automatically closed when the code exits the block.  \n  \n```vb#  \nUsing connection As New SqlConnection(connectionString)  \n    connection.Open()  \n    ' Do work here; connection closed on following line.  \nEnd Using  \n  \n```  \n  \n```c#  \nusing (SqlConnection connection = new SqlConnection(connectionString))  \n    {  \n        connection.Open();  \n        // Do work here; connection closed on following line.  \n    }  \n```  \n  \n> [!NOTE]\n>  To deploy high-performance applications, you must use connection pooling. When you use the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], you do not have to enable connection pooling because the provider manages this automatically, although you can modify some settings. For more information, see [SQL Server Connection Pooling (ADO.NET)](../Topic/SQL%20Server%20Connection%20Pooling%20\\(ADO.NET\\).md).  \n  \n If a <xref:System.Data.SqlClient.SqlException> is generated by the method executing a <xref:System.Data.SqlClient.SqlCommand>, the SqlConnection remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the SqlConnection. However, the user can reopen the connection and continue.  \n  \n An application that creates an instance of the SqlConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. SqlConnection makes security demands using the <xref:System.Data.SqlClient.SqlClientPermission> object. Users can verify that their code has sufficient permissions by using the <xref:System.Data.SqlClient.SqlClientPermissionAttribute> object. Users and administrators can also use the [Caspol.exe (Code Access Security Policy Tool)](~/add/includes/ajax-current-ext-md.md) to modify security policy at the machine, user, and enterprise levels. For more information, see [Security](~/add/includes/ajax-current-ext-md.md). For an example demonstrating how to use security demands, see [Code Access Security and ADO.NET](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information about handling warning and informational messages from the server, see [Connection Events](~/add/includes/ajax-current-ext-md.md). [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] engine errors and error messages are documented in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \n  \n> [!CAUTION]\n>  You can force TCP instead of shared memory. You can do that by prefixing tcp: to the server name in the connection string or you can use localhost."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and a SqlConnection. The SqlConnection is opened and set as the <xref:System.Data.SqlClient.SqlCommand.Connection%2A> for the <xref:System.Data.SqlClient.SqlCommand>. The example then calls <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>. To accomplish this, the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] INSERT statement. The connection is closed automatically when the code exits the using block.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._4_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._4_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("InfoMessage")]

      public sealed class SqlConnection : System.Data.Common.DbConnection, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection()
  nameWithType: SqlConnection.SqlConnection()
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>クラスです。"
  remarks: "新しいインスタンスをときに<xref:System.Data.SqlClient.SqlConnection>が作成、読み取り/書き込みプロパティは、関連付けられているキーワードを使用して明示的に設定されている場合を除き、次の初期値に設定されます、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティ</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A></xref:System.Data.SqlClient.SqlConnection>。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>| 空の文字列 (&quot;&quot;) |  |<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|&15; |  |<xref:System.Data.SqlClient.SqlConnection.Database%2A>| 空の文字列 (&quot;&quot;) |  |<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>| 空の文字列 (&quot;&quot;) |      のみを使用してこれらのプロパティの値を変更することができます、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティ</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A></xref:System.Data.SqlClient.SqlConnection.DataSource%2A></xref:System.Data.SqlClient.SqlConnection.Database%2A></xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A></xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>。 <xref:System.Data.SqlClient.SqlConnectionStringBuilder>クラスを作成および接続文字列の内容を管理するための機能を提供します</xref:System.Data.SqlClient.SqlConnectionStringBuilder>。"
  example:
  - "The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-vb[Classic WebData SqlConnection.SqlConnection Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._17_1.vb)]\n [!code-cs[Classic WebData SqlConnection.SqlConnection Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._17_1.cs)]"
  syntax:
    content: public SqlConnection ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection(String)
  nameWithType: SqlConnection.SqlConnection(String)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>クラスの接続文字列を含む文字列を指定するとします。"
  remarks: "新しいインスタンスをときに<xref:System.Data.SqlClient.SqlConnection>が作成、読み取り/書き込みプロパティは、関連付けられているキーワードを使用して明示的に設定されている場合を除き、次の初期値に設定されます、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティ</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A></xref:System.Data.SqlClient.SqlConnection>。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|`connectionString`|  |<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|&15; |  |<xref:System.Data.SqlClient.SqlConnection.Database%2A>| 空の文字列 (&quot;&quot;) |  |<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>| 空の文字列 (&quot;&quot;) |      のみを使用してこれらのプロパティの値を変更することができます、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティ</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A></xref:System.Data.SqlClient.SqlConnection.DataSource%2A></xref:System.Data.SqlClient.SqlConnection.Database%2A></xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A></xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>。 <xref:System.Data.SqlClient.SqlConnection>クラスを作成および接続文字列の内容を管理するための機能を提供します</xref:System.Data.SqlClient.SqlConnection>。"
  example:
  - "The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-vb[Classic WebData SqlConnection.SqlConnection1 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._38_1.vb)]\n [!code-cs[Classic WebData SqlConnection.SqlConnection1 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._38_1.cs)]"
  syntax:
    content: public SqlConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "開くための接続、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]データベース。"
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  id: '#ctor(System.String,System.Data.SqlClient.SqlCredential)'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection(String,SqlCredential)
  nameWithType: SqlConnection.SqlConnection(String,SqlCredential)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String,SqlCredential)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>クラスを使用しない接続文字列が指定された<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;></xref>と<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>ユーザー ID とパスワードを含むオブジェクトです。"
  syntax:
    content: public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential credential);
    parameters:
    - id: connectionString
      type: System.String
      description: '次の接続文字列キーワードのいずれかを使用しない接続文字列: <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>、または<xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>; を使用しないまたは<xref uid=&quot;langword_csharp_ContextConnection = true&quot; name=&quot;ContextConnection = true&quot; href=&quot;&quot;></xref>です。'
    - id: credential
      type: System.Data.SqlClient.SqlCredential
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref> object. 場合`credential`は null、SqlConnection は機能的に等価&lt;xref:System.Data.SqlClient.SqlConnection.%23ctor%2A&gt;です。"
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.AccessToken
  id: AccessToken
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
  fullName: System.Data.SqlClient.SqlConnection.AccessToken
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または接続のアクセス トークンを設定します。"
  syntax:
    content: public string AccessToken { get; set; }
    return:
      type: System.String
      description: "接続のアクセス トークンです。"
  overload: System.Data.SqlClient.SqlConnection.AccessToken*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "追加します。"
    return:
      type: System.Data.Common.DbTransaction
      description: "追加します。"
  overload: System.Data.SqlClient.SqlConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: SqlConnection.BeginTransaction()
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "データベース トランザクションを開始します。"
  remarks: "このコマンドは、 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] BEGIN TRANSACTION の実装です。       明示的にコミットまたはを使用してトランザクションをロールバックする必要があります、<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>または<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッド</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A></xref:System.Data.SqlClient.SqlTransaction.Commit%2A>。 確認する、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]トランザクション管理モデルが正しく実行される、によって提供されるものなど、他のトランザクション管理モデルは使用しないでください[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]です。      > [!NOTE] > 分離レベルを指定しない場合、既定の分離レベルが使用されます。 分離レベルを指定する、<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>メソッドを使用するオーバー ロードを使用して、`iso`パラメーター (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>).</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 接続が終了または破棄されるまで、トランザクションが完了した後、トランザクションの分離レベルが保持されます。 分離レベルに設定する**スナップショット**snapshot 分離レベルが有効になっていないデータベースではない例外をスローします。 既定の分離レベルを使用して、トランザクションが完了します。      > [!CAUTION] > 場合は、サーバーで、レベル 16 または上位のエラーが発生する、そのトランザクションを開始するには、トランザクションはロールバックされませんまで、<xref:System.Data.SqlClient.SqlDataReader.Read%2A>メソッドが呼び出されます</xref:System.Data.SqlClient.SqlDataReader.Read%2A>。 例外はスローされません**ExecuteReader**です。      > [!CAUTION] >、クエリが大量のデータと呼び出しを返すとき`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>がスローされるため[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]MARS を使用する場合、並列トランザクションを許可されていない</xref:System.Data.SqlClient.SqlException>。 この問題を避けるためには、常にトランザクションに関連付けるコマンドや、接続リーダーが開く前にします。       詳細については[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]トランザクションを参照してください「明示的なトランザクション」および「効率的なトランザクションのコーディング[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]オンライン ブック。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the BeginTransaction, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._1_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._1_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "新しいトランザクションを表すオブジェクト。"
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "複数のアクティブな結果セット (MARS) を使用する場合は、並列トランザクションは許可されません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "並列トランザクションはサポートされていません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定された分離レベルで、データベース トランザクションを開始します。"
  remarks: "このコマンドは、 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] BEGIN TRANSACTION の実装です。       明示的にコミットまたはを使用してトランザクションをロールバックする必要があります、<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>または<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッド</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A></xref:System.Data.SqlClient.SqlTransaction.Commit%2A>。 確認する、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]トランザクション管理モデルが正しく実行される、によって提供されるものなど、他のトランザクション管理モデルは使用しないでください[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]です。      > [!NOTE] > トランザクションがコミットまたはロールバック、トランザクションの分離レベル永続化され、自動コミット モードになっているすべての後続のコマンド (、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]既定)。 これにより、永続化して、行外には、他のユーザーのロックは、REPEATABLE read 分離レベルなど、予期しない結果が生成できます。 既定の (READ COMMITTED) に、分離レベルをリセットするには、実行、[!INCLUDE[tsql](~/add/includes/tsql-md.md)]ステートメントのセットのトランザクション分離レベル READ COMMITTED または呼び出し<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName><xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>.</xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>にすぐに続く</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> 詳細については[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]分離レベルを参照してください「分離レベルで、データベース エンジン」[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]オンライン ブック。       詳細については[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]トランザクションを参照してください「明示的なトランザクション」および「効率的なトランザクションのコーディング[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]オンライン ブック。      > [!CAUTION] >、クエリが大量のデータと呼び出しを返すとき`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>がスローされるため[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]MARS を使用する場合、並列トランザクションを許可されていない</xref:System.Data.SqlClient.SqlException>。 この問題を避けるためには、常にトランザクションに関連付けるコマンドや、接続リーダーが開く前にします。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-vb[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/add/codesnippet/visualbasic/b09ea924-5f89-4203-b010-_1.vb)]\n [!code-cs[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/add/codesnippet/csharp/b09ea924-5f89-4203-b010-_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso);
    parameters:
    - id: iso
      type: System.Data.IsolationLevel
      description: "トランザクションを実行する分離レベル。"
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "新しいトランザクションを表すオブジェクト。"
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "複数のアクティブな結果セット (MARS) を使用する場合は、並列トランザクションは許可されません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "並列トランザクションはサポートされていません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  id: BeginTransaction(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(String)
  nameWithType: SqlConnection.BeginTransaction(String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定されたトランザクションの名前を持つ、データベース トランザクションを開始します。"
  remarks: "このコマンドは、 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] BEGIN TRANSACTION の実装です。       長さ、`transactionName`パラメーターは、32 文字を超えない必要があります。 それ以外の場合、例外がスローされます。       値、`transactionName`以降の呼び出しでパラメーターを使用する<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>し、、`savePoint`のパラメーター、<xref:System.Data.SqlClient.SqlTransaction.Save%2A>メソッド</xref:System.Data.SqlClient.SqlTransaction.Save%2A></xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>。       明示的にコミットまたはを使用してトランザクションをロールバックする必要があります、<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>または<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッド</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A></xref:System.Data.SqlClient.SqlTransaction.Commit%2A>。 確認する、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]トランザクション管理モデルが正しく実行される、によって提供されるものなど、他のトランザクション管理モデルは使用しないでください[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]です。       詳細については[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]トランザクションを参照してください「明示的なトランザクション」および「効率的なトランザクションのコーディング[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]オンライン ブック。      > [!CAUTION] >、クエリが大量のデータと呼び出しを返すとき`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>がスローされるため[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]MARS を使用する場合、並列トランザクションを許可されていない</xref:System.Data.SqlClient.SqlException>。 この問題を避けるためには、常にトランザクションに関連付けるコマンドや、接続リーダーが開く前にします。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._36_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._36_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (string transactionName);
    parameters:
    - id: transactionName
      type: System.String
      description: "トランザクションの名前。"
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "新しいトランザクションを表すオブジェクト。"
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "複数のアクティブな結果セット (MARS) を使用する場合は、並列トランザクションは許可されません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "並列トランザクションはサポートされていません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  id: BeginTransaction(System.Data.IsolationLevel,System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel,String)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel,String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定された分離レベルとトランザクションの名前を持つ、データベース トランザクションを開始します。"
  remarks: "このコマンドは、 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] BEGIN TRANSACTION の実装です。       値、`transactionName`以降の呼び出しでパラメーターを使用する<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>し、、`savePoint`のパラメーター、<xref:System.Data.SqlClient.SqlTransaction.Save%2A>メソッド</xref:System.Data.SqlClient.SqlTransaction.Save%2A></xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>。       明示的にコミットまたはを使用してトランザクションをロールバックする必要があります、<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>または<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッド</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A></xref:System.Data.SqlClient.SqlTransaction.Commit%2A>。 確認する、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]トランザクション管理モデルが正しく実行される、によって提供されるものなど、他のトランザクション管理モデルは使用しないでください[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]です。      > [!NOTE] > トランザクションがコミットまたはロールバック、トランザクションの分離レベル永続化され、自動コミット モードになっているすべての後続のコマンド (、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]既定)。 これにより、永続化して、行外には、他のユーザーのロックは、REPEATABLE read 分離レベルなど、予期しない結果が生成できます。 既定の (READ COMMITTED) に、分離レベルをリセットするには、実行、[!INCLUDE[tsql](~/add/includes/tsql-md.md)]ステートメントのセットのトランザクション分離レベル READ COMMITTED または呼び出し<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName><xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>.</xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>にすぐに続く</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> 詳細については[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]分離レベルを参照してください「分離レベルで、データベース エンジン」[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]オンライン ブック。       詳細については[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]トランザクションを参照してください「明示的なトランザクション」および「効率的なトランザクションのコーディング[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]オンライン ブック。      > [!CAUTION] >、クエリが大量のデータと呼び出しを返すとき`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>がスローされるため[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]MARS を使用する場合、並列トランザクションを許可されていない</xref:System.Data.SqlClient.SqlException>。 この問題を避けるためには、常にトランザクションに関連付けるコマンドや、接続リーダーが開く前にします。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/add/codesnippet/csharp/1f00ab5d-aff7-46ea-8f1d-_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/add/codesnippet/visualbasic/1f00ab5d-aff7-46ea-8f1d-_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso, string transactionName);
    parameters:
    - id: iso
      type: System.Data.IsolationLevel
      description: "トランザクションを実行する分離レベル。"
    - id: transactionName
      type: System.String
      description: "トランザクションの名前。"
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "新しいトランザクションを表すオブジェクト。"
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "複数のアクティブな結果セット (MARS) を使用する場合は、並列トランザクションは許可されません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "並列トランザクションはサポートされていません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: SqlConnection.ChangeDatabase(String)
  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "開いているは、現在のデータベース変更<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>です。"
  remarks: "指定された値、`database`パラメーターは、有効なデータベース名を指定する必要があります。 `database`パラメーターは、null 値、空の文字列または空白だけの文字の文字列を含めることはできません。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: public override void ChangeDatabase (string database);
    parameters:
    - id: database
      type: System.String
      description: "現在のデータベースの代わりに使用するデータベースの名前。"
  overload: System.Data.SqlClient.SqlConnection.ChangeDatabase*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "データベース名が正しくありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は開いていません。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "データベースを変更することはできません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  id: ChangePassword(System.String,System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangePassword(String,String)
  nameWithType: SqlConnection.ChangePassword(String,String)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "変更、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]ユーザーのパスワードが指定された新しいパスワードへの接続文字列で示されます。"
  remarks: "使用する場合は[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]Windows server で開発者活用することにより、クライアント アプリケーションは既存のパスワードを変更するために、現在と新しいパスワードの両方を指定する機能。 アプリケーションは、古いパスワードの有効期限が切れてし、管理者の介入なしにこの操作を完了できる場合、最初のログイン時に、新しいパスワードのユーザー入力を求めるなどの機能を実装できます。       ChangePassword メソッドが変更された、 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 、示されたユーザーのパスワードが示される`connectionString`パラメーターで指定された値を`newPassword`パラメーター。 かどうか、接続文字列には、統合セキュリティのオプションが含まれます (つまり、&quot;Integrated Security = True&quot;またはそれと同等)、例外がスローされます。       パスワードが期限切れ、 <xref:System.Data.SqlClient.SqlConnection.Open%2A> <xref:System.Data.SqlClient.SqlException>。</xref:System.Data.SqlClient.SqlException>がメソッド</xref:System.Data.SqlClient.SqlConnection.Open%2A>を呼び出すことを決定するには 接続文字列に含まれるパスワードをリセットする必要があるために、<xref:System.Data.SqlClient.SqlException.Number%2A>例外のプロパティにステータス値 18487 または 18488 が含まれています</xref:System.Data.SqlClient.SqlException.Number%2A>。 最初の値 (18487) は、パスワードが期限切れ、ある&2; つ目の (18488) ログインする前にパスワードをリセットする必要がありますを示します。       このメソッドは、サーバーに、独自の接続を開き、パスワードの変更を要求しが完了するとすぐに、接続を閉じます。 この接続から取得されることもありませんに返される、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]接続プールします。"
  example:
  - "The following is a simple example of changing a password:  \n  \n```  \nclass Program {  \n   static void Main(string[] args) {  \n      System.Data.SqlClient.SqlConnection.ChangePassword(  \n        \"Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password\",   \n       \"new_password\");  \n   }  \n}  \n  \n```  \n  \n```  \nModule Module1  \n    Sub Main()  \nSystem.Data.SqlClient.SqlConnection.ChangePassword(  \n        \"Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password\",   \n       \"new_password\")  \n    End Sub  \nEnd Module  \n  \n```  \n  \n The following console application demonstrates the issues involved in changing a user's password because the current password has expired.  \n  \n [!code-cs[DataWorks SqlConnection.ChangePassword#1](~/add/codesnippet/csharp/7b66f468-c7fc-4a76-bd4e-_1.cs)]\n [!code-vb[DataWorks SqlConnection.ChangePassword#1](~/add/codesnippet/visualbasic/7b66f468-c7fc-4a76-bd4e-_1.vb)]"
  syntax:
    content: public static void ChangePassword (string connectionString, string newPassword);
    parameters:
    - id: connectionString
      type: System.String
      description: "サーバーに接続するための十分な情報を含む接続文字列です。 接続文字列には、ユーザー ID と現在のパスワードを含める必要があります。"
    - id: newPassword
      type: System.String
      description: "設定する新しいパスワード。 このパスワードは、最低限の長さ、特定の文字の要件を含む、サーバーに設定されているパスワード セキュリティ ポリシーに準拠する必要があります。"
  overload: System.Data.SqlClient.SqlConnection.ChangePassword*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "接続文字列には、統合セキュリティを使用するオプションが含まれています。       または、 <code> newPassword </code> 128 文字を超えています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "いずれか、 <code> connectionString </code>または<code> newPassword </code>パラメーターが null です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  id: ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangePassword(String,SqlCredential,SecureString)
  nameWithType: SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "変更、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]に示されているユーザーのパスワード、 <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref>オブジェクト。"
  syntax:
    content: public static void ChangePassword (string connectionString, System.Data.SqlClient.SqlCredential credential, System.Security.SecureString newSecurePassword);
    parameters:
    - id: connectionString
      type: System.String
      description: 'サーバーに接続するための十分な情報を含む接続文字列です。 接続文字列は、次の接続文字列キーワードのいずれかを使用しない必要があります: <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>、または<xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>; または<xref uid=&quot;langword_csharp_ContextConnection = true&quot; name=&quot;ContextConnection = true&quot; href=&quot;&quot;></xref>です。'
    - id: credential
      type: System.Data.SqlClient.SqlCredential
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref> object."
    - id: newSecurePassword
      type: System.Security.SecureString
      description: "新しいパスワード。 `newSecurePassword`のみ読み取る必要があります。 パスワードは、サーバー (たとえば、最小の長さや特定の文字の要件など) に設定されているパスワード セキュリティ ポリシーも満たしている必要があります。"
  overload: System.Data.SqlClient.SqlConnection.ChangePassword*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "1.接続文字列には、任意の組み合わせが含まれています。 <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>、または<xref uid=&quot;langword_csharp_Integrated Security=true&quot; name=&quot;Integrated Security=true&quot; href=&quot;&quot;></xref>です。      2.  接続文字列が含まれる<xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>です。      3.  <code>newSecurePassword</code>128 文字を超えています。      4.  <code>newSecurePassword</code>読み取り専用です。      5.  <code>newSecurePassword</code>空の文字列です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the parameters (<code>connectionString</code>, <code>credential</code>, or <code>newSecurePassword</code>) is null."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools
  id: ClearAllPools
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClearAllPools()
  nameWithType: SqlConnection.ClearAllPools()
  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "接続プールを空にします。"
  remarks: "ClearAllPools リセット (または空に)、接続プールします。 適切にマークしは破棄されます (の代わりに、プールに返される) 場合、呼び出し時に使用中の接続がある場合<xref:System.Data.SqlClient.SqlConnection.Close%2A>でそれらが呼び出されます</xref:System.Data.SqlClient.SqlConnection.Close%2A>。"
  syntax:
    content: public static void ClearAllPools ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.ClearAllPools*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  id: ClearPool(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClearPool(SqlConnection)
  nameWithType: SqlConnection.ClearPool(SqlConnection)
  fullName: System.Data.SqlClient.SqlConnection.ClearPool(SqlConnection)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した接続に関連付けられている接続プールを空にします。"
  remarks: "ClearPool が関連付けられている接続プールをクリア、`connection`です。 追加の接続に関連付けられている場合`connection`は呼び出し時に使用して、それらが適切にマークされ、破棄されます (プールに返される) ではなくとき<xref:System.Data.SqlClient.SqlConnection.Close%2A>に呼び出されます</xref:System.Data.SqlClient.SqlConnection.Close%2A>。"
  syntax:
    content: public static void ClearPool (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>プールから削除します。"
  overload: System.Data.SqlClient.SqlConnection.ClearPool*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId
  id: ClientConnectionId
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "試行が成功または失敗するかどうかに関係なく、最新の接続試行の接続 ID。"
  remarks: "ClientConnectionId に接続するサーバーのバージョンに関係なく機能しますが、拡張イベント ログおよび接続リング バッファー エラーに関するエントリが存在していない[!INCLUDE[sskatmai_r2](~/add/includes/ajax-current-ext-md.md)]以前のバージョン。       接続 ID をログ記録に関する拡張イベントが有効になっている場合、サーバーで障害発生したかどうかの拡張イベント ログ内の接続 ID を検索できます。 接続リング バッファーに、接続 ID を検索することもできます ([、接続リング バッファーによる SQL Server 2008 の接続のトラブルシューティング](http://go.microsoft.com/fwlink/?LinkId=207752)) 特定の接続エラーです。 接続 ID が接続リング バッファーにない場合は、ネットワーク エラーを想定することができます。"
  syntax:
    content: public Guid ClientConnectionId { get; }
    return:
      type: System.Guid
      description: "最新の接続の接続 ID が試行されます。"
  overload: System.Data.SqlClient.SqlConnection.ClientConnectionId*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Close
  id: Close
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Close()
  nameWithType: SqlConnection.Close()
  fullName: System.Data.SqlClient.SqlConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "データベースへの接続を閉じます。 これは、開いている接続を閉じるための推奨される方法です。"
  remarks: "Close メソッドは、保留中のトランザクションをロールバックします。 接続プールへの接続を解放し、または接続プールが無効になっている場合、接続を閉じます。      > [!NOTE] > 保留中のトランザクションを使用して開始[!INCLUDE[tsql](~/add/includes/tsql-md.md)]または<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>が自動的にロールバックされた接続プールが有効になっている場合、接続がリセットされます</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>。 接続プールがオフの場合は、トランザクションがロールバック後に`SqlConnection.Close`と呼びます。 トランザクションが開始<xref:System.Transactions>制御するには、`System.Transactions`して、インフラストラクチャとは影響しません`SqlConnection.Close`</xref:System.Transactions>。       アプリケーションは&1; つ以上の時間に Close を呼び出すことができます。 例外は生成されません。       場合、<xref:System.Data.SqlClient.SqlConnection>スコープの移動のうち、閉じられているされません</xref:System.Data.SqlClient.SqlConnection>。 したがって、する必要があります明示的に接続を呼び出して終了する`Close`または`Dispose`です。 `Close`および`Dispose`は機能的に等価です。 値の接続プール場合`Pooling`に設定されている`true`または`yes`では、基になる接続が接続プールに返されます。 その一方で場合、`Pooling`に設定されている`false`または`no`では、基になるサーバーに接続が閉じられます。      > [!NOTE] > ログイン イベントとログアウト イベントはないサーバーで発生、接続がからフェッチされたり接続プールに返される場合、接続は実際には終了していないため、接続プールに返されるときにします。 詳細については、次を参照してください。 [SQL サーバー接続プール (ADO.NET)](~/add/includes/ajax-current-ext-md.md)です。      > [!CAUTION] > 呼び出さない`Close`または`Dispose`接続、DataReader、または その他のマネージ オブジェクトで、`Finalize`クラスのメソッドです。 ファイナライザーで、クラスが直接所有されているアンマネージ リソースだけを解放する必要があります。 クラスがアンマネージ リソースを所有していない場合は含まれません、`Finalize`メソッド、クラス定義にします。 詳細については、次を参照してください。[ガベージ コレクション](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, displays some of its properties. The connection is automatically closed at the end of the `using` block.  \n  \n [!code-vb[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._20_1.vb)]\n [!code-cs[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._20_1.cs)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.Close*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "接続を開くときに発生した接続レベルのエラーです。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  id: ColumnEncryptionKeyCacheTtl
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または設定、- 有効期限の列暗号化キー エントリの列の暗号化キーのキャッシュ、 [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx)機能します。 既定値は、2 時間です。 0 はないすべてのキャッシュします。"
  syntax:
    content: public static TimeSpan ColumnEncryptionKeyCacheTtl { get; set; }
    return:
      type: System.TimeSpan
      description: "時間間隔。"
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  id: ColumnEncryptionQueryMetadataCacheEnabled
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "クエリ メタデータ キャッシュが有効になっているかどうかを示す値を取得または (true) か (false) に対して実行されているパラメーター化クエリを[Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx)データベースを有効にします。 既定値は true です。"
  remarks: "パラメーター化されたクエリは、SqlClient のためとのやり取り SQL Server にパラメーターのメタデータを暗号化する必要があるパラメーターを表示する方法 (どのキーおよびアルゴリズムを使用する必要があります)。 アプリケーションが呼び出す場合、同じクエリ複数回、余分なラウンド トリップが行われましたサーバーごとには、アプリケーションのパフォーマンスが低下します。       **ColumnEncryptionQueryMetadataCacheEnabled**同じクエリが複数回呼び出される場合は true に設定して、サーバーへのラウンド トリップになります&1; 回だけです。 キャッシュには、2000 のクエリに設定されているが構成可能な最大サイズ パラメーターがあります。"
  syntax:
    content: public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; set; }
    return:
      type: System.Boolean
      description: "クエリ メタデータ キャッシュが有効である場合、true を返しますそれ以外の場合は false。 既定値は true です。"
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  id: ColumnEncryptionTrustedMasterKeyPaths
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "データベース サーバーの信頼されたキー パスの一覧を設定できます。 処理中にアプリケーションのクエリ、ドライバーが受け取った場合は、一覧にないにキーのパス、クエリは失敗します。 このプロパティは、キー ストアの資格情報の漏洩につながる可能性があります偽のキーのパスを提供する危険性の SQL Server が関係するセキュリティ攻撃に対する保護を強化を提供します。"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,System.Collections.Generic.IList<string>> ColumnEncryptionTrustedMasterKeyPaths { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}
      description: "列の暗号化の信頼されたマスター キー パスの一覧です。"
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
  fullName: System.Data.SqlClient.SqlConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または設定を開くには使用される文字列、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]データベース。"
  remarks: "ConnectionString は似ていますが、OLE DB 接続文字列に同じではありません。 OLE DB または ADO の場合とは異なり返される接続文字列が同じユーザー セット接続文字列のセキュリティ情報マイナス Persist Security Info の値が設定されている場合`false`(既定値)。 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]永続化または Persist Security Info を設定していない場合、接続文字列にパスワードを返すしていない`true`です。       ConnectionString プロパティは、データベースへの接続を使用することができます。 次の例は、一般的な接続文字列を示しています。      ```   &quot;Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)&quot;   ```使用して、新しい<xref:System.Data.SqlClient.SqlConnectionStringBuilder>実行時に有効な接続文字列を構築するためにします</xref:System.Data.SqlClient.SqlConnectionStringBuilder>。 詳細については、次を参照してください。[接続文字列ビルダー](~/add/includes/ajax-current-ext-md.md)です。       接続が閉じられたときにのみ、ConnectionString プロパティを設定できます。 多くの接続文字列の値はある対応する読み取り専用プロパティです。 接続文字列を設定すると、エラーが検出された場合を除いて、これらのプロパティが更新します。 ここで、プロパティのいずれも更新されます。 <xref:System.Data.SqlClient.SqlConnection>プロパティは、ConnectionString 内に含まれる設定のみを返します。</xref:System.Data.SqlClient.SqlConnection>       ローカル コンピューターに接続する場合、サーバーの&quot;(local)&quot;を指定します。 サーバー名が指定されていない場合は、ローカル コンピューター上の既定のインスタンスへの接続が試行されます。       閉じた接続に対して接続文字列をリセットすると、すべての接続文字列の値 (および関連するプロパティ) パスワードを含むがリセットされます。 含む接続文字列を設定する場合など、&quot;データベース = AdventureWorks&quot;への接続文字列をリセットし、&quot;データ ソース = myserver; Integrated Security = true&quot;では、<xref:System.Data.SqlClient.SqlConnection.Database%2A>プロパティが不要になった&quot;AdventureWorks&quot;に設定されている</xref:System.Data.SqlClient.SqlConnection.Database%2A>。       設定されている後すぐには、接続文字列を解析します。 解析中に、ランタイム例外などの構文エラーが見つかった場合<xref:System.ArgumentException>が生成されます</xref:System.ArgumentException>。 開くには、接続試行が行われたときにのみ、その他のエラーを確認できます。       接続文字列の基本形式には、一連セミコロンで区切られたキーワード/値ペアにはが含まれています。 等号 (=) は、それぞれのキーワードとその値を接続します。 セミコロン、単一引用符または二重引用符文字を含む値を含めるには、値を二重引用符で囲む必要があります。 セミコロンと二重引用符の両方が、値が含まれる場合、値は単一引用符で囲むことができます。 単一引用符も値が二重引用符文字で始まる場合に役立ちます。 逆に、値が単一引用符で始まる場合は、二重引用符を使用できます。 値に、一重引用符と二重引用符の両方の文字が含まれている場合は、値内で発生するたびに値を囲むために使用する引用符文字を二重にする必要があります。       文字列値の先頭または末尾のスペースを含めるには、単一引用符または二重引用符のいずれかの値を囲む必要があります。 引用符で囲まれている場合でも、整数、ブール値、列挙値の先頭または末尾の空白は無視されます。 ただし、文字列リテラル キーワードまたは値内にスペースが保持されます。 一重引用符または二重引用符は、区切り記号を使用せず、接続文字列内使用可能性があります (たとえば、データ ソース my&quot;Server またはデータ ソースを = =&quot;Server) 引用符文字が値の最初と最後の文字がない限り、します。       キーワードは、大文字と小文字が区別されません。       次の表には、ConnectionString 内のキーワードの値の有効な名前が一覧表示します。        次の一覧には、接続プールの接続文字列内の値の有効な名前が含まれています。 詳細については、次を参照してください。 [SQL サーバー接続プール (ADO.NET)](~/add/includes/ajax-current-ext-md.md)です。      の接続有効期間 (または Load Balance Timeout) - - 最大プール サイズの最小プール サイズを参加させる - したら設定キーワードまたは接続プールをブール値を必要とする値をプールすることができますを使用して &quot;yes&quot; の代わりに &quot;true&quot; および &quot;false&quot; と &quot;no&quot; ではなくです。 整数値は、文字列として表されます。      > [!NOTE] >、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]通信するために独自のプロトコルを使用して[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]です。 そのため、ことはできませんの ODBC データ ソース名 (DSN) を使用して接続するときに[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]ODBC レイヤーを追加することはないためです。      > [!NOTE] > Universal data link (UDL) ファイルはサポートされていません、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]です。      > [!CAUTION] > このリリースでは、アプリケーションで使用注意が必要で (たとえば、ダイアログ ボックスでは、接続文字列への追加とユーザー ID とパスワード情報を取得する場合など) のユーザー入力に基づいて接続文字列を構築するときにします。 アプリケーションは、ユーザーがこれらの値で追加の接続文字列パラメーターを埋め込むことはできないことを確認してください (としてパスワードを入力&quot;なデータベース = somedb&quot;を別のデータベース アタッチを試行する)。 ユーザー入力に基づいて接続文字列を構築する必要がある場合は、新しい使用<xref:System.Data.SqlClient.SqlConnectionStringBuilder>、する接続文字列を検証し、この問題を解決するのに役立ちます</xref:System.Data.SqlClient.SqlConnectionStringBuilder>。 参照してください[接続文字列ビルダー](../Topic/Connection%20String%20Builders.md)詳細についてはします。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the ConnectionString property before opening the connection.  \n  \n [!code-vb[Classic WebData SqlConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._24_1.vb)]\n [!code-cs[Classic WebData SqlConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._24_1.cs)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "元のデータベース名、および最初の接続を確立するために必要なその他のパラメーターを含む接続文字列。 既定値は、空の文字列です。"
  overload: System.Data.SqlClient.SqlConnection.ConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無効な接続文字列引数が指定されている、または必要な接続文字列の引数が指定されていません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "試行を終了し、エラーが発生する前に接続を確立しているときに待機する時間を取得します。"
  remarks: "使用してタイムアウトに接続の待機時間を設定することができます、`Connect``Timeout`または`Connection Timeout`キーワード、接続文字列にします。 値が 0 の制限がないことを示しますとでは避ける必要があります、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>接続の試行が無限に待機するためです。</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> 。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the `Connection Timeout` to 30 seconds in the connection string. The code opens the connection and displays the ConnectionTimeout property in the console window.  \n  \n [!code-vb[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._28_1.vb)]\n [!code-cs[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._28_1.cs)]"
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "時間 (秒) に接続を開くを待機します。 既定値は、15 秒です。"
  overload: System.Data.SqlClient.SqlConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定されている値が 0 未満です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: SqlConnection.CreateCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "作成して返します、 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>オブジェクトに関連付けられている、 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>です。"
  remarks: ''
  example:
  - >-
    [!code-vb[SqlConnection_CreateCommand#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._32_1.vb)]
     [!code-cs[SqlConnection_CreateCommand#1](~/add/codesnippet/csharp/m-system.data.sqlclient._32_1.cs)]
  syntax:
    content: public System.Data.SqlClient.SqlCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref> object."
  overload: System.Data.SqlClient.SqlConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: SqlConnection.CreateDbCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "追加します。"
  overload: System.Data.SqlClient.SqlConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Credential
  id: Credential
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Credential
  nameWithType: SqlConnection.Credential
  fullName: System.Data.SqlClient.SqlConnection.Credential
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または設定、 <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref>この接続のオブジェクト。"
  remarks: "`Persist Security Info = true`値を取得するために必要な<xref:System.Data.SqlClient.SqlCredential>資格情報を持つオブジェクト</xref:System.Data.SqlClient.SqlCredential>。       資格情報の既定値は null です。       <xref:System.InvalidOperationException>例外が発生します - 資格情報が開いている接続に対して設定されている場合。</xref:System.InvalidOperationException> 。      -資格情報が設定されている場合`Context Connection=true`です。      -資格情報が設定されている場合`Integrated Security = true`です。      場合は、接続文字列を使用する場合に、資格情報が設定されている`Password`です。      場合は、接続文字列を使用する場合に、資格情報が設定されている`UserID`です。"
  syntax:
    content: public System.Data.SqlClient.SqlCredential Credential { get; set; }
    return:
      type: System.Data.SqlClient.SqlCredential
      description: "<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref>この接続のオブジェクト。"
  overload: System.Data.SqlClient.SqlConnection.Credential*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Database
  id: Database
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Database
  nameWithType: SqlConnection.Database
  fullName: System.Data.SqlClient.SqlConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "現在のデータベースまたは接続が開かれた後に使用するデータベースの名前を取得します。"
  remarks: "データベースのプロパティを動的に更新します。 現在のデータベースを使って変更する場合、[!INCLUDE[tsql](~/add/includes/tsql-md.md)]ステートメントまたは<xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>メソッド、情報メッセージが送信され、プロパティが自動的に更新されます</xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._26_1.cs)]\n [!code-vb[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._26_1.vb)]"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "現在のデータベースまたは接続が開かれた後に使用するデータベースの名前の名前。 既定値は、空の文字列です。"
  overload: System.Data.SqlClient.SqlConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.DataSource
  id: DataSource
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: SqlConnection.DataSource
  fullName: System.Data.SqlClient.SqlConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "インスタンスの名前を取得[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を接続します。"
  remarks: >-
    > [!NOTE]

    >  The DataSource property returns `null` if the connection string for the <xref:System.Data.SqlClient.SqlConnection> is "context connection=true".
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-vb[Classic WebData SqlConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._62_1.vb)]\n [!code-cs[Classic WebData SqlConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._62_1.cs)]"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "インスタンスの名前[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を接続します。 既定値は、空の文字列です。"
  overload: System.Data.SqlClient.SqlConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
  fullName: System.Data.SqlClient.SqlConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "追加します。"
  overload: System.Data.SqlClient.SqlConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlConnection.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.Data.SqlClient.SqlConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: SqlConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(ITransaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定されたトランザクションは分散トランザクションに参加します。"
  remarks: "使用することができます、<xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A>分散トランザクションに参加するメソッド</xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A>。 これにより、接続するため、<xref:System.Transactions.Transaction>インスタンス、 **EnlistTransaction**で利用できる機能を活用、<xref:System.Transactions>を管理するための名前空間は分散トランザクションを置き換えることが**どちら**この目的のためです</xref:System.Transactions></xref:System.Transactions.Transaction>。 詳細については、次を参照してください。[分散トランザクション](~/add/includes/ajax-current-ext-md.md)です。       既存の分散トランザクションを使用して、参加を継続できます、**どちら**メソッドへの自動参加が無効になっている場合。 既存の分散トランザクションに参加させることにより、トランザクションがコミットまたはロールバックされた場合、データ ソース コードで行った変更もコミットまたはロールバックします。       `EnlistDistributedTransaction`例外を返します<xref:System.Data.SqlClient.SqlConnection>が、既に<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>を使用してトランザクションを開始</xref:System.Data.SqlClient.SqlConnection> ただし、トランザクションは、データ ソースで開始されたローカル トランザクション (たとえば、明示的に実行することによって、BEGIN TRANSACTION ステートメントを使用して、<xref:System.Data.SqlClient.SqlCommand>オブジェクト)、**どちら**ローカル トランザクションをロールバックし、要求されるとおり、既存の分散トランザクションに参加します</xref:System.Data.SqlClient.SqlCommand>。 注意してください、ローカルのトランザクションがロールバックされていないローカル トランザクションの管理を担当を使用して開始<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>。</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>受け取りません"
  syntax:
    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);
    parameters:
    - id: transaction
      type: System.EnterpriseServices.ITransaction
      description: "既存への参照を<xref href=&quot;System.EnterpriseServices.ITransaction&quot;></xref>登録先。"
  overload: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: SqlConnection.EnlistTransaction(Transaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定されたトランザクションは分散トランザクションに参加します。"
  remarks: 'EnlistTransaction メソッドを使用すると、分散トランザクションに参加します。 これにより、接続するため、<xref:System.Transactions.Transaction>インスタンス、 **EnlistTransaction**で利用できる機能を活用、<xref:System.Transactions>を管理するための名前空間は分散トランザクションを置き換えることが**どちら**が使用される、 **System.EnterpriseServices.ITransaction**オブジェクト</xref:System.Transactions></xref:System.Transactions.Transaction>。 さらに、若干異なるセマンティクス: 接続は明示的にトランザクションに参加させる、一度参加解除されてまたはできない最初のトランザクションが終了するまで、別のトランザクションに参加しています。 分散トランザクションの詳細については、次を参照してください。[分散トランザクション](~/add/includes/ajax-current-ext-md.md)です。'
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "既存への参照を<xref href=&quot;System.Transactions.Transaction&quot;></xref>登録先。"
  overload: System.Data.SqlClient.SqlConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  id: FireInfoMessageEventOnUserErrors
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または FireInfoMessageEventOnUserErrors プロパティを設定します。"
  remarks: "FireInfoMessageEventOnUserErrors を設定すると`true`、エラーとして例外が処理されるようになりましたとして扱われました以前を<xref:System.Data.SqlClient.SqlConnection.InfoMessage>イベント</xref:System.Data.SqlClient.SqlConnection.InfoMessage>。 すべてのイベントは、即座に発生し、イベント ハンドラーによって処理されます。 かどうかは FireInfoMessageEventOnUserErrors に設定されている`false`、し<xref:System.Data.SqlClient.SqlConnection.InfoMessage>イベントは、プロシージャの最後に処理します</xref:System.Data.SqlClient.SqlConnection.InfoMessage>。      > [!NOTE] > コマンドの処理を停止するサーバーを原因となる重大度レベルが 17 またはそれ以上のエラーを例外として処理する必要があります。 エラーの処理方法に関係なく、例外がスローされますここで、<xref:System.Data.SqlClient.SqlConnection.InfoMessage>イベント</xref:System.Data.SqlClient.SqlConnection.InfoMessage>。       イベントの使用の詳細については、次を参照してください。[接続イベント](~/add/includes/ajax-current-ext-md.md)です。 によって生成されたエラーの詳細については、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]エンジンは、「[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]オンライン ブック。"
  syntax:
    content: public bool FireInfoMessageEventOnUserErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>FireInfoMessageEventOnUserErrors プロパティが設定されている場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema
  id: GetSchema
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: SqlConnection.GetSchema()
  fullName: System.Data.SqlClient.SqlConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "このデータ ソースのスキーマ情報を返します<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>です。 スキームの詳細については、次を参照してください。 [SQL Server スキーマ コレクション](http://msdn.microsoft.com/library/ms254969.aspx)です。"
  syntax:
    content: public override System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>スキーマ情報を格納します。"
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: SqlConnection.GetSchema(String)
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "このデータ ソースのスキーマ情報を返します<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>スキーマ名を指定した文字列を使用します。"
  remarks: "データベース、テーブルまたは列のスキーマ情報を使用する必要があります。 このサンプル:-スキーマ情報を取得する GetSchema を使用します。      -指定した情報を取得するのにスキーマの制限を使用します。      -データベース、テーブル、および一部の列のスキーマ情報を取得します。       サンプルを実行する前にする必要があります、サンプル データベースを作成する、次を使用して[!INCLUDE[tsql](~/add/includes/tsql-md.md)]: ```   USE [master]   GO      CREATE DATABASE [MySchool]       GO      USE [MySchool]   GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,   [Year] [smallint] NOT NULL,   [Title] [nvarchar](100) NOT NULL,   [Credits] [int] NOT NULL,   [DepartmentID] [int] NOT NULL,    CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED    (   [CourseID] ASC,   [Year] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,   [Name] [nvarchar](50) NOT NULL,   [Budget] [money] NOT NULL,   [StartDate] [datetime] NOT NULL,   [Administrator] [int] NULL,    CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED    (   [DepartmentID] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C1045&quot;, 2012, N&quot;Calculus&quot;, 4, 7)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C1061&quot;, 2012, N&quot;Physics&quot;, 4, 1)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C2021&quot;, 2012, N&quot;Composition&quot;, 3, 2)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C2042&quot;, 2012, N&quot;Literature&quot;, 4, 2)      SET IDENTITY_INSERT [dbo].[Department] ON       INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N&quot;Engineering&quot;, 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N&quot;English&quot;, 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N&quot;Economics&quot;, 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N&quot;Mathematics&quot;, 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)   SET IDENTITY_INSERT [dbo].[Department] OFF      ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])   REFERENCES [dbo].[Department] ([DepartmentID])   GO   ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]   GO   ```[データベースからスキーマ情報を取得する方法](http://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2)Visual Studio プロジェクトにこのコード サンプルの c# および Visual Basic のバージョンがあります。             ```   using System;   using System.Data;   using System.Data.SqlClient;      class Program {      static void Main(string[] args) {            using (SqlConnection conn = new SqlConnection(&quot;Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;&quot;)) {            conn.Open();               // Get the Meta Data for Supported Schema Collections            DataTable metaDataTable = conn.GetSchema(&quot;MetaDataCollections&quot;);               Console.WriteLine(&quot;Meta Data for Supported Schema Collections:&quot;);            ShowDataTable(metaDataTable, 25);            Console.WriteLine();               // Get the schema information of Databases in your instance            DataTable databasesSchemaTable = conn.GetSchema(&quot;Databases&quot;);               Console.WriteLine(&quot;Schema Information of Databases:&quot;);            ShowDataTable(databasesSchemaTable, 25);            Console.WriteLine();               // First, get schema information of all the tables in current database;            DataTable allTablesSchemaTable = conn.GetSchema(&quot;Tables&quot;);               Console.WriteLine(&quot;Schema Information of All Tables:&quot;);            ShowDataTable(allTablesSchemaTable, 20);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Table Type to get             // the specified table(s).            // You can use four restrictions for Table, so you should create a 4 members array.            String[] tableRestrictions = new String[4];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Table Type.             // Now we specify the Table Name of the table what we want to get schema information.            tableRestrictions[2] = &quot;Course&quot;;               DataTable courseTableSchemaTable = conn.GetSchema(&quot;Tables&quot;, tableRestrictions);               Console.WriteLine(&quot;Schema Information of Course Tables:&quot;);            ShowDataTable(courseTableSchemaTable, 20);            Console.WriteLine();               // First, get schema information of all the columns in current database.            DataTable allColumnsSchemaTable = conn.GetSchema(&quot;Columns&quot;);               Console.WriteLine(&quot;Schema Information of All Columns:&quot;);            ShowColumns(allColumnsSchemaTable);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).            // You can use four restrictions for Column, so you should create a 4 members array.            String[] columnRestrictions = new String[4];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Column Name.             // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.            columnRestrictions[2] = &quot;Course&quot;;            columnRestrictions[3] = &quot;DepartmentID&quot;;               DataTable departmentIDSchemaTable = conn.GetSchema(&quot;Columns&quot;, columnRestrictions);               Console.WriteLine(&quot;Schema Information of DepartmentID Column in Course Table:&quot;);            ShowColumns(departmentIDSchemaTable);            Console.WriteLine();               // First, get schema information of all the IndexColumns in current database            DataTable allIndexColumnsSchemaTable = conn.GetSchema(&quot;IndexColumns&quot;);               Console.WriteLine(&quot;Schema Information of All IndexColumns:&quot;);            ShowIndexColumns(allIndexColumnsSchemaTable);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to             // get the specified column(s).            // You can use five restrictions for Column, so you should create a 5 members array.            String[] indexColumnsRestrictions = new String[5];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.             // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.            indexColumnsRestrictions[2] = &quot;Course&quot;;            indexColumnsRestrictions[4] = &quot;CourseID&quot;;               DataTable courseIdIndexSchemaTable = conn.GetSchema(&quot;IndexColumns&quot;, indexColumnsRestrictions);               Console.WriteLine(&quot;Index Schema Information of CourseID Column in Course Table:&quot;);            ShowIndexColumns(courseIdIndexSchemaTable);            Console.WriteLine();         }            Console.WriteLine(&quot;Please press any key to exit...&quot;);         Console.ReadKey();      }         private static void ShowDataTable(DataTable table, Int32 length) {         foreach (DataColumn col in table.Columns) {            Console.Write(&quot;{0,-&quot; + length + &quot;}&quot;, col.ColumnName);         }         Console.WriteLine();            foreach (DataRow row in table.Rows) {            foreach (DataColumn col in table.Columns) {               if (col.DataType.Equals(typeof(DateTime)))                  Console.Write(&quot;{0,-&quot; + length + &quot;:d}&quot;, row[col]);               else if (col.DataType.Equals(typeof(Decimal)))                  Console.Write(&quot;{0,-&quot; + length + &quot;:C}&quot;, row[col]);               else                  Console.Write(&quot;{0,-&quot; + length + &quot;}&quot;, row[col]);            }            Console.WriteLine();         }      }         private static void ShowDataTable(DataTable table) {         ShowDataTable(table, 14);      }         private static void ShowColumns(DataTable columnsTable) {         var selectedRows = from info in columnsTable.AsEnumerable()                            select new {                               TableCatalog = info[&quot;TABLE_CATALOG&quot;],                               TableSchema = info[&quot;TABLE_SCHEMA&quot;],                               TableName = info[&quot;TABLE_NAME&quot;],                               ColumnName = info[&quot;COLUMN_NAME&quot;],                               DataType = info[&quot;DATA_TYPE&quot;]                            };            Console.WriteLine(&quot;{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}&quot;, &quot;TableCatalog&quot;, &quot;TABLE_SCHEMA&quot;,             &quot;TABLE_NAME&quot;, &quot;COLUMN_NAME&quot;, &quot;DATA_TYPE&quot;);         foreach (var row in selectedRows) {            Console.WriteLine(&quot;{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}&quot;, row.TableCatalog,                row.TableSchema, row.TableName, row.ColumnName, row.DataType);         }      }         private static void ShowIndexColumns(DataTable indexColumnsTable) {         var selectedRows = from info in indexColumnsTable.AsEnumerable()                            select new {                               TableSchema = info[&quot;table_schema&quot;],                               TableName = info[&quot;table_name&quot;],                               ColumnName = info[&quot;column_name&quot;],                               ConstraintSchema = info[&quot;constraint_schema&quot;],                               ConstraintName = info[&quot;constraint_name&quot;],                               KeyType = info[&quot;KeyType&quot;]                            };            Console.WriteLine(&quot;{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}&quot;, &quot;table_schema&quot;, &quot;table_name&quot;, &quot;column_name&quot;, &quot;constraint_schema&quot;, &quot;constraint_name&quot;, &quot;KeyType&quot;);         foreach (var row in selectedRows) {            Console.WriteLine(&quot;{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}&quot;, row.TableSchema,                row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);         }      }   }   ```"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "返すスキーマの名前を指定します。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>スキーマ情報を格納します。"
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>null として指定されます。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: SqlConnection.GetSchema(String,String[])
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "このデータ ソースのスキーマ情報を返します<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>スキーマ名と制限値に指定した文字列配列の指定した文字列を使用します。"
  remarks: "`restrictionValues`パラメーターを指定できます*n* 、特定のコレクションの制限のコレクションで指定された値の深さ。 指定された制限の値を設定して、他の制限値を設定しない、するために、前述の制限を設定する必要があります。`null`しの値を指定するには、制限用に適切な値を格納します。       この例では、&quot;Tables&quot;コレクションです。 &quot;Tables&quot;コレクションでは、データベース、所有者、3 つの制限とテーブル名があり&quot;Carl&quot;の所有者に関連付けられているテーブルのみに戻るには場合、は、次の値を渡す必要があります。:&quot;Carl&quot;は null です。 制限値が渡されない場合、既定値は、その制限に使用されます。 これは渡すことと、同じマッピング`null`、これとは異なるパラメーター値に空の文字列に渡すことです。 その場合、空の文字列 (&quot;&quot;) は、指定されたパラメーターの値であると見なされます。       GetSchema を示すコード サンプル、 <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>。</xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>を参照してください。"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "返すスキーマの名前を指定します。"
    - id: restrictionValues
      type: System.String[]
      description: "要求されたスキーマの制限値のセット。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>スキーマ情報を格納します。"
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>null として指定されます。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.InfoMessage
  id: InfoMessage
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: InfoMessage
  nameWithType: SqlConnection.InfoMessage
  fullName: System.Data.SqlClient.SqlConnection.InfoMessage
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "発生したときに[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]警告または情報メッセージが返されます。"
  remarks: "警告またはサーバーによって送信される情報のメッセージを処理するクライアントを作成する必要があります、<xref:System.Data.SqlClient.SqlInfoMessageEventHandler>このイベントを待機するデリゲート</xref:System.Data.SqlClient.SqlInfoMessageEventHandler>。       InfoMessage イベントは、重大度が 10 のメッセージが発生したかによって返される小さい[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]です。 エラーおよびメッセージの重大度を 20 原因経由で接続が閉じ、11 から 20 までの重大度をメッセージが発生します。 詳細については[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]エラー レベルを参照してください「データベース エンジンのエラーの重大度」[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]オンライン ブック。       例および詳細については、次を参照してください。[接続イベント](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage;
    return:
      type: System.Data.SqlClient.SqlInfoMessageEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Open
  id: Open
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Open()
  nameWithType: SqlConnection.Open()
  fullName: System.Data.SqlClient.SqlConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "<xref:System.Data.SqlClient.SqlConnection.ConnectionString*>。</xref:System.Data.SqlClient.SqlConnection.ConnectionString*>で指定されたプロパティの設定でデータベース接続を開きます"
  remarks: "<xref:System.Data.SqlClient.SqlConnection>がある場合、接続プールから、開いている接続を描画します</xref:System.Data.SqlClient.SqlConnection>。 インスタンスに新しい接続を確立、それ以外の場合、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]です。      > [!NOTE] > 場合、<xref:System.Data.SqlClient.SqlConnection>スコープの移動のうち、終了していない</xref:System.Data.SqlClient.SqlConnection>。 したがって、する必要があります明示的に接続を呼び出して終了する<xref:System.Data.SqlClient.SqlConnection.Close%2A>。</xref:System.Data.SqlClient.SqlConnection.Close%2A>      > [!NOTE] > のインスタンスに接続しようと 1433 以外のポート番号を指定する場合は[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]TCP/IP 以外のプロトコルを使用して Open メソッドが失敗したとします。 1433 以外のポート番号を指定するには、&quot;サーバー マシン名、ポート番号 =&quot;接続文字列、および使用して、TCP/IP プロトコルでします。      > [!NOTE] >、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 「許可の呼び出しをアンマネージ アセンブリ」有効になっているセキュリティ権限が必要です (<xref:System.Security.Permissions.SecurityPermission>で<xref:System.Security.Permissions.SecurityPermissionFlag>&quot;éý&quot; `UnmanagedCode`) を開くには、 <xref:System.Data.SqlClient.SqlConnection>SQL デバッグを有効にします</xref:System.Data.SqlClient.SqlConnection></xref:System.Security.Permissions.SecurityPermissionFlag></xref:System.Security.Permissions.SecurityPermission>。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, and displays some of its properties. The connection is automatically closed at the end of the `using` block.  \n  \n [!code-vb[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._18_1.vb)]\n [!code-cs[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._18_1.cs)]"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "データ ソースまたはサーバーを指定せず、接続を開くことができません。       または、接続が既にします。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "接続を開くときに、接続レベルのエラーが発生しました。 場合、 <> </> *> プロパティに値 18487 または 18488 が含まれています、指定したパスワードが有効期限が切れたか、リセットする必要があります。参照してください、 <> </> *> 方法の詳細。       <xref uid=&quot;langword_csharp_&lt;system.data.localdb&gt;&quot; name=&quot;&lt;system.data.localdb&gt;&quot; href=&quot;&quot;> </xref> App.config ファイル内のタグが無効または不明な要素です。"
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "同じ名前の&2; つのエントリがある、 <xref uid=&quot;langword_csharp_&lt;localdbinstances&gt;&quot; name=&quot;&lt;localdbinstances&gt;&quot; href=&quot;&quot;> </xref>セクションです。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: OpenAsync(CancellationToken)
  nameWithType: SqlConnection.OpenAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<> *> で指定されたプロパティの設定で、データベース接続を開く、 <> </> *> です。 接続のタイムアウトが経過する前に、操作を破棄することを要求するキャンセル トークンを使用できます。  例外は、返されたタスクによって伝達されます。 接続が成功せず、接続タイムアウトの時間が経過すると、返されるタスクはするとしてマーク例外とエラーが発生しました。 実装は、プールとプールされていない接続の両方の呼び出し元のスレッドをブロックすることがなく、タスクを返します。"
  remarks: "OpenAsync の呼び出し後に<xref:System.Data.SqlClient.SqlConnection.State%2A>返す必要があります<xref:System.Data.ConnectionState>、返されるまで<xref:System.Threading.Tasks.Task>が完了します</xref:System.Threading.Tasks.Task></xref:System.Data.ConnectionState></xref:System.Data.SqlClient.SqlConnection.State%2A>。 次に、接続が成功した場合<xref:System.Data.SqlClient.SqlConnection.State%2A><xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState>を返す必要があります</xref:System.Data.SqlClient.SqlConnection.State%2A> 接続が失敗すると、 <xref:System.Data.SqlClient.SqlConnection.State%2A> <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState>を返す必要があります</xref:System.Data.SqlClient.SqlConnection.State%2A>       呼び出し<xref:System.Data.SqlClient.SqlConnection.Close%2A>取り消すか、対応する OpenAsync 呼び出しのクローズを試みます</xref:System.Data.SqlClient.SqlConnection.Close%2A>。       非同期プログラミングの詳細については、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public override System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取り消し命令。"
    return:
      type: System.Threading.Tasks.Task
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlConnection.OpenAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "タスクの完了前に、同じインスタンスに対して OpenAsync を複数回呼び出しています。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。       接続できなかった接続プールから接続のタイムアウトが経過する前にします。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "によって返されるエラー[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]接続を開くときに発生しました。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.PacketSize
  id: PacketSize
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
  fullName: System.Data.SqlClient.SqlConnection.PacketSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "インスタンスとの通信に使用されるネットワーク パケットのバイト単位でサイズを取得[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]です。"
  remarks: "アプリケーションを一括コピー操作を実行または送信または大量の text または image データの受信する場合、既定値より少ないネットワーク原因になるので、効率が向上よりも大きいパケット サイズは読み取りおよび書き込み操作です。 アプリケーションは、少量の情報を送受信場合、は、パケット サイズを 512 バイトに設定できます (のパケット サイズの値を使用して、 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>)、これはほとんどのデータ転送操作のための十分な</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>。 ほとんどのアプリケーションでの既定のパケット サイズをお勧めします。       PacketSize 512 ~ 32767 バイトの範囲内の値があります。 値がこの範囲外にある場合、例外が生成されます。       8000、パケットのインスタンスで複数ページ アロケーターを使用するより大きい数値に既定値を設定[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]の全体的なスケーラビリティを減らすより効率的な SinglePage アロケーターの代わりに、[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]です。 方法の詳細については[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]使用メモリを参照してください[メモリ アーキテクチャ](http://go.microsoft.com/fwlink/?LinkId=143705)で[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]オンライン ブック。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, including setting the `Packet Size` to 512 in the connection string. It displays the PacketSize and <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> properties in the console window.  \n  \n [!code-vb[Classic WebData SqlConnection.PacketSize Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._63_1.vb)]\n [!code-cs[Classic WebData SqlConnection.PacketSize Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._63_1.cs)]"
  syntax:
    content: public int PacketSize { get; }
    return:
      type: System.Int32
      description: "ネットワーク パケットのサイズをバイト単位で。 既定値は 8000 です。"
  overload: System.Data.SqlClient.SqlConnection.PacketSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  id: RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  fullName: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "列暗号化キー ストア プロバイダーを登録します。"
  syntax:
    content: public static void RegisterColumnEncryptionKeyStoreProviders (System.Collections.Generic.IDictionary<string,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider> customProviders);
    parameters:
    - id: customProviders
      type: System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider}
      description: "カスタム プロバイダー"
  overload: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics
  id: ResetStatistics
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ResetStatistics()
  nameWithType: SqlConnection.ResetStatistics()
  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "統計情報の収集が有効になっている場合は、すべての値が&0; にリセットされます。"
  remarks: "統計情報の収集が有効になっていないと、このメソッドは、エラーはスローされません。"
  syntax:
    content: public void ResetStatistics ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.ResetStatistics*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics
  id: RetrieveStatistics
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: RetrieveStatistics()
  nameWithType: SqlConnection.RetrieveStatistics()
  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "メソッドが呼び出された時点の統計情報の名前、値のペア コレクションを返します。"
  remarks: "このメソッドが呼び出されると、取得した値されて現在の位置で時間。 続行する場合、接続を使用して、値が正しくありません。 最新の値を取得するメソッドを再度実行する必要があります。"
  syntax:
    content: public System.Collections.IDictionary RetrieveStatistics ();
    parameters: []
    return:
      type: System.Collections.IDictionary
      description: "型の参照を返します<xref:System.Collections.IDictionary>の<xref:System.Collections.DictionaryEntry>項目</xref:System.Collections.DictionaryEntry></xref:System.Collections.IDictionary>。"
  overload: System.Data.SqlClient.SqlConnection.RetrieveStatistics*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
  fullName: System.Data.SqlClient.SqlConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "インスタンスのバージョンを含む文字列を取得[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]クライアントが接続されています。"
  remarks: "形式は、バージョン*##. ##. ###*、ここで最初の&2; 桁はメジャー バージョン、次の&2; 桁はマイナーのバージョンであり、最後の&4; 桁の数字は、リリース バージョン。 文字列の形式は、 *major.minor.build*主な場所、ビルドが&4; 桁の数字とマイナーは正確に&2; 桁の数字です。       返されるタスクが完了しておらず<xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>。</xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>への呼び出し後、接続が開かれていない中に ServerVersion が呼び出されました"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the ServerVersion property.  \n  \n [!code-vb[Classic WebData ISqlConnection.ServerVersion Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._30_1.vb)]\n [!code-cs[Classic WebData ISqlConnection.ServerVersion Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._30_1.cs)]"
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "インスタンスのバージョン[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]します。"
  overload: System.Data.SqlClient.SqlConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。       返されるタスクが完了しておらず<xref:System.Data.SqlClient.SqlConnection.OpenAsync*>。</xref:System.Data.SqlClient.SqlConnection.OpenAsync*>への呼び出し後、接続が開かれていない中に ServerVersion が呼び出されました"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.State
  id: State
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: State
  nameWithType: SqlConnection.State
  fullName: System.Data.SqlClient.SqlConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "状態を示す、 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>接続で最新のネットワーク操作中に実行されます。"
  remarks: "の<xref:System.Data.ConnectionState>列挙が<xref:System.Data.SqlClient.SqlConnection>。</xref:System.Data.SqlClient.SqlConnection>の状態を示す</xref:System.Data.ConnectionState>を返します 閉じ、接続を再び開くには、状態の値が更新されます。"
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "<xref href=&quot;System.Data.ConnectionState&quot;> </xref>列挙します。"
  overload: System.Data.SqlClient.SqlConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  id: StatisticsEnabled
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "設定すると<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>、有効統計情報の現在の接続を収集します。"
  remarks: "統計情報の収集を有効にして、パフォーマンスに与える影響は多少、したがってを有効にする必要がある場合のみです。"
  syntax:
    content: public bool StatisticsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "返します<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>統計情報の収集が有効になっている場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>既定値です。"
  overload: System.Data.SqlClient.SqlConnection.StatisticsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: SqlConnection.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlConnection.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "現在のインスタンスのコピーである新しいオブジェクトを作成します。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.SqlClient.SqlConnection>にインスタンスをキャスト、<xref:System.ICloneable>インターフェイス</xref:System.ICloneable></xref:System.Data.SqlClient.SqlConnection>。       このメンバーは、.NET Compact Framework でのみサポートされます。"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "このインスタンスのコピーである新しいオブジェクト。"
  overload: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.WorkstationId
  id: WorkstationId
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
  fullName: System.Data.SqlClient.SqlConnection.WorkstationId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "データベース クライアントを識別する文字列を取得します。"
  remarks: "文字列には、通常、クライアントのネットワーク名が含まれています。 WorkstationId プロパティに対応して、`Workstation ID`接続文字列プロパティです。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the WorkstationId property.  \n  \n [!code-vb[Classic WebData SqlConnection.WorkstationId Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._7_1.vb)]\n [!code-cs[Classic WebData SqlConnection.WorkstationId Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._7_1.cs)]"
  syntax:
    content: public string WorkstationId { get; }
    return:
      type: System.String
      description: "データベース クライアントを識別する文字列。 指定しない場合、クライアント コンピューターの名前。 どちらも指定しない場合、値は空の文字列です。"
  overload: System.Data.SqlClient.SqlConnection.WorkstationId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Data.SqlClient.SqlConnection.#ctor
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection()
  nameWithType: SqlConnection.SqlConnection()
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection(String)
  nameWithType: SqlConnection.SqlConnection(String)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection(String,SqlCredential)
  nameWithType: SqlConnection.SqlConnection(String,SqlCredential)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String,SqlCredential)
- uid: System.Data.SqlClient.SqlCredential
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCredential
  nameWithType: SqlCredential
  fullName: System.Data.SqlClient.SqlCredential
- uid: System.Data.SqlClient.SqlConnection.AccessToken
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
  fullName: System.Data.SqlClient.SqlConnection.AccessToken
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: SqlConnection.BeginTransaction()
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(String)
  nameWithType: SqlConnection.BeginTransaction(String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(String)
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel,String)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel,String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel,String)
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: SqlConnection.ChangeDatabase(String)
  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(String)
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword(String,String)
  nameWithType: SqlConnection.ChangePassword(String,String)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,String)
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword(String,SqlCredential,SecureString)
  nameWithType: SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,SqlCredential,SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearAllPools()
  nameWithType: SqlConnection.ClearAllPools()
  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()
- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearPool(SqlConnection)
  nameWithType: SqlConnection.ClearPool(SqlConnection)
  fullName: System.Data.SqlClient.SqlConnection.ClearPool(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlConnection.Close
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Close()
  nameWithType: SqlConnection.Close()
  fullName: System.Data.SqlClient.SqlConnection.Close()
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,IList<String>>
  nameWithType: IDictionary<String,IList<String>>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Collections.Generic.IList<System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Collections.Generic.IList<System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlConnection.ConnectionString
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
  fullName: System.Data.SqlClient.SqlConnection.ConnectionString
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlConnection.CreateCommand
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: SqlConnection.CreateCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: SqlConnection.CreateDbCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.SqlClient.SqlConnection.Credential
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Credential
  nameWithType: SqlConnection.Credential
  fullName: System.Data.SqlClient.SqlConnection.Credential
- uid: System.Data.SqlClient.SqlConnection.Database
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Database
  nameWithType: SqlConnection.Database
  fullName: System.Data.SqlClient.SqlConnection.Database
- uid: System.Data.SqlClient.SqlConnection.DataSource
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DataSource
  nameWithType: SqlConnection.DataSource
  fullName: System.Data.SqlClient.SqlConnection.DataSource
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
  fullName: System.Data.SqlClient.SqlConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlConnection.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlConnection.Dispose(Boolean)
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: SqlConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(ITransaction)
- uid: System.EnterpriseServices.ITransaction
  parent: System.EnterpriseServices
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: System.EnterpriseServices.ITransaction
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: SqlConnection.EnlistTransaction(Transaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
- uid: System.Data.SqlClient.SqlConnection.GetSchema
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema()
  nameWithType: SqlConnection.GetSchema()
  fullName: System.Data.SqlClient.SqlConnection.GetSchema()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: SqlConnection.GetSchema(String)
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String)
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: SqlConnection.GetSchema(String,String[])
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlConnection.InfoMessage
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: InfoMessage
  nameWithType: SqlConnection.InfoMessage
  fullName: System.Data.SqlClient.SqlConnection.InfoMessage
- uid: System.Data.SqlClient.SqlInfoMessageEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlInfoMessageEventHandler
  nameWithType: SqlInfoMessageEventHandler
  fullName: System.Data.SqlClient.SqlInfoMessageEventHandler
- uid: System.Data.SqlClient.SqlConnection.Open
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Open()
  nameWithType: SqlConnection.Open()
  fullName: System.Data.SqlClient.SqlConnection.Open()
- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: OpenAsync(CancellationToken)
  nameWithType: SqlConnection.OpenAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlConnection.PacketSize
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
  fullName: System.Data.SqlClient.SqlConnection.PacketSize
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  fullName: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
- uid: System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,SqlColumnEncryptionKeyStoreProvider>
  nameWithType: IDictionary<String,SqlColumnEncryptionKeyStoreProvider>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider
    name: SqlColumnEncryptionKeyStoreProvider
    nameWithType: SqlColumnEncryptionKeyStoreProvider
    fullName: SqlColumnEncryptionKeyStoreProvider
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ResetStatistics()
  nameWithType: SqlConnection.ResetStatistics()
  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RetrieveStatistics()
  nameWithType: SqlConnection.RetrieveStatistics()
  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Data.SqlClient.SqlConnection.ServerVersion
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
  fullName: System.Data.SqlClient.SqlConnection.ServerVersion
- uid: System.Data.SqlClient.SqlConnection.State
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: State
  nameWithType: SqlConnection.State
  fullName: System.Data.SqlClient.SqlConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: SqlConnection.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlConnection.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlConnection.WorkstationId
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
  fullName: System.Data.SqlClient.SqlConnection.WorkstationId
- uid: System.Data.SqlClient.SqlConnection.#ctor*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection.SqlConnection
- uid: System.Data.SqlClient.SqlConnection.AccessToken*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: SqlConnection.BeginDbTransaction
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: SqlConnection.BeginTransaction
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: SqlConnection.ChangeDatabase
- uid: System.Data.SqlClient.SqlConnection.ChangePassword*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword
  nameWithType: SqlConnection.ChangePassword
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearAllPools
  nameWithType: SqlConnection.ClearAllPools
- uid: System.Data.SqlClient.SqlConnection.ClearPool*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearPool
  nameWithType: SqlConnection.ClearPool
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
- uid: System.Data.SqlClient.SqlConnection.Close*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Close
  nameWithType: SqlConnection.Close
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
- uid: System.Data.SqlClient.SqlConnection.ConnectionString*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
- uid: System.Data.SqlClient.SqlConnection.CreateCommand*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateCommand
  nameWithType: SqlConnection.CreateCommand
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: SqlConnection.CreateDbCommand
- uid: System.Data.SqlClient.SqlConnection.Credential*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Credential
  nameWithType: SqlConnection.Credential
- uid: System.Data.SqlClient.SqlConnection.Database*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Database
  nameWithType: SqlConnection.Database
- uid: System.Data.SqlClient.SqlConnection.DataSource*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DataSource
  nameWithType: SqlConnection.DataSource
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
- uid: System.Data.SqlClient.SqlConnection.Dispose*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Dispose
  nameWithType: SqlConnection.Dispose
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistDistributedTransaction
  nameWithType: SqlConnection.EnlistDistributedTransaction
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: SqlConnection.EnlistTransaction
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
- uid: System.Data.SqlClient.SqlConnection.GetSchema*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema
  nameWithType: SqlConnection.GetSchema
- uid: System.Data.SqlClient.SqlConnection.Open*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Open
  nameWithType: SqlConnection.Open
- uid: System.Data.SqlClient.SqlConnection.OpenAsync*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: OpenAsync
  nameWithType: SqlConnection.OpenAsync
- uid: System.Data.SqlClient.SqlConnection.PacketSize*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RegisterColumnEncryptionKeyStoreProviders
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ResetStatistics
  nameWithType: SqlConnection.ResetStatistics
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RetrieveStatistics
  nameWithType: SqlConnection.RetrieveStatistics
- uid: System.Data.SqlClient.SqlConnection.ServerVersion*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
- uid: System.Data.SqlClient.SqlConnection.State*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: State
  nameWithType: SqlConnection.State
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: SqlConnection.System.ICloneable.Clone
- uid: System.Data.SqlClient.SqlConnection.WorkstationId*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
