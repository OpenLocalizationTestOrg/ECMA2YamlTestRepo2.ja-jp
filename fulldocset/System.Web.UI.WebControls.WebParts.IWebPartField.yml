### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.IWebPartField
  id: IWebPartField
  children:
  - System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  - System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  langs:
  - csharp
  name: IWebPartField
  nameWithType: IWebPartField
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField
  type: Interface
  summary: "単一のデータ フィールドを使用して&2; つのサーバー コントロールを接続するためのプロバイダー インターフェイスを定義します。"
  remarks: "このインターフェイスは、Web パーツの接続で使用するよう設計されています。 内に存在する&2; つのサーバー コントロール、Web パーツ接続において、<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンは、コンシューマーとして機能する&1; つの制御と、その他のプロバイダーとして機能するコントロール接続と共有のデータを確立します</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>。 Web パーツ接続でデータを共有するためのメカニズムは、コールバック メソッドを使用して、プロバイダーがコンシューマーに機能する、インターフェイス インスタンスです。 接続を確立するためにコンシューマーおよびプロバイダー必要があります両方動作と同じインターフェイスの種類データを共有します。 トランスフォーマーを使用して、コントロールを接続することも可能では、コンシューマーが、プロバイダーによって送信されたインターフェイスの型を認識しない場合 (、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト)、コンシューマーによって認識される型に、プロバイダーによって送信されたインターフェイスのインスタンスに変換する</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。 接続の詳細については、「<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>と[Web パーツ接続の概要](~/add/includes/ajax-current-ext-md.md)。</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       IWebPartField インターフェイスは、Web パーツ コントロールのデータ フィールドに基づく接続を作成するための標準インターフェイスとしてセットに含まれているプロバイダー インターフェイスです。 Web パーツの接続で使用するカスタムのインターフェイスを作成することもできますが、多くのデータ ドリブンの Web アプリケーション、共通の行に基づいて接続を作成すると便利です (詳細については、次を参照してください、<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>インターフェイス)、テーブル (詳細については、次を参照してください。、<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>インターフェイス)、または IWebPartField インターフェイスを使用して、データ ソースからフィールド。</xref:System.Web.UI.WebControls.WebParts.IWebPartTable> </xref:System.Web.UI.WebControls.WebParts.IWebPartRow> 。 一般的な接続で、<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーは IWebPartField インターフェイスを実装し、特別なコールバック メソッドのコンシューマーにインターフェイスのインスタンスを提供するように動作するを制御します</xref:System.Web.UI.WebControls.WebParts.WebPart>。 たとえば、プロバイダーは、Web ユーザーの郵便番号データを含む、ユーザー情報テーブルのフィールドの IWebPartField インターフェイスを実装する可能性があります。 別<xref:System.Web.UI.WebControls.WebParts.WebPart>コンシューマー インターフェイス インスタンスが表示される可能性があります郵便番号データを抽出しを検索し、郵便番号に基づく天気情報を表示する特別なメソッドを定義するように動作するを制御します</xref:System.Web.UI.WebControls.WebParts.WebPart>。       IWebPartField インターフェイスには、次の&2; つの公開されているメンバーがあります。 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A>にカプセル化されたデータ フィールドに関するスキーマ情報を返します、<xref:System.ComponentModel.PropertyDescriptor>オブジェクト</xref:System.ComponentModel.PropertyDescriptor></xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A>。 <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A>メソッド (プロバイダー コントロールなど) を実装者が、コールバック メソッドが呼び出されたときに、インターフェイスのインスタンスのフィールドのデータの取得に使用するメソッドを宣言しています</xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A>。"
  example:
  - "The following code example demonstrates how to create a static connection between two controls using the IWebPartField interface. The code example has three parts:  \n  \n-   Source code for two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can form a connection using the IWebPartField interface, with one control acting as the provider, the other acting as the consumer.  \n  \n-   A Web page that hosts the controls and declares the static connection in persistence format.  \n  \n-   A description of what happens when the example code runs.  \n  \n The first part of the code example is the source code for the two custom controls. First is the code for the provider, which implements the IWebPartField interface. For simplicity in the example, the provider creates a table with some data rather than connecting to a database. The `GetConnectionInterface` method serves as the provider's connection point, the callback method that returns the interface instance to the consumer. As for the consumer, it retrieves the interface instance from the provider in its method named `SetConnectionInterface`, which is marked with a `ConnectionConsumer` attribute. After retrieving the instance of the interface, the consumer, in its `OnPreRender` method, calls the implementation of the <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> method in the provider, to retrieve the actual data.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPartField_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_353_1.cs)]\n [!code-vb[WebParts_IWebPartField_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_353_1.vb)]  \n  \n The second part of the code example is the Web page that declares the static connection and hosts the controls. Near the top of the page is a `Register` directive that declares the namespace of the source code contained in the App_Code directory. The connection is declared using an `<asp:webpartconnection>` element. The custom consumer and provider controls are declared in a `<zonetemplate>` element within an `<asp:webpartzone>` element, which is required for them to be able to connect (they must reside within a zone that inherits from the <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> class).  \n  \n [!code-cs[WebParts_IWebPartField_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_353_2.aspx)]\n [!code-vb[WebParts_IWebPartField_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_353_2.aspx)]  \n  \n Load the page in a browser. The consumer control displays the data provided from the specified field, which the provider makes available through an instance of the IWebPartField interface."
  syntax:
    content: public interface IWebPartField
  implements: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  id: GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  langs:
  - csharp
  name: GetFieldValue(FieldCallback)
  nameWithType: IWebPartField.GetFieldValue(FieldCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(FieldCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "インターフェイスによって&2; つの間の接続の基礎として使用されているフィールドの値を返します<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref>コントロール。"
  remarks: "このメソッドを使用すると、インターフェイスによって渡されるデータ フィールドの値を取得できます。"
  example:
  - "The following code example shows the implementation and use of the GetFieldValue method. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface. The provider control implements the GetFieldValue method, returning the value of a particular field in the data table. The consumer control calls the GetFieldValue method in its `OnPreRender` method, so that the value of the data can be written to the page.  \n  \n [!code-cs[WebParts_IWebPartField_Overview#2](~/add/codesnippet/csharp/c2381a5f-e812-4b8a-be4c-_1.cs)]\n [!code-vb[WebParts_IWebPartField_Overview#2](~/add/codesnippet/visualbasic/c2381a5f-e812-4b8a-be4c-_1.vb)]"
  syntax:
    content: public void GetFieldValue (System.Web.UI.WebControls.WebParts.FieldCallback callback);
    parameters:
    - id: callback
      type: System.Web.UI.WebControls.WebParts.FieldCallback
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.FieldCallback&quot;> </xref>データを受け取るメソッドのアドレスが含まれるデリゲート。"
  overload: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  id: Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  langs:
  - csharp
  name: Schema
  nameWithType: IWebPartField.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "2 つのデータを共有するために使用されるデータ フィールドのスキーマ情報を取得<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref>コントロール。"
  remarks: "このプロパティは、インターフェイスによって渡されるデータのプロパティ情報を提供します。 トランスフォーマーとコンシューマーのコントロールがコンテンツの種類に関する情報を取得するには、このプロパティのクエリを実行しに含まれているフィールドの他の詳細、<xref:System.Web.UI.WebControls.WebParts.IWebPartField>プロバイダーによって送信されたインターフェイスのインスタンス</xref:System.Web.UI.WebControls.WebParts.IWebPartField>。"
  example:
  - "The following code example shows the implementation and use of the Schema property. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface. The provider control implements the Schema property. Then, in its `GetFieldValue` method, it uses the property to retrieve the field value.  \n  \n [!code-cs[WebParts_IWebPartField_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_271_1.cs)]\n [!code-vb[WebParts_IWebPartField_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_271_1.vb)]"
  syntax:
    content: public System.ComponentModel.PropertyDescriptor Schema { get; }
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>データ フィールドのスキーマ情報を説明します。"
  overload: System.Web.UI.WebControls.WebParts.IWebPartField.Schema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: GetFieldValue(FieldCallback)
  nameWithType: IWebPartField.GetFieldValue(FieldCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(FieldCallback)
- uid: System.Web.UI.WebControls.WebParts.FieldCallback
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: FieldCallback
  nameWithType: FieldCallback
  fullName: System.Web.UI.WebControls.WebParts.FieldCallback
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: Schema
  nameWithType: IWebPartField.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue*
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: GetFieldValue
  nameWithType: IWebPartField.GetFieldValue
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.Schema*
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: Schema
  nameWithType: IWebPartField.Schema
