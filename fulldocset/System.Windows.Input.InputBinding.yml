### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.InputBinding
  id: InputBinding
  children:
  - System.Windows.Input.InputBinding.#ctor
  - System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.Command
  - System.Windows.Input.InputBinding.CommandParameter
  - System.Windows.Input.InputBinding.CommandParameterProperty
  - System.Windows.Input.InputBinding.CommandProperty
  - System.Windows.Input.InputBinding.CommandTarget
  - System.Windows.Input.InputBinding.CommandTargetProperty
  - System.Windows.Input.InputBinding.CreateInstanceCore
  - System.Windows.Input.InputBinding.Gesture
  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  langs:
  - csharp
  name: InputBinding
  nameWithType: InputBinding
  fullName: System.Windows.Input.InputBinding
  type: Class
  summary: "間のバインドを表す、 <xref href=&quot;System.Windows.Input.InputGesture&quot;> </xref>とコマンド。 コマンドは、潜在的な<xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>です。"
  remarks: "You can specify that user input invokes a command by creating a InputBinding. When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.  \n  \n You can specify that the InputBinding invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties. This enables you to define a custom command and associate it with user input. For more information, see the second example in the Examples section.  \n  \n An InputBinding can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.  \n  \n The InputBinding class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from InputBinding with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing InputBinding-derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>. The typical property in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] programming that is set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and takes one or more InputBinding objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName> property.  \n  \n<a name=\"xamlObjectElementUsage_InputBinding\"></a>   \n## XAML Object Element Usage  \n \\<*inputBindingDerivedClass…/*>  \n  \n<a name=\"xamlValues_InputBinding\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of InputBinding that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks."
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command. When the key gesture is performed, the Open command is invoked.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n The following examples show how to bind a custom command to InputBinding objects. These examples create an application that enables the user to change the background color by performing one of the following actions:  \n  \n-   Clicking a button.  \n  \n-   Pressing CTRL+C.  \n  \n-   Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).  \n  \n The first example creates a class named `SimpleDelegateCommand`. This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes. `SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command. `GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.  \n  \n [!code-cs[InputCommandBinding#DelegateCommand](~/add/codesnippet/csharp/inputcommandbinding/mainwindow.xaml.cs#delegatecommand)]\n [!code-vb[InputCommandBinding#DelegateCommand](~/add/codesnippet/visualbasic/inputcommandbinding/mainwindow.xaml.vb#delegatecommand)]  \n  \n The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`. The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties. An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.  \n  \n [!code-cs[InputCommandBinding#InitializeCommand](~/add/codesnippet/csharp/inputcommandbinding/mainwindow.xaml.cs#initializecommand)]\n [!code-vb[InputCommandBinding#InitializeCommand](~/add/codesnippet/visualbasic/inputcommandbinding/mainwindow.xaml.vb#initializecommand)]  \n  \n Finally, the following example creates the user interface. The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>. When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color. In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`. The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=fullName>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=fullName>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=fullName> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.  \n  \n [!code-xml[InputCommandBinding#UI](~/add/codesnippet/xaml/inputcommandbinding/mainwindow.xaml#ui)]"
  syntax:
    content: 'public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  implements:
  - System.Windows.Input.ICommandSource
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: InputBinding()
  nameWithType: InputBinding.InputBinding()
  fullName: System.Windows.Input.InputBinding.InputBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "派生したクラスの基本の初期化は、 <xref href=&quot;System.Windows.Input.InputBinding&quot;></xref>です。"
  remarks: "<xref:System.Windows.Input.InputBinding>技術的には、抽象クラスではありませんが、既定のコンス トラクターが意図的にはアクセスを保護します。</xref:System.Windows.Input.InputBinding> これは、作成の効果<xref:System.Windows.Input.InputBinding>「抽象」クラス[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</xref:System.Windows.Input.InputBinding>。 既存のプロパティがある[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]ある[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]型のオブジェクトを想定する使用法<xref:System.Windows.Input.InputBinding>を指定することはできませんが、<xref:System.Windows.Input.InputBinding>でインスタンス[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]</xref:System.Windows.Input.InputBinding></xref:System.Windows.Input.InputBinding>。 <xref:System.Windows.Input.InputBinding>派生クラス<xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>。</xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.KeyBinding>のインスタンスの値として</xref:System.Windows.Input.InputBinding>デバイスに固有のいずれかを指定する代わりに、"
  syntax:
    content: protected InputBinding ();
    parameters: []
  overload: System.Windows.Input.InputBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)'
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: InputBinding(ICommand,InputGesture)
  nameWithType: InputBinding.InputBinding(ICommand,InputGesture)
  fullName: System.Windows.Input.InputBinding.InputBinding(ICommand,InputGesture)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Input.InputBinding&quot;> </xref>クラスを指定したコマンドおよび入力ジェスチャを使用します。"
  remarks: "既存の入力バインディング クラスを使用して、ソフトウェア開発者は、カスタム コマンドを定義する場合でも、通常はこのコンス トラクターを使用しません。 派生クラスのコンス トラクターをするか、使用する代わりに、(<xref:System.Windows.Input.KeyBinding>と<xref:System.Windows.Input.MouseBinding>)、カスタム クラスの基本のインスタンスとして使用するこのコンス トラクターまたは</xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.KeyBinding> ただし、<xref:System.Windows.Input.InputBinding>クラスは、原則として、実際には、入力バインドを表すどのデバイスを選択する必要がありますのさまざまな入力デバイスをサポートしています</xref:System.Windows.Input.InputBinding>。 のみを設定する&1; つだけ<xref:System.Windows.Input.InputBinding.Gesture%2A>入力バインディング、およびジェスチャの値は、デバイスに固有です</xref:System.Windows.Input.InputBinding.Gesture%2A>。"
  example:
  - "The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.  \n  \n [!code-cs[commandlibrarysnippets#InputBindingAddingComand](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#inputbindingaddingcomand)]\n [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#inputbindingaddingcomand)]"
  syntax:
    content: public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "関連付けるコマンド`gesture`です。"
    - id: gesture
      type: System.Windows.Input.InputGesture
      description: "関連付ける入力ジェスチャ`command`です。"
  overload: System.Windows.Input.InputBinding.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>command</code>or <code>gesture</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  id: CloneCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CloneCore(Freezable)
  nameWithType: InputBinding.CloneCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "指定したオブジェクトのプロパティの基本 (アニメーション化されていない) 値をコピーします。"
  syntax:
    content: protected override void CloneCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "クローンを作成するオブジェクト。"
  overload: System.Windows.Input.InputBinding.CloneCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  id: CloneCurrentValueCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CloneCurrentValueCore(Freezable)
  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCurrentValueCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "指定したオブジェクトのプロパティの現在の値をコピーします。"
  syntax:
    content: protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "クローンを作成するオブジェクト。"
  overload: System.Windows.Input.InputBinding.CloneCurrentValueCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.Command
  id: Command
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: Command
  nameWithType: InputBinding.Command
  fullName: System.Windows.Input.InputBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得または設定、<xref:System.Windows.Input.ICommand>この入力バインドに関連付けられている</xref:System.Windows.Input.ICommand>。"
  remarks: "<xref:System.Windows.Input.InputBinding>クラスをサポートしません[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用状況、パブリックの既定のコンス トラクターが公開しないため (既定のコンス トラクターを持つが保護されている).</xref:System.Windows.Input.InputBinding> ただし、派生クラスのパブリック コンス トラクターを公開できます。 および<xref:System.Windows.Input.InputBinding>。</xref:System.Windows.Input.InputBinding>から継承されたプロパティがそのため、使用できます。 既存の&2; つ<xref:System.Windows.Input.InputBinding>でインスタンス化できるクラスを派生[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]プロパティを設定できる[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]の使用法が<xref:System.Windows.Input.KeyBinding><xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.KeyBinding></xref:System.Windows.Input.InputBinding>。       <xref:System.Windows.Input.ICommand>既存の特定できるようにする型コンバーターを参照して<xref:System.Windows.Input.ICommand>文字列の形式で値を指定する実装</xref:System.Windows.Input.ICommand>。</xref:System.Windows.Input.ICommand> この型変換動作は、このプロパティの属性値の形式を設定します。 コマンドをバインドすることもできます<xref:System.Windows.Input.InputBinding.CommandParameter%2A>、および<xref:System.Windows.Input.InputBinding.CommandTarget%2A>プロパティを、<xref:System.Windows.Input.ICommand>オブジェクトで定義されている。</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A> </xref:System.Windows.Input.InputBinding.CommandParameter%2A> 。 これにより、カスタム コマンドを定義し、ユーザー入力に関連付けることができます。 詳細については、 <xref:System.Windows.Input.InputBinding>。</xref:System.Windows.Input.InputBinding>&2; 番目の例を参照してください。      <a name=&quot;xamlAttributeUsage_Command&quot;></a>## XAML 属性の使用`inputBindingDerivedClass` `Command`=&quot;<xref:System.Windows.Input.ICommand>&quot;/> <a name=&quot;xamlPropertyElementUsage_Command&quot;> </a> ## XAML プロパティ要素の使用```   <inputBindingDerivedClass>     <inputBindingDerivedClass.Command>       <iCommandImplementation/>     </inputBindingDerivedClass.Command>   </inputBindingDerivedClass>   ``` <a name=&quot;xamlValues_Command&quot;> </a> ## XAML 値`inputBindingDerivedClass`<xref:System.Windows.Input.InputBinding><xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.KeyBinding>など、オブジェクト要素の構文をサポートしている</xref:System.Windows.Input.InputBinding>の派生クラス      </xref:System.Windows.Input.ICommand> 「解説」を参照してください。       `iCommandImplementation`オブジェクトの実装<xref:System.Windows.Input.ICommand>オブジェクト要素の構文をサポートしている (既定のパブリック コンス トラクターを持つ).</xref:System.Windows.Input.ICommand>"
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=fullName> command. When the key gesture is performed, the Open command is invoked.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewkeybinding)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewkeybinding)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: "関連付けられたコマンド。"
  overload: System.Windows.Input.InputBinding.Command*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "コマンドの値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandParameter
  id: CommandParameter
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
  fullName: System.Windows.Input.InputBinding.CommandParameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得または特定のコマンドのコマンドに固有のデータを設定します。"
  remarks: "CommandParameter プロパティを実行するときに、コマンドに固有の情報を渡すために使用します。 データの型は、コマンドによって定義されます。 多くのコマンドではコマンドのパラメーターが予期しません。これらのコマンドでは、渡された任意のコマンド パラメーターは無視されます。       入力バインディングが関連付けられているコマンドが、<xref:System.Windows.Input.RoutedCommand>に渡される入力バインドの CommandParameter、<xref:System.Windows.Input.RoutedCommand>を通じてハンドラー、<xref:System.Windows.Input.ExecutedRoutedEventArgs>と<xref:System.Windows.Input.CanExecuteRoutedEventArgs>コマンドが処理されるときにイベント データ</xref:System.Windows.Input.CanExecuteRoutedEventArgs></xref:System.Windows.Input.ExecutedRoutedEventArgs></xref:System.Windows.Input.RoutedCommand></xref:System.Windows.Input.RoutedCommand>。       データ型とコマンド パラメーターの目的コマンドごとに別々 に定義でき、`null`です。 バインドすることができます、 <xref:System.Windows.Input.InputBinding.Command%2A>、CommandParameter、および<xref:System.Windows.Input.InputBinding.CommandTarget%2A>プロパティを<xref:System.Windows.Input.ICommand>オブジェクトで定義されている</xref:System.Windows.Input.ICommand></xref:System.Windows.Input.InputBinding.CommandTarget%2A></xref:System.Windows.Input.InputBinding.Command%2A>。 これにより、カスタム コマンドを定義し、ユーザー入力に関連付けることができます。 詳細については、 <xref:System.Windows.Input.InputBinding>。</xref:System.Windows.Input.InputBinding>&2; 番目の例を参照してください。       <xref:System.Windows.Input.InputBinding>クラスをサポートしません[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用状況、パブリックの既定のコンス トラクターが公開しないため (既定のコンス トラクターを持つが保護されている).</xref:System.Windows.Input.InputBinding> ただし、派生クラスのパブリック コンス トラクターを公開でき、そのためから継承されたプロパティを設定できます<xref:System.Windows.Input.InputBinding>で[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用状況</xref:System.Windows.Input.InputBinding>。 既存の&2; つ<xref:System.Windows.Input.InputBinding>でインスタンス化できるクラスを派生[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]でプロパティを設定および[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]は<xref:System.Windows.Input.KeyBinding>および<xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>      <a name=&quot;xamlAttributeUsage_CommandParameter&quot;></a>## XAML 属性の使用```   <inputBindingDerivedClass CommandParameter=&quot;commandParameterString&quot;/>   ``` <a name=&quot;xamlPropertyElementUsage_CommandParameter&quot;> </a> ## XAML プロパティ要素の使用```   <inputBindingDerivedClass>     <inputBindingDerivedClass.CommandParameter>       <commandParameterObject/>     </inputBindingDerivedClass.CommandParameter>   </inputBindingDerivedClass>   ``` <a name=&quot;xamlValues_CommandParameter&quot;> </a> ## XAML 値`inputBindingDerivedClass`<xref:System.Windows.Input.InputBinding><xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.KeyBinding>など、オブジェクト要素の構文をサポートしている</xref:System.Windows.Input.InputBinding>の派生クラス             「解説」を参照してください。       `commandParameterString`特定のコマンドによって処理される文字列。 文字列は、コマンドのパラメーター簡単に設定するために使用される一般的な型[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]です。 期待される文字列の形式とその目的は、入力バインディングが関連付けられている特定のコマンドのドキュメントを参照してください。 多くのコマンドでは、パラメーターは期待できません。       `commandParameterObject`特定のコマンドによって処理されるオブジェクト。 すべての既存[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]コマンドは、文字列を使用します。 そのため、このプロパティ要素構文では、カスタム コマンド シナリオに関連するだけです。 この構文をサポートするために、`commandParameterObject`オブジェクトは、オブジェクトの要素の構文 (パブリック既定コンス トラクターがあります) もサポートする必要があります。"
  syntax:
    content: public object CommandParameter { get; set; }
    return:
      type: System.Object
      description: "コマンド固有のデータ。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Input.InputBinding.CommandParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandParameterProperty
  id: CommandParameterProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandParameterProperty
  nameWithType: InputBinding.CommandParameterProperty
  fullName: System.Windows.Input.InputBinding.CommandParameterProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別、<xref:System.Windows.Input.InputBinding.CommandParameter*>依存関係プロパティ</xref:System.Windows.Input.InputBinding.CommandParameter*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandParameterProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandProperty
  id: CommandProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandProperty
  nameWithType: InputBinding.CommandProperty
  fullName: System.Windows.Input.InputBinding.CommandProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別、<xref:System.Windows.Input.InputBinding.Command*>依存関係プロパティ</xref:System.Windows.Input.InputBinding.Command*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandTarget
  id: CommandTarget
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
  fullName: System.Windows.Input.InputBinding.CommandTarget
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得またはコマンドのターゲット要素を設定します。"
  remarks: "[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]システム、CommandTarget プロパティをコマンド実行で、<xref:System.Windows.Input.ICommandSource>オブジェクトが場合にのみ適用<xref:System.Windows.Input.ICommand><xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand>は</xref:System.Windows.Input.ICommand></xref:System.Windows.Input.ICommandSource> CommandTarget が設定されている場合、 <xref:System.Windows.Input.ICommandSource>、対応するコマンドが、 <xref:System.Windows.Input.RoutedCommand>、コマンドの対象は無視されます</xref:System.Windows.Input.RoutedCommand></xref:System.Windows.Input.ICommandSource>。       使用すると、 <xref:System.Windows.Input.RoutedCommand>、コマンドの対象が対象となるオブジェクト、<xref:System.Windows.Input.CommandManager.Executed>と<xref:System.Windows.Input.CommandManager.CanExecute>イベントが発生します</xref:System.Windows.Input.CommandManager.CanExecute></xref:System.Windows.Input.CommandManager.Executed></xref:System.Windows.Input.RoutedCommand>。 CommandTarget プロパティが設定されていない場合は、キーボード フォーカスを持つ要素がターゲットとして使用されます。       <xref:System.Windows.Input.InputBinding>クラス自体はサポートしません[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用法、既定のパブリック コンス トラクターが公開しないため (既定のコンス トラクターがあるが、保護されている).</xref:System.Windows.Input.InputBinding> ただし、派生クラスは、パブリック コンス トラクターを公開でき、したがってから継承されたプロパティを設定できます<xref:System.Windows.Input.InputBinding>で、[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]使用状況</xref:System.Windows.Input.InputBinding>。 既存の&2; つ<xref:System.Windows.Input.InputBinding>でインスタンス化できるクラスを派生[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]でプロパティを設定および[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]は<xref:System.Windows.Input.KeyBinding>および<xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>      <a name=&quot;xamlAttributeUsage_CommandTarget&quot;></a>## XAML 属性の使用```   <inputBindingDerivedClass CommandTarget=&quot;bindingToTarget&quot;/>   ``` <a name=&quot;xamlValues_CommandTarget&quot;> </a> ## XAML 値`inputBindingDerivedClass`<xref:System.Windows.Input.InputBinding><xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding></xref:System.Windows.Input.KeyBinding>など、オブジェクト要素の構文をサポートしている</xref:System.Windows.Input.InputBinding>の派生クラス       「解説」を参照してください。       `bindingToTarget`要素の名前付きを既存のオブジェクト参照を返すことができるバインド構文の型を使用する文字列。 「解説」を参照してください。"
  syntax:
    content: public System.Windows.IInputElement CommandTarget { get; set; }
    return:
      type: System.Windows.IInputElement
      description: "コマンドのターゲットです。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Input.InputBinding.CommandTarget*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandTargetProperty
  id: CommandTargetProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandTargetProperty
  nameWithType: InputBinding.CommandTargetProperty
  fullName: System.Windows.Input.InputBinding.CommandTargetProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "識別、<xref:System.Windows.Input.InputBinding.CommandTarget*>依存関係プロパティ</xref:System.Windows.Input.InputBinding.CommandTarget*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandTargetProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: InputBinding.CreateInstanceCore()
  fullName: System.Windows.Input.InputBinding.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "インスタンスを作成、 <xref href=&quot;System.Windows.Input.InputBinding&quot;></xref>です。"
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "新しいオブジェクト。"
  overload: System.Windows.Input.InputBinding.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.Gesture
  id: Gesture
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: Gesture
  nameWithType: InputBinding.Gesture
  fullName: System.Windows.Input.InputBinding.Gesture
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取得または設定、 <xref href=&quot;System.Windows.Input.InputGesture&quot;> </xref>この入力バインドに関連付けられています。"
  remarks: "The input gesture is the action that invokes the command. Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>. A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>. A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.  \n  \n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \n  \n<a name=\"xamlAttributeUsage_gesture\"></a>   \n## XAML Attribute Usage  \n <<xref:System.Windows.Input.KeyBinding> `Gesture`=\"<xref:System.Windows.Input.KeyGesture>\"/>  \n  \n \\- or -  \n  \n <<xref:System.Windows.Input.MouseBinding> `Gesture`=\"<xref:System.Windows.Input.MouseGesture>\"/>  \n  \n \\- or -  \n  \n <`inputBindingDerivedClass` `Gesture`=\"<xref:System.Windows.Input.InputGesture>\"/>  \n  \n<a name=\"xamlPropertyElementUsage_gesture\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<inputBindingDerivedClass>  \n  <inputBindingDerivedClass.Gesture>  \n    <inputGestureImplementation/>  \n  </inputBindingDerivedClass.Gesture>  \n</inputBindingDerivedClass>  \n```  \n  \n<a name=\"xamlValues_gesture\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \n  \n `inputGestureImplementation`  \n A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax."
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>. When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.  \n  \n [!code-xml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/add/codesnippet/xaml/CommandLibarySnippets/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public virtual System.Windows.Input.InputGesture Gesture { get; set; }
    return:
      type: System.Windows.Input.InputGesture
      description: "関連付けられているジェスチャ。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Input.InputBinding.Gesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  id: GetAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: GetAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetAsFrozenCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "インスタンスの指定された固定された複製は、 <xref href=&quot;System.Windows.Freezable&quot;> </xref>基本 (アニメーション化されていない) プロパティの値を使用しています。"
  syntax:
    content: protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "クローンを作成するオブジェクト。"
  overload: System.Windows.Input.InputBinding.GetAsFrozenCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  id: GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: GetCurrentValueAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "現在のインスタンスの指定された固定された複製は、 <xref href=&quot;System.Windows.Freezable&quot;></xref>です。 オブジェクトは、アニメーション化された依存関係プロパティを持っている場合は、その現在のアニメーション化された値がコピーされます。"
  syntax:
    content: protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "クローンを作成するオブジェクト。"
  overload: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Freezable
  isExternal: false
  name: System.Windows.Freezable
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.InputBinding.#ctor
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding()
  nameWithType: InputBinding.InputBinding()
  fullName: System.Windows.Input.InputBinding.InputBinding()
- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding(ICommand,InputGesture)
  nameWithType: InputBinding.InputBinding(ICommand,InputGesture)
  fullName: System.Windows.Input.InputBinding.InputBinding(ICommand,InputGesture)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.InputGesture
  parent: System.Windows.Input
  isExternal: false
  name: InputGesture
  nameWithType: InputGesture
  fullName: System.Windows.Input.InputGesture
- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCore(Freezable)
  nameWithType: InputBinding.CloneCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCore(Freezable)
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCurrentValueCore(Freezable)
  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCurrentValueCore(Freezable)
- uid: System.Windows.Input.InputBinding.Command
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Command
  nameWithType: InputBinding.Command
  fullName: System.Windows.Input.InputBinding.Command
- uid: System.Windows.Input.InputBinding.CommandParameter
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
  fullName: System.Windows.Input.InputBinding.CommandParameter
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputBinding.CommandParameterProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameterProperty
  nameWithType: InputBinding.CommandParameterProperty
  fullName: System.Windows.Input.InputBinding.CommandParameterProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.InputBinding.CommandProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandProperty
  nameWithType: InputBinding.CommandProperty
  fullName: System.Windows.Input.InputBinding.CommandProperty
- uid: System.Windows.Input.InputBinding.CommandTarget
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
  fullName: System.Windows.Input.InputBinding.CommandTarget
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.InputBinding.CommandTargetProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTargetProperty
  nameWithType: InputBinding.CommandTargetProperty
  fullName: System.Windows.Input.InputBinding.CommandTargetProperty
- uid: System.Windows.Input.InputBinding.CreateInstanceCore
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: InputBinding.CreateInstanceCore()
  fullName: System.Windows.Input.InputBinding.CreateInstanceCore()
- uid: System.Windows.Input.InputBinding.Gesture
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Gesture
  nameWithType: InputBinding.Gesture
  fullName: System.Windows.Input.InputBinding.Gesture
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetAsFrozenCore(Freezable)
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetCurrentValueAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(Freezable)
- uid: System.Windows.Input.InputBinding.#ctor*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding
  nameWithType: InputBinding.InputBinding
- uid: System.Windows.Input.InputBinding.CloneCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCore
  nameWithType: InputBinding.CloneCore
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCurrentValueCore
  nameWithType: InputBinding.CloneCurrentValueCore
- uid: System.Windows.Input.InputBinding.Command*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Command
  nameWithType: InputBinding.Command
- uid: System.Windows.Input.InputBinding.CommandParameter*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
- uid: System.Windows.Input.InputBinding.CommandTarget*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
- uid: System.Windows.Input.InputBinding.CreateInstanceCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CreateInstanceCore
  nameWithType: InputBinding.CreateInstanceCore
- uid: System.Windows.Input.InputBinding.Gesture*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Gesture
  nameWithType: InputBinding.Gesture
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetAsFrozenCore
  nameWithType: InputBinding.GetAsFrozenCore
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetCurrentValueAsFrozenCore
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore
