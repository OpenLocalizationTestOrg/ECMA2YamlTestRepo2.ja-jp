### YamlMime:ManagedReference
items:
- uid: System.Security.SecureString
  id: SecureString
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
  type: Class
  summary: "必要があります機密を保持するように不要になったときに、コンピューターのメモリから削除してテキストを表します。 このクラスは継承できません。"
  remarks: "SecureString は、セキュリティ上の理由を提供する文字列型です。 プレーン テキストとしてのプロセス メモリに機密性の高い文字列を格納しないようにしようとします。  (制限については、ただしを参照してください、[安全な方法は、SecureString?](#HowSecure)セクションです)。インスタンスを初期化する場合は、基になるプラットフォームでサポートされているメカニズムを使用して SecureString のインスタンスの値が自動的に保護または値が変更された日時。 アプリケーションがインスタンスを変更できないレンダリングし、呼び出すことによってさらに変更を禁止する、<xref:System.Security.SecureString.MakeReadOnly%2A>メソッド</xref:System.Security.SecureString.MakeReadOnly%2A>。       SecureString インスタンスの最大長は、65,536 文字です。      > [!IMPORTANT] > この型は、<xref:System.IDisposable>インターフェイス</xref:System.IDisposable>。 型のインスタンスを使用してが完了したら、直接的または間接的にそれを破棄する必要があります。 型の直接 dispose を呼び出す、<xref:System.IDisposable.Dispose%2A>メソッドで、 `try` / `catch`ブロック</xref:System.IDisposable.Dispose%2A>。 直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(C# の場合) または`Using`(Visual Basic で)。 詳細についてを参照してください&quot;を使用して、オブジェクトを実装する IDisposable&quot;、<xref:System.IDisposable>インターフェイスに関するトピック</xref:System.IDisposable>。       SecureString クラスとそのメンバーが COM に表示されません。 詳細については、 <xref:System.Runtime.InteropServices.ComVisibleAttribute>。</xref:System.Runtime.InteropServices.ComVisibleAttribute>を参照してください。       このセクションの内容: [vs の文字列します。SecureString](#vsString)[SecureString operations](#Ops)[SecureString 相互運用機能および](#interop)[安全な方法は、SecureString しますか?               ](#HowSecure)      <a name=&quot;vsString&quot;></a>## 文字列と SecureString のインスタンス、<xref:System.String?displayProperty=fullName>クラスは変更不可であり、不要になったときにガベージ コレクションのプログラムでスケジュールできませんつまり、インスタンスは読み取り専用で、作成されると、コンピューターのメモリから、インスタンスを削除する場合を予測することはできません。</xref:System.String?displayProperty=fullName> 。 <xref:System.String?displayProperty=fullName>インスタンスは変更可能な場合を既存のインスタンスを変更する表示される操作が実際に操作するためのコピーを作成します</xref:System.String?displayProperty=fullName>。 したがって場合、<xref:System.String>オブジェクトには、パスワード、クレジット_カード番号、または個人データなどの機密情報が含まれています、アプリケーションがコンピューターのメモリからデータを削除できないために、使用後に、情報が盗まれるリスクが生じます</xref:System.String>。       SecureString オブジェクトがに似ていますが、<xref:System.String>オブジェクトのテキスト値があることにします</xref:System.String>。 ただし、オブジェクトがメモリにピン留めされた SecureString の値可能性がありますを使用して保護メカニズム、まで、基になるオペレーティング システムによって提供される、暗号化を変更できるよう、アプリケーションで読み取り専用とマーク コンピューターのメモリから削除することができますか、アプリケーションの呼び出すことによって、<xref:System.Security.SecureString.Dispose%2A>メソッドまたは .NET Framework ガベージ コレクターによって</xref:System.Security.SecureString.Dispose%2A>。       SecureString クラスの制限事項の詳細については、次を参照してください。、[安全な方法は、SecureString?](#HowSecure)セクションです。       [ページのトップへ](#top)<a name=&quot;Ops&quot;> </a> ## SecureString 操作、SecureString クラスには、次を実行するメンバーが含まれています。、パラメーターなしのコンス トラクターを呼び出すことによって SecureString オブジェクトをインスタンス化する SecureString オブジェクトをインスタンス化します。             SecureString オブジェクトを呼び出すことにより、一度に&1; つの文字を追加できます SecureString を文字のオブジェクトを追加、<xref:System.Security.SecureString.AppendChar%2A>または<xref:System.Security.SecureString.InsertAt%2A>メソッド</xref:System.Security.SecureString.InsertAt%2A></xref:System.Security.SecureString.AppendChar%2A>。      > [!IMPORTANT] ><xref:System.String>機密データが変更できない<xref:System.String>クラス</xref:System.String>のメモリの永続化の結果に既にされるため</xref:System.String>から A SecureString オブジェクトを作成する必要がありますしません。 最善の方法は SecureString オブジェクトを構築するためには時間での文字の管理されていないソースからなど、<xref:System.Console.ReadKey%2A?displayProperty=fullName>メソッド</xref:System.Console.ReadKey%2A?displayProperty=fullName>。       SecureString から文字を削除するオブジェクトを呼び出して個々 の文字を置き換えることができます、<xref:System.Security.SecureString.SetAt%2A>メソッドを呼び出して個々 の文字を削除、<xref:System.Security.SecureString.RemoveAt%2A>メソッド、または削除を呼び出して、SecureString からすべての文字のインスタンス、<xref:System.Security.SecureString.Clear%2A>メソッド</xref:System.Security.SecureString.Clear%2A></xref:System.Security.SecureString.RemoveAt%2A></xref:System.Security.SecureString.SetAt%2A>。       SecureString オブジェクトを読み取り専用呼び出す SecureString オブジェクトを表す文字列を定義すると、その<xref:System.Security.SecureString.MakeReadOnly%2A>を読み取り専用文字列を作成するメソッド</xref:System.Security.SecureString.MakeReadOnly%2A>。       SecureString オブジェクト、SecureString クラスに関する情報を取得しますが、文字列についての情報を提供する&2; つだけのメンバー: その<xref:System.Security.SecureString.Length%2A>を文字列にコードの UTF16 エンコード ユニットの数を示すプロパティおよび<xref:System.Security.SecureString.IsReadOnly%2A>、メソッドのインスタンスは読み取り専用であるかどうかを示します</xref:System.Security.SecureString.IsReadOnly%2A></xref:System.Security.SecureString.Length%2A>。       SecureString を実装して SecureString インスタンスに割り当てられたメモリを解放、<xref:System.IDisposable>インターフェイスを呼び出すことによって、メモリを解放する、<xref:System.Security.SecureString.Dispose%2A>メソッド</xref:System.Security.SecureString.Dispose%2A></xref:System.IDisposable>。       SecureString クラスには、検査、比較、または SecureString の値を変換するメンバーがありません。 このようなメンバーが存在しない場合は、誤ってまたは悪意のある露出からのインスタンスの値を保護するのに役立ちます。 適切なメンバーを使用して、<xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>クラスなど、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>SecureString オブジェクトの値を操作するメソッド</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A></xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>。       .NET Framework クラス ライブラリは次の方法でよく使われる SecureString インスタンス:: を使用して、プロセスにパスワード情報を提供する、<xref:System.Diagnostics.ProcessStartInfo>構造体またはのオーバー ロードを呼び出すことによって、 <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName>SecureString 型のパラメーターを持つメソッドです</xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName></xref:System.Diagnostics.ProcessStartInfo>。      情報を提供するネットワーク パスワードを呼び出して、<xref:System.Net.NetworkCredential>またはを使用して SecureString 型のパラメーターを持つクラスのコンス トラクター、<xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName>プロパティ</xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName></xref:System.Net.NetworkCredential>。      呼び出すことによって SQL Server 認証のパスワード情報を提供する、<xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>コンス トラクターまたはの値を取得、<xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName>プロパティ</xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName></xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>。      -にアンマネージ コードに文字列を渡します。 詳細については、次を参照してください。、 [SecureString 相互運用機能および](#interop)セクションです。       [ページのトップへ](#top)<a name=&quot;interop&quot;> </a> ## SecureString interop のオペレーティング システムが SecureString を直接サポートしていないため、変換してする必要があります SecureString オブジェクトの値、必須の文字列型にネイティブ メソッドに文字列を渡す前にします。        <xref:System.Runtime.InteropServices.Marshal>クラスにはこれを実行する&5; つの方法:- <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>COM によって認識されるバイナリ文字列 (BSTR) に SecureString 文字列値を変換する、</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal>      -<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>と<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>、SecureString 文字列値をアンマネージ メモリ内の ANSI 文字列をコピーします</xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>。      -<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>と<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>、SecureString 文字列値をアンマネージ メモリ内の Unicode 文字列にコピーする</xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>。       これらの各メソッドは、アンマネージ メモリにクリア テキスト文字列を作成します。 ゼロにして、不要になったとすぐにそのメモリを解放する開発者の責任においてすることをお勧めします。 文字列変換とメモリの割り当て方法のそれぞれをゼロに割り当てられたメモリを解放して対応するメソッドを持ちます |。割り当てと変換のメソッド |0 し、free メソッド |  |--------------------------------------|--------------------------|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|      [Back to top](#top)      <a name=&quot;HowSecure&quot;></a>    ## How secure is SecureString?</xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>    SecureString インスタンス<xref:System.String>。</xref:System.String>よりも多くのデータ保護は、適切に作成されたとき 時間での文字のソースから文字列を作成するときに<xref:System.String>SecureString を&1; つのインスタンスを作成、メモリ上で複数の中間を作成します</xref:System.String>。  ガベージ コレクション<xref:System.String>オブジェクトは、非確定的です</xref:System.String>。 さらに、そのメモリが固定されていないため、ガベージ コレクターは追加のコピーを作成<xref:System.String>値の移動やメモリを圧縮することにします</xref:System.String>。 これに対し、SecureString オブジェクトに割り当てられたメモリが固定され、そのメモリを呼び出すことによって解放されることができます、<xref:System.Security.SecureString.Dispose%2A>メソッド</xref:System.Security.SecureString.Dispose%2A>。       <xref:System.String>インスタンスの安全な方法は SecureString インスタンスままに関する重要な制限事項がある</xref:System.String>格納されているデータよりセキュリティが SecureString インスタンスに格納されたデータが詳細 含まれます: プラットフォームに Windows オペレーティング システム、SecureString インスタンスの内部文字配列の内容が暗号化されます。 ただし、Api またはキーの管理に関する問題がありません、ためかどうか暗号化はいないすべてのプラットフォームで利用可能です。 このため、SecureString はデスクトップ (Windows のみ)、および .NET Core ではなく利用できます。       SecureString 実装が SecureString のインスタンスは、さまざまなタイミングで公開される可能性がありますに割り当てられているプレーン テキストの暗号化を利用できる場合でも、継続時間: - Windows は、オペレーティング システム レベルでは引き続き .NET Framework のセキュリティで保護された文字列の実装がそれを使用するために、セキュリティで保護された文字列値をプレーン テキスト形式に変換するが提供していないためです。      -されるたびにセキュリティで保護された文字列の値は、メソッドによって変更など<xref:System.Security.SecureString.AppendChar%2A>または<xref:System.Security.SecureString.RemoveAt%2A>、復号化する必要があります (つまり、変換されたバック プレーン テキストに)、変更され、再度暗号化します</xref:System.Security.SecureString.RemoveAt%2A></xref:System.Security.SecureString.AppendChar%2A>。      相互運用の呼び出しで、セキュリティで保護された文字列を使用する場合は、ANSI 文字列、Unicode 文字列またはバイナリ文字列 (BSTR) に変換する必要があります。 詳細については、次を参照してください。、 [SecureString 相互運用機能および](#interop)セクションです。       SecureString インスタンスの値を公開する時間間隔は、<xref:System.String>クラス</xref:System.String>と比較すると短くだけを実行       記憶域使用率と SecureString クラスより一般的に保護されているまたは秘密にする必要がある文字列値を格納するメカニズムを定義します。 ただし、.NET Framework 自体の外部で使用状況のメカニズムがサポートされません SecureString。 つまり、セキュリティで保護された文字列をそのターゲットが認識できる使用可能な形式 (通常はクリア テキスト形式) に変換する必要があります、復号化し、変換は、ユーザー領域で行う必要があります。       SecureString がより安全性が全体的に見て、 <xref:System.String>、区別する文字列データの公開を制限するためです</xref:System.String>。 ただし、それらの文字列は、プロセスやホスト コンピューター、プロセス ダンプ、またはユーザー表示可能なスワップ ファイルで実行されている悪意のあるプロセスなどの生のメモリへのアクセス権がある操作も公開可能性があります。 SecureString を使用して、パスワードを保護するの代わりに、推奨される代替を開始、プロセスの外部で格納されている資格情報を不透明なハンドルを使用します。       [ページのトップへ](#top)"
  example:
  - "The following example demonstrates how to use a SecureString to secure a user’s password for use as a credential to start a new process.  \n  \n [!code-vb[System.Security.SecureString.Ctor#4](~/add/codesnippet/visualbasic/t-system.security.secure_1.vb)]\n [!code-cs[System.Security.SecureString.Ctor#4](~/add/codesnippet/csharp/t-system.security.secure_1.cs)]"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.SecureString&quot;> </xref>クラスです。"
  remarks: ''
  example:
  - "The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object. It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.  \n  \n [!code-cs[System.Security.SecureString.Ctor#2](~/add/codesnippet/csharp/m-system.security.secure_7_1.cs)]\n [!code-cpp[System.Security.SecureString.Ctor#2](~/add/codesnippet/cpp/m-system.security.secure_7_1.cpp)]\n [!code-vb[System.Security.SecureString.Ctor#2](~/add/codesnippet/visualbasic/m-system.security.secure_7_1.vb)]  \n  \n The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.  \n  \n [!code-vb[System.Security.SecureString.Ctor#3](~/add/codesnippet/visualbasic/m-system.security.secure_7_2.vb)]\n [!code-cpp[System.Security.SecureString.Ctor#3](~/add/codesnippet/cpp/m-system.security.secure_7_2.cpp)]\n [!code-cs[System.Security.SecureString.Ctor#3](~/add/codesnippet/csharp/m-system.security.secure_7_2.cs)]"
  syntax:
    content: public SecureString ();
    parameters: []
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護またはこのインスタンスの値を復号化中にエラーが発生しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "この操作はこのプラットフォームでサポートされていません。"
  platform:
  - net462
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.SecureString&quot;> </xref>のサブ配列からクラス&lt;xref:System.Char?displayProperty=fullName&gt;オブジェクト。       このコンス トラクターは CLS 準拠ではありません。 CLS 準拠の代替手段は&lt;xref:System.Security.SecureString.%23ctor?displayProperty=fullName&gt;です。"
  remarks: "このコンス トラクターを新しい初期化<xref:System.Security.SecureString>オブジェクト内の文字の数を`value`によって指定された`length`; のインスタンスの値は暗号化されます</xref:System.Security.SecureString>。       C# の場合、このコンス トラクターはアンセーフ コードのコンテキストでのみ定義されます。"
  example:
  - "The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.  \n  \n [!code-cpp[System.Security.SecureString.Ctor2#1](~/add/codesnippet/cpp/m-system.security.secure_3_1.cpp)]\n [!code-cs[System.Security.SecureString.Ctor2#1](~/add/codesnippet/csharp/securestringctor/ctor1.cs#1)]"
  syntax:
    content: public SecureString (char* value, int length);
    parameters:
    - id: value
      type: System.Char*
      description: "配列へのポインター &lt;xref:System.Char?displayProperty=fullName&gt;オブジェクト。"
    - id: length
      type: System.Int32
      description: "要素の数`value`新しいインスタンスに含める。"
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length</code>0 以上、65,536 未満です。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "この操作はこのプラットフォームでサポートされていません。"
  platform:
  - net462
- uid: System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のセキュリティで保護された文字列の末尾に文字を追加します。"
  remarks: "場合は、このセキュリティ文字列の値が保護; されていない場合は、実装は、暗号化などの保護メカニズムを使用`c`が追加されます。 セキュリティで保護された文字列の新しい値は再保護します。"
  example:
  - "The following example demonstrates how the AppendChar, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_6_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_6_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_1.vb)]  \n  \n The following example demonstrates how the AppendChar and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_6_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_6_2.cs)]"
  syntax:
    content: public void AppendChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "このセキュリティ文字列に追加する文字。"
  overload: System.Security.SecureString.AppendChar*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このセキュリティで保護された文字列は既に破棄されています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このセキュリティで保護された文字列とは、読み取り専用です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "この操作を実行すると、このセキュリティ文字列の長さは 65,536 文字を超えています。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。"
  platform:
  - net462
- uid: System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のセキュリティで保護された文字列の値を削除します。"
  remarks: "このセキュリティ文字列の値を含むコンピューターのメモリをゼロに設定し、このセキュリティ文字列の値の長さは&0; に設定します。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and Clear methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_5_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_5_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_5_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.SecureString.Clear*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このセキュリティで保護された文字列は既に破棄されています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このセキュリティで保護された文字列とは、読み取り専用です。"
  platform:
  - net462
- uid: System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のセキュリティで保護された文字列のコピーを作成します。"
  remarks: "インスタンスの場合、<xref:System.Security.SecureString>は読み取り専用に設定されると、そのインスタンスのコピーができない読み取り専用です</xref:System.Security.SecureString>。"
  syntax:
    content: public System.Security.SecureString Copy ();
    parameters: []
    return:
      type: System.Security.SecureString
      description: "このセキュリティ文字列の複製。"
  overload: System.Security.SecureString.Copy*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このセキュリティで保護された文字列は既に破棄されています。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。"
  platform:
  - net462
- uid: System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在の使用されているすべてのリソースを解放<xref href=&quot;System.Security.SecureString&quot;></xref>オブジェクト。"
  remarks: "Dispose メソッドは、この値を含む割り当てられたメモリへのバイナリのゼロを書き込みます<xref:System.Security.SecureString>オブジェクト、し、割り当てられたメモリを解放します</xref:System.Security.SecureString>。       詳細については、次を参照してください。[ガベージ コレクション](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecureString.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "指定したインデックス位置にあるこのセキュリティ文字列に文字を挿入します。"
  remarks: "インデックスが&0; から始まります。このセキュリティ文字列の最初の文字は、インデックス位置&0; です。       存在する場合は、セキュリティで保護された文字列の値が保護されてはいない実装では、暗号化などの保護メカニズムを使用している場合`c` ; 指定したインデックス位置に挿入は、新しい値は再保護します。 InsertAt メソッドと同じ結果が得られます、<xref:System.Security.SecureString.AppendChar%2A>場合、セキュリティで保護された文字列の末尾に文字を挿入するメソッド、 `index` InsertAt のパラメーターがこのインスタンスの長さに設定します</xref:System.Security.SecureString.AppendChar%2A>。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, InsertAt, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_0_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_0_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_0_1.vb)]"
  syntax:
    content: public void InsertAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "インデックス位置パラメーター`c`を挿入します。"
    - id: c
      type: System.Char
      description: "挿入する文字。"
  overload: System.Security.SecureString.InsertAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このセキュリティで保護された文字列は既に破棄されています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このセキュリティで保護された文字列とは、読み取り専用です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 の場合、このセキュリティ文字列の長さより大きいか未満です。       または、この操作を実行すると、このセキュリティ文字列の長さ 65,536 文字より長くします。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。"
  platform:
  - net462
- uid: System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "このセキュリティ文字列が読み取り専用にマークされているかどうかを示します。"
  remarks: "インスタンスの<xref:System.Security.SecureString><xref:System.Security.SecureString.MakeReadOnly%2A><xref:System.InvalidOperationException>。</xref:System.InvalidOperationException>インスタンス スローの値を変更しようとすると、メソッド</xref:System.Security.SecureString.MakeReadOnly%2A>で読み取り専用にマーク</xref:System.Security.SecureString>の後に IsReadOnly メソッドを使用して<xref:System.Security.SecureString>がそれを変更しようとする前に読み取り専用</xref:System.Security.SecureString>かどうかをテストするには"
  syntax:
    content: public bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このセキュリティ文字列が読み取り専用にマークされている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.SecureString.IsReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このセキュリティで保護された文字列は既に破棄されています。"
  platform:
  - net462
- uid: System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のセキュリティで保護された文字列内の文字数を取得します。"
  remarks: "Length プロパティの数を返します<xref:System.Char>オブジェクトがこのインスタンスで、Unicode 文字の数値ではありません</xref:System.Char>。 1 つ以上の Unicode 文字を表す<xref:System.Char>オブジェクト</xref:System.Char>。       最大長、<xref:System.Security.SecureString>インスタンスは、65,536 文字</xref:System.Security.SecureString>。"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "数&lt;xref:System.Char?displayProperty=fullName&gt;このオブジェクトは、文字列をセキュリティで保護します。"
  overload: System.Security.SecureString.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このセキュリティで保護された文字列は既に破棄されています。"
  platform:
  - net462
- uid: System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "このセキュリティ文字列のテキスト値を読み取り専用です。"
  remarks: "インスタンスのテキスト値を初期化、<xref:System.Security.SecureString>クラス、<xref:System.Security.SecureString.%23ctor%2A>コンス トラクター、および使用の値を変更、 <xref:System.Security.SecureString.Clear%2A>、 <xref:System.Security.SecureString.RemoveAt%2A>、 <xref:System.Security.SecureString.SetAt%2A>、 <xref:System.Security.SecureString.InsertAt%2A>、および<xref:System.Security.SecureString.AppendChar%2A>メソッド</xref:System.Security.SecureString.AppendChar%2A></xref:System.Security.SecureString.InsertAt%2A></xref:System.Security.SecureString.SetAt%2A></xref:System.Security.SecureString.RemoveAt%2A></xref:System.Security.SecureString.Clear%2A></xref:System.Security.SecureString.%23ctor%2A></xref:System.Security.SecureString>。       最終的な変更を行った後は、MakeReadOnly メソッドを使用して、インスタンスの値を変更できないようにする (読み取り専用)。 さらに変更をしようとするとスロー <xref:System.InvalidOperationException>。</xref:System.InvalidOperationException>で値は、読み取り専用としてマークされていた後が、       MakeReadOnly の呼び出しの結果は永続的なため、<xref:System.Security.SecureString>を再度変更可能にするには、セキュリティで保護された文字列クラスの手段がありません</xref:System.Security.SecureString>。 使用して、<xref:System.Security.SecureString.IsReadOnly%2A>のインスタンスかどうかをテストするメソッド<xref:System.Security.SecureString>は読み取り専用です</xref:System.Security.SecureString></xref:System.Security.SecureString.IsReadOnly%2A>。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_1_1.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_1_1.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_1_1.cs)]"
  syntax:
    content: public void MakeReadOnly ();
    parameters: []
  overload: System.Security.SecureString.MakeReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このセキュリティで保護された文字列は既に破棄されています。"
  platform:
  - net462
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "このセキュリティで保護された文字列から指定したインデックス位置にある文字を削除します。"
  remarks: "インデックスが&0; から始まります。このインスタンスの最初の文字は、インデックス位置&0; です。       場合は、このセキュリティ文字列の値が保護; されていない場合は、実装は、暗号化などの保護メカニズムを使用指定したインデックス位置にある文字が削除されます。新しい値を再保護します。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, RemoveAt, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_2_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_2_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_1.vb)]  \n  \n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and RemoveAt methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_2_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_2_2.cs)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "このセキュリティ文字列の文字のインデックス位置。"
  overload: System.Security.SecureString.RemoveAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このセキュリティで保護された文字列は既に破棄されています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このセキュリティで保護された文字列とは、読み取り専用です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0、またはより大きいかこのセキュリティ文字列の長さと等しいです。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。"
  platform:
  - net462
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "指定したインデックス位置にある既存の文字を別の文字に置き換えます。"
  remarks: "インデックスが&0; から始まります。このインスタンスの最初の文字は、インデックス位置&0; です。       存在する場合は、セキュリティで保護された文字列の値が保護されてはいない実装では、暗号化などの保護メカニズムを使用している場合`c` ; 指定したインデックス位置に割り当てられている、新しい値は再保護します。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, SetAt, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_4_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_4_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_4_1.vb)]"
  syntax:
    content: public void SetAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "このセキュリティで保護された文字列で、既存の文字インデックスの位置"
    - id: c
      type: System.Char
      description: "既存の文字を置換する文字。"
  overload: System.Security.SecureString.SetAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "このセキュリティで保護された文字列は既に破棄されています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このセキュリティで保護された文字列とは、読み取り専用です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0、またはより大きいかこのセキュリティ文字列の長さと等しいです。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保護したり、このセキュリティ文字列の値を復号化中にエラーが発生しました。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecureString.#ctor
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.SecureString.AppendChar(System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Security.SecureString.Clear
  parent: System.Security.SecureString
  isExternal: false
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
- uid: System.Security.SecureString.Copy
  parent: System.Security.SecureString
  isExternal: false
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.SecureString.Dispose
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
- uid: System.Security.SecureString.IsReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecureString.Length
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
- uid: System.Security.SecureString.#ctor*
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString
  nameWithType: SecureString.SecureString
- uid: System.Security.SecureString.AppendChar*
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar
  nameWithType: SecureString.AppendChar
- uid: System.Security.SecureString.Clear*
  parent: System.Security.SecureString
  isExternal: false
  name: Clear
  nameWithType: SecureString.Clear
- uid: System.Security.SecureString.Copy*
  parent: System.Security.SecureString
  isExternal: false
  name: Copy
  nameWithType: SecureString.Copy
- uid: System.Security.SecureString.Dispose*
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose
  nameWithType: SecureString.Dispose
- uid: System.Security.SecureString.InsertAt*
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt
  nameWithType: SecureString.InsertAt
- uid: System.Security.SecureString.IsReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly
  nameWithType: SecureString.IsReadOnly
- uid: System.Security.SecureString.Length*
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly
  nameWithType: SecureString.MakeReadOnly
- uid: System.Security.SecureString.RemoveAt*
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt
  nameWithType: SecureString.RemoveAt
- uid: System.Security.SecureString.SetAt*
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt
  nameWithType: SecureString.SetAt
