### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.PrincipalPermissionAttribute
  id: PrincipalPermissionAttribute
  children:
  - System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  - System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  - System.Security.Permissions.PrincipalPermissionAttribute.Name
  - System.Security.Permissions.PrincipalPermissionAttribute.Role
  langs:
  - csharp
  name: PrincipalPermissionAttribute
  nameWithType: PrincipalPermissionAttribute
  fullName: System.Security.Permissions.PrincipalPermissionAttribute
  type: Class
  summary: "により、セキュリティ アクションを<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>宣言セキュリティを使用してコードに適用します。 このクラスは継承できません。"
  remarks: "PrincipalPermissionAttribute は、宣言によって、コードを実行しているユーザーが指定されたロールに属していることを要求したり、認証済みであるを使用できます。 使用<xref:System.Security.Permissions.PermissionState>作成、<xref:System.Security.Permissions.PrincipalPermission>で<xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A>に設定`true`と<xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A>と<xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>&quot;éý&quot; `null`</xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> </xref:System.Security.Permissions.PrincipalPermission> </xref:System.Security.Permissions.PermissionState> 。       許可されている宣言のスコープによって異なります、<xref:System.Security.Permissions.SecurityAction>ために使用される</xref:System.Security.Permissions.SecurityAction>。 PrincipalPermissionAttribute は、アセンブリ レベルで適用されることはできません。       セキュリティ属性によって宣言されたセキュリティ情報は、属性の対象のメタデータに格納され、実行時に、システムによってアクセスされます。 セキュリティ属性は、宣言型セキュリティにのみ使用されます。 命令型のセキュリティのアクセス許可の対応するクラスを使用します。      > [!IMPORTANT] > プリンシパル アクセス許可を要求するには、このクラスを使用する前に<xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy>列挙値にプリンシパルに現在のアプリケーション ドメインのポリシーを設定する必要があります 既定では、プリンシパルのポリシーは<xref:System.Security.Principal.PrincipalPolicy>。</xref:System.Security.Principal.PrincipalPolicy>設定します。 プリンシパルのポリシー設定しない場合<xref:System.Security.Principal.PrincipalPolicy>、プリンシパルのアクセス許可の要求が失敗する</xref:System.Security.Principal.PrincipalPolicy>。 プリンシパルのアクセス許可を要求する前に、次のコードを実行する必要があります。`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  example:
  - "The following example demonstrates how the PrincipalPermissionAttribute class is used declaratively to demand that the current user be an administrator.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/t-system.security.permis_17_1.cpp)]\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_17_1.vb)]\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/t-system.security.permis_17_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PrincipalPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: PrincipalPermissionAttribute(SecurityAction)
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Permissions.PrincipalPermissionAttribute&quot;> </xref> 、指定したクラス<xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref>です。"
  remarks: '`Demand`、 `InheritanceDemand`、および`LinkDemand`の唯一の値は、<xref:System.Security.Permissions.SecurityAction>この属性の意味を持つこと。</xref:System.Security.Permissions.SecurityAction> その他のアクションは、アクセス許可がコード アクセス許可には適用されません。'
  example:
  - "The following example demonstrates how to use the PrincipalPermissionAttribute constructor to demand that the current user be an administrator.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/b59d1850-818f-411e-9c11-_1.cpp)]\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/b59d1850-818f-411e-9c11-_1.vb)]\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/b59d1850-818f-411e-9c11-_1.cs)]"
  syntax:
    content: public PrincipalPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "1 つ、 <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>値。"
  overload: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  id: Authenticated
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得または基になるロール ベース セキュリティ プロバイダーによって、現在のプリンシパルが認証されているかどうかを示す値を設定します。"
  syntax:
    content: public bool Authenticated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>現在のプリンシパルが認証されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: PrincipalPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "作成して、新しい返します<xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;></xref>です。"
  remarks: "このメソッドは、アプリケーション コードからではなく、セキュリティ システムによってのみ呼び出す必要があります。       コンパイル時に、属性は、セキュリティの宣言をメタデータのシリアル化された形式に変換されます。 メタデータの宣言セキュリティ データは、この属性に対応する権限をこのメソッドが返すから作成されます。"
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>この属性に対応します。"
  overload: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name
  id: Name
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得または現在のプリンシパルに関連付けられている id の名前を設定します。"
  remarks: "認証プロバイダーが Windows NT の場合は、名前の値は、(&quot;domainname \\username&quot;形式) で、ユーザーの Windows NT のログイン名と同じです。 使用している認証プロバイダーと、現在のプリンシパルの id を決定する方法を確認するホストのドキュメントを確認してください。"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "名前に一致する基になるロール ベース セキュリティ プロバイダーによって提供されます。"
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role
  id: Role
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得または指定したセキュリティ ロールのメンバーシップを設定します。"
  remarks: "利用可能な役割は、ホストによって使用中の認証プロバイダーに基づくは異なります。 認証プロバイダーが Windows NT の場合は、ロールは、Windows NT ユーザー グループ (フォーム&quot;DomainName\\GroupName&quot;) です。 使用している認証プロバイダーとロールのユーザーが所属できる新機能を確認するホストのドキュメントを確認してください。"
  syntax:
    content: public string Role { get; set; }
    return:
      type: System.String
      description: "基になるロール ベース セキュリティ プロバイダーからのロールの名前。"
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Role*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: PrincipalPermissionAttribute(SecurityAction)
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: PrincipalPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: PrincipalPermissionAttribute
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: PrincipalPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
