### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.Timer
  id: Timer
  children:
  - System.Windows.Forms.Timer.#ctor
  - System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)
  - System.Windows.Forms.Timer.Dispose(System.Boolean)
  - System.Windows.Forms.Timer.Enabled
  - System.Windows.Forms.Timer.Interval
  - System.Windows.Forms.Timer.OnTick(System.EventArgs)
  - System.Windows.Forms.Timer.Start
  - System.Windows.Forms.Timer.Stop
  - System.Windows.Forms.Timer.Tag
  - System.Windows.Forms.Timer.Tick
  - System.Windows.Forms.Timer.ToString
  langs:
  - csharp
  name: Timer
  nameWithType: Timer
  fullName: System.Windows.Forms.Timer
  type: Class
  summary: "ユーザー定義の間隔でイベントを発生させるタイマーを実装します。 このタイマーは、Windows フォーム アプリケーションで用に最適化されていて、ウィンドウで使用する必要があります。"
  remarks: "ユーザー定義の間隔でイベントを発生させるタイマーを使用します。 この Windows タイマーは、処理を実行する UI スレッドが使用されているシングル スレッドの環境に適しています。 これには、ユーザー コードが使用可能な UI メッセージ ポンプと常に、同じスレッドから動作かいるを別のスレッドの呼び出しをマーシャ リングが必要です。       このタイマーを使用してを使用して、<xref:System.Windows.Forms.Timer.Tick>ポーリング操作を実行する場合、または一定の時間のスプラッシュ画面を表示するイベントです</xref:System.Windows.Forms.Timer.Tick>。 たびに、<xref:System.Windows.Forms.Timer.Enabled%2A>プロパティに設定されている`true`と<xref:System.Windows.Forms.Timer.Interval%2A>プロパティは、ゼロより大きく、<xref:System.Windows.Forms.Timer.Tick>に基づいた間隔でイベントが発生、<xref:System.Windows.Forms.Timer.Interval%2A>プロパティの設定</xref:System.Windows.Forms.Timer.Interval%2A></xref:System.Windows.Forms.Timer.Tick></xref:System.Windows.Forms.Timer.Interval%2A></xref:System.Windows.Forms.Timer.Enabled%2A>。       このクラスは、間隔を設定および開始し、タイマーを停止するメソッドを提供します。      > [!NOTE] > Windows フォームの Timer コンポーネントはシングル スレッドおよび 55 ミリ秒の精度に制限されます。 精度の向上でマルチ スレッド タイマーを必要とする場合を使用して、<xref:System.Timers.Timer>クラス内で、<xref:System.Timers>名前空間</xref:System.Timers></xref:System.Timers.Timer>。"
  example:
  - "The following example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user as to whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/t-system.windows.forms.t_2_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/t-system.windows.forms.t_2_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/t-system.windows.forms.t_2_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Tick")]

      [System.ComponentModel.DefaultProperty("Interval")]

      [System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")]

      public class Timer : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Windows.Forms.Timer.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Timer()
  nameWithType: Timer.Timer()
  fullName: System.Windows.Forms.Timer.Timer()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Forms.Timer&quot;> </xref>クラスです。"
  remarks: "新しいタイマーの作成時に無効です。つまり、<xref:System.Windows.Forms.Timer.Enabled%2A>に設定されている`false`</xref:System.Windows.Forms.Timer.Enabled%2A>。 タイマーを有効にするを呼び出して、<xref:System.Windows.Forms.Timer.Start%2A>メソッドまたはセット<xref:System.Windows.Forms.Timer.Enabled%2A>に`true`</xref:System.Windows.Forms.Timer.Enabled%2A></xref:System.Windows.Forms.Timer.Start%2A>。       場合は、タイマーが無効になり、タイマーがスコープ外には、ガベージ コレクションが発生すると、タイマーが破棄されます。 タイマーが有効な場合、スコープ外である場合でも、これはガベージ コレクションの対象とします。"
  syntax:
    content: public Timer ();
    parameters: []
  overload: System.Windows.Forms.Timer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)
  id: '#ctor(System.ComponentModel.IContainer)'
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Timer(IContainer)
  nameWithType: Timer.Timer(IContainer)
  fullName: System.Windows.Forms.Timer.Timer(IContainer)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Forms.Timer&quot;> </xref>と共に、指定されたコンテナー クラスです。"
  remarks: "<xref:System.Windows.Forms.Timer>コンス トラクターは、関連付けることができます、<xref:System.Windows.Forms.Timer>いずれかを持つ<xref:System.ComponentModel.Container>オブジェクト</xref:System.ComponentModel.Container></xref:System.Windows.Forms.Timer></xref:System.Windows.Forms.Timer>。 <xref:System.Windows.Forms.Timer> <xref:System.Windows.Forms.Timer> <xref:System.ComponentModel.Container>。</xref:System.ComponentModel.Container></xref:System.Windows.Forms.Timer>の有効期間の制御を渡す、次のように</xref:System.Windows.Forms.Timer>関連付けることによって これはする、アプリケーションでは多くのコンポーネントを使用していて、それらのすべてを同時に破棄する場合に役立ちます。 関連付ける場合など、 <xref:System.Windows.Forms.ToolTip>、 <xref:System.Windows.Forms.ImageList>、および<xref:System.Windows.Forms.Timer>で、 <xref:System.ComponentModel.Container>、呼び出し元<xref:System.ComponentModel.Container.Dispose%2A>で、<xref:System.ComponentModel.Container>が強制的にすべてのこれらのコンポーネントも破棄します</xref:System.ComponentModel.Container></xref:System.ComponentModel.Container.Dispose%2A></xref:System.ComponentModel.Container></xref:System.Windows.Forms.Timer></xref:System.Windows.Forms.ImageList></xref:System.Windows.Forms.ToolTip>。       新しいタイマーの作成時に無効です。つまり、<xref:System.Windows.Forms.Timer.Enabled%2A>に設定されている`false`</xref:System.Windows.Forms.Timer.Enabled%2A>。 タイマーを有効にするを呼び出して、<xref:System.Windows.Forms.Timer.Start%2A>メソッドまたはセット<xref:System.Windows.Forms.Timer.Enabled%2A>に`true`</xref:System.Windows.Forms.Timer.Enabled%2A></xref:System.Windows.Forms.Timer.Start%2A>。       このインスタンスは、そのコンテナーがガベージ コレクションを解放するまでは存在します。"
  syntax:
    content: public Timer (System.ComponentModel.IContainer container);
    parameters:
    - id: container
      type: System.ComponentModel.IContainer
      description: "<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>タイマーのコンテナーを表すです。"
  overload: System.Windows.Forms.Timer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Timer.Dispose(Boolean)
  fullName: System.Windows.Forms.Timer.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "タイマーによって使用されるメモリ以外のリソースを解放します。"
  remarks: "タイマーの使用が終了した場合は、Dispose を呼び出します。 Dispose メソッドは、使用不可の状態タイマーを残します。 Dispose を呼び出した後が使用していたメモリをガベージ コレクションによって再要求できるように、このタイマーへのすべての参照を解放する必要があります。      > [!NOTE] > 常に呼び出し、このタイマーへの最後の参照を解放する前に破棄します。 それ以外の場合、ガベージ コレクションが、タイマー オブジェクトのデストラクターを呼び出すまで、タイマーを使用してリソースは解放されません。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放します。 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>アンマネージ リソースだけを解放します。"
  overload: System.Windows.Forms.Timer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Enabled
  id: Enabled
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Enabled
  nameWithType: Timer.Enabled
  fullName: System.Windows.Forms.Timer.Enabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはタイマーが実行されているかどうかを設定します。"
  remarks: "タイマーがガベージ コレクションの対象と値が`true`です。       呼び出す、<xref:System.Windows.Forms.Timer.Start%2A>メソッドは、有効に設定と同じ`true`</xref:System.Windows.Forms.Timer.Start%2A>。 同様に、呼び出し、<xref:System.Windows.Forms.Timer.Stop%2A>メソッドは、有効に設定と同じ`false`</xref:System.Windows.Forms.Timer.Stop%2A>。"
  example:
  - "The following example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/p-system.windows.forms.t_233_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_233_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/p-system.windows.forms.t_233_1.cs)]"
  syntax:
    content: public virtual bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>タイマーが現在有効である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.Timer.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Interval
  id: Interval
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Interval
  nameWithType: Timer.Interval
  fullName: System.Windows.Forms.Timer.Interval
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または設定の時間 (ミリ秒単位) 前に、 <xref href=&quot;System.Windows.Forms.Timer.Tick&quot;> </xref>イベントは、最後に見つかった位置の基準とした、 <xref href=&quot;System.Windows.Forms.Timer.Tick&quot;> </xref>イベント。"
  remarks: "間隔の秒数を取得するには、1,000 でこの数値を除算します。"
  example:
  - "The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/p-system.windows.forms.t_13_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/p-system.windows.forms.t_13_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/p-system.windows.forms.t_13_1.cs)]"
  syntax:
    content: public int Interval { get; set; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>までのミリ秒数を指定する、 <xref href=&quot;System.Windows.Forms.Timer.Tick&quot;> </xref>イベントは、最後に見つかった位置の基準とした、 <xref href=&quot;System.Windows.Forms.Timer.Tick&quot;> </xref>イベント</xref:System.Int32>。 値は、1 より小さくすることはできません。"
  overload: System.Windows.Forms.Timer.Interval*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.OnTick(System.EventArgs)
  id: OnTick(System.EventArgs)
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: OnTick(EventArgs)
  nameWithType: Timer.OnTick(EventArgs)
  fullName: System.Windows.Forms.Timer.OnTick(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "発生させる、 <xref href=&quot;System.Windows.Forms.Timer.Tick&quot;> </xref>イベント。"
  remarks: "このメソッドは、タイマー刻みごとに呼び出されます。 <xref:System.Windows.Forms.Timer.Tick>。</xref:System.Windows.Forms.Timer.Tick>を介して追加された任意のメソッドを呼び出します 継承している場合<xref:System.Windows.Forms.Timer>、このメソッドをオーバーライドすることができます</xref:System.Windows.Forms.Timer>。       イベントを発生させるには、イベント ハンドラーがデリゲートからを呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: protected virtual void OnTick (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。 これは常に<xref:System.EventArgs>.</xref:System.EventArgs>"
  overload: System.Windows.Forms.Timer.OnTick*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Start
  id: Start
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Start()
  nameWithType: Timer.Start()
  fullName: System.Windows.Forms.Timer.Start()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "タイマーを開始します。"
  remarks: "設定して、タイマーを開始することもできます、<xref:System.Windows.Forms.Timer.Enabled%2A>プロパティを`true`</xref:System.Windows.Forms.Timer.Enabled%2A>。"
  example:
  - "The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/m-system.windows.forms.t_9_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_9_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/m-system.windows.forms.t_9_1.cs)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Windows.Forms.Timer.Start*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Stop
  id: Stop
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Stop()
  nameWithType: Timer.Stop()
  fullName: System.Windows.Forms.Timer.Stop()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "タイマーを停止します。"
  remarks: "設定して、タイマーを停止することも、<xref:System.Windows.Forms.Timer.Enabled%2A>プロパティを`false`</xref:System.Windows.Forms.Timer.Enabled%2A>。 A<xref:System.Windows.Forms.Timer>オブジェクトを有効になっているし、同じアプリケーションのセッション内で複数回無効になっている可能性があります</xref:System.Windows.Forms.Timer>。       呼び出す<xref:System.Windows.Forms.Timer.Start%2A>を無効にした後、<xref:System.Windows.Forms.Timer>停止すると、呼び出すことによって、<xref:System.Windows.Forms.Timer>中断の間隔を再起動します</xref:System.Windows.Forms.Timer></xref:System.Windows.Forms.Timer></xref:System.Windows.Forms.Timer.Start%2A>。 場合、 <xref:System.Windows.Forms.Timer>5000 ミリ秒に設定されているを呼び出す Stop 約 3000 (ミリ秒単位) を呼び出して<xref:System.Windows.Forms.Timer.Start%2A>により、 <xref:System.Windows.Forms.Timer>5000 ミリ秒を発生させる前に待機する、<xref:System.Windows.Forms.Timer.Tick>イベント</xref:System.Windows.Forms.Timer.Tick></xref:System.Windows.Forms.Timer></xref:System.Windows.Forms.Timer.Start%2A></xref:System.Windows.Forms.Timer>。      > [!NOTE] > を呼び出すと、いずれかで停止<xref:System.Windows.Forms.Timer>Windows フォーム内でアプリケーションを与えるメッセージを他の<xref:System.Windows.Forms.Timer>ので、すぐに処理するアプリケーションのコンポーネントすべて<xref:System.Windows.Forms.Timer>コンポーネントがメイン アプリケーション スレッドで動作します</xref:System.Windows.Forms.Timer></xref:System.Windows.Forms.Timer></xref:System.Windows.Forms.Timer>。 2 つある<xref:System.Windows.Forms.Timer>コンポーネント、700 ミリ秒、500 (ミリ秒単位) を 1 つのセットを 1 つ設定し、最初の停止を呼び出す<xref:System.Windows.Forms.Timer>、アプリケーションが最初の 2 番目のコンポーネントのイベント コールバックを受信する可能性があります</xref:System.Windows.Forms.Timer></xref:System.Windows.Forms.Timer>。 問題があることを証明している場合は、使用を検討して、<xref:System.Threading.Timer>クラス内で、<xref:System.Threading>名前空間代わりにします</xref:System.Threading></xref:System.Threading.Timer>。"
  example:
  - "The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/m-system.windows.forms.t_32_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.t_32_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/m-system.windows.forms.t_32_1.cs)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Windows.Forms.Timer.Stop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Tag
  id: Tag
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Tag
  nameWithType: Timer.Tag
  fullName: System.Windows.Forms.Timer.Tag
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはいくつかの種類のユーザー状態を表す任意の文字列を設定します。"
  syntax:
    content: public object Tag { get; set; }
    return:
      type: System.Object
      description: "ユーザー状態のいくつかの型を表す任意の文字列。"
  overload: System.Windows.Forms.Timer.Tag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.Tick
  id: Tick
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: Tick
  nameWithType: Timer.Tick
  fullName: System.Windows.Forms.Timer.Tick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指定したタイマーの間隔が経過し、タイマーが有効になっているときに発生します。"
  remarks: "呼び出す、<xref:System.Diagnostics.Debug.Assert%2A>メソッドを<xref:System.Diagnostics.Debug>Tick イベント内からクラスが予想どおりに動作しない可能性があります、アサーションのダイアログを表示するボックスを繰り返し、Tick イベントを発生させる Windows が発生する可能性があります</xref:System.Diagnostics.Debug></xref:System.Diagnostics.Debug.Assert%2A>。 このイベントの中でアサーションをテストしないようにして、使用することをお勧め、 <xref:System.Diagnostics.Debug.Write%2A>、 <xref:System.Diagnostics.Debug.WriteIf%2A>、 <xref:System.Diagnostics.Debug.WriteLine%2A>、または<xref:System.Diagnostics.Debug.WriteLineIf%2A>メソッド代わりにします</xref:System.Diagnostics.Debug.WriteLineIf%2A></xref:System.Diagnostics.Debug.WriteLine%2A></xref:System.Diagnostics.Debug.WriteIf%2A></xref:System.Diagnostics.Debug.Write%2A>。       イベント処理の詳細については、次を参照してください。[処理とイベントの発生](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example implements a simple interval timer, which sets off an alarm every five seconds. When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.  \n  \n [!code-cpp[Classic Timer Example 2#1](~/add/codesnippet/cpp/e-system.windows.forms.t_22_1.cpp)]\n [!code-vb[Classic Timer Example 2#1](~/add/codesnippet/visualbasic/e-system.windows.forms.t_22_1.vb)]\n [!code-cs[Classic Timer Example 2#1](~/add/codesnippet/csharp/e-system.windows.forms.t_22_1.cs)]"
  syntax:
    content: public event EventHandler Tick;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Timer.ToString
  id: ToString
  parent: System.Windows.Forms.Timer
  langs:
  - csharp
  name: ToString()
  nameWithType: Timer.ToString()
  fullName: System.Windows.Forms.Timer.ToString()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "表す文字列を返します、 <xref href=&quot;System.Windows.Forms.Timer&quot;></xref>です。"
  remarks: "ToString メソッドの値を含む文字列を返します、<xref:System.Windows.Forms.Timer.Interval%2A>プロパティ</xref:System.Windows.Forms.Timer.Interval%2A>。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "現在を表す文字列<xref href=&quot;System.Windows.Forms.Timer&quot;></xref>です。"
  overload: System.Windows.Forms.Timer.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.Windows.Forms.Timer.#ctor
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Timer()
  nameWithType: Timer.Timer()
  fullName: System.Windows.Forms.Timer.Timer()
- uid: System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Timer(IContainer)
  nameWithType: Timer.Timer(IContainer)
  fullName: System.Windows.Forms.Timer.Timer(IContainer)
- uid: System.ComponentModel.IContainer
  parent: System.ComponentModel
  isExternal: false
  name: IContainer
  nameWithType: IContainer
  fullName: System.ComponentModel.IContainer
- uid: System.Windows.Forms.Timer.Dispose(System.Boolean)
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Timer.Dispose(Boolean)
  fullName: System.Windows.Forms.Timer.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.Timer.Enabled
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Enabled
  nameWithType: Timer.Enabled
  fullName: System.Windows.Forms.Timer.Enabled
- uid: System.Windows.Forms.Timer.Interval
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Interval
  nameWithType: Timer.Interval
  fullName: System.Windows.Forms.Timer.Interval
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.Timer.OnTick(System.EventArgs)
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: OnTick(EventArgs)
  nameWithType: Timer.OnTick(EventArgs)
  fullName: System.Windows.Forms.Timer.OnTick(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Forms.Timer.Start
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Start()
  nameWithType: Timer.Start()
  fullName: System.Windows.Forms.Timer.Start()
- uid: System.Windows.Forms.Timer.Stop
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Stop()
  nameWithType: Timer.Stop()
  fullName: System.Windows.Forms.Timer.Stop()
- uid: System.Windows.Forms.Timer.Tag
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Tag
  nameWithType: Timer.Tag
  fullName: System.Windows.Forms.Timer.Tag
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Forms.Timer.Tick
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Tick
  nameWithType: Timer.Tick
  fullName: System.Windows.Forms.Timer.Tick
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.Timer.ToString
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: ToString()
  nameWithType: Timer.ToString()
  fullName: System.Windows.Forms.Timer.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.Timer.#ctor*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Timer
  nameWithType: Timer.Timer
- uid: System.Windows.Forms.Timer.Dispose*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Dispose
  nameWithType: Timer.Dispose
- uid: System.Windows.Forms.Timer.Enabled*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Enabled
  nameWithType: Timer.Enabled
- uid: System.Windows.Forms.Timer.Interval*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Interval
  nameWithType: Timer.Interval
- uid: System.Windows.Forms.Timer.OnTick*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: OnTick
  nameWithType: Timer.OnTick
- uid: System.Windows.Forms.Timer.Start*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Start
  nameWithType: Timer.Start
- uid: System.Windows.Forms.Timer.Stop*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Stop
  nameWithType: Timer.Stop
- uid: System.Windows.Forms.Timer.Tag*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: Tag
  nameWithType: Timer.Tag
- uid: System.Windows.Forms.Timer.ToString*
  parent: System.Windows.Forms.Timer
  isExternal: false
  name: ToString
  nameWithType: Timer.ToString
