### YamlMime:ManagedReference
items:
- uid: System.IO.BufferedStream
  id: BufferedStream
  children:
  - System.IO.BufferedStream.#ctor(System.IO.Stream)
  - System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)
  - System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.BufferedStream.CanRead
  - System.IO.BufferedStream.CanSeek
  - System.IO.BufferedStream.CanWrite
  - System.IO.BufferedStream.Dispose(System.Boolean)
  - System.IO.BufferedStream.EndRead(System.IAsyncResult)
  - System.IO.BufferedStream.EndWrite(System.IAsyncResult)
  - System.IO.BufferedStream.Flush
  - System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.BufferedStream.Length
  - System.IO.BufferedStream.Position
  - System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.BufferedStream.ReadByte
  - System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.BufferedStream.SetLength(System.Int64)
  - System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.BufferedStream.WriteByte(System.Byte)
  langs:
  - csharp
  name: BufferedStream
  nameWithType: BufferedStream
  fullName: System.IO.BufferedStream
  type: Class
  summary: "読み取りおよび書き込み操作に別のストリームをバッファー処理レイヤーを追加します。 このクラスは継承できません。"
  remarks: "A buffer is a block of bytes in memory used to cache data, thereby reducing the number of calls to the operating system. Buffers improve read and write performance. A buffer can be used for either reading or writing, but never both simultaneously. The [Read(Byte\\[\\], Int32, Int32)](assetId:///M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)?qualifyHint=False&autoUpgrade=True) and [Write(Byte\\[\\], Int32, Int32)](assetId:///M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)?qualifyHint=False&autoUpgrade=True) methods of `BufferedStream` automatically maintain the buffer.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \n  \n `BufferedStream` can be composed around certain types of streams. It provides implementations for reading and writing bytes to an underlying data source or repository. Use <xref:System.IO.BinaryReader> and <xref:System.IO.BinaryWriter> for reading and writing other data types. `BufferedStream` is designed to prevent the buffer from slowing down input and output when the buffer is not needed. If you always read and write for sizes greater than the internal buffer size, then `BufferedStream` might not even allocate the internal buffer. `BufferedStream` also buffers reads and writes in a shared buffer. It is assumed that you will almost always be doing a series of reads or writes, but rarely alternate between the two of them."
  example:
  - "The following code examples show how to use the `BufferedStream` class over the `NetworkStream` class to increase the performance of certain I/O operations. Start the server on a remote computer before starting the client. Specify the remote computer name as a command-line argument when starting the client. Vary the `dataArraySize` and `streamBufferSize` constants to view their effect on performance.  \n  \n The first example shows the code that runs on the client, and the second example shows the code that runs on the server.  \n  \n **Example 1: Code that runs on the client**  \n  \n [!code-cs[System.IO.BufferedStream1#1](~/add/codesnippet/csharp/t-system.io.bufferedstream_1.cs)]\n [!code-cpp[System.IO.BufferedStream1#1](~/add/codesnippet/cpp/t-system.io.bufferedstream_1.cpp)]\n [!code-vb[System.IO.BufferedStream1#1](~/add/codesnippet/visualbasic/t-system.io.bufferedstream_1.vb)]  \n  \n **Example 2: Code that runs on the server**  \n  \n [!code-vb[System.IO.BufferedStream2#1](~/add/codesnippet/visualbasic/t-system.io.bufferedstream_2.vb)]\n [!code-cs[System.IO.BufferedStream2#1](~/add/codesnippet/csharp/t-system.io.bufferedstream_2.cs)]\n [!code-cpp[System.IO.BufferedStream2#1](~/add/codesnippet/cpp/t-system.io.bufferedstream_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class BufferedStream : System.IO.Stream
  inheritance:
  - System.IO.Stream
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.BufferedStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: BufferedStream(Stream)
  nameWithType: BufferedStream.BufferedStream(Stream)
  fullName: System.IO.BufferedStream.BufferedStream(Stream)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.BufferedStream&quot;> </xref> 4096 バイトまでの既定のバッファー サイズを持つクラス。"
  remarks: "共有の読み取り/書き込みバッファーは最初に割り当てられている、`BufferedStream`オブジェクトはこのコンス トラクターで初期化します。 すべての読み取りと書き込みがより大きいか等しい場合、共有バッファーは使用されません`bufferSize`です。"
  syntax:
    content: public BufferedStream (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "現在のストリーム。"
  overload: System.IO.BufferedStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)
  id: '#ctor(System.IO.Stream,System.Int32)'
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: BufferedStream(Stream,Int32)
  nameWithType: BufferedStream.BufferedStream(Stream,Int32)
  fullName: System.IO.BufferedStream.BufferedStream(Stream,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.BufferedStream&quot;> </xref>指定したバッファー サイズを持つクラス。"
  remarks: "共有の読み取り/書き込みバッファーは最初に割り当てられている、`BufferedStream`オブジェクトはこのコンス トラクターで初期化します。 すべての読み取りと書き込みがより大きいか等しい場合、共有バッファーは使用されません`bufferSize`です。"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.BufferedStream> class.  \n  \n [!code-cs[System.IO.BufferedStream1#2](~/add/codesnippet/csharp/m-system.io.bufferedstre_2_1.cs)]\n [!code-cpp[System.IO.BufferedStream1#2](~/add/codesnippet/cpp/m-system.io.bufferedstre_2_1.cpp)]\n [!code-vb[System.IO.BufferedStream1#2](~/add/codesnippet/visualbasic/m-system.io.bufferedstre_2_1.vb)]"
  syntax:
    content: public BufferedStream (System.IO.Stream stream, int bufferSize);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "現在のストリーム。"
    - id: bufferSize
      type: System.Int32
      description: "バッファー サイズ (バイト単位)。"
  overload: System.IO.BufferedStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>負の値。"
  platform:
  - net462
- uid: System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: BufferedStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.BufferedStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "非同期の読み取り操作を開始します。 (使用を検討して<xref:System.IO.BufferedStream.ReadAsync*>代わりにします「解説」セクションを参照してください。)</xref:System.IO.BufferedStream.ReadAsync*> 。"
  remarks: ".NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある<xref:System.IO.Stream.BeginRead%2A>と<xref:System.IO.Stream.EndRead%2A>ファイルの非同期操作を実装する</xref:System.IO.Stream.EndRead%2A></xref:System.IO.Stream.BeginRead%2A>。 これらのメソッドでは使用できます、[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]レガシ コードをサポートするただし、新しい非同期メソッドなど<xref:System.IO.BufferedStream.ReadAsync%2A>、 <xref:System.IO.BufferedStream.WriteAsync%2A>、および<xref:System.IO.BufferedStream.FlushAsync%2A>、ヘルプ ファイルの非同期操作をより簡単に実装する</xref:System.IO.BufferedStream.FlushAsync%2A></xref:System.IO.BufferedStream.WriteAsync%2A></xref:System.IO.BufferedStream.ReadAsync%2A>。       <xref:System.IO.BufferedStream.EndWrite%2A>BeginRead を呼び出すたびに対して&1; 回だけ呼び出すこと必要があります。</xref:System.IO.BufferedStream.EndWrite%2A> 別の読み取りを開始する前に読み取りプロセスを終了に失敗すると、デッドロックなど、望ましくない動作可能性があります。      > [!NOTE] > を使用して、 <xref:System.IO.BufferedStream.CanRead%2A>、現在のインスタンスが読み取りをサポートするかどうかを決定するプロパティ</xref:System.IO.BufferedStream.CanRead%2A>。       <xref:System.IO.BufferedStream.EndRead%2A>これで呼び出されなければなりません<xref:System.IAsyncResult>読み取られたバイト数を確認する</xref:System.IAsyncResult>。</xref:System.IO.BufferedStream.EndRead%2A>"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "データを読み取るバッファー。"
    - id: offset
      type: System.Int32
      description: "内のバイト オフセット`buffer`ストリームから読み取られるデータの書き込みを開始する位置を示すです。"
    - id: count
      type: System.Int32
      description: "読み取るバイトの最大数。"
    - id: callback
      type: System.AsyncCallback
      description: "読み取りが完了するときに呼び出されるオプションの非同期コールバック。"
    - id: state
      type: System.Object
      description: "この特定の非同期読み取り要求を他の要求と区別するユーザー指定のオブジェクト。"
    return:
      type: System.IAsyncResult
      description: "非同期の読み取りは、保留になっていることを表すオブジェクト。"
  overload: System.IO.BufferedStream.BeginRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>または<code>count</code>が負の値。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "非同期の読み取り、ストリームの終わりを超えて試行されました。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "バッファーの長さマイナス<code> offset </code>はより小さい<code> count</code>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "現在のストリームは読み取り操作をサポートしていません。"
  platform:
  - net462
- uid: System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: BufferedStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.BufferedStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "非同期の書き込み操作を開始します。 (使用を検討して<xref:System.IO.BufferedStream.WriteAsync*>代わりにします「解説」セクションを参照してください。)</xref:System.IO.BufferedStream.WriteAsync*> 。"
  remarks: ".NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある<xref:System.IO.Stream.BeginWrite%2A>と<xref:System.IO.Stream.EndWrite%2A>ファイルの非同期操作を実装する</xref:System.IO.Stream.EndWrite%2A></xref:System.IO.Stream.BeginWrite%2A>。 これらのメソッドでは使用できます、[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]レガシ コードをサポートするただし、新しい非同期メソッドなど<xref:System.IO.BufferedStream.ReadAsync%2A>、 <xref:System.IO.BufferedStream.WriteAsync%2A>、および<xref:System.IO.BufferedStream.FlushAsync%2A>、ヘルプ ファイルの非同期操作をより簡単に実装する</xref:System.IO.BufferedStream.FlushAsync%2A></xref:System.IO.BufferedStream.WriteAsync%2A></xref:System.IO.BufferedStream.ReadAsync%2A>。       <xref:System.IO.BufferedStream.EndWrite%2A>1 回だけ呼び出す必要がありますすべて<xref:System.IAsyncResult>を渡した</xref:System.IAsyncResult>。</xref:System.IO.BufferedStream.EndWrite%2A> <xref:System.IO.BufferedStream.EndWrite%2A>I/O 操作が完了するまでブロックされます。</xref:System.IO.BufferedStream.EndWrite%2A>"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "現在のストリームに書き込むデータを保持するバッファー。"
    - id: offset
      type: System.Int32
      description: "内の&0; から始まるバイト オフセット`buffer`現在のストリームにバイトのコピーを開始する位置。"
    - id: count
      type: System.Int32
      description: "書き込むバイトの最大数。"
    - id: callback
      type: System.AsyncCallback
      description: "非同期の書き込み操作が完了したときに呼び出されるメソッド。"
    - id: state
      type: System.Object
      description: "この特定の非同期書き込み要求を他の要求と区別するユーザー指定のオブジェクト。"
    return:
      type: System.IAsyncResult
      description: "保留になっていることが非同期の書き込みを参照するオブジェクト。"
  overload: System.IO.BufferedStream.BeginWrite*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>buffer</code>引いた長さ<code>offset</code>はより小さい<code>count</code>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>または<code>count</code>が負の値。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームは書き込みをサポートしていません。"
  platform:
  - net462
- uid: System.IO.BufferedStream.CanRead
  id: CanRead
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: CanRead
  nameWithType: BufferedStream.CanRead
  fullName: System.IO.BufferedStream.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のストリームが読み取りをサポートするかどうかを示す値を取得します。"
  remarks: "派生したクラス場合<xref:System.IO.Stream>読み取りをサポートしませんへの呼び出し、 <xref:System.IO.BufferedStream.Read%2A>、 <xref:System.IO.BufferedStream.ReadByte%2A>、 <xref:System.IO.Stream.BeginRead%2A>、 <xref:System.IO.Stream.EndRead%2A>、および`Peek`のメソッド<xref:System.IO.StreamReader>、 <xref:System.IO.StringReader>、 <xref:System.IO.TextReader> <xref:System.NotSupportedException>.</xref:System.NotSupportedException>をスロー</xref:System.IO.TextReader>および</xref:System.IO.StringReader></xref:System.IO.StreamReader></xref:System.IO.Stream.EndRead%2A></xref:System.IO.Stream.BeginRead%2A></xref:System.IO.BufferedStream.ReadByte%2A></xref:System.IO.BufferedStream.Read%2A></xref:System.IO.Stream>       ストリームが閉じられたかどうか、このプロパティを返します`false`です。"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.BufferedStream> class.  \n  \n [!code-cs[System.IO.BufferedStream1#5](~/add/codesnippet/csharp/p-system.io.bufferedstre_2_1.cs)]\n [!code-cpp[System.IO.BufferedStream1#5](~/add/codesnippet/cpp/p-system.io.bufferedstre_2_1.cpp)]\n [!code-vb[System.IO.BufferedStream1#5](~/add/codesnippet/visualbasic/p-system.io.bufferedstre_2_1.vb)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ストリームが読み取りをサポートしている場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>ストリームが閉じているか書き込み専用アクセスで開かれた場合。"
  overload: System.IO.BufferedStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.IO.BufferedStream.CanSeek
  id: CanSeek
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: BufferedStream.CanSeek
  fullName: System.IO.BufferedStream.CanSeek
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のストリームがシークをサポートしているかどうかを示す値を取得します。"
  remarks: "派生したクラス場合<xref:System.IO.Stream>への呼び出しをシークをサポートしていない<xref:System.IO.BufferedStream.Length%2A>、 <xref:System.IO.BufferedStream.SetLength%2A>、 <xref:System.IO.BufferedStream.Position%2A>、 <xref:System.IO.BufferedStream.Seek%2A> <xref:System.NotSupportedException>.</xref:System.NotSupportedException>をスロー</xref:System.IO.BufferedStream.Seek%2A>および</xref:System.IO.BufferedStream.Position%2A></xref:System.IO.BufferedStream.SetLength%2A></xref:System.IO.BufferedStream.Length%2A></xref:System.IO.Stream>       ストリームが閉じられたかどうか、このプロパティを返します`false`です。"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.BufferedStream> class.  \n  \n [!code-cs[System.IO.BufferedStream1#3](~/add/codesnippet/csharp/p-system.io.bufferedstre_0_1.cs)]\n [!code-cpp[System.IO.BufferedStream1#3](~/add/codesnippet/cpp/p-system.io.bufferedstre_0_1.cpp)]\n [!code-vb[System.IO.BufferedStream1#3](~/add/codesnippet/visualbasic/p-system.io.bufferedstre_0_1.vb)]"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ストリームがシークをサポートしている場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>ストリームが閉じているか、ストリームは、コンソールにパイプ出力などのオペレーティング システム ハンドルから構築された場合。"
  overload: System.IO.BufferedStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.IO.BufferedStream.CanWrite
  id: CanWrite
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: BufferedStream.CanWrite
  fullName: System.IO.BufferedStream.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のストリームが書き込みをサポートするかどうかを示す値を取得します。"
  remarks: "派生したクラス場合<xref:System.IO.Stream>への呼び出しの書き込みをサポートしていません<xref:System.IO.BufferedStream.SetLength%2A>、 <xref:System.IO.BufferedStream.Write%2A>、 <xref:System.IO.BufferedStream.WriteByte%2A> <xref:System.NotSupportedException>.</xref:System.NotSupportedException>をスロー</xref:System.IO.BufferedStream.WriteByte%2A>または</xref:System.IO.BufferedStream.Write%2A></xref:System.IO.BufferedStream.SetLength%2A></xref:System.IO.Stream>       ストリームが閉じられたかどうか、このプロパティを返します`false`です。"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.BufferedStream> class.  \n  \n [!code-cs[System.IO.BufferedStream1#4](~/add/codesnippet/csharp/p-system.io.bufferedstre_1_1.cs)]\n [!code-cpp[System.IO.BufferedStream1#4](~/add/codesnippet/cpp/p-system.io.bufferedstre_1_1.cpp)]\n [!code-vb[System.IO.BufferedStream1#4](~/add/codesnippet/visualbasic/p-system.io.bufferedstre_1_1.vb)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ストリームが書き込みをサポートしている場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>ストリームが閉じているか、読み取り専用アクセスで開かれた場合。"
  overload: System.IO.BufferedStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.IO.BufferedStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: BufferedStream.Dispose(Boolean)
  fullName: System.IO.BufferedStream.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.IO.BufferedStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.BufferedStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: BufferedStream.EndRead(IAsyncResult)
  fullName: System.IO.BufferedStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "保留中の非同期読み取り操作を完了するまで待機します。 (使用を検討して<xref:System.IO.BufferedStream.ReadAsync*>代わりにします「解説」セクションを参照してください。)</xref:System.IO.BufferedStream.ReadAsync*> 。"
  remarks: ".NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある<xref:System.IO.Stream.BeginRead%2A>と<xref:System.IO.Stream.EndRead%2A>ファイルの非同期操作を実装する</xref:System.IO.Stream.EndRead%2A></xref:System.IO.Stream.BeginRead%2A>。 これらのメソッドでは使用できます、[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]レガシ コードをサポートするただし、新しい非同期メソッドなど<xref:System.IO.BufferedStream.ReadAsync%2A>、 <xref:System.IO.BufferedStream.WriteAsync%2A>、および<xref:System.IO.BufferedStream.FlushAsync%2A>、ヘルプ ファイルの非同期操作をより簡単に実装する</xref:System.IO.BufferedStream.FlushAsync%2A></xref:System.IO.BufferedStream.WriteAsync%2A></xref:System.IO.BufferedStream.ReadAsync%2A>。       EndRead は、これを呼び出す必要があります<xref:System.IAsyncResult>読み取られたバイト数を確認する</xref:System.IAsyncResult>。"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "待機する保留中の非同期要求への参照。"
    return:
      type: System.Int32
      description: "0 (ゼロ) と要求したバイト数と、ストリームから読み取られたバイト数。 ストリームが返されるだけストリームの末尾でのみは 0、それ以外の場合は、ブロックには、少なくとも 1 バイトが読み取られるまでです。"
  overload: System.IO.BufferedStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "この<xref:System.IAsyncResult>オブジェクトは、<xref:System.IO.BufferedStream.BeginRead*>このクラスで</xref:System.IO.BufferedStream.BeginRead*>呼び出すことにより作成されていません</xref:System.IAsyncResult>"
  platform:
  - net462
- uid: System.IO.BufferedStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: BufferedStream.EndWrite(IAsyncResult)
  fullName: System.IO.BufferedStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "I/O 操作が完了するまでは、非同期の書き込み操作とブロックを終了します。 (使用を検討して<xref:System.IO.BufferedStream.WriteAsync*>代わりにします「解説」セクションを参照してください。)</xref:System.IO.BufferedStream.WriteAsync*> 。"
  remarks: ".NET Framework 4 以前のバージョンはなどのメソッドを使用する必要がある<xref:System.IO.Stream.BeginWrite%2A>と<xref:System.IO.Stream.EndWrite%2A>ファイルの非同期操作を実装する</xref:System.IO.Stream.EndWrite%2A></xref:System.IO.Stream.BeginWrite%2A>。 これらのメソッドでは使用できます、[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]レガシ コードをサポートするただし、新しい非同期メソッドなど<xref:System.IO.BufferedStream.ReadAsync%2A>、 <xref:System.IO.BufferedStream.WriteAsync%2A>、および<xref:System.IO.BufferedStream.FlushAsync%2A>、ヘルプ ファイルの非同期操作をより簡単に実装する</xref:System.IO.BufferedStream.FlushAsync%2A></xref:System.IO.BufferedStream.WriteAsync%2A></xref:System.IO.BufferedStream.ReadAsync%2A>。       EndWrite は<xref:System.IO.BufferedStream.BeginRead%2A>。</xref:System.IO.BufferedStream.BeginRead%2A>呼び出しごとに&1; 回だけ呼び出す必要があります。 開始する前に読み取りプロセスを終了する別の読み取り操作できますと、デッドロックまたは他の望ましくない動作します。"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "保留中の非同期要求。"
  overload: System.IO.BufferedStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "この<xref:System.IAsyncResult>オブジェクトは、<xref:System.IO.BufferedStream.BeginWrite*>このクラスで</xref:System.IO.BufferedStream.BeginWrite*>呼び出すことにより作成されていません</xref:System.IAsyncResult>"
  platform:
  - net462
- uid: System.IO.BufferedStream.Flush
  id: Flush
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: Flush()
  nameWithType: BufferedStream.Flush()
  fullName: System.IO.BufferedStream.Flush()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "このストリームのすべてのバッファーをクリアし、基になるデバイスに書き込まれるバッファー内のデータします。"
  remarks: "明示的に呼び出す場合を除き、ストリームのフラッシュは、基になるエンコーダー フラッシュされません`Flush`または<xref:System.IO.Stream.Close%2A>.</xref:System.IO.Stream.Close%2A>       使用する場合、<xref:System.IO.BufferedStream.%23ctor%2A>コンス トラクターを作成中にバッファー サイズを指定するため、`BufferedStream`オブジェクト、バッファー サイズに達したとき、コンテンツをフラッシュします</xref:System.IO.BufferedStream.%23ctor%2A>。 たとえばなどのコード`BufferedStream bs = new BufferedStream(bs, 5)`バッファー サイズが 5 のバイト数に達すると、コンテンツが消去されます。       すべての読み取りと書き込みメソッドの`BufferedStream`を呼び出す必要はありませんので、バッファーを自動的に維持`Flush`読み取りと書き込みの前後に切り替えるときにします。"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.BufferedStream> class.  \n  \n [!code-cs[System.IO.BufferedStream1#6](~/add/codesnippet/csharp/m-system.io.bufferedstre_0_1.cs)]\n [!code-cpp[System.IO.BufferedStream1#6](~/add/codesnippet/cpp/m-system.io.bufferedstre_0_1.cpp)]\n [!code-vb[System.IO.BufferedStream1#6](~/add/codesnippet/visualbasic/m-system.io.bufferedstre_0_1.vb)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.IO.BufferedStream.Flush*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "ストリームは破棄されました。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "データ ソースまたはリポジトリは開いていません。"
  platform:
  - net462
- uid: System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: FlushAsync(CancellationToken)
  nameWithType: BufferedStream.FlushAsync(CancellationToken)
  fullName: System.IO.BufferedStream.FlushAsync(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "このストリームのすべてのバッファーをクリアに非同期的に、基になるデバイスに書き込まれるバッファー内のデータ、およびキャンセル要求を監視します。"
  syntax:
    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "キャンセル要求を監視するトークンです。"
    return:
      type: System.Threading.Tasks.Task
      description: "非同期のフラッシュ操作を表すタスク。"
  overload: System.IO.BufferedStream.FlushAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "ストリームは破棄されました。"
  platform:
  - net462
- uid: System.IO.BufferedStream.Length
  id: Length
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: Length
  nameWithType: BufferedStream.Length
  fullName: System.IO.BufferedStream.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ストリームの長さをバイト単位で取得します。"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "ストリームの長さ (バイト単位)。"
  overload: System.IO.BufferedStream.Length*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "基になるストリームが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または終了します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームはシークをサポートしていません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "メソッドは、ストリームが閉じられた後に呼び出されました。"
  platform:
  - net462
- uid: System.IO.BufferedStream.Position
  id: Position
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: Position
  nameWithType: BufferedStream.Position
  fullName: System.IO.BufferedStream.Position
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のストリーム内の位置を取得します。"
  remarks: "`get`アクセサーを呼び出す<xref:System.IO.BufferedStream.Seek%2A>を基になるストリーム内の現在位置を取得し、バッファー内の現在の位置に従って、この値を調整します</xref:System.IO.BufferedStream.Seek%2A>。       `set`アクセサーは、以前に、基になるストリーム バッファーに書き込まれたデータをコピーして、 <xref:System.IO.BufferedStream.Seek%2A>.</xref:System.IO.BufferedStream.Seek%2A>を呼び出します       ストリームの長さを超えた位置にシークはサポートされています。"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "現在のストリーム内の位置。"
  overload: System.IO.BufferedStream.Position*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "渡された値<xref:System.IO.BufferedStream.Seek*>が負の値</xref:System.IO.BufferedStream.Seek*>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "閉じられているストリームなど、I/O エラーが発生します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームはシークをサポートしていません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "メソッドは、ストリームが閉じられた後に呼び出されました。"
  platform:
  - net462
- uid: System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: BufferedStream.Read(Byte[],Int32,Int32)
  fullName: System.IO.BufferedStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のバッファー済みストリームからバイトを配列にコピーします。"
  remarks: "`Read`ストリームの末尾に達した場合にのみ、メソッドは 0 に戻ります。 その他のすべてのケースで`Read`常に返す前に、ストリームから、少なくとも&1; バイトを読み取ります。 定義上、ストリームへの呼び出し時にデータがない場合`Read`、`Read`メソッド (自動的に、ストリームの末尾に到達) 0 を返します。 実装は、ストリームの末尾に達していない場合でも、要求されたより少ないバイト数を返すことです。       使用して<xref:System.IO.BinaryReader>プリミティブ データ型を読み取るためです</xref:System.IO.BinaryReader>。"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.BufferedStream> class.  \n  \n [!code-cs[System.IO.BufferedStream1#7](~/add/codesnippet/csharp/m-system.io.bufferedstre_3_1.cs)]\n [!code-cpp[System.IO.BufferedStream1#7](~/add/codesnippet/cpp/m-system.io.bufferedstre_3_1.cpp)]\n [!code-vb[System.IO.BufferedStream1#7](~/add/codesnippet/visualbasic/m-system.io.bufferedstre_3_1.vb)]"
  syntax:
    content: public override int Read (byte[] array, int offset, int count);
    parameters:
    - id: array
      type: System.Byte[]
      description: "バイトがコピーされるバッファー。"
    - id: offset
      type: System.Int32
      description: "バイトの読み取りを開始する位置を示すバッファー内のバイト オフセット。"
    - id: count
      type: System.Int32
      description: "読み取るバイト数。"
    return:
      type: System.Int32
      description: "読み取られた合計バイト数<code> array</code>です。 バイト数が、現在ご利用いただけませんまたは前の任意のデータに、ストリームの末尾に達している場合は 0 ができることを読み取る要求したバイト数より小さくできます。"
  overload: System.IO.BufferedStream.Read*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Length of <code>array</code> minus <code>offset</code> is less than <code>count</code>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>または<code>count</code>が負の値。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ストリームが開いていないか、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームは読み取りをサポートしていません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "メソッドは、ストリームが閉じられた後に呼び出されました。"
  platform:
  - net462
- uid: System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: BufferedStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.BufferedStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のストリームからバイト シーケンスを非同期に読み取ります、読み取られたバイト数だけストリーム内の位置を進めますキャンセル要求を監視します。"
  remarks: "インスタンスを作成することで、キャンセル トークンを作成することができます、<xref:System.Threading.CancellationTokenSource>クラスを渡して、<xref:System.Threading.CancellationTokenSource.Token%2A>プロパティとして、`cancellationToken`パラメーター</xref:System.Threading.CancellationTokenSource.Token%2A> </xref:System.Threading.CancellationTokenSource> 。"
  syntax:
    content: public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "データを書き込むバッファー。"
    - id: offset
      type: System.Int32
      description: "内のバイト オフセット`buffer`ストリームからデータを書き込む開始位置を示すです。"
    - id: count
      type: System.Int32
      description: "読み取るバイトの最大数。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "キャンセル要求を監視するトークンです。"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "読み取り操作を表す、非同期タスク。 値、 <code> TResult </code>パラメーターには、バッファーに読み取られたバイトの合計数が含まれています。 結果の値は、現在使用できるバイト数が要求した数より小さいか、ストリームの末尾に達している場合 0 (ゼロ) であることを要求したバイト数より小さくできます。"
  overload: System.IO.BufferedStream.ReadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>または<code>count</code>が負の値。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "合計<code> offset </code>と<code> count </code>バッファー長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームは読み取りをサポートしていません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "ストリームは破棄されました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ストリームは、前の読み取り操作で使用するには現在します。"
  platform:
  - net462
- uid: System.IO.BufferedStream.ReadByte
  id: ReadByte
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: ReadByte()
  nameWithType: BufferedStream.ReadByte()
  fullName: System.IO.BufferedStream.ReadByte()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "基になるストリームからバイトを読み取りにキャストしたバイトを返します、 <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;> </xref>、または、ストリームの末尾から読み取る場合は-1 を返します。"
  syntax:
    content: public override int ReadByte ();
    parameters: []
    return:
      type: System.Int32
      description: "キャストされたバイト、 <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>ストリームの末尾から読み取る場合は-1。"
  overload: System.IO.BufferedStream.ReadByte*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "閉じられているストリームなど、I/O エラーが発生します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームは読み取りをサポートしていません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "メソッドは、ストリームが閉じられた後に呼び出されました。"
  platform:
  - net462
- uid: System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: BufferedStream.Seek(Int64,SeekOrigin)
  fullName: System.IO.BufferedStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のバッファー済みストリーム内の位置を設定します。"
  remarks: "場合`offset`は負の場合、新しい位置は前に指定で指定した位置`origin`で指定したバイト数だけ`offset`です。 場合`offset`が 0 の場合、新しい位置で指定した位置になります`origin`です。 場合`offset`が正の値であり、新しい位置がで指定した位置に従う`origin`で指定したバイト数だけ`offset`です。       ときに、<xref:System.IO.BufferedStream>オブジェクトの基本ストリームは、<xref:System.IO.StreamReader>オブジェクト、Seek メソッドを呼び出すことと、不要になったリーダー内の内部バッファーの位置を一致するようにストリームの位置が発生することができます</xref:System.IO.StreamReader></xref:System.IO.BufferedStream>。 内部バッファーをリセットするには、呼び出し、<xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=fullName>メソッドですただし、このメソッドは、パフォーマンスが低下し、どうしても必要な場合にのみ呼び出す必要があります。</xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=fullName> 。       ストリームの長さを超えた位置にシークはサポートされています。"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "相対バイト オフセット`origin`です。"
    - id: origin
      type: System.IO.SeekOrigin
      description: "型の値<xref:System.IO.SeekOrigin>から新しい位置を取得する参照ポイントを示すします</xref:System.IO.SeekOrigin>。"
    return:
      type: System.Int64
      description: "現在のバッファー済みストリーム内の新しい位置。"
  overload: System.IO.BufferedStream.Seek*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ストリームが開いていないか、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームはシークをサポートしていません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "メソッドは、ストリームが閉じられた後に呼び出されました。"
  platform:
  - net462
- uid: System.IO.BufferedStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: BufferedStream.SetLength(Int64)
  fullName: System.IO.BufferedStream.SetLength(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "バッファー済みストリームの長さを設定します。"
  remarks: "バッファーは、基になるデータ ソースまたはリポジトリの長さを設定する前にフラッシュされます。 指定した値がバッファー済みストリームの現在の長さよりも小さい場合は、バッファー済みストリームは切り捨てられます。 指定した値がバッファー済みストリームの現在の長さよりも大きい場合は、バッファー済みストリームを拡張します。 バッファー済みストリームを展開すると、古いと新しい長さのバッファー済みストリームの内容は定義されていません。       `SetLength`必要な場合は、バッファー内の書き込みをフラッシュします。       ストリームは書き込みとシークの両方をサポートする必要があります`SetLength`作業します。"
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "(バイト単位) の現在のバッファー済みストリームの希望の長さを示す整数。"
  overload: System.IO.BufferedStream.SetLength*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>value</code>負の値。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ストリームが開いていないか、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームは書き込みとシークの両方をサポートしていません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "メソッドは、ストリームが閉じられた後に呼び出されました。"
  platform:
  - net462
- uid: System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: BufferedStream.Write(Byte[],Int32,Int32)
  fullName: System.IO.BufferedStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "バッファー済みストリームにバイトをコピーし、書き込まれたバイト数でバッファー済みストリーム内の現在位置を進めます。"
  remarks: ''
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.BufferedStream> class.  \n  \n [!code-cs[System.IO.BufferedStream1#6](~/add/codesnippet/csharp/m-system.io.bufferedstre_1_1.cs)]\n [!code-cpp[System.IO.BufferedStream1#6](~/add/codesnippet/cpp/m-system.io.bufferedstre_1_1.cpp)]\n [!code-vb[System.IO.BufferedStream1#6](~/add/codesnippet/visualbasic/m-system.io.bufferedstre_1_1.vb)]"
  syntax:
    content: public override void Write (byte[] array, int offset, int count);
    parameters:
    - id: array
      type: System.Byte[]
      description: "コピー元のバイト配列`count`現在のバッファー済みストリームにバイト数。"
    - id: offset
      type: System.Int32
      description: "現在のバッファー済みストリームにバイトのコピーを開始する位置を示すバッファー内のオフセット。"
    - id: count
      type: System.Int32
      description: "現在のバッファー済みストリームに書き込むバイト数。"
  overload: System.IO.BufferedStream.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Length of <code>array</code> minus <code>offset</code> is less than <code>count</code>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>または<code>count</code>が負の値。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ストリームが閉じているまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームは書き込みをサポートしていません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "メソッドは、ストリームが閉じられた後に呼び出されました。"
  platform:
  - net462
- uid: System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: BufferedStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.BufferedStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "非同期的に現在のストリームにバイトのシーケンスを書き込み、書き込んだバイト数だけストリーム内の現在位置を進めます、キャンセル要求を監視します。"
  remarks: "インスタンスを作成することで、キャンセル トークンを作成することができます、<xref:System.Threading.CancellationTokenSource>クラスを渡して、<xref:System.Threading.CancellationTokenSource.Token%2A>プロパティとして、`cancellationToken`パラメーター</xref:System.Threading.CancellationTokenSource.Token%2A> </xref:System.Threading.CancellationTokenSource> 。"
  syntax:
    content: public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "データを書き込むバッファー。"
    - id: offset
      type: System.Int32
      description: "内の&0; から始まるバイト オフセット`buffer`ストリームにバイトのコピー開始位置を示すです。"
    - id: count
      type: System.Int32
      description: "書き込むバイトの最大数。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "キャンセル要求を監視するトークンです。"
    return:
      type: System.Threading.Tasks.Task
      description: "非同期の書き込み操作を表すタスク。"
  overload: System.IO.BufferedStream.WriteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>または<code>count</code>が負の値。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "合計<code> offset </code>と<code> count </code>バッファー長を超えています。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームは書き込みをサポートしていません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "ストリームは破棄されました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ストリームは、前の書き込み操作で使用するには現在します。"
  platform:
  - net462
- uid: System.IO.BufferedStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.BufferedStream
  langs:
  - csharp
  name: WriteByte(Byte)
  nameWithType: BufferedStream.WriteByte(Byte)
  fullName: System.IO.BufferedStream.WriteByte(Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "バッファー済みストリーム内の現在位置にバイトを書き込みます。"
  syntax:
    content: public override void WriteByte (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: "ストリームに書き込むバイト。"
  overload: System.IO.BufferedStream.WriteByte*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ストリームは書き込みをサポートしていません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "メソッドは、ストリームが閉じられた後に呼び出されました。"
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.BufferedStream.#ctor(System.IO.Stream)
  parent: System.IO.BufferedStream
  isExternal: false
  name: BufferedStream(Stream)
  nameWithType: BufferedStream.BufferedStream(Stream)
  fullName: System.IO.BufferedStream.BufferedStream(Stream)
- uid: System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)
  parent: System.IO.BufferedStream
  isExternal: false
  name: BufferedStream(Stream,Int32)
  nameWithType: BufferedStream.BufferedStream(Stream,Int32)
  fullName: System.IO.BufferedStream.BufferedStream(Stream,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.BufferedStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: BufferedStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.BufferedStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.BufferedStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: BufferedStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.BufferedStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.IO.BufferedStream.CanRead
  parent: System.IO.BufferedStream
  isExternal: false
  name: CanRead
  nameWithType: BufferedStream.CanRead
  fullName: System.IO.BufferedStream.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.BufferedStream.CanSeek
  parent: System.IO.BufferedStream
  isExternal: false
  name: CanSeek
  nameWithType: BufferedStream.CanSeek
  fullName: System.IO.BufferedStream.CanSeek
- uid: System.IO.BufferedStream.CanWrite
  parent: System.IO.BufferedStream
  isExternal: false
  name: CanWrite
  nameWithType: BufferedStream.CanWrite
  fullName: System.IO.BufferedStream.CanWrite
- uid: System.IO.BufferedStream.Dispose(System.Boolean)
  parent: System.IO.BufferedStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: BufferedStream.Dispose(Boolean)
  fullName: System.IO.BufferedStream.Dispose(Boolean)
- uid: System.IO.BufferedStream.EndRead(System.IAsyncResult)
  parent: System.IO.BufferedStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: BufferedStream.EndRead(IAsyncResult)
  fullName: System.IO.BufferedStream.EndRead(IAsyncResult)
- uid: System.IO.BufferedStream.EndWrite(System.IAsyncResult)
  parent: System.IO.BufferedStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: BufferedStream.EndWrite(IAsyncResult)
  fullName: System.IO.BufferedStream.EndWrite(IAsyncResult)
- uid: System.IO.BufferedStream.Flush
  parent: System.IO.BufferedStream
  isExternal: false
  name: Flush()
  nameWithType: BufferedStream.Flush()
  fullName: System.IO.BufferedStream.Flush()
- uid: System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.BufferedStream
  isExternal: false
  name: FlushAsync(CancellationToken)
  nameWithType: BufferedStream.FlushAsync(CancellationToken)
  fullName: System.IO.BufferedStream.FlushAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.IO.BufferedStream.Length
  parent: System.IO.BufferedStream
  isExternal: false
  name: Length
  nameWithType: BufferedStream.Length
  fullName: System.IO.BufferedStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.BufferedStream.Position
  parent: System.IO.BufferedStream
  isExternal: false
  name: Position
  nameWithType: BufferedStream.Position
  fullName: System.IO.BufferedStream.Position
- uid: System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.BufferedStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: BufferedStream.Read(Byte[],Int32,Int32)
  fullName: System.IO.BufferedStream.Read(Byte[],Int32,Int32)
- uid: System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.BufferedStream
  isExternal: false
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: BufferedStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.BufferedStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.BufferedStream.ReadByte
  parent: System.IO.BufferedStream
  isExternal: false
  name: ReadByte()
  nameWithType: BufferedStream.ReadByte()
  fullName: System.IO.BufferedStream.ReadByte()
- uid: System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.BufferedStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: BufferedStream.Seek(Int64,SeekOrigin)
  fullName: System.IO.BufferedStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.BufferedStream.SetLength(System.Int64)
  parent: System.IO.BufferedStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: BufferedStream.SetLength(Int64)
  fullName: System.IO.BufferedStream.SetLength(Int64)
- uid: System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.BufferedStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: BufferedStream.Write(Byte[],Int32,Int32)
  fullName: System.IO.BufferedStream.Write(Byte[],Int32,Int32)
- uid: System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.BufferedStream
  isExternal: false
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: BufferedStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.BufferedStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.IO.BufferedStream.WriteByte(System.Byte)
  parent: System.IO.BufferedStream
  isExternal: false
  name: WriteByte(Byte)
  nameWithType: BufferedStream.WriteByte(Byte)
  fullName: System.IO.BufferedStream.WriteByte(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.BufferedStream.#ctor*
  parent: System.IO.BufferedStream
  isExternal: false
  name: BufferedStream
  nameWithType: BufferedStream.BufferedStream
- uid: System.IO.BufferedStream.BeginRead*
  parent: System.IO.BufferedStream
  isExternal: false
  name: BeginRead
  nameWithType: BufferedStream.BeginRead
- uid: System.IO.BufferedStream.BeginWrite*
  parent: System.IO.BufferedStream
  isExternal: false
  name: BeginWrite
  nameWithType: BufferedStream.BeginWrite
- uid: System.IO.BufferedStream.CanRead*
  parent: System.IO.BufferedStream
  isExternal: false
  name: CanRead
  nameWithType: BufferedStream.CanRead
- uid: System.IO.BufferedStream.CanSeek*
  parent: System.IO.BufferedStream
  isExternal: false
  name: CanSeek
  nameWithType: BufferedStream.CanSeek
- uid: System.IO.BufferedStream.CanWrite*
  parent: System.IO.BufferedStream
  isExternal: false
  name: CanWrite
  nameWithType: BufferedStream.CanWrite
- uid: System.IO.BufferedStream.Dispose*
  parent: System.IO.BufferedStream
  isExternal: false
  name: Dispose
  nameWithType: BufferedStream.Dispose
- uid: System.IO.BufferedStream.EndRead*
  parent: System.IO.BufferedStream
  isExternal: false
  name: EndRead
  nameWithType: BufferedStream.EndRead
- uid: System.IO.BufferedStream.EndWrite*
  parent: System.IO.BufferedStream
  isExternal: false
  name: EndWrite
  nameWithType: BufferedStream.EndWrite
- uid: System.IO.BufferedStream.Flush*
  parent: System.IO.BufferedStream
  isExternal: false
  name: Flush
  nameWithType: BufferedStream.Flush
- uid: System.IO.BufferedStream.FlushAsync*
  parent: System.IO.BufferedStream
  isExternal: false
  name: FlushAsync
  nameWithType: BufferedStream.FlushAsync
- uid: System.IO.BufferedStream.Length*
  parent: System.IO.BufferedStream
  isExternal: false
  name: Length
  nameWithType: BufferedStream.Length
- uid: System.IO.BufferedStream.Position*
  parent: System.IO.BufferedStream
  isExternal: false
  name: Position
  nameWithType: BufferedStream.Position
- uid: System.IO.BufferedStream.Read*
  parent: System.IO.BufferedStream
  isExternal: false
  name: Read
  nameWithType: BufferedStream.Read
- uid: System.IO.BufferedStream.ReadAsync*
  parent: System.IO.BufferedStream
  isExternal: false
  name: ReadAsync
  nameWithType: BufferedStream.ReadAsync
- uid: System.IO.BufferedStream.ReadByte*
  parent: System.IO.BufferedStream
  isExternal: false
  name: ReadByte
  nameWithType: BufferedStream.ReadByte
- uid: System.IO.BufferedStream.Seek*
  parent: System.IO.BufferedStream
  isExternal: false
  name: Seek
  nameWithType: BufferedStream.Seek
- uid: System.IO.BufferedStream.SetLength*
  parent: System.IO.BufferedStream
  isExternal: false
  name: SetLength
  nameWithType: BufferedStream.SetLength
- uid: System.IO.BufferedStream.Write*
  parent: System.IO.BufferedStream
  isExternal: false
  name: Write
  nameWithType: BufferedStream.Write
- uid: System.IO.BufferedStream.WriteAsync*
  parent: System.IO.BufferedStream
  isExternal: false
  name: WriteAsync
  nameWithType: BufferedStream.WriteAsync
- uid: System.IO.BufferedStream.WriteByte*
  parent: System.IO.BufferedStream
  isExternal: false
  name: WriteByte
  nameWithType: BufferedStream.WriteByte
