### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.ExceptionHandler
  id: ExceptionHandler
  children:
  - System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  - System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  - System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  - System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  - System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  langs:
  - csharp
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler
  type: Class
  summary: "内で発生する未処理の例外に対する例外ハンドラーを作成する ExceptionHandler クラスを拡張、[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]ランタイム。"
  remarks: "ExceptionHandler クラスを拡張し、上書き、<xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>例外がアプリケーションを終了するかどうかを調べます</xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>。 カスタム ExceptionHandler クラスの新しいインスタンスを作成し、静的に割り当てる<xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>または<xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A>作成する前にプロパティ[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]クライアントまたはサービス</xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A></xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>。"
  example:
  - "The following code example shows an implementation of the ExceptionHandler abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.  \n  \n [!code-cs[S_UEExceptionHandler#0](~/add/codesnippet/csharp/s_ueexceptionhandler.cs/program.cs#0)]\n [!code-vb[S_UEExceptionHandler#0](~/add/codesnippet/visualbasic/s_ueexceptionhandler.cs/module1.vb#0)]  \n  \n The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] runtime.  \n  \n [!code-cs[S_UEExceptionHandler#1](~/add/codesnippet/csharp/s_ueexceptionhandler.cs/program.cs#1)]\n [!code-vb[S_UEExceptionHandler#1](~/add/codesnippet/visualbasic/s_ueexceptionhandler.cs/module1.vb#1)]"
  syntax:
    content: public abstract class ExceptionHandler
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: ExceptionHandler()
  nameWithType: ExceptionHandler.ExceptionHandler()
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.ExceptionHandler()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;> </xref>クラスです。"
  syntax:
    content: protected ExceptionHandler ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  id: AlwaysHandle
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "インスタンスを取得<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>すべての例外を処理します。"
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: "<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;> </xref>から返されるオブジェクト<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>すべての例外。"
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  id: AsynchronousThreadExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "現在の設定を取得または<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>アプリケーション ドメインの実装です。"
  remarks: "AsynchronousThreadExceptionHandler プロパティは、既定では、 `null`、未処理の非同期の例外と[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]スレッドは、アプリケーションを終了します。  このプロパティを設定、<xref:System.ServiceModel.Dispatcher.ExceptionHandler>を受信し、これらの例外に対応するオブジェクト</xref:System.ServiceModel.Dispatcher.ExceptionHandler>。       非同期でハンドルされない例外が発生した場合[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]スレッドおよびに達すると、アプリケーション ドメインの状態は、このハンドラーが危険にさらされる可能性があります。  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>返されません`true`で例外をします。</xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>"
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: "カスタムを割り当てる<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>オブジェクトを受信する未処理の非同期で発生する例外[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]スレッドです。"
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  id: HandleException(System.Exception)
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: HandleException(Exception)
  nameWithType: ExceptionHandler.HandleException(Exception)
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "派生クラスでオーバーライドされると<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>例外が処理された場合または<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>場合は、例外を再スローする必要がありますしてアプリケーションを終了します。"
  remarks: "HandleException プロパティから返される`true`例外が処理された場合。 返された場合`false`または別の例外、元の例外が再スローされる例外をスローします。"
  example:
  - "The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the HandleException method.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] runtime.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public abstract bool HandleException (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: "例外の発生内で、[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]ランタイムと、アプリケーションを終了させることがあります。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>例外が処理された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  id: TransportExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "現在のトランスポートの設定を取得または<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>アプリケーション ドメインの実装です。"
  remarks: "既定では、TransportExceptionHandler プロパティの値に<xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>、内の未処理の例外の原因と[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]無視するようにトランスポート</xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>。  インスタンスにこのプロパティを設定<xref:System.ServiceModel.Dispatcher.ExceptionHandler>を受信し、これらの例外に反応します</xref:System.ServiceModel.Dispatcher.ExceptionHandler>。       グローバル内でハンドルされない例外が発生した場合[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]トランスポートし、このハンドラーに達すると、アプリケーション ドメインの状態が侵害された可能性があります。 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>返すことができる`false`で、アプリケーションが終了する例外をします。</xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>"
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: "カスタム<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>オブジェクトを受信する未処理のグローバル内で発生する例外[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]トランスポート。"
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: ExceptionHandler()
  nameWithType: ExceptionHandler.ExceptionHandler()
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.ExceptionHandler()
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
- uid: System.ServiceModel.Dispatcher.ExceptionHandler
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: HandleException(Exception)
  nameWithType: ExceptionHandler.HandleException(Exception)
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: ExceptionHandler
  nameWithType: ExceptionHandler.ExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: HandleException
  nameWithType: ExceptionHandler.HandleException
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
