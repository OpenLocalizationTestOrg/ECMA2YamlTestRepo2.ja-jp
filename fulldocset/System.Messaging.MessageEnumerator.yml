### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageEnumerator
  id: MessageEnumerator
  children:
  - System.Messaging.MessageEnumerator.Close
  - System.Messaging.MessageEnumerator.Current
  - System.Messaging.MessageEnumerator.CursorHandle
  - System.Messaging.MessageEnumerator.Dispose
  - System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageEnumerator.MoveNext
  - System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.Reset
  - System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageEnumerator
  nameWithType: MessageEnumerator
  fullName: System.Messaging.MessageEnumerator
  type: Class
  summary: "メッセージ キュー内のメッセージを列挙するため、順方向専用カーソルを提供します。"
  remarks: "キュー内のメッセージの動的な対話を MessageEnumerator を使用します。 メソッドを介して使用できる、<xref:System.Messaging.MessageQueue>クラスは、指定したメソッドが呼び出された、キュー、または時に指定された時点のスナップショットのキューのコピーを格納する配列内のメッセージの動的な一覧を指すか、MessageEnumerator で返すことができます</xref:System.Messaging.MessageQueue>。       列挙子では、静的なスナップショットとは異なり、コレクションを変更できます。 MessageEnumerator を使用すると、キューからメッセージを削除することができ、変更がすぐにキューに反映されます。       キューを照会したときに、列挙子は、キューからメッセージを削除できません。 現在のカーソル位置にあるメッセージに関する情報を返しますが、メッセージはキューにそのままです。       MessageEnumerator は、カーソル、動的なリストの先頭に初期化します。 一覧の順序は、メッセージの優先順位に従って、キュー内のメッセージの順序と同じです。 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>。</xref:System.Messaging.MessageEnumerator.MoveNext%2A>を呼び出すことによって、キューの最初のメッセージにカーソルを移動することができます。 列挙子が初期化された後に行うこともできます<xref:System.Messaging.MessageEnumerator.MoveNext%2A>残りのメッセージを転送ステップ</xref:System.Messaging.MessageEnumerator.MoveNext%2A>。 使用可能になるにタイムアウトを渡すことによって、メッセージに対して待機するかどうかを指定することができます、<xref:System.Messaging.MessageEnumerator.MoveNext%2A>メソッド</xref:System.Messaging.MessageEnumerator.MoveNext%2A>。       列挙子は動的であるため (たとえば、ため低優先度)、カーソルの現在位置より後に追加するメッセージは、列挙子によってアクセスできます。 カーソルの現在位置にアクセスすることはできません前に挿入されているメッセージです。 ステップ後退、MessageEnumerator にすることはできません。 カーソルでは、順方向専用の移動が可能です。 <xref:System.Messaging.MessageEnumerator.Reset%2A>メソッドを使用すると、カーソルを置き、キューの先頭に戻ります</xref:System.Messaging.MessageEnumerator.Reset%2A>。       指定されたキューの MessageEnumerator のインスタンスは独立して動作します。 同一のキューに適用される&2; つの MessageEnumerator インスタンスを作成することができます。 キュー内のメッセージが&1; つ MessageEnumerator に加える変更は、2 番目の列挙子が&1; つ目の前に配置されている場合、2 番目の列挙子にすぐに反映されます。 ただし、2 つの列挙子が同じ位置にある場合、これらのいずれか、メッセージを削除位置に、例外がスローされます他の列挙子の値を取得しようとすると、<xref:System.Messaging.MessageEnumerator.Current%2A>削除メッセージのプロパティ</xref:System.Messaging.MessageEnumerator.Current%2A>。      > [!NOTE] > のインスタンスを作成する場合<xref:System.Messaging.MessageQueue>で<xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName>&quot;éý&quot; `true`、他のアプリケーションは変更できません、列挙子内のメッセージをキューに接続しているときにします</xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName></xref:System.Messaging.MessageQueue>。"
  example:
  - "The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority?displayProperty=fullName>.  \n  \n [!code-cs[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/csharp/t-system.messaging.messa_2_1.cs)]\n [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/cpp/t-system.messaging.messa_2_1.cpp)]\n [!code-vb[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_2_1.vb)]"
  syntax:
    content: 'public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Close
  id: Close
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "列挙子に関連付けられているリソースを解放します。"
  remarks: "オペレーティング システムでは、カーソルの有効期間中に、キューを開いているハンドルを保持します。 列挙子、呼び出しの閉じる操作が完了したら、ハンドルに関連付けられているリソースを解放します。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Current
  id: Current
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "現在の取得<xref href=&quot;System.Messaging.Message&quot;></xref>をこの列挙子が指しています。"
  remarks: "列挙子の作成時に、最初のメッセージより前に、の位置、キューの先頭を指します。 ここでは、現在が正しくないがアクセスされる場合、例外がスローされます。 呼び出す必要があります<xref:System.Messaging.MessageEnumerator.MoveNext%2A>にキューにある最初のメッセージをカーソルを移動します</xref:System.Messaging.MessageEnumerator.MoveNext%2A>。"
  syntax:
    content: public System.Messaging.Message Current { get; }
    return:
      type: System.Messaging.Message
      description: "現在のメッセージ。"
  overload: System.Messaging.MessageEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最初の呼び出しの前に現在を呼び出す<> *> です。カーソルは、メッセージの列挙の最初の要素の前に位置します。      - または - への呼び出し後に現在が呼び出される<> *> 返しました<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (カーソルを示す後に配置されるメッセージの列挙の最後の要素です)。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "列挙子が現在指して不要になったメッセージが存在します。 削除された可能性があります。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.CursorHandle
  id: CursorHandle
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "キューにメッセージを参照するために使用ネイティブのメッセージ キュー カーソル ハンドルを取得します。"
  remarks: "このプロパティには、列挙型へのネイティブ ハンドルが含まれています。 列挙子の操作が完了したら、呼び出す<xref:System.Messaging.MessageEnumerator.Close%2A>をこのリソースを解放します</xref:System.Messaging.MessageEnumerator.Close%2A>。"
  syntax:
    content: public IntPtr CursorHandle { get; }
    return:
      type: System.IntPtr
      description: "ネイティブなカーソルのハンドルです。"
  overload: System.Messaging.MessageEnumerator.CursorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "ハンドルが存在しません。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Messaging.MessageEnumerator&quot;></xref>です。"
  remarks: "Dispose を呼び出すことによりで使用されるリソース、<xref:System.Messaging.MessageEnumerator>を他の目的に再割り当てされます</xref:System.Messaging.MessageEnumerator>。 Dispose の詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック<xref:System.Messaging.MessageEnumerator.Dispose%2A>メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A></xref:System.Messaging.MessageEnumerator.Dispose%2A>。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Messaging.MessageEnumerator>参照。</xref:System.Messaging.MessageEnumerator> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "いずれかが現在使用可能な場合は、キュー内の次のメッセージに、列挙子を進めます。"
  remarks: "このオーバー ロードは、キューにメッセージがないかどうかに直ちに返されます。 指定したが待機する別のオーバー ロードがある<xref:System.TimeSpan>メッセージが到着するのです</xref:System.TimeSpan>。       メッセージがないかどうか現在使用可能なキューが空であるため、またはコレクション内の最後の要素より後に移動するため、MoveNext を返します`false`呼び出し元のメソッドです。       作成した場合、列挙子が概念的には、キューの最初のメッセージの前に配置されているし、MoveNext への最初の呼び出し、キューの最初のメッセージを表示します。"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列挙子が次のメッセージに詳細に成功した場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>列挙子は、キューの末尾に達した場合。"
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "メッセージ キューに固有の例外がスローされました。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  id: MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "次のメッセージをキューに、列挙子を進めます。 列挙子が、キューの末尾に配置されている場合<xref:System.Messaging.MessageEnumerator.MoveNext*>メッセージが利用するか、指定したタイムアウト時間の有効期限が切れるまで待機します</xref:System.Messaging.MessageEnumerator.MoveNext*>。"
  remarks: "このオーバー ロードは、キューにメッセージがない場合、またはカーソルは、キューの末尾に達した場合を待機します。 キューが空であるため、または、コレクション内の最後の要素より後に移動するため、メッセージを現在使用可能なことができない場合<xref:System.Messaging.MessageEnumerator.MoveNext%2A>指定したタイムアウト時間を待機します</xref:System.Messaging.MessageEnumerator.MoveNext%2A>。       場合は、キューの末尾にカーソルは既に<xref:System.Messaging.MessageEnumerator.MoveNext%2A>のみが返されます`true`場合は、指定された時間間隔内で新しいメッセージが到着すると、すべてのメッセージよりも優先順位の低い現在キューがありは、キューの末尾に置かれます</xref:System.Messaging.MessageEnumerator.MoveNext%2A>。 パラメーターなしのオーバー ロードは、キューにこれ以上メッセージがないかどうかに直ちに返されます。       作成時に列挙子は概念的には、列挙、および最初の呼び出しの最初のメッセージの前に配置<xref:System.Messaging.MessageEnumerator.MoveNext%2A>ビューには、列挙体の最初のメッセージを表示します</xref:System.Messaging.MessageEnumerator.MoveNext%2A>。"
  syntax:
    content: public bool MoveNext (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>列挙子がキューの末尾に配置されている場合に使用するメッセージを待機します</xref:System.TimeSpan>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列挙子は、次のメッセージに正常に進んだ場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>列挙子は、キューの末尾に達したし、メッセージがで指定された時間内では使用可能なならない場合、 <code> timeout </code>パラメーター。"
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "タイムアウト パラメーターに指定された値が正しくありません。 負の数を表すことができます。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "メッセージ キューに固有の例外がスローされました。       - または - タイムアウトの有効期限が切れました。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  id: RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "トランザクションまたは非トランザクション キューから現在のメッセージを削除し、呼び出し元アプリケーションにメッセージを返します。 キューに到着するメッセージの指定したタイムアウト値はありません。"
  remarks: "RemoveCurrent は削除し、カーソルの現在の場所でメッセージを返します。       メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします</xref:System.Messaging.MessageQueue.Receive%2A></xref:System.Messaging.MessageQueue>。       現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 呼び出していない<xref:System.Messaging.MessageEnumerator.MoveNext%2A>RemoveCurrent を呼び出した後</xref:System.Messaging.MessageEnumerator.MoveNext%2A>。       トランザクション キューでこのオーバー ロードを呼び出すと、メッセージ キューは&1; つの内部トランザクションを作成します。"
  syntax:
    content: public System.Messaging.Message RemoveCurrent ();
    parameters: []
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>キューで利用可能な最初のメッセージを参照します。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "トランザクション キューから現在のメッセージを削除し、呼び出し元アプリケーションにメッセージを返します。 キューに到着するメッセージの指定したタイムアウト値はありません。"
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>削除し、によって定義された内部トランザクション コンテキストを使用して、カーソルの現在の場所でメッセージを返します、`transaction`パラメーター。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします</xref:System.Messaging.MessageQueue.Receive%2A></xref:System.Messaging.MessageQueue>。       トランザクション キューを使用する場合、トランザクションのロールバックするへの呼び出しによって削除されたすべてのメッセージ<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>キューに返される</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。 トランザクションがコミットされるまで、取り外しは取り消すことができません。       現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>の呼び出し後に</xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出す必要はありません。"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "<xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>でメッセージを削除するトランザクションを指定するオブジェクト。"
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>キューで利用可能な最初のメッセージを参照します。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "現在のメッセージをキューから削除し、呼び出し元のアプリケーションにメッセージを返します。 キューに到着するメッセージの指定したタイムアウト値はありません。"
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>削除しで定義されたトランザクション コンテキストを使用して、カーソルの現在位置にあるメッセージを返します、`transactionType`パラメーター。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       指定`Automatic`の`transactionType`パラメーター外部トランザクション コンテキストが既に存在する場合は、メッセージの受信に使用する場合、スレッドにアタッチします。 指定`Single`単一の内部トランザクションとしてメッセージを受信する場合。 指定できます`None`トランザクション コンテキストの外部でトランザクション キューからメッセージを受信する場合。       メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします</xref:System.Messaging.MessageQueue.Receive%2A></xref:System.Messaging.MessageQueue>。       トランザクション キューを使用する場合、トランザクションのロールバックするへの呼び出しによって削除されたすべてのメッセージ<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>キューに返される</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。 トランザクションがコミットされるまで、取り外しは取り消すことができません。       現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>の呼び出し後に</xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出す必要はありません。"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "1 つ、 <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref>メッセージと関連付けるトランザクション コンテキストの型を記述する値。"
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>キューで利用可能な最初のメッセージを参照します。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code> transactionType </code>パラメーターは、のいずれかではない、 <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref>メンバー。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  id: RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "現在のメッセージをキューから削除して、呼び出し元のアプリケーションにメッセージを返します。 削除するメッセージがある場合、メソッドを返します、すぐにします。 それ以外の場合、メソッドは、新しいメッセージが到着する指定のタイムアウトを待機します。"
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>削除し、カーソルの現在の場所でメッセージを返します。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> キューの末尾にカーソルがある場合、メソッドのこのオーバー ロードを待つ、メッセージが利用可能かで指定される間隔、`timeout`パラメーターの有効期限が切れました。       メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします</xref:System.Messaging.MessageQueue.Receive%2A></xref:System.Messaging.MessageQueue>。       現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>の呼び出し後に</xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出す必要はありません。       トランザクション キューでこのオーバー ロードを呼び出すと、メッセージ キューは&1; つの内部トランザクションを作成します。"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "メッセージがキューに到達するまで待機する時間間隔。"
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>キューで利用可能な最初のメッセージを参照します。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された値、 <code> timeout </code>パラメーターが無効です。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "タイムアウトの有効期限が切れました。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "トランザクション キューから現在のメッセージを削除し、呼び出し元アプリケーションにメッセージを返します。 削除するメッセージがある場合、メソッドを返します、すぐにします。 それ以外の場合、メソッドは、新しいメッセージが到着する指定のタイムアウトを待機します。"
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>削除し、カーソルの現在の場所でメッセージを返します。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> キューの末尾にカーソルがある場合、メソッドのこのオーバー ロードを待つ、メッセージが利用可能かで指定される間隔、`timeout`パラメーターの有効期限が切れました。       トランザクション キューを使用する場合、トランザクションのロールバックするへの呼び出しによって削除されたすべてのメッセージ<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>キューに返される</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。 トランザクションがコミットされるまで、取り外しは取り消すことができません。       メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします</xref:System.Messaging.MessageQueue.Receive%2A></xref:System.Messaging.MessageQueue>。       現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>の呼び出し後に</xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出す必要はありません。"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "削除するメッセージを待機する時間間隔。"
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "<xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>メッセージのトランザクション コンテキストを指定するオブジェクト。"
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>キューで利用可能な最初のメッセージを参照します。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された値、 <code> timeout </code>パラメーターが無効です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "タイムアウトの有効期限が切れました。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "現在のメッセージをキューから削除し、呼び出し元のアプリケーションにメッセージを返します。 削除するメッセージがある場合、メソッドを返します、すぐにします。 それ以外の場合、メソッドは、新しいメッセージが到着する指定のタイムアウトを待機します。"
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>削除しで定義されたトランザクション コンテキストを使用して、カーソルの現在位置にあるメッセージを返します、`transactionType`パラメーター。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> キューの末尾にカーソルがある場合、メソッドのこのオーバー ロードを待つ、メッセージが利用可能かで指定される間隔、`timeout`パラメーターの有効期限が切れました。       指定`Automatic`の`transactionType`パラメーター外部トランザクション コンテキストが既に存在する場合は、メッセージの受信に使用する場合、スレッドにアタッチします。 指定`Single`単一の内部トランザクションとしてメッセージを受信する場合。 指定できます`None`トランザクション コンテキストの外部でトランザクション キューからメッセージを受信する場合。       メッセージの削除によりと同様に、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、<xref:System.Messaging.MessageQueue>クラスの<xref:System.Messaging.MessageQueue.Receive%2A>メソッドします</xref:System.Messaging.MessageQueue.Receive%2A></xref:System.Messaging.MessageQueue>。       トランザクション キューを使用する場合、トランザクションのロールバックするへの呼び出しによって削除されたすべてのメッセージ<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>キューに返される</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。 トランザクションがコミットされるまで、取り外しは取り消すことができません。       現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>の呼び出し後に</xref:System.Messaging.MessageEnumerator.MoveNext%2A>呼び出す必要はありません。"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "削除するメッセージを待機する時間間隔。"
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "1 つ、 <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref>メッセージと関連付けるトランザクション コンテキストの型を記述する値。"
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>キューで利用可能な最初のメッセージを参照します。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された値、 <code> timeout </code>パラメーターが無効です。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "タイムアウトの有効期限が切れました。"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code> transactionType </code>パラメーターは、のいずれかではない、 <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref>メンバー。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "キューの先頭を指すように、現在の列挙子をリセットします。"
  remarks: "列挙子は、順方向にのみ移動できます。 キューの先頭に最初からやり直すには、このメソッドを使用します。       リセットを呼び出した後は、カーソルは、最初のメッセージを指します。 呼び出す必要はありません<xref:System.Messaging.MessageEnumerator.MoveNext%2A>にカーソルを移動する Reset の呼び出し後に、キューの最初のメッセージを転送します</xref:System.Messaging.MessageEnumerator.MoveNext%2A>。"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "返します、 <xref href=&quot;System.Messaging.Message&quot;> </xref>現在のカーソル位置にあるメッセージを参照します。"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>現在のカーソル位置にあるメッセージを参照します。"
  overload: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Messaging.MessageEnumerator.Close
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
- uid: System.Messaging.MessageEnumerator.Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.MessageEnumerator.CursorHandle
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageEnumerator.Dispose
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageEnumerator.MoveNext
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
- uid: System.Messaging.MessageQueueTransaction
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
- uid: System.Messaging.MessageQueueTransactionType
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionType
  nameWithType: MessageQueueTransactionType
  fullName: System.Messaging.MessageQueueTransactionType
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
- uid: System.Messaging.MessageEnumerator.Reset
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageEnumerator.Close*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageEnumerator.Close
- uid: System.Messaging.MessageEnumerator.Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
- uid: System.Messaging.MessageEnumerator.CursorHandle*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
- uid: System.Messaging.MessageEnumerator.Dispose*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageEnumerator.Dispose
- uid: System.Messaging.MessageEnumerator.MoveNext*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageEnumerator.MoveNext
- uid: System.Messaging.MessageEnumerator.RemoveCurrent*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent
  nameWithType: MessageEnumerator.RemoveCurrent
- uid: System.Messaging.MessageEnumerator.Reset*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageEnumerator.Reset
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
