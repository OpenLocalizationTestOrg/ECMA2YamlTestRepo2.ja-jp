### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlReader
  id: XamlReader
  children:
  - System.Xaml.XamlReader.#ctor
  - System.Xaml.XamlReader.Close
  - System.Xaml.XamlReader.Dispose(System.Boolean)
  - System.Xaml.XamlReader.IsDisposed
  - System.Xaml.XamlReader.IsEof
  - System.Xaml.XamlReader.Member
  - System.Xaml.XamlReader.Namespace
  - System.Xaml.XamlReader.NodeType
  - System.Xaml.XamlReader.Read
  - System.Xaml.XamlReader.ReadSubtree
  - System.Xaml.XamlReader.SchemaContext
  - System.Xaml.XamlReader.Skip
  - System.Xaml.XamlReader.System#IDisposable#Dispose
  - System.Xaml.XamlReader.Type
  - System.Xaml.XamlReader.Value
  langs:
  - csharp
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
  type: Class
  summary: "XAML 入力を処理し、XAML ノード ストリームを生成するクラスの基本定義を提供します。"
  remarks: "XamlReader は抽象クラスであり、実装や作業結果があるすべてのメンバーの定義を提供しません。 XamlReader で、実装ではメンバーは、そのメンバーの「解説」に記載されていますいます。 具体的には、XamlReader では、実装する必要があるいくつかの抽象メンバーといくつかの仮想メンバーがあります。       仮想メンバーの<xref:System.Xaml.XamlReader.ReadSubtree%2A>と<xref:System.Xaml.XamlReader.Skip%2A>各ほとんどの場合に適切な既定の実装を提供します</xref:System.Xaml.XamlReader.Skip%2A></xref:System.Xaml.XamlReader.ReadSubtree%2A>。 ただし、<xref:System.Xaml.XamlReader.ReadSubtree%2A>と<xref:System.Xaml.XamlReader.Skip%2A>実装の XAML リーダーの他の予期される動作に依存して既定の実装です具体的には、依存している、<xref:System.Xaml.XamlReader.Read%2A>をオーバーライドします。</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> 。 <xref:System.Xaml.XamlReader.Dispose%2A>作業用の既定の実装を持つ仮想メンバーです。</xref:System.Xaml.XamlReader.Dispose%2A>       次の&2; つのクラスは、最も関連して、実用的な派生と System.Xaml アセンブリの .NET Framework XAML サービスのクラス:- <xref:System.Xaml.XamlObjectReader>、実行時にアプリケーションのアクティブなオブジェクト グラフなど、オブジェクト グラフを読み取ります</xref:System.Xaml.XamlObjectReader>。      -<xref:System.Xaml.XamlXmlReader><xref:System.Xml.XmlReader>中間ヘルパー クラスとしてファイルを読み込む</xref:System.Xml.XmlReader>の [全般] を使用して XML テキスト ファイルの形式で XAML を読み取りますが、</xref:System.Xaml.XamlXmlReader>       その他のフレームワークから他の XAML リーダー、<xref:System.Windows.Baml2006.Baml2006Reader>および<xref:System.Activities.Debugger.XamlDebuggerXmlReader>。</xref:System.Activities.Debugger.XamlDebuggerXmlReader> </xref:System.Windows.Baml2006.Baml2006Reader>       XamlReader とは異なります[!INCLUDE[TLA#tla_xmldom](~/add/includes/tlasharptla-xmldom-md.md)]と<xref:System.Xml.XmlReader>XamlReader があるないためにのデザイン原則を`Create`基になる既定の XAML リーダーの実装を返すメソッドを</xref:System.Xml.XmlReader>。 代わりに、そのコンス トラクターまたはその他のクラスに固有のヘルパー Api を呼び出すことによって派生の特定の XAML リーダー クラスをインスタンス化する必要があります。      ## ほとんどのリーダーのサブツリー、XamlReader から派生する特定の XAML リーダー クラスのコンテキストで XamlReader API を呼び出します。 ただし、特定の&1; つのケースではアクセス XamlReader API とパブリックでない<xref:System.Xaml.XamlObjectReader>または<xref:System.Xaml.XamlXmlReader>.</xref:System.Xaml.XamlXmlReader></xref:System.Xaml.XamlObjectReader>から派生ではない実用的な XAML リーダー インスタンスの この例を呼び出すときは、 <xref:System.Xaml.XamlReader.ReadSubtree%2A>、XamlReader インスタンスが返されます</xref:System.Xaml.XamlReader.ReadSubtree%2A>。 既定の実装では、この API によって返される XamlReader は、内部クラスです。       サブツリーの読み取りなど、Api の有効なアクションには、XamlReader が取得された<xref:System.Xaml.XamlReader.Read%2A>と<xref:System.Xaml.XamlReader.NodeType%2A>、それらのアクションが親リーダー クラスに基づいています</xref:System.Xaml.XamlReader.NodeType%2A></xref:System.Xaml.XamlReader.Read%2A> この設計により、内部クラスのサブツリーが入力されたフレームのレベルを追跡するためになります。 機能を実行するサブツリー XamlReader により、現在のノードの位置は、サブツリーの境界外に移動する場合は、特定のサブツリー リーダー ファイルの終端と報告されることを確認または`null`現在のノードにします。       特定の XamlReader Api では、サブツリーのリーダーの使用状況に関する注意事項が含まれています。"
  syntax:
    content: 'public abstract class XamlReader : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.#ctor
  id: '#ctor'
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初期化、 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref>クラスです。"
  syntax:
    content: protected XamlReader ();
    parameters: []
  overload: System.Xaml.XamlReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Close
  id: Close
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "XAML ノード ストリームを閉じます。"
  remarks: "基底クラスの実装では、Close の呼び出しを呼び出して<xref:System.Xaml.XamlReader.Dispose%2A>で、`isDisposing`パラメーターとして`true`</xref:System.Xaml.XamlReader.Dispose%2A>。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Xaml.XamlReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref>、し、必要に応じてマネージ リソースも解放します。"
  remarks: "取得する基本クラスを呼び出す必要があります<xref:System.Xaml.XamlReader.IsDisposed%2A>= `true`</xref:System.Xaml.XamlReader.IsDisposed%2A> 。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ リソースを解放するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xaml.XamlReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsDisposed
  id: IsDisposed
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "取得するかどうか<xref:System.Xaml.XamlReader.Dispose*>呼び出されました</xref:System.Xaml.XamlReader.Dispose*>。"
  syntax:
    content: protected bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<xref:System.Xaml.XamlReader.Dispose*>と呼ばれる、それ以外のされました<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Xaml.XamlReader.Dispose*> 。"
  overload: System.Xaml.XamlReader.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsEof
  id: IsEof
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生クラスとして実装された場合は、リーダーの位置が、ファイルの終端にするかどうかを示す値を取得します。"
  remarks: "サブツリーのリーダーは、入力されたサブツリーの境界を正しく反映して動作を持つ IsEof を呼び出すことができます。 詳細についてを参照してください「サブツリー リーダー」 <xref:System.Xaml.XamlReader>、または参照してください<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool IsEof { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>位置が、XAML ノード ストリームの概念ファイルの末尾にある場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xaml.XamlReader.IsEof*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Member
  id: Member
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生クラスで実装された場合、現在のメンバーを取得リーダーの位置では、リーダーの位置は場合、 <xref href=&quot;System.Xaml.XamlNodeType&quot;></xref>です。"
  remarks: "サブツリーのリーダーは、動作の制限があります、メンバーを呼び出すことができます。 詳細についてを参照してください「サブツリー リーダー」 <xref:System.Xaml.XamlReader>、または参照してください<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlMember Member { get; }
    return:
      type: System.Xaml.XamlMember
      description: "現在のメンバー。または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>リーダーの位置がメンバーでない場合、します。"
  overload: System.Xaml.XamlReader.Member*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Namespace
  id: Namespace
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生クラスとして実装された場合は、現在のノードから XAML 名前空間情報を取得します。"
  remarks: "この API の目的の設計が<xref:System.Xaml.XamlReader.NodeType%2A><xref:System.Xaml.XamlNodeType>。</xref:System.Xaml.XamlNodeType>は、現在のノードの</xref:System.Xaml.XamlReader.NodeType%2A>場合は null 以外の結果のみを返すには プロパティでは、XAML スキーマ コンテキストで解釈されるよう、オブジェクトまたは一般的なスコープの意味、メンバーに適用される XAML 名前空間は報告されません。 アプリケーションは、機能の情報をキャッシュするための手段を提供する必要がありますのでの XAML 名前空間は、方法、XAML スキーマ コンテキストにレポートをそのライター以外の方法では、その情報が必要な場合、XAML ノードを通過する時間します。 参照してください<xref:System.Xaml.XamlXmlReader.Namespace%2A>の参照の実装に関する注意事項</xref:System.Xaml.XamlXmlReader.Namespace%2A>。"
  syntax:
    content: public abstract System.Xaml.NamespaceDeclaration Namespace { get; }
    return:
      type: System.Xaml.NamespaceDeclaration
      description: "使用可能である場合の XAML 名前空間については、それ以外の場合、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xaml.XamlReader.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.NodeType
  id: NodeType
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生クラスとして実装された場合は、現在のノードの種類を取得します。"
  remarks: "サブツリーのリーダーは、動作の制限があります NodeType を呼び出すことができます。 詳細についてを参照してください「サブツリー リーダー」 <xref:System.Xaml.XamlReader>、または参照してください<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlNodeType NodeType { get; }
    return:
      type: System.Xaml.XamlNodeType
      description: "値、 <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>列挙します。"
  overload: System.Xaml.XamlReader.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Read
  id: Read
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生クラスとして実装された場合は、ノードがある場合、ソースから次の XAML ノードを提供します。"
  remarks: "サブツリーのリーダーは、動作の制限を読み取りを呼び出すことができます。 詳細についてを参照してください「サブツリー リーダー」 <xref:System.Xaml.XamlReader>、または参照してください<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ノードがある場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xaml.XamlReader.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.ReadSubtree
  id: ReadSubtree
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返します、 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref>現在に基づく<xref href=&quot;System.Xaml.XamlReader&quot;></xref>ここで、返された<xref href=&quot;System.Xaml.XamlReader&quot;> </xref> XAML ノードの構造のサブツリーを反復処理するために使用します。"
  remarks: "このメソッドは、既定の実装を持つし、有効な<xref:System.Xaml.XamlReader>。</xref:System.Xaml.XamlReader>を返します 返された<xref:System.Xaml.XamlReader>特定を制限する内部クラスは、<xref:System.Xaml.XamlReader>アクション</xref:System.Xaml.XamlReader></xref:System.Xaml.XamlReader>。 制限は次元設定されたサブツリーの XAML ノード セットは、大規模ソースとファイルの終端を返すだけに読み取り目的に設定された一貫性のあるまたは`null`サブツリーが終了したときに、現在のノードにします。       一般に、最初から現在のノードを確認する必要があります<xref:System.Xaml.XamlReader.Read%2A>サブツリー リーダーが必要かどうかを判断する</xref:System.Xaml.XamlReader.Read%2A>。 これをチェックする方法があります実装に固有です。ただし、すべてのサブツリーの複数のサブツリー リーダーを作成しないでください。 さらに、特定のノードのケースのサブツリー リーダーの呼び出しを回避する (たとえば、 <xref:System.Xaml.XamlNodeType>) ノードのサブツリーを含めることはできません</xref:System.Xaml.XamlNodeType>。       サブツリーのリーダーを取得した後に呼び出す必要があります<xref:System.Xaml.XamlReader.Read%2A>現在のノードを取得することで (呼び出しまたは<xref:System.Xaml.XamlReader.Skip%2A>次のノードを取得する).</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.Read%2A> 自動的に取得しない初期ノード位置サブツリー リーダーから作成するときにします。       この既定の実装から ReadSubtree を呼び出すことによって取得するリーダーは、内部クラスです。 内部クラスに基づいて、その動作、 <xref:System.Xaml.XamlReader>ReadSubtree が呼び出されたときに使用されている実装</xref:System.Xaml.XamlReader>。 内部クラスの目的は、ラップする、<xref:System.Xaml.XamlReader.Read%2A>と一般的な走査の各動作</xref:System.Xaml.XamlReader.Read%2A>。 走査まま、目的のサブツリー内で追跡することにより<xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType>ペアまたは<xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType>ペア</xref:System.Xaml.XamlNodeType></xref:System.Xaml.XamlNodeType></xref:System.Xaml.XamlNodeType></xref:System.Xaml.XamlNodeType>。 正しく返す`false`の<xref:System.Xaml.XamlReader.Read%2A>と`true`の<xref:System.Xaml.XamlReader.IsEof%2A>ときにリーダーが配置されて、サブツリーの最後のエントリ ポイントで定義されている</xref:System.Xaml.XamlReader.IsEof%2A></xref:System.Xaml.XamlReader.Read%2A>。 一般に、想定すること、<xref:System.Xaml.XamlReader>サブツリー リーダーから呼び出し API は、全体的なと同じ実装<xref:System.Xaml.XamlReader>動作を境界の検査を除く</xref:System.Xaml.XamlReader></xref:System.Xaml.XamlReader>。       ただし、ReadSubtree は、仮想です。 したがって、特定<xref:System.Xaml.XamlReader>実装とは異なる動作を提供できます、<xref:System.Xaml.XamlReader>内部ラッパーの動作と<xref:System.Xaml.XamlReader>実装でもを無効にできますサブツリー リーダー機能を返すことによって<xref:System.NotImplementedException>またはその他の例外です</xref:System.NotImplementedException></xref:System.Xaml.XamlReader></xref:System.Xaml.XamlReader></xref:System.Xaml.XamlReader>。"
  syntax:
    content: public virtual System.Xaml.XamlReader ReadSubtree ();
    parameters: []
    return:
      type: System.Xaml.XamlReader
      description: "サブツリーの新しい XAML リーダー インスタンス。"
  overload: System.Xaml.XamlReader.ReadSubtree*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.SchemaContext
  id: SchemaContext
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生クラスとして実装された場合は、情報セットの XAML スキーマ コンテキスト情報を提供するオブジェクトを取得します。"
  syntax:
    content: public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }
    return:
      type: System.Xaml.XamlSchemaContext
      description: "については、XAML スキーマ コンテキスト情報を提供するオブジェクトを設定します。"
  overload: System.Xaml.XamlReader.SchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Skip
  id: Skip
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "現在のノードをスキップし、次のノードにリーダーの位置を進めます。"
  remarks: "1 回スキップ、 <xref:System.Xaml.XamlReader.Read%2A>Skip 実装、既定により呼び出されます</xref:System.Xaml.XamlReader.Read%2A>。 通常呼び出さない Skip と<xref:System.Xaml.XamlReader.Read%2A>順番</xref:System.Xaml.XamlReader.Read%2A>。       によって既定 Skip 実装では、さまざまな操作が実行される<xref:System.Xaml.XamlReader.NodeType%2A>リーダーの位置が現在オン</xref:System.Xaml.XamlReader.NodeType%2A>。 リーダーの位置が現在の場合、<xref:System.Xaml.XamlNodeType>または<xref:System.Xaml.XamlNodeType>、そのメンバーまたはオブジェクトはスキップされます</xref:System.Xaml.XamlNodeType></xref:System.Xaml.XamlNodeType>。 その他の<xref:System.Xaml.XamlReader.NodeType%2A>値、何も処理呼び出し以外<xref:System.Xaml.XamlReader.Read%2A>現在の位置から</xref:System.Xaml.XamlReader.Read%2A></xref:System.Xaml.XamlReader.NodeType%2A>。       サブツリー リーダーは、動作の制限をスキップ を呼び出すことができます。 詳細についてを参照してください「サブツリー リーダー」 <xref:System.Xaml.XamlReader>、または参照してください<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>       スキップのノード ツリーの動作は同等の XML <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>.</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>に基づいてください。 に基づいて、<xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>ノードとそのサブツリーでは、1 つのエントリのノードだけでなく動作の等価性、Skip をスキップします</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>。"
  syntax:
    content: public virtual void Skip ();
    parameters: []
  overload: System.Xaml.XamlReader.Skip*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "現在のインスタンスによって使用されるすべてのリソースを解放、 <xref href=&quot;System.Xaml.XamlReader&quot;> </xref>クラスです。"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Xaml.XamlReader.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Type
  id: Type
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生クラスで実装された場合、取得、 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>現在のノードです。"
  remarks: "サブツリーのリーダーは、動作の制限がありますの種類を呼び出すことができます。 詳細についてを参照してください「サブツリー リーダー」 <xref:System.Xaml.XamlReader>、または参照してください<xref:System.Xaml.XamlReader.ReadSubtree%2A>.</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> ; 現在のノードのまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>現在リーダーが配置されていないオブジェクトの場合は、します。"
  overload: System.Xaml.XamlReader.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Value
  id: Value
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生クラスとして実装された場合は、現在のノードの値を取得します。"
  syntax:
    content: public abstract object Value { get; }
    return:
      type: System.Object
      description: "現在のノードの値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、現在のリーダーの位置に含まれていない場合、 <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>ノードの種類。"
  overload: System.Xaml.XamlReader.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xaml.XamlReader.#ctor
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
- uid: System.Xaml.XamlReader.Close
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlReader.IsDisposed
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlReader.Namespace
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
- uid: System.Xaml.NamespaceDeclaration
  parent: System.Xaml
  isExternal: false
  name: NamespaceDeclaration
  nameWithType: NamespaceDeclaration
  fullName: System.Xaml.NamespaceDeclaration
- uid: System.Xaml.XamlReader.NodeType
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
- uid: System.Xaml.XamlNodeType
  parent: System.Xaml
  isExternal: false
  name: XamlNodeType
  nameWithType: XamlNodeType
  fullName: System.Xaml.XamlNodeType
- uid: System.Xaml.XamlReader.Read
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
- uid: System.Xaml.XamlReader.ReadSubtree
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
- uid: System.Xaml.XamlReader
  parent: System.Xaml
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
- uid: System.Xaml.XamlReader.SchemaContext
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlReader.Skip
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
- uid: System.Xaml.XamlReader.Type
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlReader.Value
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
- uid: System.Xaml.XamlReader.#ctor*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader.XamlReader
- uid: System.Xaml.XamlReader.Close*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close
  nameWithType: XamlReader.Close
- uid: System.Xaml.XamlReader.Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose
  nameWithType: XamlReader.Dispose
- uid: System.Xaml.XamlReader.IsDisposed*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
- uid: System.Xaml.XamlReader.Namespace*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
- uid: System.Xaml.XamlReader.NodeType*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
- uid: System.Xaml.XamlReader.Read*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read
  nameWithType: XamlReader.Read
- uid: System.Xaml.XamlReader.ReadSubtree*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree
  nameWithType: XamlReader.ReadSubtree
- uid: System.Xaml.XamlReader.SchemaContext*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
- uid: System.Xaml.XamlReader.Skip*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip
  nameWithType: XamlReader.Skip
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: XamlReader.System.IDisposable.Dispose
- uid: System.Xaml.XamlReader.Type*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
- uid: System.Xaml.XamlReader.Value*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
