### YamlMime:ManagedReference
items:
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  id: DbExpressionBuilder
  children:
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbAggregate@,System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbExpression@,System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Common.CommandTrees.DbExpression@,System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Metadata.Edm.TypeUsage@,System.Object)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression[])
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Metadata.Edm.EntityType,System.Data.Common.CommandTrees.DbExpression[])
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpressionBinding})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Common.CommandTrees.DbExpression@,System.String,System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Common.CommandTrees.DbGroupExpressionBinding@,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda@,System.Data.Common.CommandTrees.DbExpression[])
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression[])
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression[])
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.RelationshipEndMember,System.Data.Metadata.Edm.RelationshipEndMember)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Metadata.Edm.RelationshipType@,System.String,System.String,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage@,System.Data.Common.CommandTrees.DbExpression[])
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Common.CommandTrees.DbExpression[])
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Metadata.Edm.TypeUsage@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Metadata.Edm.TypeUsage@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Metadata.Edm.TypeUsage@,System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.EdmProperty)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.NavigationProperty)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.RelationshipEndMember)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.EntityType)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Metadata.Edm.EntitySetBase@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,``0})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbSortExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause},System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression@,System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression@,System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Common.CommandTrees.DbExpression@)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Metadata.Edm.TypeUsage@,System.String)
  - System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  langs:
  - csharp
  name: DbExpressionBuilder
  nameWithType: DbExpressionBuilder
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  type: Class
  summary: "構築するために API を提供<xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>s でき、式の型自体の拡張メソッドとしてアクセスする API。"
  syntax:
    content: public static class DbExpressionBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression)
  id: Aggregate(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Aggregate(EdmFunction,DbExpression)
  nameWithType: DbExpressionBuilder.Aggregate(EdmFunction,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(EdmFunction,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbFunctionAggregate&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbFunctionAggregate Aggregate (this System.Data.Metadata.Edm.EdmFunction function, System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: function
      type: System.Data.Metadata.Edm.EdmFunction
      description: "集計の操作を定義する関数。"
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "集計関数の計算される引数。"
    return:
      type: System.Data.Common.CommandTrees.DbFunctionAggregate
      description: "新しい関数が指定された関数および引数への参照で集計します。 関数の集計の個別のプロパティの値を持つ<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>function</code>または<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>function</code>集計関数ではありませんまたはが&1; つ以上の引数の結果型<code>argument</code>が等しくないか昇格可能なのパラメーターの型を<code>function</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression)
  id: AggregateDistinct(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: AggregateDistinct(EdmFunction,DbExpression)
  nameWithType: DbExpressionBuilder.AggregateDistinct(EdmFunction,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(EdmFunction,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbFunctionAggregate&quot;></xref>個別的に適用されています。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbFunctionAggregate AggregateDistinct (this System.Data.Metadata.Edm.EdmFunction function, System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: function
      type: System.Data.Metadata.Edm.EdmFunction
      description: "集計の操作を定義する関数。"
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "集計関数の計算される引数。"
    return:
      type: System.Data.Common.CommandTrees.DbFunctionAggregate
      description: "新しい関数が指定された関数および引数への参照で集計します。 関数の集計の個別のプロパティの値を持つ<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>function</code>または<code>argument</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>function</code>集計関数ではありませんまたはが&1; つ以上の引数の結果型<code>argument</code>が等しくないか昇格可能なのパラメーターの型を<code>function</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: All(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: All(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.All(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(DbExpression,Func<DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbQuantifierExpression&quot;></xref>入力セットのすべての要素の指定された述語を保持しているかどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbQuantifierExpression All (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> predicate);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    - id: predicate
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "入力セットのメンバーごとに評価する述語を表すメソッド。    このメソッドは、述語のロジックを提供するブール型の結果の型を持つ式を生成する必要があります。"
    return:
      type: System.Data.Common.CommandTrees.DbQuantifierExpression
      description: "すべての操作を表す新しい DbQuantifierExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> predicate </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> Predicate </code>ブール型の結果の型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  id: All(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: All(DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.All(DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(DbExpressionBinding,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbQuantifierExpression&quot;></xref>入力セットのすべての要素の指定された述語を保持しているかどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbQuantifierExpression All (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpression predicate);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "バインディングを式では、入力セットを指定します。"
    - id: predicate
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットの各メンバーに評価する述語を表す式を指定します。"
    return:
      type: System.Data.Common.CommandTrees.DbQuantifierExpression
      description: "すべての操作を表す新しい DbQuantifierExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>または<code>predicate</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>predicate</code>ブール型の結果の型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: And(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: And(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.And(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "作成、 <xref href=&quot;System.Data.Common.CommandTrees.DbAndExpression&quot;> </xref>論理的および左と右の引数を実行します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbAndExpression And (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定するブール式です。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定するブール式です。"
    return:
      type: System.Data.Common.CommandTrees.DbAndExpression
      description: "指定された引数で新しい dbandexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>left</code>および<code>right</code>ブール型の結果の型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression@)
  id: Any(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Any(DbExpression)
  nameWithType: DbExpressionBuilder.Any(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;></xref>指定されたセット引数は、空でないかどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbExpression Any (this System.Data.Common.CommandTrees.DbExpression source);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbExpression
      description: "新しい<xref href=&quot;System.Data.Common.CommandTrees.DbNotExpression&quot;></xref>を新しい適用<xref href=&quot;System.Data.Common.CommandTrees.DbIsEmptyExpression&quot;></xref>と指定された引数。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>source</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>コレクションの結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: Any(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Any(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.Any(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(DbExpression,Func<DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbQuantifierExpression&quot;></xref>入力セットのいずれかの要素の指定された述語を保持しているかどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbQuantifierExpression Any (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> predicate);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    - id: predicate
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "入力セットの各メンバーに評価する述語を表すメソッド。 このメソッドは、述語のロジックを提供するブール型の結果の型を持つ式を生成する必要があります。"
    return:
      type: System.Data.Common.CommandTrees.DbQuantifierExpression
      description: "任意の操作を表す新しい DbQuantifierExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> predicate </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> predicate </code>ブール型の結果の型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  id: Any(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Any(DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.Any(DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(DbExpressionBinding,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbQuantifierExpression&quot;></xref>入力セットのいずれかの要素の指定された述語を保持しているかどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbQuantifierExpression Any (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpression predicate);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "バインディングを式では、入力セットを指定します。"
    - id: predicate
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットの各メンバーに評価する述語を表す式を指定します。"
    return:
      type: System.Data.Common.CommandTrees.DbQuantifierExpression
      description: "任意の操作を表す新しい DbQuantifierExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>または<code>predicate</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> predicate </code>ブール型の結果の型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbAggregate@,System.String)
  id: As(System.Data.Common.CommandTrees.DbAggregate@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: As(DbAggregate,String)
  nameWithType: DbExpressionBuilder.As(DbAggregate,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(DbAggregate,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "キー/値のペア オブジェクトとして指定された引数を返します。"
  syntax:
    content: public static System.Collections.Generic.KeyValuePair<string,System.Data.Common.CommandTrees.DbAggregate> As (this System.Data.Common.CommandTrees.DbAggregate value, string alias);
    parameters:
    - id: value
      type: System.Data.Common.CommandTrees.DbAggregate
      description: "キー/値ペア内の値。"
    - id: alias
      type: System.String
      description: "キー/値ペアのキーです。"
    return:
      type: System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}
      description: "キー/値のペア オブジェクト。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbExpression@,System.String)
  id: As(System.Data.Common.CommandTrees.DbExpression@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: As(DbExpression,String)
  nameWithType: DbExpressionBuilder.As(DbExpression,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(DbExpression,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "キー/値のペア オブジェクトとして指定された引数を返します。"
  syntax:
    content: public static System.Collections.Generic.KeyValuePair<string,System.Data.Common.CommandTrees.DbExpression> As (this System.Data.Common.CommandTrees.DbExpression value, string alias);
    parameters:
    - id: value
      type: System.Data.Common.CommandTrees.DbExpression
      description: "キー/値ペア内の値。"
    - id: alias
      type: System.String
      description: "キー/値ペアのキーです。"
    return:
      type: System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}
      description: "キー/値のペア オブジェクト。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Common.CommandTrees.DbExpression@)
  id: Bind(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Bind(DbExpression)
  nameWithType: DbExpressionBuilder.Bind(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;></xref>生成された変数名を使用して、指定された式を連結します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbExpressionBinding Bind (this System.Data.Common.CommandTrees.DbExpression input);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpression
      description: "バインドする式。"
    return:
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "指定した式と、生成された変数名を持つ新しい式のバインド。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>input</code>コレクションの結果はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Common.CommandTrees.DbExpression@,System.String)
  id: BindAs(System.Data.Common.CommandTrees.DbExpression@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: BindAs(DbExpression,String)
  nameWithType: DbExpressionBuilder.BindAs(DbExpression,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(DbExpression,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;></xref>指定された変数名を使用して、指定された式をバインドするには"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbExpressionBinding BindAs (this System.Data.Common.CommandTrees.DbExpression input, string varName);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpression
      description: "バインドする式。"
    - id: varName
      type: System.String
      description: "変数の名前、バインディングのために使用する必要があります。"
    return:
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "指定した式と変数名を持つ新しい式のバインド。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>または<code>varName</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>input</code>コレクションの結果はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Data.Common.CommandTrees.DbExpression)
  id: Case(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Case(IEnumerable<DbExpression>,IEnumerable<DbExpression>,DbExpression)
  nameWithType: DbExpressionBuilder.Case(IEnumerable<DbExpression>,IEnumerable<DbExpression>,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(IEnumerable<DbExpression>,IEnumerable<DbExpression>,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbCaseExpression&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbCaseExpression Case (System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpression> whenExpressions, System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpression> thenExpressions, System.Data.Common.CommandTrees.DbExpression elseExpression);
    parameters:
    - id: whenExpressions
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression}
      description: "各ケースの条件を提供する式のリスト。"
    - id: thenExpressions
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression}
      description: "各ケースの結果を提供する式のリスト。"
    - id: elseExpression
      type: System.Data.Common.CommandTrees.DbExpression
      description: "一致するケースがない場合、結果を定義する式。"
    return:
      type: System.Data.Common.CommandTrees.DbCaseExpression
      description: "指定した場合、既定の結果と新しい DbCaseExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>whenExpressions</code>または<code>thenExpressions</code>が null か、null または<code>elseExpression</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>whenExpressions</code>または<code>thenExpressions</code>が空または<code>whenExpressions</code>が含まれていますのすべての式の式はブール型以外の結果の型と共通の結果型はありませんが存在して<code>thenExpressions</code>と<code>elseExpression</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  id: CastTo(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: CastTo(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.CastTo(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(DbExpression,TypeUsage)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbCastExpression&quot;></xref>ポリモーフィックな引数をキャスト演算を適用します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbCastExpression CastTo (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage toType);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "キャストの適用先となる引数。"
    - id: toType
      type: System.Data.Metadata.Edm.TypeUsage
      description: "キャスト先の型を指定するメタデータを入力します。"
    return:
      type: System.Data.Common.CommandTrees.DbCastExpression
      description: "引数とターゲットの種類を指定して新しい DbCastExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Argument</code>または<code>toType</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)
  id: Constant(System.Object)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Constant(Object)
  nameWithType: DbExpressionBuilder.Constant(Object)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbConstantExpression&quot;></xref>に特定の定数値です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbConstantExpression Constant (object value);
    parameters:
    - id: value
      type: System.Object
      description: "表す定数値。"
    return:
      type: System.Data.Common.CommandTrees.DbConstantExpression
      description: "指定した値と新しい DbConstantExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>有効な定数型のインスタンスではありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Metadata.Edm.TypeUsage@,System.Object)
  id: Constant(System.Data.Metadata.Edm.TypeUsage@,System.Object)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Constant(TypeUsage,Object)
  nameWithType: DbExpressionBuilder.Constant(TypeUsage,Object)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(TypeUsage,Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbConstantExpression&quot;></xref>の定数値を持つ指定したプリミティブ型。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbConstantExpression Constant (this System.Data.Metadata.Edm.TypeUsage constantType, object value);
    parameters:
    - id: constantType
      type: System.Data.Metadata.Edm.TypeUsage
      description: "定数値の型。"
    - id: value
      type: System.Object
      description: "表す定数値。"
    return:
      type: System.Data.Common.CommandTrees.DbConstantExpression
      description: "指定された値の結果型と新しい DbConstantExpression <code> constantType</code>です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>または<code>constantType</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>有効な定数型のインスタンスではない<code>constantType</code>、プリミティブ型を表していませんまたは<code>value</code>によって表されるとは異なるプリミティブ型の<code>constantType</code>します。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  id: CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: CreateRef(EntitySet,IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.CreateRef(EntitySet,IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(EntitySet,IEnumerable<DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbRefExpression&quot;></xref>キー値に基づいて、特定のエンティティへの参照をエンコードします。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Metadata.Edm.EntitySet entitySet, System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpression> keyValues);
    parameters:
    - id: entitySet
      type: System.Data.Metadata.Edm.EntitySet
      description: "エンティティ参照される要素が存在するセットします。"
    - id: keyValues
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression}
      description: "コレクション<xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>s キー値を提供します。 これらの式が (数、種類、および順序) に一致する必要があります、参照先エンティティの種類のキー プロパティです。"
    return:
      type: System.Data.Common.CommandTrees.DbRefExpression
      description: "指定されたエンティティ セット内の指定したキー値を持つ要素を参照する新しい dbrefexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>entitySet</code>null、または<code>keyValues</code>が null または null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数<code> keyValues </code>によって宣言されているキーのメンバーの数と一致しません、 <code> entitySet</code>の要素の型、または<code> keyValues </code>キーに対応するメンバーの種類と互換性がない結果の型の式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression[])
  id: CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: CreateRef(EntitySet,DbExpression[])
  nameWithType: DbExpressionBuilder.CreateRef(EntitySet,DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(EntitySet,DbExpression[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbRefExpression&quot;></xref>キー値に基づいて、特定のエンティティへの参照をエンコードします。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Metadata.Edm.EntitySet entitySet, System.Data.Common.CommandTrees.DbExpression[] keyValues);
    parameters:
    - id: entitySet
      type: System.Data.Metadata.Edm.EntitySet
      description: "エンティティ参照される要素が存在するセットします。"
    - id: keyValues
      type: System.Data.Common.CommandTrees.DbExpression[]
      description: "コレクション<xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>s キー値を提供します。 これらの式が (数、種類、および順序) に一致する必要があります、参照先エンティティの種類のキー プロパティです。"
    return:
      type: System.Data.Common.CommandTrees.DbRefExpression
      description: "指定されたエンティティ セット内の指定したキー値を持つ要素を参照する新しい dbrefexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>entitySet</code>null、または<code>keyValues</code>が null または null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数<code> keyValues </code>によって宣言されているキーのメンバーの数と一致しません、 <code> entitySet</code>の要素の型、または<code> keyValues </code>キーに対応するメンバーの種類と互換性がない結果の型の式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  id: CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: CreateRef(EntitySet,EntityType,IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.CreateRef(EntitySet,EntityType,IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(EntitySet,EntityType,IEnumerable<DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbRefExpression&quot;></xref>キー値に基づいて、指定された型の特定のエンティティへの参照をエンコードします。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Metadata.Edm.EntitySet entitySet, System.Data.Metadata.Edm.EntityType entityType, System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpression> keyValues);
    parameters:
    - id: entitySet
      type: System.Data.Metadata.Edm.EntitySet
      description: "エンティティ参照される要素が存在するセットします。"
    - id: entityType
      type: System.Data.Metadata.Edm.EntityType
      description: "参照先エンティティの特定の型。 これには、エンティティ セットの要素の型と同じ階層からエンティティの種類があります。"
    - id: keyValues
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression}
      description: "コレクション<xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>s キー値を提供します。 これらの式が (数、種類、および順序) に一致する必要があります、参照先エンティティの種類のキー プロパティです。"
    return:
      type: System.Data.Common.CommandTrees.DbRefExpression
      description: "指定されたエンティティ セット内の指定したキー値を持つ要素を参照する新しい dbrefexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>entitySet</code>または<code>entityType</code>が null、または<code>keyValues</code>が null または null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数<code> keyValues </code>によって宣言されているキーのメンバーの数と一致しません、 <code> entitySet</code>の要素の型、または<code> keyValues </code>キーに対応するメンバーの種類と互換性がない結果の型の式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Metadata.Edm.EntityType,System.Data.Common.CommandTrees.DbExpression[])
  id: CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Metadata.Edm.EntityType,System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: CreateRef(EntitySet,EntityType,DbExpression[])
  nameWithType: DbExpressionBuilder.CreateRef(EntitySet,EntityType,DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(EntitySet,EntityType,DbExpression[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbRefExpression&quot;></xref>キー値に基づいて、指定された型の特定のエンティティへの参照をエンコードします。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Metadata.Edm.EntitySet entitySet, System.Data.Metadata.Edm.EntityType entityType, System.Data.Common.CommandTrees.DbExpression[] keyValues);
    parameters:
    - id: entitySet
      type: System.Data.Metadata.Edm.EntitySet
      description: "エンティティ参照される要素が存在するセットします。"
    - id: entityType
      type: System.Data.Metadata.Edm.EntityType
      description: "参照先エンティティの特定の型。 これには、エンティティ セットの要素の型と同じ階層からエンティティの種類があります。"
    - id: keyValues
      type: System.Data.Common.CommandTrees.DbExpression[]
      description: "コレクション<xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>s キー値を提供します。 これらの式が (数、種類、および順序) に一致する必要があります、参照先エンティティの種類のキー プロパティです。"
    return:
      type: System.Data.Common.CommandTrees.DbRefExpression
      description: "指定されたエンティティ セット内の指定したキー値を持つ要素を参照する新しい dbrefexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>entitySet</code>または<code>entityType</code>が null、または<code>keyValues</code>が null または null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数<code> keyValues </code>によって宣言されているキーのメンバーの数と一致しません、 <code> entitySet</code>の要素の型、または<code> keyValues </code>キーに対応するメンバーの種類と互換性がない結果の型の式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  id: CrossApply(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: CrossApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
  nameWithType: DbExpressionBuilder.CrossApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbApplyExpression&quot;></xref>評価される、指定された<code> apply </code>特定の入力の各要素に対して&1; 回の式は、設定すると、対応する入力を持つ行のコレクションを生成して、列を適用します。 対象の行<code> apply </code>空のセットに評価は含まれません。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbApplyExpression CrossApply (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair<string,System.Data.Common.CommandTrees.DbExpression>> apply);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>入力セットを指定します。"
    - id: apply
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}}
      description: "入力セットのメンバーごとに&1; 回評価するためのロジックを指定するメソッド。"
    return:
      type: System.Data.Common.CommandTrees.DbApplyExpression
      description: "指定した新しい DbApplyExpression 入力し、のバインドを適用、および<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>の crossapply です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "結果<code> apply </code>名または null である式が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "結果<code> apply </code>名または式のバインドでは有効ではない式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding)
  id: CrossApply(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: CrossApply(DbExpressionBinding,DbExpressionBinding)
  nameWithType: DbExpressionBuilder.CrossApply(DbExpressionBinding,DbExpressionBinding)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(DbExpressionBinding,DbExpressionBinding)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbApplyExpression&quot;></xref>評価される、指定された<code> apply </code>特定の入力の各要素に対して&1; 回の式は、設定すると、対応する入力を持つ行のコレクションを生成して、列を適用します。 対象の行<code> apply </code>空のセットに評価は含まれません。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbApplyExpression CrossApply (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpressionBinding apply);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;> </xref>入力セットを指定します。"
    - id: apply
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;> </xref>入力セットのメンバーごとに&1; 回評価するためのロジックを指定します。"
    return:
      type: System.Data.Common.CommandTrees.DbApplyExpression
      description: "指定した新しい DbApplyExpression 入力し、のバインドを適用、および<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>の crossapply です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>または<code>apply</code>が null です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpressionBinding})
  id: CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpressionBinding})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: CrossJoin(IEnumerable<DbExpressionBinding>)
  nameWithType: DbExpressionBuilder.CrossJoin(IEnumerable<DbExpressionBinding>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(IEnumerable<DbExpressionBinding>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbCrossJoinExpression&quot;></xref>入力式のバインドの一覧で指定されたセットを無条件に結合します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbCrossJoinExpression CrossJoin (System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpressionBinding> inputs);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpressionBinding}
      description: "入力セットを指定する式のバインドの一覧。"
    return:
      type: System.Data.Common.CommandTrees.DbCrossJoinExpression
      description: "新しい DbCrossJoinExpression で、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;> </xref>のクロス積を表す入力セットの無条件結合します。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>inputs</code>null または null 要素が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>inputs</code>2 より少ない、式のバインドが含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Common.CommandTrees.DbExpression@)
  id: Deref(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Deref(DbExpression)
  nameWithType: DbExpressionBuilder.Deref(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbDerefExpression&quot;></xref>参照式が指定された特定のエンティティを取得します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbDerefExpression Deref (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>参照を提供します。 この式の種類の参照が必要です。"
    return:
      type: System.Data.Common.CommandTrees.DbDerefExpression
      description: "指定されたエンティティを取得する新しい dbderefexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>参照結果の型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Common.CommandTrees.DbExpression@)
  id: Distinct(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Distinct(DbExpression)
  nameWithType: DbExpressionBuilder.Distinct(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbDistinctExpression&quot;></xref>指定されたセット引数から重複を削除します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbDistinctExpression Distinct (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "行い、個別の操作をセットを定義する式。"
    return:
      type: System.Data.Common.CommandTrees.DbDistinctExpression
      description: "指定されたセット引数に適用される個別の操作を表す新しい DbDistinctExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>コレクションの結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Divide(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Divide(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Divide(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbArithmeticExpression&quot;></xref>右の引数で、左の引数で除算をします。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbArithmeticExpression Divide (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbArithmeticExpression
      description: "除算演算を表す新しい DbArithmeticExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通の結果型が存在しない<code> left </code>または<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Common.CommandTrees.DbExpression@)
  id: Element(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Element(DbExpression)
  nameWithType: DbExpressionBuilder.Element(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbElementExpression&quot;></xref>セットをシングルトンに変換します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbElementExpression Element (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbElementExpression
      description: "セット引数のシングルトンへの変換を表す DbElementExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>コレクションの結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Equal(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Equal(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Equal(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbComparisonExpression&quot;></xref>等しいかどうか、左と右の引数を比較します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbComparisonExpression Equal (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbComparisonExpression
      description: "等値比較を表す新しい DbComparisonExpression。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通の結果が等しいかどうかを比較できる型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Except(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Except(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Except(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbExceptExpression&quot;></xref>左セット引数から適切な設定の引数の減算を計算します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbExceptExpression Except (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左側を定義する式は、引数を設定します。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "権限を定義する式は、引数を設定します。"
    return:
      type: System.Data.Common.CommandTrees.DbExceptExpression
      description: "左の引数の右辺の引数からの差を表す新しい DbExceptExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通のコレクションの結果型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Common.CommandTrees.DbExpression@)
  id: Exists(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Exists(DbExpression)
  nameWithType: DbExpressionBuilder.Exists(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;></xref>指定されたセット引数は、空でないかどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbExpression Exists (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbExpression
      description: "新しい<xref href=&quot;System.Data.Common.CommandTrees.DbNotExpression&quot;></xref>を新しい適用<xref href=&quot;System.Data.Common.CommandTrees.DbIsEmptyExpression&quot;></xref>と指定された引数。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>コレクションの結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False
  id: "False"
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: "False"
  nameWithType: DbExpressionBuilder.False
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "取得、 <xref href=&quot;System.Data.Common.CommandTrees.DbConstantExpression&quot;> </xref>ブール値を持つ<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbConstantExpression False { get; }
    return:
      type: System.Data.Common.CommandTrees.DbConstantExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbConstantExpression&quot;> </xref>ブール値を持つ<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  id: Filter(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Filter(DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.Filter(DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(DbExpressionBinding,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbFilterExpression&quot;></xref>指定された述語を使用して設定の指定された入力内の要素をフィルター処理します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbFilterExpression Filter (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpression predicate);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "バインディングを式では、入力セットを指定します。"
    - id: predicate
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットの各メンバーに評価する述語を表す式を指定します。"
    return:
      type: System.Data.Common.CommandTrees.DbFilterExpression
      description: "フィルター処理されたセットを生成する新しい DbFilterExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>または<code>predicate</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>predicate</code>ブール型の結果の型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: FullOuterJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: FullOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.FullOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbJoinExpression&quot;></xref>として FullOuterJoin を使用して、指定された結合条件で、左と右の式で指定されたセットを結合する、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbJoinExpression FullOuterJoin (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> joinCondition);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>左の引数のセットを指定します。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>右の引数のセットを指定します。"
    - id: joinCondition
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "結合条件を表すメソッド。 このメソッドは、ブール型の結果の結合条件ロジックを提供する式を生成する必要があります。"
    return:
      type: System.Data.Common.CommandTrees.DbJoinExpression
      description: "新しい DbJoinExpression で、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;> </xref>を指定された結合条件で左と右の入力セットに適用される完全外部結合操作を表す FullOuterJoin のです。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> joinCondition </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> joinCondition </code>ブール型の結果の型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  id: FullOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: FullOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.FullOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbJoinExpression&quot;> </xref> 、左と右の式、指定された結合条件を使用してバインドとして FullOuterJoin で指定されたセットを結合する、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbJoinExpression FullOuterJoin (this System.Data.Common.CommandTrees.DbExpressionBinding left, System.Data.Common.CommandTrees.DbExpressionBinding right, System.Data.Common.CommandTrees.DbExpression joinCondition);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;> </xref>左の引数のセットを指定します。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;> </xref>右の引数のセットを指定します。"
    - id: joinCondition
      type: System.Data.Common.CommandTrees.DbExpression
      description: "結合条件を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbJoinExpression
      description: "新しい DbJoinExpression で、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;> </xref>を指定された結合条件で左と右の入力セットに適用される完全外部結合操作を表す FullOuterJoin のです。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>,  <code>right</code> or <code>joinCondition</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> joinCondition </code>ブール型の結果の型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Common.CommandTrees.DbExpression@)
  id: GetEntityRef(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: GetEntityRef(DbExpression)
  nameWithType: DbExpressionBuilder.GetEntityRef(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbEntityRefExpression&quot;></xref>構造形式で指定されたエンティティの参照を取得します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbEntityRefExpression GetEntityRef (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "エンティティを提供する式です。 この式は、エンティティ結果型に必要です。"
    return:
      type: System.Data.Common.CommandTrees.DbEntityRefExpression
      description: "指定されたエンティティへの参照を取得する新しい dbentityrefexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>エンティティ結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Common.CommandTrees.DbExpression@)
  id: GetRefKey(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: GetRefKey(DbExpression)
  nameWithType: DbExpressionBuilder.GetRefKey(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbRefKeyExpression&quot;></xref>構造形式で指定された参照のキー値を取得します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbRefKeyExpression GetRefKey (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "参照を提供する式です。 この式は、エンティティ要素の型と型の参照をいる必要があります。"
    return:
      type: System.Data.Common.CommandTrees.DbRefKeyExpression
      description: "指定された参照のキー値を取得する新しい dbrefkeyexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>参照結果の型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: GreaterThan(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: GreaterThan(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.GreaterThan(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbComparisonExpression&quot;></xref>左の引数が右辺の引数より大きいかどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbComparisonExpression GreaterThan (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbComparisonExpression
      description: "大きい方を表す新しい DbComparisonExpression-比較よりもします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通の順序を比較の結果の型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: GreaterThanOrEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: GreaterThanOrEqual(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.GreaterThanOrEqual(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbComparisonExpression&quot;></xref>左の引数が右辺の引数以上かどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbComparisonExpression GreaterThanOrEqual (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbComparisonExpression
      description: "大きい-よりも-または-の比較を表す新しい DbComparisonExpression。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通の順序を比較の結果の型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Common.CommandTrees.DbExpression@)
  id: GroupBind(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: GroupBind(DbExpression)
  nameWithType: DbExpressionBuilder.GroupBind(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "指定された式のバインドに生成された変数とグループ変数名を使用する新しいグループ式のバインドを作成します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbGroupExpressionBinding GroupBind (this System.Data.Common.CommandTrees.DbExpression input);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpression
      description: "バインドする式。"
    return:
      type: System.Data.Common.CommandTrees.DbGroupExpressionBinding
      description: "指定された式と、生成された変数名とグループ変数名で新しいグループ式バインドします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>input</code>コレクションの結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Common.CommandTrees.DbExpression@,System.String,System.String)
  id: GroupBindAs(System.Data.Common.CommandTrees.DbExpression@,System.String,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: GroupBindAs(DbExpression,String,String)
  nameWithType: DbExpressionBuilder.GroupBindAs(DbExpression,String,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(DbExpression,String,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbGroupExpressionBinding&quot;></xref>指定された式のバインドに指定された変数名とグループ変数名を使用します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbGroupExpressionBinding GroupBindAs (this System.Data.Common.CommandTrees.DbExpression input, string varName, string groupVarName);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpression
      description: "バインドする式。"
    - id: varName
      type: System.String
      description: "変数の名前、バインディングのために使用する必要があります。"
    - id: groupVarName
      type: System.String
      description: "変数名を group by 式に新しいグループ式のバインドを使用すると、グループを参照するために使用する必要があります。"
    return:
      type: System.Data.Common.CommandTrees.DbGroupExpressionBinding
      description: "指定した式、変数名とグループ変数名を持つ新しいグループ式バインドします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>,  <code>varName</code> or <code>groupVarName</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>input</code>コレクションの結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Common.CommandTrees.DbGroupExpressionBinding@,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}})
  id: GroupBy(System.Data.Common.CommandTrees.DbGroupExpressionBinding@,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: GroupBy(DbGroupExpressionBinding,IEnumerable<KeyValuePair<String,DbExpression>>,IEnumerable<KeyValuePair<String,DbAggregate>>)
  nameWithType: DbExpressionBuilder.GroupBy(DbGroupExpressionBinding,IEnumerable<KeyValuePair<String,DbExpression>>,IEnumerable<KeyValuePair<String,DbAggregate>>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(DbGroupExpressionBinding,IEnumerable<KeyValuePair<String,DbExpression>>,IEnumerable<KeyValuePair<String,DbAggregate>>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbGroupByExpression&quot;></xref>入力が指定されたグループ キーに従ってセットの要素をグループし、指定された集計を適用します。"
  remarks: "DbGroupByExpression が使用するは、キーの一覧または空である集計が、両方の一覧のいずれか。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbGroupByExpression GroupBy (this System.Data.Common.CommandTrees.DbGroupExpressionBinding input, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,System.Data.Common.CommandTrees.DbExpression>> keys, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,System.Data.Common.CommandTrees.DbAggregate>> aggregates);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbGroupExpressionBinding
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbGroupExpressionBinding&quot;> </xref>入力セットを指定します。"
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}}
      description: "グループ化列を定義する文字列式のペアの一覧です。"
    - id: aggregates
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}}
      description: "適用する集計を指定する式のリスト。"
    return:
      type: System.Data.Common.CommandTrees.DbGroupByExpression
      description: "指定された入力セット、グループ化キーの集計と新しい DbGroupByExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>、<code>keys</code>または<code>aggregates</code>が null、<code>keys</code>キーが null の列または式では、含まれているまたは<code>aggregates</code>null 集計列の名前または集計が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "両方<code> keys </code>と<code> aggregates </code>は空、または無効なまたは重複する列名が指定されました。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: InnerJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: InnerJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.InnerJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbJoinExpression&quot;> </xref> InnerJoin を使用して、指定された結合条件で、左と右の式で指定されたセットを結合する、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbJoinExpression InnerJoin (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> joinCondition);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>左の引数のセットを指定します。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>右の引数のセットを指定します。"
    - id: joinCondition
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "結合条件を表すメソッド。 このメソッドは、ブール型の結果の結合条件ロジックを提供する式を生成する必要があります。"
    return:
      type: System.Data.Common.CommandTrees.DbJoinExpression
      description: "新しい DbJoinExpression で、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;> </xref>を指定された結合条件で左と右の入力セットに適用される内部結合演算を表す InnerJoin のです。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> joinCondition </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> joinCondition </code>ブール型の結果の型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  id: InnerJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: InnerJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.InnerJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbJoinExpression&quot;> </xref> 、左と右の式、指定された結合条件を使用してバインド InnerJoin で指定されたセットを結合する、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbJoinExpression InnerJoin (this System.Data.Common.CommandTrees.DbExpressionBinding left, System.Data.Common.CommandTrees.DbExpressionBinding right, System.Data.Common.CommandTrees.DbExpression joinCondition);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;> </xref>左の引数のセットを指定します。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;> </xref>右の引数のセットを指定します。"
    - id: joinCondition
      type: System.Data.Common.CommandTrees.DbExpression
      description: "結合条件を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbJoinExpression
      description: "新しい DbJoinExpression で、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;> </xref>を指定された結合条件で左と右の入力セットに適用される内部結合演算を表す InnerJoin のです。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>,  <code>right</code> or <code>joinCondition</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>joinCondition</code>ブール型の結果の型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Intersect(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Intersect(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Intersect(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbIntersectExpression&quot;></xref>左側の積集合を計算して、右の引数を設定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbIntersectExpression Intersect (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左側を定義する式は、引数を設定します。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "権限を定義する式は、引数を設定します。"
    return:
      type: System.Data.Common.CommandTrees.DbIntersectExpression
      description: "左と右の引数の積集合を表す新しい DbIntersectExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通のコレクションの結果型が存在しない<code> left </code>または<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  id: Invoke(System.Data.Common.CommandTrees.DbLambda@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Invoke(DbLambda,IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.Invoke(DbLambda,IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(DbLambda,IEnumerable<DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbLambdaExpression&quot;></xref>指定した引数を指定したラムダ関数のアプリケーションを表すです。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbLambdaExpression Invoke (this System.Data.Common.CommandTrees.DbLambda lambda, System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpression> arguments);
    parameters:
    - id: lambda
      type: System.Data.Common.CommandTrees.DbLambda
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbLambda&quot;> </xref>を適用する、ラムダ関数を表すインスタンス。"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression}
      description: "引数を提供する式のリスト。"
    return:
      type: System.Data.Common.CommandTrees.DbLambdaExpression
      description: "ラムダ関数のアプリケーションを表す新しい DbLambdaExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>lambda</code>または<code>arguments</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数<code> arguments </code>によって宣言された変数の数と等しくない<code> lambda </code>、または<code> arguments </code>を結果型が等しくないか昇格可能な対応する変数型を持つ式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda@,System.Data.Common.CommandTrees.DbExpression[])
  id: Invoke(System.Data.Common.CommandTrees.DbLambda@,System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Invoke(DbLambda,DbExpression[])
  nameWithType: DbExpressionBuilder.Invoke(DbLambda,DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(DbLambda,DbExpression[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbLambdaExpression&quot;></xref>指定した引数を指定したラムダ関数のアプリケーションを表すです。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbLambdaExpression Invoke (this System.Data.Common.CommandTrees.DbLambda lambda, System.Data.Common.CommandTrees.DbExpression[] arguments);
    parameters:
    - id: lambda
      type: System.Data.Common.CommandTrees.DbLambda
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbLambda&quot;> </xref>を適用する、ラムダ関数を表すインスタンス。"
    - id: arguments
      type: System.Data.Common.CommandTrees.DbExpression[]
      description: "引数を提供する式。"
    return:
      type: System.Data.Common.CommandTrees.DbLambdaExpression
      description: "ラムダ関数のアプリケーションを表す新しい DbLambdaExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>lambda</code>または<code>arguments</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数<code> arguments </code>によって宣言された変数の数と等しくない<code> lambda </code>、または<code> arguments </code>を結果型が等しくないか昇格可能な対応する変数型を持つ式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  id: Invoke(System.Data.Metadata.Edm.EdmFunction@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Invoke(EdmFunction,IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.Invoke(EdmFunction,IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(EdmFunction,IEnumerable<DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbFunctionExpression&quot;></xref>引数を指定して、指定された関数の呼び出しを表すです。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Invoke (this System.Data.Metadata.Edm.EdmFunction function, System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpression> arguments);
    parameters:
    - id: function
      type: System.Data.Metadata.Edm.EdmFunction
      description: "呼び出す関数のメタデータ。"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression}
      description: "関数に引数を提供する式のリスト。"
    return:
      type: System.Data.Common.CommandTrees.DbFunctionExpression
      description: "関数の呼び出しを表す新しい DbFunctionExpression。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>function</code>null、または<code>arguments</code>が null または null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数<code> arguments </code>によって宣言されたパラメーターの数と等しくない<code> function </code>、または<code> arguments </code>を結果型が等しくないか昇格可能な対応する関数のパラメーター型を持つ式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression[])
  id: Invoke(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Invoke(EdmFunction,DbExpression[])
  nameWithType: DbExpressionBuilder.Invoke(EdmFunction,DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(EdmFunction,DbExpression[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbFunctionExpression&quot;></xref>引数を指定して、指定された関数の呼び出しを表すです。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbFunctionExpression Invoke (this System.Data.Metadata.Edm.EdmFunction function, System.Data.Common.CommandTrees.DbExpression[] arguments);
    parameters:
    - id: function
      type: System.Data.Metadata.Edm.EdmFunction
      description: "呼び出す関数のメタデータ。"
    - id: arguments
      type: System.Data.Common.CommandTrees.DbExpression[]
      description: "関数に引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbFunctionExpression
      description: "関数の呼び出しを表す新しい DbFunctionExpression。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>function</code>null、または<code>arguments</code>が null または null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数<code> arguments </code>によって宣言されたパラメーターの数と等しくない<code> function </code>、または<code> arguments </code>を結果型が等しくないか昇格可能な対応する関数のパラメーター型を持つ式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Common.CommandTrees.DbExpression@)
  id: IsEmpty(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: IsEmpty(DbExpression)
  nameWithType: DbExpressionBuilder.IsEmpty(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbIsEmptyExpression&quot;></xref>指定されたセット引数は空のセットであるかどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbIsEmptyExpression IsEmpty (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbIsEmptyExpression
      description: "指定した引数を持つ新しい DbIsEmptyExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>コレクションの結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Common.CommandTrees.DbExpression@)
  id: IsNull(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: IsNull(DbExpression)
  nameWithType: DbExpressionBuilder.IsNull(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbIsNullExpression&quot;></xref>指定された引数が null かどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbIsNullExpression IsNull (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbIsNullExpression
      description: "指定した引数を持つ新しい DbIsNullExpression。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>コレクションの結果型があります。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  id: IsOf(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: IsOf(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.IsOf(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(DbExpression,TypeUsage)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbIsOfExpression&quot;></xref>が指定した引数が指定された型またはサブタイプかどうかを決定します。"
  remarks: "DbIsOfExpression では、する必要があります`argument`があり、ポリモーフィックな結果型を`type`は、その結果の型と同じ型階層からの型。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbIsOfExpression IsOf (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage type);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "インスタンスを指定する式。"
    - id: type
      type: System.Data.Metadata.Edm.TypeUsage
      description: "型のメタデータをインスタンスの結果の型と比較する型を指定します。"
    return:
      type: System.Data.Common.CommandTrees.DbIsOfExpression
      description: "指定したインスタンスと型、DbExpressionKind IsOf 新しい DbIsOfExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>または<code>type</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code>結果の型と同じ型階層に含まれない<code>argument</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  id: IsOfOnly(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: IsOfOnly(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.IsOfOnly(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(DbExpression,TypeUsage)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbIsOfExpression&quot;></xref>を決定する式が指定した引数が、指定された型とその種類 (サブタイプではない) のみがかどうか。"
  remarks: "DbIsOfExpression では、する必要があります`argument`があり、ポリモーフィックな結果型を`type`は、その結果の型と同じ型階層からの型。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbIsOfExpression IsOfOnly (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage type);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "インスタンスを指定する式。"
    - id: type
      type: System.Data.Metadata.Edm.TypeUsage
      description: "型のメタデータをインスタンスの結果の型と比較する型を指定します。"
    return:
      type: System.Data.Common.CommandTrees.DbIsOfExpression
      description: "指定したインスタンスと型、DbExpressionKind IsOfOnly 新しい DbIsOfExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>または<code>type</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code>結果の型と同じ型階層に含まれない<code>argument</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: Join(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbJoinExpression&quot;> </xref> InnerJoin を使用して、指定した外部と内部キー間の等価条件に基づいて、外側と内側式によって指定されたセットに参加する、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbJoinExpression Join (this System.Data.Common.CommandTrees.DbExpression outer, System.Data.Common.CommandTrees.DbExpression inner, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> outerKey, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> innerKey);
    parameters:
    - id: outer
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>外部セット引数を指定します。"
    - id: inner
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>内部セット引数を指定します。"
    - id: outerKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "外部キーの値を外部セットの要素から派生する方法を指定するメソッド。"
    - id: innerKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "内部セットの要素からどのように内部キーの値を抽出する必要がありますを指定するメソッド。"
    return:
      type: System.Data.Common.CommandTrees.DbJoinExpression
      description: "新しい DbJoinExpression で、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;> </xref>の外側と内側のキー値の等価性を比較する結合条件で左と右の入力セットに適用される内部結合演算を表す InnerJoin です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> outerKey </code>または<code> innerKey </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> outerKey </code>と<code> innerKey </code>は等しいかどうか比較されません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})
  id: Join``1(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
  nameWithType: DbExpressionBuilder.Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  syntax:
    content: public static System.Data.Common.CommandTrees.DbProjectExpression Join<TSelector> (this System.Data.Common.CommandTrees.DbExpression outer, System.Data.Common.CommandTrees.DbExpression inner, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> outerKey, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> innerKey, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector> selector);
    parameters:
    - id: outer
      type: System.Data.Common.CommandTrees.DbExpression
      description: "追加します。"
    - id: inner
      type: System.Data.Common.CommandTrees.DbExpression
      description: "追加します。"
    - id: outerKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "追加します。"
    - id: innerKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "追加します。"
    - id: selector
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector}
      description: "追加します。"
    return:
      type: System.Data.Common.CommandTrees.DbProjectExpression
      description: "追加します。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join<TSelector>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})
  id: Lambda(System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Lambda(DbExpression,IEnumerable<DbVariableReferenceExpression>)
  nameWithType: DbExpressionBuilder.Lambda(DbExpression,IEnumerable<DbVariableReferenceExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(DbExpression,IEnumerable<DbVariableReferenceExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "作成、 <xref href=&quot;System.Data.Common.CommandTrees.DbLambda&quot;> </xref>と指定されたインライン ラムダ関数の実装と仮パラメーター。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbLambda Lambda (System.Data.Common.CommandTrees.DbExpression body, System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbVariableReferenceExpression> variables);
    parameters:
    - id: body
      type: System.Data.Common.CommandTrees.DbExpression
      description: "ラムダ関数のロジックを定義する式。"
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression}
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbVariableReferenceExpression&quot;> </xref>ラムダ関数の仮パラメーターを表すコレクション。 これらの変数が有効で使用するため、`body`式。"
    return:
      type: System.Data.Common.CommandTrees.DbLambda
      description: "インライン ラムダ関数を指定した body と仮パラメーターを説明する新しい dblambda。 します。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>variables</code>null か、null または<code>body</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>variables</code>同じ変数名を持つ複数の要素が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression[])
  id: Lambda(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Lambda(DbExpression,DbVariableReferenceExpression[])
  nameWithType: DbExpressionBuilder.Lambda(DbExpression,DbVariableReferenceExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(DbExpression,DbVariableReferenceExpression[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "作成、 <xref href=&quot;System.Data.Common.CommandTrees.DbLambda&quot;> </xref>と指定されたインライン ラムダ関数の実装と仮パラメーター。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbLambda Lambda (System.Data.Common.CommandTrees.DbExpression body, System.Data.Common.CommandTrees.DbVariableReferenceExpression[] variables);
    parameters:
    - id: body
      type: System.Data.Common.CommandTrees.DbExpression
      description: "ラムダ関数のロジックを定義する式。"
    - id: variables
      type: System.Data.Common.CommandTrees.DbVariableReferenceExpression[]
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbVariableReferenceExpression&quot;> </xref>ラムダ関数の仮パラメーターを表すコレクション。 これらの変数が有効で使用するため、`body`式。"
    return:
      type: System.Data.Common.CommandTrees.DbLambda
      description: "インライン ラムダ関数を指定した body と仮パラメーターを説明する新しい dblambda。 します。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>variables</code>null か、null または<code>body</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>variables</code>同じ変数名を持つ複数の要素が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: LeftOuterJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: LeftOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.LeftOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbJoinExpression&quot;></xref>として LeftOuterJoin を使用して、指定された結合条件で、左と右の式で指定されたセットを結合する、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbJoinExpression LeftOuterJoin (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> joinCondition);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>左の引数のセットを指定します。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>右の引数のセットを指定します。"
    - id: joinCondition
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "結合条件を表すメソッド。 このメソッドは、ブール型の結果の結合条件ロジックを提供する式を生成する必要があります。"
    return:
      type: System.Data.Common.CommandTrees.DbJoinExpression
      description: "新しい DbJoinExpression で、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;> </xref>の指定された結合条件下で左と右の入力セットに適用される左外部結合操作を表す LeftOuterJoin です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> joinCondition </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> joinCondition </code>ブール型の結果の型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  id: LeftOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: LeftOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.LeftOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbJoinExpression&quot;> </xref> 、左と右の式、指定された結合条件を使用してバインドとして LeftOuterJoin で指定されたセットを結合する、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbJoinExpression LeftOuterJoin (this System.Data.Common.CommandTrees.DbExpressionBinding left, System.Data.Common.CommandTrees.DbExpressionBinding right, System.Data.Common.CommandTrees.DbExpression joinCondition);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;> </xref>左の引数のセットを指定します。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;> </xref>右の引数のセットを指定します。"
    - id: joinCondition
      type: System.Data.Common.CommandTrees.DbExpression
      description: "結合条件を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbJoinExpression
      description: "新しい DbJoinExpression で、 <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;> </xref>の指定された結合条件下で左と右の入力セットに適用される左外部結合操作を表す LeftOuterJoin です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>,  <code>right</code> or <code>joinCondition</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>joinCondition</code>ブール型の結果の型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: LessThan(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: LessThan(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.LessThan(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbComparisonExpression&quot;></xref>左の引数が右辺の引数よりも小さいかどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbComparisonExpression LessThan (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbComparisonExpression
      description: "小さいを表す新しい DbComparisonExpression-比較よりもします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通の順序を比較の結果の型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: LessThanOrEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: LessThanOrEqual(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.LessThanOrEqual(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbComparisonExpression&quot;></xref>左の引数が右辺の引数以下かどうかを決定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbComparisonExpression LessThanOrEqual (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbComparisonExpression
      description: "小-よりも-または-の比較を表す新しい DbComparisonExpression。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間の両方の等価性、および順序を比較する共通の結果型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Like(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Like(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Like(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbLikeExpression&quot;></xref>指定したパターンを指定した入力文字列と比較します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbLikeExpression Like (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Common.CommandTrees.DbExpression pattern);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力文字列を指定する式。"
    - id: pattern
      type: System.Data.Common.CommandTrees.DbExpression
      description: "パターン文字列を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbLikeExpression
      description: "指定された入力、パターン、null のエスケープと新しい DbLikeExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Argument</code>または<code>pattern</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Argument</code>または<code>pattern</code>結果型が文字列ではありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)
  id: Like(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Like(DbExpression,DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Like(DbExpression,DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(DbExpression,DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbLikeExpression&quot;></xref>オプションのエスケープを使用して、指定されたパターンを指定した入力文字列と比較します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbLikeExpression Like (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Common.CommandTrees.DbExpression pattern, System.Data.Common.CommandTrees.DbExpression escape);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力文字列を指定する式。"
    - id: pattern
      type: System.Data.Common.CommandTrees.DbExpression
      description: "パターン文字列を指定する式。"
    - id: escape
      type: System.Data.Common.CommandTrees.DbExpression
      description: "エスケープ文字列を指定する省略可能な式。"
    return:
      type: System.Data.Common.CommandTrees.DbLikeExpression
      description: "指定された入力、パターンとエスケープ新しい DbLikeExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>,   <code>pattern</code> or <code>escape</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>、<code>pattern</code>または<code>escape</code>結果型が文字列ではありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Limit(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Limit(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Limit(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbLimitExpression&quot;></xref>指定した数の制限値を引数コレクション内の要素の数を制限しています。 出力には、同じランクの結果は含まれません。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbLimitExpression Limit (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Common.CommandTrees.DbExpression count);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力コレクションを指定する式。"
    - id: count
      type: System.Data.Common.CommandTrees.DbExpression
      description: "制限値を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbLimitExpression
      description: "含まない新しい DbLimitExpression 指定した引数とカウントの制限値には、結果が関連付けられています。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>または<code>count</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>コレクションの結果の型を持たないまたは<code>count</code>が等しいか昇格可能な 64 ビットの整数型にする結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Minus(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Minus(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Minus(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbArithmeticExpression&quot;></xref>左の引数の右辺の引数を減算します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbArithmeticExpression Minus (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbArithmeticExpression
      description: "減算演算を表す新しい DbArithmeticExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通の結果型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Modulo(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Modulo(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Modulo(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbArithmeticExpression&quot;></xref>左の引数が右辺の引数で除算の剰余を計算します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbArithmeticExpression Modulo (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbArithmeticExpression
      description: "表す新しい DbArithmeticExpression、剰余演算です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通の結果型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Multiply(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Multiply(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Multiply(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbArithmeticExpression&quot;></xref>右の引数で、左の引数を乗算します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbArithmeticExpression Multiply (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbArithmeticExpression
      description: "乗算演算を表す新しい DbArithmeticExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通の結果型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.RelationshipEndMember,System.Data.Metadata.Edm.RelationshipEndMember)
  id: Navigate(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.RelationshipEndMember,System.Data.Metadata.Edm.RelationshipEndMember)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Navigate(DbExpression,RelationshipEndMember,RelationshipEndMember)
  nameWithType: DbExpressionBuilder.Navigate(DbExpression,RelationshipEndMember,RelationshipEndMember)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(DbExpression,RelationshipEndMember,RelationshipEndMember)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbRelationshipNavigationExpression&quot;></xref>構成またはアソシエーション リレーションシップのナビゲーションを表すです。"
  remarks: "<xref:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression>参照を常にナビゲーションが発生することを必要としているため`navigateFrom`参照の結果型は常に必要があります。</xref:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression>"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbRelationshipNavigationExpression Navigate (this System.Data.Common.CommandTrees.DbExpression navigateFrom, System.Data.Metadata.Edm.RelationshipEndMember fromEnd, System.Data.Metadata.Edm.RelationshipEndMember toEnd);
    parameters:
    - id: navigateFrom
      type: System.Data.Common.CommandTrees.DbExpression
      description: "元のナビゲーションを実行するインスタンスを指定する式。"
    - id: fromEnd
      type: System.Data.Metadata.Edm.RelationshipEndMember
      description: "元のナビゲーションを実行するリレーションシップの end を表すプロパティのメタデータ。"
    - id: toEnd
      type: System.Data.Metadata.Edm.RelationshipEndMember
      description: "ナビゲーションを開始するリレーションシップの end を表すプロパティのメタデータ。"
    return:
      type: System.Data.Common.CommandTrees.DbRelationshipNavigationExpression
      description: "指定されたナビゲーションを表す新しい DbRelationshipNavigationExpression from と to の指定されたナビゲーション ソース インスタンスから指定されたリレーションシップ型の関係が終了します。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fromEnd</code>,  <code>toEnd</code> or <code>navigateFrom</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fromEnd</code><code>toEnd</code>同じリレーションシップ型で宣言されていないか、<code>navigateFrom</code>結果の型のプロパティの型と互換性がありませんを持つ<code>fromEnd</code>します。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Metadata.Edm.RelationshipType@,System.String,System.String,System.Data.Common.CommandTrees.DbExpression)
  id: Navigate(System.Data.Metadata.Edm.RelationshipType@,System.String,System.String,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Navigate(RelationshipType,String,String,DbExpression)
  nameWithType: DbExpressionBuilder.Navigate(RelationshipType,String,String,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(RelationshipType,String,String,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbRelationshipNavigationExpression&quot;></xref>構成またはアソシエーション リレーションシップのナビゲーションを表すです。"
  remarks: "<xref:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression>参照を常にナビゲーションが発生することを必要としているため`navigateFrom`参照の結果型は常に必要があります。</xref:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression>"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbRelationshipNavigationExpression Navigate (this System.Data.Metadata.Edm.RelationshipType type, string fromEndName, string toEndName, System.Data.Common.CommandTrees.DbExpression navigateFrom);
    parameters:
    - id: type
      type: System.Data.Metadata.Edm.RelationshipType
      description: "リレーションシップを表すリレーションシップ型のメタデータ。"
    - id: fromEndName
      type: System.String
      description: "ナビゲーションを実行する元となるリレーションシップの end を表すリレーションシップ型のプロパティの名前です。"
    - id: toEndName
      type: System.String
      description: "ナビゲーションを開始するリレーションシップの end を表すリレーションシップ型のプロパティの名前です。"
    - id: navigateFrom
      type: System.Data.Common.CommandTrees.DbExpression
      description: "式のインスタンスを指定する naviagtion からを実行します。"
    return:
      type: System.Data.Common.CommandTrees.DbRelationshipNavigationExpression
      description: "指定されたナビゲーションを表す新しい DbRelationshipNavigationExpression from と to の指定されたナビゲーション ソース インスタンスから指定されたリレーションシップ型の関係が終了します。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>,  <code>fromEndName</code>,  <code>toEndName</code> or <code>navigateFrom</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code>このコマンド ツリーのメタデータ ワークスペースに関連付けられていないまたは<code>navigateFrom</code>が異なるコマンド ツリーに関連付けられているまたは<code>type</code>という名前のリレーションシップの end プロパティを宣言しません<code>toEndName</code>または<code>fromEndName</code>、または<code>navigateFrom</code>名前のリレーションシップの end プロパティのプロパティの型と互換性がない結果の型を持つ<code>fromEndName</code>します。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Common.CommandTrees.DbExpression@)
  id: Negate(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Negate(DbExpression)
  nameWithType: DbExpressionBuilder.Negate(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbArithmeticExpression&quot;></xref>引数の値を否定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbArithmeticExpression Negate (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbArithmeticExpression
      description: "否定演算を表す新しい DbArithmeticExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "結果型が存在しない<code> argument</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  id: New(System.Data.Metadata.Edm.TypeUsage@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: New(TypeUsage,IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.New(TypeUsage,IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(TypeUsage,IEnumerable<DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbNewInstanceExpression&quot;></xref>です。 型引数がコレクション型の場合、引数は、コレクションの要素を指定します。 それ以外の場合、引数は、新しいインスタンスのプロパティまたは列の値として使用されます。"
  remarks: "場合`instanceType`は、コレクションを入力し、すべての式で`arguments`結果型の要素の型に上位変換である必要があります、`instanceType`です。 場合`instanceType`行型です`arguments`行型の列があるし、各式の結果型は、対応する列の型に等しいまたは昇格可能なをする必要があります、多くの式を含める必要があります。 すべての列で宣言されていない行の種類が正しくありません。 場合`instanceType`は、エンティティ型、`arguments`そこに多くの式は、型によって定義されたプロパティとそれぞれの式の結果型は、対応するプロパティの型に等しくまたは昇格可能なをする必要がありますを含める必要があります。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbNewInstanceExpression New (this System.Data.Metadata.Edm.TypeUsage instanceType, System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpression> arguments);
    parameters:
    - id: instanceType
      type: System.Data.Metadata.Edm.TypeUsage
      description: "新しいインスタンスの型。"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression}
      description: "新しいインスタンスの値を指定する式は、インスタンスの型に基づいて解釈されます。"
    return:
      type: System.Data.Common.CommandTrees.DbNewInstanceExpression
      description: "指定した型の引数と新しい DbNewInstanceExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instanceType</code>または<code>arguments</code>が null、または<code>arguments</code>null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>arguments</code>空であるか、包含の結果型は、式の要件に一致しない<code>instanceType</code>(「解説」セクションで説明) とします。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage@,System.Data.Common.CommandTrees.DbExpression[])
  id: New(System.Data.Metadata.Edm.TypeUsage@,System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: New(TypeUsage,DbExpression[])
  nameWithType: DbExpressionBuilder.New(TypeUsage,DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(TypeUsage,DbExpression[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbNewInstanceExpression&quot;></xref>です。 型引数がコレクション型の場合、引数は、コレクションの要素を指定します。 それ以外の場合、引数は、新しいインスタンスのプロパティまたは列の値として使用されます。"
  remarks: "場合`instanceType`は、コレクションを入力し、すべての式で`arguments`結果型の要素の型に上位変換である必要があります、`instanceType`です。 場合`instanceType`行型です`arguments`行型の列があるし、各式の結果型は、対応する列の型に等しいまたは昇格可能なをする必要があります、多くの式を含める必要があります。 すべての列で宣言されていない行の種類が正しくありません。 場合`instanceType`は、エンティティ型、`arguments`そこに多くの式は、型によって定義されたプロパティとそれぞれの式の結果型は、対応するプロパティの型に等しくまたは昇格可能なをする必要がありますを含める必要があります。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbNewInstanceExpression New (this System.Data.Metadata.Edm.TypeUsage instanceType, System.Data.Common.CommandTrees.DbExpression[] arguments);
    parameters:
    - id: instanceType
      type: System.Data.Metadata.Edm.TypeUsage
      description: "新しいインスタンスの型。"
    - id: arguments
      type: System.Data.Common.CommandTrees.DbExpression[]
      description: "新しいインスタンスの値を指定する式は、インスタンスの型に基づいて解釈されます。"
    return:
      type: System.Data.Common.CommandTrees.DbNewInstanceExpression
      description: "指定した型の引数と新しい DbNewInstanceExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instanceType</code>または<code>arguments</code>が null、または<code>arguments</code>null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>arguments</code>空であるか、包含の結果型は、式の要件に一致しない<code>instanceType</code>(「解説」セクションで説明) とします。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  id: NewCollection(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: NewCollection(IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.NewCollection(IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(IEnumerable<DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbNewInstanceExpression&quot;></xref>指定した要素を含むコレクションを構築します。 コレクションの型は、要素の一般的な型に基づきます。 共通の要素型が存在しない場合、例外がスローされます。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbNewInstanceExpression NewCollection (System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpression> elements);
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression}
      description: "コレクションの要素を提供する式のリスト。"
    return:
      type: System.Data.Common.CommandTrees.DbNewInstanceExpression
      description: "指定されたコレクション型、引数と新しい DbNewInstanceExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>elements</code>null または null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>elements</code>空か、共通の結果型が存在しない式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Common.CommandTrees.DbExpression[])
  id: NewCollection(System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: NewCollection(DbExpression[])
  nameWithType: DbExpressionBuilder.NewCollection(DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(DbExpression[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbNewInstanceExpression&quot;></xref>指定した要素を含むコレクションを構築します。 コレクションの型は、要素の一般的な型に基づきます。 共通の要素型が存在しない場合、例外がスローされます。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbNewInstanceExpression NewCollection (System.Data.Common.CommandTrees.DbExpression[] elements);
    parameters:
    - id: elements
      type: System.Data.Common.CommandTrees.DbExpression[]
      description: "コレクションの要素を提供する式のリスト。"
    return:
      type: System.Data.Common.CommandTrees.DbNewInstanceExpression
      description: "指定されたコレクション型、引数と新しい DbNewInstanceExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>elements</code>null または null が含まれています."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>elements</code>空か、共通の結果型が存在しない式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Metadata.Edm.TypeUsage@)
  id: NewEmptyCollection(System.Data.Metadata.Edm.TypeUsage@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: NewEmptyCollection(TypeUsage)
  nameWithType: DbExpressionBuilder.NewEmptyCollection(TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(TypeUsage)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbNewInstanceExpression&quot;></xref>指定されたコレクション型の空のコレクションを構築します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbNewInstanceExpression NewEmptyCollection (this System.Data.Metadata.Edm.TypeUsage collectionType);
    parameters:
    - id: collectionType
      type: System.Data.Metadata.Edm.TypeUsage
      description: "作成するコレクションの型のメタデータ"
    return:
      type: System.Data.Common.CommandTrees.DbNewInstanceExpression
      description: "指定されたコレクション型と、空の新しい DbNewInstanceExpression <code> Arguments </code>  ボックスの一覧です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>collectionType</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionType</code>コレクション型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  id: NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: NewRow(IEnumerable<KeyValuePair<String,DbExpression>>)
  nameWithType: DbExpressionBuilder.NewRow(IEnumerable<KeyValuePair<String,DbExpression>>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(IEnumerable<KeyValuePair<String,DbExpression>>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbNewInstanceExpression&quot;></xref>と指定した名前の列式として指定する特定の値は、行を生成します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbNewInstanceExpression NewRow (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,System.Data.Common.CommandTrees.DbExpression>> columnValues);
    parameters:
    - id: columnValues
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}}
      description: "構造と行の値を定義する文字列 DbExpression キー/値ペアの一覧。"
    return:
      type: System.Data.Common.CommandTrees.DbNewInstanceExpression
      description: "行の構築を表す新しい DbNewInstanceExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>columnValues</code>null または null の列名または式を持つ要素が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>columnValues</code>空か、重複しているか無効な列名が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Common.CommandTrees.DbExpression@)
  id: Not(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Not(DbExpression)
  nameWithType: DbExpressionBuilder.Not(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "作成、 <xref href=&quot;System.Data.Common.CommandTrees.DbNotExpression&quot;> </xref>が指定した引数の論理否定を実行します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbNotExpression Not (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "引数を指定するブール式です。"
    return:
      type: System.Data.Common.CommandTrees.DbNotExpression
      description: "指定した引数を持つ新しい DbNotExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>ブール型の結果の型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: NotEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: NotEqual(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.NotEqual(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbComparisonExpression&quot;></xref>非等値を左と右の引数を比較します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbComparisonExpression NotEqual (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbComparisonExpression
      description: "非等値比較を表す新しい DbComparisonExpression。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通の結果が等しいかどうかを比較できる型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Metadata.Edm.TypeUsage@)
  id: Null(System.Data.Metadata.Edm.TypeUsage@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Null(TypeUsage)
  nameWithType: DbExpressionBuilder.Null(TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(TypeUsage)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbNullExpression&quot;> </xref>、型指定された null 値を表します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbNullExpression Null (this System.Data.Metadata.Edm.TypeUsage nullType);
    parameters:
    - id: nullType
      type: System.Data.Metadata.Edm.TypeUsage
      description: "Null 値の型。"
    return:
      type: System.Data.Common.CommandTrees.DbNullExpression
      description: "DbNullExpression のインスタンス。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>nullType</code>null です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  id: OfType(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: OfType(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.OfType(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(DbExpression,TypeUsage)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbOfTypeExpression&quot;></xref>セットの指定された入力の要素から成るセットが生成されますが、指定した型であります。"
  remarks: "DbOfTypeExpression では、する必要があります`argument`コレクションのポリモーフィックな要素型と型を結果`type`は、その要素の型と同じ型階層からの型。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbOfTypeExpression OfType (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage type);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>入力セットを指定します。"
    - id: type
      type: System.Data.Metadata.Edm.TypeUsage
      description: "入力セットの要素が必要な結果セットに含まれる型のメタデータを入力します。"
    return:
      type: System.Data.Common.CommandTrees.DbOfTypeExpression
      description: "指定されたセット引数と型、および、ExpressionKind の使用新しい DbOfTypeExpression <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>または<code>type</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>コレクションの結果の型を持たないまたは<code>type</code>、結果のコレクション型の要素の型と同じ型階層内の型ではない<code>argument</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  id: OfTypeOnly(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: OfTypeOnly(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.OfTypeOnly(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(DbExpression,TypeUsage)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbOfTypeExpression&quot;></xref>セットの指定された入力の要素から成るセットが生成されますが正確に指定された型であります。"
  remarks: "DbOfTypeExpression では、する必要があります`argument`コレクションのポリモーフィックな要素型と型を結果`type`は、その要素の型と同じ型階層からの型。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbOfTypeExpression OfTypeOnly (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage type);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>入力セットを指定します。"
    - id: type
      type: System.Data.Metadata.Edm.TypeUsage
      description: "結果セットに含まれる入力セットの要素が完全に一致する必要がある型のメタデータを入力します。"
    return:
      type: System.Data.Common.CommandTrees.DbOfTypeExpression
      description: "指定されたセット引数と型、および、ExpressionKind の使用新しい DbOfTypeExpression <xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>または<code>type</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>コレクションの結果の型を持たないまたは<code>type</code>、結果のコレクション型の要素の型と同じ型階層内の型ではない<code>argument</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Or(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Or(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Or(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "作成、 <xref href=&quot;System.Data.Common.CommandTrees.DbOrExpression&quot;> </xref>論理または左と右の引数を実行します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbOrExpression Or (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定するブール式です。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定するブール式です。"
    return:
      type: System.Data.Common.CommandTrees.DbOrExpression
      description: "指定された引数で新しい dborexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>left</code>または<code>right</code>ブール型の結果の型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: OrderBy(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: OrderBy(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.OrderBy(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(DbExpression,Func<DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortExpression&quot;></xref>設定、昇順の並べ替え順序と既定の照合順序、指定された並べ替えキーによって指定された入力を並べ替えます。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortExpression OrderBy (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> sortKey);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    - id: sortKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "入力セットのメンバーを指定された並べ替えキーの式を取得する方法を指定するメソッド。 このメソッドは、並べ替えを提供する結果の順序を比較できる型である式を生成する必要がありますキーの定義。"
    return:
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "Order by 操作を表す新しい DbSortExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> sortKey </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> sortKey </code>結果の順序を比較できる型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  id: OrderBy(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: OrderBy(DbExpression,Func<DbExpression,DbExpression>,String)
  nameWithType: DbExpressionBuilder.OrderBy(DbExpression,Func<DbExpression,DbExpression>,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(DbExpression,Func<DbExpression,DbExpression>,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortExpression&quot;></xref>設定、昇順の並べ替え順序、および指定した照合順序、指定された並べ替えキーによって指定された入力を並べ替えます。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortExpression OrderBy (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> sortKey, string collation);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    - id: sortKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "入力セットのメンバーを指定された並べ替えキーの式を取得する方法を指定するメソッド。 このメソッドは、並べ替えを提供する結果の順序を比較できる型である式を生成する必要がありますキーの定義。"
    - id: collation
      type: System.String
      description: "を並べ替える照合順序です。"
    return:
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "Order by 操作を表す新しい DbSortExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> sortKey </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> sortKey </code>順序比較文字列結果型はありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>collation</code>空か、空白文字だけが含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: OrderByDescending(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: OrderByDescending(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.OrderByDescending(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(DbExpression,Func<DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortExpression&quot;></xref>降順の並べ替え順序と既定の照合順序で、指定された並べ替えキーによって設定特定の入力を並べ替えています。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortExpression OrderByDescending (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> sortKey);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    - id: sortKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "入力セットのメンバーを指定された並べ替えキーの式を取得する方法を指定するメソッド。 このメソッドは、並べ替えを提供する結果の順序を比較できる型である式を生成する必要がありますキーの定義。"
    return:
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "Order by 操作を表す新しい DbSortExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> sortKey </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> sortKey </code>結果の順序を比較できる型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  id: OrderByDescending(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: OrderByDescending(DbExpression,Func<DbExpression,DbExpression>,String)
  nameWithType: DbExpressionBuilder.OrderByDescending(DbExpression,Func<DbExpression,DbExpression>,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(DbExpression,Func<DbExpression,DbExpression>,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortExpression&quot;></xref>降順の並べ替え順序、および指定した照合順序で、指定された並べ替えキーによって設定特定の入力を並べ替えています。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortExpression OrderByDescending (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> sortKey, string collation);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    - id: sortKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "入力セットのメンバーを指定された並べ替えキーの式を取得する方法を指定するメソッド。 このメソッドは、並べ替えを提供する結果の順序を比較できる型である式を生成する必要がありますキーの定義。"
    - id: collation
      type: System.String
      description: "を並べ替える照合順序です。"
    return:
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "Order by 操作を表す新しい DbSortExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> sortKey </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> sortKey </code>順序比較文字列結果型はありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>collation</code>空か、空白文字だけが含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  id: OuterApply(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: OuterApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
  nameWithType: DbExpressionBuilder.OuterApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbApplyExpression&quot;></xref>評価される、指定された<code> apply </code>特定の入力の各要素に対して&1; 回の式は、設定すると、対応する入力を持つ行のコレクションを生成して、列を適用します。 対象の行<code> apply </code>空のセットに評価の適用列値を持つ<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbApplyExpression OuterApply (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair<string,System.Data.Common.CommandTrees.DbExpression>> apply);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>入力セットを指定します。"
    - id: apply
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}}
      description: "入力セットのメンバーごとに&1; 回評価するためのロジックを指定するメソッド。"
    return:
      type: System.Data.Common.CommandTrees.DbApplyExpression
      description: "指定した新しい DbApplyExpression 入力し、のバインドを適用、および<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>の outerapply です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "結果<code> apply </code>名または null である式が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "結果<code> apply </code>名または式のバインドでは有効ではない式が含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding)
  id: OuterApply(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: OuterApply(DbExpressionBinding,DbExpressionBinding)
  nameWithType: DbExpressionBuilder.OuterApply(DbExpressionBinding,DbExpressionBinding)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(DbExpressionBinding,DbExpressionBinding)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbApplyExpression&quot;></xref>評価される、指定された<code> apply </code>特定の入力の各要素に対して&1; 回の式は、設定すると、対応する入力を持つ行のコレクションを生成して、列を適用します。 対象の行<code> apply </code>空のセットに評価の適用列値を持つ<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbApplyExpression OuterApply (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpressionBinding apply);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;> </xref>入力セットを指定します。"
    - id: apply
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionBinding&quot;> </xref>入力セットのメンバーごとに&1; 回評価するためのロジックを指定します。"
    return:
      type: System.Data.Common.CommandTrees.DbApplyExpression
      description: "指定した新しい DbApplyExpression 入力し、のバインドを適用、および<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>の outerapply です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>または<code>apply</code>が null です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Metadata.Edm.TypeUsage@,System.String)
  id: Parameter(System.Data.Metadata.Edm.TypeUsage@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Parameter(TypeUsage,String)
  nameWithType: DbExpressionBuilder.Parameter(TypeUsage,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(TypeUsage,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbParameterReferenceExpression&quot;></xref>指定した名前と型のパラメーターを参照します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbParameterReferenceExpression Parameter (this System.Data.Metadata.Edm.TypeUsage type, string name);
    parameters:
    - id: type
      type: System.Data.Metadata.Edm.TypeUsage
      description: "参照されているパラメーターの型。"
    - id: name
      type: System.String
      description: "参照されているパラメーターの名前。"
    return:
      type: System.Data.Common.CommandTrees.DbParameterReferenceExpression
      description: "指定した名前と型を持つパラメーターへの参照を表す DbParameterReferenceExpression です。 式の結果型は、同じであるとして<code> type</code>です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Plus(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Plus(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Plus(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbArithmeticExpression&quot;></xref>左の引数を右辺の引数を追加します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbArithmeticExpression Plus (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左の引数を指定する式。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "右の引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbArithmeticExpression
      description: "加算演算を表す新しい DbArithmeticExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間に共通の結果型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  id: Project(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Project(DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.Project(DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(DbExpressionBinding,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbProjectExpression&quot;></xref>指定された入力セットに対して、指定された式をプロジェクトです。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbProjectExpression Project (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpression projection);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "バインディングを式では、入力セットを指定します。"
    - id: projection
      type: System.Data.Common.CommandTrees.DbExpression
      description: "セットに対して射影式。"
    return:
      type: System.Data.Common.CommandTrees.DbProjectExpression
      description: "射影演算を表す新しい DbProjectExpression。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>または<code>projection</code>が null です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.EdmProperty)
  id: Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.EdmProperty)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Property(DbExpression,EdmProperty)
  nameWithType: DbExpressionBuilder.Property(DbExpression,EdmProperty)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(DbExpression,EdmProperty)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbPropertyExpression&quot;></xref>を表す、指定されたプロパティを取得します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Common.CommandTrees.DbExpression instance, System.Data.Metadata.Edm.EdmProperty propertyMetadata);
    parameters:
    - id: instance
      type: System.Data.Common.CommandTrees.DbExpression
      description: "プロパティを取得する対象のインスタンス。 プロパティが静的の場合は null にすることがあります。"
    - id: propertyMetadata
      type: System.Data.Metadata.Edm.EdmProperty
      description: "プロパティのメタデータを取得します。"
    return:
      type: System.Data.Common.CommandTrees.DbPropertyExpression
      description: "プロパティの取得を表す新しい DbPropertyExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>propertyMetadata</code>null または<code>instance</code>が null プロパティが static ではないとします。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.NavigationProperty)
  id: Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.NavigationProperty)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Property(DbExpression,NavigationProperty)
  nameWithType: DbExpressionBuilder.Property(DbExpression,NavigationProperty)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(DbExpression,NavigationProperty)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbPropertyExpression&quot;></xref>を表す、指定されたナビゲーション プロパティを取得します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Common.CommandTrees.DbExpression instance, System.Data.Metadata.Edm.NavigationProperty navigationProperty);
    parameters:
    - id: instance
      type: System.Data.Common.CommandTrees.DbExpression
      description: "ナビゲーション プロパティを取得する対象のインスタンス。"
    - id: navigationProperty
      type: System.Data.Metadata.Edm.NavigationProperty
      description: "取得するナビゲーション プロパティのメタデータ。"
    return:
      type: System.Data.Common.CommandTrees.DbPropertyExpression
      description: "ナビゲーション プロパティの取得を表す新しい DbPropertyExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>navigationProperty</code>または<code>instance</code>が null です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.RelationshipEndMember)
  id: Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.RelationshipEndMember)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Property(DbExpression,RelationshipEndMember)
  nameWithType: DbExpressionBuilder.Property(DbExpression,RelationshipEndMember)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(DbExpression,RelationshipEndMember)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbPropertyExpression&quot;></xref>を表す指定されたリレーションシップの end メンバーを取得します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Common.CommandTrees.DbExpression instance, System.Data.Metadata.Edm.RelationshipEndMember relationshipEnd);
    parameters:
    - id: instance
      type: System.Data.Common.CommandTrees.DbExpression
      description: "リレーションシップの end メンバーを取得する対象のインスタンス。"
    - id: relationshipEnd
      type: System.Data.Metadata.Edm.RelationshipEndMember
      description: "取得するリレーションシップ end メンバーのメタデータ。"
    return:
      type: System.Data.Common.CommandTrees.DbPropertyExpression
      description: "リレーションシップの end メンバーの取得を表す新しい DbPropertyExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>relationshipEnd</code>null または<code>instance</code>が null プロパティが static ではないとします。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.String)
  id: Property(System.Data.Common.CommandTrees.DbExpression@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Property(DbExpression,String)
  nameWithType: DbExpressionBuilder.Property(DbExpression,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(DbExpression,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbPropertyExpression&quot;></xref>特定のインスタンスから指定した名前を持つインスタンス プロパティの取得を表すです。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Common.CommandTrees.DbExpression instance, string propertyName);
    parameters:
    - id: instance
      type: System.Data.Common.CommandTrees.DbExpression
      description: "プロパティを取得する対象のインスタンス。"
    - id: propertyName
      type: System.String
      description: "取得するプロパティの名前。"
    return:
      type: System.Data.Common.CommandTrees.DbPropertyExpression
      description: "プロパティの取得を表す新しい DbPropertyExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>propertyName</code>null または<code>instance</code>が null プロパティが static ではないとします。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "型によって指定された名前のプロパティが宣言されていない<code> instance</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression)
  id: RefFromKey(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: RefFromKey(EntitySet,DbExpression)
  nameWithType: DbExpressionBuilder.RefFromKey(EntitySet,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(EntitySet,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbRefExpression&quot;></xref>キー値に基づいて、特定のエンティティへの参照をエンコードします。"
  remarks: '`keyRow` should be an expression that specifies the key values that identify the referenced entity within the given entity set. The result type of `keyRow` should contain a corresponding column for each key property defined by `entitySet''s` entity type.'
  syntax:
    content: public static System.Data.Common.CommandTrees.DbRefExpression RefFromKey (this System.Data.Metadata.Edm.EntitySet entitySet, System.Data.Common.CommandTrees.DbExpression keyRow);
    parameters:
    - id: entitySet
      type: System.Data.Metadata.Edm.EntitySet
      description: "エンティティは、参照される要素が存在するセット。"
    - id: keyRow
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>参照先のエンティティ型のキー プロパティ (数、種類、および順序) に一致する列を含むレコードを構築します。"
    return:
      type: System.Data.Common.CommandTrees.DbRefExpression
      description: "指定されたエンティティ セットの指定したキー値を持つ要素を参照する新しい dbrefexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>entitySet</code>または<code>keyRow</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyRow</code>参照先エンティティ セットのエンティティ型のキー プロパティに一致するレコードの結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.EntityType)
  id: RefFromKey(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.EntityType)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: RefFromKey(EntitySet,DbExpression,EntityType)
  nameWithType: DbExpressionBuilder.RefFromKey(EntitySet,DbExpression,EntityType)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(EntitySet,DbExpression,EntityType)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbRefExpression&quot;></xref>キー値に基づいて、特定のエンティティへの参照をエンコードします。"
  remarks: '`keyRow` should be an expression that specifies the key values that identify the referenced entity within the given entity set. The result type of `keyRow` should contain a corresponding column for each key property defined by `entitySet''s` entity type.'
  syntax:
    content: public static System.Data.Common.CommandTrees.DbRefExpression RefFromKey (this System.Data.Metadata.Edm.EntitySet entitySet, System.Data.Common.CommandTrees.DbExpression keyRow, System.Data.Metadata.Edm.EntityType entityType);
    parameters:
    - id: entitySet
      type: System.Data.Metadata.Edm.EntitySet
      description: "エンティティは、参照される要素が存在するセット。"
    - id: keyRow
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>参照先のエンティティ型のキー プロパティ (数、種類、および順序) に一致する列を含むレコードを構築します。"
    - id: entityType
      type: System.Data.Metadata.Edm.EntityType
      description: "参照が参照するエンティティの型。"
    return:
      type: System.Data.Common.CommandTrees.DbRefExpression
      description: "指定されたエンティティ セットの指定したキー値を持つ要素を参照する新しい dbrefexpression にします。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>entitySet</code>,  <code>keyRow</code> or <code>entityType</code> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>entityType</code>エンティティ セットのエンティティの種類と同じ型階層に含まれないまたは<code>keyRow</code>参照先エンティティ セットのエンティティ型のキー プロパティに一致するレコードの結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Metadata.Edm.EntitySetBase@)
  id: Scan(System.Data.Metadata.Edm.EntitySetBase@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Scan(EntitySetBase)
  nameWithType: DbExpressionBuilder.Scan(EntitySetBase)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(EntitySetBase)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbScanExpression&quot;></xref>指定されたエンティティ セットまたはリレーションシップ セットを参照します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbScanExpression Scan (this System.Data.Metadata.Edm.EntitySetBase targetSet);
    parameters:
    - id: targetSet
      type: System.Data.Metadata.Edm.EntitySetBase
      description: "参照するエンティティまたはリレーションシップ セットのメタデータ。"
    return:
      type: System.Data.Common.CommandTrees.DbScanExpression
      description: "新しい DbScanExpression は、指定されたエンティティ セットまたはリレーションシップ セットに基づいています。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetSet</code>null です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,``0})
  id: Select``1(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,``0})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Select(DbExpression,Func<DbExpression,TProjection>)
  nameWithType: DbExpressionBuilder.Select(DbExpression,Func<DbExpression,TProjection>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select(DbExpression,Func<DbExpression,TProjection>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  syntax:
    content: public static System.Data.Common.CommandTrees.DbProjectExpression Select<TProjection> (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,TProjection> projection);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "追加します。"
    - id: projection
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,TProjection}
      description: "追加します。"
    return:
      type: System.Data.Common.CommandTrees.DbProjectExpression
      description: "追加します。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select<TProjection>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: SelectMany(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: SelectMany(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.SelectMany(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(DbExpression,Func<DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbApplyExpression&quot;></xref>評価される、指定された<code> apply </code>特定の入力の各要素に対して&1; 回の式は、設定すると、対応する入力を持つ行のコレクションを生成して、列を適用します。 対象の行<code> apply </code>空のセットに評価は含まれません。 A <xref href=&quot;System.Data.Common.CommandTrees.DbProjectExpression&quot;> </xref>がその選択を作成し、 <code> apply </code>の全体的なコレクションを生成するそれぞれの行から列<code> apply </code>結果。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbProjectExpression SelectMany (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> apply);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;> </xref>入力セットを指定します。"
    - id: apply
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "入力セットのメンバーごとに&1; 回評価するためのロジックを表すメソッド。"
    return:
      type: System.Data.Common.CommandTrees.DbProjectExpression
      description: "新しい DbApplyExpression から指定された入力と適用のバインドで、[適用] 列を選択する新しい DbProjectExpression と<xref href=&quot;System.Data.Common.CommandTrees.DbExpressionKind&quot;></xref>の crossapply です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> apply </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> apply </code>コレクション型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})
  id: SelectMany``1(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: SelectMany(DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
  nameWithType: DbExpressionBuilder.SelectMany(DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  syntax:
    content: public static System.Data.Common.CommandTrees.DbProjectExpression SelectMany<TSelector> (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> apply, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector> selector);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "追加します。"
    - id: apply
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "追加します。"
    - id: selector
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector}
      description: "追加します。"
    return:
      type: System.Data.Common.CommandTrees.DbProjectExpression
      description: "追加します。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany<TSelector>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbSortExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Skip(System.Data.Common.CommandTrees.DbSortExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Skip(DbSortExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Skip(DbSortExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(DbSortExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSkipExpression&quot;></xref>特定の並べ替えられた入力セットから指定した要素数をスキップします。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSkipExpression Skip (this System.Data.Common.CommandTrees.DbSortExpression argument, System.Data.Common.CommandTrees.DbExpression count);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbSortExpression&quot;> </xref>並べ替えられた入力セットを指定します。"
    - id: count
      type: System.Data.Common.CommandTrees.DbExpression
      description: "式、順番に並べたセットをスキップする要素の数を指定します。"
    return:
      type: System.Data.Common.CommandTrees.DbSkipExpression
      description: "スキップ操作を表す新しい DbSkipExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>または<code>count</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>count</code><xref href=&quot;System.Data.Common.CommandTrees.DbConstantExpression&quot;> </xref>または<xref href=&quot;System.Data.Common.CommandTrees.DbParameterReferenceExpression&quot;></xref>が等しくないか昇格可能な 64 ビットの整数型に結果の型を持つか。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause},System.Data.Common.CommandTrees.DbExpression)
  id: Skip(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause},System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Skip(DbExpressionBinding,IEnumerable<DbSortClause>,DbExpression)
  nameWithType: DbExpressionBuilder.Skip(DbExpressionBinding,IEnumerable<DbSortClause>,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(DbExpressionBinding,IEnumerable<DbSortClause>,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSkipExpression&quot;></xref>与えられたソートの仕様で指定した要素数をスキップする前に設定する特定の入力を並べ替えますです。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSkipExpression Skip (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbSortClause> sortOrder, System.Data.Common.CommandTrees.DbExpression count);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "バインディングを式では、入力セットを指定します。"
    - id: sortOrder
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause}
      description: "入力セットの要素の並べ替え方法を決定する並べ替え仕様の一覧。"
    - id: count
      type: System.Data.Common.CommandTrees.DbExpression
      description: "式、順番に並べたセットをスキップする要素の数を指定します。"
    return:
      type: System.Data.Common.CommandTrees.DbSkipExpression
      description: "スキップ操作を表す新しい DbSkipExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>、<code>sortOrder</code>または<code>count</code>が null、または<code>sortOrder</code>null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sortOrder</code>空、または<code>count</code>は<xref href=&quot;System.Data.Common.CommandTrees.DbConstantExpression&quot;></xref>または<xref href=&quot;System.Data.Common.CommandTrees.DbParameterReferenceExpression&quot;></xref>が等しくないか昇格可能な 64 ビットの整数型に結果の型を持つか。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause})
  id: Sort(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Sort(DbExpressionBinding,IEnumerable<DbSortClause>)
  nameWithType: DbExpressionBuilder.Sort(DbExpressionBinding,IEnumerable<DbSortClause>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(DbExpressionBinding,IEnumerable<DbSortClause>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortExpression&quot;></xref>設定、指定された並べ替えの仕様で指定された入力を並べ替えます。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortExpression Sort (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbSortClause> sortOrder);
    parameters:
    - id: input
      type: System.Data.Common.CommandTrees.DbExpressionBinding
      description: "バインディングを式では、入力セットを指定します。"
    - id: sortOrder
      type: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause}
      description: "入力セットの要素の並べ替え方法を決定する並べ替え仕様の一覧。"
    return:
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "並べ替え操作を表す新しい DbSortExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>input</code>または<code>sortOrder</code>が null、または<code>sortOrder</code>null が含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sortOrder</code>空です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Take(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Take(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Take(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbLimitExpression&quot;></xref>指定した数の制限値を引数コレクション内の要素の数を制限しています。 出力には、同じランクの結果は含まれません。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbLimitExpression Take (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Common.CommandTrees.DbExpression count);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力コレクションを指定する式。"
    - id: count
      type: System.Data.Common.CommandTrees.DbExpression
      description: "制限値を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbLimitExpression
      description: "含まない新しい DbLimitExpression 指定した引数とカウントの制限値には、結果が関連付けられています。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>または<code>count</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argument</code>コレクションの結果の型を持たない<code>count</code>が等しいか昇格可能な 64 ビットの整数型にする結果型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: ThenBy(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: ThenBy(DbSortExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.ThenBy(DbSortExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(DbSortExpression,Func<DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortExpression&quot;></xref>と共に既定の照合順序を使用して、昇順で並べ替え順序で指定された並べ替えキーのセットを入力する並べ替え順が特定の順序の並べ替え順序が含まれています。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortExpression ThenBy (this System.Data.Common.CommandTrees.DbSortExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> sortKey);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "順序付けされた入力セットを指定する DbSortExpression です。"
    - id: sortKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "追加の並べ替えキー式は、与えられた入力セットのメンバーを派生させる方法を指定するメソッド。 このメソッドは、並べ替えを提供する結果の順序を比較できる型である式を生成する必要がありますキーの定義。"
    return:
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "新しい全体的な order by 操作を表す新しい DbSortExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> sortKey </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sortKey</code>結果の順序を比較できる型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  id: ThenBy(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: ThenBy(DbSortExpression,Func<DbExpression,DbExpression>,String)
  nameWithType: DbExpressionBuilder.ThenBy(DbSortExpression,Func<DbExpression,DbExpression>,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(DbSortExpression,Func<DbExpression,DbExpression>,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortExpression&quot;></xref>と共に、指定された並べ替えキーで昇順に並べ替え順序および指定した照合順序でセットを入力する特定の順序の並べ替え順序を含む並べ替え順序を持つ。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortExpression ThenBy (this System.Data.Common.CommandTrees.DbSortExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> sortKey, string collation);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "順序付けされた入力セットを指定する DbSortExpression です。"
    - id: sortKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "追加の並べ替えキー式は、与えられた入力セットのメンバーを派生させる方法を指定するメソッド。 このメソッドは、並べ替えを提供する結果の順序を比較できる型である式を生成する必要がありますキーの定義。"
    - id: collation
      type: System.String
      description: "を並べ替える照合順序です。"
    return:
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "新しい全体的な order by 操作を表す新しい DbSortExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> sortKey </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> sortKey </code>順序比較文字列結果型はありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>collation</code>空か、空白文字だけが含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortExpression&quot;></xref>と共に既定の照合順序を使用して、降順の並べ替え順序で指定された並べ替えキーのセットを入力する並べ替え順が特定の順序の並べ替え順序が含まれています。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortExpression ThenByDescending (this System.Data.Common.CommandTrees.DbSortExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> sortKey);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "順序付けされた入力セットを指定する DbSortExpression です。"
    - id: sortKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "追加の並べ替えキー式は、与えられた入力セットのメンバーを派生させる方法を指定するメソッド。 このメソッドは、並べ替えを提供する結果の順序を比較できる型である式を生成する必要がありますキーの定義。"
    return:
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "新しい全体的な order by 操作を表す新しい DbSortExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> sortKey </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> sortKey </code>結果の順序を比較できる型がありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  id: ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>,String)
  nameWithType: DbExpressionBuilder.ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortExpression&quot;></xref>と共に指定した照合順序を使用して、降順の並べ替え順序で指定された並べ替えキーのセットを入力する並べ替え順が特定の順序の並べ替え順序が含まれています。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortExpression ThenByDescending (this System.Data.Common.CommandTrees.DbSortExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> sortKey, string collation);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "順序付けされた入力セットを指定する DbSortExpression です。"
    - id: sortKey
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "追加の並べ替えキー式は、与えられた入力セットのメンバーを派生させる方法を指定するメソッド。 このメソッドは、並べ替えを提供する結果の順序を比較できる型である式を生成する必要がありますキーの定義。"
    - id: collation
      type: System.String
      description: "を並べ替える照合順序です。"
    return:
      type: System.Data.Common.CommandTrees.DbSortExpression
      description: "新しい全体的な order by 操作を表す新しい DbSortExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> sortKey </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> sortKey </code>順序比較文字列結果型はありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>collation</code>空か、空白文字だけが含まれています。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression@)
  id: ToSortClause(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: ToSortClause(DbExpression)
  nameWithType: DbExpressionBuilder.ToSortClause(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortClause&quot;></xref>昇順の並べ替え順序と既定照合順序で。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortClause ToSortClause (this System.Data.Common.CommandTrees.DbExpression key);
    parameters:
    - id: key
      type: System.Data.Common.CommandTrees.DbExpression
      description: "並べ替えキーを定義する式。"
    return:
      type: System.Data.Common.CommandTrees.DbSortClause
      description: "指定された並べ替えキーと昇順の並べ替え順序を持つ新しい並べ替え句。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>key</code>結果の順序を比較できる型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression@,System.String)
  id: ToSortClause(System.Data.Common.CommandTrees.DbExpression@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: ToSortClause(DbExpression,String)
  nameWithType: DbExpressionBuilder.ToSortClause(DbExpression,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(DbExpression,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortClause&quot;></xref>昇順の並べ替え順序と、指定された照合順序を使用します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortClause ToSortClause (this System.Data.Common.CommandTrees.DbExpression key, string collation);
    parameters:
    - id: key
      type: System.Data.Common.CommandTrees.DbExpression
      description: "並べ替えキーを定義する式。"
    - id: collation
      type: System.String
      description: "を並べ替える照合順序です。"
    return:
      type: System.Data.Common.CommandTrees.DbSortClause
      description: "指定された並べ替えキーと照合順序、昇順の並べ替え順序と新しい並べ替え句。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>null です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>collation</code>空か、空白文字だけが含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>key</code>結果の順序を比較できる型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression@)
  id: ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: ToSortClauseDescending(DbExpression)
  nameWithType: DbExpressionBuilder.ToSortClauseDescending(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortClause&quot;></xref>降順の並べ替え順序と既定照合順序を使用します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortClause ToSortClauseDescending (this System.Data.Common.CommandTrees.DbExpression key);
    parameters:
    - id: key
      type: System.Data.Common.CommandTrees.DbExpression
      description: "並べ替えキーを定義する式。"
    return:
      type: System.Data.Common.CommandTrees.DbSortClause
      description: "指定された並べ替えキーと降順の並べ替え順序を持つ新しい並べ替え句。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>key</code>結果の順序を比較できる型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression@,System.String)
  id: ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: ToSortClauseDescending(DbExpression,String)
  nameWithType: DbExpressionBuilder.ToSortClauseDescending(DbExpression,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(DbExpression,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbSortClause&quot;></xref>降順の並べ替え順序と、指定された照合順序を使用します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbSortClause ToSortClauseDescending (this System.Data.Common.CommandTrees.DbExpression key, string collation);
    parameters:
    - id: key
      type: System.Data.Common.CommandTrees.DbExpression
      description: "並べ替えキーを定義する式。"
    - id: collation
      type: System.String
      description: "を並べ替える照合順序です。"
    return:
      type: System.Data.Common.CommandTrees.DbSortClause
      description: "指定された並べ替えキーと照合順序、降順の並べ替え順序と新しい並べ替え句。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>null です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>collation</code>空か、空白文字だけが含まれています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>key</code>結果の順序を比較できる型はありません。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  id: TreatAs(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: TreatAs(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.TreatAs(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(DbExpression,TypeUsage)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbTreatExpression&quot;></xref>です。"
  remarks: "DbTreatExpression では、する必要があります`argument`があり、ポリモーフィックな結果型を`treatType`は、その結果の型と同じ型階層からの型。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbTreatExpression TreatAs (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage treatType);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "インスタンスを指定する式。"
    - id: treatType
      type: System.Data.Metadata.Edm.TypeUsage
      description: "入力の処理のメタデータの型として。"
    return:
      type: System.Data.Common.CommandTrees.DbTreatExpression
      description: "指定した引数と型を持つ新しい DbTreatExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>または<code>treatType</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>treatType</code>結果の型と同じ型階層に含まれない<code>argument</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True
  id: "True"
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: "True"
  nameWithType: DbExpressionBuilder.True
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "取得、 <xref href=&quot;System.Data.Common.CommandTrees.DbConstantExpression&quot;> </xref>ブール値を持つ<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbConstantExpression True { get; }
    return:
      type: System.Data.Common.CommandTrees.DbConstantExpression
      description: "A <xref href=&quot;System.Data.Common.CommandTrees.DbConstantExpression&quot;> </xref>ブール値を持つ<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Common.CommandTrees.DbExpression@)
  id: UnaryMinus(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: UnaryMinus(DbExpression)
  nameWithType: DbExpressionBuilder.UnaryMinus(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbArithmeticExpression&quot;></xref>引数の値を否定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbArithmeticExpression UnaryMinus (this System.Data.Common.CommandTrees.DbExpression argument);
    parameters:
    - id: argument
      type: System.Data.Common.CommandTrees.DbExpression
      description: "引数を指定する式。"
    return:
      type: System.Data.Common.CommandTrees.DbArithmeticExpression
      description: "否定演算を表す新しい DbArithmeticExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code>null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "結果型が存在しない<code> argument</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: Union(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Union(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Union(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbExpression&quot;></xref>左側の和集合を計算して、権利は、重複が削除された引数を設定します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbExpression Union (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左側を定義する式は、引数を設定します。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "権限を定義する式は、引数を設定します。"
    return:
      type: System.Data.Common.CommandTrees.DbExpression
      description: "重複がなく、和集合を計算する新しい DbExpression、左と右の引数。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間、等しいかどうかを比較できる要素の型との共通コレクション結果型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  id: UnionAll(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: UnionAll(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.UnionAll(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(DbExpression,DbExpression)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbUnionAllExpression&quot;></xref>左と右のセット引数の和集合を計算して、重複は削除されません。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbUnionAllExpression UnionAll (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);
    parameters:
    - id: left
      type: System.Data.Common.CommandTrees.DbExpression
      description: "左側を定義する式は、引数を設定します。"
    - id: right
      type: System.Data.Common.CommandTrees.DbExpression
      description: "権限を定義する式は、引数を設定します。"
    return:
      type: System.Data.Common.CommandTrees.DbUnionAllExpression
      description: "新しい DbUnionAllExpression の重複を含むその共用体の左と右の引数。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>left</code>または<code>right</code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "間、等しいかどうかを比較できる要素の型との共通コレクション結果型が存在しない<code> left </code>と<code> right</code>です。"
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Metadata.Edm.TypeUsage@,System.String)
  id: Variable(System.Data.Metadata.Edm.TypeUsage@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Variable(TypeUsage,String)
  nameWithType: DbExpressionBuilder.Variable(TypeUsage,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(TypeUsage,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbVariableReferenceExpression&quot;></xref>指定した名前と型を持つ変数を参照します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbVariableReferenceExpression Variable (this System.Data.Metadata.Edm.TypeUsage type, string name);
    parameters:
    - id: type
      type: System.Data.Metadata.Edm.TypeUsage
      description: "参照先の変数の型。"
    - id: name
      type: System.String
      description: "参照先の変数の名前。"
    return:
      type: System.Data.Common.CommandTrees.DbVariableReferenceExpression
      description: "指定した名前と型を持つ変数への参照を表す dbvariablereferenceexpression に対するです。 式の結果型は、同じであるとして<code> type</code>です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  id: Where(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  langs:
  - csharp
  name: Where(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.Where(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(DbExpression,Func<DbExpression,DbExpression>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Common.CommandTrees.ExpressionBuilder
  summary: "新たに作成<xref href=&quot;System.Data.Common.CommandTrees.DbFilterExpression&quot;></xref>指定された述語を使用して設定の指定された入力内の要素をフィルター処理します。"
  syntax:
    content: public static System.Data.Common.CommandTrees.DbFilterExpression Where (this System.Data.Common.CommandTrees.DbExpression source, Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression> predicate);
    parameters:
    - id: source
      type: System.Data.Common.CommandTrees.DbExpression
      description: "入力セットを指定する式。"
    - id: predicate
      type: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
      description: "入力セットの各メンバーに評価する述語を表すメソッド。    このメソッドは、述語のロジックを提供するブール型の結果の型を持つ式を生成する必要があります。"
    return:
      type: System.Data.Common.CommandTrees.DbFilterExpression
      description: "任意の操作を表す新しい DbQuantifierExpression です。"
  overload: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "によって生成された式<code> predicate </code>が null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "によって生成された式<code> predicate </code>ブール型の結果の型がありません。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Aggregate(EdmFunction,DbExpression)
  nameWithType: DbExpressionBuilder.Aggregate(EdmFunction,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(EdmFunction,DbExpression)
- uid: System.Data.Common.CommandTrees.DbFunctionAggregate
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbFunctionAggregate
  nameWithType: DbFunctionAggregate
  fullName: System.Data.Common.CommandTrees.DbFunctionAggregate
- uid: System.Data.Metadata.Edm.EdmFunction
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EdmFunction
  nameWithType: EdmFunction
  fullName: System.Data.Metadata.Edm.EdmFunction
- uid: System.Data.Common.CommandTrees.DbExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbExpression
  nameWithType: DbExpression
  fullName: System.Data.Common.CommandTrees.DbExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: AggregateDistinct(EdmFunction,DbExpression)
  nameWithType: DbExpressionBuilder.AggregateDistinct(EdmFunction,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(EdmFunction,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: All(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.All(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(DbExpression,Func<DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.DbQuantifierExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbQuantifierExpression
  nameWithType: DbQuantifierExpression
  fullName: System.Data.Common.CommandTrees.DbQuantifierExpression
- uid: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
  parent: System
  isExternal: true
  name: Func<DbExpression,DbExpression>
  nameWithType: Func<DbExpression,DbExpression>
  fullName: System.Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: All(DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.All(DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(DbExpressionBinding,DbExpression)
- uid: System.Data.Common.CommandTrees.DbExpressionBinding
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbExpressionBinding
  nameWithType: DbExpressionBinding
  fullName: System.Data.Common.CommandTrees.DbExpressionBinding
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: And(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.And(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.DbAndExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbAndExpression
  nameWithType: DbAndExpression
  fullName: System.Data.Common.CommandTrees.DbAndExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Any(DbExpression)
  nameWithType: DbExpressionBuilder.Any(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Any(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.Any(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(DbExpression,Func<DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Any(DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.Any(DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(DbExpressionBinding,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbAggregate@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: As(DbAggregate,String)
  nameWithType: DbExpressionBuilder.As(DbAggregate,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(DbAggregate,String)
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<String,DbAggregate>
  nameWithType: KeyValuePair<String,DbAggregate>
  fullName: System.Collections.Generic.KeyValuePair<System.String,System.Data.Common.CommandTrees.DbAggregate>
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Data.Common.CommandTrees.DbAggregate>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.Common.CommandTrees.DbAggregate
    name: DbAggregate
    nameWithType: DbAggregate
    fullName: DbAggregate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.DbAggregate
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbAggregate
  nameWithType: DbAggregate
  fullName: System.Data.Common.CommandTrees.DbAggregate
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbExpression@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: As(DbExpression,String)
  nameWithType: DbExpressionBuilder.As(DbExpression,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(DbExpression,String)
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}
  parent: System.Collections.Generic
  isExternal: true
  name: KeyValuePair<String,DbExpression>
  nameWithType: KeyValuePair<String,DbExpression>
  fullName: System.Collections.Generic.KeyValuePair<System.String,System.Data.Common.CommandTrees.DbExpression>
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Data.Common.CommandTrees.DbExpression>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Bind(DbExpression)
  nameWithType: DbExpressionBuilder.Bind(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Common.CommandTrees.DbExpression@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: BindAs(DbExpression,String)
  nameWithType: DbExpressionBuilder.BindAs(DbExpression,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(DbExpression,String)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression},System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Case(IEnumerable<DbExpression>,IEnumerable<DbExpression>,DbExpression)
  nameWithType: DbExpressionBuilder.Case(IEnumerable<DbExpression>,IEnumerable<DbExpression>,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(IEnumerable<DbExpression>,IEnumerable<DbExpression>,DbExpression)
- uid: System.Data.Common.CommandTrees.DbCaseExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbCaseExpression
  nameWithType: DbCaseExpression
  fullName: System.Data.Common.CommandTrees.DbCaseExpression
- uid: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<DbExpression>
  nameWithType: IEnumerable<DbExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpression>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.Common.CommandTrees.DbExpression>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CastTo(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.CastTo(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(DbExpression,TypeUsage)
- uid: System.Data.Common.CommandTrees.DbCastExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbCastExpression
  nameWithType: DbCastExpression
  fullName: System.Data.Common.CommandTrees.DbCastExpression
- uid: System.Data.Metadata.Edm.TypeUsage
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: TypeUsage
  nameWithType: TypeUsage
  fullName: System.Data.Metadata.Edm.TypeUsage
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Constant(Object)
  nameWithType: DbExpressionBuilder.Constant(Object)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(Object)
- uid: System.Data.Common.CommandTrees.DbConstantExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbConstantExpression
  nameWithType: DbConstantExpression
  fullName: System.Data.Common.CommandTrees.DbConstantExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Metadata.Edm.TypeUsage@,System.Object)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Constant(TypeUsage,Object)
  nameWithType: DbExpressionBuilder.Constant(TypeUsage,Object)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(TypeUsage,Object)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CreateRef(EntitySet,IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.CreateRef(EntitySet,IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(EntitySet,IEnumerable<DbExpression>)
- uid: System.Data.Common.CommandTrees.DbRefExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbRefExpression
  nameWithType: DbRefExpression
  fullName: System.Data.Common.CommandTrees.DbRefExpression
- uid: System.Data.Metadata.Edm.EntitySet
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EntitySet
  nameWithType: EntitySet
  fullName: System.Data.Metadata.Edm.EntitySet
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CreateRef(EntitySet,DbExpression[])
  nameWithType: DbExpressionBuilder.CreateRef(EntitySet,DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(EntitySet,DbExpression[])
- uid: System.Data.Common.CommandTrees.DbExpression[]
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbExpression
  nameWithType: DbExpression
  fullName: System.Data.Common.CommandTrees.DbExpression[]
  spec.csharp:
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CreateRef(EntitySet,EntityType,IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.CreateRef(EntitySet,EntityType,IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(EntitySet,EntityType,IEnumerable<DbExpression>)
- uid: System.Data.Metadata.Edm.EntityType
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EntityType
  nameWithType: EntityType
  fullName: System.Data.Metadata.Edm.EntityType
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet@,System.Data.Metadata.Edm.EntityType,System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CreateRef(EntitySet,EntityType,DbExpression[])
  nameWithType: DbExpressionBuilder.CreateRef(EntitySet,EntityType,DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(EntitySet,EntityType,DbExpression[])
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CrossApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
  nameWithType: DbExpressionBuilder.CrossApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
- uid: System.Data.Common.CommandTrees.DbApplyExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbApplyExpression
  nameWithType: DbApplyExpression
  fullName: System.Data.Common.CommandTrees.DbApplyExpression
- uid: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}}
  parent: System
  isExternal: true
  name: Func<DbExpression,KeyValuePair<String,DbExpression>>
  nameWithType: Func<DbExpression,KeyValuePair<String,DbExpression>>
  fullName: System.Func<System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair<System.String,System.Data.Common.CommandTrees.DbExpression>>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair<System.String,System.Data.Common.CommandTrees.DbExpression>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Data.Common.CommandTrees.DbExpression>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CrossApply(DbExpressionBinding,DbExpressionBinding)
  nameWithType: DbExpressionBuilder.CrossApply(DbExpressionBinding,DbExpressionBinding)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(DbExpressionBinding,DbExpressionBinding)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpressionBinding})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CrossJoin(IEnumerable<DbExpressionBinding>)
  nameWithType: DbExpressionBuilder.CrossJoin(IEnumerable<DbExpressionBinding>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(IEnumerable<DbExpressionBinding>)
- uid: System.Data.Common.CommandTrees.DbCrossJoinExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbCrossJoinExpression
  nameWithType: DbCrossJoinExpression
  fullName: System.Data.Common.CommandTrees.DbCrossJoinExpression
- uid: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpressionBinding}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<DbExpressionBinding>
  nameWithType: IEnumerable<DbExpressionBinding>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbExpressionBinding>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.Common.CommandTrees.DbExpressionBinding>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.CommandTrees.DbExpressionBinding
    name: DbExpressionBinding
    nameWithType: DbExpressionBinding
    fullName: DbExpressionBinding
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Deref(DbExpression)
  nameWithType: DbExpressionBuilder.Deref(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(DbExpression)
- uid: System.Data.Common.CommandTrees.DbDerefExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbDerefExpression
  nameWithType: DbDerefExpression
  fullName: System.Data.Common.CommandTrees.DbDerefExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Distinct(DbExpression)
  nameWithType: DbExpressionBuilder.Distinct(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(DbExpression)
- uid: System.Data.Common.CommandTrees.DbDistinctExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbDistinctExpression
  nameWithType: DbDistinctExpression
  fullName: System.Data.Common.CommandTrees.DbDistinctExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Divide(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Divide(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.DbArithmeticExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbArithmeticExpression
  nameWithType: DbArithmeticExpression
  fullName: System.Data.Common.CommandTrees.DbArithmeticExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Element(DbExpression)
  nameWithType: DbExpressionBuilder.Element(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(DbExpression)
- uid: System.Data.Common.CommandTrees.DbElementExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbElementExpression
  nameWithType: DbElementExpression
  fullName: System.Data.Common.CommandTrees.DbElementExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Equal(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Equal(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.DbComparisonExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbComparisonExpression
  nameWithType: DbComparisonExpression
  fullName: System.Data.Common.CommandTrees.DbComparisonExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Except(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Except(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.DbExceptExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbExceptExpression
  nameWithType: DbExceptExpression
  fullName: System.Data.Common.CommandTrees.DbExceptExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Exists(DbExpression)
  nameWithType: DbExpressionBuilder.Exists(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: "False"
  nameWithType: DbExpressionBuilder.False
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Filter(DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.Filter(DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(DbExpressionBinding,DbExpression)
- uid: System.Data.Common.CommandTrees.DbFilterExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbFilterExpression
  nameWithType: DbFilterExpression
  fullName: System.Data.Common.CommandTrees.DbFilterExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: FullOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.FullOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.DbJoinExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbJoinExpression
  nameWithType: DbJoinExpression
  fullName: System.Data.Common.CommandTrees.DbJoinExpression
- uid: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression}
  parent: System
  isExternal: true
  name: Func<DbExpression,DbExpression,DbExpression>
  nameWithType: Func<DbExpression,DbExpression,DbExpression>
  fullName: System.Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: FullOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.FullOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GetEntityRef(DbExpression)
  nameWithType: DbExpressionBuilder.GetEntityRef(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(DbExpression)
- uid: System.Data.Common.CommandTrees.DbEntityRefExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbEntityRefExpression
  nameWithType: DbEntityRefExpression
  fullName: System.Data.Common.CommandTrees.DbEntityRefExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GetRefKey(DbExpression)
  nameWithType: DbExpressionBuilder.GetRefKey(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(DbExpression)
- uid: System.Data.Common.CommandTrees.DbRefKeyExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbRefKeyExpression
  nameWithType: DbRefKeyExpression
  fullName: System.Data.Common.CommandTrees.DbRefKeyExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GreaterThan(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.GreaterThan(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GreaterThanOrEqual(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.GreaterThanOrEqual(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GroupBind(DbExpression)
  nameWithType: DbExpressionBuilder.GroupBind(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(DbExpression)
- uid: System.Data.Common.CommandTrees.DbGroupExpressionBinding
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbGroupExpressionBinding
  nameWithType: DbGroupExpressionBinding
  fullName: System.Data.Common.CommandTrees.DbGroupExpressionBinding
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Common.CommandTrees.DbExpression@,System.String,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GroupBindAs(DbExpression,String,String)
  nameWithType: DbExpressionBuilder.GroupBindAs(DbExpression,String,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(DbExpression,String,String)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Common.CommandTrees.DbGroupExpressionBinding@,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GroupBy(DbGroupExpressionBinding,IEnumerable<KeyValuePair<String,DbExpression>>,IEnumerable<KeyValuePair<String,DbAggregate>>)
  nameWithType: DbExpressionBuilder.GroupBy(DbGroupExpressionBinding,IEnumerable<KeyValuePair<String,DbExpression>>,IEnumerable<KeyValuePair<String,DbAggregate>>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(DbGroupExpressionBinding,IEnumerable<KeyValuePair<String,DbExpression>>,IEnumerable<KeyValuePair<String,DbAggregate>>)
- uid: System.Data.Common.CommandTrees.DbGroupByExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbGroupByExpression
  nameWithType: DbGroupByExpression
  fullName: System.Data.Common.CommandTrees.DbGroupByExpression
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,DbExpression>>
  nameWithType: IEnumerable<KeyValuePair<String,DbExpression>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Data.Common.CommandTrees.DbExpression>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Data.Common.CommandTrees.DbExpression>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Data.Common.CommandTrees.DbExpression>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,DbAggregate>>
  nameWithType: IEnumerable<KeyValuePair<String,DbAggregate>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Data.Common.CommandTrees.DbAggregate>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Data.Common.CommandTrees.DbAggregate>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Data.Common.CommandTrees.DbAggregate>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.Common.CommandTrees.DbAggregate
    name: DbAggregate
    nameWithType: DbAggregate
    fullName: DbAggregate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: InnerJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.InnerJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: InnerJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.InnerJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Intersect(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Intersect(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.DbIntersectExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbIntersectExpression
  nameWithType: DbIntersectExpression
  fullName: System.Data.Common.CommandTrees.DbIntersectExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Invoke(DbLambda,IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.Invoke(DbLambda,IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(DbLambda,IEnumerable<DbExpression>)
- uid: System.Data.Common.CommandTrees.DbLambdaExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbLambdaExpression
  nameWithType: DbLambdaExpression
  fullName: System.Data.Common.CommandTrees.DbLambdaExpression
- uid: System.Data.Common.CommandTrees.DbLambda
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbLambda
  nameWithType: DbLambda
  fullName: System.Data.Common.CommandTrees.DbLambda
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda@,System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Invoke(DbLambda,DbExpression[])
  nameWithType: DbExpressionBuilder.Invoke(DbLambda,DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(DbLambda,DbExpression[])
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Invoke(EdmFunction,IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.Invoke(EdmFunction,IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(EdmFunction,IEnumerable<DbExpression>)
- uid: System.Data.Common.CommandTrees.DbFunctionExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbFunctionExpression
  nameWithType: DbFunctionExpression
  fullName: System.Data.Common.CommandTrees.DbFunctionExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction@,System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Invoke(EdmFunction,DbExpression[])
  nameWithType: DbExpressionBuilder.Invoke(EdmFunction,DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(EdmFunction,DbExpression[])
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: IsEmpty(DbExpression)
  nameWithType: DbExpressionBuilder.IsEmpty(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(DbExpression)
- uid: System.Data.Common.CommandTrees.DbIsEmptyExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbIsEmptyExpression
  nameWithType: DbIsEmptyExpression
  fullName: System.Data.Common.CommandTrees.DbIsEmptyExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: IsNull(DbExpression)
  nameWithType: DbExpressionBuilder.IsNull(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(DbExpression)
- uid: System.Data.Common.CommandTrees.DbIsNullExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbIsNullExpression
  nameWithType: DbIsNullExpression
  fullName: System.Data.Common.CommandTrees.DbIsNullExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: IsOf(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.IsOf(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(DbExpression,TypeUsage)
- uid: System.Data.Common.CommandTrees.DbIsOfExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbIsOfExpression
  nameWithType: DbIsOfExpression
  fullName: System.Data.Common.CommandTrees.DbIsOfExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: IsOfOnly(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.IsOfOnly(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(DbExpression,TypeUsage)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
  nameWithType: DbExpressionBuilder.Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(DbExpression,DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
- uid: System.Data.Common.CommandTrees.DbProjectExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbProjectExpression
  nameWithType: DbProjectExpression
  fullName: System.Data.Common.CommandTrees.DbProjectExpression
- uid: System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector}
  parent: System
  isExternal: true
  name: Func<DbExpression,DbExpression,TSelector>
  nameWithType: Func<DbExpression,DbExpression,TSelector>
  fullName: System.Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TSelector
    name: TSelector
    nameWithType: TSelector
    fullName: TSelector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Lambda(DbExpression,IEnumerable<DbVariableReferenceExpression>)
  nameWithType: DbExpressionBuilder.Lambda(DbExpression,IEnumerable<DbVariableReferenceExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(DbExpression,IEnumerable<DbVariableReferenceExpression>)
- uid: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbVariableReferenceExpression}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<DbVariableReferenceExpression>
  nameWithType: IEnumerable<DbVariableReferenceExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbVariableReferenceExpression>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.Common.CommandTrees.DbVariableReferenceExpression>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.CommandTrees.DbVariableReferenceExpression
    name: DbVariableReferenceExpression
    nameWithType: DbVariableReferenceExpression
    fullName: DbVariableReferenceExpression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbVariableReferenceExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Lambda(DbExpression,DbVariableReferenceExpression[])
  nameWithType: DbExpressionBuilder.Lambda(DbExpression,DbVariableReferenceExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(DbExpression,DbVariableReferenceExpression[])
- uid: System.Data.Common.CommandTrees.DbVariableReferenceExpression[]
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbVariableReferenceExpression
  nameWithType: DbVariableReferenceExpression
  fullName: System.Data.Common.CommandTrees.DbVariableReferenceExpression[]
  spec.csharp:
  - uid: System.Data.Common.CommandTrees.DbVariableReferenceExpression
    name: DbVariableReferenceExpression
    nameWithType: DbVariableReferenceExpression
    fullName: DbVariableReferenceExpression[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: LeftOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.LeftOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(DbExpression,DbExpression,Func<DbExpression,DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: LeftOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.LeftOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(DbExpressionBinding,DbExpressionBinding,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: LessThan(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.LessThan(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: LessThanOrEqual(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.LessThanOrEqual(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Like(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Like(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.DbLikeExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbLikeExpression
  nameWithType: DbLikeExpression
  fullName: System.Data.Common.CommandTrees.DbLikeExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Like(DbExpression,DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Like(DbExpression,DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(DbExpression,DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Limit(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Limit(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.DbLimitExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbLimitExpression
  nameWithType: DbLimitExpression
  fullName: System.Data.Common.CommandTrees.DbLimitExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Minus(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Minus(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Modulo(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Modulo(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Multiply(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Multiply(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.RelationshipEndMember,System.Data.Metadata.Edm.RelationshipEndMember)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Navigate(DbExpression,RelationshipEndMember,RelationshipEndMember)
  nameWithType: DbExpressionBuilder.Navigate(DbExpression,RelationshipEndMember,RelationshipEndMember)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(DbExpression,RelationshipEndMember,RelationshipEndMember)
- uid: System.Data.Common.CommandTrees.DbRelationshipNavigationExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbRelationshipNavigationExpression
  nameWithType: DbRelationshipNavigationExpression
  fullName: System.Data.Common.CommandTrees.DbRelationshipNavigationExpression
- uid: System.Data.Metadata.Edm.RelationshipEndMember
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: RelationshipEndMember
  nameWithType: RelationshipEndMember
  fullName: System.Data.Metadata.Edm.RelationshipEndMember
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Metadata.Edm.RelationshipType@,System.String,System.String,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Navigate(RelationshipType,String,String,DbExpression)
  nameWithType: DbExpressionBuilder.Navigate(RelationshipType,String,String,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(RelationshipType,String,String,DbExpression)
- uid: System.Data.Metadata.Edm.RelationshipType
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: RelationshipType
  nameWithType: RelationshipType
  fullName: System.Data.Metadata.Edm.RelationshipType
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Negate(DbExpression)
  nameWithType: DbExpressionBuilder.Negate(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: New(TypeUsage,IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.New(TypeUsage,IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(TypeUsage,IEnumerable<DbExpression>)
- uid: System.Data.Common.CommandTrees.DbNewInstanceExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbNewInstanceExpression
  nameWithType: DbNewInstanceExpression
  fullName: System.Data.Common.CommandTrees.DbNewInstanceExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage@,System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: New(TypeUsage,DbExpression[])
  nameWithType: DbExpressionBuilder.New(TypeUsage,DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(TypeUsage,DbExpression[])
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: NewCollection(IEnumerable<DbExpression>)
  nameWithType: DbExpressionBuilder.NewCollection(IEnumerable<DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(IEnumerable<DbExpression>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Common.CommandTrees.DbExpression[])
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: NewCollection(DbExpression[])
  nameWithType: DbExpressionBuilder.NewCollection(DbExpression[])
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(DbExpression[])
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Metadata.Edm.TypeUsage@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: NewEmptyCollection(TypeUsage)
  nameWithType: DbExpressionBuilder.NewEmptyCollection(TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(TypeUsage)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: NewRow(IEnumerable<KeyValuePair<String,DbExpression>>)
  nameWithType: DbExpressionBuilder.NewRow(IEnumerable<KeyValuePair<String,DbExpression>>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(IEnumerable<KeyValuePair<String,DbExpression>>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Not(DbExpression)
  nameWithType: DbExpressionBuilder.Not(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(DbExpression)
- uid: System.Data.Common.CommandTrees.DbNotExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbNotExpression
  nameWithType: DbNotExpression
  fullName: System.Data.Common.CommandTrees.DbNotExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: NotEqual(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.NotEqual(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Metadata.Edm.TypeUsage@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Null(TypeUsage)
  nameWithType: DbExpressionBuilder.Null(TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(TypeUsage)
- uid: System.Data.Common.CommandTrees.DbNullExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbNullExpression
  nameWithType: DbNullExpression
  fullName: System.Data.Common.CommandTrees.DbNullExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OfType(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.OfType(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(DbExpression,TypeUsage)
- uid: System.Data.Common.CommandTrees.DbOfTypeExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbOfTypeExpression
  nameWithType: DbOfTypeExpression
  fullName: System.Data.Common.CommandTrees.DbOfTypeExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OfTypeOnly(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.OfTypeOnly(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(DbExpression,TypeUsage)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Or(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Or(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.DbOrExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbOrExpression
  nameWithType: DbOrExpression
  fullName: System.Data.Common.CommandTrees.DbOrExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OrderBy(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.OrderBy(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(DbExpression,Func<DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.DbSortExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbSortExpression
  nameWithType: DbSortExpression
  fullName: System.Data.Common.CommandTrees.DbSortExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OrderBy(DbExpression,Func<DbExpression,DbExpression>,String)
  nameWithType: DbExpressionBuilder.OrderBy(DbExpression,Func<DbExpression,DbExpression>,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(DbExpression,Func<DbExpression,DbExpression>,String)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OrderByDescending(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.OrderByDescending(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(DbExpression,Func<DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OrderByDescending(DbExpression,Func<DbExpression,DbExpression>,String)
  nameWithType: DbExpressionBuilder.OrderByDescending(DbExpression,Func<DbExpression,DbExpression>,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(DbExpression,Func<DbExpression,DbExpression>,String)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OuterApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
  nameWithType: DbExpressionBuilder.OuterApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(DbExpression,Func<DbExpression,KeyValuePair<String,DbExpression>>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpressionBinding)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OuterApply(DbExpressionBinding,DbExpressionBinding)
  nameWithType: DbExpressionBuilder.OuterApply(DbExpressionBinding,DbExpressionBinding)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(DbExpressionBinding,DbExpressionBinding)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Metadata.Edm.TypeUsage@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Parameter(TypeUsage,String)
  nameWithType: DbExpressionBuilder.Parameter(TypeUsage,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(TypeUsage,String)
- uid: System.Data.Common.CommandTrees.DbParameterReferenceExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbParameterReferenceExpression
  nameWithType: DbParameterReferenceExpression
  fullName: System.Data.Common.CommandTrees.DbParameterReferenceExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Plus(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Plus(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Project(DbExpressionBinding,DbExpression)
  nameWithType: DbExpressionBuilder.Project(DbExpressionBinding,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(DbExpressionBinding,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.EdmProperty)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Property(DbExpression,EdmProperty)
  nameWithType: DbExpressionBuilder.Property(DbExpression,EdmProperty)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(DbExpression,EdmProperty)
- uid: System.Data.Common.CommandTrees.DbPropertyExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbPropertyExpression
  nameWithType: DbPropertyExpression
  fullName: System.Data.Common.CommandTrees.DbPropertyExpression
- uid: System.Data.Metadata.Edm.EdmProperty
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EdmProperty
  nameWithType: EdmProperty
  fullName: System.Data.Metadata.Edm.EdmProperty
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.NavigationProperty)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Property(DbExpression,NavigationProperty)
  nameWithType: DbExpressionBuilder.Property(DbExpression,NavigationProperty)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(DbExpression,NavigationProperty)
- uid: System.Data.Metadata.Edm.NavigationProperty
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: NavigationProperty
  nameWithType: NavigationProperty
  fullName: System.Data.Metadata.Edm.NavigationProperty
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.RelationshipEndMember)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Property(DbExpression,RelationshipEndMember)
  nameWithType: DbExpressionBuilder.Property(DbExpression,RelationshipEndMember)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(DbExpression,RelationshipEndMember)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Property(DbExpression,String)
  nameWithType: DbExpressionBuilder.Property(DbExpression,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(DbExpression,String)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: RefFromKey(EntitySet,DbExpression)
  nameWithType: DbExpressionBuilder.RefFromKey(EntitySet,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(EntitySet,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet@,System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.EntityType)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: RefFromKey(EntitySet,DbExpression,EntityType)
  nameWithType: DbExpressionBuilder.RefFromKey(EntitySet,DbExpression,EntityType)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(EntitySet,DbExpression,EntityType)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Metadata.Edm.EntitySetBase@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Scan(EntitySetBase)
  nameWithType: DbExpressionBuilder.Scan(EntitySetBase)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(EntitySetBase)
- uid: System.Data.Common.CommandTrees.DbScanExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbScanExpression
  nameWithType: DbScanExpression
  fullName: System.Data.Common.CommandTrees.DbScanExpression
- uid: System.Data.Metadata.Edm.EntitySetBase
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EntitySetBase
  nameWithType: EntitySetBase
  fullName: System.Data.Metadata.Edm.EntitySetBase
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,``0})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Select(DbExpression,Func<DbExpression,TProjection>)
  nameWithType: DbExpressionBuilder.Select(DbExpression,Func<DbExpression,TProjection>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select(DbExpression,Func<DbExpression,TProjection>)
- uid: System.Func{System.Data.Common.CommandTrees.DbExpression,TProjection}
  parent: System
  isExternal: true
  name: Func<DbExpression,TProjection>
  nameWithType: Func<DbExpression,TProjection>
  fullName: System.Func<System.Data.Common.CommandTrees.DbExpression,TProjection>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Data.Common.CommandTrees.DbExpression,TProjection>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.CommandTrees.DbExpression
    name: DbExpression
    nameWithType: DbExpression
    fullName: DbExpression
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TProjection
    name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: SelectMany(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.SelectMany(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(DbExpression,Func<DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: SelectMany(DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
  nameWithType: DbExpressionBuilder.SelectMany(DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(DbExpression,Func<DbExpression,DbExpression>,Func<DbExpression,DbExpression,TSelector>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbSortExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Skip(DbSortExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Skip(DbSortExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(DbSortExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.DbSkipExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbSkipExpression
  nameWithType: DbSkipExpression
  fullName: System.Data.Common.CommandTrees.DbSkipExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause},System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Skip(DbExpressionBinding,IEnumerable<DbSortClause>,DbExpression)
  nameWithType: DbExpressionBuilder.Skip(DbExpressionBinding,IEnumerable<DbSortClause>,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(DbExpressionBinding,IEnumerable<DbSortClause>,DbExpression)
- uid: System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<DbSortClause>
  nameWithType: IEnumerable<DbSortClause>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Common.CommandTrees.DbSortClause>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.Common.CommandTrees.DbSortClause>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.CommandTrees.DbSortClause
    name: DbSortClause
    nameWithType: DbSortClause
    fullName: DbSortClause
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Common.CommandTrees.DbExpressionBinding@,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Sort(DbExpressionBinding,IEnumerable<DbSortClause>)
  nameWithType: DbExpressionBuilder.Sort(DbExpressionBinding,IEnumerable<DbSortClause>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(DbExpressionBinding,IEnumerable<DbSortClause>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Take(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Take(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ThenBy(DbSortExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.ThenBy(DbSortExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(DbSortExpression,Func<DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ThenBy(DbSortExpression,Func<DbExpression,DbExpression>,String)
  nameWithType: DbExpressionBuilder.ThenBy(DbSortExpression,Func<DbExpression,DbExpression>,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(DbSortExpression,Func<DbExpression,DbExpression>,String)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>,String)
  nameWithType: DbExpressionBuilder.ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(DbSortExpression,Func<DbExpression,DbExpression>,String)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ToSortClause(DbExpression)
  nameWithType: DbExpressionBuilder.ToSortClause(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(DbExpression)
- uid: System.Data.Common.CommandTrees.DbSortClause
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbSortClause
  nameWithType: DbSortClause
  fullName: System.Data.Common.CommandTrees.DbSortClause
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ToSortClause(DbExpression,String)
  nameWithType: DbExpressionBuilder.ToSortClause(DbExpression,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(DbExpression,String)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ToSortClauseDescending(DbExpression)
  nameWithType: DbExpressionBuilder.ToSortClauseDescending(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ToSortClauseDescending(DbExpression,String)
  nameWithType: DbExpressionBuilder.ToSortClauseDescending(DbExpression,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(DbExpression,String)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Common.CommandTrees.DbExpression@,System.Data.Metadata.Edm.TypeUsage)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: TreatAs(DbExpression,TypeUsage)
  nameWithType: DbExpressionBuilder.TreatAs(DbExpression,TypeUsage)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(DbExpression,TypeUsage)
- uid: System.Data.Common.CommandTrees.DbTreatExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbTreatExpression
  nameWithType: DbTreatExpression
  fullName: System.Data.Common.CommandTrees.DbTreatExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: "True"
  nameWithType: DbExpressionBuilder.True
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Common.CommandTrees.DbExpression@)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: UnaryMinus(DbExpression)
  nameWithType: DbExpressionBuilder.UnaryMinus(DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Union(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.Union(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Common.CommandTrees.DbExpression@,System.Data.Common.CommandTrees.DbExpression)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: UnionAll(DbExpression,DbExpression)
  nameWithType: DbExpressionBuilder.UnionAll(DbExpression,DbExpression)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(DbExpression,DbExpression)
- uid: System.Data.Common.CommandTrees.DbUnionAllExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbUnionAllExpression
  nameWithType: DbUnionAllExpression
  fullName: System.Data.Common.CommandTrees.DbUnionAllExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Metadata.Edm.TypeUsage@,System.String)
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Variable(TypeUsage,String)
  nameWithType: DbExpressionBuilder.Variable(TypeUsage,String)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(TypeUsage,String)
- uid: System.Data.Common.CommandTrees.DbVariableReferenceExpression
  parent: System.Data.Common.CommandTrees
  isExternal: false
  name: DbVariableReferenceExpression
  nameWithType: DbVariableReferenceExpression
  fullName: System.Data.Common.CommandTrees.DbVariableReferenceExpression
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Common.CommandTrees.DbExpression@,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Where(DbExpression,Func<DbExpression,DbExpression>)
  nameWithType: DbExpressionBuilder.Where(DbExpression,Func<DbExpression,DbExpression>)
  fullName: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(DbExpression,Func<DbExpression,DbExpression>)
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Aggregate
  nameWithType: DbExpressionBuilder.Aggregate
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: AggregateDistinct
  nameWithType: DbExpressionBuilder.AggregateDistinct
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: All
  nameWithType: DbExpressionBuilder.All
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: And
  nameWithType: DbExpressionBuilder.And
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Any
  nameWithType: DbExpressionBuilder.Any
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: As
  nameWithType: DbExpressionBuilder.As
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Bind
  nameWithType: DbExpressionBuilder.Bind
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: BindAs
  nameWithType: DbExpressionBuilder.BindAs
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Case
  nameWithType: DbExpressionBuilder.Case
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CastTo
  nameWithType: DbExpressionBuilder.CastTo
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Constant
  nameWithType: DbExpressionBuilder.Constant
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CreateRef
  nameWithType: DbExpressionBuilder.CreateRef
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CrossApply
  nameWithType: DbExpressionBuilder.CrossApply
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: CrossJoin
  nameWithType: DbExpressionBuilder.CrossJoin
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Deref
  nameWithType: DbExpressionBuilder.Deref
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Distinct
  nameWithType: DbExpressionBuilder.Distinct
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Divide
  nameWithType: DbExpressionBuilder.Divide
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Element
  nameWithType: DbExpressionBuilder.Element
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Equal
  nameWithType: DbExpressionBuilder.Equal
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Except
  nameWithType: DbExpressionBuilder.Except
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Exists
  nameWithType: DbExpressionBuilder.Exists
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: "False"
  nameWithType: DbExpressionBuilder.False
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Filter
  nameWithType: DbExpressionBuilder.Filter
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: FullOuterJoin
  nameWithType: DbExpressionBuilder.FullOuterJoin
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GetEntityRef
  nameWithType: DbExpressionBuilder.GetEntityRef
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GetRefKey
  nameWithType: DbExpressionBuilder.GetRefKey
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GreaterThan
  nameWithType: DbExpressionBuilder.GreaterThan
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GreaterThanOrEqual
  nameWithType: DbExpressionBuilder.GreaterThanOrEqual
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GroupBind
  nameWithType: DbExpressionBuilder.GroupBind
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GroupBindAs
  nameWithType: DbExpressionBuilder.GroupBindAs
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: GroupBy
  nameWithType: DbExpressionBuilder.GroupBy
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: InnerJoin
  nameWithType: DbExpressionBuilder.InnerJoin
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Intersect
  nameWithType: DbExpressionBuilder.Intersect
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Invoke
  nameWithType: DbExpressionBuilder.Invoke
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: IsEmpty
  nameWithType: DbExpressionBuilder.IsEmpty
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: IsNull
  nameWithType: DbExpressionBuilder.IsNull
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: IsOf
  nameWithType: DbExpressionBuilder.IsOf
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: IsOfOnly
  nameWithType: DbExpressionBuilder.IsOfOnly
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Join
  nameWithType: DbExpressionBuilder.Join
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join<TSelector>*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Join<TSelector>
  nameWithType: DbExpressionBuilder.Join<TSelector>
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Lambda
  nameWithType: DbExpressionBuilder.Lambda
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: LeftOuterJoin
  nameWithType: DbExpressionBuilder.LeftOuterJoin
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: LessThan
  nameWithType: DbExpressionBuilder.LessThan
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: LessThanOrEqual
  nameWithType: DbExpressionBuilder.LessThanOrEqual
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Like
  nameWithType: DbExpressionBuilder.Like
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Limit
  nameWithType: DbExpressionBuilder.Limit
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Minus
  nameWithType: DbExpressionBuilder.Minus
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Modulo
  nameWithType: DbExpressionBuilder.Modulo
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Multiply
  nameWithType: DbExpressionBuilder.Multiply
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Navigate
  nameWithType: DbExpressionBuilder.Navigate
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Negate
  nameWithType: DbExpressionBuilder.Negate
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: New
  nameWithType: DbExpressionBuilder.New
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: NewCollection
  nameWithType: DbExpressionBuilder.NewCollection
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: NewEmptyCollection
  nameWithType: DbExpressionBuilder.NewEmptyCollection
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: NewRow
  nameWithType: DbExpressionBuilder.NewRow
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Not
  nameWithType: DbExpressionBuilder.Not
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: NotEqual
  nameWithType: DbExpressionBuilder.NotEqual
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: "Null"
  nameWithType: DbExpressionBuilder.Null
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OfType
  nameWithType: DbExpressionBuilder.OfType
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OfTypeOnly
  nameWithType: DbExpressionBuilder.OfTypeOnly
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Or
  nameWithType: DbExpressionBuilder.Or
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OrderBy
  nameWithType: DbExpressionBuilder.OrderBy
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OrderByDescending
  nameWithType: DbExpressionBuilder.OrderByDescending
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: OuterApply
  nameWithType: DbExpressionBuilder.OuterApply
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Parameter
  nameWithType: DbExpressionBuilder.Parameter
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Plus
  nameWithType: DbExpressionBuilder.Plus
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Project
  nameWithType: DbExpressionBuilder.Project
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Property
  nameWithType: DbExpressionBuilder.Property
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: RefFromKey
  nameWithType: DbExpressionBuilder.RefFromKey
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Scan
  nameWithType: DbExpressionBuilder.Scan
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select<TProjection>*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Select<TProjection>
  nameWithType: DbExpressionBuilder.Select<TProjection>
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: SelectMany
  nameWithType: DbExpressionBuilder.SelectMany
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany<TSelector>*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: SelectMany<TSelector>
  nameWithType: DbExpressionBuilder.SelectMany<TSelector>
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Skip
  nameWithType: DbExpressionBuilder.Skip
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Sort
  nameWithType: DbExpressionBuilder.Sort
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Take
  nameWithType: DbExpressionBuilder.Take
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ThenBy
  nameWithType: DbExpressionBuilder.ThenBy
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ThenByDescending
  nameWithType: DbExpressionBuilder.ThenByDescending
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ToSortClause
  nameWithType: DbExpressionBuilder.ToSortClause
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: ToSortClauseDescending
  nameWithType: DbExpressionBuilder.ToSortClauseDescending
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: TreatAs
  nameWithType: DbExpressionBuilder.TreatAs
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: "True"
  nameWithType: DbExpressionBuilder.True
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: UnaryMinus
  nameWithType: DbExpressionBuilder.UnaryMinus
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Union
  nameWithType: DbExpressionBuilder.Union
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: UnionAll
  nameWithType: DbExpressionBuilder.UnionAll
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Variable
  nameWithType: DbExpressionBuilder.Variable
- uid: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where*
  parent: System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder
  isExternal: false
  name: Where
  nameWithType: DbExpressionBuilder.Where
