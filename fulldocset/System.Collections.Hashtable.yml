### YamlMime:ManagedReference
items:
- uid: System.Collections.Hashtable
  id: Hashtable
  children:
  - System.Collections.Hashtable.#ctor
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  - System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  - System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  - System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.Add(System.Object,System.Object)
  - System.Collections.Hashtable.Clear
  - System.Collections.Hashtable.Clone
  - System.Collections.Hashtable.comparer
  - System.Collections.Hashtable.Contains(System.Object)
  - System.Collections.Hashtable.ContainsKey(System.Object)
  - System.Collections.Hashtable.ContainsValue(System.Object)
  - System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  - System.Collections.Hashtable.Count
  - System.Collections.Hashtable.EqualityComparer
  - System.Collections.Hashtable.GetEnumerator
  - System.Collections.Hashtable.GetHash(System.Object)
  - System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Hashtable.hcp
  - System.Collections.Hashtable.IsFixedSize
  - System.Collections.Hashtable.IsReadOnly
  - System.Collections.Hashtable.IsSynchronized
  - System.Collections.Hashtable.Item(System.Object)
  - System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  - System.Collections.Hashtable.Keys
  - System.Collections.Hashtable.OnDeserialization(System.Object)
  - System.Collections.Hashtable.Remove(System.Object)
  - System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  - System.Collections.Hashtable.SyncRoot
  - System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Hashtable.Values
  langs:
  - csharp
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
  type: Class
  summary: "キーのハッシュ コードに基づいて編成された、キー/値ペアのコレクションを表します。       この型の .NET Framework ソース コードを参照するを参照してください。、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)です。"
  remarks: "> [!NOTE]> この型の .NET Framework ソース コードを表示するにはを参照してください、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)です。 ソース コードをオンラインで参照、オフラインで表示、リファレンスをダウンロードおよび; デバッグ中にソース (パッチや更新を含む) をステップ参照してください[指示](http://referencesource.microsoft.com/)です。       各要素に格納されているキー/値ペアは、<xref:System.Collections.DictionaryEntry>オブジェクト</xref:System.Collections.DictionaryEntry>。 キーには`null`値を指定できますが、します。       キーをハッシュ テーブルでは、オーバーライドする必要として使用するオブジェクト、<xref:System.Object.GetHashCode%2A?displayProperty=fullName>メソッド (または<xref:System.Collections.IHashCodeProvider>インターフェイス) および<xref:System.Object.Equals%2A?displayProperty=fullName>メソッド (または<xref:System.Collections.IComparer>インターフェイス).</xref:System.Collections.IComparer> </xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Collections.IHashCodeProvider> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> メソッドとインターフェイスの両方の実装でも、大文字小文字の区別を同じ方法で処理する必要があります。それ以外の場合、ハッシュ テーブルが正しく動作しません。 など、ハッシュ テーブルを作成するときに行う必要があります、<xref:System.Collections.CaseInsensitiveHashCodeProvider>クラス (またはその大文字と小文字<xref:System.Collections.IHashCodeProvider>実装) で、<xref:System.Collections.CaseInsensitiveComparer>クラス (またはその大文字と小文字<xref:System.Collections.IComparer>実装).</xref:System.Collections.IComparer> </xref:System.Collections.CaseInsensitiveComparer> </xref:System.Collections.IHashCodeProvider> </xref:System.Collections.CaseInsensitiveHashCodeProvider>       さらに、これらのメソッドは、ハッシュ テーブルで、キーが存在するときに、同じパラメーターで呼び出されたときに、同じ結果を生成する必要があります。 代わりで Hashtable のコンス トラクターを使用する、<xref:System.Collections.IEqualityComparer>パラメーター</xref:System.Collections.IEqualityComparer> 。 キーの等値に単に参照の等価性を継承して実装されたかどうか<xref:System.Object.GetHashCode%2A?displayProperty=fullName>と<xref:System.Object.Equals%2A?displayProperty=fullName>が十分に機能します</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Object.GetHashCode%2A?displayProperty=fullName>。       ハッシュ テーブル内のキーとして使用される限り、主要なオブジェクトが変更可能なする必要があります。       要素は、ハッシュ テーブルに追加するときに、要素は、キーのハッシュ コードに基づいてバケットに格納されます。 キーの後続の参照は、要素を検索するために必要なキーの比較の数を大幅に削減するためだけに&1; つのバケットで検索するキーのハッシュ コードを使用します。       ハッシュ テーブルの占有率では、バケット数に対する要素の最大比率を決定します。 小さい負荷の要因が高速検索時間は平均的増加後のメモリ消費量がが欠点です。 1.0 の既定の占有率は一般に、速度とサイズの最適なバランスを提供します。 異なるテーブル占有率は、ハッシュ テーブルが作成されるときにも指定することができます。       要素は、ハッシュ テーブルに追加されるため、ハッシュ テーブルの実際の占有率が増加します。 実際の占有率では、指定されたロード要素に達すると、ハッシュ テーブルでバケットの数が現在のハッシュ テーブルのバケット数の&2; 倍より大きい最小の素数を自動的に増加します。       ハッシュ テーブル内の各キー オブジェクトが<xref:System.Collections.Hashtable.GetHash%2A>。</xref:System.Collections.Hashtable.GetHash%2A>を呼び出すことによってアクセスできる独自のハッシュ関数を提供する必要があります。 ただし、いずれかのオブジェクトを実装する<xref:System.Collections.IHashCodeProvider>Hashtable のコンス トラクターに渡すことができ、テーブル内のすべてのオブジェクトのハッシュ関数が使用されます</xref:System.Collections.IHashCodeProvider>。       ハッシュ テーブルの容量とは、ハッシュ テーブルに格納できる要素の数です。 要素は、ハッシュ テーブルに追加されるため、容量を増やすは自動的に再割り当て、必要に応じて。       ハッシュ テーブル オブジェクトの非常に大きい場合を設定して、64 ビット システム上の 20億要素に最大の容量を増やすことができます、`enabled`する構成要素の属性`true`実行時環境でします。       `foreach` C# 言語のステートメント (`For Each` Visual Basic で)、コレクション内の要素の型のオブジェクトを返します。 ハッシュ テーブルの各要素が、キー/値ペアであるため、要素の型は、キーの型または値の型。 代わりに、要素の型は、 <xref:System.Collections.DictionaryEntry>。</xref:System.Collections.DictionaryEntry> 例: [!code-cpp [System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)][!code-cs[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/csharp/t-system.collections.has_1.cs)][!code-vb[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb) ] 、`foreach`ステートメントがしか書き込まないことから、コレクションへの読み取りを許可する列挙子のラッパー。           シリアル化するため、ハッシュ テーブルでの要素を並べ替えるになる可能性がありますの列挙子を逆シリアル化は、呼び出さずに列挙を続行することはできません、<xref:System.Collections.IEnumerator.Reset%2A>メソッド</xref:System.Collections.IEnumerator.Reset%2A>。      > [!NOTE] > キーを継承する、その動作を変更、絶対の一意性を保証できませんを使用する比較であるため、<xref:System.Type.Equals%2A>メソッド</xref:System.Type.Equals%2A>。"
  example:
  - "The following example shows how to create, initialize and perform various functions to a Hashtable and how to print out its keys and values.  \n  \n [!code-cpp[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/cpp/t-system.collections.has_2.cpp)]\n [!code-cs[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/csharp/t-system.collections.has_2.cs)]\n [!code-vb[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/visualbasic/t-system.collections.has_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Hashtable/HashtableDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class Hashtable : ICloneable, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor
  id: '#ctor'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable()
  nameWithType: Hashtable.Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの既定の初期容量を使用して、係数、ハッシュ コード プロバイダーおよび比較子をロードします。"
  remarks: "ハッシュ テーブルの容量を使用すると、占有率に基づくハッシュ テーブルのバケットの最適な数を計算します。 容量を増やすは自動的に要求します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       このコンス トラクターは、o (1) 操作です。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_4_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_4_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_4_1.vb)]"
  syntax:
    content: public Hashtable ();
    parameters: []
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary)
  nameWithType: Hashtable.Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの新規作成 を指定されたディクショナリから要素をコピーして<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト。 新しい<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト初期容量は、コピーした要素の数と等しくあり既定占有率、ハッシュ コード プロバイダーおよび比較子を使用します。"
  remarks: "初期の容量は、ソース ディクショナリ内の要素の数に設定されます。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       新しい要素<xref:System.Collections.Hashtable>を列挙子が反復処理する順序と同じ順序で並べ替えられて、<xref:System.Collections.IDictionary>オブジェクト</xref:System.Collections.IDictionary></xref:System.Collections.Hashtable>。       このコンス トラクターは、O (`n`) 操作、場所`n`内の要素の数が、`d`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.has_1_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.has_1_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.has_1_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>新しいコピー先のオブジェクト<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト</xref:System.Collections.IDictionary>。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの既定の初期容量を使用して、係数、および指定されたを読み込む<xref:System.Collections.IEqualityComparer>オブジェクト</xref:System.Collections.IEqualityComparer>。"
  remarks: "ハッシュ テーブルの容量を使用すると、占有率に基づくハッシュ テーブルのバケットの最適な数を計算します。 容量を増やすは自動的に要求します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       <xref:System.Collections.IEqualityComparer>オブジェクトには、ハッシュ コード プロバイダーとの比較子の両方が含まれています</xref:System.Collections.IEqualityComparer>。 場合、<xref:System.Collections.IEqualityComparer>で使用される、<xref:System.Collections.Hashtable>コンス トラクター、オブジェクト内のキーとして使用する、<xref:System.Collections.Hashtable>オブジェクトをオーバーライドする必要はありません、<xref:System.Object.GetHashCode%2A?displayProperty=fullName>と<xref:System.Object.Equals%2A?displayProperty=fullName>メソッド</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Object.GetHashCode%2A?displayProperty=fullName></xref:System.Collections.Hashtable></xref:System.Collections.Hashtable></xref:System.Collections.IEqualityComparer>。       ハッシュ コード プロバイダーが<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>キーのハッシュ コードを管理します。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       <xref:System.Collections.IEqualityComparer>、大文字と小文字の文字列の検索の実行などのシナリオを実現できます</xref:System.Collections.IEqualityComparer>。       このコンス トラクターは、o (1) 操作です。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_5_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_5_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_5_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>で使用するには、ハッシュ コード プロバイダーとの比較子を定義するオブジェクト、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>オブジェクト</xref:System.Collections.IEqualityComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定のハッシュ コード プロバイダーと既定の比較子を使用します。 既定のハッシュ コード プロバイダーの各キーの実装は、 &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;の各キーの実装で、既定の比較子&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32)
  nameWithType: Hashtable.Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの指定した初期容量と既定の占有率、ハッシュ コード プロバイダーおよび比較子を使用します。"
  remarks: "要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダーが<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>キーのハッシュ コードを管理します。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       このコンス トラクターは、O (`n`) 操作では、ここで`n`は`capacity`します。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.has_2_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.has_2_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.has_2_1.vb)]"
  syntax:
    content: public Hashtable (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "要素の概算数を<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクトが最初に含めることができます。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>0 未満です。"
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの新規作成 を指定したディクショナリから要素をコピーして<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト。 新しい<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクトの初期容量は、コピーした要素の数と同じとは、既定の占有率と、指定した<xref:System.Collections.IEqualityComparer>オブジェクト</xref:System.Collections.IEqualityComparer>。"
  remarks: "初期の容量は、ソース ディクショナリ内の要素の数に設定されます。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       <xref:System.Collections.IEqualityComparer>オブジェクトには、ハッシュ コード プロバイダーとの比較子の両方が含まれています</xref:System.Collections.IEqualityComparer>。 場合、<xref:System.Collections.IEqualityComparer>で使用される、<xref:System.Collections.Hashtable>コンス トラクター、オブジェクト内のキーとして使用する、<xref:System.Collections.Hashtable>オブジェクトをオーバーライドする必要はありません、<xref:System.Object.GetHashCode%2A?displayProperty=fullName>と<xref:System.Object.Equals%2A?displayProperty=fullName>メソッド</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Object.GetHashCode%2A?displayProperty=fullName></xref:System.Collections.Hashtable></xref:System.Collections.Hashtable></xref:System.Collections.IEqualityComparer>。       ハッシュ コード プロバイダーが<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>キーのハッシュ コードを管理します。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       <xref:System.Collections.IEqualityComparer>、大文字と小文字の文字列の検索の実行などのシナリオを実現できます</xref:System.Collections.IEqualityComparer>。       新しい要素<xref:System.Collections.Hashtable>を列挙子が反復処理する順序と同じ順序で並べ替えられて、<xref:System.Collections.IDictionary>オブジェクト</xref:System.Collections.IDictionary></xref:System.Collections.Hashtable>。       このコンス トラクターは、O (`n`) 操作、場所`n`内の要素の数が、`d`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/81cd87de-02b7-42cc-8fdd-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/81cd87de-02b7-42cc-8fdd-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/81cd87de-02b7-42cc-8fdd-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>新しいコピー先のオブジェクト<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト</xref:System.Collections.IDictionary>。"
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>で使用するには、ハッシュ コード プロバイダーとの比較子を定義するオブジェクト、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.IEqualityComparer> 。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定のハッシュ コード プロバイダーと既定の比較子を使用します。 既定のハッシュ コード プロバイダーの各キーの実装は、 &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;の各キーの実装で、既定の比較子&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  id: '#ctor(System.Collections.IDictionary,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single)
  nameWithType: Hashtable.Hashtable(IDictionary,Single)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの新規作成 を指定されたディクショナリから要素をコピーして<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト。 新しい<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト初期容量は、コピーした要素の数と等しくあり、指定された占有率では、既定のハッシュ コード プロバイダーとの比較子を使用します。"
  remarks: "初期の容量は、ソース ディクショナリ内の要素の数に設定されます。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。 1.0 の占有率は、速度とサイズの最適なバランスです。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       新しい要素<xref:System.Collections.Hashtable>を列挙子が反復処理する順序と同じ順序で並べ替えられて、<xref:System.Collections.IDictionary>オブジェクト</xref:System.Collections.IDictionary></xref:System.Collections.Hashtable>。       このコンス トラクターは、O (`n`) 操作、場所`n`内の要素の数が、`d`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/fb1cfbc8-7454-4619-a6e7-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/fb1cfbc8-7454-4619-a6e7-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/fb1cfbc8-7454-4619-a6e7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>新しいコピー先のオブジェクト<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト</xref:System.Collections.IDictionary>。"
    - id: loadFactor
      type: System.Single
      description: "0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。 結果は、バケット数に対する要素の最大比率です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>0.1 未満です。       - または - <code>loadFactor</code> 1.0 より大きい。"
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの既定の初期容量を使用して、要素、および指定したハッシュ コード プロバイダーとの比較子をロードします。"
  remarks: "ハッシュ テーブルの容量を使用すると、占有率に基づくハッシュ テーブルのバケットの最適な数を計算します。 容量を増やすは自動的に要求します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       カスタムのハッシュ コード プロバイダーとカスタムの比較演算子は、大文字と小文字の文字列、検索を行うなどのシナリオを有効にします。       このコンス トラクターは、o (1) 操作です。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/1ff65986-0234-4702-94b7-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/1ff65986-0234-4702-94b7-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/1ff65986-0234-4702-94b7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref>内のすべてのキーのハッシュを提供するオブジェクトのコード、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>オブジェクト。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定のハッシュ コード プロバイダーを使用するの各キーの実装は&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;です。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>を使用して&2; つのキーが等しいかどうかを判断するオブジェクト</xref:System.Collections.IComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定の比較子を使用するの各キーの実装は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの指定した初期容量を使用して<xref:System.Collections.IEqualityComparer>、および既定の占有率</xref:System.Collections.IEqualityComparer>。"
  remarks: "要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       <xref:System.Collections.IEqualityComparer>オブジェクトには、ハッシュ コード プロバイダーとの比較子の両方が含まれています</xref:System.Collections.IEqualityComparer>。 場合、<xref:System.Collections.IEqualityComparer>で使用される、<xref:System.Collections.Hashtable>コンス トラクター、オブジェクト内のキーとして使用する、<xref:System.Collections.Hashtable>をオーバーライドする必要はありません、<xref:System.Object.GetHashCode%2A?displayProperty=fullName>と<xref:System.Object.Equals%2A?displayProperty=fullName>メソッド</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Object.GetHashCode%2A?displayProperty=fullName></xref:System.Collections.Hashtable></xref:System.Collections.Hashtable></xref:System.Collections.IEqualityComparer>。       ハッシュ コード プロバイダーが<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>キーのハッシュ コードを管理します。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       <xref:System.Collections.IEqualityComparer>、大文字と小文字の文字列の検索の実行などのシナリオを実現できます</xref:System.Collections.IEqualityComparer>。       このコンス トラクターは、O (`n`) 操作では、ここで`n`は、`capacity`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/5067e9ac-cd98-4da8-9418-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/5067e9ac-cd98-4da8-9418-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/5067e9ac-cd98-4da8-9418-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "要素の概算数を<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクトが最初に含めることができます。"
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>で使用するには、ハッシュ コード プロバイダーとの比較子を定義するオブジェクト、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.IEqualityComparer> 。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定のハッシュ コード プロバイダーと既定の比較子を使用します。 既定のハッシュ コード プロバイダーの各キーの実装は、 &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;の各キーの実装で、既定の比較子&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>0 未満です。"
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  id: '#ctor(System.Int32,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single)
  nameWithType: Hashtable.Hashtable(Int32,Single)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの指定した初期容量を使用して、係数、および既定のハッシュ コード プロバイダーとの比較子を読み込みます。"
  remarks: "要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。 1.0 の占有率は、速度とサイズの最適なバランスです。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダーが<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>キーのハッシュ コードを管理します。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       このコンス トラクターは、O (`n`) 操作では、ここで`n`は、`capacity`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/m-system.collections.has_8_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/m-system.collections.has_8_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/m-system.collections.has_8_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor);
    parameters:
    - id: capacity
      type: System.Int32
      description: "要素の概算数を<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクトが最初に含めることができます。"
    - id: loadFactor
      type: System.Single
      description: "0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。 結果は、バケット数に対する要素の最大比率です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>0 未満です。       - または - <code>loadFactor</code> 0.1 よりも小さいです。       - または - <code>loadFactor</code> 1.0 より大きい。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>capacity</code>オーバーフローの原因となっています。"
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>を使用して、指定したシリアル化できるクラス<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>と<xref:System.Runtime.Serialization.StreamingContext>オブジェクト</xref:System.Runtime.Serialization.StreamingContext>。"
  remarks: "ハッシュ テーブルの容量を使用すると、占有率に基づくハッシュ テーブルのバケットの最適な数を計算します。 容量を増やすは自動的に要求します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       このコンス トラクターは、O (`n`) 操作では、ここで`n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>は、       列挙子をシリアル化とシリアル化するため、<xref:System.Collections.Hashtable>の要素を並べ替えるになる可能性があります、呼び出さずに列挙を続行することはできません、<xref:System.Collections.IEnumerator.Reset%2A>メソッド</xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.Hashtable>。"
  syntax:
    content: protected Hashtable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>オブジェクトをシリアル化するために必要な情報を含む、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>オブジェクト。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A<xref:System.Runtime.Serialization.StreamingContext>オブジェクト ソースと関連付けられているシリアル化されたストリームの先を含む、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Runtime.Serialization.StreamingContext> 。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの新規作成 を指定されたディクショナリから要素をコピーして<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト。 新しい<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト初期容量は、コピーした要素の数と等しくあり、既定の占有率と、指定したハッシュ コード プロバイダーとの比較子を使用します。 この API は今後使用しません。 代わりに、次を参照してください。 &lt;xref:System.Collections.Hashtable.%23ctor%2A&gt;です。"
  remarks: "初期の容量は、ソース ディクショナリ内の要素の数に設定されます。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       カスタムのハッシュ コード プロバイダーとカスタムの比較演算子は、大文字と小文字の文字列、検索を行うなどのシナリオを有効にします。       新しい要素<xref:System.Collections.Hashtable>を列挙子が反復処理する順序と同じ順序で並べ替えられて、<xref:System.Collections.IDictionary>オブジェクト</xref:System.Collections.IDictionary></xref:System.Collections.Hashtable>。       このコンス トラクターは、O (`n`) 操作、場所`n`内の要素の数が、`d`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/9a30e378-7c34-4854-b12f-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/9a30e378-7c34-4854-b12f-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/9a30e378-7c34-4854-b12f-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>新しいコピー先のオブジェクト<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト</xref:System.Collections.IDictionary>。"
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref>内のすべてのキーのハッシュを提供するオブジェクトのコード、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定のハッシュ コード プロバイダーを使用するの各キーの実装は&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;です。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>を使用して&2; つのキーが等しいかどうかを判断するオブジェクト</xref:System.Collections.IComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定の比較子を使用するの各キーの実装は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの新規作成 を指定されたディクショナリから要素をコピーして<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト。 新しい<xref href=&quot;System.Collections.Hashtable&quot;></xref>初期容量は、コピーした要素の数と等しくあり、指定された占有率を使用してオブジェクトおよび<xref:System.Collections.IEqualityComparer>オブジェクト</xref:System.Collections.IEqualityComparer>。"
  remarks: "初期の容量は、ソース ディクショナリ内の要素の数に設定されます。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。 1.0 の占有率は、速度とサイズの最適なバランスです。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       <xref:System.Collections.IEqualityComparer>オブジェクトには、ハッシュ コード プロバイダーとの比較子の両方が含まれています</xref:System.Collections.IEqualityComparer>。 場合、<xref:System.Collections.IEqualityComparer>で使用される、<xref:System.Collections.Hashtable>コンス トラクター、オブジェクト内のキーとして使用する、<xref:System.Collections.Hashtable>オブジェクトをオーバーライドする必要はありません、<xref:System.Object.GetHashCode%2A?displayProperty=fullName>と<xref:System.Object.Equals%2A?displayProperty=fullName>メソッド</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Object.GetHashCode%2A?displayProperty=fullName></xref:System.Collections.Hashtable></xref:System.Collections.Hashtable></xref:System.Collections.IEqualityComparer>。       ハッシュ コード プロバイダーが<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>キーのハッシュ コードを管理します。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       <xref:System.Collections.IEqualityComparer>、大文字と小文字の文字列の検索の実行などのシナリオを実現できます</xref:System.Collections.IEqualityComparer>。       新しい要素<xref:System.Collections.Hashtable>を列挙子が反復処理する順序と同じ順序で並べ替えられて、<xref:System.Collections.IDictionary>オブジェクト</xref:System.Collections.IDictionary></xref:System.Collections.Hashtable>。       このコンス トラクターは、O (`n`) 操作、場所`n`内の要素の数が、`d`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/a92f83be-9de4-470a-8cbb-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/a92f83be-9de4-470a-8cbb-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/a92f83be-9de4-470a-8cbb-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>新しいコピー先のオブジェクト<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト</xref:System.Collections.IDictionary>。"
    - id: loadFactor
      type: System.Single
      description: "0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。 結果は、バケット数に対する要素の最大比率です。"
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>で使用するには、ハッシュ コード プロバイダーとの比較子を定義するオブジェクト、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.IEqualityComparer> 。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定のハッシュ コード プロバイダーと既定の比較子を使用します。 既定のハッシュ コード プロバイダーの各キーの実装は、 &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;の各キーの実装で、既定の比較子&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>0.1 未満です。       - または - <code>loadFactor</code> 1.0 より大きい。"
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの指定した初期容量、ハッシュ コード プロバイダー、比較演算子、および既定の占有率を使用します。"
  remarks: "要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダーが<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>キーのハッシュ コードを管理します。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       カスタムのハッシュ コード プロバイダーとカスタムの比較演算子は、大文字と小文字の文字列、検索を行うなどのシナリオを有効にします。       このコンス トラクターは、O (`n`) 操作では、ここで`n`は、`capacity`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/2154dba0-3cc6-41f7-aa9b-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/2154dba0-3cc6-41f7-aa9b-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/2154dba0-3cc6-41f7-aa9b-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "要素の概算数を<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクトが最初に含めることができます。"
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref>内のすべてのキーのハッシュを提供するオブジェクトのコード、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定のハッシュ コード プロバイダーを使用するの各キーの実装は&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;です。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>を使用して&2; つのキーが等しいかどうかを判断するオブジェクト</xref:System.Collections.IComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定の比較子を使用するの各キーの実装は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>0 未満です。"
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスを使用して、指定した初期量占有率、および<xref:System.Collections.IEqualityComparer>オブジェクト</xref:System.Collections.IEqualityComparer>。"
  remarks: "要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。 1.0 の占有率は、速度とサイズの最適なバランスです。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       <xref:System.Collections.IEqualityComparer>オブジェクトには、ハッシュ コード プロバイダーとの比較子の両方が含まれています</xref:System.Collections.IEqualityComparer>。 場合、<xref:System.Collections.IEqualityComparer>で使用される、<xref:System.Collections.Hashtable>コンス トラクター、オブジェクト内のキーとして使用する、<xref:System.Collections.Hashtable>をオーバーライドする必要はありません、<xref:System.Object.GetHashCode%2A?displayProperty=fullName>と<xref:System.Object.Equals%2A?displayProperty=fullName>メソッド</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Object.GetHashCode%2A?displayProperty=fullName></xref:System.Collections.Hashtable></xref:System.Collections.Hashtable></xref:System.Collections.IEqualityComparer>。       ハッシュ コード プロバイダーが<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>キーのハッシュ コードを管理します。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       <xref:System.Collections.IEqualityComparer>、大文字と小文字の文字列の検索の実行などのシナリオを実現できます</xref:System.Collections.IEqualityComparer>。       このコンス トラクターは、O (`n`) 操作では、ここで`n`は、`capacity`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/30b60c47-7bce-44a2-8d17-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/30b60c47-7bce-44a2-8d17-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/30b60c47-7bce-44a2-8d17-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "要素の概算数を<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクトが最初に含めることができます。"
    - id: loadFactor
      type: System.Single
      description: "0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。 結果は、バケット数に対する要素の最大比率です。"
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>で使用するには、ハッシュ コード プロバイダーとの比較子を定義するオブジェクト、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.IEqualityComparer> 。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定のハッシュ コード プロバイダーと既定の比較子を使用します。 既定のハッシュ コード プロバイダーの各キーの実装は、 &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;の各キーの実装で、既定の比較子&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>0 未満です。       - または - <code>loadFactor</code> 0.1 よりも小さいです。       - または - <code>loadFactor</code> 1.0 より大きい。"
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの新規作成 を指定されたディクショナリから要素をコピーして<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト。 新しい<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクトが初期容量は、コピーした要素の数と等しいと指定した占有率、ハッシュ コード プロバイダーおよび比較子を使用します。"
  remarks: "初期の容量は、ソース ディクショナリ内の要素の数に設定されます。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。 1.0 の占有率は、速度とサイズの最適なバランスです。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダー内のキーのハッシュ コードを管理する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       カスタムのハッシュ コード プロバイダーとカスタムの比較演算子は、大文字と小文字の文字列、検索を行うなどのシナリオを有効にします。       新しい要素<xref:System.Collections.Hashtable>を列挙子が反復処理する順序と同じ順序で並べ替えられて、<xref:System.Collections.IDictionary>オブジェクト</xref:System.Collections.IDictionary></xref:System.Collections.Hashtable>。       このコンス トラクターは、O (`n`) 操作、場所`n`内の要素の数が、`d`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/c67b166f-bc6a-49e5-9bd7-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/c67b166f-bc6a-49e5-9bd7-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/c67b166f-bc6a-49e5-9bd7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>新しいコピー先のオブジェクト<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクト</xref:System.Collections.IDictionary>。"
    - id: loadFactor
      type: System.Single
      description: "0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。 結果は、バケット数に対する要素の最大比率です。"
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref>内のすべてのキーのハッシュを提供するオブジェクトのコード、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定のハッシュ コード プロバイダーを使用するの各キーの実装は&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;です。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>を使用して&2; つのキーが等しいかどうかを判断するオブジェクト</xref:System.Collections.IComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定の比較子を使用するの各キーの実装は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>0.1 未満です。       - または - <code>loadFactor</code> 1.0 より大きい。"
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しい、空のインスタンスを初期化、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>クラスの指定した初期容量を使用して、係数、ハッシュ コード プロバイダーおよび比較子をロードします。"
  remarks: "要素を追加するときにサイズ変更操作を実行する必要があるの初期量を指定する、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。 容量が自動的には、占有率に基づく必要に応じて拡大します。       占有率は、バケット数に対する要素の最大比率です。 小さいテーブル占有率は増加後のメモリ消費量が高速の参照を意味します。 1.0 の占有率は、速度とサイズの最適なバランスです。       実際の占有率では、指定されたロード要素に達すると、現在のバケット数の&2; 倍より大きい最小の素数をバケットの数は自動的に増加します。       ハッシュ コード プロバイダーが<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>キーのハッシュ コードを管理します。 既定のハッシュ コード プロバイダーが<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>のキーの実装       比較演算子は、2 つのキーが等しいかどうかを判断します。 内のすべてのキー、<xref:System.Collections.Hashtable>一意でなければなりません</xref:System.Collections.Hashtable>。 既定の比較子は<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>のキーの実装       カスタムのハッシュ コード プロバイダーとカスタムの比較演算子は、大文字と小文字の文字列、検索を行うなどのシナリオを有効にします。       このコンス トラクターは、O (`n`) 操作では、ここで`n`は、`capacity`パラメーター。"
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/86ed2545-c9ee-4654-a1a4-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/86ed2545-c9ee-4654-a1a4-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/86ed2545-c9ee-4654-a1a4-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "要素の概算数を<xref href=&quot;System.Collections.Hashtable&quot;></xref>オブジェクトが最初に含めることができます。"
    - id: loadFactor
      type: System.Single
      description: "0.1 ~ 1.0、最適なパフォーマンスを提供する既定値を乗算した範囲内の数です。 結果は、バケット数に対する要素の最大比率です。"
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref>内のすべてのキーのハッシュを提供するオブジェクトのコード、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定のハッシュ コード プロバイダーを使用するの各キーの実装は&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;です。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>を使用して&2; つのキーが等しいかどうかを判断するオブジェクト</xref:System.Collections.IComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>既定の比較子を使用するの各キーの実装は&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;です。"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>0 未満です。       - または - <code>loadFactor</code> 0.1 よりも小さいです。       - または - <code>loadFactor</code> 1.0 より大きい。"
  platform:
  - net462
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: Hashtable.Add(Object,Object)
  fullName: System.Collections.Hashtable.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定したキーと値を持つ要素を追加、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  remarks: "キーには`null`値を指定できますが、します。       オブジェクトの状態とそのハッシュ コード値間の相関関係を持たない必要があります通常されませんするキーとして使用します。 たとえば、文字列オブジェクトは、キーとして使用 StringBuilder オブジェクトよりも優れています。       使用することも、<xref:System.Collections.Hashtable.Item%2A>にキーの値を設定して、新しい要素を追加するプロパティが存在しません、<xref:System.Collections.Hashtable>たとえば、 `myCollection[&quot;myNonexistentKey&quot;] = myValue`。</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable.Item%2A> 。 ただしで指定したキーが既に存在する場合、 <xref:System.Collections.Hashtable>、設定、<xref:System.Collections.Hashtable.Item%2A>プロパティに古い値が上書きされます</xref:System.Collections.Hashtable.Item%2A></xref:System.Collections.Hashtable>。 これに対し、追加のメソッドでは、既存の要素は変更しません。       場合<xref:System.Collections.Hashtable.Count%2A>の容量より小さい、 <xref:System.Collections.Hashtable>、このメソッドは、o (1) 操作になります</xref:System.Collections.Hashtable></xref:System.Collections.Hashtable.Count%2A>。 容量は、新しい要素を格納するためにする必要があります、このメソッドが O (`n`) 操作では、ここで`n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>は、"
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Add Example#1](~/add/codesnippet/cpp/m-system.collections.has_6_1.cpp)]\n [!code-cs[Classic Hashtable.Add Example#1](~/add/codesnippet/csharp/m-system.collections.has_6_1.cs)]\n [!code-vb[Classic Hashtable.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_6_1.vb)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "追加する要素のキー。"
    - id: value
      type: System.Object
      description: "追加する要素の値。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.Hashtable.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "同じキーを持つ要素は既に、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.Hashtable.Clear
  id: Clear
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Clear()
  nameWithType: Hashtable.Clear()
  fullName: System.Collections.Hashtable.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "すべての要素を削除、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  remarks: "<xref:System.Collections.Hashtable.Count%2A>0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。</xref:System.Collections.Hashtable.Count%2A> 容量はそのまま残ります。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>は、"
  example:
  - "The following example shows how to clear the values of the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.has_10_1.cpp)]\n [!code-vb[Classic Hashtable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_10_1.vb)]\n [!code-cs[Classic Hashtable.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.has_10_1.cs)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.Hashtable.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref>は読み取り専用です。"
  platform:
  - net462
- uid: System.Collections.Hashtable.Clone
  id: Clone
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Clone()
  nameWithType: Hashtable.Clone()
  fullName: System.Collections.Hashtable.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "簡易コピーを作成、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  remarks: "コレクションの簡易コピーは、参照型または値の型が参照先のオブジェクトはコピーしないかどうか、コレクションの要素のみをコピーします。 新しいコレクション内の参照は、元のコレクション内の参照をポイントする同じオブジェクトをポイントします。       これに対し、コレクションのディープ コピーされた要素をコピーして、要素が直接または間接的に参照するすべてです。       <xref:System.Collections.Hashtable>複製が同じ数、容量が同じで、同じ<xref:System.Collections.IHashCodeProvider>実装と同じでは、<xref:System.Collections.IComparer>実装元<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>として</xref:System.Collections.IComparer></xref:System.Collections.IHashCodeProvider></xref:System.Collections.Hashtable>       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>は、"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "簡易コピー、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  overload: System.Collections.Hashtable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.comparer
  id: comparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: comparer
  nameWithType: Hashtable.comparer
  fullName: System.Collections.Hashtable.comparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得または設定、<xref:System.Collections.IComparer>に使用する、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.IComparer> 。"
  remarks: "このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: protected System.Collections.IComparer comparer { get; set; }
    return:
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>に使用する、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.IComparer> 。"
  overload: System.Collections.Hashtable.comparer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "値に設定されますが、 <xref:System.Collections.IEqualityComparer>。</xref:System.Collections.IEqualityComparer>を使用してハッシュ テーブルの作成"
  platform:
  - net462
- uid: System.Collections.Hashtable.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: Hashtable.Contains(Object)
  fullName: System.Collections.Hashtable.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定するかどうか、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>特定のキーが含まれています。"
  remarks: "Implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>。</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>が含まれています <xref:System.Collections.Hashtable.ContainsKey%2A>。</xref:System.Collections.Hashtable.ContainsKey%2A>とまったく同じように動作します。       このメソッドは、o (1) 操作です。       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_12_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_12_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "内で検索するキー、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref> 、指定した要素が含まれるキー、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.Hashtable.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: Hashtable.ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定するかどうか、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>特定のキーが含まれています。"
  remarks: "<xref:System.Collections.Hashtable.Contains%2A>。</xref:System.Collections.Hashtable.Contains%2A>とまったく同じようにこのメソッドを動作します。       このメソッドは、o (1) 操作です。       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_7_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_7_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_7_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "内で検索するキー、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref> 、指定した要素が含まれるキー、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.Hashtable.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: Hashtable.ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定するかどうか、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>特定の値が含まれています。"
  remarks: "要素の値、<xref:System.Collections.Hashtable>を使用して、指定した値と比較されます、<xref:System.Object.Equals%2A?displayProperty=fullName>メソッド</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Collections.Hashtable>。       このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>は、       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_9_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_9_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_9_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "内で検索する値、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref> 、指定した要素が含まれる<code> value </code>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.Hashtable.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: Hashtable.CopyTo(Array,Int32)
  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "コピー、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>要素を&1; 次元<xref:System.Array>インスタンスの指定したインデックス位置</xref:System.Array>。"
  remarks: "<xref:System.Array>列挙<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>同じ順序で</xref:System.Array>要素のコピーします。       内のキーのみをコピーする、<xref:System.Collections.Hashtable>を使用して`Hashtable.Keys.CopyTo`</xref:System.Collections.Hashtable>。       値だけをコピーする、<xref:System.Collections.Hashtable>を使用して`Hashtable.Values.CopyTo`</xref:System.Collections.Hashtable>。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>は、"
  example:
  - "The following example shows how to copy the list of keys or the list of values in a <xref:System.Collections.Hashtable> into a one-dimensional <xref:System.Array>.  \n  \n [!code-cs[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.has_0_1.cs)]\n [!code-vb[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_0_1.vb)]\n [!code-cpp[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.has_0_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "1 次元<xref:System.Array>のコピー先は、<xref:System.Collections.DictionaryEntry>からコピーされるオブジェクト<xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.DictionaryEntry> </xref:System.Array> 。 <xref:System.Array>0 から始まるインデックス番号が必要です</xref:System.Array>。"
    - id: arrayIndex
      type: System.Int32
      description: "内の&0; から始まるインデックス`array`コピーの開始位置。"
  overload: System.Collections.Hashtable.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>0 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>多次元です。       - または - ソース内の要素の数<xref href=&quot;System.Collections.Hashtable&quot;></xref>から使用可能な領域より大きくなって<code>arrayIndex</code>変換先の末尾に<code>array</code>です。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "ソースの種類<xref href=&quot;System.Collections.Hashtable&quot;></xref>変換先の型に自動的にキャストすることはできません<code> array</code>です。"
  platform:
  - net462
- uid: System.Collections.Hashtable.Count
  id: Count
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Count
  nameWithType: Hashtable.Count
  fullName: System.Collections.Hashtable.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "含まれているキー/値ペアの数を取得、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  remarks: "このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "含まれているキー/値ペアの数、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  overload: System.Collections.Hashtable.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.EqualityComparer
  id: EqualityComparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得、<xref:System.Collections.IEqualityComparer>に使用する、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.IEqualityComparer> 。"
  remarks: "<xref:System.Collections.IEqualityComparer>、比較演算子と、ハッシュ コード プロバイダーの両方が含まれています</xref:System.Collections.IEqualityComparer>。 場合、<xref:System.Collections.IEqualityComparer>で使用される、<xref:System.Collections.Hashtable>コンス トラクター、オブジェクト内のキーとして使用する、<xref:System.Collections.Hashtable>をオーバーライドする必要はありません、<xref:System.Object.GetHashCode%2A?displayProperty=fullName>と<xref:System.Object.Equals%2A?displayProperty=fullName>メソッド</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Object.GetHashCode%2A?displayProperty=fullName></xref:System.Collections.Hashtable></xref:System.Collections.Hashtable></xref:System.Collections.IEqualityComparer>。       このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: protected System.Collections.IEqualityComparer EqualityComparer { get; }
    return:
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>に使用する、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.IEqualityComparer> 。"
  overload: System.Collections.Hashtable.EqualityComparer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "値に設定されますが、ハッシュ テーブルは、使用して作成された、 <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> <xref:System.Collections.IComparer></xref:System.Collections.IComparer> 。"
  platform:
  - net462
- uid: System.Collections.Hashtable.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Hashtable.GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返します、<xref:System.Collections.IDictionaryEnumerator>を反復処理する、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.IDictionaryEnumerator> 。"
  remarks: "[Visual Basic、C# の場合]      `foreach` C# 言語のステートメント (`for each` Visual Basic で)、列挙子の複雑さが隠されています。  したがってを使用して`foreach`列挙子を直接操作せずにお勧めします。       列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。       最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。 <xref:System.Collections.IEnumerator.Reset%2A>列挙子をこの位置に戻さ点もあります。</xref:System.Collections.IEnumerator.Reset%2A>  この位置にある<xref:System.Collections.IEnumerator.Current%2A>が定義されていません</xref:System.Collections.IEnumerator.Current%2A>。 したがって、 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.Current%2A>の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに</xref:System.Collections.IEnumerator.MoveNext%2A>呼び出す必要があります。       <xref:System.Collections.IEnumerator.Current%2A>いずれかのまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>と呼びます</xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.IEnumerator.Current%2A>次の要素にします</xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>       場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`</xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`</xref:System.Collections.IEnumerator.MoveNext%2A>。 場合は、最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 <xref:System.Collections.IEnumerator.Current%2A>再度、コレクションの最初の要素に<xref:System.Collections.IEnumerator.Reset%2A><xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>続けて</xref:System.Collections.IEnumerator.Reset%2A>を呼び出すことができます</xref:System.Collections.IEnumerator.Current%2A>を設定するには       コレクションが変更されない限り、列挙子は有効です。 コレクションには、変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子は回復不可能とその動作は未定義です。       列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は本質的にスレッド セーフな処理  列挙中にスレッドの安全性を保証するためには、列挙中にコレクションをロックできます。  読み取りと書き込みの複数のスレッドがアクセスするコレクションを許可するのには、独自に同期を実装しなければなりません。       このメソッドは、o (1) 操作です。       列挙子をシリアル化とシリアル化するため、<xref:System.Collections.Hashtable>の要素を並べ替えるになる可能性があります、呼び出さずに列挙を続行することはできません、<xref:System.Collections.IEnumerator.Reset%2A>メソッド</xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.Hashtable>。"
  example:
  - "The following example compares the use of GetEnumerator and `foreach` to enumerate the contents of a <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable Example#2](~/add/codesnippet/cpp/m-system.collections.has_3_1.cpp)]\n [!code-cs[Classic Hashtable Example#2](~/add/codesnippet/csharp/m-system.collections.has_3_1.cs)]\n [!code-vb[Classic Hashtable Example#2](~/add/codesnippet/visualbasic/m-system.collections.has_3_1.vb)]"
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.Hashtable&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Hashtable.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.GetHash(System.Object)
  id: GetHash(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetHash(Object)
  nameWithType: Hashtable.GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定されたキーのハッシュ コードを返します。"
  remarks: "ハッシュ テーブルの作成時、特定の<xref:System.Collections.IHashCodeProvider>実装では、このメソッドは、そのハッシュ コード プロバイダーを使用して、それ以外の場合、使用、<xref:System.Object.GetHashCode%2A?displayProperty=fullName>の実装`key`</xref:System.Object.GetHashCode%2A?displayProperty=fullName></xref:System.Collections.IHashCodeProvider>。       このメソッドは、o (1) 操作です。"
  syntax:
    content: protected virtual int GetHash (object key);
    parameters:
    - id: key
      type: System.Object
      description: "<xref:System.Object>が返されるハッシュ コード</xref:System.Object>。"
    return:
      type: System.Int32
      description: "ハッシュ コード<code> key</code>です。"
  overload: System.Collections.Hashtable.GetHash*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "実装して、 <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>インターフェイスし、シリアル化に必要なデータを返します、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  remarks: "このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>は、"
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>オブジェクトをシリアル化するために必要な情報を含む、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A<xref:System.Runtime.Serialization.StreamingContext>オブジェクト ソースと関連付けられているシリアル化されたストリームの先を含む、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Runtime.Serialization.StreamingContext> 。"
  overload: System.Collections.Hashtable.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "コレクションが変更されました。"
  platform:
  - net462
- uid: System.Collections.Hashtable.hcp
  id: hcp
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: hcp
  nameWithType: Hashtable.hcp
  fullName: System.Collections.Hashtable.hcp
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得またはハッシュ コードを提供するオブジェクトを設定します。"
  remarks: "このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: protected System.Collections.IHashCodeProvider hcp { get; set; }
    return:
      type: System.Collections.IHashCodeProvider
      description: "ハッシュ コードを提供するオブジェクト。"
  overload: System.Collections.Hashtable.hcp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "値に設定されますが、 <xref:System.Collections.IEqualityComparer>。</xref:System.Collections.IEqualityComparer>を使用してハッシュ テーブルの作成"
  platform:
  - net462
- uid: System.Collections.Hashtable.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>のサイズが固定されています。"
  remarks: "固定サイズ コレクションできない追加または削除の要素のコレクションが作成された後で既存の要素は変更できます。       固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。       このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>が固定サイズです。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.Hashtable.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>は読み取り専用です。"
  remarks: "読み取り専用であるコレクション追加、削除、または要素の変更後にできません、コレクションを作成します。       読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。       このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>は読み取り専用です。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.Hashtable.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "アクセスをするかどうかを示す値を取得、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>が同期されている (スレッド セーフである)。"
  remarks: "A <xref:System.Collections.Hashtable>1 つのライターと複数リーダー同時にサポートできます</xref:System.Collections.Hashtable>。 複数のライターをサポートするために、によって返されるラッパーを介してすべての操作を行う必要があります、<xref:System.Collections.Hashtable.Synchronized%2A>メソッド</xref:System.Collections.Hashtable.Synchronized%2A>。       コレクションの列挙は本質的にスレッド セーフな方法です。 コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。       次のコード例を使用してコレクションをロックする方法を示しています、<xref:System.Collections.Hashtable.SyncRoot%2A>列挙中に: [!code-cpp[クラシック Hashtable.IsSynchronized 例&2;](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)][!code-vb[クラシック Hashtable.IsSynchronized 例&2;](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)][!code-cs[クラシック Hashtable.IsSynchronized 例&2;](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs) ]     </xref:System.Collections.Hashtable.SyncRoot%2A>"
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \n  \n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.has_1_2.cs)]\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.has_1_2.cpp)]\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.has_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合へのアクセス、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>が同期 (スレッド セーフな) です。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.Hashtable.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Item(Object)
  nameWithType: Hashtable.Item(Object)
  fullName: System.Collections.Hashtable.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得または指定されたキーに関連付けられている値を設定します。"
  remarks: "このプロパティは、次の構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。`myCollection[key]`です。       存在しないキーの値を設定して新しい要素を追加する項目のプロパティを使用することもできます、<xref:System.Collections.Hashtable>たとえば、 `myCollection[&quot;myNonexistentKey&quot;] = myValue`。</xref:System.Collections.Hashtable> 。 ただしで指定したキーが既に存在する場合、 <xref:System.Collections.Hashtable>、古い値を上書きする項目のプロパティを設定します</xref:System.Collections.Hashtable>。 これに対し、<xref:System.Collections.Hashtable.Add%2A>メソッドでは、既存の要素は変更しません</xref:System.Collections.Hashtable.Add%2A>。       キーには`null`値を指定できますが、します。 区別するために`null`指定したキーが見つからないため、返されると`null`指定したキーの値が返される`null`を使用して、<xref:System.Collections.Hashtable.Contains%2A>メソッドまたは<xref:System.Collections.Hashtable.ContainsKey%2A>一覧で、キーが存在するかどうかを決定するメソッド</xref:System.Collections.Hashtable.ContainsKey%2A></xref:System.Collections.Hashtable.Contains%2A>。       このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもです。       C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<xref:System.Collections.IList.Item%2A>プロパティ</xref:System.Collections.IList.Item%2A>。 Visual Basic では、同様のインデックス機能を提供する既定のプロパティとして項目を実装します。"
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "キー値を取得または設定します。"
    return:
      type: System.Object
      description: "指定したキーに関連付けられている値。 返しますを取得しようとして、指定したキーが見つからない場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、し、指定したキーを使用して、新しい要素を作成するように設定しようとしています。"
  overload: System.Collections.Hashtable.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "プロパティが設定され、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>は読み取り専用です。       - または - プロパティが設定されて、 <code> key </code> 、コレクションに存在しません、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>固定サイズです。"
  platform:
  - net462
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  id: KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: KeyEquals(Object,Object)
  nameWithType: Hashtable.KeyEquals(Object,Object)
  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "特定の比較<xref:System.Object>内の特定のキーを持つ、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Object> 。"
  remarks: "ハッシュ テーブルの作成時、特定の<xref:System.Collections.IComparer>実装では、このメソッドを使用してその; 比較できる比較演算子は、 <xref:System.Collections.IComparer.Compare%2A>(`item`、 `key`).</xref:System.Collections.IComparer.Compare%2A> </xref:System.Collections.IComparer> それ以外の場合、使用して`item.Equals(key)`です。       このメソッドは、o (1) 操作です。"
  syntax:
    content: protected virtual bool KeyEquals (object item, object key);
    parameters:
    - id: item
      type: System.Object
      description: "<xref:System.Object>と比較する`key`</xref:System.Object>。"
    - id: key
      type: System.Object
      description: "内のキー、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>と比較する`item`です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> and <code>key</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Hashtable.KeyEquals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>item</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.Keys
  id: Keys
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Keys
  nameWithType: Hashtable.Keys
  fullName: System.Collections.Hashtable.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得、<xref:System.Collections.ICollection>内のキーを含む、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.ICollection> 。"
  remarks: "内のキーの順序、<xref:System.Collections.ICollection>は指定しませんが、関連付けられている値と同じ順序、<xref:System.Collections.ICollection>によって返される、<xref:System.Collections.Hashtable.Values%2A>メソッド</xref:System.Collections.Hashtable.Values%2A></xref:System.Collections.ICollection></xref:System.Collections.ICollection>。       返された<xref:System.Collections.ICollection>静的コピーではありません代わりに、 <xref:System.Collections.ICollection> <xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>は元のキーを逆参照</xref:System.Collections.ICollection></xref:System.Collections.ICollection>。 そのため、変更<xref:System.Collections.Hashtable><xref:System.Collections.ICollection>。</xref:System.Collections.ICollection>反映されるまでに続行</xref:System.Collections.Hashtable>するには       このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>内のキーを含む、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.ICollection> 。"
  overload: System.Collections.Hashtable.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: Hashtable.OnDeserialization(Object)
  fullName: System.Collections.Hashtable.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "実装して、 <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>インターフェイスし、逆シリアル化が完了すると、逆シリアル化イベントを発生させます。"
  remarks: "このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>は、       列挙子をシリアル化とシリアル化するため、<xref:System.Collections.Hashtable>の要素を並べ替えるになる可能性があります、呼び出さずに列挙を続行することはできません、<xref:System.Collections.IEnumerator.Reset%2A>メソッド</xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.Hashtable>。"
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "逆シリアル化イベントのソース。"
  overload: System.Collections.Hashtable.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>オブジェクトに現在関連付けられている<xref href=&quot;System.Collections.Hashtable&quot;></xref>が無効です。"
  platform:
  - net462
- uid: System.Collections.Hashtable.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: Hashtable.Remove(Object)
  fullName: System.Collections.Hashtable.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定したキーを持つ要素を削除、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  remarks: "場合、<xref:System.Collections.Hashtable>指定のキーを持つ要素が含まれていない、<xref:System.Collections.Hashtable>は変更されません</xref:System.Collections.Hashtable></xref:System.Collections.Hashtable>。 例外はスローされません。       このメソッドは、o (1) 操作です。"
  example:
  - "The following example shows how to remove elements from the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.has_13_1.cpp)]\n [!code-cs[Classic Hashtable.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.has_13_1.cs)]\n [!code-vb[Classic Hashtable.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_13_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "削除する要素のキー。"
  overload: System.Collections.Hashtable.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  id: Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Synchronized(Hashtable)
  nameWithType: Hashtable.Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(Hashtable)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "同期 (スレッド セーフである) ラッパーを返します、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  remarks: "同期メソッドは、スレッド セーフの複数のリーダーとライターです。 さらに、同期されたラッパーでは、書き込み、一度に&1; つだけのライターがあることが確認されます。       コレクションの列挙は本質的にスレッド セーフなプロシージャ コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。       次のコード例を使用してコレクションをロックする方法を示しています、<xref:System.Collections.Hashtable.SyncRoot%2A>列挙中に: [!code-cpp[クラシック Hashtable.IsSynchronized 例&2;](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)][!code-vb[クラシック Hashtable.IsSynchronized 例&2;](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)][!code-cs[クラシック Hashtable.IsSynchronized 例&2;](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs) ]このメソッドは、o (1) 操作になります    </xref:System.Collections.Hashtable.SyncRoot%2A>。"
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \n  \n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.has_11_2.cs)]\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.has_11_2.cpp)]\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_11_2.vb)]"
  syntax:
    content: public static System.Collections.Hashtable Synchronized (System.Collections.Hashtable table);
    parameters:
    - id: table
      type: System.Collections.Hashtable
      description: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref>同期するためにします。"
    return:
      type: System.Collections.Hashtable
      description: "A 同期 (スレッド セーフである) ラッパーを<xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  overload: System.Collections.Hashtable.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>table</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.SyncRoot
  id: SyncRoot
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "アクセスを同期するために使用できるオブジェクトを取得、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  remarks: "同期されたバージョンを作成する、<xref:System.Collections.Hashtable>を使用して、<xref:System.Collections.Hashtable.Synchronized%2A>メソッド</xref:System.Collections.Hashtable.Synchronized%2A></xref:System.Collections.Hashtable>。 ただし、派生クラスは、独自の同期されたバージョンを指定、 <xref:System.Collections.Hashtable>SyncRoot プロパティを使用します</xref:System.Collections.Hashtable>。 同期されたコードでの操作を実行する必要があります、 <xref:System.Collections.Hashtable>、 <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable>で直接</xref:System.Collections.Hashtable> これにより、他のオブジェクトから派生したコレクションを適切に操作します。 具体的には、同時に変更する可能性がある別スレッドとの適切な同期を維持、<xref:System.Collections.Hashtable>オブジェクト</xref:System.Collections.Hashtable>。       コレクションの列挙は本質的にスレッド セーフな方法です。 コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。       次のコード例は、列挙中に、SyncRoot を使用して、コレクションをロックする方法を示します: [!code-cpp[クラシック Hashtable.IsSynchronized 例&2;](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)][!code-vb[クラシック Hashtable.IsSynchronized 例&2;](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)][!code-cs[クラシック Hashtable.IsSynchronized 例&2;    ](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "アクセスを同期するために使用できるオブジェクト、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  overload: System.Collections.Hashtable.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "コレクションを反復処理する列挙子を返します。"
  remarks: "[Visual Basic、C# の場合]      `foreach` C# 言語のステートメント (`for each` Visual Basic で)、列挙子の複雑さが隠されています。  したがってを使用して`foreach`列挙子を直接操作せずにお勧めします。       列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。       最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。 <xref:System.Collections.IEnumerator.Reset%2A>列挙子をこの位置に戻さ点もあります。</xref:System.Collections.IEnumerator.Reset%2A> この位置で、呼び出す<xref:System.Collections.IEnumerator.Current%2A>例外をスローします</xref:System.Collections.IEnumerator.Current%2A>。 したがって、 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.Current%2A>の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに</xref:System.Collections.IEnumerator.MoveNext%2A>呼び出す必要があります。       <xref:System.Collections.IEnumerator.Current%2A>いずれかのまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>と呼びます</xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.IEnumerator.Current%2A>次の要素にします</xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>       場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`</xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`</xref:System.Collections.IEnumerator.MoveNext%2A>。 場合は、最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、呼び出し元<xref:System.Collections.IEnumerator.Current%2A>例外をスローします</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 <xref:System.Collections.IEnumerator.Current%2A>再度、コレクションの最初の要素に<xref:System.Collections.IEnumerator.Reset%2A><xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>続けて</xref:System.Collections.IEnumerator.Reset%2A>を呼び出すことができます</xref:System.Collections.IEnumerator.Current%2A>を設定するには       コレクションが変更されない限り、列挙子は有効です。 コレクションの変更が加えられた場合、列挙子の無効化など、追加、変更、または要素を削除すると、なり、次を<xref:System.Collections.IEnumerator.MoveNext%2A><xref:System.Collections.IEnumerator.Reset%2A><xref:System.InvalidOperationException>。</xref:System.InvalidOperationException>をスロー</xref:System.Collections.IEnumerator.Reset%2A>または</xref:System.Collections.IEnumerator.MoveNext%2A> 間で、コレクションが変更された場合<xref:System.Collections.IEnumerator.MoveNext%2A>と<xref:System.Collections.IEnumerator.Current%2A>、<xref:System.Collections.IEnumerator.Current%2A>列挙子が既に無効になっている場合でもに設定されている要素を返します</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。       列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は本質的にスレッド セーフな処理 コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。       このメソッドは、o (1) 操作です。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>コレクションを反復処理に使用できる</xref:System.Collections.IEnumerator>。"
  overload: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.Values
  id: Values
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Values
  nameWithType: Hashtable.Values
  fullName: System.Collections.Hashtable.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得、<xref:System.Collections.ICollection>の値を含む、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.ICollection> 。"
  remarks: "内の値の順序、<xref:System.Collections.ICollection>は指定しませんが、関連付けられているキーと同じ順序、<xref:System.Collections.ICollection>によって返される、<xref:System.Collections.Hashtable.Keys%2A>メソッド</xref:System.Collections.Hashtable.Keys%2A></xref:System.Collections.ICollection></xref:System.Collections.ICollection>。       返された<xref:System.Collections.ICollection>静的コピーではありません代わりに、 <xref:System.Collections.ICollection> <xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>は元の値を逆参照</xref:System.Collections.ICollection></xref:System.Collections.ICollection>。 そのため、変更<xref:System.Collections.Hashtable><xref:System.Collections.ICollection>。</xref:System.Collections.ICollection>反映されるまでに続行</xref:System.Collections.Hashtable>するには       このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>の値を含む、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref></xref:System.Collections.ICollection> 。"
  overload: System.Collections.Hashtable.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Runtime.Serialization.SerializationException
  isExternal: true
  name: System.Runtime.Serialization.SerializationException
- uid: System.Collections.Hashtable.#ctor
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable()
  nameWithType: Hashtable.Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary)
  nameWithType: Hashtable.Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: true
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32)
  nameWithType: Hashtable.Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single)
  nameWithType: Hashtable.Hashtable(IDictionary,Single)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)
- uid: System.Collections.IHashCodeProvider
  parent: System.Collections
  isExternal: false
  name: IHashCodeProvider
  nameWithType: IHashCodeProvider
  fullName: System.Collections.IHashCodeProvider
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single)
  nameWithType: Hashtable.Hashtable(Int32,Single)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)
- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Add(Object,Object)
  nameWithType: Hashtable.Add(Object,Object)
  fullName: System.Collections.Hashtable.Add(Object,Object)
- uid: System.Collections.Hashtable.Clear
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clear()
  nameWithType: Hashtable.Clear()
  fullName: System.Collections.Hashtable.Clear()
- uid: System.Collections.Hashtable.Clone
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clone()
  nameWithType: Hashtable.Clone()
  fullName: System.Collections.Hashtable.Clone()
- uid: System.Collections.Hashtable.comparer
  parent: System.Collections.Hashtable
  isExternal: false
  name: comparer
  nameWithType: Hashtable.comparer
  fullName: System.Collections.Hashtable.comparer
- uid: System.Collections.Hashtable.Contains(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Contains(Object)
  nameWithType: Hashtable.Contains(Object)
  fullName: System.Collections.Hashtable.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: Hashtable.ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(Object)
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: Hashtable.ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(Object)
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: Hashtable.CopyTo(Array,Int32)
  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Hashtable.Count
  parent: System.Collections.Hashtable
  isExternal: false
  name: Count
  nameWithType: Hashtable.Count
  fullName: System.Collections.Hashtable.Count
- uid: System.Collections.Hashtable.EqualityComparer
  parent: System.Collections.Hashtable
  isExternal: false
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
- uid: System.Collections.Hashtable.GetEnumerator
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetEnumerator()
  nameWithType: Hashtable.GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Hashtable.GetHash(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetHash(Object)
  nameWithType: Hashtable.GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(Object)
- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Hashtable.hcp
  parent: System.Collections.Hashtable
  isExternal: false
  name: hcp
  nameWithType: Hashtable.hcp
  fullName: System.Collections.Hashtable.hcp
- uid: System.Collections.Hashtable.IsFixedSize
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
- uid: System.Collections.Hashtable.IsReadOnly
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
- uid: System.Collections.Hashtable.IsSynchronized
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
- uid: System.Collections.Hashtable.Item(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Item(Object)
  nameWithType: Hashtable.Item(Object)
  fullName: System.Collections.Hashtable.Item(Object)
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: KeyEquals(Object,Object)
  nameWithType: Hashtable.KeyEquals(Object,Object)
  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)
- uid: System.Collections.Hashtable.Keys
  parent: System.Collections.Hashtable
  isExternal: false
  name: Keys
  nameWithType: Hashtable.Keys
  fullName: System.Collections.Hashtable.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Hashtable.OnDeserialization(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: Hashtable.OnDeserialization(Object)
  fullName: System.Collections.Hashtable.OnDeserialization(Object)
- uid: System.Collections.Hashtable.Remove(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Remove(Object)
  nameWithType: Hashtable.Remove(Object)
  fullName: System.Collections.Hashtable.Remove(Object)
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Synchronized(Hashtable)
  nameWithType: Hashtable.Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections.Hashtable.SyncRoot
  parent: System.Collections.Hashtable
  isExternal: false
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Hashtable
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Hashtable.Values
  parent: System.Collections.Hashtable
  isExternal: false
  name: Values
  nameWithType: Hashtable.Values
  fullName: System.Collections.Hashtable.Values
- uid: System.Collections.Hashtable.#ctor*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable.Hashtable
- uid: System.Collections.Hashtable.Add*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Add
  nameWithType: Hashtable.Add
- uid: System.Collections.Hashtable.Clear*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clear
  nameWithType: Hashtable.Clear
- uid: System.Collections.Hashtable.Clone*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clone
  nameWithType: Hashtable.Clone
- uid: System.Collections.Hashtable.comparer*
  parent: System.Collections.Hashtable
  isExternal: false
  name: comparer
  nameWithType: Hashtable.comparer
- uid: System.Collections.Hashtable.Contains*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Contains
  nameWithType: Hashtable.Contains
- uid: System.Collections.Hashtable.ContainsKey*
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsKey
  nameWithType: Hashtable.ContainsKey
- uid: System.Collections.Hashtable.ContainsValue*
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsValue
  nameWithType: Hashtable.ContainsValue
- uid: System.Collections.Hashtable.CopyTo*
  parent: System.Collections.Hashtable
  isExternal: false
  name: CopyTo
  nameWithType: Hashtable.CopyTo
- uid: System.Collections.Hashtable.Count*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Count
  nameWithType: Hashtable.Count
- uid: System.Collections.Hashtable.EqualityComparer*
  parent: System.Collections.Hashtable
  isExternal: false
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
- uid: System.Collections.Hashtable.GetEnumerator*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetEnumerator
  nameWithType: Hashtable.GetEnumerator
- uid: System.Collections.Hashtable.GetHash*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetHash
  nameWithType: Hashtable.GetHash
- uid: System.Collections.Hashtable.GetObjectData*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetObjectData
  nameWithType: Hashtable.GetObjectData
- uid: System.Collections.Hashtable.hcp*
  parent: System.Collections.Hashtable
  isExternal: false
  name: hcp
  nameWithType: Hashtable.hcp
- uid: System.Collections.Hashtable.IsFixedSize*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
- uid: System.Collections.Hashtable.IsReadOnly*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
- uid: System.Collections.Hashtable.IsSynchronized*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
- uid: System.Collections.Hashtable.Item*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Item
  nameWithType: Hashtable.Item
- uid: System.Collections.Hashtable.KeyEquals*
  parent: System.Collections.Hashtable
  isExternal: false
  name: KeyEquals
  nameWithType: Hashtable.KeyEquals
- uid: System.Collections.Hashtable.Keys*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Keys
  nameWithType: Hashtable.Keys
- uid: System.Collections.Hashtable.OnDeserialization*
  parent: System.Collections.Hashtable
  isExternal: false
  name: OnDeserialization
  nameWithType: Hashtable.OnDeserialization
- uid: System.Collections.Hashtable.Remove*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Remove
  nameWithType: Hashtable.Remove
- uid: System.Collections.Hashtable.Synchronized*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Synchronized
  nameWithType: Hashtable.Synchronized
- uid: System.Collections.Hashtable.SyncRoot*
  parent: System.Collections.Hashtable
  isExternal: false
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Hashtable
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Hashtable.Values*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Values
  nameWithType: Hashtable.Values
