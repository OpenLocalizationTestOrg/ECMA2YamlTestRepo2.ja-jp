### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ICommandSource
  id: ICommandSource
  children:
  - System.Windows.Input.ICommandSource.Command
  - System.Windows.Input.ICommandSource.CommandParameter
  - System.Windows.Input.ICommandSource.CommandTarget
  langs:
  - csharp
  name: ICommandSource
  nameWithType: ICommandSource
  fullName: System.Windows.Input.ICommandSource
  type: Interface
  summary: "コマンドを呼び出す方法を認識しているオブジェクトを定義します。"
  remarks: "コマンド ソースは、特定のオブジェクトでのコマンドを呼び出す方法を定義します。  たとえば場合、<xref:System.Windows.Controls.Button>コマンド、コマンドに関連付けられてが呼び出されるときに、<xref:System.Windows.Controls.Button>がクリックされた</xref:System.Windows.Controls.Button></xref:System.Windows.Controls.Button>。       関連付けられているコマンドは、現在のコマンド ターゲットで実行できない場合に、コマンド ソースにより自体は通常無効にします。  たとえば、<xref:System.Windows.Controls.MenuItem>関連付け、<xref:System.Windows.Input.ApplicationCommands.Paste%2A>コマンドをいつは淡色表示自体は、<xref:System.Windows.Input.ApplicationCommands.Paste%2A>コマンドが現在のコマンド ターゲットで実行できません</xref:System.Windows.Input.ApplicationCommands.Paste%2A></xref:System.Windows.Input.ApplicationCommands.Paste%2A></xref:System.Windows.Controls.MenuItem>。       コマンド ソースがリッスンする通常、<xref:System.Windows.Input.ICommand.CanExecuteChanged>のコマンドは、上のイベント</xref:System.Windows.Input.ICommand.CanExecuteChanged>。  キーボード フォーカスが失われるなど、コマンドの対象の状態の変化時に、コマンド ソースが通知されます。  コマンド ソース クエリを実行できますを使用して、コマンド、<xref:System.Windows.Input.ICommand.CanExecute%2A>メソッド</xref:System.Windows.Input.ICommand.CanExecute%2A>。       一部のクラスの[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]を実装する関数は、: <xref:System.Windows.Controls.Primitives.ButtonBase>、 <xref:System.Windows.Controls.MenuItem>、 <xref:System.Windows.Documents.Hyperlink></xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.Controls.MenuItem> </xref:System.Windows.Controls.Primitives.ButtonBase> 。       [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]システム コマンドの実行、<xref:System.Windows.Input.InputBinding.CommandTarget%2A>ときに、関数のプロパティは適用のみ<xref:System.Windows.Input.ICommand><xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand>は</xref:System.Windows.Input.ICommand></xref:System.Windows.Input.InputBinding.CommandTarget%2A>  場合、 <xref:System.Windows.Input.InputBinding.CommandTarget%2A>、関数に設定されている、対応するコマンドが、 <xref:System.Windows.Input.RoutedCommand>、コマンドの対象は無視されます</xref:System.Windows.Input.RoutedCommand></xref:System.Windows.Input.InputBinding.CommandTarget%2A>。"
  syntax:
    content: public interface ICommandSource
  implements: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.Command
  id: Command
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: Command
  nameWithType: ICommandSource.Command
  fullName: System.Windows.Input.ICommandSource.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "コマンド ソースが呼び出されたときに実行されるコマンドを取得します。"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; }
    return:
      type: System.Windows.Input.ICommand
      description: "コマンド ソースが呼び出されたときに実行されるコマンドです。"
  overload: System.Windows.Input.ICommandSource.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.CommandParameter
  id: CommandParameter
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
  fullName: System.Windows.Input.ICommandSource.CommandParameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "ユーザー定義を実行すると、コマンドに渡すことができるデータ値を表します。"
  remarks: "通常、CommandParameter を使用してを実行すると、コマンドに固有の情報を渡します。  データの型は、コマンドによって定義されます。"
  syntax:
    content: public object CommandParameter { get; }
    return:
      type: System.Object
      description: "コマンド固有のデータ。"
  overload: System.Windows.Input.ICommandSource.CommandParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.CommandTarget
  id: CommandTarget
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
  fullName: System.Windows.Input.ICommandSource.CommandTarget
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "コマンドが実行されているオブジェクト。"
  remarks: "[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] 、システムのコマンドを実行、<xref:System.Windows.Input.InputBinding.CommandTarget%2A>プロパティを<xref:System.Windows.Input.ICommandSource>のみ該当する場合は、 <xref:System.Windows.Input.ICommand> <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand>は、</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>  場合、<xref:System.Windows.Input.InputBinding.CommandTarget%2A>に設定されている、 <xref:System.Windows.Input.ICommandSource>、対応するコマンドが、 <xref:System.Windows.Input.RoutedCommand>、コマンドの対象は無視されます</xref:System.Windows.Input.RoutedCommand></xref:System.Windows.Input.ICommandSource></xref:System.Windows.Input.InputBinding.CommandTarget%2A>。       使用すると、 <xref:System.Windows.Input.RoutedCommand>、コマンドの対象が対象となるオブジェクト、<xref:System.Windows.Input.CommandManager.Executed>と<xref:System.Windows.Input.CommandManager.CanExecute>イベントが発生します</xref:System.Windows.Input.CommandManager.CanExecute></xref:System.Windows.Input.CommandManager.Executed></xref:System.Windows.Input.RoutedCommand>。 CommandTarget プロパティが設定されていない場合、キーボード フォーカスを持つ要素がターゲットとして使用されます。"
  syntax:
    content: public System.Windows.IInputElement CommandTarget { get; }
    return:
      type: System.Windows.IInputElement
      description: "コマンドが実行されているオブジェクト。"
  overload: System.Windows.Input.ICommandSource.CommandTarget*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.ICommandSource.Command
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: Command
  nameWithType: ICommandSource.Command
  fullName: System.Windows.Input.ICommandSource.Command
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.ICommandSource.CommandParameter
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
  fullName: System.Windows.Input.ICommandSource.CommandParameter
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ICommandSource.CommandTarget
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
  fullName: System.Windows.Input.ICommandSource.CommandTarget
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.ICommandSource.Command*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: Command
  nameWithType: ICommandSource.Command
- uid: System.Windows.Input.ICommandSource.CommandParameter*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
- uid: System.Windows.Input.ICommandSource.CommandTarget*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
