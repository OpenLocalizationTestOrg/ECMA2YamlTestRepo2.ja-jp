### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  id: SecurityContextSecurityTokenResolver
  children:
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  - System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  langs:
  - csharp
  name: SecurityContextSecurityTokenResolver
  nameWithType: SecurityContextSecurityTokenResolver
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  type: Class
  summary: "セキュリティ コンテキスト トークンを解決します。"
  syntax:
    content: 'public class SecurityContextSecurityTokenResolver : System.IdentityModel.Selectors.SecurityTokenResolver, System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache'
  inheritance:
  - System.Object
  - System.IdentityModel.Selectors.SecurityTokenResolver
  implements:
  - System.ServiceModel.Security.Tokens.ISecurityContextSecurityTokenCache
  inheritedMembers:
  - System.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Tokens.SecurityToken},System.Boolean)
  - System.IdentityModel.Selectors.SecurityTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)
  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)
  - System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  - System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: SecurityContextSecurityTokenResolver(Int32,Boolean)
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver&quot;> </xref>クラスです。"
  remarks: "場合`removeOldestTokensOnCacheFull`は`false`、`AddContext`スロー、<xref:System.ServiceModel.QuotaExceededException>キャッシュ容量に達している場合</xref:System.ServiceModel.QuotaExceededException>。"
  syntax:
    content: public SecurityContextSecurityTokenResolver (int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull);
    parameters:
    - id: securityContextCacheCapacity
      type: System.Int32
      description: "セキュリティ コンテキスト キャッシュのサイズ。"
    - id: removeOldestTokensOnCacheFull
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>キャッシュがいっぱいになっている場合に最も古いトークンを削除する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)
  id: '#ctor(System.Int32,System.Boolean,System.TimeSpan)'
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver&quot;> </xref>クロックのずれの最大値と指定したセキュリティ コンテキスト キャッシュの容量を持つクラス。"
  syntax:
    content: public SecurityContextSecurityTokenResolver (int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull, TimeSpan clockSkew);
    parameters:
    - id: securityContextCacheCapacity
      type: System.Int32
      description: "セキュリティ コンテキスト キャッシュのサイズ。"
    - id: removeOldestTokensOnCacheFull
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>キャッシュがいっぱいになっている場合に最も古いトークンを削除する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: clockSkew
      type: System.TimeSpan
      description: "クライアントとサーバーのクロック設定の最大許容時間差。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)
  id: AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: AddContext(SecurityContextSecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.AddContext(SecurityContextSecurityToken)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(SecurityContextSecurityToken)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "トークン キャッシュにセキュリティ コンテキスト セキュリティ トークンを追加します。"
  syntax:
    content: public void AddContext (System.ServiceModel.Security.Tokens.SecurityContextSecurityToken token);
    parameters:
    - id: token
      type: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken
      description: "セキュリティ コンテキスト トークンです。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext*
  exceptions:
  - type: System.ServiceModel.QuotaExceededException
    commentId: T:System.ServiceModel.QuotaExceededException
    description: "<xref:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*>プロパティは<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>とキャッシュの容量に達したかを超えています</xref:System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*>。"
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts
  id: ClearContexts
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: ClearContexts()
  nameWithType: SecurityContextSecurityTokenResolver.ClearContexts()
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "コンテンツのトークンのキャッシュをクリアします。"
  syntax:
    content: public void ClearContexts ();
    parameters: []
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
  id: ClockSkew
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: ClockSkew
  nameWithType: SecurityContextSecurityTokenResolver.ClockSkew
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "クライアントとサーバーのクロック設定の最大許容時間差を返します。"
  syntax:
    content: public TimeSpan ClockSkew { get; }
    return:
      type: System.TimeSpan
      description: "クライアントとサーバーのクロック設定の最大許容時間差。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)
  id: GetAllContexts(System.Xml.UniqueId)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: GetAllContexts(UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.GetAllContexts(UniqueId)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(UniqueId)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "セキュリティ コンテキスト セキュリティのコレクションを指定したコンテキスト ID に一致するトークンの Id を取得します"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.SecurityContextSecurityToken> GetAllContexts (System.Xml.UniqueId contextId);
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
      description: "指定されたセキュリティ コンテキスト id。"
    return:
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Security.Tokens.SecurityContextSecurityToken}
      description: "セキュリティ コンテキスト トークンのジェネリック コレクション。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  id: GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: GetContext(UniqueId,UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.GetContext(UniqueId,UniqueId)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(UniqueId,UniqueId)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "セキュリティ コンテキスト セキュリティ トークン ID を指定したコンテキスト ID と生成に一致するを取得します。"
  syntax:
    content: public System.ServiceModel.Security.Tokens.SecurityContextSecurityToken GetContext (System.Xml.UniqueId contextId, System.Xml.UniqueId generation);
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
      description: "指定されたセキュリティ コンテキスト id。"
    - id: generation
      type: System.Xml.UniqueId
      description: "生成。"
    return:
      type: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken
      description: "一致するセキュリティ コンテキスト トークンです。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)
  id: RemoveAllContexts(System.Xml.UniqueId)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: RemoveAllContexts(UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.RemoveAllContexts(UniqueId)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(UniqueId)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "指定したコンテキスト ID と一致するキャッシュからすべてのトークンを削除します。"
  syntax:
    content: public void RemoveAllContexts (System.Xml.UniqueId contextId);
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
      description: "指定されたセキュリティ コンテキスト id。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  id: RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: RemoveContext(UniqueId,UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.RemoveContext(UniqueId,UniqueId)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(UniqueId,UniqueId)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "特定のコンテキスト ID と生成に一致するキャッシュからトークンを削除します。"
  syntax:
    content: public void RemoveContext (System.Xml.UniqueId contextId, System.Xml.UniqueId generation);
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
      description: "指定されたセキュリティ コンテキスト id。"
    - id: generation
      type: System.Xml.UniqueId
      description: "生成。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  id: RemoveOldestTokensOnCacheFull
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: RemoveOldestTokensOnCacheFull
  nameWithType: SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "キャッシュがいっぱいになったときに、最も古いトークンを削除するかどうかを示す値を取得します。"
  syntax:
    content: public bool RemoveOldestTokensOnCacheFull { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>キャッシュがいっぱいになっている場合に最も古いトークンを削除する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  id: SecurityContextTokenCacheCapacity
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: SecurityContextTokenCacheCapacity
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "セキュリティ コンテキスト トークン キャッシュのサイズを取得します。"
  syntax:
    content: public int SecurityContextTokenCacheCapacity { get; }
    return:
      type: System.Int32
      description: "セキュリティ コンテキスト トークン キャッシュのサイズ。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)
  id: TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: TryAddContext(SecurityContextSecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.TryAddContext(SecurityContextSecurityToken)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(SecurityContextSecurityToken)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "トークンをキャッシュに追加しようとしています。"
  syntax:
    content: public bool TryAddContext (System.ServiceModel.Security.Tokens.SecurityContextSecurityToken token);
    parameters:
    - id: token
      type: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken
      description: "セキュリティ コンテキスト トークンです。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>トークンがキャッシュに正常に追加された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>token</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> token </code>日付または時刻が範囲外です。"
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  id: TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "指定したキー識別子句を指定された、セキュリティ キー コアの解決を試みます。"
  syntax:
    content: protected override bool TryResolveSecurityKeyCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityKey key);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "セキュリティ キー識別句。"
    - id: key
      type: System.IdentityModel.Tokens.SecurityKey
      description: "このメソッドが戻るときに、解決されたキー コアが含まれています。 このパラメーターは初期化せずに渡されます。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>キー コアが正常に解決された; 場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "指定したキー識別子、トークンの解決を試みます。"
  syntax:
    content: protected override bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifier keyIdentifier, out System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: keyIdentifier
      type: System.IdentityModel.Tokens.SecurityKeyIdentifier
      description: "セキュリティ キー識別子。"
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "このメソッドが戻るときに、解決されたキー コアが含まれています。 このパラメーターは初期化せずに渡されます。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、キー トークンが正常に解決されました。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "指定したキー識別子句を指定、トークンの解決を試みます。"
  syntax:
    content: protected override bool TryResolveTokenCore (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause, out System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "セキュリティ キー識別句。"
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "このメソッドが戻るときに、解決されたキー コアが含まれています。 このパラメーターは初期化せずに渡されます。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、キー トークンが正常に解決されました。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  id: UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  name: UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)
  nameWithType: SecurityContextSecurityTokenResolver.UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security.Tokens
  summary: "キャッシュ内のトークンの有効期限を更新します。"
  syntax:
    content: public void UpdateContextCachingTime (System.ServiceModel.Security.Tokens.SecurityContextSecurityToken context, DateTime expirationTime);
    parameters:
    - id: context
      type: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken
      description: "セキュリティ コンテキスト。"
    - id: expirationTime
      type: System.DateTime
      description: "新しい有効期限日付と時刻。"
  overload: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: false
  name: System.IdentityModel.Selectors.SecurityTokenResolver
- uid: System.ServiceModel.QuotaExceededException
  isExternal: true
  name: System.ServiceModel.QuotaExceededException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: SecurityContextSecurityTokenResolver(Int32,Boolean)
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32,Boolean,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: AddContext(SecurityContextSecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.AddContext(SecurityContextSecurityToken)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(SecurityContextSecurityToken)
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken
  parent: System.ServiceModel.Security.Tokens
  isExternal: false
  name: SecurityContextSecurityToken
  nameWithType: SecurityContextSecurityToken
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: ClearContexts()
  nameWithType: SecurityContextSecurityTokenResolver.ClearContexts()
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts()
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: ClockSkew
  nameWithType: SecurityContextSecurityTokenResolver.ClockSkew
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: GetAllContexts(UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.GetAllContexts(UniqueId)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(UniqueId)
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Security.Tokens.SecurityContextSecurityToken}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<SecurityContextSecurityToken>
  nameWithType: Collection<SecurityContextSecurityToken>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Security.Tokens.SecurityContextSecurityToken>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Security.Tokens.SecurityContextSecurityToken>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: SecurityContextSecurityToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.UniqueId
  parent: System.Xml
  isExternal: true
  name: UniqueId
  nameWithType: UniqueId
  fullName: System.Xml.UniqueId
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: GetContext(UniqueId,UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.GetContext(UniqueId,UniqueId)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(UniqueId,UniqueId)
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: RemoveAllContexts(UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.RemoveAllContexts(UniqueId)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(UniqueId)
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: RemoveContext(UniqueId,UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.RemoveContext(UniqueId,UniqueId)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(UniqueId,UniqueId)
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: RemoveOldestTokensOnCacheFull
  nameWithType: SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: SecurityContextTokenCacheCapacity
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: TryAddContext(SecurityContextSecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.TryAddContext(SecurityContextSecurityToken)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(SecurityContextSecurityToken)
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause,SecurityKey)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityKey
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: System.IdentityModel.Tokens.SecurityKey
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier,SecurityToken)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: System.IdentityModel.Tokens.SecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause,SecurityToken)
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(System.ServiceModel.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)
  nameWithType: SecurityContextSecurityTokenResolver.UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)
  fullName: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(SecurityContextSecurityToken,DateTime)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: SecurityContextSecurityTokenResolver
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: AddContext
  nameWithType: SecurityContextSecurityTokenResolver.AddContext
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: ClearContexts
  nameWithType: SecurityContextSecurityTokenResolver.ClearContexts
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: ClockSkew
  nameWithType: SecurityContextSecurityTokenResolver.ClockSkew
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: GetAllContexts
  nameWithType: SecurityContextSecurityTokenResolver.GetAllContexts
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: GetContext
  nameWithType: SecurityContextSecurityTokenResolver.GetContext
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: RemoveAllContexts
  nameWithType: SecurityContextSecurityTokenResolver.RemoveAllContexts
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: RemoveContext
  nameWithType: SecurityContextSecurityTokenResolver.RemoveContext
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: RemoveOldestTokensOnCacheFull
  nameWithType: SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: SecurityContextTokenCacheCapacity
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: TryAddContext
  nameWithType: SecurityContextSecurityTokenResolver.TryAddContext
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: TryResolveSecurityKeyCore
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: TryResolveTokenCore
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore
- uid: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime*
  parent: System.ServiceModel.Security.Tokens.SecurityContextSecurityTokenResolver
  isExternal: false
  name: UpdateContextCachingTime
  nameWithType: SecurityContextSecurityTokenResolver.UpdateContextCachingTime
