### YamlMime:ManagedReference
items:
- uid: System.Data.IDataAdapter
  id: IDataAdapter
  children:
  - System.Data.IDataAdapter.Fill(System.Data.DataSet)
  - System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.IDataAdapter.GetFillParameters
  - System.Data.IDataAdapter.MissingMappingAction
  - System.Data.IDataAdapter.MissingSchemaAction
  - System.Data.IDataAdapter.TableMappings
  - System.Data.IDataAdapter.Update(System.Data.DataSet)
  langs:
  - csharp
  name: IDataAdapter
  nameWithType: IDataAdapter
  fullName: System.Data.IDataAdapter
  type: Interface
  summary: "オブジェクトをデータ アダプターを実装するのには、メソッドと入力し、更新に使用されるマッピング操作に関連するプロパティのセットを表します、 <xref href=&quot;System.Data.DataSet&quot;> </xref>およびデータ ソースを更新します。       <xref href=&quot;System.Data.IDbDataAdapter&quot;></xref>インスタンスは、リレーショナル データベース コマンドのテキストを含む) は (またはのようになります) するデータ ソース (と同様に[!INCLUDE[tsql](~/add/includes/tsql-md.md)]) IDataAdapter インスタンスにデータ ソースの任意の型を使用できますできますが、します。"
  remarks: "IDataAdapter インターフェイスにより、データ ソースと<xref:System.Data.DataSet>。</xref:System.Data.DataSet>間のブリッジを表すデータ アダプター クラスの実装、継承したクラス DataAdapter クラスの詳細については、次を参照してください。 [DataAdapter からの DataSet の読み込み](~/add/includes/ajax-current-ext-md.md)です。       アプリケーションでは、直接、IDataAdapter インターフェイスのインスタンスは作成されませんが、IDataAdapter を継承するクラスのインスタンスを実装します。       IDataAdapter を継承するクラスは継承されたメンバーを実装する必要があり、通常プロバイダー固有の機能を追加するための追加メンバーを定義します。 たとえば、IDataAdapter インターフェイス定義、<xref:System.Data.IDataAdapter.Fill%2A>を受け取るメソッド、<xref:System.Data.DataSet>をパラメーターとして</xref:System.Data.DataSet></xref:System.Data.IDataAdapter.Fill%2A>。 さらに、<xref:System.Data.OleDb.OleDbDataAdapter>クラスは継承、<xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッド定義のオーバー ロードを&2; つ追加して、<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>を ADO レコード セット オブジェクトをパラメーターとして受け取るメソッド</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A></xref:System.Data.Common.DbDataAdapter.Fill%2A></xref:System.Data.OleDb.OleDbDataAdapter>。"
  example:
  - "The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database. The filled <xref:System.Data.DataSet> is then returned. To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  \n  \n [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.idataadapter_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.idataadapter_1.cs)]"
  syntax:
    content: public interface IDataAdapter
  implements: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "追加または内の行を更新、 <xref href=&quot;System.Data.DataSet&quot;> </xref>一致するように、データ ソースを使用して、 <xref href=&quot;System.Data.DataSet&quot;> </xref>名、および作成、 <xref href=&quot;System.Data.DataTable&quot;> </xref> &quot;Table&quot;という名前です。"
  remarks: "Fill が関連付けられている、指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティ</xref:System.Data.IDbDataAdapter.SelectCommand%2A>。 SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。 Fill が呼び出される前に、接続が閉じている場合は、データを取得するために開く、閉じられました。 Fill が呼び出される前に、接続が開いている場合は、開いたままです。       格納操作し、変換先に行を追加する<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうかは、まだ存在しない</xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Data.DataTable>。 作成するときに<xref:System.Data.DataTable>オブジェクトを格納操作は、通常のみの列名のメタデータを作成します</xref:System.Data.DataTable>。 ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されている`AddWithKey`、適切なプライマリ キーと制約も作成されます</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>。       場合、 `SelectCommand` OUTER JOIN の結果を返します、 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A>結果として得られる<xref:System.Data.DataTable>.</xref:System.Data.DataTable>の値</xref:System.Data.DataTable.PrimaryKey%2A>を設定しません 重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/add/includes/ajax-current-ext-md.md)です。       場合、<xref:System.Data.IDataAdapter>重複する列を設定中に検出すると、 <xref:System.Data.DataTable>、パターン&quot;columnname1&quot;、&quot;columnname2&quot;、&quot;columnname3&quot;などを使用して、連続した列の名前が生成されます</xref:System.Data.DataTable></xref:System.Data.IDataAdapter>。 配置されますが、受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン&quot;Column1&quot;、&quot;Column2&quot;など</xref:System.Data.DataSet>。 複数の結果セットが追加されたとき、 <xref:System.Data.DataSet>、各結果セットが別のテーブルに格納します</xref:System.Data.DataSet>。 追加の結果セットは指定したテーブル名 (たとえば、&quot;Table&quot;、&quot;Table1&quot;、&quot;Table2&quot;、およびなど) に整数値を追加してという名前です。 アプリケーションは、注意を使用して、列やテーブルの名前を使用して、これらの名前付けパターンとの競合が発生しないことを確認する必要があります。       ときに設定するために使用する SELECT ステートメント、<xref:System.Data.DataSet>複数の結果を返すバッチの SQL ステートメントなど、エラーが含まれる結果のいずれかの場合連続するすべての結果はスキップされ、 <xref:System.Data.DataSet>.</xref:System.Data.DataSet>に追加されていない</xref:System.Data.DataSet>       同じ<xref:System.Data.DataTable>。</xref:System.Data.DataTable> 、Fill メソッド複数回を使用できます。 主キーが存在する場合は、受信した行が既に存在する行と一致すると共にマージされます。 主キーがない場合、受信した行が<xref:System.Data.DataTable>。</xref:System.Data.DataTable>      > [!NOTE] > を複数の結果、塗りつぶしの実装を返す SQL ステートメントのバッチを処理するときに、<xref:System.Data.IDataAdapter.FillSchema%2A>の .NET Framework データ プロバイダーが最初の結果のみのスキーマ情報を取得します</xref:System.Data.IDataAdapter.FillSchema%2A>。"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref>のレコードを格納して、必要に応じて、スキーマです。"
    return:
      type: System.Int32
      description: "行の数が正常に追加または更新されて、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。 これには、行を返さないステートメントによって影響を受けた行は含まれません。"
  overload: System.Data.IDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "追加、 <xref href=&quot;System.Data.DataTable&quot;> </xref> &quot;Table&quot;をという名前を指定した<xref href=&quot;System.Data.DataSet&quot;></xref>に基づいて、指定された、データ ソースにある一致するようにスキーマを構成および<xref href=&quot;System.Data.SchemaType&quot;></xref>です。"
  remarks: "FillSchema メソッド<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。</xref:System.Data.IDbDataAdapter.SelectCommand%2A>を使用してデータ ソースからスキーマを取得します。 接続オブジェクトに関連付けられている、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>有効である必要がありますを開く必要はありませんが</xref:System.Data.IDbDataAdapter.SelectCommand%2A>。 FillSchema が呼び出される前に、接続が閉じている場合は、データを取得するために開く、閉じられました。 FillSchema が呼び出される前に、接続が開いている場合は、開いたままです。       FillSchema 操作追加<xref:System.Data.DataTable>先<xref:System.Data.DataSet>。</xref:System.Data.DataSet> </xref:System.Data.DataTable> 列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、次の構成と<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> 設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします</xref:System.Data.DataColumn.AutoIncrementSeed%2A></xref:System.Data.DataColumn.AutoIncrementStep%2A>。      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>-<xref:System.Data.DataColumn.Unique%2A>構成も行います FillSchema、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>次の規則に従ってプロパティ: -&1; つまたは複数の主キー列がこの<xref:System.Data.IDbDataAdapter.SelectCommand%2A><xref:System.Data.DataTable>.</xref:System.Data.DataTable>の主キー列として使用される、</xref:System.Data.IDbDataAdapter.SelectCommand%2A>によって返される場合</xref:System.Data.DataTable.Constraints%2A></xref:System.Data.DataTable.PrimaryKey%2A></xref:System.Data.DataColumn.Unique%2A></xref:System.Data.DataColumn.ReadOnly%2A></xref:System.Data.DataColumn.MaxLength%2A>      主キー列は返されませんが、一意の列は場合、は、すべての一意の列が null 非許容の場合は、主キーとしての一意の列が使用されます。 任意の列は null を許容すると場合、<xref:System.Data.UniqueConstraint>に追加、 <xref:System.Data.ConstraintCollection>、ですが、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティが設定されていません</xref:System.Data.DataTable.PrimaryKey%2A></xref:System.Data.ConstraintCollection></xref:System.Data.UniqueConstraint>。      主キー列と一意の列の両方が返された場合でも、主キー列は<xref:System.Data.DataTable>。</xref:System.Data.DataTable>の主キー列として使用されます。       主キーと一意の制約が追加することに注意してください、<xref:System.Data.ConstraintCollection>以前の規則が、その他の制約に従って、型は追加されません</xref:System.Data.ConstraintCollection>。       一意のクラスター化または SQL Server テーブルに複数の列にインデックスを定義し、主キー制約が定義されて、個別の列のセットで、クラスター化インデックスの列の名前が返されます。 主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。 クエリ ヒントを指定する方法の詳細については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)です。       場合、<xref:System.Data.IDataAdapter>重複する列を設定中に検出すると、 <xref:System.Data.DataTable>、パターン&quot;columnname1&quot;、&quot;columnname2&quot;、&quot;columnname3&quot;などを使用して、連続した列の名前が生成されます</xref:System.Data.DataTable></xref:System.Data.IDataAdapter>。 配置されますが、受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン&quot;Column1&quot;、&quot;Column2&quot;など</xref:System.Data.DataSet>。 複数の結果セットが追加されたとき、 <xref:System.Data.DataSet>、各結果セットが別のテーブルに格納します</xref:System.Data.DataSet>。 追加の結果セットは指定したテーブル名 (たとえば、&quot;Table&quot;、&quot;Table1&quot;、&quot;Table2&quot;、およびなど) に整数値を追加してという名前です。 アプリケーションは、注意を使用して、列やテーブルの名前を使用して、これらの名前付けパターンとの競合が発生しないことを確認する必要があります。       FillSchema は、行を返しません。 <xref:System.Data.IDataAdapter.Fill%2A> <xref:System.Data.DataTable>。</xref:System.Data.DataTable>行を追加するメソッド</xref:System.Data.IDataAdapter.Fill%2A>を使用して"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref>データ ソースからスキーマを格納します。"
    - id: schemaType
      type: System.Data.SchemaType
      description: "1 つ、 <xref href=&quot;System.Data.SchemaType&quot;> </xref>値。"
    return:
      type: System.Data.DataTable[]
      description: "配列<xref href=&quot;System.Data.DataTable&quot;></xref>データ ソースからスキーマ情報を格納するオブジェクトが返されます。"
  overload: System.Data.IDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "SQL SELECT ステートメントを実行するときに、ユーザーによって設定パラメーターを取得します。"
  remarks: "```  \nprivate static void GetParameters(String connectiongString) {  \n           using (SqlConnection conn = new SqlConnection(connectiongString)) {  \n              String queryString = \"Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits\";   \n              SqlParameter year = new SqlParameter(\"@Year\", 2012);   \n              SqlParameter credits = new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\");   \n              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   \n              command.Parameters.Add(year);   \n              command.Parameters.Add(credits);   \n              IDbDataAdapter mySchool = new SqlDataAdapter(command);   \n              IDataParameter[] parameters = mySchool.GetFillParameters();  \n              Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", \"ParameterName\", \"SourceColumn\", \"Direction\", \"DbType\", \"Value\");   \n              foreach (IDataParameter parameter in parameters) {   \n                 Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   \n              }  \n           }  \n        }  \n```"
  syntax:
    content: public System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "配列<xref href=&quot;System.Data.IDataParameter&quot;></xref>パラメーターが含まれているオブジェクトがユーザーによって設定します。"
  overload: System.Data.IDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingMappingAction
  id: MissingMappingAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "示すかどうかのマップされていないソース テーブルまたは列が渡されるソース名でフィルター処理するために、またはエラーが発生するを指定します。"
  remarks: "<xref:System.Data.IDataAdapter.TableMappings%2A>プロパティは、返されたレコードと<xref:System.Data.DataSet>。</xref:System.Data.DataSet>マスターのマッピングを提供します。</xref:System.Data.IDataAdapter.TableMappings%2A>"
  syntax:
    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }
    return:
      type: System.Data.MissingMappingAction
      description: "1 つ、 <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref>値。 既定値は<xref uid=&quot;langword_csharp_Passthrough&quot; name=&quot;Passthrough&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.IDataAdapter.MissingMappingAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定されている値が、 <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref>値。"
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingSchemaAction
  id: MissingSchemaAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "示すか、不足しているソース テーブル、列、およびそれらのリレーションシップは無視、データセットのスキーマを追加したり、発生するエラーが発生するかどうかを指定します。"
  syntax:
    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }
    return:
      type: System.Data.MissingSchemaAction
      description: "1 つ、 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref>値。 既定値は<xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.IDataAdapter.MissingSchemaAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定されている値が、 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref>値。"
  platform:
  - net462
- uid: System.Data.IDataAdapter.TableMappings
  id: TableMappings
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "ソース テーブルを dataset テーブルにマップする方法を示します。"
  remarks: "<xref:System.Data.IDataAdapter>&quot;Table&quot;という名前のソース テーブルのマッピングのみが使用されます</xref:System.Data.IDataAdapter>。 すべてを選択して、データの値を返すステートメントの INSERT、DELETE、および更新する必要がありますは一貫性のある列の名前付けを使用しています。 レコードで返される列名は一意である必要があります、同じ名前の列が以前のデータを上書きするそれ以外の場合。 <xref:System.Data.IDataAdapter.Update%2A>、&quot;Table&quot;という名前のソース テーブルにマップされているテーブルの変更を調整する必要がのみ</xref:System.Data.IDataAdapter.Update%2A>。"
  syntax:
    content: public System.Data.ITableMappingCollection TableMappings { get; }
    return:
      type: System.Data.ITableMappingCollection
      description: "返されたレコードの間でマスター マッピングを提供するコレクションと<xref href=&quot;System.Data.DataSet&quot;></xref>です。 既定値は、空のコレクションです。"
  overload: System.Data.IDataAdapter.TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "それぞれの INSERT、UPDATE、または DELETE ステートメントの問い合わせについては、挿入、更新、または削除された、指定した行をそれぞれ<xref href=&quot;System.Data.DataSet&quot;></xref>から、 <xref href=&quot;System.Data.DataTable&quot;> </xref> &quot;Table&quot;という名前です。"
  remarks: "アプリケーションは、Update メソッドを呼び出すときに、<xref:System.Data.IDataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティ、 <xref:System.Data.DataSet>.</xref:System.Data.DataSet>で構成されているインデックスの順序に基づいて、各行の繰り返し、必要な INSERT、UPDATE、または DELETE ステートメントを実行および</xref:System.Data.DataRow.RowState%2A></xref:System.Data.IDataAdapter> たとえば、更新が<xref:System.Data.DataTable>。</xref:System.Data.DataTable>内の行の順序付けのため、INSERT ステートメントとし、もう&1; つの DELETE ステートメントを続けて、DELETE ステートメントを実行可能性があります。       これらのステートメントは、バッチ処理としては実行されないことに注意してください。各行が個別に更新されます。 アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>メソッドの場合は、一連のステートメントの種類 (たとえば、更新する前に挿入) を制御する必要があります</xref:System.Data.DataSet.GetChanges%2A>。 詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/add/includes/ajax-current-ext-md.md)です。       かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、<xref:System.Data.Common.DataAdapter.Update%2A>メソッドで例外が生成されます</xref:System.Data.Common.DataAdapter.Update%2A>。 ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの&1; つのテーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティ</xref:System.Data.OleDb.OleDbCommandBuilder></xref:System.Data.SqlClient.SqlCommandBuilder>。 次に、設定しない追加の SQL ステートメントは、CommandBuilder によって生成されます。 この生成ロジックには、 <xref:System.Data.DataSet>。</xref:System.Data.DataSet>に存在するキー列情報が必要です。 詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。       <xref:System.Data.Common.DataAdapter.Update%2A>メソッドは、更新プログラムを実行する前に最初のマッピングに示されたテーブルから行を取得します</xref:System.Data.Common.DataAdapter.Update%2A>。 <xref:System.Data.Common.DataAdapter.Update%2A>の値を使用して行を更新、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティ</xref:System.Data.IDbCommand.UpdatedRowSource%2A></xref:System.Data.Common.DataAdapter.Update%2A>。 返されるその他の行は無視されます。       すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーが、調整を検査できるように<xref:System.Data.DataSet>行とその出力、コマンドによって返されるパラメーター</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> 。 行が正常に更新される、その行に対する変更が受け入れられます。       実行の順序は次のように、更新プログラムを使用する場合: 1。  内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます</xref:System.Data.DataRow>。      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>イベントが発生します</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>。      3.  コマンドを実行します。      4.  コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果が<xref:System.Data.DataRow>.</xref:System.Data.DataRow>に格納し、      5.  <xref:System.Data.DataRow>。</xref:System.Data.DataRow>れたりする場合は出力パラメーターがあります。      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントが発生します</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>。      7.  <xref:System.Data.DataRow.AcceptChanges%2A>呼び出されます。</xref:System.Data.DataRow.AcceptChanges%2A>       <xref:System.Data.IDataAdapter>通常はそれに関連付けられているパラメーターのコレクション</xref:System.Data.IDataAdapter>に関連付けられている各コマンド パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスです。 `SourceColumn`指す、<xref:System.Data.DataTable>列を<xref:System.Data.IDataAdapter>参照を現在の行のパラメーターの値を取得します</xref:System.Data.IDataAdapter></xref:System.Data.DataTable>。       `SourceColumn`すべてのテーブル マップを適用する前に、マップされていない列の名前を指します。 場合`SourceColumn`は存在しない列に実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値</xref:System.Data.MissingMappingAction>。      |列挙値 |実行されるアクション |  |-----------------------|------------------|  |`MissingMappingAction.Passthrough`|マッピングが存在しない場合、ソース列の名前とテーブル名を<xref:System.Data.DataSet>に使用します |。  |`MissingMappingAction.Ignore`|A<xref:System.SystemException>が生成されます</xref:System.SystemException></xref:System.Data.DataSet>。 設定すると、マッピングが明示的に、入力パラメーターは、通常、エラーが原因の不足しているマッピングします |。  |`MissingMappingAction.Error`|<xref:System.SystemException>が生成されます |。      `SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターにバックアップ、 `DataSet`</xref:System.SystemException> 。 存在しない列を参照する場合、例外が生成されます。       `SourceVersion`の .NET Framework データ プロバイダーのプロパティ`Parameter`クラスかどうかを使用する、 `Original`、 `Current`、または`Proposed`列の値のバージョン。 この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含める頻繁に使用します。      > [!NOTE] > 行を更新中にエラーが発生した場合、例外がスローされ、更新プログラムの実行は廃止されました。 エラーが発生したときに例外を生成せず、更新操作を続行するには設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true` <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A>を呼び出す前に</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベントです。 内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A><xref:System.Data.Common.RowUpdatedEventArgs><xref:System.Data.UpdateStatus></xref:System.Data.UpdateStatus></xref:System.Data.Common.RowUpdatedEventArgs>のプロパティ</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>を設定します。。"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.idataadapt_1.cs)]\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.idataadapt_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref>データ ソースを更新するために使用します。"
    return:
      type: System.Int32
      description: "正常に更新された行の数、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  overload: System.Data.IDataAdapter.Update*
  exceptions:
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "INSERT、UPDATE、または DELETE ステートメントを実行しようとすると、影響を受けた&0; 個のレコードが発生しました。"
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.IDataAdapter.GetFillParameters
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.IDataAdapter.MissingMappingAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
- uid: System.Data.MissingMappingAction
  parent: System.Data
  isExternal: false
  name: MissingMappingAction
  nameWithType: MissingMappingAction
  fullName: System.Data.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
- uid: System.Data.ITableMappingCollection
  parent: System.Data
  isExternal: false
  name: ITableMappingCollection
  nameWithType: ITableMappingCollection
  fullName: System.Data.ITableMappingCollection
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
- uid: System.Data.IDataAdapter.Fill*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill
  nameWithType: IDataAdapter.Fill
- uid: System.Data.IDataAdapter.FillSchema*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: IDataAdapter.FillSchema
- uid: System.Data.IDataAdapter.GetFillParameters*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: IDataAdapter.GetFillParameters
- uid: System.Data.IDataAdapter.MissingMappingAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
- uid: System.Data.IDataAdapter.Update*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update
  nameWithType: IDataAdapter.Update
