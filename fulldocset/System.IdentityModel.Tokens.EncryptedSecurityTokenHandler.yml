### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  id: EncryptedSecurityTokenHandler
  children:
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType
  - System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  langs:
  - csharp
  name: EncryptedSecurityTokenHandler
  nameWithType: EncryptedSecurityTokenHandler
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  type: Class
  summary: "暗号化されたセキュリティ トークンのトークン ハンドラー。 型のトークンを処理<xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;></xref>です。"
  remarks: "シリアル化および逆シリアル化するトークン ハンドラー<xref:System.IdentityModel.Tokens.EncryptedSecurityToken>オブジェクトから`<xenc:EncryptedData>`要素および<xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause>オブジェクトから`<xenc:EncryptedKey>`要素 (http://www.w3.org/TR/2002/REC-xmlenc-core-20021210) XML Encryption Syntax and Processing 仕様で定義されている</xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause></xref:System.IdentityModel.Tokens.EncryptedSecurityToken>。"
  syntax:
    content: 'public class EncryptedSecurityTokenHandler : System.IdentityModel.Tokens.SecurityTokenHandler'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityTokenHandler
  implements: []
  inheritedMembers:
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  - System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  - System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: EncryptedSecurityTokenHandler()
  nameWithType: EncryptedSecurityTokenHandler.EncryptedSecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.EncryptedSecurityTokenHandler()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityTokenHandler&quot;> </xref>クラスです。"
  syntax:
    content: public EncryptedSecurityTokenHandler ();
    parameters: []
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  id: CanReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: CanReadKeyIdentifierClause(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "現在の XML 要素を指しているかどうかを示す値を返します、 <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedKey&gt;&quot; name=&quot;&lt;xenc:EncryptedKey&gt;&quot; href=&quot;&quot;> </xref>を逆シリアル化する要素、 <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref>このインスタンスでします。"
  syntax:
    content: public override bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "開始要素に配置されている XML リーダーです。 リーダーはない高度な必要があります。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>XML リーダーが配置されている場合、 <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedKey&gt;&quot; name=&quot;&lt;xenc:EncryptedKey&gt;&quot; href=&quot;&quot;> </xref>要素 (http://www.w3.org/TR/2002/REC-xmlenc-core-20021210); XML Encryption Syntax and Processing 仕様のセクション 3.5.1 で定義されている場合は、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  id: CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: CanReadToken(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "リーダーを指しているかどうかを示す値を返します、 <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedData&gt;&quot; name=&quot;&lt;xenc:EncryptedData&gt;&quot; href=&quot;&quot;> </xref>要素。"
  remarks: "返すときに、リーダーを移動しません`false`です。"
  syntax:
    content: public override bool CanReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "セキュリティ トークンに位置しているリーダー (<xref uid=&quot;langword_csharp_&lt;xenc:EncryptedData&gt;&quot; name=&quot;&lt;xenc:EncryptedData&gt;&quot; href=&quot;&quot;> </xref>要素です)。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>リーダーが配置されている場合、 <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedData&gt;&quot; name=&quot;&lt;xenc:EncryptedData&gt;&quot; href=&quot;&quot;> </xref>要素、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken
  id: CanWriteToken
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: CanWriteToken
  nameWithType: EncryptedSecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "ハンドラーがトークンのシリアル化機能を提供するかどうかを示す値を取得します。"
  syntax:
    content: public override bool CanWriteToken { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ハンドラーがトークンをシリアル化できる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers
  id: GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: GetTokenTypeIdentifiers()
  nameWithType: EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "現在のインスタンスによって処理されるトークンの型識別子 Uri を取得します。"
  syntax:
    content: public override string[] GetTokenTypeIdentifiers ();
    parameters: []
    return:
      type: System.String[]
      description: "既定では、1 つの配列を返す<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>文字列に関連付けられている特定のトークンの型識別子がないため、 <xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;> </xref>型です。"
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer
  id: KeyInfoSerializer
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: KeyInfoSerializer
  nameWithType: EncryptedSecurityTokenHandler.KeyInfoSerializer
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "取得または設定、 <xref href=&quot;System.IdentityModel.Selectors.SecurityTokenSerializer&quot;> </xref>およびからキーの識別子を逆シリアル化に使用される、 <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedData&gt;&quot; name=&quot;&lt;xenc:EncryptedData&gt;&quot; href=&quot;&quot;> </xref>要素。"
  syntax:
    content: public System.IdentityModel.Selectors.SecurityTokenSerializer KeyInfoSerializer { get; set; }
    return:
      type: System.IdentityModel.Selectors.SecurityTokenSerializer
      description: "読み取りし、書き込みに使用されるトークン シリアライザーは、キーの識別子をキーします。"
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "プロパティを設定しようとすると、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>に発生します。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  id: ReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: ReadKeyIdentifierClause(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "読み取り、 <xref href=&quot;System.IdentityModel.Tokens.EncryptedKeyIdentifierClause&quot;> </xref> XML ストリームからです。"
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "XML リーダーに配置されて、 <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedKey&gt;&quot; name=&quot;&lt;xenc:EncryptedKey&gt;&quot; href=&quot;&quot;> </xref>要素として &quot;http://www.w3.org/TR/2002/REC-xmlenc-core-20021210&quot; で定義されている、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "型のキー識別子句<xref href=&quot;System.IdentityModel.Tokens.EncryptedKeyIdentifierClause&quot;></xref>です。"
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>reader</code>配置されていません、 <xref uid=&quot;langword_csharp_&lt;xenc:EncryptedKey&gt;&quot; name=&quot;&lt;xenc:EncryptedKey&gt;&quot; href=&quot;&quot;> </xref>要素。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  id: ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "暗号化されたセキュリティ トークンを読み取ります。"
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "元のトークンを読み取るリーダー。"
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "型のセキュリティ トークン<xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;></xref>です。"
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "構成されたサービス トークン リゾルバーがありません。 (いずれか、 &lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A?displayProperty=fullName&gt;プロパティまたは&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.ServiceTokenResolver%2A?displayProperty=fullName&gt;参照先のトークン ハンドラーの構成のプロパティが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。 復号化キーを取得するには、サービスのトークン リゾルバーが必要です。       - または -、 <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandlerCollection&quot;></xref>を通じて参照、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*>プロパティは見つかりませんが、 <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandler&quot;> </xref>復号化された XML を読み取るして返すことができます、 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref></xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*> 。"
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref>リーダーで XML が指す内側が見つかりません。       -or-       The <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;></xref> is not a <xref href=&quot;System.IdentityModel.Tokens.SymmetricSecurityKey&quot;></xref>."
  - type: System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException
    commentId: T:System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException
    description: "<xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifier&quot;> </xref>内側に構成されたサービス トークン リゾルバーで解決できない XML を検出、 <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;></xref>です。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType
  id: TokenType
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: TokenType
  nameWithType: EncryptedSecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "現在のインスタンスによって処理されるトークンの種類を取得します。"
  syntax:
    content: public override Type TokenType { get; }
    return:
      type: System.Type
      description: "現在のインスタンスによって処理されるトークンの種類。 The default is <xref uid=&quot;langword_csharp_typeof&quot; name=&quot;typeof&quot; href=&quot;&quot;></xref><xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;></xref>."
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  langs:
  - csharp
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: EncryptedSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "XML ライターを使用して暗号化されたセキュリティ トークンを書き込みます。"
  syntax:
    content: public override void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "暗号化されたトークンの書き込み先 XML ライター。"
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "暗号化されたセキュリティ トークンのインスタンスである必要があります<xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;></xref>です。"
  overload: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>writer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>token</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>token</code>として割り当てることはできません<xref href=&quot;System.IdentityModel.Tokens.EncryptedSecurityToken&quot;></xref>です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "&lt;Xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A?displayProperty=fullName&gt;プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。 このプロパティは、暗号化キーを入手するために必要です。       - または - によって返されたトークン ハンドラーのコレクション、<xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*>プロパティは検索できませんでした、 <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandler&quot;> </xref>を書き込むことができます、 <xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>によって返される、 &lt;xref:System.IdentityModel.Tokens.EncryptedSecurityToken.Token%2A?displayProperty=fullName&gt;プロパティ</xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*>。"
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "&lt;Xref:System.IdentityModel.Tokens.EncryptingCredentials.SecurityKey%2A?displayProperty=fullName&gt;として割り当てることができるプロパティは<xref href=&quot;System.IdentityModel.Tokens.SymmetricSecurityKey&quot;></xref>です。"
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: System.IdentityModel.Tokens.SecurityTokenHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Tokens.SecurityTokenException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenException
  nameWithType: SecurityTokenException
  fullName: System.IdentityModel.Tokens.SecurityTokenException
- uid: System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: EncryptedTokenDecryptionFailedException
  nameWithType: EncryptedTokenDecryptionFailedException
  fullName: System.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: EncryptedSecurityTokenHandler()
  nameWithType: EncryptedSecurityTokenHandler.EncryptedSecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.EncryptedSecurityTokenHandler()
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanReadKeyIdentifierClause(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanReadToken(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken(XmlReader)
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: EncryptedSecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers()
  nameWithType: EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: KeyInfoSerializer
  nameWithType: EncryptedSecurityTokenHandler.KeyInfoSerializer
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer
- uid: System.IdentityModel.Selectors.SecurityTokenSerializer
  parent: System.IdentityModel.Selectors
  isExternal: false
  name: SecurityTokenSerializer
  nameWithType: SecurityTokenSerializer
  fullName: System.IdentityModel.Selectors.SecurityTokenSerializer
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: ReadKeyIdentifierClause(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: ReadToken(XmlReader)
  nameWithType: EncryptedSecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken(XmlReader)
- uid: System.IdentityModel.Tokens.SecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: EncryptedSecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: EncryptedSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.#ctor*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: EncryptedSecurityTokenHandler
  nameWithType: EncryptedSecurityTokenHandler.EncryptedSecurityTokenHandler
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanReadKeyIdentifierClause
  nameWithType: EncryptedSecurityTokenHandler.CanReadKeyIdentifierClause
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanReadToken*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanReadToken
  nameWithType: EncryptedSecurityTokenHandler.CanReadToken
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.CanWriteToken*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: EncryptedSecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers
  nameWithType: EncryptedSecurityTokenHandler.GetTokenTypeIdentifiers
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.KeyInfoSerializer*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: KeyInfoSerializer
  nameWithType: EncryptedSecurityTokenHandler.KeyInfoSerializer
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadKeyIdentifierClause*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: ReadKeyIdentifierClause
  nameWithType: EncryptedSecurityTokenHandler.ReadKeyIdentifierClause
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.ReadToken*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: ReadToken
  nameWithType: EncryptedSecurityTokenHandler.ReadToken
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.TokenType*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: EncryptedSecurityTokenHandler.TokenType
- uid: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler.WriteToken*
  parent: System.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  isExternal: false
  name: WriteToken
  nameWithType: EncryptedSecurityTokenHandler.WriteToken
