### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.PerformanceCounter
  id: PerformanceCounter
  children:
  - System.Diagnostics.PerformanceCounter.#ctor
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)
  - System.Diagnostics.PerformanceCounter.BeginInit
  - System.Diagnostics.PerformanceCounter.CategoryName
  - System.Diagnostics.PerformanceCounter.Close
  - System.Diagnostics.PerformanceCounter.CloseSharedResources
  - System.Diagnostics.PerformanceCounter.CounterHelp
  - System.Diagnostics.PerformanceCounter.CounterName
  - System.Diagnostics.PerformanceCounter.CounterType
  - System.Diagnostics.PerformanceCounter.Decrement
  - System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  - System.Diagnostics.PerformanceCounter.Dispose(System.Boolean)
  - System.Diagnostics.PerformanceCounter.EndInit
  - System.Diagnostics.PerformanceCounter.Increment
  - System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)
  - System.Diagnostics.PerformanceCounter.InstanceLifetime
  - System.Diagnostics.PerformanceCounter.InstanceName
  - System.Diagnostics.PerformanceCounter.MachineName
  - System.Diagnostics.PerformanceCounter.NextSample
  - System.Diagnostics.PerformanceCounter.NextValue
  - System.Diagnostics.PerformanceCounter.RawValue
  - System.Diagnostics.PerformanceCounter.ReadOnly
  - System.Diagnostics.PerformanceCounter.RemoveInstance
  langs:
  - csharp
  name: PerformanceCounter
  nameWithType: PerformanceCounter
  fullName: System.Diagnostics.PerformanceCounter
  type: Class
  summary: "Windows NT パフォーマンス カウンター コンポーネントを表します。"
  remarks: "The PerformanceCounter component can be used for both reading existing predefined or custom counters and publishing (writing) performance data to custom counters.  \n  \n There are numerous predefined counters listed in the Windows Performance Monitor's [Add Counters dialog box](http://go.microsoft.com/fwlink/p/?LinkId=257854). To learn about the .NET Framework performance counters, see [Performance Counters](~/add/includes/ajax-current-ext-md.md).  \n  \n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \n  \n> [!IMPORTANT]\n>  In versions 1.0 and 1.1 of the .NET Framework, this class requires immediate callers to be fully trusted. Starting with the .NET Framework version 2.0, this class requires <xref:System.Diagnostics.PerformanceCounterPermission> for specific actions. It is strongly recommended that <xref:System.Diagnostics.PerformanceCounterPermission> not be granted to semi-trusted code.  The ability to read and write performance counters allows code to perform actions such as enumerating executing processes and obtaining information about them.  \n>   \n>  In addition, passing a PerformanceCounter object to less-trusted code can create a security issue. Never pass performance counter objects, such as a <xref:System.Diagnostics.PerformanceCounterCategory> or PerformanceCounter, to less trusted code.  \n  \n To read from a performance counter, create an instance of the PerformanceCounter class, set the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and, optionally, the <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> or <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> properties, and then call the <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> method to take a performance counter reading.  \n  \n To publish performance counter data, create one or more custom counters using the <xref:System.Diagnostics.PerformanceCounterCategory.Create%2A?displayProperty=fullName> method, create an instance of the PerformanceCounter class, set the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A> and, optionally, <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> or <xref:System.Diagnostics.PerformanceCounter.MachineName%2A> properties, and then call the <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, or <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> methods, or set the <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> property to change the value of your custom counter.  \n  \n> [!NOTE]\n>  The <xref:System.Diagnostics.PerformanceCounter.Increment%2A>, <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>, and <xref:System.Diagnostics.PerformanceCounter.Decrement%2A> methods use interlocks to update the counter value. This helps keep the counter value accurate in multithreaded or multiprocess scenarios, but also results in a performance penalty. If you do not need the accuracy that interlocked operations provide, you can update the <xref:System.Diagnostics.PerformanceCounter.RawValue%2A> property directly for up to a 5 times performance improvement.  However, in multithreaded scenarios, some updates to the counter value might be ignored, resulting in inaccurate data.  \n  \n The counter is the mechanism by which performance data is collected. The registry stores the names of all the counters, each of which is related to a specific area of system functionality. Examples include a processor's busy time, memory usage, or the number of bytes received over a network connection.  \n  \n Each counter is uniquely identified through its name and its location. In the same way that a file path includes a drive, a directory, one or more subdirectories, and a file name, counter information consists of four elements: the computer, the category, the category instance, and the counter name.  \n  \n The counter information must include the category, or performance object, that the counter measures data for. A computer's categories include physical components, such as processors, disks, and memory. There are also system categories, such as processes and threads. Each category is related to a functional element within the computer and has a set of standard counters assigned to it. These objects are listed in the Performance object drop-down list of the Add Counters dialog box within the Windows 2000 System Monitor, and you must include them in the counter path. Performance data is grouped by the category to which is it related.  \n  \n In certain cases, several copies of the same category can exist. For example, several processes and threads run simultaneously, and some computers contain more than one processor. The category copies are called category instances, and each instance has a set of standard counters assigned to it. If a category can have more than one instance, an instance specification must be included in the counter information.  \n  \n To obtain performance data for counters that required an initial or previous value for performing the necessary calculation, call the <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> method twice and use the information returned as your application requires.  \n  \n> [!NOTE]\n>  Performance counter categories installed with the [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] use separate shared memory, with each performance counter category having its own memory. You can specify the size of separate shared memory by creating a DWORD named FileMappingSize in the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<category name>*\\Performance. The FileMappingSize value is set to the shared memory size of the category. The default size is 131072 decimal. If the FileMappingSize value is not present, the `fileMappingSize` attribute value for the `performanceCounters` element specified in the Machine.config file is used, causing additional overhead for configuration file processing. You can realize a performance improvement for application startup by setting the file mapping size in the registry. For more information about the file mapping size, see [\\&lt;performanceCounters\\&gt;](../Topic/%3CperformanceCounters%3E%20Element.md)."
  example:
  - "The following code example demonstrates the use of the PerformanceCounter class to create and use an <xref:System.Diagnostics.PerformanceCounterType> counter type. The example creates categories, sets up counters, collects data from the counters, and calls the <xref:System.Diagnostics.CounterSampleCalculator> class to interpret the performance counter data. The intermediate and final results are displayed in the console window. For additional examples of other performance counter types, see the <xref:System.Diagnostics.PerformanceCounterType> enumeration.  \n  \n [!code-cpp[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/cpp/t-system.diagnostics.per_0_1.cpp)]\n [!code-cs[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/csharp/t-system.diagnostics.per_0_1.cs)]\n [!code-vb[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/visualbasic/t-system.diagnostics.per_0_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.InstallerType("System.Diagnostics.PerformanceCounterInstaller,System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public sealed class PerformanceCounter : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor
  id: '#ctor'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter()
  nameWithType: PerformanceCounter.PerformanceCounter()
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "読み取り専用の新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;> </xref>クラスは、システムとカスタム パフォーマンス カウンターのインスタンスを関連付けることがない場合。"
  remarks: "このオーバー ロード コンス トラクターのセットの<xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>、<xref:System.Diagnostics.PerformanceCounter.CounterName%2A>と<xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>プロパティを空の文字列 (&quot;&quot;)、設定と、<xref:System.Diagnostics.PerformanceCounter.MachineName%2A>プロパティをローカル コンピューター (&quot;です&quot;)。</xref:System.Diagnostics.PerformanceCounter.MachineName%2A> </xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> </xref:System.Diagnostics.PerformanceCounter.CounterName%2A> </xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> 。       このコンス トラクターは、パフォーマンス カウンターを初期化しないため、ローカル コンピューターの既存のカウンターのインスタンスは関連付けられません。 特定のパフォーマンス カウンターを指すように設定、 <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>、 <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>、し、必要に応じて、<xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>と<xref:System.Diagnostics.PerformanceCounter.MachineName%2A>の他のプロパティを読み取りまたはカウンターからを読み取る前にプロパティ</xref:System.Diagnostics.PerformanceCounter.MachineName%2A></xref:System.Diagnostics.PerformanceCounter.InstanceName%2A></xref:System.Diagnostics.PerformanceCounter.CounterName%2A></xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>。 パフォーマンス カウンターに書き込む、設定、<xref:System.Diagnostics.PerformanceCounter.ReadOnly%2A>プロパティを`false`</xref:System.Diagnostics.PerformanceCounter.ReadOnly%2A>。      > [!NOTE] ><xref:System.Security.Permissions.HostProtectionAttribute>属性がこのメンバーに適用された次<xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A>プロパティ値: <xref:System.Security.Permissions.HostProtectionResource>|<xref:System.Security.Permissions.HostProtectionResource>.</xref:System.Security.Permissions.HostProtectionResource></xref:System.Security.Permissions.HostProtectionResource></xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A></xref:System.Security.Permissions.HostProtectionAttribute> <xref:System.Security.Permissions.HostProtectionAttribute>デスクトップ アプリケーション (通常、アイコンのダブルクリック、コマンドの入力またはブラウザーで URL の入力により起動されます) には影響しません</xref:System.Security.Permissions.HostProtectionAttribute>。 詳細については、次を参照してください、<xref:System.Security.Permissions.HostProtectionAttribute>クラスまたは[SQL Server プログラミングとホスト保護属性](~/add/includes/ajax-current-ext-md.md)。</xref:System.Security.Permissions.HostProtectionAttribute> 。"
  example:
  - "The following code example creates a default instance of the <xref:System.Diagnostics.PerformanceCounter> class. After the instance is created, the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> property values are set, and the results of a call to the <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> method are displayed.  \n  \n [!code-cs[PerfCounter#1](~/add/codesnippet/csharp/m-system.diagnostics.per_15_1.cs)]\n [!code-cpp[PerfCounter#1](~/add/codesnippet/cpp/m-system.diagnostics.per_15_1.cpp)]\n [!code-vb[PerfCounter#1](~/add/codesnippet/visualbasic/m-system.diagnostics.per_15_1.vb)]"
  syntax:
    content: public PerformanceCounter ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter(String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "読み取り専用の新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;> </xref>クラスし、指定したシステムまたはローカル コンピューター上のカスタム パフォーマンス カウンターに関連付けます。 このコンス トラクターでは、カテゴリの&1; つのインスタンスである必要があります。"
  remarks: "パラメーター文字列は区別されません。       このオーバー ロードを使用して、1 つのパフォーマンス カウンター カテゴリのインスタンスが含まれるカテゴリに属している、ローカル コンピューターのカウンターにアクセスします。 このポイントをこのコンス トラクターを使用しようとするかどうかは<xref:System.Diagnostics.PerformanceCounter>インスタンス カテゴリに複数のインスタンス、コンス トラクターの例外スローが含まれています</xref:System.Diagnostics.PerformanceCounter>。 このオーバー ロードできる読み取り専用アクセスまたは読み取り/書き込みカウンターが読み取り専用モードにします。 A<xref:System.Diagnostics.PerformanceCounter>カウンター自体が読み取り/書き込み場合でもこのオーバー ロードを使用して作成されたインスタンスが、カウンターを書き込むことはできません</xref:System.Diagnostics.PerformanceCounter>。       コンス トラクターのセットのこのオーバー ロード、<xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>と<xref:System.Diagnostics.PerformanceCounter.CounterName%2A>プロパティの値にするに渡す、設定、<xref:System.Diagnostics.PerformanceCounter.MachineName%2A>プロパティをローカル コンピューターに&quot;です&quot;、設定と、<xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>プロパティを空の文字列 (&quot;&quot;)。</xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> </xref:System.Diagnostics.PerformanceCounter.MachineName%2A> </xref:System.Diagnostics.PerformanceCounter.CounterName%2A> </xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> 。       このコンス トラクターは、パフォーマンス カウンターを初期化し、インスタンスをローカル コンピューターの既存のカウンター (システムまたはカスタムのカウンター) に関連付けます。 指定した値、<xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>と<xref:System.Diagnostics.PerformanceCounter.CounterName%2A>プロパティは、ローカル コンピューター上の既存のパフォーマンス カウンターを指す必要があります</xref:System.Diagnostics.PerformanceCounter.CounterName%2A></xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>。      > [!NOTE] > Windows Vista、Windows XP Professional x64 Edition、または Windows Server 2003 でのパフォーマンス カウンターを読み取り、Performance Monitor Users グループのメンバーであるか管理者特権を持っています。   >> Windows Vista でのパフォーマンス カウンターにアクセスする特権を昇格することを回避するのには、自分でを Performance Monitor Users グループに追加します。   >> Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 組み込みの Administrators グループのメンバーの場合は、2 つのランタイム アクセス トークンが割り当てられて: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 パフォーマンス カウンターにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。"
  syntax:
    content: public PerformanceCounter (string categoryName, string counterName);
    parameters:
    - id: categoryName
      type: System.String
      description: "このパフォーマンス カウンターが関連付けられているパフォーマンス カウンター カテゴリ (パフォーマンス オブジェクト) の名前。"
    - id: counterName
      type: System.String
      description: "パフォーマンス カウンターの名前です。"
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>categoryName</code>空の文字列 (&quot;&quot;) です。       - または -<code>counterName</code>空の文字列 (&quot;&quot;) です。       または、指定されたカテゴリが存在しません。       または、指定されたカテゴリが複数インスタンスとしてマークされ、パフォーマンス カウンターをインスタンス名で作成する必要があります。       - または -<code>categoryName</code>と<code>counterName</code>異なる言語にローカライズされています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code>or <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "管理者特権なしで実行されるコードは、パフォーマンス カウンターを読み取ろうとしました。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter(String,String,Boolean)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,Boolean)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "初期化の新しい読み取り専用または読み取り/書き込みインスタンスの<xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref>クラスし、指定したシステムまたはローカル コンピューター上のカスタム パフォーマンス カウンターに関連付けます。 このコンス トラクターは、カテゴリが&1; つのインスタンスを含めることが必要です。"
  remarks: "パラメーター文字列は区別されません。       読み取り専用アクセスまたは読み取り/書き込みの&1; つのパフォーマンス カウンター カテゴリのインスタンスが含まれるカテゴリに属しているローカル コンピューターのカウンターには、このオーバー ロードを使用します。 このポイントをこのコンス トラクターを使用しようとするかどうかは<xref:System.Diagnostics.PerformanceCounter>インスタンス カテゴリに複数のインスタンス、コンス トラクターの例外スローが含まれています</xref:System.Diagnostics.PerformanceCounter>。       コンス トラクターのセットのこのオーバー ロード、 <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>、<xref:System.Diagnostics.PerformanceCounter.CounterName%2A>と<xref:System.Diagnostics.PerformanceCounter.ReadOnly%2A>プロパティの値にするに渡す、設定、<xref:System.Diagnostics.PerformanceCounter.MachineName%2A>プロパティをローカル コンピューターに&quot;です&quot;、設定と、<xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>プロパティを空の文字列 (&quot;&quot;)。</xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> </xref:System.Diagnostics.PerformanceCounter.MachineName%2A> </xref:System.Diagnostics.PerformanceCounter.ReadOnly%2A> </xref:System.Diagnostics.PerformanceCounter.CounterName%2A> </xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> 。       このコンス トラクターは、パフォーマンス カウンターを初期化し、インスタンスをローカル コンピューターの既存のカウンター (システムまたはカスタムのカウンター) に関連付けます。 指定した値、<xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>と<xref:System.Diagnostics.PerformanceCounter.CounterName%2A>プロパティは、ローカル コンピューター上の既存のパフォーマンス カウンターを指す必要があります</xref:System.Diagnostics.PerformanceCounter.CounterName%2A></xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>。 ポイントするパフォーマンス カウンターのインスタンスが有効でない場合、コンス トラクターの呼び出しは例外をスローします。      > [!NOTE] > システム カウンターへの接続にこのオーバー ロードを使用することができますが、システム カウンターに書き込むことはできません。 そのため、設定`readOnly`に`false`システム カウンターへの接続によってが生じる場合、コンス トラクターは例外をスローします。      > [!NOTE] > Windows Vista、Windows XP Professional x64 Edition、または Windows Server 2003 でのパフォーマンス カウンターを読み取り、Performance Monitor Users グループのメンバーであるか管理者特権を持っています。   >> Windows Vista でのパフォーマンス カウンターにアクセスする特権を昇格することを回避するのには、自分でを Performance Monitor Users グループに追加します。   >> Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 組み込みの Administrators グループのメンバーの場合は、2 つのランタイム アクセス トークンが割り当てられて: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 パフォーマンス カウンターにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。"
  example:
  - "The following code example creates an instance of the <xref:System.Diagnostics.PerformanceCounter> class. The example passes in category names, counter names, and a flag value indicating that the counter is not read-only. This code example is part of a larger example for the <xref:System.Diagnostics.PerformanceCounter> class.  \n  \n [!code-cpp[PerformanceCounterType.AverageCounter64#2](~/add/codesnippet/cpp/edd71a17-4ee7-4e9f-af30-_1.cpp)]\n [!code-cs[PerformanceCounterType.AverageCounter64#2](~/add/codesnippet/csharp/edd71a17-4ee7-4e9f-af30-_1.cs)]\n [!code-vb[PerformanceCounterType.AverageCounter64#2](~/add/codesnippet/visualbasic/edd71a17-4ee7-4e9f-af30-_1.vb)]"
  syntax:
    content: public PerformanceCounter (string categoryName, string counterName, bool readOnly);
    parameters:
    - id: categoryName
      type: System.String
      description: "このパフォーマンス カウンターが関連付けられているパフォーマンス カウンター カテゴリ (パフォーマンス オブジェクト) の名前。"
    - id: counterName
      type: System.String
      description: "パフォーマンス カウンターの名前です。"
    - id: readOnly
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>カウンターにアクセスして読み取り専用モードで (ただし、カウンター自体は、読み取り/書き込みをする可能性があります) にします。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>カウンターにアクセスして読み取り/書き込みモードにします。"
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code> categoryName </code>空の文字列 (&quot;&quot;) です。       - または -、 <code> counterName </code>空の文字列 (&quot;&quot;) です。       または、指定されたカテゴリが存在しません。 (if <code>readOnly</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>).       または、指定したカテゴリは、.NET Framework のカスタム カテゴリではない (場合<code> readOnly </code>は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>)。       または、指定されたカテゴリが複数インスタンスとしてマークされ、パフォーマンス カウンターをインスタンス名で作成する必要があります。       - または - <code> categoryName </code>と<code> counterName </code>異なる言語にローカライズされています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code>or <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "管理者特権なしで実行されるコードは、パフォーマンス カウンターを読み取ろうとしました。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter(String,String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "読み取り専用の新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;> </xref>クラスし、指定したシステムまたはローカル コンピューター上のカスタム パフォーマンス カウンターと、カテゴリ インスタンスに関連付けます。"
  remarks: "パラメーター文字列は区別されません。       このオーバー ロード コンス トラクターのセットの<xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>、 <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>、および<xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>プロパティの値にするで渡すし、設定、<xref:System.Diagnostics.PerformanceCounter.MachineName%2A>プロパティをローカル コンピューターに&quot;です&quot;。</xref:System.Diagnostics.PerformanceCounter.MachineName%2A> </xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> </xref:System.Diagnostics.PerformanceCounter.CounterName%2A> </xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> 。       このコンス トラクターは、パフォーマンス カウンターを初期化し、インスタンスをローカル コンピューターの既存のカウンター (システムまたはカスタムのカウンター) に関連付けます。 指定した値、 <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>、 <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>、および<xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>プロパティは、ローカル コンピューター上の既存のパフォーマンス カウンターを指す必要があります</xref:System.Diagnostics.PerformanceCounter.InstanceName%2A></xref:System.Diagnostics.PerformanceCounter.CounterName%2A></xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>。 ポイントするパフォーマンス カウンターのインスタンスが有効でない場合、コンス トラクターの呼び出しは例外をスローします。       このオーバー ロードできる読み取り専用アクセスまたは読み取り/書き込みカウンターが読み取り専用モードにします。 A<xref:System.Diagnostics.PerformanceCounter>カウンター自体が読み取り/書き込み場合でもこのオーバー ロードを使用して作成されたインスタンスが、カウンターを書き込むことはできません</xref:System.Diagnostics.PerformanceCounter>。       パフォーマンス カテゴリのインスタンスを作成するには、指定、`instanceName`上、<xref:System.Diagnostics.PerformanceCounter.%23ctor%2A>コンス トラクター</xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> 。 カテゴリのインスタンスを指定して場合`instanceName`既に存在する、新しいオブジェクトは、既存のカテゴリのインスタンスを参照します。      > [!NOTE] > Windows Vista、Windows XP Professional x64 Edition、または Windows Server 2003 でのパフォーマンス カウンターを読み取り、Performance Monitor Users グループのメンバーであるか管理者特権を持っています。   >> Windows Vista でのパフォーマンス カウンターにアクセスする特権を昇格することを回避するのには、自分でを Performance Monitor Users グループに追加します。   >> Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 組み込みの Administrators グループのメンバーの場合は、2 つのランタイム アクセス トークンが割り当てられて: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 パフォーマンス カウンターにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。"
  syntax:
    content: public PerformanceCounter (string categoryName, string counterName, string instanceName);
    parameters:
    - id: categoryName
      type: System.String
      description: "このパフォーマンス カウンターが関連付けられているパフォーマンス カウンター カテゴリ (パフォーマンス オブジェクト) の名前。"
    - id: counterName
      type: System.String
      description: "パフォーマンス カウンターの名前です。"
    - id: instanceName
      type: System.String
      description: "パフォーマンス カウンターのカテゴリ インスタンスまたは空の文字列の名前 (&quot;&quot;)、カテゴリには、1 つのインスタンスが含まれている場合、します。"
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>categoryName</code>空の文字列 (&quot;&quot;) です。       - または -<code>counterName</code>空の文字列 (&quot;&quot;) です。       または、指定されたカテゴリが正しくありません。       または、指定されたカテゴリが複数インスタンスとしてマークされ、パフォーマンス カウンターをインスタンス名で作成する必要があります。       - または -<code>instanceName</code>が 127 文字を超えています。       - または -<code>categoryName</code>と<code>counterName</code>異なる言語にローカライズされています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code>or <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "管理者特権なしで実行されるコードは、パフォーマンス カウンターを読み取ろうとしました。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.String,System.Boolean)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter(String,String,String,Boolean)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String,Boolean)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "初期化の新しい読み取り専用または読み取り/書き込みインスタンスの<xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref>クラスし、指定したシステムまたはローカル コンピューター上のカスタム パフォーマンス カウンターと、カテゴリ インスタンスに関連付けます。"
  remarks: "パラメーター文字列は区別されません。       このオーバー ロードを使用して、いずれかのパフォーマンス カウンターにアクセスする読み取り専用または読み取り/書き込みモードです。       このオーバー ロード コンス トラクターのセットの<xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>、 <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>、および<xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>し、セット内のプロパティを値を渡す、<xref:System.Diagnostics.PerformanceCounter.MachineName%2A>プロパティをローカル コンピューターに&quot;です&quot;。</xref:System.Diagnostics.PerformanceCounter.MachineName%2A> </xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> </xref:System.Diagnostics.PerformanceCounter.CounterName%2A> </xref:System.Diagnostics.PerformanceCounter.CategoryName%2A> 。       このコンス トラクターは、パフォーマンス カウンターを初期化し、インスタンスをローカル コンピューターの既存のカウンター (システムまたはカスタムのカウンター) に関連付けます。 指定した値、 <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>、 <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>、および<xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>プロパティは、ローカル コンピューター上の既存のパフォーマンス カウンターを指す必要があります</xref:System.Diagnostics.PerformanceCounter.InstanceName%2A></xref:System.Diagnostics.PerformanceCounter.CounterName%2A></xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>。 ポイントするパフォーマンス カウンターのインスタンスが有効でない場合、コンス トラクターの呼び出しは例外をスローします。      > [!NOTE] > システム カウンターへの接続にこのオーバー ロードを使用することができますが、システム カウンターに書き込むことはできません。 そのため、設定`readOnly`に`false`システム カウンターへの接続によってが生じる場合、コンス トラクターは例外をスローします。       パフォーマンス カテゴリのインスタンスを作成するには、指定、`instanceName`上、<xref:System.Diagnostics.PerformanceCounter.%23ctor%2A>コンス トラクター</xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> 。 カテゴリのインスタンスを指定して場合`instanceName`既に存在する、新しいオブジェクトは、既存のカテゴリのインスタンスを参照します。      > [!NOTE] > Windows Vista、Windows XP Professional x64 Edition、または Windows Server 2003 でのパフォーマンス カウンターを読み取り、Performance Monitor Users グループのメンバーであるか管理者特権を持っています。   >> Windows Vista でのパフォーマンス カウンターにアクセスする特権を昇格することを回避するのには、自分でを Performance Monitor Users グループに追加します。   >> Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 組み込みの Administrators グループのメンバーの場合は、2 つのランタイム アクセス トークンが割り当てられて: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 パフォーマンス カウンターにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。"
  syntax:
    content: public PerformanceCounter (string categoryName, string counterName, string instanceName, bool readOnly);
    parameters:
    - id: categoryName
      type: System.String
      description: "このパフォーマンス カウンターが関連付けられているパフォーマンス カウンター カテゴリ (パフォーマンス オブジェクト) の名前。"
    - id: counterName
      type: System.String
      description: "パフォーマンス カウンターの名前です。"
    - id: instanceName
      type: System.String
      description: "パフォーマンス カウンターのカテゴリ インスタンスまたは空の文字列の名前 (&quot;&quot;)、カテゴリには、1 つのインスタンスが含まれている場合、します。"
    - id: readOnly
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>読み取り専用モードであるカウンターにアクセスするには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>読み取り/書き込みモードでのカウンターにアクセスします。"
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>categoryName</code>空の文字列 (&quot;&quot;) です。       - または -<code>counterName</code>空の文字列 (&quot;&quot;) です。       または、読み取り/書き込みアクセス許可設定が要求されましたが、このカウンターに対して無効です。       または、指定されたカテゴリが存在しません (場合<code>readOnly</code>は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>)。       または、指定したカテゴリは、.NET Framework のカスタム カテゴリではない (場合<code>readOnly</code>は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>)。       または、指定されたカテゴリが複数インスタンスとしてマークされ、パフォーマンス カウンターをインスタンス名で作成する必要があります。       - または -<code>instanceName</code>が 127 文字を超えています。       - または -<code>categoryName</code>と<code>counterName</code>異なる言語にローカライズされています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code>or <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "管理者特権なしで実行されるコードは、パフォーマンス カウンターを読み取ろうとしました。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: PerformanceCounter(String,String,String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "読み取り専用の新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;> </xref>クラスし、指定したシステムまたはカスタム パフォーマンス カウンターと、カテゴリ インスタンスで、指定したコンピューターに関連付けます。"
  remarks: "パラメーター文字列は区別されません。       このオーバー ロード コンス トラクターのセットの<xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>、 <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>、 <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>、<xref:System.Diagnostics.PerformanceCounter.MachineName%2A>インチを渡すプロパティを値</xref:System.Diagnostics.PerformanceCounter.MachineName%2A>と</xref:System.Diagnostics.PerformanceCounter.InstanceName%2A></xref:System.Diagnostics.PerformanceCounter.CounterName%2A></xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>       このコンス トラクターは、パフォーマンス カウンターを初期化し、インスタンスを指定したコンピューターの既存のカウンター (システムまたはカスタムのカウンター) に関連付けます。 指定した値、 <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>、 <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>、<xref:System.Diagnostics.PerformanceCounter.InstanceName%2A>と<xref:System.Diagnostics.PerformanceCounter.MachineName%2A>プロパティは、既存のパフォーマンス カウンターを指す必要があります</xref:System.Diagnostics.PerformanceCounter.MachineName%2A></xref:System.Diagnostics.PerformanceCounter.InstanceName%2A></xref:System.Diagnostics.PerformanceCounter.CounterName%2A></xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>。 ポイントするパフォーマンス カウンターのインスタンスが有効でない場合、コンス トラクターの呼び出しは例外をスローします。 このオーバー ロードできる読み取り専用アクセスまたは読み取り/書き込みカウンターが読み取り専用モードにします。 A<xref:System.Diagnostics.PerformanceCounter>カウンター自体が読み取り/書き込み場合でもこのオーバー ロードを使用して作成されたインスタンスが、カウンターを書き込むことはできません</xref:System.Diagnostics.PerformanceCounter>。      > [!NOTE] > リモートのパフォーマンス カウンターに書き込むことはできません。 読み取り/書き込みインスタンスを指定できるオーバー ロードはありません、<xref:System.Diagnostics.PerformanceCounter>リモート コンピューターに接続するクラス</xref:System.Diagnostics.PerformanceCounter>。       パフォーマンス カテゴリのインスタンスを作成するには、指定、`instanceName`上、<xref:System.Diagnostics.PerformanceCounter.%23ctor%2A>コンス トラクター</xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> 。 カテゴリのインスタンスを指定して場合`instanceName`既に存在する、新しいオブジェクトは、既存のカテゴリのインスタンスを参照します。      > [!NOTE] > Windows Vista、Windows XP Professional x64 Edition、または Windows Server 2003 でのパフォーマンス カウンターを読み取り、Performance Monitor Users グループのメンバーであるか管理者特権を持っています。   >> Windows Vista でのパフォーマンス カウンターにアクセスする特権を昇格することを回避するのには、自分でを Performance Monitor Users グループに追加します。   >> Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 組み込みの Administrators グループのメンバーの場合は、2 つのランタイム アクセス トークンが割り当てられて: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 パフォーマンス カウンターにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。      > [!NOTE] > で Windows Vista では、リモート コンピューターがワークグループのメンバーである場合、UAC を無効にして、ローカル ユーザー アカウントは、フィルター選択されていないと、管理者アカウントに昇格することができるようにする必要があります。 セキュリティ上の理由は、UAC を無効にするとは、最後の手段にする必要があります。 UAC を無効にする方法については、次を参照してください。[ユーザー アカウント制御と WMI](http://go.microsoft.com/fwlink/?LinkId=91617)です。"
  syntax:
    content: public PerformanceCounter (string categoryName, string counterName, string instanceName, string machineName);
    parameters:
    - id: categoryName
      type: System.String
      description: "このパフォーマンス カウンターが関連付けられているパフォーマンス カウンター カテゴリ (パフォーマンス オブジェクト) の名前。"
    - id: counterName
      type: System.String
      description: "パフォーマンス カウンターの名前です。"
    - id: instanceName
      type: System.String
      description: "パフォーマンス カウンターのカテゴリ インスタンスまたは空の文字列の名前 (&quot;&quot;)、カテゴリには、1 つのインスタンスが含まれている場合、します。"
    - id: machineName
      type: System.String
      description: "パフォーマンス カウンターとそれに関連付けられているカテゴリが存在するコンピューター。"
  overload: System.Diagnostics.PerformanceCounter.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>categoryName</code>空の文字列 (&quot;&quot;) です。       - または -<code>counterName</code>空の文字列 (&quot;&quot;) です。       または、読み取り/書き込みアクセス許可設定が要求されましたが、このカウンターに対して無効です。       または、カウンターが指定したコンピューター上に存在しません。       または、指定されたカテゴリが複数インスタンスとしてマークされ、パフォーマンス カウンターをインスタンス名で作成する必要があります。       - または -<code>instanceName</code>が 127 文字を超えています。       - または -<code>categoryName</code>と<code>counterName</code>異なる言語にローカライズされています。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> machineName </code>パラメーターが無効です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>categoryName</code>or <code>counterName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "管理者特権なしで実行されるコードは、パフォーマンス カウンターを読み取ろうとしました。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.BeginInit
  id: BeginInit
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: BeginInit()
  nameWithType: PerformanceCounter.BeginInit()
  fullName: System.Diagnostics.PerformanceCounter.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "初期化を開始、 <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;> </xref>インスタンスまたは別のコンポーネントをフォームで使用します。 初期化は実行時に発生します。"
  remarks: "[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントに使用されるコンポーネントの初期化を開始します。 <xref:System.Diagnostics.PerformanceCounter.EndInit%2A>メソッドが初期化を終了します</xref:System.Diagnostics.PerformanceCounter.EndInit%2A>。 BeginInit を使用して<xref:System.Diagnostics.PerformanceCounter.EndInit%2A>メソッド使用されないように、コンポーネントは完全に初期化される前にします</xref:System.Diagnostics.PerformanceCounter.EndInit%2A>。"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.CategoryName
  id: CategoryName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: CategoryName
  nameWithType: PerformanceCounter.CategoryName
  fullName: System.Diagnostics.PerformanceCounter.CategoryName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得または、このパフォーマンス カウンターのパフォーマンス カウンターのカテゴリの名前を設定します。"
  remarks: "CategoryName が表示されます、`Performance Object`パフォーマンス カウンター マネージャー MMC スナップインのフィールドでの`Add Counter` ダイアログ ボックス。       パフォーマンス カウンターは、カテゴリ、またはコンピューター上のパフォーマンス オブジェクトの動作を監視します。 カテゴリには、(プロセッサ、ディスク、およびメモリ) などの物理的なコンポーネントおよびプロセスとスレッド) などのシステム オブジェクトが含まれます。 同じパフォーマンス オブジェクトに関連付けられているシステム カウンターは、共通のフォーカスを示すカテゴリにグループ化されます。 インスタンスを作成する場合、<xref:System.Diagnostics.PerformanceCounter>クラス、まずを指定するカテゴリをコンポーネントが対話する、そのカテゴリからカウンターを選択する</xref:System.Diagnostics.PerformanceCounter>。       たとえば、1 つの Windows カウンター カテゴリは、Memory カテゴリです。 このカテゴリ内のシステム カウンターは、使用可能なバイト数とキャッシュのバイト数などのメモリ データを追跡します。 インスタンスを作成すると、アプリケーションでキャッシュされたバイト数を使用する場合は、<xref:System.Diagnostics.PerformanceCounter>コンポーネント、メモリ カテゴリへの接続し、そのカテゴリから (この場合、キャッシュされたバイト数) を適切なカウンターを選択します</xref:System.Diagnostics.PerformanceCounter>。       システム、数以上のカウンターのカテゴリで使用できる可能性がありますにやり取りする最も頻繁に、カテゴリは、キャッシュ、メモリ、オブジェクト、PhysicalDisk、プロセス、プロセッサ、サーバー、システム、およびスレッドのカテゴリ。"
  example:
  - "The following code example creates a default instance of the <xref:System.Diagnostics.PerformanceCounter> class. After the instance is created, the CategoryName, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and <xref:System.Diagnostics.PerformanceCounter.InstanceName%2A> property values are set, and the results of a call to the <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> method are displayed.  \n  \n [!code-cs[PerfCounter#1](~/add/codesnippet/csharp/p-system.diagnostics.per_6_1.cs)]\n [!code-cpp[PerfCounter#1](~/add/codesnippet/cpp/p-system.diagnostics.per_6_1.cpp)]\n [!code-vb[PerfCounter#1](~/add/codesnippet/visualbasic/p-system.diagnostics.per_6_1.vb)]"
  syntax:
    content: public string CategoryName { get; set; }
    return:
      type: System.String
      description: "このパフォーマンス カウンターが関連付けられているパフォーマンス カウンター カテゴリ (パフォーマンス オブジェクト) の名前。"
  overload: System.Diagnostics.PerformanceCounter.CategoryName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "区分は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.Close
  id: Close
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: Close()
  nameWithType: PerformanceCounter.Close()
  fullName: System.Diagnostics.PerformanceCounter.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "パフォーマンス カウンターを終了し、このパフォーマンス カウンターのインスタンスによって割り当てられたすべてのリソースを解放します。"
  remarks: "関連付けると、この<xref:System.Diagnostics.PerformanceCounter>、サーバーでは、システム上に存在するパフォーマンス カウンターのインスタンスが、インスタンスを初期化し、カウンター サンプルの情報を格納するメモリを割り当てます</xref:System.Diagnostics.PerformanceCounter>。 Close メソッドは、オブジェクトによって割り当てられたリソースを解放します。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.CloseSharedResources
  id: CloseSharedResources
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: CloseSharedResources()
  nameWithType: PerformanceCounter.CloseSharedResources()
  fullName: System.Diagnostics.PerformanceCounter.CloseSharedResources()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カウンターによって割り当てられたパフォーマンス カウンター ライブラリ共有の状態を解放します。"
  syntax:
    content: public static void CloseSharedResources ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.CloseSharedResources*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.CounterHelp
  id: CounterHelp
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: CounterHelp
  nameWithType: PerformanceCounter.CounterHelp
  fullName: System.Diagnostics.PerformanceCounter.CounterHelp
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "このパフォーマンス カウンターの説明を取得します。"
  remarks: "カウンターの追加 ダイアログ ボックスのパフォーマンス カウンター マネージャー MMC スナップインとして追加表示 CounterHelp テキスト ユーザーが、カウンターの一覧からカウンターを選択し、説明 ボタンをクリックします。       新しいカウンターを作成するときに、CounterHelp テキストを使用して、モニターは、ユーザーは、システム モニターのディスプレイにカウンターを追加するかどうかを特定できるように、どのようなカウンターについて説明します。      > [!NOTE] > 場合の値、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>プロパティは<xref:System.Diagnostics.PerformanceCounterInstanceLifetime>と .NET framework version 1.0 または 1.1 では、パフォーマンス カウンター カテゴリが作成された、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.Diagnostics.PerformanceCounterInstanceLifetime></xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>。 以前のバージョンで作成されたパフォーマンス カウンター カテゴリ<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A><xref:System.Diagnostics.PerformanceCounterInstanceLifetime>。</xref:System.Diagnostics.PerformanceCounterInstanceLifetime>をする必要があります</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>のグローバル共有メモリ、および値を使用します。 1.0 または 1.1、.NET Framework のバージョンで実行されるアプリケーション カテゴリを使用しない場合は、削除し、カテゴリを再作成します。      > [!NOTE] > Windows Vista、Windows XP Professional x64 Edition、または Windows Server 2003 でのパフォーマンス カウンターを読み取り、Performance Monitor Users グループのメンバーであるか管理者特権を持っています。   >> Windows Vista でのパフォーマンス カウンターにアクセスする特権を昇格することを回避するのには、自分でを Performance Monitor Users グループに追加します。   >> Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 組み込みの Administrators グループのメンバーの場合は、2 つのランタイム アクセス トークンが割り当てられて: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 パフォーマンス カウンターにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。"
  syntax:
    content: public string CounterHelp { get; }
    return:
      type: System.String
      description: "項目またはこのパフォーマンス カウンターを測定する数量の説明です。"
  overload: System.Diagnostics.PerformanceCounter.CounterHelp*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Diagnostics.PerformanceCounter&quot;> </xref>インスタンスに関連付けられていないパフォーマンス カウンター。       - または -、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>プロパティに設定されている<xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref>共有メモリがグローバルを使用する場合</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "管理者特権なしで実行されるコードは、パフォーマンス カウンターを読み取ろうとしました。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.CounterName
  id: CounterName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: CounterName
  nameWithType: PerformanceCounter.CounterName
  fullName: System.Diagnostics.PerformanceCounter.CounterName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "これに関連付けられているパフォーマンス カウンターの名前を取得または<xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref>インスタンス。"
  remarks: "使用可能な既存のカウンターの一覧を取得すると、Windows パフォーマンス マネージャーからの[カウンターの追加 ダイアログ ボックス](http://go.microsoft.com/fwlink/p/?LinkId=257854)です。"
  example:
  - "The following code example shows how to set the CounterName property to a typical counter name.  \n  \n [!code-cs[PerfCounter#1](~/add/codesnippet/csharp/p-system.diagnostics.per_4_1.cs)]\n [!code-cpp[PerfCounter#1](~/add/codesnippet/cpp/p-system.diagnostics.per_4_1.cpp)]\n [!code-vb[PerfCounter#1](~/add/codesnippet/visualbasic/p-system.diagnostics.per_4_1.vb)]"
  syntax:
    content: public string CounterName { get; set; }
    return:
      type: System.String
      description: "カウントする量を大まかに説明すると、カウンターの名前。 この名前が表示されるパフォーマンス カウンター マネージャー MMC のカウンターの一覧で、スナップインの [カウンターの追加] ダイアログ ボックス。"
  overload: System.Diagnostics.PerformanceCounter.CounterName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "CounterName が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.CounterType
  id: CounterType
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: CounterType
  nameWithType: PerformanceCounter.CounterType
  fullName: System.Diagnostics.PerformanceCounter.CounterType
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "関連するパフォーマンス カウンターのカウンターの種類を取得します。"
  remarks: "<xref:System.Diagnostics.PerformanceCounterType>列挙型にはと対話できるパフォーマンス カウンターの種類が含まれています</xref:System.Diagnostics.PerformanceCounterType>。 一部のカウンターの種類は、システムが以降に測定されたカウンターの平均値などの計算値を表します。 その他の種類は、raw、または計算されない値を表します。 次の表は、最も頻繁にやり取りするカウンターの種類を示します。      |カウンターの責任 |PerformanceCounterType 値 |例 |  |------------------------------|----------------------------------|-------------|  |アイテムまたは処理の単純なカウントを保持します |。`NumberOfItems32`|32 ビット整数として受信した注文の数を追跡します |。  |容量の大きい単純なカウントを維持します |。`NumberOfItems64`|サイトでは、大量の注文の数を追跡するには、64 ビット整数値として格納されている |。  |項目または 1 秒あたりの操作の数を追跡します |。`RateOfCountsPerSecond32`|サイトで 1 秒あたりに受信した注文を追跡します |。  |項目または 1 秒あたりの操作の容量の大きい数を追跡します |。`RateOfCountsPerSecond64`|非常に高いボリュームを持つサイトで 1 秒あたりに受信した注文を追跡します |。  |プロセスを実行するか、項目を処理する平均時間を計算 |`AverageTimer32`|注文の処理にかかる平均時間を計算します |。      対応するベース カウンターの使用は、型のカウンターを作成するときに、カウンターとでベースを宣言する必要があります、<xref:System.Diagnostics.CounterCreationDataCollection>に渡す、<xref:System.Diagnostics.PerformanceCounterCategory.Create%2A?displayProperty=fullName>メソッド</xref:System.Diagnostics.PerformanceCounterCategory.Create%2A?displayProperty=fullName></xref:System.Diagnostics.CounterCreationDataCollection>。      > [!NOTE] > 場合の値、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>プロパティは<xref:System.Diagnostics.PerformanceCounterInstanceLifetime>と .NET framework version 1.0 または 1.1 では、パフォーマンス カウンター カテゴリが作成された、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.Diagnostics.PerformanceCounterInstanceLifetime></xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>。 以前のバージョンで作成されたパフォーマンス カウンター カテゴリ<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A><xref:System.Diagnostics.PerformanceCounterInstanceLifetime>。</xref:System.Diagnostics.PerformanceCounterInstanceLifetime>をする必要があります</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>のグローバル共有メモリ、および値を使用します。 1.0 または 1.1、.NET Framework のバージョンで実行されるアプリケーション カテゴリを使用しない場合は、削除し、カテゴリを再作成します。      > [!NOTE] > Windows Vista、Windows XP Professional x64 Edition、または Windows Server 2003 でのパフォーマンス カウンターを読み取り、Performance Monitor Users グループのメンバーであるか管理者特権を持っています。   >> Windows Vista でのパフォーマンス カウンターにアクセスする特権を昇格することを回避するのには、自分でを Performance Monitor Users グループに追加します。   >> Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 組み込みの Administrators グループのメンバーの場合は、2 つのランタイム アクセス トークンが割り当てられて: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 パフォーマンス カウンターにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。"
  syntax:
    content: public System.Diagnostics.PerformanceCounterType CounterType { get; }
    return:
      type: System.Diagnostics.PerformanceCounterType
      description: "A <xref href=&quot;System.Diagnostics.PerformanceCounterType&quot;> </xref>両方を説明するカウンターが監視のアプリケーションとが含まれている値の性質とやり取りする方法 (たとえば、計算された、または計算されない)。"
  overload: System.Diagnostics.PerformanceCounter.CounterType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "インスタンスは、パフォーマンス カウンターを正しく関連付けではありません。       - または -、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>プロパティに設定されている<xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref>共有メモリがグローバルを使用する場合</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "管理者特権なしで実行されるコードは、パフォーマンス カウンターを読み取ろうとしました。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.Decrement
  id: Decrement
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: Decrement()
  nameWithType: PerformanceCounter.Decrement()
  fullName: System.Diagnostics.PerformanceCounter.Decrement()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "デクリメント効率的なアトミック操作によっていずれかで関連付けられたパフォーマンス カウンター。"
  remarks: "カスタム カウンターにのみ作成できます。 すべてのシステム カウンターとは、読み取り専用です。      > [!NOTE] >、 <xref:System.Diagnostics.PerformanceCounter.Increment%2A>、 <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>、デクリメントの方法では、インタロックを使用して、このカウンターの値を更新するとします</xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A></xref:System.Diagnostics.PerformanceCounter.Increment%2A>。 これにより、マルチ スレッドまたはマルチ プロセスのシナリオも、パフォーマンスの低下の結果で、カウンターの値を正確に維持できます。 インタロック精度を必要としない場合の操作を提供、更新することができます、 <xref:System.Diagnostics.PerformanceCounter.RawValue%2A>、5 台までのプロパティを直接倍パフォーマンスが向上します</xref:System.Diagnostics.PerformanceCounter.RawValue%2A>。  ただし、マルチ スレッドのシナリオで、カウンターの値を一部の更新プログラムがあります無視されます、不正確なデータの結果として得られます。      > [!NOTE] > 場合の値、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>プロパティは<xref:System.Diagnostics.PerformanceCounterInstanceLifetime>と .NET framework version 1.0 または 1.1 では、パフォーマンス カウンター カテゴリが作成された、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.Diagnostics.PerformanceCounterInstanceLifetime></xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>。 以前のバージョンで作成されたパフォーマンス カウンター カテゴリ<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A><xref:System.Diagnostics.PerformanceCounterInstanceLifetime>。</xref:System.Diagnostics.PerformanceCounterInstanceLifetime>をする必要があります</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>のグローバル共有メモリ、および値を使用します。 1.0 または 1.1、.NET Framework のバージョンで実行されるアプリケーション カテゴリを使用しない場合は、削除し、カテゴリを再作成します。"
  syntax:
    content: public long Decrement ();
    parameters: []
    return:
      type: System.Int64
      description: "減らされたカウンター値。"
  overload: System.Diagnostics.PerformanceCounter.Decrement*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "カウンターは、アプリケーションが下げることはできませんのでは読み取り専用です。       または、インスタンスがパフォーマンス カウンターに正しく関連付けられていません。       - または -、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>プロパティに設定されている<xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref>共有メモリがグローバルを使用する場合</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  id: DefaultFileMappingSize
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: DefaultFileMappingSize
  nameWithType: PerformanceCounter.DefaultFileMappingSize
  fullName: System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  type: Field
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "パフォーマンス カウンターが共有するグローバル メモリのバイト単位のサイズを指定します。 既定のサイズは 524, 288 バイトです。"
  syntax:
    content: public static int DefaultFileMappingSize;
    return:
      type: System.Int32
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: PerformanceCounter.Dispose(Boolean)
  fullName: System.Diagnostics.PerformanceCounter.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.Diagnostics.PerformanceCounter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.EndInit
  id: EndInit
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: EndInit()
  nameWithType: PerformanceCounter.EndInit()
  fullName: System.Diagnostics.PerformanceCounter.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "初期化を終了、 <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;> </xref>フォームまたは別のコンポーネントに使用されるインスタンスです。 初期化は実行時に発生します。"
  remarks: "[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントに使用されるコンポーネントの初期化を終了します。 <xref:System.Diagnostics.PerformanceCounter.BeginInit%2A>メソッドは、初期化を開始します</xref:System.Diagnostics.PerformanceCounter.BeginInit%2A>。 使用して、 <xref:System.Diagnostics.PerformanceCounter.BeginInit%2A>EndInit メソッド使用されないように、コンポーネントは完全に初期化される前に、</xref:System.Diagnostics.PerformanceCounter.BeginInit%2A> 。"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.Increment
  id: Increment
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: Increment()
  nameWithType: PerformanceCounter.Increment()
  fullName: System.Diagnostics.PerformanceCounter.Increment()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "効率的なアトミックの操作を使用して、関連するパフォーマンス カウンターをインクリメントします。"
  remarks: "カスタム カウンターにのみ作成できます。 すべてのシステム カウンターとは、読み取り専用です。      > [!NOTE] >、インクリメント、 <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>、および<xref:System.Diagnostics.PerformanceCounter.Decrement%2A>メソッドでは、インタロックを使用して、カウンターの値を更新します</xref:System.Diagnostics.PerformanceCounter.Decrement%2A></xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>。 これにより、マルチ スレッドまたはマルチ プロセスのシナリオも、パフォーマンスの低下の結果で、カウンターの値を正確に維持できます。 インタロック精度を必要としない場合の操作を提供、更新することができます、 <xref:System.Diagnostics.PerformanceCounter.RawValue%2A>、5 台までのプロパティを直接倍パフォーマンスが向上します</xref:System.Diagnostics.PerformanceCounter.RawValue%2A>。  ただし、マルチ スレッドのシナリオで、カウンターの値を一部の更新プログラムがあります無視されます、不正確なデータの結果として得られます。      > [!NOTE] > 場合の値、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>プロパティは<xref:System.Diagnostics.PerformanceCounterInstanceLifetime>と .NET framework version 1.0 または 1.1 では、パフォーマンス カウンター カテゴリが作成された、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.Diagnostics.PerformanceCounterInstanceLifetime></xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>。 以前のバージョンで作成されたパフォーマンス カウンター カテゴリ<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A><xref:System.Diagnostics.PerformanceCounterInstanceLifetime>。</xref:System.Diagnostics.PerformanceCounterInstanceLifetime>をする必要があります</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>のグローバル共有メモリ、および値を使用します。 1.0 または 1.1、.NET Framework のバージョンで実行されるアプリケーション カテゴリを使用しない場合は、削除し、カテゴリを再作成します。"
  syntax:
    content: public long Increment ();
    parameters: []
    return:
      type: System.Int64
      description: "増やされたカウンター値。"
  overload: System.Diagnostics.PerformanceCounter.Increment*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このカウンターは読み取り専用アプリケーションが増分できません。       または、インスタンスがパフォーマンス カウンターに正しく関連付けられていません。       - または -、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>プロパティに設定されている<xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref>共有メモリがグローバルを使用する場合</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)
  id: IncrementBy(System.Int64)
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: IncrementBy(Int64)
  nameWithType: PerformanceCounter.IncrementBy(Int64)
  fullName: System.Diagnostics.PerformanceCounter.IncrementBy(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "ずつインクリメントまたはデクリメント効率的なアトミック操作によって、指定した量によって、関連するパフォーマンス カウンターの値。"
  remarks: "カスタム カウンターにのみ作成できます。 すべてのシステム カウンターとは、読み取り専用です。      > [!NOTE] >、 <xref:System.Diagnostics.PerformanceCounter.Increment%2A>、IncrementBy、および<xref:System.Diagnostics.PerformanceCounter.Decrement%2A>メソッドでは、インタロックを使用して、カウンターの値を更新します</xref:System.Diagnostics.PerformanceCounter.Decrement%2A></xref:System.Diagnostics.PerformanceCounter.Increment%2A>。 これにより、マルチ スレッドまたはマルチ プロセスのシナリオも、パフォーマンスの低下の結果で、カウンターの値を正確に維持できます。 インタロック精度を必要としない場合の操作を提供、更新することができます、 <xref:System.Diagnostics.PerformanceCounter.RawValue%2A>、5 台までのプロパティを直接倍パフォーマンスが向上します</xref:System.Diagnostics.PerformanceCounter.RawValue%2A>。  ただし、マルチ スレッドのシナリオで、カウンターの値を一部の更新プログラムがあります無視されます、不正確なデータの結果として得られます。      > [!NOTE] > 場合の値、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>プロパティは<xref:System.Diagnostics.PerformanceCounterInstanceLifetime>と .NET framework version 1.0 または 1.1 では、パフォーマンス カウンター カテゴリが作成された、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.Diagnostics.PerformanceCounterInstanceLifetime></xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>。 以前のバージョンで作成されたパフォーマンス カウンター カテゴリ<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A><xref:System.Diagnostics.PerformanceCounterInstanceLifetime>。</xref:System.Diagnostics.PerformanceCounterInstanceLifetime>をする必要があります</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>のグローバル共有メモリ、および値を使用します。 1.0 または 1.1、.NET Framework のバージョンで実行されるアプリケーション カテゴリを使用しない場合は、削除し、カテゴリを再作成します。"
  example:
  - "The following code example demonstrates how to use the IncrementBy method to add increments to a counter. This code example is part of a larger example for the <xref:System.Diagnostics.PerformanceCounter> class.  \n  \n [!code-cpp[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/cpp/m-system.diagnostics.per_2_1.cpp)]\n [!code-cs[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/csharp/m-system.diagnostics.per_2_1.cs)]\n [!code-vb[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/visualbasic/m-system.diagnostics.per_2_1.vb)]"
  syntax:
    content: public long IncrementBy (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "インクリメントする値。 負の値をデクリメント カウンターです。)"
    return:
      type: System.Int64
      description: "新しいカウンター値。"
  overload: System.Diagnostics.PerformanceCounter.IncrementBy*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このカウンターは読み取り専用アプリケーションが増分できません。       または、インスタンスがパフォーマンス カウンターに正しく関連付けられていません。       - または -、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>プロパティに設定されている<xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref>共有メモリがグローバルを使用する場合</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.InstanceLifetime
  id: InstanceLifetime
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: InstanceLifetime
  nameWithType: PerformanceCounter.InstanceLifetime
  fullName: System.Diagnostics.PerformanceCounter.InstanceLifetime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得またはプロセスの有効期間を設定します。"
  remarks: "グローバル共有メモリを使用してパフォーマンス カウンターのカテゴリの作成時は、.NET Framework version 1.0 または 1.1 の場合と、InstanceLifetime の値が<xref:System.Diagnostics.PerformanceCounterInstanceLifetime>。</xref:System.Diagnostics.PerformanceCounterInstanceLifetime>をする必要があります。 1.0 または 1.1、.NET Framework のバージョンで実行されるアプリケーション カテゴリを使用しない場合は、削除し、カテゴリを再作成します。      > [!NOTE] > 場合、<xref:System.Diagnostics.PerformanceCounter.CounterType%2A>プロパティは<xref:System.Diagnostics.PerformanceCounterCategoryType>パフォーマンス カウンターの InstanceLifetime 値<xref:System.Diagnostics.PerformanceCounterInstanceLifetime>.</xref:System.Diagnostics.PerformanceCounterInstanceLifetime>をする必要があります</xref:System.Diagnostics.PerformanceCounterCategoryType></xref:System.Diagnostics.PerformanceCounter.CounterType%2A>の値"
  syntax:
    content: public System.Diagnostics.PerformanceCounterInstanceLifetime InstanceLifetime { get; set; }
    return:
      type: System.Diagnostics.PerformanceCounterInstanceLifetime
      description: "1 つ、 <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;> </xref>値。 既定値は<xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref>です。"
  overload: System.Diagnostics.PerformanceCounter.InstanceLifetime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定されている値がのメンバーではない、 <xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;> </xref>列挙します。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "InstanceLifetime が後に設定されている、 <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;> </xref>は初期化されています。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.InstanceName
  id: InstanceName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: InstanceName
  nameWithType: PerformanceCounter.InstanceName
  fullName: System.Diagnostics.PerformanceCounter.InstanceName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得または、このパフォーマンス カウンターのインスタンス名を設定します。"
  remarks: "> [!NOTE]\n>  Instance names must be shorter than 128 characters in length.  \n  \n In some situations, categories are subdivided into instances, which track data about multiple occurrences of the object that a category relates to. Instances apply to the category as whole, rather than to individual counters. Every counter within a category has each instance defined for the category. For example, the Process category contains instances named Idle and System. Every counter within the Process category thus contains data for each instance, showing information about either idle processes or system processes.  \n  \n Many categories do not contain multiple instances, so you can leave this property empty to indicate that no instance is associated with the category.  \n  \n If this <xref:System.Diagnostics.PerformanceCounter> instance points to a noncustom category, you can choose from only the existing category instances. You can create new category instances only in custom categories, which allow you to define as many counters and category instances as you need.  \n  \n To create a performance category instance, specify an `instanceName` on the <xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> constructor. If the category instance specified by `instanceName` already exists the new object will reference the existing category instance.  \n  \n> [!NOTE]\n>  Do not use the characters \"(\", \")\", \"#\", \"\\\\\", or \"/\" in the instance name. If any of these characters are used, the Performance Console (see [Runtime Profiling](~/add/includes/ajax-current-ext-md.md)) may not correctly display the instance values.  \n  \n If the instance name is automatically generated and might contain the characters \"(\", \")\", \"#\", \"\\\\\", or \"/\", use the character mapping in the following table.  \n  \n|Character|Mapped character|  \n|---------------|----------------------|  \n|(|[|  \n|)|]|  \n|#|_|  \n|\\|_|  \n|/|_|  \n  \n The <xref:System.AppDomain.FriendlyName%2A> property of the <xref:System.AppDomain> object obtained from the <xref:System.AppDomain.CurrentDomain%2A?displayProperty=fullName> property is a common source of instance names that can contain invalid characters."
  example:
  - "The following code example creates a default instance of the <xref:System.Diagnostics.PerformanceCounter> class. After the instance is created, the <xref:System.Diagnostics.PerformanceCounter.CategoryName%2A>, <xref:System.Diagnostics.PerformanceCounter.CounterName%2A>, and InstanceName property values are set, and the results of a call to the <xref:System.Diagnostics.PerformanceCounter.NextValue%2A> method are displayed.  \n  \n [!code-cs[PerfCounter#1](~/add/codesnippet/csharp/p-system.diagnostics.per_0_1.cs)]\n [!code-cpp[PerfCounter#1](~/add/codesnippet/cpp/p-system.diagnostics.per_0_1.cpp)]\n [!code-vb[PerfCounter#1](~/add/codesnippet/visualbasic/p-system.diagnostics.per_0_1.vb)]"
  syntax:
    content: public string InstanceName { get; set; }
    return:
      type: System.String
      description: "パフォーマンス カウンターのカテゴリ インスタンスまたは空の文字列の名前 (&quot;&quot;)、カウンターが単一インスタンスのカウンターである場合、します。"
  overload: System.Diagnostics.PerformanceCounter.InstanceName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.MachineName
  id: MachineName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: MachineName
  nameWithType: PerformanceCounter.MachineName
  fullName: System.Diagnostics.PerformanceCounter.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "このパフォーマンス カウンターのコンピューター名取得または設定"
  remarks: "ローカル コンピューター上に存在するためのカウンターに対してのみ値を書き込むことができます。 ただし、アクセス特権があるエンタープライズ内のコンピューターとカウンターの値を読み取ることができます。       リモート コンピューター をポイントする、MachineName プロパティを設定すると、<xref:System.Diagnostics.PerformanceCounter>インスタンスがそのコンピューターのカウンターを開こうとします</xref:System.Diagnostics.PerformanceCounter>。 カウンターが存在しない場合は、例外をスローこのプロパティを設定します。"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "パフォーマンス カウンターとそれに関連付けられているカテゴリが存在するサーバーです。"
  overload: System.Diagnostics.PerformanceCounter.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "コンピューター名の形式が正しくありません。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.NextSample
  id: NextSample
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: NextSample()
  nameWithType: PerformanceCounter.NextSample()
  fullName: System.Diagnostics.PerformanceCounter.NextSample()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カウンターのサンプルを取得し、raw、または計算されない値を返します。"
  remarks: "このメソッドは通常、計算されない値が含まれているカウンターを使用します。      > [!NOTE] > 場合の値、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>プロパティは<xref:System.Diagnostics.PerformanceCounterInstanceLifetime>と .NET framework version 1.0 または 1.1 では、パフォーマンス カウンター カテゴリが作成された、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.Diagnostics.PerformanceCounterInstanceLifetime></xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>。 以前のバージョンで作成されたパフォーマンス カウンター カテゴリ<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A><xref:System.Diagnostics.PerformanceCounterInstanceLifetime>。</xref:System.Diagnostics.PerformanceCounterInstanceLifetime>をする必要があります</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>のグローバル共有メモリ、および値を使用します。 1.0 または 1.1、.NET Framework のバージョンで実行されるアプリケーション カテゴリを使用しない場合は、削除し、カテゴリを再作成します。      > [!NOTE] > Windows Vista、Windows XP Professional x64 Edition、または Windows Server 2003 でのパフォーマンス カウンターを読み取り、Performance Monitor Users グループのメンバーであるか管理者特権を持っています。   >> Windows Vista でのパフォーマンス カウンターにアクセスする特権を昇格することを回避するのには、自分でを Performance Monitor Users グループに追加します。   >> Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 組み込みの Administrators グループのメンバーの場合は、2 つのランタイム アクセス トークンが割り当てられて: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 パフォーマンス カウンターにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。"
  example:
  - "The following code example demonstrates how to use the NextSample method to obtain the next uncalculated value of a counter. This code example is part of a larger example for the <xref:System.Diagnostics.PerformanceCounter> class.  \n  \n [!code-cpp[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/cpp/m-system.diagnostics.per_13_1.cpp)]\n [!code-cs[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/csharp/m-system.diagnostics.per_13_1.cs)]\n [!code-vb[PerformanceCounterType.AverageCounter64#3](~/add/codesnippet/visualbasic/m-system.diagnostics.per_13_1.vb)]"
  syntax:
    content: public System.Diagnostics.CounterSample NextSample ();
    parameters: []
    return:
      type: System.Diagnostics.CounterSample
      description: "A <xref href=&quot;System.Diagnostics.CounterSample&quot;> </xref>システムがこのカウンターを取得する次の生の値を表すです。"
  overload: System.Diagnostics.PerformanceCounter.NextSample*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "インスタンスは、パフォーマンス カウンターを正しく関連付けではありません。       - または -、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>プロパティに設定されている<xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref>共有メモリがグローバルを使用する場合</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "管理者特権なしで実行されるコードは、パフォーマンス カウンターを読み取ろうとしました。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.NextValue
  id: NextValue
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: NextValue()
  nameWithType: PerformanceCounter.NextValue()
  fullName: System.Diagnostics.PerformanceCounter.NextValue()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カウンター サンプルを取得し、計算される値を返します。"
  remarks: "> [!NOTE]> カウンターの計算値が 2 つのカウンターの読み取りに依存している場合、最初の読み取り操作には、0.0 が返されます。 パフォーマンス カウンターのさまざまなカウンターを指定するプロパティをリセットするは、新しいパフォーマンス カウンターの作成に相当し、新しいプロパティを使用して最初の読み取り操作には、0.0 が返されます。 NextValue メソッドの呼び出しを間の推奨される遅延時間は、次の増分読み込みを実行するカウンターを許可する、1 秒間です。      > [!NOTE] > パフォーマンス カウンターを読み取り、管理特権が必要です。 Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 組み込みの Administrators グループのメンバーの場合は、2 つのランタイム アクセス トークンが割り当てられて: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 パフォーマンス カウンターにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。"
  example:
  - "The following code example creates an <xref:System.Diagnostics.PerformanceCounterType> counter and uses the NextValue method to display the counter's values over a time period.  \n  \n [!code-cs[PerformanceCounterType.ElapsedTime#2](~/add/codesnippet/csharp/m-system.diagnostics.per_12_1.cs)]\n [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/add/codesnippet/cpp/m-system.diagnostics.per_12_1.cpp)]\n [!code-vb[PerformanceCounterType.ElapsedTime#2](~/add/codesnippet/visualbasic/m-system.diagnostics.per_12_1.vb)]"
  syntax:
    content: public float NextValue ();
    parameters: []
    return:
      type: System.Single
      description: "このカウンターのシステムを取得する次の計算される値。"
  overload: System.Diagnostics.PerformanceCounter.NextValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "インスタンスは、パフォーマンス カウンターを正しく関連付けではありません。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "管理者特権なしで実行されるコードは、パフォーマンス カウンターを読み取ろうとしました。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.RawValue
  id: RawValue
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: RawValue
  nameWithType: PerformanceCounter.RawValue
  fullName: System.Diagnostics.PerformanceCounter.RawValue
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得または、このカウンターの生のまたは計算されない値を設定します。"
  remarks: "カウンター タイプは 32 ビットのサイズが大きすぎる値にこのプロパティを設定しようとする場合は、プロパティには、32 ビット値が切り捨てられます。 ローカル コンピューター上のカスタムのカウンターを読み取るときに、RawValue を使用して計算値ではなく、プロパティを生成できます生の値が十分であるシナリオのパフォーマンスが著しく向上。       お読みになっているカウンターが読み取り専用の場合は、プロパティが呼び出される時に、カウンターをサンプリングする RawValue プロパティを取得します。 このは、最初の呼び出しを行う場合と同じ、<xref:System.Diagnostics.PerformanceCounter.NextSample%2A>メソッド</xref:System.Diagnostics.PerformanceCounter.NextSample%2A>。 後で呼び出す場合は、 <xref:System.Diagnostics.PerformanceCounter.NextSample%2A>、両方の呼び出しが返される値に対して計算を実行することができます</xref:System.Diagnostics.PerformanceCounter.NextSample%2A>。       システム カウンターは読み取り専用であるためには、取得が、その生の値を設定できません。      > [!NOTE] >、 <xref:System.Diagnostics.PerformanceCounter.Increment%2A>、 <xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A>、および<xref:System.Diagnostics.PerformanceCounter.Decrement%2A>メソッドでは、インタロックを使用して、カウンターの値を更新します</xref:System.Diagnostics.PerformanceCounter.Decrement%2A></xref:System.Diagnostics.PerformanceCounter.IncrementBy%2A></xref:System.Diagnostics.PerformanceCounter.Increment%2A>。 これにより、マルチ スレッドまたはマルチ プロセスのシナリオも、パフォーマンスの低下の結果で、カウンターの値を正確に維持できます。 インタロック精度を必要としない場合の操作を提供、5 までのために直接 RawValue プロパティを更新することができます倍パフォーマンスが向上します。  ただし、マルチ スレッドのシナリオで、カウンターの値を一部の更新プログラムがあります無視されます、不正確なデータの結果として得られます。      > [!NOTE] > 場合の値、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>プロパティは<xref:System.Diagnostics.PerformanceCounterInstanceLifetime>と .NET framework version 1.0 または 1.1 では、パフォーマンス カウンター カテゴリが作成された、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.Diagnostics.PerformanceCounterInstanceLifetime></xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>。 以前のバージョンで作成されたパフォーマンス カウンター カテゴリ<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A><xref:System.Diagnostics.PerformanceCounterInstanceLifetime>。</xref:System.Diagnostics.PerformanceCounterInstanceLifetime>をする必要があります</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>のグローバル共有メモリ、および値を使用します。 1.0 または 1.1、.NET Framework のバージョンで実行されるアプリケーション カテゴリを使用しない場合は、削除し、カテゴリを再作成します。      > [!NOTE] > Windows Vista、Windows XP Professional x64 Edition、または Windows Server 2003 でのパフォーマンス カウンターを読み取り、Performance Monitor Users グループのメンバーであるか管理者特権を持っています。   >> Windows Vista でのパフォーマンス カウンターにアクセスする特権を昇格することを回避するのには、自分でを Performance Monitor Users グループに追加します。   >> Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 組み込みの Administrators グループのメンバーの場合は、2 つのランタイム アクセス トークンが割り当てられて: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 パフォーマンス カウンターにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。"
  example:
  - "The following example uses the <xref:System.Diagnostics.CounterSample> class to display the value of the RawValue property for a counter.  \n  \n [!code-cpp[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/cpp/p-system.diagnostics.per_2_1.cpp)]\n [!code-cs[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/csharp/p-system.diagnostics.per_2_1.cs)]\n [!code-vb[PerformanceCounterType.AverageCounter64#1](~/add/codesnippet/visualbasic/p-system.diagnostics.per_2_1.vb)]"
  syntax:
    content: public long RawValue { get; set; }
    return:
      type: System.Int64
      description: "カウンターの生の値。"
  overload: System.Diagnostics.PerformanceCounter.RawValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "カウンターの生の値を設定しようとして、カウンターが読み取り専用です。       または、インスタンスがパフォーマンス カウンターに正しく関連付けられていません。       - または -、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>プロパティに設定されている<xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref>共有メモリがグローバルを使用する場合</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "管理者特権なしで実行されるコードは、パフォーマンス カウンターを読み取ろうとしました。"
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.ReadOnly
  id: ReadOnly
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: ReadOnly
  nameWithType: PerformanceCounter.ReadOnly
  fullName: System.Diagnostics.PerformanceCounter.ReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得または設定を示す値かどうかこの<xref href=&quot;System.Diagnostics.PerformanceCounter&quot;></xref>インスタンスが読み取り専用モードでします。"
  remarks: "読み取り専用を常にはシステム カウンターの`true`します。 システム カウンターに記述することはできません。"
  syntax:
    content: public bool ReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>、場合、 <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;> </xref>インスタンスが読み取り専用モードで (自体カウンターは、カスタム .NET フレームワーク カウンター場合でも)。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>が読み取り/書き込みモードにある場合。 既定では、コンス トラクターによって設定された値です。"
  overload: System.Diagnostics.PerformanceCounter.ReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.PerformanceCounter.RemoveInstance
  id: RemoveInstance
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  name: RemoveInstance()
  nameWithType: PerformanceCounter.RemoveInstance()
  fullName: System.Diagnostics.PerformanceCounter.RemoveInstance()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "指定されたカテゴリ インスタンスを削除、 <xref href=&quot;System.Diagnostics.PerformanceCounter&quot;> </xref>オブジェクト<xref:System.Diagnostics.PerformanceCounter.InstanceName*>プロパティ</xref:System.Diagnostics.PerformanceCounter.InstanceName*>。"
  remarks: "カスタムのカウンターに対してのみインスタンスを削除することができます。 すべてのシステム カウンターは、例外をスローうちの&1; つを削除しようとしたためは読み取り専用です。      > [!NOTE] > 競合状態を避けるためには、パフォーマンス カウンターの共有メモリが解放されるときに、お勧め RemoveInstance メソッドから呼び出すこと、<xref:System.AppDomain.DomainUnload>イベント ハンドラー</xref:System.AppDomain.DomainUnload> 。       パフォーマンス カテゴリのインスタンスを作成するには、指定、`instanceName`上、<xref:System.Diagnostics.PerformanceCounter.%23ctor%2A>コンス トラクター</xref:System.Diagnostics.PerformanceCounter.%23ctor%2A> 。 カテゴリのインスタンスを指定して場合`instanceName`既に存在する、新しいオブジェクトは、既存のカテゴリのインスタンスを参照します。      > [!NOTE] > 場合の値、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>プロパティは<xref:System.Diagnostics.PerformanceCounterInstanceLifetime>と .NET framework version 1.0 または 1.1 では、パフォーマンス カウンター カテゴリが作成された、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.Diagnostics.PerformanceCounterInstanceLifetime></xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>。 以前のバージョンで作成されたパフォーマンス カウンター カテゴリ<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A><xref:System.Diagnostics.PerformanceCounterInstanceLifetime>。</xref:System.Diagnostics.PerformanceCounterInstanceLifetime>をする必要があります</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime%2A>のグローバル共有メモリ、および値を使用します。 1.0 または 1.1、.NET Framework のバージョンで実行されるアプリケーション カテゴリを使用しない場合は、削除し、カテゴリを再作成します。"
  syntax:
    content: public void RemoveInstance ();
    parameters: []
  overload: System.Diagnostics.PerformanceCounter.RemoveInstance*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このカウンターは、カテゴリに関連付けられている任意のインスタンスを削除することはできませんのでは読み取り専用です。       または、インスタンスがパフォーマンス カウンターに正しく関連付けられていません。       - または -、<xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>プロパティに設定されている<xref href=&quot;System.Diagnostics.PerformanceCounterInstanceLifetime&quot;></xref>共有メモリがグローバルを使用する場合</xref:System.Diagnostics.PerformanceCounter.InstanceLifetime*>。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "プラットフォームが Windows 98 または Windows me、パフォーマンス カウンターをサポートしていません。"
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Diagnostics.PerformanceCounter.#ctor
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter()
  nameWithType: PerformanceCounter.PerformanceCounter()
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter()
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter(String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter(String,String,Boolean)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,Boolean)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter(String,String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String)
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter(String,String,String,Boolean)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String,Boolean)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String,Boolean)
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter(String,String,String,String)
  nameWithType: PerformanceCounter.PerformanceCounter(String,String,String,String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(String,String,String,String)
- uid: System.Diagnostics.PerformanceCounter.BeginInit
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: BeginInit()
  nameWithType: PerformanceCounter.BeginInit()
  fullName: System.Diagnostics.PerformanceCounter.BeginInit()
- uid: System.Diagnostics.PerformanceCounter.CategoryName
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CategoryName
  nameWithType: PerformanceCounter.CategoryName
  fullName: System.Diagnostics.PerformanceCounter.CategoryName
- uid: System.Diagnostics.PerformanceCounter.Close
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Close()
  nameWithType: PerformanceCounter.Close()
  fullName: System.Diagnostics.PerformanceCounter.Close()
- uid: System.Diagnostics.PerformanceCounter.CloseSharedResources
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CloseSharedResources()
  nameWithType: PerformanceCounter.CloseSharedResources()
  fullName: System.Diagnostics.PerformanceCounter.CloseSharedResources()
- uid: System.Diagnostics.PerformanceCounter.CounterHelp
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterHelp
  nameWithType: PerformanceCounter.CounterHelp
  fullName: System.Diagnostics.PerformanceCounter.CounterHelp
- uid: System.Diagnostics.PerformanceCounter.CounterName
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterName
  nameWithType: PerformanceCounter.CounterName
  fullName: System.Diagnostics.PerformanceCounter.CounterName
- uid: System.Diagnostics.PerformanceCounter.CounterType
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterType
  nameWithType: PerformanceCounter.CounterType
  fullName: System.Diagnostics.PerformanceCounter.CounterType
- uid: System.Diagnostics.PerformanceCounterType
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounterType
  nameWithType: PerformanceCounterType
  fullName: System.Diagnostics.PerformanceCounterType
- uid: System.Diagnostics.PerformanceCounter.Decrement
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Decrement()
  nameWithType: PerformanceCounter.Decrement()
  fullName: System.Diagnostics.PerformanceCounter.Decrement()
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: DefaultFileMappingSize
  nameWithType: PerformanceCounter.DefaultFileMappingSize
  fullName: System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.PerformanceCounter.Dispose(System.Boolean)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: PerformanceCounter.Dispose(Boolean)
  fullName: System.Diagnostics.PerformanceCounter.Dispose(Boolean)
- uid: System.Diagnostics.PerformanceCounter.EndInit
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: EndInit()
  nameWithType: PerformanceCounter.EndInit()
  fullName: System.Diagnostics.PerformanceCounter.EndInit()
- uid: System.Diagnostics.PerformanceCounter.Increment
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Increment()
  nameWithType: PerformanceCounter.Increment()
  fullName: System.Diagnostics.PerformanceCounter.Increment()
- uid: System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: IncrementBy(Int64)
  nameWithType: PerformanceCounter.IncrementBy(Int64)
  fullName: System.Diagnostics.PerformanceCounter.IncrementBy(Int64)
- uid: System.Diagnostics.PerformanceCounter.InstanceLifetime
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: InstanceLifetime
  nameWithType: PerformanceCounter.InstanceLifetime
  fullName: System.Diagnostics.PerformanceCounter.InstanceLifetime
- uid: System.Diagnostics.PerformanceCounterInstanceLifetime
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounterInstanceLifetime
  nameWithType: PerformanceCounterInstanceLifetime
  fullName: System.Diagnostics.PerformanceCounterInstanceLifetime
- uid: System.Diagnostics.PerformanceCounter.InstanceName
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: InstanceName
  nameWithType: PerformanceCounter.InstanceName
  fullName: System.Diagnostics.PerformanceCounter.InstanceName
- uid: System.Diagnostics.PerformanceCounter.MachineName
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: MachineName
  nameWithType: PerformanceCounter.MachineName
  fullName: System.Diagnostics.PerformanceCounter.MachineName
- uid: System.Diagnostics.PerformanceCounter.NextSample
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: NextSample()
  nameWithType: PerformanceCounter.NextSample()
  fullName: System.Diagnostics.PerformanceCounter.NextSample()
- uid: System.Diagnostics.CounterSample
  parent: System.Diagnostics
  isExternal: false
  name: CounterSample
  nameWithType: CounterSample
  fullName: System.Diagnostics.CounterSample
- uid: System.Diagnostics.PerformanceCounter.NextValue
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: NextValue()
  nameWithType: PerformanceCounter.NextValue()
  fullName: System.Diagnostics.PerformanceCounter.NextValue()
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Diagnostics.PerformanceCounter.RawValue
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: RawValue
  nameWithType: PerformanceCounter.RawValue
  fullName: System.Diagnostics.PerformanceCounter.RawValue
- uid: System.Diagnostics.PerformanceCounter.ReadOnly
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: ReadOnly
  nameWithType: PerformanceCounter.ReadOnly
  fullName: System.Diagnostics.PerformanceCounter.ReadOnly
- uid: System.Diagnostics.PerformanceCounter.RemoveInstance
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: RemoveInstance()
  nameWithType: PerformanceCounter.RemoveInstance()
  fullName: System.Diagnostics.PerformanceCounter.RemoveInstance()
- uid: System.Diagnostics.PerformanceCounter.#ctor*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: PerformanceCounter
  nameWithType: PerformanceCounter.PerformanceCounter
- uid: System.Diagnostics.PerformanceCounter.BeginInit*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: BeginInit
  nameWithType: PerformanceCounter.BeginInit
- uid: System.Diagnostics.PerformanceCounter.CategoryName*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CategoryName
  nameWithType: PerformanceCounter.CategoryName
- uid: System.Diagnostics.PerformanceCounter.Close*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Close
  nameWithType: PerformanceCounter.Close
- uid: System.Diagnostics.PerformanceCounter.CloseSharedResources*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CloseSharedResources
  nameWithType: PerformanceCounter.CloseSharedResources
- uid: System.Diagnostics.PerformanceCounter.CounterHelp*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterHelp
  nameWithType: PerformanceCounter.CounterHelp
- uid: System.Diagnostics.PerformanceCounter.CounterName*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterName
  nameWithType: PerformanceCounter.CounterName
- uid: System.Diagnostics.PerformanceCounter.CounterType*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: CounterType
  nameWithType: PerformanceCounter.CounterType
- uid: System.Diagnostics.PerformanceCounter.Decrement*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Decrement
  nameWithType: PerformanceCounter.Decrement
- uid: System.Diagnostics.PerformanceCounter.Dispose*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Dispose
  nameWithType: PerformanceCounter.Dispose
- uid: System.Diagnostics.PerformanceCounter.EndInit*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: EndInit
  nameWithType: PerformanceCounter.EndInit
- uid: System.Diagnostics.PerformanceCounter.Increment*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: Increment
  nameWithType: PerformanceCounter.Increment
- uid: System.Diagnostics.PerformanceCounter.IncrementBy*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: IncrementBy
  nameWithType: PerformanceCounter.IncrementBy
- uid: System.Diagnostics.PerformanceCounter.InstanceLifetime*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: InstanceLifetime
  nameWithType: PerformanceCounter.InstanceLifetime
- uid: System.Diagnostics.PerformanceCounter.InstanceName*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: InstanceName
  nameWithType: PerformanceCounter.InstanceName
- uid: System.Diagnostics.PerformanceCounter.MachineName*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: MachineName
  nameWithType: PerformanceCounter.MachineName
- uid: System.Diagnostics.PerformanceCounter.NextSample*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: NextSample
  nameWithType: PerformanceCounter.NextSample
- uid: System.Diagnostics.PerformanceCounter.NextValue*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: NextValue
  nameWithType: PerformanceCounter.NextValue
- uid: System.Diagnostics.PerformanceCounter.RawValue*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: RawValue
  nameWithType: PerformanceCounter.RawValue
- uid: System.Diagnostics.PerformanceCounter.ReadOnly*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: ReadOnly
  nameWithType: PerformanceCounter.ReadOnly
- uid: System.Diagnostics.PerformanceCounter.RemoveInstance*
  parent: System.Diagnostics.PerformanceCounter
  isExternal: false
  name: RemoveInstance
  nameWithType: PerformanceCounter.RemoveInstance
