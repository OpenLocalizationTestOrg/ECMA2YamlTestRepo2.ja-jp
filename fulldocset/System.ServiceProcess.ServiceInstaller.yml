### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceInstaller
  id: ServiceInstaller
  children:
  - System.ServiceProcess.ServiceInstaller.#ctor
  - System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  - System.ServiceProcess.ServiceInstaller.Description
  - System.ServiceProcess.ServiceInstaller.DisplayName
  - System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.ServiceName
  - System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  - System.ServiceProcess.ServiceInstaller.StartType
  - System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  langs:
  - csharp
  name: ServiceInstaller
  nameWithType: ServiceInstaller
  fullName: System.ServiceProcess.ServiceInstaller
  type: Class
  summary: "拡張するクラスをインストール<xref href=&quot;System.ServiceProcess.ServiceBase&quot;></xref>サービスの実装です。 このクラスは、サービス アプリケーションをインストールするときに、インストール ユーティリティによって呼び出されます。"
  remarks: "The ServiceInstaller does work specific to the service with which it is associated. It is used by the installation utility to write registry values associated with the service to a subkey within the HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services registry key. The service is identified by its ServiceName within this subkey. The subkey also includes the name of the executable or .dll to which the service belongs.  \n  \n To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`. Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one ServiceInstaller instance for each service in the application. Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and ServiceInstaller instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n> [!NOTE]\n>  It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method, be sure to perform the same additions to the collection in the <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method.  \n  \n For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods. However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.When the install utility is called, it looks for the <xref:System.ComponentModel.RunInstallerAttribute> attribute. If the attribute is `true`, the utility installs all the services that were added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection that were associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false` or does not exist, the install utility ignores the project installer.  \n  \n The <xref:System.ServiceProcess.ServiceProcessInstaller> associated with your project installation class installs information common to all ServiceInstaller instances in the project. If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.  \n  \n> [!NOTE]\n>  It is crucial that the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> property to locate the service within this executable.  \n  \n You can modify other properties on the ServiceInstaller either before or after adding it to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer. For example, a service's <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> may be set to start the service automatically at reboot or require a user to start the service manually.  \n  \n Normally, you will not call the methods on ServiceInstaller within your code; they are generally called only by the install utility. The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components.  \n  \n The installation utility calls <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> to remove the object.  \n  \n An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance, and each ServiceInstaller instance is installed by the utility. It is usually unnecessary for your code to modify state information explicitly.  \n  \n When the installation is performed, it automatically creates an <xref:System.Diagnostics.EventLogInstaller> to install the event log source associated with the <xref:System.ServiceProcess.ServiceBase> derived class. The <xref:System.Diagnostics.EventLog.Log%2A> property for this source is set by the <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor to the computer's Application log. When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the ServiceInstaller (which should be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the service), the <xref:System.Diagnostics.EventLog.Source%2A> is automatically set to the same value. In an installation failure, the source's installation is rolled-back along with previously installed services.  \n  \n The <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method tries to stop the service if it is running. Whether this succeeds or not, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> undoes the changes made by <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. If a new source was created for event logging, the source is deleted."
  example:
  - "The following example creates a project installer, called `MyProjectInstaller`, which inherits from <xref:System.Configuration.Install.Installer>. It is assumed there is a service executable that contains two services, \"Hello-World Service 1\" and \"Hello-World Service 2\". Within the constructor for `MyProjectInstaller` (which would be called by the install utility), ServiceInstaller objects are created for each of these services, and a <xref:System.ServiceProcess.ServiceProcessInstaller> is created for the executable. For the install utility to recognize `MyProjectInstaller` as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.  \n  \n Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection. When the install utility accesses `MyProjectInstaller`, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> will be installed in turn. During the process, the installer maintains state information indicating which objects have been installed, so each can be backed out in turn, if an installation failure occurs.  \n  \n Normally, you would not create an instance of your project installer class explicitly. You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute> attribute to the syntax, but it is the install utility that actually calls, and therefore instantiates, the class.  \n  \n [!code-cpp[Classic ServiceInstaller Example#1](~/add/codesnippet/cpp/t-system.serviceprocess._4_1.cpp)]\n [!code-cs[Classic ServiceInstaller Example#1](~/add/codesnippet/csharp/t-system.serviceprocess._4_1.cs)]\n [!code-vb[Classic ServiceInstaller Example#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._4_1.vb)]"
  syntax:
    content: 'public class ServiceInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.HelpText
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ServiceProcess.ServiceInstaller&quot;> </xref>クラスです。"
  remarks: "サービスをインストールするには、継承されたプロジェクト インストーラー クラスを作成、<xref:System.Configuration.Install.Installer>クラス、し、設定、<xref:System.ComponentModel.RunInstallerAttribute>属性をクラスに`true`</xref:System.ComponentModel.RunInstallerAttribute></xref:System.Configuration.Install.Installer>。 プロジェクト内には、1 つを作成<xref:System.ServiceProcess.ServiceProcessInstaller>サービス アプリケーションと、1 つごとにインスタンス<xref:System.ServiceProcess.ServiceInstaller>アプリケーション内の各サービスのインスタンス</xref:System.ServiceProcess.ServiceInstaller></xref:System.ServiceProcess.ServiceProcessInstaller>。 クラスのコンス トラクター、プロジェクト インストーラー内で設定を使用して、サービスのインストール プロパティ、<xref:System.ServiceProcess.ServiceProcessInstaller>と<xref:System.ServiceProcess.ServiceInstaller>インスタンスし、インスタンスを追加、<xref:System.Configuration.Install.Installer.Installers%2A>コレクションです</xref:System.Configuration.Install.Installer.Installers%2A></xref:System.ServiceProcess.ServiceInstaller></xref:System.ServiceProcess.ServiceProcessInstaller>。       ServiceInstaller コンス トラクターを自動的に生成、イベント ログ ソース<xref:System.Diagnostics.EventLog.Log%2A>プロパティは、コンピューターのアプリケーション ログ、および<xref:System.Diagnostics.EventLogInstaller>。</xref:System.Diagnostics.EventLogInstaller>に設定</xref:System.Diagnostics.EventLog.Log%2A> 設定すると、<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>の<xref:System.ServiceProcess.ServiceInstaller>、これと同じにする必要があります、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>、サービスの<xref:System.Diagnostics.EventLog.Source%2A>イベント ログのプロパティは自動的に同じ値に設定します</xref:System.Diagnostics.EventLog.Source%2A></xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName></xref:System.ServiceProcess.ServiceInstaller></xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>。 ソースは、インストールの障害の場合に自動的に削除されます。       ServiceInstaller コンス トラクターのセット、<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>プロパティを`ServiceStartMode.Manual`をユーザーがサービスを開始することを指定します</xref:System.ServiceProcess.ServiceInstaller.StartType%2A>。 プロパティをリセットできます`ServiceStartMode.Automatic`コンピューターが再起動したら、サービスを開始を指定します。"
  syntax:
    content: public ServiceInstaller ();
    parameters: []
  overload: System.ServiceProcess.ServiceInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "インスタンスからプロパティをコピー <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>このインストーラーにします。"
  remarks: "コード内で、このメソッドを呼び出すことはほとんどありませんが。 通常、CopyFromComponent はデザイナーによってのみ呼び出されます。       CopyFromComponent 保存のサービス名、`component`パラメーターを<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>の<xref:System.ServiceProcess.ServiceInstaller>インスタンス</xref:System.ServiceProcess.ServiceInstaller></xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>。 (パラメーター<xref:System.ServiceProcess.ServiceBase>から派生したクラスのインスタンスである必要がありますので`component`<xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>プロパティを持つことが保証されます)。     > [!NOTE] > デザイン時のユーザーがクリックしたときにこのメソッドを呼び出した場合は、Visual Studio デザイナーを使用している`Add Installer`コンポーネントのインストーラーとしてこのクラスを指定します</xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName></xref:System.ServiceProcess.ServiceBase>。 インストーラーでは、ライブして格納し、インストール時に使用するすべての情報を受け取ります。"
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>からコピー先です。"
  overload: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "このインストーラーを関連付けているコンポーネントがから継承していない<xref href=&quot;System.ServiceProcess.ServiceBase&quot;></xref>です。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  id: DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはサービスを自動的に開始されるその他のサービスが実行するまでは開始遅延させるかどうかを示す値を設定します。"
  remarks: "DelayedAutoStart プロパティは、任意のサービスに適用されることができますが、サービスの開始モードが<xref:System.ServiceProcess.ServiceStartMode>。</xref:System.ServiceProcess.ServiceStartMode>場合を除き、無視されます。 設定は、次に、システムが再起動したときに有効にします。 サービス コントロール マネージャーでは、サービスの特定の開始時刻は保証されません。       遅延自動開始サービスが読み込み順序、グループのメンバーにすることはできませんが、別の自動開始サービスが依存することができます。 アプリケーションで読み込まれる前に遅延自動開始サービスを呼び出す場合、呼び出しが失敗します。       遅延自動開始をサポートしないオペレーティング システムでこのプロパティの設定は影響しません。"
  syntax:
    content: public bool DelayedAutoStart { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>自動遅延にサービスを開始します。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Description
  id: Description
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはサービスの説明を設定します。"
  remarks: "Description プロパティを使用して、ユーザーがインストールされているサービスの目的を説明します。 ユーザーは、インストールされているサービスの詳細を表示するアプリケーションでサービスの説明を表示できます。       たとえば、Windows XP を使用して、サービス コントロール コマンド ライン ユーティリティ (Sc.exe) を使用してサービスの説明を表示することができますか内でサービスの説明を表示することができます、 **Services**のノード、**コンピューターの管理**コンソールです。"
  example:
  - "The following code example sets the installation properties for a new Windows service application. The example sets the service name, along with the display name and description. After assigning the installation properties for the service, the example adds the <xref:System.ServiceProcess.ServiceInstaller> object to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n [!code-cs[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/csharp/p-system.serviceprocess._7_1.cs)]\n [!code-vb[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "サービスの説明です。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.ServiceProcess.ServiceInstaller.Description*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "ユーザーにサービスを識別するフレンドリ名を示します。"
  remarks: "The DisplayName is used, for example, in the Service Control Manager to provide a user-readable descriptive name for the service. The DisplayName is a registry value, but is never used as a registry key. Therefore, restrictions on the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property value do not apply. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> is used as the HKEY_LOCAL_MACHINES\\System\\CurrentControlSet\\Services registry key, so it is restricted.  \n  \n The display name is never used by the install utility to identify the service, so there are no restrictions on the choice of name, as there is for the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property."
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "対話型ツールに頻繁に使用する、サービスに関連付けられた名前です。"
  overload: System.ServiceProcess.ServiceInstaller.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービス アプリケーションの情報をレジストリに書き込むことにより、サービスをインストールします。 このメソッドは、インストールのツールは、適切なメソッドを自動的に処理で使用することはできます。"
  remarks: "通常がないメソッドを呼び出す、 <xref:System.ServiceProcess.ServiceInstaller>; コード内で一般的にして呼び出されただけインストール ユーティリティ</xref:System.ServiceProcess.ServiceInstaller>。 インストール ユーティリティは、インストール時に自動的にインストール メソッドを呼び出します。 バックアップ障害、out、必要に応じて呼び出すことによって<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>例外を生成するオブジェクト</xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>。       アプリケーションのインストールが既にインストールされている、インストーラーを使用して、プロジェクトの<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>。</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>コンポーネントを自動的に情報を保持します。 としてのインストールにこの状態情報が渡された、`stateSaver`パラメーターでは継続的に更新、<xref:System.ServiceProcess.ServiceProcessInstaller>インスタンスとその各<xref:System.ServiceProcess.ServiceInstaller>ユーティリティによってインスタンスがインストールされている</xref:System.ServiceProcess.ServiceInstaller></xref:System.ServiceProcess.ServiceProcessInstaller>。 通常、コードのこの状態情報を明示的に変更する必要はありません。       <xref:System.ServiceProcess.ServiceProcessInstaller>情報に関連付けられた、プロジェクトのインストール クラス インストールすべてに共通する<xref:System.ServiceProcess.ServiceInstaller>プロジェクト内のインスタンス</xref:System.ServiceProcess.ServiceInstaller></xref:System.ServiceProcess.ServiceProcessInstaller>。 このサービスが何もインストール プロジェクト内の他のサービスから分離する場合、そのサービスに固有の情報はこのメソッドによってインストールされます。       サービスをインストールするには、継承されたプロジェクト インストーラー クラスを作成、<xref:System.Configuration.Install.Installer>クラス、し、設定、<xref:System.ComponentModel.RunInstallerAttribute>属性をクラスに`true`</xref:System.ComponentModel.RunInstallerAttribute></xref:System.Configuration.Install.Installer>。 プロジェクト内には、1 つを作成<xref:System.ServiceProcess.ServiceProcessInstaller>サービス アプリケーションと、1 つごとにインスタンス<xref:System.ServiceProcess.ServiceInstaller>アプリケーション内の各サービスのインスタンス</xref:System.ServiceProcess.ServiceInstaller></xref:System.ServiceProcess.ServiceProcessInstaller>。 クラスのコンス トラクター、プロジェクト インストーラー内で設定を使用して、サービスのインストール プロパティ、<xref:System.ServiceProcess.ServiceProcessInstaller>と<xref:System.ServiceProcess.ServiceInstaller>インスタンスし、インスタンスを追加、<xref:System.Configuration.Install.Installer.Installers%2A>コレクションです</xref:System.Configuration.Install.Installer.Installers%2A></xref:System.ServiceProcess.ServiceInstaller></xref:System.ServiceProcess.ServiceProcessInstaller>。      > [!NOTE] > インストーラーのインスタンスを追加するため、コンス トラクターを使用することをお勧めただしに追加する必要がある場合、<xref:System.Configuration.Install.Installer.Installers%2A>メソッドでは、インストール、コレクションを実行してくださいでコレクションに同じ追加機能、<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッド</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A></xref:System.Configuration.Install.Installer.Installers%2A>。       すべてのクラスから派生する、<xref:System.Configuration.Install.Installer>クラスの状態、<xref:System.Configuration.Install.Installer.Installers%2A>コレクションは、現在のインストールで同じである必要がありますと<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッド</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A></xref:System.Configuration.Install.Installer.Installers%2A></xref:System.Configuration.Install.Installer>。 ただし、インストールの間で、コレクションのメンテナンスを回避できますと<xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>メソッドへのインストーラーのインスタンスを追加する場合、<xref:System.Configuration.Install.Installer.Installers%2A>カスタム インストーラー クラスのコンス トラクターでコレクションです</xref:System.Configuration.Install.Installer.Installers%2A></xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>。"
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>インストールに関連付けられているコンテキスト情報を格納します</xref:System.Collections.IDictionary>。"
  overload: System.ServiceProcess.ServiceInstaller.Install*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "インストールが含まれていない、 <xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;> </xref>可能です。       または、アセンブリのファイル名は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または空の文字列。       または、サービス名は無効です。       または、サービス コントロール マネージャーを開けませんでした。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "サービスの表示名は、長さ 255 よりも多くの文字です。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システムは、サービスへのハンドルを生成できませんでした。       または、その名前のサービスが既にインストールされています。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "2 つのインストーラーと同じサービスをインストールするかどうかを示します。"
  remarks: "IsEquivalentInstaller を示します、たとえば、2 つのインストーラーは、同じユーザー アカウントで同じサービスをインストールするかどうか。"
  syntax:
    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);
    parameters:
    - id: otherInstaller
      type: System.Configuration.Install.ComponentInstaller
      description: "A <xref href=&quot;System.Configuration.Install.ComponentInstaller&quot;> </xref>現在インストーラーを比較します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>呼び出す場合<xref:System.ServiceProcess.ServiceInstaller.Install*>これらのインストーラーの両方でのインストールと同じになるサービスですそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceProcess.ServiceInstaller.Install*> 。"
  overload: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "インストール プロシージャによって、レジストリに書き込まれるサービス アプリケーションの情報をロールバックします。 このメソッドは、インストールのツールは、適切なメソッドを自動的に処理で使用することはできます。"
  remarks: "通常がないメソッドを呼び出す、 <xref:System.ServiceProcess.ServiceInstaller>; コード内で一般的にして呼び出されただけインストール ユーティリティ</xref:System.ServiceProcess.ServiceInstaller>。 インストール ユーティリティを自動的に呼び出して、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>インストール プロセス中にメソッド</xref:System.ServiceProcess.ServiceInstaller.Install%2A>。 必要に応じて、オブジェクトのロールバックを呼び出すことによって、例外生成された場合の障害をバックアップします。       アプリケーションのインストールが自動的にインストーラーを使用して、プロジェクトの<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>。</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>に既にインストールされているコンポーネントに関する情報を保持します。 としてロールバックにこの状態情報が渡された、`savedState`パラメーターでは継続的に更新、<xref:System.ServiceProcess.ServiceProcessInstaller>インスタンスとその各<xref:System.ServiceProcess.ServiceInstaller>ユーティリティによってインスタンスがインストールされている</xref:System.ServiceProcess.ServiceInstaller></xref:System.ServiceProcess.ServiceProcessInstaller>。 通常、コードのこの状態情報を明示的に変更する必要はありません。"
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>インストールに関連付けられているコンテキスト情報を格納します</xref:System.Collections.IDictionary>。"
  overload: System.ServiceProcess.ServiceInstaller.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "このサービスを識別する、システムによって使用される名前を示します。 このプロパティと同じである必要があります、 &lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt;をインストールするサービスです。"
  remarks: "It is crucial that the ServiceName be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the ServiceName property to locate the service within this executable.  \n  \n When you set the ServiceName of the service installer, the <xref:System.Diagnostics.EventLog.Source%2A> of the associated event log is set to the same value. This allows the service to automatically log service commands (such as Start and Stop) calls to the Application log on the computer.  \n  \n> [!NOTE]\n>  If a source by the same name already exists on the computer, but in a log other than the Application log, an exception will be thrown. If the source exists and is associated with the Application log, that source is used to report command calls to the service, and no exception is thrown.  \n  \n The ServiceName cannot be `null` or have zero length. Its maximum size is 256 characters. It also cannot contain forward or backward slashes, '/' or '\\\\', or characters from the ASCII character set with value less than decimal value 32."
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "インストールするサービスの名前。 この値は、サービスをインストールするのには、インストールする前に設定する必要があります。"
  overload: System.ServiceProcess.ServiceInstaller.ServiceName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ServiceName プロパティが正しくありません。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービスを実行するには、このサービスが実行されている必要がありますを示します。"
  remarks: "サービスには、他のサービスを開始する前に実行することが必要です。 このプロパティの情報は、レジストリのキーに書き込まれます。 ユーザー (または自動的に起動した場合に、システム) は、サービスの実行を試みると、サービス コントロール マネージャー (SCM) では、各配列内のサービスが既に開始されていることを確認します。       配列内のサービスが、実行されていない場合、SCM はそれらを開始しようとします。 これにより、サービスが含まれます`Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>。</xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 。       このサービスが依存している任意のサービスは、起動に失敗すると、このサービスは開始されません。 これを検出するために、システム レベルで処理例外が存在しないため、システムが開始されていない場合は、例外はスローされません。 サービスの開始の失敗を処理し、コードでこれを実装する方法を決定します。 通常、サービスが開始に失敗した場合は、起動時にユーザーにダイアログ ボックスが表示されます。       サービスが起動しない場合は、アプリケーション イベント ログにエントリが書き込まれます。       このサービスが依存しているサービスは、同じ実行可能ファイル内にある必要はありません。"
  syntax:
    content: public string[] ServicesDependedOn { get; set; }
    return:
      type: System.String[]
      description: "このインストーラーに関連付けられているサービスを実行前に実行する必要があるサービスの配列。"
  overload: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "このサービスを開始する方法とタイミングを示します。"
  remarks: "再起動後に、サービスが自動的に開始するか、ユーザーが、サービスを手動で開始する必要がありますを指定する開始の種類を設定します。 サービスできますも無効になります、することはできません開始する必要が、手動またはプログラムによって、有効になっているまでを指定します。       変更することはできません<xref:System.ServiceProcess.ServiceInstaller>インストール後にプロパティの値</xref:System.ServiceProcess.ServiceInstaller>。 開始の種類を変更するにするアンインストールし、サービスを再インストールする必要があるか、サービス コントロール マネージャーを使用して設定を手動で変更します。"
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; set; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "A <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref>を表すサービスを開始する方法です。 既定値は<xref uid=&quot;langword_csharp_Manual&quot; name=&quot;Manual&quot; href=&quot;&quot;></xref>再起動後に、サービスは自動的に開始されませんを指定します。"
  overload: System.ServiceProcess.ServiceInstaller.StartType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "開始モードがの値ではない、 <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref>列挙します。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  id: Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "レジストリからの情報を削除することで、サービスをアンインストールします。"
  remarks: "これをアンインストールする前に、サービスを停止する最初の試みをアンインストールします。 サービスを停止できない場合は例外がキャッチされないと、メソッドは、サービスの削除を続行します。       通常がないメソッドを呼び出す、 <xref:System.ServiceProcess.ServiceInstaller>; コード内で一般的にして呼び出されただけインストール ユーティリティ</xref:System.ServiceProcess.ServiceInstaller>。 InstallUtil がサービスをアンインストールするだけでなく; にインストールします。コマンドラインの呼び出し、スイッチは、アンインストールします。       アプリケーションのアンインストール ルーチンに自動的には、コンポーネントに関する情報を保持をアンインストールして、インストーラーを使用して、プロジェクトの<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> としてアンインストールにこの状態情報が渡された、`savedState`パラメーターでは継続的に更新、<xref:System.ServiceProcess.ServiceProcessInstaller>インスタンスとその各<xref:System.ServiceProcess.ServiceInstaller>ユーティリティによってインスタンスがインストールされている</xref:System.ServiceProcess.ServiceInstaller></xref:System.ServiceProcess.ServiceProcessInstaller>。 通常、コードのこの状態情報を明示的に変更する必要はありません。       すべてのクラスから派生する、<xref:System.Configuration.Install.Installer>クラスの状態、<xref:System.Configuration.Install.Installer.Installers%2A>コレクションが同じである必要があります、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>およびメソッドをアンインストールします</xref:System.ServiceProcess.ServiceInstaller.Install%2A></xref:System.Configuration.Install.Installer.Installers%2A></xref:System.Configuration.Install.Installer>。 ただし、全体でコレクションのメンテナンスを避けることができます、<xref:System.ServiceProcess.ServiceInstaller.Install%2A>するインストーラーのインスタンスを追加する場合、メソッドをアンインストールし、<xref:System.Configuration.Install.Installer.Installers%2A>カスタム インストーラー クラスのコンス トラクター内のコレクション</xref:System.Configuration.Install.Installer.Installers%2A></xref:System.ServiceProcess.ServiceInstaller.Install%2A>。       1 つのサービスは、アンインストールに失敗すると、これが影響しないように、ある他のサービス (通常、同じインストール プロジェクト) をアンインストールして、アンインストールするためのロールバック メカニズムはありません。"
  syntax:
    content: public override void Uninstall (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>インストールに関連付けられているコンテキスト情報を格納します</xref:System.Collections.IDictionary>。"
  overload: System.ServiceProcess.ServiceInstaller.Uninstall*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "サービス コントロール マネージャーを開けませんでした。       または、システムは、サービスへのハンドルを取得できませんでした。"
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceInstaller.Description
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceInstaller.StartType
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.#ctor*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller
  nameWithType: ServiceInstaller.ServiceInstaller
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: ServiceInstaller.CopyFromComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
- uid: System.ServiceProcess.ServiceInstaller.Description*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
- uid: System.ServiceProcess.ServiceInstaller.DisplayName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install
  nameWithType: ServiceInstaller.Install
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller
  nameWithType: ServiceInstaller.IsEquivalentInstaller
- uid: System.ServiceProcess.ServiceInstaller.Rollback*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback
  nameWithType: ServiceInstaller.Rollback
- uid: System.ServiceProcess.ServiceInstaller.ServiceName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
- uid: System.ServiceProcess.ServiceInstaller.StartType*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceInstaller.Uninstall*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall
  nameWithType: ServiceInstaller.Uninstall
