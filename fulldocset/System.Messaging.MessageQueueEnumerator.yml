### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueEnumerator
  id: MessageQueueEnumerator
  children:
  - System.Messaging.MessageQueueEnumerator.Close
  - System.Messaging.MessageQueueEnumerator.Current
  - System.Messaging.MessageQueueEnumerator.Dispose
  - System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageQueueEnumerator.LocatorHandle
  - System.Messaging.MessageQueueEnumerator.MoveNext
  - System.Messaging.MessageQueueEnumerator.Reset
  - System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageQueueEnumerator
  nameWithType: MessageQueueEnumerator
  fullName: System.Messaging.MessageQueueEnumerator
  type: Class
  summary: "メッセージ キュー内のメッセージを列挙するため、順方向専用カーソルを提供します。"
  remarks: "ネットワーク上のキューの動的な対話を MessageQueueEnumerator を使用します。 メソッドを介して使用できる、<xref:System.Messaging.MessageQueue>クラスは、キュー、または指定されたメソッドが呼び出された時点でキューのコレクションのスナップショットを格納する配列の動的な一覧を格納しているか、MessageQueueEnumerator を返すことができます</xref:System.Messaging.MessageQueue>。       ネットワークでのキューの定義済みの順序はありません。 たとえば、コンピューター、ラベル、public または private の状態を順序付けられた、またはその他のユーザーがアクセスできる条件はありません。 MessageQueueEnumerator は、カーソル、動的なリストの先頭に初期化します。 列挙体の最初のキューに<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>。</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>を呼び出すことによって、カーソルを移動することができます。 列挙子が初期化された後に行うこともできます<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>残りのキューにします</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>。       ステップ後退、MessageQueueEnumerator にすることはできません。 カーソルは、キューの列挙を前方移動を許可するだけです。 ただし、呼び出す<xref:System.Messaging.MessageQueueEnumerator.Reset%2A>列挙体をリセットし、リストの先頭にカーソルを置きます</xref:System.Messaging.MessageQueueEnumerator.Reset%2A>。 列挙子は動的であるために、カーソルの現在位置より後に追加するキューは、列挙子によってアクセスできます。 カーソルの現在位置の前に挿入されているキューは、最初の reset を呼び出すアクセスできません。"
  example:
  - "The following code example iterates through all the message queues in the network, and examines the path for each queue. Finally, it displays the number of public queues on the network.  \n  \n [!code-cs[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/csharp/t-system.messaging.messa_7_1.cs)]\n [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/cpp/t-system.messaging.messa_7_1.cpp)]\n [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_7_1.vb)]"
  syntax:
    content: 'public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Close
  id: Close
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageQueueEnumerator.Close()
  fullName: System.Messaging.MessageQueueEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "列挙子に関連付けられているリソースを解放します。"
  remarks: "オペレーティング システムは、開いているハンドルが保持されます<xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>、カーソルの有効期間中に、キューの列挙子にします</xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>。 列挙子、呼び出しの閉じる操作が完了したら、ハンドルに関連付けられているリソースを解放します。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Current
  id: Current
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageQueueEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "現在の取得<xref href=&quot;System.Messaging.MessageQueue&quot;></xref>列挙体の。"
  remarks: "列挙子が作成されると、それを指していない、何もため、現在は無効であり、アクセスする場合、例外がスローされます。 呼び出す必要があります<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>列挙体の最初のキューに、カーソルの位置</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>。       現在ない中間の呼び出しを複数の呼び出し<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>は同じを返します<xref:System.Messaging.MessageQueue>オブジェクト</xref:System.Messaging.MessageQueue></xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>。"
  syntax:
    content: public System.Messaging.MessageQueue Current { get; }
    return:
      type: System.Messaging.MessageQueue
      description: "キューは、カーソルの現在の位置します。"
  overload: System.Messaging.MessageQueueEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最初の呼び出しの前に現在を呼び出す<> *> です。カーソルは、列挙体の最初の待ち行列の前に位置します。      - または - への呼び出し後に現在が呼び出される<> *> (列挙体の最後のキューの後にカーソルがあることを示す) 場合は false を返しました。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueEnumerator.Dispose()
  fullName: System.Messaging.MessageQueueEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Messaging.MessageQueueEnumerator&quot;></xref>です。"
  remarks: "Dispose を呼び出すことによりで使用されるリソース、<xref:System.Messaging.MessageQueueEnumerator>を他の目的に再割り当てされます</xref:System.Messaging.MessageQueueEnumerator>。 Dispose の詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Messaging.MessageQueueEnumerator&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック<xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A></xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>。 `Dispose`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Messaging.MessageQueueEnumerator>参照。</xref:System.Messaging.MessageQueueEnumerator> 。 このメソッドを呼び出して、`Dispose`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Messaging.MessageQueueEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle
  id: LocatorHandle
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "ネットワークでキューの検索に使用されるネイティブのメッセージ キュー ハンドルを取得します。"
  remarks: "ときに不要になったこの<xref:System.Messaging.MessageQueueEnumerator>インスタンス、呼び出す<xref:System.Messaging.MessageQueueEnumerator.Close%2A>リソースには、このハンドルを解放します</xref:System.Messaging.MessageQueueEnumerator.Close%2A></xref:System.Messaging.MessageQueueEnumerator>。"
  syntax:
    content: public IntPtr LocatorHandle { get; }
    return:
      type: System.IntPtr
      description: "現在のキューへのネイティブ ハンドルです。"
  overload: System.Messaging.MessageQueueEnumerator.LocatorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "ハンドルが存在しません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元のコードには、参照のアクセス許可がありません。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageQueueEnumerator.MoveNext()
  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "いずれかが現在使用可能な場合は、列挙体の次のキューに、列挙子を進めます。"
  remarks: "MoveNext を返します`false`列挙体に関連付けられたキューが存在しない場合にすぐにします。       MoveNext は返します`true`コレクションの末尾に達するまでします。 その`false`連続する呼び出しごとにします。 ただし MoveNext が返される`false`へのアクセス、<xref:System.Messaging.MessageQueueEnumerator.Current%2A>プロパティは例外をスローします</xref:System.Messaging.MessageQueueEnumerator.Current%2A>。       作成した場合、列挙子は、概念的には前に位置付けられます最初<xref:System.Messaging.MessageQueue>MoveNext を呼び出して、列挙、および&1; つ目のビューには、列挙体の最初のキューが表示されます</xref:System.Messaging.MessageQueue>。"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列挙子が次のキューに正常に進んだ場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>列挙子が列挙体の終わりに達した場合。"
  overload: System.Messaging.MessageQueueEnumerator.MoveNext*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元のコードには、参照のアクセス許可がありません。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageQueueEnumerator.Reset()
  fullName: System.Messaging.MessageQueueEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "列挙体の先頭を指すように、カーソル位置をリセットします。"
  remarks: "列挙子は、順方向専用の方向に移動します。 キューの列挙体の先頭に戻るには、このメソッドを使用します。       リセットは、最初のキュー、リスト内にカーソルを位置付けます。 呼び出す必要はありません<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>にカーソルを移動する Reset の呼び出し後に、列挙体の最初のキューに転送します</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>。"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "現在の取得<xref href=&quot;System.Messaging.MessageQueue&quot;></xref>列挙体の。"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "キューは、カーソルの現在の位置します。"
  overload: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Messaging.MessageQueueEnumerator.Close
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageQueueEnumerator.Close()
  fullName: System.Messaging.MessageQueueEnumerator.Close()
- uid: System.Messaging.MessageQueueEnumerator.Current
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageQueueEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.Current
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.MessageQueueEnumerator.Dispose
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueEnumerator.Dispose()
  fullName: System.Messaging.MessageQueueEnumerator.Dispose()
- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageQueueEnumerator.MoveNext
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageQueueEnumerator.MoveNext()
  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()
- uid: System.Messaging.MessageQueueEnumerator.Reset
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageQueueEnumerator.Reset()
  fullName: System.Messaging.MessageQueueEnumerator.Reset()
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageQueueEnumerator.Close*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageQueueEnumerator.Close
- uid: System.Messaging.MessageQueueEnumerator.Current*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageQueueEnumerator.Current
- uid: System.Messaging.MessageQueueEnumerator.Dispose*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueEnumerator.Dispose
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
- uid: System.Messaging.MessageQueueEnumerator.MoveNext*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageQueueEnumerator.MoveNext
- uid: System.Messaging.MessageQueueEnumerator.Reset*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageQueueEnumerator.Reset
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
