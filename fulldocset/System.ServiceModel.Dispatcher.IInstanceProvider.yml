### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider
  id: IInstanceProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  - System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  langs:
  - csharp
  name: IInstanceProvider
  nameWithType: IInstanceProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider
  type: Interface
  summary: "オブジェクトまたはのサービス オブジェクトをリサイクル サービスを提供するメソッドを宣言、[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]サービス。"
  remarks: "作成を制御する IInstanceProvider インターフェイスを実装し、要求またはによって破棄されるときに&1; つのサービス オブジェクトのリサイクル、<xref:System.ServiceModel.InstanceContext>オブジェクト</xref:System.ServiceModel.InstanceContext>。       IInstanceProvider インターフェイスを実装した場合に、カスタム インターフェイス プロバイダー オブジェクトを割り当てる必要があります、 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>、エンドポイントの動作を使用してプロパティ (、<xref:System.ServiceModel.Description.IEndpointBehavior>オブジェクト) またはコントラクト動作 (、<xref:System.ServiceModel.Description.IContractBehavior>オブジェクト).</xref:System.ServiceModel.Description.IContractBehavior> </xref:System.ServiceModel.Description.IEndpointBehavior> </xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>       挿入メカニズムがエンドポイントの動作の場合実装することも、<xref:System.ServiceModel.Configuration.BehaviorExtensionElement>構成ファイルを使用して、カスタム動作を挿入できるオブジェクト</xref:System.ServiceModel.Configuration.BehaviorExtensionElement>。 挿入メカニズムがコントラクトの動作の場合は、サービス ホストの開始前にプログラムで、動作を挿入することができますか、カスタム属性を実装することができます。 (コントラクト動作の例は、例」のセクションを参照してください)。     IInstanceProvider が&2; つのメソッド、<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>および<xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>。</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> これらのメソッドは、通常、既定以外のコンス トラクターを使用してサービス オブジェクトを作成するか、初期化またはオブジェクトの有効期間に関係する状態の破棄を実装します。 サービス オブジェクト プールは、カスタム IInstanceProvider 機能の&1; つの例です。       通常、<xref:System.ServiceModel.InstanceContext>を呼び出します、<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>ときに、<xref:System.ServiceModel.InstanceContext>が最初に作成し、起動、<xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>メソッドときに、<xref:System.ServiceModel.InstanceContext>が閉じられた</xref:System.ServiceModel.InstanceContext></xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A></xref:System.ServiceModel.InstanceContext></xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A></xref:System.ServiceModel.InstanceContext>。       2 つの方法が発生する、<xref:System.ServiceModel.InstanceContext>する前にサービス オブジェクトを解放するオブジェクト、<xref:System.ServiceModel.InstanceContext>が閉じられた</xref:System.ServiceModel.InstanceContext></xref:System.ServiceModel.InstanceContext>。 最初のメソッドに設定する、<xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A><xref:System.ServiceModel.ReleaseInstanceMode>または<xref:System.ServiceModel.ReleaseInstanceMode>。</xref:System.ServiceModel.ReleaseInstanceMode></xref:System.ServiceModel.ReleaseInstanceMode>に</xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A>は 2 番目のメソッドが呼び出されて、<xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>メソッド</xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>。 これを行う場合、<xref:System.ServiceModel.InstanceContext>呼び出し、<xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>ディスパッチャーのインスタンス プロバイダーのメソッド</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A></xref:System.ServiceModel.InstanceContext>。 インスタンスが解放された後に、新しいメッセージが到着した場合[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]使用して新しいインスタンスを作成、<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>メソッド</xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>。      > [!NOTE] > 場合、<xref:System.ServiceModel.InstanceContextMode>サービスは<xref:System.ServiceModel.InstanceContextMode>システムは、<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>または<xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>ユーザーに対して直接呼び出し<xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>と呼び出し<xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A> 、</xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>しない限り、ユーザーは、既知のサービス オブジェクトを指定しないしなかった場合でも、メソッド</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A></xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>を呼び出しません</xref:System.ServiceModel.InstanceContextMode></xref:System.ServiceModel.InstanceContextMode>"
  example:
  - "The following code example shows how to implement IInstanceProvider that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public interface IInstanceProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  id: GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "指定したサービス オブジェクトを返します<xref:System.ServiceModel.InstanceContext>オブジェクト</xref:System.ServiceModel.InstanceContext>。"
  remarks: "オブジェクトの正確なサービスを制御する GetInstance メソッドを使用して、[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]サービスが新しいものを作成しようとしたときに受信します。"
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "現在<xref:System.ServiceModel.InstanceContext>オブジェクト</xref:System.ServiceModel.InstanceContext>。"
    return:
      type: System.Object
      description: "ユーザー定義サービス オブジェクト。"
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  id: GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "指定したサービス オブジェクトを返します<xref:System.ServiceModel.InstanceContext>オブジェクト</xref:System.ServiceModel.InstanceContext>。"
  remarks: "オブジェクトの正確なサービスを制御する GetInstance メソッドを使用して、[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]サービスが新しいものを作成しようとしたときに受信します。"
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "現在<xref:System.ServiceModel.InstanceContext>オブジェクト</xref:System.ServiceModel.InstanceContext>。"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "サービス オブジェクトの作成をトリガーするメッセージ。"
    return:
      type: System.Object
      description: "サービス オブジェクト。"
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  id: ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "ときに呼び出されます、<xref:System.ServiceModel.InstanceContext>オブジェクトがサービス オブジェクトをリサイクルします</xref:System.ServiceModel.InstanceContext>。"
  remarks: "ReleaseInstance メソッドを使用して、サービスがサービス オブジェクトをリサイクルするときに、いくつかのカスタムのリソース破棄処理またはその他のリサイクルに関するカスタマイズを実行します。"
  syntax:
    content: public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "サービスのインスタンス コンテキスト。"
    - id: instance
      type: System.Object
      description: "リサイクルするサービス オブジェクト。"
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance
  nameWithType: IInstanceProvider.GetInstance
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance
  nameWithType: IInstanceProvider.ReleaseInstance
