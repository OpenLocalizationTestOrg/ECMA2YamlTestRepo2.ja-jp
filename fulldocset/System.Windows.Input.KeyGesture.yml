### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyGesture
  id: KeyGesture
  children:
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  - System.Windows.Input.KeyGesture.DisplayString
  - System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  - System.Windows.Input.KeyGesture.Key
  - System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  - System.Windows.Input.KeyGesture.Modifiers
  langs:
  - csharp
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
  type: Class
  summary: "コマンドの呼び出しに使用できる、キーの組み合わせを定義します。"
  remarks: "ほとんどの場合、KeyGesture にしてください関連付けられている&1; つまたは複数<xref:System.Windows.Input.ModifierKeys>。</xref:System.Windows.Input.ModifierKeys> 。 この規則の例外は、ファンクション キー テンキーのキーは有効な KeyGesture を単独で指定できます。 たとえば、F12 キーのみを使用して、KeyGesture を作成することができますが、X を使用する、KeyGesture でキーが必要がありますと組で使用修飾子キーです。       一般に、することができますを使用できます、<xref:System.Windows.Input.KeyBinding>に KeyGesture をバインドする、 <xref:System.Windows.Input.ICommand>、KeyGesture が発生すると、コマンドが呼び出されるように、</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.KeyBinding> 。       Keygesture[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]の使用法で一般に設定されているプロパティ[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]は<xref:System.Windows.Input.KeyBinding.Gesture%2A>、ジェスチャが標準的なキーと修飾子キーの両方を表す場合</xref:System.Windows.Input.KeyBinding.Gesture%2A>。 設定することも、<xref:System.Windows.Input.KeyBinding.Gesture%2A>だけ、ファンクション キー、または修飾子だけになるプロパティのキーの組み合わせ</xref:System.Windows.Input.KeyBinding.Gesture%2A>。 設定する一般的な<xref:System.Windows.Input.KeyBinding.Key%2A>目的のコマンドのバインドがありません修飾子を持つ関数キー プロパティまたは<xref:System.Windows.Input.KeyBinding.Modifiers%2A>の修飾子キーのみを意図したコマンドのバインドが</xref:System.Windows.Input.KeyBinding.Modifiers%2A></xref:System.Windows.Input.KeyBinding.Key%2A>。      <a name=&quot;xamlAttributeUsage_KeyGesture&quot;></a>## XAML 属性の使用```   <object property=&quot;oneOrMoreModifierKeys+key&quot;/>   - or -   <object property=&quot;functionKey&quot;/>   ``` <a name=&quot;xamlValues_KeyGesture&quot;> </a> ## XAML 値`functionKey`<xref:System.Windows.Input.Key>単一キーの値、テンキーのキーまたはファンクション キー (F1 ~&12;) のいずれかを指定する必要があります</xref:System.Windows.Input.Key>。                 `oneOrMoreModifierKeys`によって定義された&1; つまたは複数の修飾子キー、<xref:System.Windows.Input.ModifierKeys>列挙型、「+」文字で区切られます</xref:System.Windows.Input.ModifierKeys>。       `key`    <xref:System.Windows.Input.Key>1 つのキー値。</xref:System.Windows.Input.Key>"
  example:
  - "The following example shows how to bind the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command to a KeyGesture using a <xref:System.Windows.Input.KeyBinding>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]  \n  \n The following example shows how to use KeyGesture in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Note that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage does not directly declare a `<KeyGesture>` element. That object element usage is not possible because KeyGesture does not expose a public default constructor. Instead, the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage uses the typeconverter behavior to declare an entire KeyGesture inline as the `Gesture` attribute value.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))]

      public class KeyGesture : System.Windows.Input.InputGesture
  inheritance:
  - System.Object
  - System.Windows.Input.InputGesture
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 、指定したクラス<xref href=&quot;System.Windows.Input.Key&quot;></xref>です。"
  remarks: "ほとんどの場合、<xref:System.Windows.Input.KeyGesture>いずれかに関連付ける必要があるか複数<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  このルールの例外は、ファンクション キーと、有効な可能性があるテンキーのキー<xref:System.Windows.Input.KeyGesture>自体によって</xref:System.Windows.Input.KeyGesture>。"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>.  The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithnomodifier)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithnomodifier)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "このジェスチャに関連付けられているキーです。"
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>key</code>有効ではありません<xref href=&quot;System.Windows.Input.Key&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>有効ではありません<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 、指定したクラス<xref href=&quot;System.Windows.Input.Key&quot;></xref>と<xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>です。"
  remarks: "ほとんどの場合、<xref:System.Windows.Input.KeyGesture>いずれかに関連付ける必要があるか複数<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> このルールの例外は、ファンクション キーと、有効な可能性があるテンキーのキー<xref:System.Windows.Input.KeyGesture>自体によって</xref:System.Windows.Input.KeyGesture>。"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>. The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "ジェスチャに関連付けられているキーです。"
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "ジェスチャに関連付けられている修飾子キーです。"
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>および<code>modifiers</code>有効なを形成しません<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 、指定したクラス<xref href=&quot;System.Windows.Input.Key&quot;> </xref>、 <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>、および文字列を表示します。"
  remarks: "<xref:System.Windows.Input.KeyGesture.DisplayString%2A>プロパティに設定されている、`displayString`パラメーター</xref:System.Windows.Input.KeyGesture.DisplayString%2A> 。"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "ジェスチャに関連付けられているキーです。"
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "ジェスチャに関連付けられている修飾子キーです。"
    - id: displayString
      type: System.String
      description: "文字列表現、 <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。"
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>displayString</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>および<code>modifiers</code>有効なを形成しません<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.DisplayString
  id: DisplayString
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "この文字列表現を取得<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。"
  remarks: "表示文字列が、コンス トラクターで設定されていない場合、空の文字列が返されます。       このプロパティが空の場合、<xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>メソッド<xref:System.Windows.Input.KeyGesture.Key%2A>および<xref:System.Windows.Input.KeyGesture.Modifiers%2A>.</xref:System.Windows.Input.KeyGesture.Modifiers%2A></xref:System.Windows.Input.KeyGesture.Key%2A>から作成された文字列を返します</xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>"
  syntax:
    content: public string DisplayString { get; }
    return:
      type: System.String
      description: "この表示文字列<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。 既定値は<xref:System.String.Empty>。</xref:System.String.Empty>"
  overload: System.Windows.Input.KeyGesture.DisplayString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  id: GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "表示するために使用する文字列を返します、 <xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。"
  remarks: "表示文字列は、その文字列が返されます。 コンス トラクターによって設定された場合文字列を作成する場合は、<xref:System.Windows.Input.KeyGesture.Key%2A>と<xref:System.Windows.Input.KeyGesture.Modifiers%2A>制御されない任意の必要な変換を含む指定した<xref:System.Globalization.CultureInfo>オブジェクト</xref:System.Globalization.CultureInfo></xref:System.Windows.Input.KeyGesture.Modifiers%2A></xref:System.Windows.Input.KeyGesture.Key%2A>。"
  syntax:
    content: public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "カルチャ固有の情報です。"
    return:
      type: System.String
      description: "表示する文字列"
  overload: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Key
  id: Key
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "これに関連付けられているキーを取得<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。"
  remarks: "ほとんどの場合、<xref:System.Windows.Input.KeyGesture>いずれかに関連付ける必要があるか複数<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  このルールの例外は、ファンクション キーと、有効な可能性があるテンキーのキー<xref:System.Windows.Input.KeyGesture>自体によって</xref:System.Windows.Input.KeyGesture>。"
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "ジェスチャに関連付けられているキーです。  既定値は<xref href=&quot;System.Windows.Input.Key&quot;></xref>です。"
  overload: System.Windows.Input.KeyGesture.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  id: Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "決定するかどうかこの<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> 、指定したに関連付けられている入力と一致する<xref href=&quot;System.Windows.Input.InputEventArgs&quot;></xref>オブジェクト。"
  remarks: '`targetElement`コマンドを特定の要素で呼び出されるかどうかをより具体的な決定を行うために使用します。'
  example:
  - "The following example shows how to test whether a <xref:System.Windows.Input.KeyGesture> matches the input associated with an instance of an <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> event handler is created that compares the event data with the <xref:System.Windows.Input.KeyGesture> by using the Matches method.  \n  \n [!code-cs[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keydownhandlerkeygesturematches)]\n [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keydownhandlerkeygesturematches)]"
  syntax:
    content: public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);
    parameters:
    - id: targetElement
      type: System.Object
      description: "ターゲット。"
    - id: inputEventArgs
      type: System.Windows.Input.InputEventArgs
      description: "このジェスチャを比較する入力イベントのデータ。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このイベント データに一致する場合<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Input.KeyGesture.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "これに関連付けられている修飾子キーの取得<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>です。"
  remarks: "ほとんどの場合、<xref:System.Windows.Input.KeyGesture>いずれかに関連付ける必要があるか複数<xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> このルールの例外は、ファンクション キーと、有効な可能性があるテンキーのキー<xref:System.Windows.Input.KeyGesture>自体によって</xref:System.Windows.Input.KeyGesture>。 たとえば、作成することができます、<xref:System.Windows.Input.KeyGesture>でキーが X を使用する、F12 キーのみを使用して、<xref:System.Windows.Input.KeyGesture>修飾子キーを使用してペアリングする必要があります</xref:System.Windows.Input.KeyGesture></xref:System.Windows.Input.KeyGesture>。"
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "ジェスチャに関連付けられている修飾子キーです。 既定値は<xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>です。"
  overload: System.Windows.Input.KeyGesture.Modifiers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputGesture
  isExternal: false
  name: System.Windows.Input.InputGesture
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Input.KeyGesture.DisplayString
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Input.KeyGesture.Key
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: InputEventArgs
  nameWithType: InputEventArgs
  fullName: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.KeyGesture.Modifiers
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
- uid: System.Windows.Input.KeyGesture.#ctor*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture.KeyGesture
- uid: System.Windows.Input.KeyGesture.DisplayString*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture
  nameWithType: KeyGesture.GetDisplayStringForCulture
- uid: System.Windows.Input.KeyGesture.Key*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches
  nameWithType: KeyGesture.Matches
- uid: System.Windows.Input.KeyGesture.Modifiers*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
