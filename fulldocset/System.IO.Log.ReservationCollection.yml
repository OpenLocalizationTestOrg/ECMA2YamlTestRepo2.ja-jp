### YamlMime:ManagedReference
items:
- uid: System.IO.Log.ReservationCollection
  id: ReservationCollection
  children:
  - System.IO.Log.ReservationCollection.#ctor
  - System.IO.Log.ReservationCollection.Add(System.Int64)
  - System.IO.Log.ReservationCollection.Clear
  - System.IO.Log.ReservationCollection.Contains(System.Int64)
  - System.IO.Log.ReservationCollection.CopyTo(System.Int64[],System.Int32)
  - System.IO.Log.ReservationCollection.Count
  - System.IO.Log.ReservationCollection.Finalize
  - System.IO.Log.ReservationCollection.FreeReservation(System.Int64)
  - System.IO.Log.ReservationCollection.GetBestMatchingReservation(System.Int64)
  - System.IO.Log.ReservationCollection.GetEnumerator
  - System.IO.Log.ReservationCollection.IsReadOnly
  - System.IO.Log.ReservationCollection.MakeReservation(System.Int64)
  - System.IO.Log.ReservationCollection.Remove(System.Int64)
  - System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)
  - System.IO.Log.ReservationCollection.ReservationMade(System.Int64)
  - System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: ReservationCollection
  nameWithType: ReservationCollection
  fullName: System.IO.Log.ReservationCollection
  type: Class
  summary: "レコード シーケンスで行われた領域予約のコレクションを管理します。"
  remarks: "このクラスは、レコード シーケンスで行われる予約領域のセットを表します。 コレクションに項目を追加するには、新しい予約が割り当てられます。 コレクションから項目を削除するには、その予約が解放されます。       アプリケーションは、今後は、ログに書き込まれるデータがあっても、すぐに書き込むことはできません、ログ領域を予約します。 予約は、データは、データが書き込まれる使用可能な場合に、ログに書き込むことができる保証を提供します。 ログを使用して、アプリケーションは多くの場合、マーシャ リング領域内の&1; つまたは複数のログ レコードを予約します。 それらを追加する前にレコードを予約する必要があります。       予約は、データのコミット; 前に、操作を完了することができます。 を保証するために使用できます。それ以外の場合、変更がロールバックされます。 「元に戻すアクション」をログに記録にも使用できます。 ロールバック操作中に、トランザクション リソース マネージャー (RM) は、ロールバック操作中に、RM が中断された場合、その状態を回復できる必要があります。 予約領域を使用すると、RM を使用前に、ログの領域を予約できます。       <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A>メソッドの領域を予約またはデータ、またはその両方によっては、呼び出し時に指定されたパラメーターを追加できます</xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A>。 作業の進行状況は、トランザクションで、アプリケーションは元に戻す情報を追加し、補正レコードの領域を予約できます。 ロールバック操作中には、作成された補正レコードは、どのような完了したら、ディスク上を示します。 以前に予約された領域を使用して、レコードが追加されます。 これは、ログ領域は、ロールバック操作の実行中に致命的な状況では、不足 RM を実行しないことを保証します。 場合、トランザクション中にログがいっぱいアプリケーションに安全にロールバックできますトランザクション持続性のあるデータを破壊することがなくです。       CLFS は、先行書き込みログ記録のためのもの、ARIES 準拠ログ システムです。 先行書き込みログ記録では、アプリケーションは、ロールバック中に使用することがあります、補正レコードの書き込みにログにかかる領域の容量を予約する、操作を実行する前に取り消しレコードを書き込みます。 後で、予約された領域は、補正レコードが実際に書き込まれたときに使用されます。       アプリケーションでは、予約することか、(相互に排他的な操作は)、どの時点でもロング スペースにアクセスできます。 コミット後、アプリケーションは補正レコードの予約を解放できますをログ レコードが書き込まです。 呼び出して、この操作を行うことができます、<xref:System.IO.Log.ReservationCollection.FreeReservation%2A>または<xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A>メソッド</xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A></xref:System.IO.Log.ReservationCollection.FreeReservation%2A>。 呼び出す、<xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A>メソッドにより、操作が呼び出し中に、アトミック、<xref:System.IO.Log.ReservationCollection.FreeReservation%2A>メソッドはありません</xref:System.IO.Log.ReservationCollection.FreeReservation%2A></xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A>。       レコードを解放する場合は、前回の呼び出しと共に予約した同じのレコードを解放する必要があります、<xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A>メソッド</xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A>。      > [!NOTE] > の実装<xref:System.IO.Log.IRecordSequence>実装する必要があります、<xref:System.IO.Log.ReservationCollection.MakeReservation%2A>と<xref:System.IO.Log.ReservationCollection.FreeReservation%2A>実際の予約の割り当てと解放を実行するメソッド</xref:System.IO.Log.ReservationCollection.FreeReservation%2A></xref:System.IO.Log.ReservationCollection.MakeReservation%2A></xref:System.IO.Log.IRecordSequence>。 さらに、実装を呼び出す必要がありますも<xref:System.IO.Log.ReservationCollection.ReservationFreed%2A>予約した領域にレコードが書き込まれたとき</xref:System.IO.Log.ReservationCollection.ReservationFreed%2A>。"
  example:
  - "Reservations can be performed in two ways as shown in the following examples. You can adopt the practices in the samples for robust processing. Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.  \n  \n```  \n//Using the ReserveAndAppend Method  \nReservationCollection reservations = recordSequence.CreateReservationCollection();  \nlong[] lengthOfUndoRecords = new long[] { 1000 };  \nrecordSequence.ReserveAndAppend(recordData,  \n                                                     userSqn,  \n                                                     previousSqn,  \n                                                     RecordSequenceAppendOptions.None,  \n                                                     reservations,  \n                                                     lengthOfUndoRecords);  \nrecordSequence.Append(undoRecordData,    // If necessary …  \n                                    userSqn,  \n                                    previousSqn,  \n                                    RecordSequenceAppendOptions.ForceFlush,  \n                                    reservations);  \n  \n// Using the Manual Approach  \nReservationCollection reservations = recordSequence.CreateReservationCollection();  \nreservations.Add(lengthOfUndoRecord);  \ntry  \n{  \n   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  \n}  \ncatch (Exception)  \n{  \n   reservations.Remove(lengthOfUndoRecord);  \n   throw;  \n}  \n  \nrecordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  \n```"
  syntax:
    content: 'public abstract class ReservationCollection : System.Collections.Generic.ICollection<long>, System.Collections.Generic.IEnumerable<long>'
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<System.Int64>
  - System.Collections.Generic.IEnumerable<System.Int64>
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.#ctor
  id: '#ctor'
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: ReservationCollection()
  nameWithType: ReservationCollection.ReservationCollection()
  fullName: System.IO.Log.ReservationCollection.ReservationCollection()
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref>クラスです。"
  syntax:
    content: protected ReservationCollection ();
    parameters: []
  overload: System.IO.Log.ReservationCollection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.Add(System.Int64)
  id: Add(System.Int64)
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: Add(Int64)
  nameWithType: ReservationCollection.Add(Int64)
  fullName: System.IO.Log.ReservationCollection.Add(Int64)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "予約を割り当てて、コレクションに追加します。 このメソッドは継承できません。"
  remarks: ''
  example:
  - "The following example shows how to manually make a reservation. Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.  \n  \n```  \nReservationCollection reservations = recordSequence.CreateReservationCollection();  \nreservations.Add(lengthOfUndoRecord);  \ntry  \n{  \n   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  \n}  \ncatch (Exception)  \n{  \n   reservations.Remove(lengthOfUndoRecord);  \n   throw;  \n}  \n  \nrecordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  \n```"
  syntax:
    content: public void Add (long size);
    parameters:
    - id: size
      type: System.Int64
      description: "(バイト単位)、要求された予約のサイズ。"
  overload: System.IO.Log.ReservationCollection.Add*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>archiveTail</code>このシーケンスの基本と最後のシーケンス番号の間ではありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>size</code>無効か、最大予約サイズを超えています。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "アーカイブ スナップショットを作成するときに、I/O エラーが発生します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "レコード シーケンスがいっぱいです。"
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.Clear
  id: Clear
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: ReservationCollection.Clear()
  fullName: System.IO.Log.ReservationCollection.Clear()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "すべてのコレクション内の予約を解放します。 このメソッドは継承できません。"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.IO.Log.ReservationCollection.Clear*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>size</code>無効か、最大予約サイズを超えています。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "アーカイブ スナップショットを作成するときに、I/O エラーが発生します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "レコード シーケンスがいっぱいです。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.Contains(System.Int64)
  id: Contains(System.Int64)
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: Contains(Int64)
  nameWithType: ReservationCollection.Contains(Int64)
  fullName: System.IO.Log.ReservationCollection.Contains(Int64)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "指定したサイズの予約が行われたかどうかを判断します。 このメソッドは継承できません。"
  syntax:
    content: public bool Contains (long size);
    parameters:
    - id: size
      type: System.Int64
      description: "コレクション内で検索するサイズ。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定したサイズの少なくとも&1; つの予約が行われて場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.Log.ReservationCollection.Contains*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.CopyTo(System.Int64[],System.Int32)
  id: CopyTo(System.Int64[],System.Int32)
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: CopyTo(Int64[],Int32)
  nameWithType: ReservationCollection.CopyTo(Int64[],Int32)
  fullName: System.IO.Log.ReservationCollection.CopyTo(Int64[],Int32)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "ターゲット配列の指定したインデックスから始まる&1; 次元配列にコレクション全体をコピーします。 このメソッドは継承できません。"
  syntax:
    content: public void CopyTo (long[] array, int arrayIndex);
    parameters:
    - id: array
      type: System.Int64[]
      description: "コピー先の配列。"
    - id: arrayIndex
      type: System.Int32
      description: "開始するコピー配列の&0; から始まるインデックス。"
  overload: System.IO.Log.ReservationCollection.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>or <code>arrayIndex</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>0 未満、またはより大きいかの長さと等しい<code>array</code>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "データのコピー先の指定した配列内に十分な領域がありません。       - または - <code> array </code>は要求された操作のサポートされている唯一の種類である&1; 次元配列ではありません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.Count
  id: Count
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: Count
  nameWithType: ReservationCollection.Count
  fullName: System.IO.Log.ReservationCollection.Count
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "コレクション内の予約の数を取得します。"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "コレクション内の予約の数。"
  overload: System.IO.Log.ReservationCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.Finalize
  id: Finalize
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: Finalize()
  nameWithType: ReservationCollection.Finalize()
  fullName: System.IO.Log.ReservationCollection.Finalize()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "により、 <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref>ガベージ コレクターによって破棄される前にリソースを解放します。"
  syntax:
    content: ~ReservationCollection ();
    parameters: []
  overload: System.IO.Log.ReservationCollection.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.FreeReservation(System.Int64)
  id: FreeReservation(System.Int64)
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: FreeReservation(Int64)
  nameWithType: ReservationCollection.FreeReservation(Int64)
  fullName: System.IO.Log.ReservationCollection.FreeReservation(Int64)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "派生クラスでオーバーライドされると、指定したサイズの予約を解放します。"
  syntax:
    content: protected abstract void FreeReservation (long size);
    parameters:
    - id: size
      type: System.Int64
      description: "解放する予約のサイズ。"
  overload: System.IO.Log.ReservationCollection.FreeReservation*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.GetBestMatchingReservation(System.Int64)
  id: GetBestMatchingReservation(System.Int64)
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: GetBestMatchingReservation(Int64)
  nameWithType: ReservationCollection.GetBestMatchingReservation(Int64)
  fullName: System.IO.Log.ReservationCollection.GetBestMatchingReservation(Int64)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "派生クラスでオーバーライドされると、最も一致する指定されたサイズの予約を取得します。"
  remarks: "レコード シーケンスに予約された領域からレコードを追加するときに、このメソッドは通常呼び出されます。 返されたときは、返されたサイズの予約をコレクションから削除されています。 、いくつかの理由から、予約した領域アクセスできない場合は実際には、、<xref:System.IO.Log.ReservationCollection.ReservationMade%2A>メソッドを呼び出すことを確認する必要があります、<xref:System.IO.Log.ReservationCollection>レコード シーケンス内の予約された領域の量を正確に表す。</xref:System.IO.Log.ReservationCollection> </xref:System.IO.Log.ReservationCollection.ReservationMade%2A>"
  syntax:
    content: protected long GetBestMatchingReservation (long size);
    parameters:
    - id: size
      type: System.Int64
      description: "合わせる必要がある予約のサイズ。"
    return:
      type: System.Int64
      description: "該当する予約が存在しない場合より大きいか、指定したサイズ、または-1 を等しい値をコレクションから取得した予約。"
  overload: System.IO.Log.ReservationCollection.GetBestMatchingReservation*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.GetEnumerator
  id: GetEnumerator
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ReservationCollection.GetEnumerator()
  fullName: System.IO.Log.ReservationCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "反復処理できる列挙子を返します、 <xref href=&quot;System.IO.Log.ReservationCollection&quot;></xref>です。 このメソッドは継承できません。"
  syntax:
    content: public System.Collections.Generic.IEnumerator<long> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Int64}
      description: "反復処理できる列挙子、 <xref href=&quot;System.IO.Log.ReservationCollection&quot;></xref>です。"
  overload: System.IO.Log.ReservationCollection.GetEnumerator*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は、次の理由の&1; つは有効ではありません。-列挙体が終了しました。      コレクションが変更されました。      -列挙が開始されていません。 呼び出し<xref:System.Collections.IEnumerator.MoveNext*>行う必要があります</xref:System.Collections.IEnumerator.MoveNext*>。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.IsReadOnly
  id: IsReadOnly
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ReservationCollection.IsReadOnly
  fullName: System.IO.Log.ReservationCollection.IsReadOnly
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "コレクションは読み取り専用であるかどうかを示す値を取得します。"
  remarks: "A<xref:System.IO.Log.ReservationCollection>読み取り専用ではありません</xref:System.IO.Log.ReservationCollection>。"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "このプロパティは常に返します<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.Log.ReservationCollection.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.MakeReservation(System.Int64)
  id: MakeReservation(System.Int64)
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: MakeReservation(Int64)
  nameWithType: ReservationCollection.MakeReservation(Int64)
  fullName: System.IO.Log.ReservationCollection.MakeReservation(Int64)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "派生クラスでオーバーライドされると、指定したサイズの予約を割り当てます。"
  syntax:
    content: protected abstract void MakeReservation (long size);
    parameters:
    - id: size
      type: System.Int64
      description: "割り当てる予約のサイズ。"
  overload: System.IO.Log.ReservationCollection.MakeReservation*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.Remove(System.Int64)
  id: Remove(System.Int64)
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: Remove(Int64)
  nameWithType: ReservationCollection.Remove(Int64)
  fullName: System.IO.Log.ReservationCollection.Remove(Int64)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "いずれかが行われて場合は、指定したサイズの予約を解放します。 このメソッドは継承できません。"
  remarks: ''
  example:
  - "The following example shows how to manually make a reservation. Notice that this task can only be performed when using the CLFS-based <xref:System.IO.Log.LogRecordSequence> class.  \n  \n```  \nReservationCollection reservations = recordSequence.CreateReservationCollection();  \nreservations.Add(lengthOfUndoRecord);  \ntry  \n{  \n   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  \n}  \ncatch (Exception)  \n{  \n   reservations.Remove(lengthOfUndoRecord);  \n   throw;  \n}  \n  \nrecordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  \n```"
  syntax:
    content: public bool Remove (long item);
    parameters:
    - id: item
      type: System.Int64
      description: "解放する予約のサイズ。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定したサイズの予約が見つかり、削除された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.Log.ReservationCollection.Remove*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された予約コレクションには指定されたレコードに対応するのに十分なサイズの予約が見つかりません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "アーカイブ スナップショットを作成するときに、I/O エラーが発生します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "レコード シーケンスがいっぱいです。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)
  id: ReservationFreed(System.Int64)
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: ReservationFreed(Int64)
  nameWithType: ReservationCollection.ReservationFreed(Int64)
  fullName: System.IO.Log.ReservationCollection.ReservationFreed(Int64)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "派生クラスでオーバーライドされると、予約が解放されたことを示します。"
  remarks: "継承する場合<xref:System.IO.Log.ReservationCollection>、予約がコレクションからの削除以外の理由でリリースされたときに、このメソッドを呼び出す必要があります</xref:System.IO.Log.ReservationCollection>。"
  syntax:
    content: protected void ReservationFreed (long size);
    parameters:
    - id: size
      type: System.Int64
      description: "解放された予約のサイズ。"
  overload: System.IO.Log.ReservationCollection.ReservationFreed*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.ReservationMade(System.Int64)
  id: ReservationMade(System.Int64)
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: ReservationMade(Int64)
  nameWithType: ReservationCollection.ReservationMade(Int64)
  fullName: System.IO.Log.ReservationCollection.ReservationMade(Int64)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "派生クラスでオーバーライドされると、予約が行われたことを示します。"
  remarks: "<xref:System.IO.Log.ReservationCollection>予約が<xref:System.IO.Log.ReservationCollection.Add%2A>。</xref:System.IO.Log.ReservationCollection.Add%2A>への呼び出しの外部で行われたときに、このメソッドを呼び出す必要があります</xref:System.IO.Log.ReservationCollection>から継承する場合"
  syntax:
    content: protected void ReservationMade (long size);
    parameters:
    - id: size
      type: System.Int64
      description: "ようになっている、予約サイズです。"
  overload: System.IO.Log.ReservationCollection.ReservationMade*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.IO.Log.ReservationCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ReservationCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.IO.Log.ReservationCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "反復処理できる列挙子を返します、 <xref href=&quot;System.IO.Log.ReservationCollection&quot;></xref>です。 このメソッドは継承できません。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "反復処理できる列挙子、 <xref href=&quot;System.IO.Log.ReservationCollection&quot;></xref>です。"
  overload: System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作は、次の理由の&1; つは有効ではありません。-列挙体が終了しました。      コレクションが変更されました。      -列挙が開始されていません。 呼び出し<xref:System.Collections.IEnumerator.MoveNext*>行う必要があります</xref:System.Collections.IEnumerator.MoveNext*>。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.Log.SequenceFullException
  parent: System.IO.Log
  isExternal: false
  name: SequenceFullException
  nameWithType: SequenceFullException
  fullName: System.IO.Log.SequenceFullException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.Log.ReservationCollection.#ctor
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: ReservationCollection()
  nameWithType: ReservationCollection.ReservationCollection()
  fullName: System.IO.Log.ReservationCollection.ReservationCollection()
- uid: System.IO.Log.ReservationCollection.Add(System.Int64)
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Add(Int64)
  nameWithType: ReservationCollection.Add(Int64)
  fullName: System.IO.Log.ReservationCollection.Add(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Log.ReservationCollection.Clear
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Clear()
  nameWithType: ReservationCollection.Clear()
  fullName: System.IO.Log.ReservationCollection.Clear()
- uid: System.IO.Log.ReservationCollection.Contains(System.Int64)
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Contains(Int64)
  nameWithType: ReservationCollection.Contains(Int64)
  fullName: System.IO.Log.ReservationCollection.Contains(Int64)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Log.ReservationCollection.CopyTo(System.Int64[],System.Int32)
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: CopyTo(Int64[],Int32)
  nameWithType: ReservationCollection.CopyTo(Int64[],Int32)
  fullName: System.IO.Log.ReservationCollection.CopyTo(Int64[],Int32)
- uid: System.Int64[]
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64[]
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Log.ReservationCollection.Count
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Count
  nameWithType: ReservationCollection.Count
  fullName: System.IO.Log.ReservationCollection.Count
- uid: System.IO.Log.ReservationCollection.Finalize
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Finalize()
  nameWithType: ReservationCollection.Finalize()
  fullName: System.IO.Log.ReservationCollection.Finalize()
- uid: System.IO.Log.ReservationCollection.FreeReservation(System.Int64)
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: FreeReservation(Int64)
  nameWithType: ReservationCollection.FreeReservation(Int64)
  fullName: System.IO.Log.ReservationCollection.FreeReservation(Int64)
- uid: System.IO.Log.ReservationCollection.GetBestMatchingReservation(System.Int64)
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: GetBestMatchingReservation(Int64)
  nameWithType: ReservationCollection.GetBestMatchingReservation(Int64)
  fullName: System.IO.Log.ReservationCollection.GetBestMatchingReservation(Int64)
- uid: System.IO.Log.ReservationCollection.GetEnumerator
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: ReservationCollection.GetEnumerator()
  fullName: System.IO.Log.ReservationCollection.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.Int64}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<Int64>
  nameWithType: IEnumerator<Int64>
  fullName: System.Collections.Generic.IEnumerator<System.Int64>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Int64>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Log.ReservationCollection.IsReadOnly
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: ReservationCollection.IsReadOnly
  fullName: System.IO.Log.ReservationCollection.IsReadOnly
- uid: System.IO.Log.ReservationCollection.MakeReservation(System.Int64)
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: MakeReservation(Int64)
  nameWithType: ReservationCollection.MakeReservation(Int64)
  fullName: System.IO.Log.ReservationCollection.MakeReservation(Int64)
- uid: System.IO.Log.ReservationCollection.Remove(System.Int64)
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Remove(Int64)
  nameWithType: ReservationCollection.Remove(Int64)
  fullName: System.IO.Log.ReservationCollection.Remove(Int64)
- uid: System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: ReservationFreed(Int64)
  nameWithType: ReservationCollection.ReservationFreed(Int64)
  fullName: System.IO.Log.ReservationCollection.ReservationFreed(Int64)
- uid: System.IO.Log.ReservationCollection.ReservationMade(System.Int64)
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: ReservationMade(Int64)
  nameWithType: ReservationCollection.ReservationMade(Int64)
  fullName: System.IO.Log.ReservationCollection.ReservationMade(Int64)
- uid: System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ReservationCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.IO.Log.ReservationCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IO.Log.ReservationCollection.#ctor*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: ReservationCollection
  nameWithType: ReservationCollection.ReservationCollection
- uid: System.IO.Log.ReservationCollection.Add*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Add
  nameWithType: ReservationCollection.Add
- uid: System.IO.Log.ReservationCollection.Clear*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Clear
  nameWithType: ReservationCollection.Clear
- uid: System.IO.Log.ReservationCollection.Contains*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Contains
  nameWithType: ReservationCollection.Contains
- uid: System.IO.Log.ReservationCollection.CopyTo*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: CopyTo
  nameWithType: ReservationCollection.CopyTo
- uid: System.IO.Log.ReservationCollection.Count*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Count
  nameWithType: ReservationCollection.Count
- uid: System.IO.Log.ReservationCollection.Finalize*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Finalize
  nameWithType: ReservationCollection.Finalize
- uid: System.IO.Log.ReservationCollection.FreeReservation*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: FreeReservation
  nameWithType: ReservationCollection.FreeReservation
- uid: System.IO.Log.ReservationCollection.GetBestMatchingReservation*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: GetBestMatchingReservation
  nameWithType: ReservationCollection.GetBestMatchingReservation
- uid: System.IO.Log.ReservationCollection.GetEnumerator*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: ReservationCollection.GetEnumerator
- uid: System.IO.Log.ReservationCollection.IsReadOnly*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: ReservationCollection.IsReadOnly
- uid: System.IO.Log.ReservationCollection.MakeReservation*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: MakeReservation
  nameWithType: ReservationCollection.MakeReservation
- uid: System.IO.Log.ReservationCollection.Remove*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: Remove
  nameWithType: ReservationCollection.Remove
- uid: System.IO.Log.ReservationCollection.ReservationFreed*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: ReservationFreed
  nameWithType: ReservationCollection.ReservationFreed
- uid: System.IO.Log.ReservationCollection.ReservationMade*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: ReservationMade
  nameWithType: ReservationCollection.ReservationMade
- uid: System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.IO.Log.ReservationCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ReservationCollection.System.Collections.IEnumerable.GetEnumerator
