### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.IServiceBehavior
  id: IServiceBehavior
  children:
  - System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  - System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  - System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  langs:
  - csharp
  name: IServiceBehavior
  nameWithType: IServiceBehavior
  fullName: System.ServiceModel.Description.IServiceBehavior
  type: Interface
  summary: "変更、または、サービス全体にわたるカスタム拡張機能を挿入するメカニズムを提供など、 <xref href=&quot;System.ServiceModel.ServiceHostBase&quot;></xref>です。"
  remarks: "変更、確認、またはアプリケーション レベルでサービス全体の実行の一部の側面を拡張する IServiceBehavior を実装する:-を使用して、<xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>メソッド実行時にプロパティ値を変更したり、エラー ハンドラー、メッセージ インターセプター、パラメーター インターセプター、セキュリティ拡張機能、およびその他のカスタム拡張オブジェクトなどのカスタム拡張オブジェクトを挿入します</xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>。      -を使用して、<xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>する前に説明を検査するメソッド[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]を正しく実行できることを確認の実行中のサービスを構築します</xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>。      -を使用して、<xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>メソッドは、サービスを正しくサポートできるように、サービスのカスタム情報をバインド要素に成功します</xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>。       IServiceBehavior オブジェクトで行うことができますが重要です&1; つだけが、多くの場合、これらのメソッドのいずれかの使用。このような場合に使用されないメソッドは値のない返すことができます。      > [!NOTE] > IServiceBehavior メソッドの一部を渡す<xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>と<xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>オブジェクトをパラメーターとして</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName></xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>。 <xref:System.ServiceModel.Description.ServiceDescription>パラメーターは、検査にのみですこれらのオブジェクトを変更する場合、実行の動作が定義されていません。</xref:System.ServiceModel.Description.ServiceDescription> 。       想定されているカスタマイズ タスクを実行するに IServiceBehavior オブジェクトを追加、<xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>サービス ランタイムの構築の前にプロパティ</xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>。 これを行う&3; つの方法があります: - プログラムでのカスタム サービス動作を追加、 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>、ポイントする前にプロパティを<xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName>でメソッドが呼び出さ、<xref:System.ServiceModel.ServiceHost?displayProperty=fullName>オブジェクト</xref:System.ServiceModel.ServiceHost?displayProperty=fullName></xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName></xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>。      -IServiceBehavior を実装するカスタム属性を作成し、それを使用して変更するサービス クラスをマークします。 ときに、<xref:System.ServiceModel.ServiceHost>オブジェクトを構築すると、[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]リフレクションを使用して、サービスの種類の属性を検出します</xref:System.ServiceModel.ServiceHost>。 任意の属性は、IServiceBehavior を実装する場合<xref:System.ServiceModel.Description.ServiceDescription>。</xref:System.ServiceModel.Description.ServiceDescription>動作コレクションに追加されます。      -拡張、<xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>アプリケーションまたはマシン構成ファイルで動作の仕様をサポートするクラス</xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>。 詳細については、例を参照してください。       サービス動作の例[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]が含まれて、<xref:System.ServiceModel.ServiceBehaviorAttribute>属性、 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName>、<xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName>と<xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName>動作</xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName></xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName></xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName></xref:System.ServiceModel.ServiceBehaviorAttribute>。"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following IServiceBehavior implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public interface IServiceBehavior
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  id: AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "コントラクトの実装をサポートするために要素をバインディングにカスタム データを渡す機能を提供します。"
  remarks: "AddBindingParameters メソッドを使用するカスタム データ オブジェクトを追加して、`parameters`コントラクトをサポートするようにする追加の情報取得に使用できるバインド要素コレクション。       このメソッドはリッスン URI ごとに&1; 回呼び出されます。 たとえば、サービスに&4; つのエンドポイントが&2; つの場合リッスン URI が同じ、このメソッドが&3; 回呼び出されますを取得します。 その理由は、`bindingParameters`各チャネル スタックをターゲットし、リッスン URI ごとに&1; つのチャネル スタックがあります。 各 get、1 つを呼び出す&2; つの各呼び出しは、リッスン URI にそのエンドポイントを受信するため<xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>、1 回の呼び出しは、2 つのコレクションを取得および<xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>オブジェクト</xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName></xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>。      > [!NOTE] > のすべての<xref:System.ServiceModel.Description.IServiceBehavior>メソッドが成功<xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>と<xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>オブジェクトをパラメーターとして</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName></xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName></xref:System.ServiceModel.Description.IServiceBehavior>。 <xref:System.ServiceModel.Description.ServiceDescription>パラメーターは、のみのカスタマイズの検査および挿入ですそれ以外の場合、これらのオブジェクトを変更する場合、実行の動作が定義されていません。</xref:System.ServiceModel.Description.ServiceDescription> 。"
  syntax:
    content: public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "サービスのサービスの説明。"
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "サービスのホスト。"
    - id: endpoints
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
      description: "サービス エンドポイント。"
    - id: bindingParameters
      type: System.ServiceModel.Channels.BindingParameterCollection
      description: "バインド要素がアクセスするカスタム オブジェクト。"
  overload: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "実行時のプロパティの値を変更またはエラー ハンドラー、メッセージ インターセプター、パラメーター インターセプター、セキュリティ拡張機能、およびその他のカスタム拡張オブジェクトなどのカスタム拡張オブジェクトを挿入する機能を提供します。"
  remarks: "検査または変更するには、ApplyDispatchBehavior メソッドを実装、<xref:System.ServiceModel.ServiceHostBase>一部のカスタム実行シナリオをサポートするために構築されるオブジェクト</xref:System.ServiceModel.ServiceHostBase>。      > [!NOTE] > のすべての<xref:System.ServiceModel.Description.IServiceBehavior>メソッドが成功<xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>と<xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>オブジェクトをパラメーターとして</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName></xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName></xref:System.ServiceModel.Description.IServiceBehavior>。 <xref:System.ServiceModel.Description.ServiceDescription>パラメーターは、のみのカスタマイズの検査および挿入ですそれ以外の場合、これらのオブジェクトを変更する場合、実行の動作が定義されていません。</xref:System.ServiceModel.Description.ServiceDescription> 。"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "サービスの説明。"
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "現在構築中のホスト。"
  overload: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "サービス ホストを検査して、サービスが正常に実行できることを確認するサービスの説明を提供します。"
  remarks: "現在のサービスが、シナリオに従って正しく実行できるかどうかを確認するのにには、タスクの Validate メソッドを使用します。      > [!NOTE] > のすべての<xref:System.ServiceModel.Description.IServiceBehavior>メソッドが成功<xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>と<xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>オブジェクトをパラメーターとして</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName></xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName></xref:System.ServiceModel.Description.IServiceBehavior>。 <xref:System.ServiceModel.Description.ServiceDescription>パラメーターは、のみのカスタマイズの検査および挿入ですそれ以外の場合、これらのオブジェクトを変更する場合、実行の動作が定義されていません。</xref:System.ServiceModel.Description.ServiceDescription> 。"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "サービスの説明。"
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "現在構築中のサービス ホスト。"
  overload: System.ServiceModel.Description.IServiceBehavior.Validate*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
- uid: System.ServiceModel.Description.ServiceDescription
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceDescription
  nameWithType: ServiceDescription
  fullName: System.ServiceModel.Description.ServiceDescription
- uid: System.ServiceModel.ServiceHostBase
  parent: System.ServiceModel
  isExternal: false
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: System.ServiceModel.ServiceHostBase
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ServiceEndpoint>
  nameWithType: Collection<ServiceEndpoint>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.ServiceEndpoint>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.ServiceEndpoint
    name: ServiceEndpoint
    nameWithType: ServiceEndpoint
    fullName: ServiceEndpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Channels.BindingParameterCollection
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingParameterCollection
  nameWithType: BindingParameterCollection
  fullName: System.ServiceModel.Channels.BindingParameterCollection
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters
  nameWithType: IServiceBehavior.AddBindingParameters
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior
  nameWithType: IServiceBehavior.ApplyDispatchBehavior
- uid: System.ServiceModel.Description.IServiceBehavior.Validate*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate
  nameWithType: IServiceBehavior.Validate
