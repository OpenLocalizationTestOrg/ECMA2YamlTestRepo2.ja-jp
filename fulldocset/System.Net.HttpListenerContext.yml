### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerContext
  id: HttpListenerContext
  children:
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  - System.Net.HttpListenerContext.Request
  - System.Net.HttpListenerContext.Response
  - System.Net.HttpListenerContext.User
  langs:
  - csharp
  name: HttpListenerContext
  nameWithType: HttpListenerContext
  fullName: System.Net.HttpListenerContext
  type: Class
  summary: "によって使用される要求と応答のオブジェクトへのアクセスを提供、 <xref href=&quot;System.Net.HttpListener&quot;> </xref>クラスです。 このクラスは継承できません。"
  remarks: "このクラスによって処理されているクライアントのハイパー テキスト転送プロトコル (HTTP) の要求に関連する情報を提供する<xref:System.Net.HttpListener>オブジェクト</xref:System.Net.HttpListener>。 このクラスもできるようにするメソッドには、 <xref:System.Net.HttpListener>WebSocket の接続を許可するオブジェクト</xref:System.Net.HttpListener>。       <xref:System.Net.HttpListener.GetContext%2A>メソッドは、HttpListenerContext クラスのインスタンスを返します。</xref:System.Net.HttpListener.GetContext%2A> クライアント要求を表すオブジェクトを取得するを使用して、<xref:System.Net.HttpListenerContext.Request%2A>プロパティ</xref:System.Net.HttpListenerContext.Request%2A>。 によってクライアントに送信される応答を表すオブジェクトを取得する、<xref:System.Net.HttpListener>を使用して、<xref:System.Net.HttpListenerContext.Response%2A>プロパティ</xref:System.Net.HttpListenerContext.Response%2A></xref:System.Net.HttpListener>。 ユーザーのログイン名とするかどうか、認証されてなどの要求を送信するクライアントに関する情報を取得するプロパティを照会することができます、<xref:System.Security.Principal.IPrincipal>オブジェクトによって返される、<xref:System.Net.HttpListenerContext.User%2A>プロパティ</xref:System.Net.HttpListenerContext.User%2A></xref:System.Security.Principal.IPrincipal>。       HttpListenerContext オブジェクトを閉じて、クライアントに応答を送信し、HttpListenerContext で使用されたリソースを解放します。 既に送信されていない、し、HttpListenerContext で使用されたリソースを解放する場合は、クライアントへの応答を破棄 HttpListenerContext オブジェクトを中止します。 後の終了または停止 HttpListenerContext オブジェクト、そのメソッドまたはプロパティを参照できません。 これを行う場合が表示されます、<xref:System.ObjectDisposedException>例外です</xref:System.ObjectDisposedException>。"
  example:
  - "The following code example displays the user information for a client request.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/t-system.net.httplistene_0_1.cs)]"
  syntax:
    content: public sealed class HttpListenerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  id: AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "非同期操作として WebSocket 接続を受け入れます。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、WebSocket 接続が許可された後に完了します</xref:System.Threading.Tasks.Task%601>。       受信バッファーのサイズは、16,385 バイトです。 WebSocket キープ アライブ間隔は 30,000 (30 秒) の既定値に設定されます。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol);
    parameters:
    - id: subProtocol
      type: System.String
      description: "サポートされている WebSocket サブプロトコル。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;です。       非同期操作を表すタスク オブジェクト。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;タスク オブジェクトのプロパティを返します、 <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref>オブジェクト。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>空の文字列 - または -<code>subProtocol</code>無効な文字が含まれています。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "WebSocket のハンドシェイクを完了する応答を送信するときにエラーが発生しました。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "非同期操作として、サポートされている WebSocket サブプロトコルと WebSocket キープ アライブ間隔を指定する WebSocket 接続を受け入れます。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、WebSocket 接続が許可された後に完了します</xref:System.Threading.Tasks.Task%601>。       受信バッファーのサイズは、16,385 バイトです。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "サポートされている WebSocket サブプロトコル。"
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket プロトコル キープ アライブ間隔 (ミリ秒単位)。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;です。       非同期操作を表すタスク オブジェクト。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;タスク オブジェクトのプロパティを返します、 <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref>オブジェクト。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>空の文字列 - または -<code>subProtocol</code>無効な文字が含まれています。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>小さすぎます。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "WebSocket のハンドシェイクを完了する応答を送信するときにエラーが発生しました。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "WebSocket の接続をサポートされている WebSocket サブプロトコルを指定する許可、バッファー サイズ、および非同期操作として WebSocket キープ アライブ間隔を受信します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、WebSocket 接続が許可された後に完了します</xref:System.Threading.Tasks.Task%601>。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "サポートされている WebSocket サブプロトコル。"
    - id: receiveBufferSize
      type: System.Int32
      description: "受信バッファー サイズ (バイト単位)。"
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket プロトコル キープ アライブ間隔 (ミリ秒単位)。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;です。       非同期操作を表すタスク オブジェクト。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;タスク オブジェクトのプロパティを返します、 <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref>オブジェクト。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>空の文字列 - または -<code>subProtocol</code>無効な文字が含まれています。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>小さすぎます。       - または -<code>receiveBufferSize</code>は 16 バイト未満です - または - <code>receiveBufferSize</code> 64 K バイトより大きい。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "WebSocket のハンドシェイクを完了する応答を送信するときにエラーが発生しました。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "WebSocket の接続をサポートされている WebSocket サブプロトコルを指定する許可、バッファー サイズ、WebSocket キープ アライブ間隔、および非同期操作として内部バッファーを受信します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、WebSocket 接続が許可された後に完了します</xref:System.Threading.Tasks.Task%601>。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment<byte> internalBuffer);
    parameters:
    - id: subProtocol
      type: System.String
      description: "サポートされている WebSocket サブプロトコル。"
    - id: receiveBufferSize
      type: System.Int32
      description: "受信バッファー サイズ (バイト単位)。"
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket プロトコル キープ アライブ間隔 (ミリ秒単位)。"
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "この操作に使用する内部バッファーです。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;です。       非同期操作を表すタスク オブジェクト。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;タスク オブジェクトのプロパティを返します、 <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref>オブジェクト。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>空の文字列 - または -<code>subProtocol</code>無効な文字が含まれています。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>小さすぎます。       - または -<code>receiveBufferSize</code>は 16 バイト未満です - または - <code>receiveBufferSize</code> 64 K バイトより大きい。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "WebSocket のハンドシェイクを完了する応答を送信するときにエラーが発生しました。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Request
  id: Request
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得、 <xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref>リソースのクライアントの要求を表すです。"
  remarks: "これを閉じた場合<xref:System.Net.HttpListenerContext>、これは応答を送信、クライアントを閉じて、<xref:System.Net.HttpListenerResponse>応答、および閉じるを格納している、<xref:System.Net.HttpListenerRequest>このプロパティによって返されるオブジェクト</xref:System.Net.HttpListenerRequest></xref:System.Net.HttpListenerResponse></xref:System.Net.HttpListenerContext>。"
  example:
  - "The following code example demonstrates calling this method. The `listener` variable holds an <xref:System.Net.HttpListener> object.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_16_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerRequest Request { get; }
    return:
      type: System.Net.HttpListenerRequest
      description: "<xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref>クライアント要求を表すオブジェクト。"
  overload: System.Net.HttpListenerContext.Request*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Response
  id: Response
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得、 <xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref>クライアントの要求に対する応答でクライアントに送信されるオブジェクト。"
  remarks: "プロパティを設定して、アプリケーションが応答を構成、<xref:System.Net.HttpListenerResponse>このプロパティによって返されるオブジェクト</xref:System.Net.HttpListenerResponse>。 応答を構成した後に送信するクライアントを応答を終了するかによって、これを閉じる<xref:System.Net.HttpListenerContext>オブジェクト</xref:System.Net.HttpListenerContext>。"
  example:
  - "The following code example demonstrates getting the response to a client's request and adding the response body.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_35_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerResponse Response { get; }
    return:
      type: System.Net.HttpListenerResponse
      description: "<xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref>オブジェクトが、クライアントへの応答を送信するために使用します。"
  overload: System.Net.HttpListenerContext.Response*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.User
  id: User
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "これによって表される要求がクライアントの id、認証情報、およびセキュリティ ロールを取得するためのオブジェクトを取得<xref href=&quot;System.Net.HttpListenerContext&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Net.HttpListener>を使用して認証が必要なことを示す、<xref:System.Net.HttpListener.AuthenticationSchemes%2A>プロパティかを指定して、<xref:System.Net.AuthenticationSchemeSelector>委任を使用して、<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>プロパティ</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A></xref:System.Net.AuthenticationSchemeSelector></xref:System.Net.HttpListener.AuthenticationSchemes%2A></xref:System.Net.HttpListener>。       クライアントのログイン名と認証情報を確認するには<xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>このプロパティによって返されるオブジェクトのプロパティ</xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>。"
  example:
  - "The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/p-system.net.httplistene_19_1.cs)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>、クライアントを記述するオブジェクトまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Net.HttpListener&quot;> </xref>を提供した<xref href=&quot;System.Net.HttpListenerContext&quot;></xref>認証を必要としません</xref:System.Security.Principal.IPrincipal>。"
  overload: System.Net.HttpListenerContext.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.WebSockets.WebSocketException
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketException
  nameWithType: WebSocketException
  fullName: System.Net.WebSockets.WebSocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpListenerWebSocketContext>
  nameWithType: Task<HttpListenerWebSocketContext>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.HttpListenerWebSocketContext
    name: HttpListenerWebSocketContext
    nameWithType: HttpListenerWebSocketContext
    fullName: HttpListenerWebSocketContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerContext.Request
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
- uid: System.Net.HttpListenerRequest
  parent: System.Net
  isExternal: false
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
- uid: System.Net.HttpListenerContext.Response
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
- uid: System.Net.HttpListenerResponse
  parent: System.Net
  isExternal: false
  name: HttpListenerResponse
  nameWithType: HttpListenerResponse
  fullName: System.Net.HttpListenerResponse
- uid: System.Net.HttpListenerContext.User
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync
  nameWithType: HttpListenerContext.AcceptWebSocketAsync
- uid: System.Net.HttpListenerContext.Request*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
- uid: System.Net.HttpListenerContext.Response*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
- uid: System.Net.HttpListenerContext.User*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
