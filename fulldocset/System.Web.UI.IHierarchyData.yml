### YamlMime:ManagedReference
items:
- uid: System.Web.UI.IHierarchyData
  id: IHierarchyData
  children:
  - System.Web.UI.IHierarchyData.GetChildren
  - System.Web.UI.IHierarchyData.GetParent
  - System.Web.UI.IHierarchyData.HasChildren
  - System.Web.UI.IHierarchyData.Item
  - System.Web.UI.IHierarchyData.Path
  - System.Web.UI.IHierarchyData.Type
  langs:
  - csharp
  name: IHierarchyData
  nameWithType: IHierarchyData
  fullName: System.Web.UI.IHierarchyData
  type: Interface
  summary: "ノードのオブジェクトと、ノードの特性を説明するいくつかのプロパティを含む、階層データ構造のノードを公開します。 IHierarchyData インターフェイスを実装するオブジェクトに格納できる<xref href=&quot;System.Web.UI.IHierarchicalEnumerable&quot;></xref>コレクション、され、使用される ASP.NET サイト ナビゲーションおよびデータ ソース コントロール。"
  remarks: "IHierarchyData インターフェイスは、階層構造のノードを表すし、その親と子ノードへの階層リレーションシップを追跡するクラスによって実装されます。 IHierarchyData インターフェイスを実装するクラスが実装するコレクションに含まれていることができます、<xref:System.Web.UI.IHierarchicalEnumerable>インターフェイス</xref:System.Web.UI.IHierarchicalEnumerable>。"
  example:
  - "The following code example demonstrates how to implement the IHierarchyData interface with a class that wraps a <xref:System.IO.FileSystemInfo> object. The <xref:System.IO.FileSystemInfo> class is a good example of a hierarchical data node, which the IHierarchyData interface represents for ASP.NET hierarchical data source controls. This code example is part of a larger example provided for the <xref:System.Web.UI.HierarchicalDataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.FileSystemDataSource_1#5](~/add/codesnippet/csharp/t-system.web.ui.ihierarc_0_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#5](~/add/codesnippet/visualbasic/t-system.web.ui.ihierarc_0_1.vb)]  \n  \n The following code example demonstrates how to recursively iterate through an <xref:System.Web.UI.IHierarchicalEnumerable> collection, extract the IHierarchyData item from the enumerator using the <xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A> method, and perform basic work with the data item.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#1](~/add/codesnippet/csharp/t-system.web.ui.ihierarc_0_2.aspx)]\n [!code-vb[System.Web.UI.IHierarchyData_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.ihierarc_0_2.aspx)]"
  syntax:
    content: public interface IHierarchyData
  implements: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.GetChildren
  id: GetChildren
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: GetChildren()
  nameWithType: IHierarchyData.GetChildren()
  fullName: System.Web.UI.IHierarchyData.GetChildren()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "現在の階層ノードのすべての子ノードを表す列挙オブジェクトを取得します。"
  remarks: "使用することができます、<xref:System.Web.UI.IHierarchyData.HasChildren%2A>プロパティを決定するかどうか、<xref:System.Web.UI.IHierarchyData>ノードが子ノード</xref:System.Web.UI.IHierarchyData></xref:System.Web.UI.IHierarchyData.HasChildren%2A>。"
  example:
  - "The following code example demonstrates how to check the <xref:System.Web.UI.IHierarchyData.HasChildren%2A> property to determine whether the current hierarchical data node has child nodes, and retrieve them using the GetChildren method. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/csharp/m-system.web.ui.ihierarc_3_1.cs)]\n [!code-vb[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/visualbasic/m-system.web.ui.ihierarc_3_1.vb)]"
  syntax:
    content: public System.Web.UI.IHierarchicalEnumerable GetChildren ();
    parameters: []
    return:
      type: System.Web.UI.IHierarchicalEnumerable
      description: "<xref href=&quot;System.Web.UI.IHierarchicalEnumerable&quot;> </xref>現在の階層ノードの子ノードのコレクション。"
  overload: System.Web.UI.IHierarchyData.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.GetParent
  id: GetParent
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: GetParent()
  nameWithType: IHierarchyData.GetParent()
  fullName: System.Web.UI.IHierarchyData.GetParent()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "取得、 <xref href=&quot;System.Web.UI.IHierarchyData&quot;> </xref>を現在の階層ノードの親ノードを表すオブジェクト。"
  remarks: "<xref:System.Web.UI.IHierarchyData>インターフェイスが呼び出し元が GetParent メソッドの戻り値をチェックする必要がありますので HasParent 便利なプロパティでは、定義されません`null`を決定するかどうか、現在<xref:System.Web.UI.IHierarchyData>ノード、ノードが属している、階層データ構造のルート ノードです</xref:System.Web.UI.IHierarchyData></xref:System.Web.UI.IHierarchyData>。"
  example:
  - "The following code example demonstrates how to implement the GetParent method in a class that implements the <xref:System.Web.UI.IHierarchyData> interface. The `FileSystemHierarchyData` class wraps a <xref:System.IO.FileSystemInfo> object, and the GetParent method implementation checks the type of the <xref:System.IO.FileSystemInfo> object, and returns the appropriate parent object based on the type. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface and the <xref:System.Web.UI.HierarchicalDataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.FileSystemDataSource_1#10](~/add/codesnippet/csharp/m-system.web.ui.ihierarc_1_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#10](~/add/codesnippet/visualbasic/m-system.web.ui.ihierarc_1_1.vb)]"
  syntax:
    content: public System.Web.UI.IHierarchyData GetParent ();
    parameters: []
    return:
      type: System.Web.UI.IHierarchyData
      description: "<xref href=&quot;System.Web.UI.IHierarchyData&quot;> </xref>を現在の階層ノードの親ノードを表すオブジェクト。"
  overload: System.Web.UI.IHierarchyData.GetParent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.HasChildren
  id: HasChildren
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: HasChildren
  nameWithType: IHierarchyData.HasChildren
  fullName: System.Web.UI.IHierarchyData.HasChildren
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "示すかどうか、階層的なデータ ノードを<xref href=&quot;System.Web.UI.IHierarchyData&quot;></xref>を表すオブジェクトを持つすべての子ノードです。"
  remarks: "HasChildren プロパティは、呼び出し元の戻り値のチェックを避けるためにできるようにする便利なプロパティ、<xref:System.Web.UI.IHierarchyData.GetChildren%2A>メソッド`null`</xref:System.Web.UI.IHierarchyData.GetChildren%2A>。 HasChildren プロパティを返す場合`true`を呼び出し、<xref:System.Web.UI.IHierarchyData.GetChildren%2A>を取得する方法、<xref:System.Web.UI.IHierarchicalEnumerable>子ノードのコレクション</xref:System.Web.UI.IHierarchicalEnumerable></xref:System.Web.UI.IHierarchyData.GetChildren%2A>。"
  example:
  - "The following code example demonstrates how an ASP.NET hierarchical data-bound control uses an <xref:System.Web.UI.IHierarchyData> object in a recursive data-binding method. The items in an <xref:System.Web.UI.IHierarchicalEnumerable> collection are enumerated, and for each an <xref:System.Web.UI.IHierarchyData> object is retrieved using the <xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A> method. Finally, the HasChildren property is checked to determine whether to recurse. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.HierarchicalDataBoundControl> class.  \n  \n [!code-vb[Samples.AspNet.GeneologyTree#5](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_3_1.vb)]\n [!code-cs[Samples.AspNet.GeneologyTree#5](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_3_1.cs)]"
  syntax:
    content: public bool HasChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>現在のノードに子ノードがある場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.IHierarchyData.HasChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.Item
  id: Item
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: Item
  nameWithType: IHierarchyData.Item
  fullName: System.Web.UI.IHierarchyData.Item
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "階層的なデータ ノードを取得、 <xref href=&quot;System.Web.UI.IHierarchyData&quot;> </xref>オブジェクトを表します。"
  remarks: "多くのクラスなど、階層的なデータ ノードを表すときに、<xref:System.Web.SiteMapNode>クラスを実装、<xref:System.Web.UI.IHierarchyData>インターフェイスを直接、その他のクラスは、インターフェイスが実装されているクラスのラッパーとしてのみ機能します</xref:System.Web.UI.IHierarchyData></xref:System.Web.SiteMapNode>。 ビジネス オブジェクトが機能的に等価の場合、これらのデザインの状況では、項目のプロパティが提供される、<xref:System.Web.UI.IHierarchyData>オブジェクトが、簡単に再設計することはできません</xref:System.Web.UI.IHierarchyData>。"
  example:
  - "The following code example demonstrates how to access <xref:System.Web.UI.IHierarchyData> properties, check the type of an <xref:System.Web.UI.IHierarchyData> object using the <xref:System.Web.UI.IHierarchyData.Type%2A> property, and cast the object to perform more type-specific operations. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_1_1.cs)]\n [!code-vb[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_1_1.vb)]"
  syntax:
    content: public object Item { get; }
    return:
      type: System.Object
      description: "<xref:System.Object>階層的なデータ ノード オブジェクト</xref:System.Object>。"
  overload: System.Web.UI.IHierarchyData.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.Path
  id: Path
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: Path
  nameWithType: IHierarchyData.Path
  fullName: System.Web.UI.IHierarchyData.Path
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "ノードの階層パスを取得します。"
  remarks: "Path プロパティは、<xref:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView%2A><xref:System.Web.UI.HierarchicalDataSourceView>パスで識別されるノードに対応するオブジェクト</xref:System.Web.UI.HierarchicalDataSourceView>を取得するメソッド</xref:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView%2A>に渡すことができます。      > [!CAUTION] > Path プロパティを含めないでホスト環境に関する機密情報がデータ バインド コントロール内のクライアントに表示されるためです。"
  example:
  - "The following code example demonstrates how to implement the Path property in a class that implements the <xref:System.Web.UI.IHierarchyData> interface. The `FileSystemHierarchyData` class wraps a <xref:System.IO.FileSystemInfo> object, and the Path property implementation returns its file system path. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface and the <xref:System.Web.UI.HierarchicalDataSourceControl> class.  \n  \n [!code-cs[Urtue.Samples.Alexkr.FileSystemDataSource_1#7](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_0_1.cs)]\n [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#7](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_0_1.vb)]"
  syntax:
    content: public string Path { get; }
    return:
      type: System.String
      description: "A <xref:System.String>、階層的な基準としたパス、現在のノードを識別します</xref:System.String>。"
  overload: System.Web.UI.IHierarchyData.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.IHierarchyData.Type
  id: Type
  parent: System.Web.UI.IHierarchyData
  langs:
  - csharp
  name: Type
  nameWithType: IHierarchyData.Type
  fullName: System.Web.UI.IHierarchyData.Type
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "型の名前を取得<xref:System.Object>に含まれている、<xref:System.Web.UI.IHierarchyData.Item*>プロパティ</xref:System.Web.UI.IHierarchyData.Item*></xref:System.Object>。"
  remarks: "Type プロパティが返されません、<xref:System.Type?displayProperty=fullName>で表されるオブジェクトの<xref:System.Web.UI.IHierarchyData>オブジェクト</xref:System.Web.UI.IHierarchyData></xref:System.Type?displayProperty=fullName>。 別のバインド可能なプロパティを持つ階層内の項目を区別するためにデータ バインド コントロールで使用される名前を返します。"
  example:
  - "The following code example demonstrates how to write the basic <xref:System.Web.UI.IHierarchyData> properties to an <xref:System.Web.HttpResponse> stream, then check the type of an <xref:System.Web.UI.IHierarchyData> object using the Type property and cast the object to perform more type-specific operations. This code example is part of a larger example provided for the <xref:System.Web.UI.IHierarchyData> interface.  \n  \n [!code-cs[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/csharp/p-system.web.ui.ihierarc_2_1.cs)]\n [!code-vb[System.Web.UI.IHierarchyData_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.ihierarc_2_1.vb)]"
  syntax:
    content: public string Type { get; }
    return:
      type: System.String
      description: "オブジェクトの種類の名前、 <xref href=&quot;System.Web.UI.IHierarchyData&quot;> </xref>オブジェクトを表します。"
  overload: System.Web.UI.IHierarchyData.Type*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.IHierarchyData.GetChildren
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetChildren()
  nameWithType: IHierarchyData.GetChildren()
  fullName: System.Web.UI.IHierarchyData.GetChildren()
- uid: System.Web.UI.IHierarchicalEnumerable
  parent: System.Web.UI
  isExternal: false
  name: IHierarchicalEnumerable
  nameWithType: IHierarchicalEnumerable
  fullName: System.Web.UI.IHierarchicalEnumerable
- uid: System.Web.UI.IHierarchyData.GetParent
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetParent()
  nameWithType: IHierarchyData.GetParent()
  fullName: System.Web.UI.IHierarchyData.GetParent()
- uid: System.Web.UI.IHierarchyData
  parent: System.Web.UI
  isExternal: false
  name: IHierarchyData
  nameWithType: IHierarchyData
  fullName: System.Web.UI.IHierarchyData
- uid: System.Web.UI.IHierarchyData.HasChildren
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: HasChildren
  nameWithType: IHierarchyData.HasChildren
  fullName: System.Web.UI.IHierarchyData.HasChildren
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.IHierarchyData.Item
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Item
  nameWithType: IHierarchyData.Item
  fullName: System.Web.UI.IHierarchyData.Item
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.IHierarchyData.Path
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Path
  nameWithType: IHierarchyData.Path
  fullName: System.Web.UI.IHierarchyData.Path
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.IHierarchyData.Type
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Type
  nameWithType: IHierarchyData.Type
  fullName: System.Web.UI.IHierarchyData.Type
- uid: System.Web.UI.IHierarchyData.GetChildren*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetChildren
  nameWithType: IHierarchyData.GetChildren
- uid: System.Web.UI.IHierarchyData.GetParent*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: GetParent
  nameWithType: IHierarchyData.GetParent
- uid: System.Web.UI.IHierarchyData.HasChildren*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: HasChildren
  nameWithType: IHierarchyData.HasChildren
- uid: System.Web.UI.IHierarchyData.Item*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Item
  nameWithType: IHierarchyData.Item
- uid: System.Web.UI.IHierarchyData.Path*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Path
  nameWithType: IHierarchyData.Path
- uid: System.Web.UI.IHierarchyData.Type*
  parent: System.Web.UI.IHierarchyData
  isExternal: false
  name: Type
  nameWithType: IHierarchyData.Type
