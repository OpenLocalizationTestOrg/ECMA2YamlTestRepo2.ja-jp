### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.VoiceInfo
  id: VoiceInfo
  children:
  - System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  - System.Speech.Synthesis.VoiceInfo.Age
  - System.Speech.Synthesis.VoiceInfo.Culture
  - System.Speech.Synthesis.VoiceInfo.Description
  - System.Speech.Synthesis.VoiceInfo.Equals(System.Object)
  - System.Speech.Synthesis.VoiceInfo.Gender
  - System.Speech.Synthesis.VoiceInfo.GetHashCode
  - System.Speech.Synthesis.VoiceInfo.Id
  - System.Speech.Synthesis.VoiceInfo.Name
  - System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  langs:
  - csharp
  name: VoiceInfo
  nameWithType: VoiceInfo
  fullName: System.Speech.Synthesis.VoiceInfo
  type: Class
  summary: "インストールされている音声合成エンジンを表します。"
  remarks: "音声は、音声合成エンジンまたは音声合成エンジンとも呼びますがインストールされている音声合成エンジンです。 <xref:System.Speech.Synthesis.SpeechSynthesizer>オブジェクトでは、音声を使用して、テキストから音声を生成する</xref:System.Speech.Synthesis.SpeechSynthesizer>。 VoiceInfo オブジェクトのプロパティは、音声を見つけて、その特性を説明します。 音声の最も定義特性がその<xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>、声で話すことができ、1 つの言語を定義します</xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>。       <xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A>プロパティ<xref:System.Speech.Synthesis.SpeechSynthesizer>。</xref:System.Speech.Synthesis.SpeechSynthesizer>で使用中の現在の音声に関する情報を含む VoiceInfo オブジェクトを返します</xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A> に関する情報を取得、システムにインストールされている音声のいずれかによって返される VoiceInfo オブジェクトを使用することもできます、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices>メソッド</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices>。 参照してください<xref:System.Speech.Synthesis.InstalledVoice>詳細についてはします</xref:System.Speech.Synthesis.InstalledVoice>。"
  example:
  - "The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Output information about all of the installed voices.   \n        Console.WriteLine(\"Installed voices -\");  \n        foreach (InstalledVoice voice in synth.GetInstalledVoices())  \n        {  \n          VoiceInfo info = voice.VoiceInfo;  \n          string AudioFormats = \"\";  \n          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  \n          {  \n            AudioFormats += String.Format(\"{0}\\n\",  \n            fmt.EncodingFormat.ToString());  \n          }  \n  \n          Console.WriteLine(\" Name:          \" + info.Name);  \n          Console.WriteLine(\" Culture:       \" + info.Culture);  \n          Console.WriteLine(\" Age:           \" + info.Age);  \n          Console.WriteLine(\" Gender:        \" + info.Gender);  \n          Console.WriteLine(\" Description:   \" + info.Description);  \n          Console.WriteLine(\" ID:            \" + info.Id);  \n          Console.WriteLine(\" Enabled:       \" + voice.Enabled);  \n          if (info.SupportedAudioFormats.Count != 0)  \n          {  \n            Console.WriteLine( \" Audio formats: \" + AudioFormats);  \n          }  \n          else  \n          {  \n            Console.WriteLine(\" No supported audio formats found\");  \n          }  \n  \n          string AdditionalInfo = \"\";  \n          foreach (string key in info.AdditionalInfo.Keys)  \n          {  \n            AdditionalInfo += String.Format(\"  {0}: {1}\\n\", key, info.AdditionalInfo[key]);  \n          }  \n  \n          Console.WriteLine(\" Additional Info - \" + AdditionalInfo);  \n          Console.WriteLine();  \n        }  \n      }  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{(_name != null ? "'" + _name + "' " : "") +  (_culture != null ? " '" + _culture.ToString () + "' " : "") + (_gender != VoiceGender.NotSet ? " '" + _gender.ToString () + "' " : "") + (_age != VoiceAge.NotSet ? " '" + _age.ToString () + "' " : "") + (_variant > 0 ? " " + _variant.ToString () : "")}")]

      public class VoiceInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  id: AdditionalInfo
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: AdditionalInfo
  nameWithType: VoiceInfo.AdditionalInfo
  fullName: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "音声に関する追加情報を取得します。"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> AdditionalInfo { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "説明および音声を識別する名前/値ペアのコレクションを返します。"
  overload: System.Speech.Synthesis.VoiceInfo.AdditionalInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Age
  id: Age
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Age
  nameWithType: VoiceInfo.Age
  fullName: System.Speech.Synthesis.VoiceInfo.Age
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "音声の年齢を取得します。"
  remarks: "Age プロパティがのメンバーを取得、<xref:System.Speech.Synthesis.VoiceAge>を音声の年齢を示す列挙体です</xref:System.Speech.Synthesis.VoiceAge>。"
  syntax:
    content: public System.Speech.Synthesis.VoiceAge Age { get; }
    return:
      type: System.Speech.Synthesis.VoiceAge
      description: "音声の年齢を返します。"
  overload: System.Speech.Synthesis.VoiceInfo.Age*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Culture
  id: Culture
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Culture
  nameWithType: VoiceInfo.Culture
  fullName: System.Speech.Synthesis.VoiceInfo.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "音声のカルチャを取得します。"
  remarks: "<xref:System.Globalization.CultureInfo>クラスはカルチャごとに一意の名前を指定します</xref:System.Globalization.CultureInfo>。 名前は、言語に関連付けられている ISO 639 2 文字の小文字のカルチャ コードと、ISO 3166 2 文字大文字となり、国または地域に関連付けられているの組み合わせです。 カルチャ名の例にはで話さ&quot;FR-CA&quot;、米国、カナダで話さフランス語の場合、スペイン語の「es 英語 (米国)」が含まれます。 2 桁の数字の小文字の言語コードのみを使用して、ニュートラル カルチャを指定できます。 たとえば、&quot;fr&quot;、フランス語のニュートラル カルチャを指定し、&quot;de&quot;は、ドイツ語のニュートラル カルチャを指定します。"
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; }
    return:
      type: System.Globalization.CultureInfo
      description: "返します、<xref:System.Globalization.CultureInfo>日付形式や文字列の並べ替え方法と、カルチャ、書記体系、使用する暦、名などの特定のカルチャに関する情報を提供するオブジェクト</xref:System.Globalization.CultureInfo>。"
  overload: System.Speech.Synthesis.VoiceInfo.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Description
  id: Description
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Description
  nameWithType: VoiceInfo.Description
  fullName: System.Speech.Synthesis.VoiceInfo.Description
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "音声の説明を取得します。"
  syntax:
    content: public string Description { get; }
    return:
      type: System.String
      description: "音声の説明を返します。"
  overload: System.Speech.Synthesis.VoiceInfo.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: VoiceInfo.Equals(Object)
  fullName: System.Speech.Synthesis.VoiceInfo.Equals(Object)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定した音声のフィールドを比較し<xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;></xref>オブジェクトを同じ値を含んでいるかどうかを判断します。"
  remarks: "Equals メソッドは、<xref:System.Object>パラメーターとして型です</xref:System.Object>。 そのオブジェクトがない場合、<xref:System.Speech.Synthesis.VoiceInfo>型、メソッドを返します`False`</xref:System.Speech.Synthesis.VoiceInfo>。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "指定した<xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;></xref>オブジェクト。"
    return:
      type: System.Boolean
      description: "返します<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>場合、2 つのフィールド<xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;></xref>オブジェクトが等しいそれ以外を返します<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: System.Speech.Synthesis.VoiceInfo.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Gender
  id: Gender
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Gender
  nameWithType: VoiceInfo.Gender
  fullName: System.Speech.Synthesis.VoiceInfo.Gender
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "音声の性別を取得します。"
  remarks: "性別プロパティのメンバーの取得、<xref:System.Speech.Synthesis.VoiceGender>を音声の性別を示す列挙体です</xref:System.Speech.Synthesis.VoiceGender>。"
  syntax:
    content: public System.Speech.Synthesis.VoiceGender Gender { get; }
    return:
      type: System.Speech.Synthesis.VoiceGender
      description: "音声の性別を返します。"
  overload: System.Speech.Synthesis.VoiceInfo.Gender*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode
  id: GetHashCode
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: VoiceInfo.GetHashCode()
  fullName: System.Speech.Synthesis.VoiceInfo.GetHashCode()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "ハッシュ コードを提供する`VoiceInfo`オブジェクト。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "現在のハッシュ コード<xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;></xref>オブジェクト。"
  overload: System.Speech.Synthesis.VoiceInfo.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Id
  id: Id
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Id
  nameWithType: VoiceInfo.Id
  fullName: System.Speech.Synthesis.VoiceInfo.Id
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "音声の ID を取得します。"
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "音声の識別子を返します。"
  overload: System.Speech.Synthesis.VoiceInfo.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Name
  id: Name
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Name
  nameWithType: VoiceInfo.Name
  fullName: System.Speech.Synthesis.VoiceInfo.Name
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "音声の名前を取得します。"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "音声の名前を返します。"
  overload: System.Speech.Synthesis.VoiceInfo.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  id: SupportedAudioFormats
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: SupportedAudioFormats
  nameWithType: VoiceInfo.SupportedAudioFormats
  fullName: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "音声をサポートするオーディオ形式のコレクションを取得します。"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo> SupportedAudioFormats { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.AudioFormat.SpeechAudioFormatInfo}
      description: "音声をサポートするオーディオ形式のコレクションを返します。"
  overload: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: AdditionalInfo
  nameWithType: VoiceInfo.AdditionalInfo
  fullName: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.VoiceInfo.Age
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Age
  nameWithType: VoiceInfo.Age
  fullName: System.Speech.Synthesis.VoiceInfo.Age
- uid: System.Speech.Synthesis.VoiceAge
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceAge
  nameWithType: VoiceAge
  fullName: System.Speech.Synthesis.VoiceAge
- uid: System.Speech.Synthesis.VoiceInfo.Culture
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Culture
  nameWithType: VoiceInfo.Culture
  fullName: System.Speech.Synthesis.VoiceInfo.Culture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Synthesis.VoiceInfo.Description
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Description
  nameWithType: VoiceInfo.Description
  fullName: System.Speech.Synthesis.VoiceInfo.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.VoiceInfo.Equals(System.Object)
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: VoiceInfo.Equals(Object)
  fullName: System.Speech.Synthesis.VoiceInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Synthesis.VoiceInfo.Gender
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Gender
  nameWithType: VoiceInfo.Gender
  fullName: System.Speech.Synthesis.VoiceInfo.Gender
- uid: System.Speech.Synthesis.VoiceGender
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceGender
  nameWithType: VoiceGender
  fullName: System.Speech.Synthesis.VoiceGender
- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: VoiceInfo.GetHashCode()
  fullName: System.Speech.Synthesis.VoiceInfo.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.VoiceInfo.Id
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Id
  nameWithType: VoiceInfo.Id
  fullName: System.Speech.Synthesis.VoiceInfo.Id
- uid: System.Speech.Synthesis.VoiceInfo.Name
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Name
  nameWithType: VoiceInfo.Name
  fullName: System.Speech.Synthesis.VoiceInfo.Name
- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: SupportedAudioFormats
  nameWithType: VoiceInfo.SupportedAudioFormats
  fullName: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.AudioFormat.SpeechAudioFormatInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<SpeechAudioFormatInfo>
  nameWithType: ReadOnlyCollection<SpeechAudioFormatInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.AudioFormat.SpeechAudioFormatInfo
    name: SpeechAudioFormatInfo
    nameWithType: SpeechAudioFormatInfo
    fullName: SpeechAudioFormatInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: AdditionalInfo
  nameWithType: VoiceInfo.AdditionalInfo
- uid: System.Speech.Synthesis.VoiceInfo.Age*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Age
  nameWithType: VoiceInfo.Age
- uid: System.Speech.Synthesis.VoiceInfo.Culture*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Culture
  nameWithType: VoiceInfo.Culture
- uid: System.Speech.Synthesis.VoiceInfo.Description*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Description
  nameWithType: VoiceInfo.Description
- uid: System.Speech.Synthesis.VoiceInfo.Equals*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Equals
  nameWithType: VoiceInfo.Equals
- uid: System.Speech.Synthesis.VoiceInfo.Gender*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Gender
  nameWithType: VoiceInfo.Gender
- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: GetHashCode
  nameWithType: VoiceInfo.GetHashCode
- uid: System.Speech.Synthesis.VoiceInfo.Id*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Id
  nameWithType: VoiceInfo.Id
- uid: System.Speech.Synthesis.VoiceInfo.Name*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Name
  nameWithType: VoiceInfo.Name
- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: SupportedAudioFormats
  nameWithType: VoiceInfo.SupportedAudioFormats
