### YamlMime:ManagedReference
items:
- uid: System.Security.Principal.WindowsIdentity
  id: WindowsIdentity
  children:
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  - System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)
  - System.Security.Principal.WindowsIdentity.#ctor(System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)
  - System.Security.Principal.WindowsIdentity.AccessToken
  - System.Security.Principal.WindowsIdentity.AuthenticationType
  - System.Security.Principal.WindowsIdentity.Claims
  - System.Security.Principal.WindowsIdentity.Clone
  - System.Security.Principal.WindowsIdentity.DefaultIssuer
  - System.Security.Principal.WindowsIdentity.DeviceClaims
  - System.Security.Principal.WindowsIdentity.Dispose
  - System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetAnonymous
  - System.Security.Principal.WindowsIdentity.GetCurrent
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  - System.Security.Principal.WindowsIdentity.Groups
  - System.Security.Principal.WindowsIdentity.Impersonate
  - System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)
  - System.Security.Principal.WindowsIdentity.ImpersonationLevel
  - System.Security.Principal.WindowsIdentity.IsAnonymous
  - System.Security.Principal.WindowsIdentity.IsAuthenticated
  - System.Security.Principal.WindowsIdentity.IsGuest
  - System.Security.Principal.WindowsIdentity.IsSystem
  - System.Security.Principal.WindowsIdentity.Name
  - System.Security.Principal.WindowsIdentity.Owner
  - System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  - System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  - System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Principal.WindowsIdentity.Token
  - System.Security.Principal.WindowsIdentity.User
  - System.Security.Principal.WindowsIdentity.UserClaims
  langs:
  - csharp
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
  type: Class
  summary: "Windows ユーザーを表します。"
  remarks: "呼び出す、<xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A>メソッドを現在のユーザーを表す WindowsIdentity オブジェクトを作成します</xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A>。      > [!IMPORTANT] > この型は、<xref:System.IDisposable>インターフェイス</xref:System.IDisposable>。 型を使用してが完了したらを直接的または間接的にその破棄する必要があります。 型の直接 dispose を呼び出す、<xref:System.IDisposable.Dispose%2A>メソッドで、 `try` / `catch`ブロック</xref:System.IDisposable.Dispose%2A>。 直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(C# の場合) または`Using`(Visual Basic で)。 詳細についてを参照してください&quot;を使用して、オブジェクトを実装する IDisposable&quot;、<xref:System.IDisposable>インターフェイスに関するトピック</xref:System.IDisposable>。"
  example:
  - "The following example shows the use of members of WindowsIdentity class.  For an example showing how to obtain a Windows account token through a call to the unmanaged Win32 `LogonUser` function, and use that token to impersonate another user, see the <xref:System.Security.Principal.WindowsImpersonationContext> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/csharp/t-system.security.princi_5_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/cpp/t-system.security.princi_5_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/visualbasic/t-system.security.princi_5_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class WindowsIdentity : System.Security.Claims.ClaimsIdentity, IDisposable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  - System.Security.Claims.ClaimsIdentity
  implements:
  - System.IDisposable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>指定した Windows アカウント トークンによって表されるユーザー クラスです。"
  remarks: "次の表は、 <xref:System.Security.Principal.WindowsIdentity>。</xref:System.Security.Principal.WindowsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |初期値 |  |--------------|-------------------|  |<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>|`Negotiate`|  |<xref:System.Security.Principal.WindowsAccountType>|`Normal`|  |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|     > [!NOTE] > によって表されるトークンを取得する`userToken`Win32 API などのアンマネージ コードを呼び出すことによって`LogonUser`関数</xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A></xref:System.Security.Principal.WindowsAccountType></xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>。 常にリリース`userToken`Win32 API を呼び出すことによって`CloseHandle`関数。 アンマネージ コードの呼び出しの詳細については、次を参照してください。[アンマネージ DLL 関数の使用](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public WindowsIdentity (IntPtr userToken);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "コードが実行されている対象ユーザーのアカウント トークンです。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>0 です。       - または -<code>userToken</code>が重複しているとの無効な権限を借用します。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、適切なアクセス許可がありません。       または、Win32 エラーが発生しました。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)
  id: '#ctor(System.Security.Principal.WindowsIdentity)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(WindowsIdentity)
  nameWithType: WindowsIdentity.WindowsIdentity(WindowsIdentity)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(WindowsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>クラスを指定して<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>オブジェクト。"
  syntax:
    content: protected WindowsIdentity (System.Security.Principal.WindowsIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.WindowsIdentity
      description: "新しいインスタンスを構築する元のオブジェクト<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>です。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(String)
  nameWithType: WindowsIdentity.WindowsIdentity(String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>によって、指定されたユーザー プリンシパル名 (UPN) で表されるユーザー クラスです。"
  remarks: "UPN 形式には*username*@*domainname*.com、つまり、電子メール アドレス。 識別された UPN `sUserPrincipalName` Win32 API を通じてそのユーザーのトークンの取得に使用される`LsaLogonUser`関数。 さらにそのトークンは、ユーザーの識別に使用されます。 例外は、指定された UPN を使用してログオンすることができないのために返される可能性があります。      > [!NOTE] > このコンス トラクターは、Windows Server 2003 またはそれ以降のドメインに参加しているコンピューターでのみ使用します。 以前のドメインの種類、例外がスローされます。 この制限は、このコンス トラクターを使用しているため、 [KERB_S4U_LOGON 構造](http://go.microsoft.com/fwlink/?LinkId=143533)、最初を Windows Server 2003 で導入されました。"
  syntax:
    content: public WindowsIdentity (string sUserPrincipalName);
    parameters:
    - id: sUserPrincipalName
      type: System.String
      description: "コードが実行されている対象ユーザーの UPN。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows では、Windows NT 状態コード STATUS_ACCESS_DENIED が返されます。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "使用可能なメモリ不足です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、適切なアクセス許可がありません。       または、コンピューターが Windows 2003 またはそれ以降のドメインにアタッチされていません。       - または - 2003 以降、コンピューターが Windows の実行をされていません。       または、ユーザーにコンピューターが接続されているドメインのメンバーではありません。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  id: '#ctor(System.IntPtr,System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr,String)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>指定した Windows アカウント トークンと、指定した認証の種類によって表されるユーザーのクラスです。"
  remarks: "次の表は、 <xref:System.Security.Principal.WindowsIdentity>。</xref:System.Security.Principal.WindowsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |初期値 |  |--------------|-------------------|  |<xref:System.Security.Principal.WindowsAccountType>|`Normal`|  |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|      値、`type`パラメーターが設定に使用される、<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>パラメーター</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> </xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A> </xref:System.Security.Principal.WindowsAccountType> 。 場合`type`は`null`、セキュリティ システム セット<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>を`Negotiate`Windows Vista および Windows オペレーティング システムの以降のバージョンで`Kerberos`以前のバージョンの Windows オペレーティング システムにします</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>。 セキュリティ システムがこの値を使用していません。これは情報のみを使用します。      > [!NOTE] > によって表されるトークンを取得する`userToken`Win32 API などのアンマネージ コードを呼び出すことによって`LogonUser`関数。 常にリリース`userToken`Win32 API を呼び出すことによって`CloseHandle`関数。 アンマネージ コードの呼び出しの詳細については、次を参照してください。[アンマネージ DLL 関数の使用](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.%23ctor%2A> constructor to create a new instance of the  <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token and the specified authentication type. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/csharp/dc54fc11-729f-4337-b932-_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/cpp/dc54fc11-729f-4337-b932-_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/visualbasic/dc54fc11-729f-4337-b932-_1.vb)]"
  syntax:
    content: public WindowsIdentity (IntPtr userToken, string type);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "コードが実行されている対象ユーザーのアカウント トークンです。"
    - id: type
      type: System.String
      description: "(情報でのみ使用します。)ユーザーの識別に使用する認証の種類。 詳細については、「解説」を参照してください。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>0 です。       - または -<code>userToken</code>が重複しているとの無効な権限を借用します。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、適切なアクセス許可がありません。       または、Win32 エラーが発生しました。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>の情報によって表されるユーザー クラス、 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>ストリーム。"
  remarks: >-
    > [!IMPORTANT]

    >  Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).
  syntax:
    content: public WindowsIdentity (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "ユーザーのアカウント情報を格納するオブジェクト。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "ストリーム特性を示すオブジェクトです。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>プロセス間でシリアル化することはできません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、適切なアクセス許可がありません。       または、Win32 エラーが発生しました。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(String,String)
  nameWithType: WindowsIdentity.WindowsIdentity(String,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>ユーザー プリンシパル名 (UPN) と指定した認証の種類、ユーザーが、指定したによって表されるクラスです。"
  remarks: "値、`type`パラメーターが設定に使用される、<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>パラメーター</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> 。 場合`type`は`null`、セキュリティ システム セット<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>を`Negotiate`Windows Vista および Windows オペレーティング システムの以降のバージョンで`Kerberos`以前のバージョンの Windows オペレーティング システムにします</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>。 セキュリティ システムがこの値を使用していません。これは情報のみを使用します。       識別された UPN `sUserPrincipalName` Win32 API を通じてそのユーザーのトークンの取得に使用される`LsaLogonUser`関数。 さらにそのトークンは、ユーザーの識別に使用されます。 例外は、指定された UPN を使用してログオンすることができないのために返される可能性があります。      > [!NOTE] > このコンス トラクターは、Windows Server 2003 またはそれ以降のドメインに参加しているコンピューターでのみ使用します。 以前のドメインの種類、例外がスローされます。 この制限は、このコンス トラクターを使用しているため、 [KERB_S4U_LOGON 構造](http://go.microsoft.com/fwlink/?LinkId=143533)、最初を Windows Server 2003 で導入されました。"
  syntax:
    content: public WindowsIdentity (string sUserPrincipalName, string type);
    parameters:
    - id: sUserPrincipalName
      type: System.String
      description: "コードが実行されている対象ユーザーの UPN。"
    - id: type
      type: System.String
      description: "(情報でのみ使用します。)ユーザーの識別に使用する認証の種類。 詳細については、「解説」を参照してください。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows では、Windows NT 状態コード STATUS_ACCESS_DENIED が返されます。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "使用可能なメモリ不足です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、適切なアクセス許可がありません。       または、コンピューターが Windows 2003 またはそれ以降のドメインにアタッチされていません。       - または - 2003 以降、コンピューターが Windows の実行をされていません。       または、ユーザーにコンピューターが接続されているドメインのメンバーではありません。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)
  id: '#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr,String,WindowsAccountType)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>指定した Windows アカウント トークン、指定した認証の種類、および指定した Windows アカウントの種類によって表されるユーザーのクラスです。"
  remarks: "次の表は、 <xref:System.Security.Principal.WindowsIdentity>。</xref:System.Security.Principal.WindowsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |初期値 |  |--------------|-------------------|  |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|      値、`type`パラメーターが設定に使用される、<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>パラメーター</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> </xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A> 。 場合`type`は`null`、セキュリティ システム セット<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>を`Negotiate`Windows Vista および Windows オペレーティング システムの以降のバージョンで`Kerberos`以前のバージョンの Windows オペレーティング システムにします</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>。 セキュリティ システムがこの値を使用していません。これは情報のみを使用します。      > [!NOTE] > によって表されるトークンを取得する`userToken`Win32 API などのアンマネージ コードを呼び出すことによって`LogonUser`関数。 常にリリース`userToken`Win32 API を呼び出すことによって`CloseHandle`関数。 アンマネージ コードの呼び出しの詳細については、次を参照してください。[アンマネージ DLL 関数の使用](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code shows the use of the WindowsIdentity constructor to create a new instance of the <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/csharp/6cec7b3f-80c5-417d-99d8-_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/cpp/6cec7b3f-80c5-417d-99d8-_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/visualbasic/6cec7b3f-80c5-417d-99d8-_1.vb)]"
  syntax:
    content: public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "コードが実行されている対象ユーザーのアカウント トークンです。"
    - id: type
      type: System.String
      description: "(情報でのみ使用します。)ユーザーの識別に使用する認証の種類。 詳細については、「解説」を参照してください。"
    - id: acctType
      type: System.Security.Principal.WindowsAccountType
      description: "列挙値の&1; つ。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>0 です。       - または -<code>userToken</code>が重複しているとの無効な権限を借用します。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、適切なアクセス許可がありません。       または、Win32 エラーが発生しました。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)
  id: '#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>指定した Windows アカウント トークン、指定した認証の種類、指定した Windows アカウントの種類、および指定した認証ステータスによって表されるユーザーのクラスです。"
  remarks: "値、`type`パラメーターが設定に使用される、<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>パラメーター</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> 。 場合`type`は`null`、セキュリティ システム セット<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>を`Negotiate`Windows Vista および Windows オペレーティング システムの以降のバージョンで`Kerberos`以前のバージョンの Windows オペレーティング システムにします</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>。 セキュリティ システムがこの値を使用していません。これは情報のみを使用します。       によって表されるトークンを取得する`userToken`Win32 API などのアンマネージ コードを呼び出すことによって`LogonUser`関数。 常にリリース`userToken`Win32 API を呼び出すことによって`CloseHandle`関数。 アンマネージ コードの呼び出しの詳細については、次を参照してください。[アンマネージ DLL 関数の使用](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code shows the use of the WindowsIdentity constructor to create a new instance of the <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/csharp/851e6c2b-b248-45b7-9cd4-_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/cpp/851e6c2b-b248-45b7-9cd4-_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/visualbasic/851e6c2b-b248-45b7-9cd4-_1.vb)]"
  syntax:
    content: public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "コードが実行されている対象ユーザーのアカウント トークンです。"
    - id: type
      type: System.String
      description: "(情報でのみ使用します。)ユーザーの識別に使用する認証の種類。 詳細については、「解説」を参照してください。"
    - id: acctType
      type: System.Security.Principal.WindowsAccountType
      description: "列挙値の&1; つ。"
    - id: isAuthenticated
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザーが認証されたことを示すためにそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>0 です。       - または -<code>userToken</code>が重複しているとの無効な権限を借用します。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、適切なアクセス許可がありません。       または、Win32 エラーが発生しました。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.AccessToken
  id: AccessToken
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: AccessToken
  nameWithType: WindowsIdentity.AccessToken
  fullName: System.Security.Principal.WindowsIdentity.AccessToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "これを取得<xref href=&quot;Microsoft.Win32.SafeHandles.SafeAccessTokenHandle&quot;></xref>この<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>インスタンス。"
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeAccessTokenHandle AccessToken { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "返します、 <xref href=&quot;Microsoft.Win32.SafeHandles.SafeAccessTokenHandle&quot;></xref>です。"
  overload: System.Security.Principal.WindowsIdentity.AccessToken*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: WindowsIdentity.AuthenticationType
  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "ユーザーの識別に使用する認証の種類を取得します。"
  remarks: "このプロパティは参照用です。セキュリティ システムでは使用されません。 このプロパティの既定値は、Windows Vista 以降のバージョンの Windows オペレーティング システムで`Negotiate`顧客が構成したセキュリティ ポリシーに基づいて最適なセキュリティ サポート プロバイダー (SSP) を選択します。 以前のバージョンの Windows オペレーティング システムの既定のプロパティの値は`Kerberos`します。"
  syntax:
    content: public override sealed string AuthenticationType { get; }
    return:
      type: System.String
      description: "ユーザーの識別に使用する認証の種類。"
  overload: System.Security.Principal.WindowsIdentity.AuthenticationType*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows では、Windows NT 状態コード STATUS_ACCESS_DENIED が返されます。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "使用可能なメモリ不足です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、適切なアクセス許可がありません。       または、コンピューターが Windows 2003 またはそれ以降のドメインにアタッチされていません。       - または - 2003 以降、コンピューターが Windows の実行をされていません。       または、ユーザーにコンピューターが接続されているドメインのメンバーではありません。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Claims
  id: Claims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Claims
  nameWithType: WindowsIdentity.Claims
  fullName: System.Security.Principal.WindowsIdentity.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "この Windows id によって表されるユーザーのすべてのクレームを取得します。"
  syntax:
    content: public override System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "このクレームのコレクション<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>オブジェクト。"
  overload: System.Security.Principal.WindowsIdentity.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Clone
  id: Clone
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Clone()
  nameWithType: WindowsIdentity.Clone()
  fullName: System.Security.Principal.WindowsIdentity.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "現在のインスタンスのコピーである新しいオブジェクトを作成します。"
  syntax:
    content: public override System.Security.Claims.ClaimsIdentity Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "現在のインスタンスのコピー。"
  overload: System.Security.Principal.WindowsIdentity.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: DefaultIssuer
  nameWithType: WindowsIdentity.DefaultIssuer
  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "既定値の名前を指定<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>発行者。"
  syntax:
    content: public const string DefaultIssuer;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.DeviceClaims
  id: DeviceClaims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: DeviceClaims
  nameWithType: WindowsIdentity.DeviceClaims
  fullName: System.Security.Principal.WindowsIdentity.DeviceClaims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "持つクレームを取得、 <xref href=&quot;System.Security.Claims.ClaimTypes.WindowsDeviceClaim&quot;> </xref>プロパティのキー。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> DeviceClaims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "持つクレームのコレクション、 <xref href=&quot;System.Security.Claims.ClaimTypes.WindowsDeviceClaim&quot;> </xref>プロパティのキー。"
  overload: System.Security.Principal.WindowsIdentity.DeviceClaims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Dispose
  id: Dispose
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Dispose()
  nameWithType: WindowsIdentity.Dispose()
  fullName: System.Security.Principal.WindowsIdentity.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>です。"
  remarks: "<xref:System.Security.Principal.WindowsIdentity>。</xref:System.Security.Principal.WindowsIdentity>の使用が終了したときに、Dispose を呼び出す Dispose メソッドは、<xref:System.Security.Principal.WindowsIdentity>使用不可の状態</xref:System.Security.Principal.WindowsIdentity>。 Dispose を呼び出した後は、すべての参照を解放する必要があります、<xref:System.Security.Principal.WindowsIdentity>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Security.Principal.WindowsIdentity>占有されていた</xref:System.Security.Principal.WindowsIdentity></xref:System.Security.Principal.WindowsIdentity>。 詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] ><xref:System.Security.Principal.WindowsIdentity></xref:System.Security.Principal.WindowsIdentity>の最後の参照を解放する前に常に呼び出しが破棄。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Security.Principal.WindowsIdentity>オブジェクトの`Finalize`メソッド</xref:System.Security.Principal.WindowsIdentity>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Principal.WindowsIdentity.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: WindowsIdentity.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A>。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Security.Principal.WindowsIdentity>参照。</xref:System.Security.Principal.WindowsIdentity> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Security.Principal.WindowsIdentity.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous
  id: GetAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetAnonymous()
  nameWithType: WindowsIdentity.GetAnonymous()
  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "返します、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>を使える sentinel 値として、コードで匿名ユーザーを表すオブジェクトします。 プロパティの値は、Windows オペレーティング システムによって使用される組み込み匿名 id を表していません。"
  remarks: "このプロパティは空白を返します<xref:System.Security.Principal.WindowsIdentity>オブジェクト匿名として操作を処理することができます</xref:System.Security.Principal.WindowsIdentity>。 プロパティ値は、Windows の匿名ユーザーに対応していないと、なりすましに使用することはできません。 また、このプロパティによって返される id が static 以外ではないことに注意してください。GetAnonymous への各呼び出しでは、別の匿名 id を返します。       使用することができます、 <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>GetAnonymous からの戻り値を検出するためにプロパティ</xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>。 ただし、 <xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>Windows 匿名の id と、このメソッドによって返された匿名の id の両方を検出します</xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>。 後者の id を使用して、キャッシュではなく GetAnonymous 戻り値、<xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>プロパティ</xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>。"
  example:
  - "The following code shows the use of the GetAnonymous method to return a <xref:System.Security.Principal.WindowsIdentity> object that represents an anonymous Windows user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/csharp/m-system.security.princi_5_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/cpp/m-system.security.princi_5_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/visualbasic/m-system.security.princi_5_1.vb)]"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetAnonymous ();
    parameters: []
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "匿名ユーザーを表すオブジェクト。"
  overload: System.Security.Principal.WindowsIdentity.GetAnonymous*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetCurrent
  id: GetCurrent
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetCurrent()
  nameWithType: WindowsIdentity.GetCurrent()
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "返します、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>を現在の Windows ユーザーを表すオブジェクト。"
  remarks: ''
  example:
  - "The following code shows the use of the GetCurrent method to return a <xref:System.Security.Principal.WindowsIdentity> object that represents the current Windows user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/csharp/m-system.security.princi_7_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/cpp/m-system.security.princi_7_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/visualbasic/m-system.security.princi_7_1.vb)]"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetCurrent ();
    parameters: []
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "現在のユーザーを表すオブジェクト。"
  overload: System.Security.Principal.WindowsIdentity.GetCurrent*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、適切なアクセス許可がありません。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  id: GetCurrent(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetCurrent(Boolean)
  nameWithType: WindowsIdentity.GetCurrent(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "返します、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>スレッド、またはの値に応じて、プロセスの Windows id を表すオブジェクト、 <code> ifImpersonating </code>パラメーター。"
  remarks: "場合`ifImpersonating`は`true`とスレッドが偽装していない、返された<xref:System.Security.Principal.WindowsIdentity>オブジェクトに値がありません</xref:System.Security.Principal.WindowsIdentity>。  場合`ifImpersonating`は`false`スレッドが偽装して、<xref:System.Security.Principal.WindowsIdentity>スレッドが返されます</xref:System.Security.Principal.WindowsIdentity>。  場合`ifImpersonating`は`false`スレッドが偽装していないと、<xref:System.Security.Principal.WindowsIdentity>プロセスが返されます</xref:System.Security.Principal.WindowsIdentity>。"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetCurrent (bool ifImpersonating);
    parameters:
    - id: ifImpersonating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>返す、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>スレッドが現在偽装中の場合にのみ<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>を返す、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>偽装されている場合、スレッドのまたは<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>スレッドが現在偽装していない場合にプロセスのです。"
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "Windows ユーザーを表すオブジェクト。"
  overload: System.Security.Principal.WindowsIdentity.GetCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  id: GetCurrent(System.Security.Principal.TokenAccessLevels)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetCurrent(TokenAccessLevels)
  nameWithType: WindowsIdentity.GetCurrent(TokenAccessLevels)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(TokenAccessLevels)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "返します、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>必要なトークン アクセス レベルを指定して、現在の Windows ユーザーを表すオブジェクト。"
  remarks: "`desiredAccess`パラメーターが要求されたアクセス トークンへのアクセスの種類を識別するアクセス マスクを指定します。 これらの要求されたアクセス タイプは、トークンの随意アクセス制御リスト (DACL) がどの種類のアクセスを許可または拒否を決定すると比較されます。"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetCurrent (System.Security.Principal.TokenAccessLevels desiredAccess);
    parameters:
    - id: desiredAccess
      type: System.Security.Principal.TokenAccessLevels
      description: "列挙値のビットごとの組み合わせ。"
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "現在のユーザーを表すオブジェクト。"
  overload: System.Security.Principal.WindowsIdentity.GetCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Groups
  id: Groups
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Groups
  nameWithType: WindowsIdentity.Groups
  fullName: System.Security.Principal.WindowsIdentity.Groups
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "現在のユーザーが属する Windows グループを取得します。"
  remarks: ''
  example:
  - "The following code example shows the use of the Groups property to display the identity references for the groups the current user belongs to.  This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#20](~/add/codesnippet/csharp/p-system.security.princi_8_1.cs)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#20](~/add/codesnippet/visualbasic/p-system.security.princi_8_1.vb)]"
  syntax:
    content: public System.Security.Principal.IdentityReferenceCollection Groups { get; }
    return:
      type: System.Security.Principal.IdentityReferenceCollection
      description: "現在の Windows ユーザーが属するグループを表すオブジェクト。"
  overload: System.Security.Principal.WindowsIdentity.Groups*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Impersonate
  id: Impersonate
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Impersonate()
  nameWithType: WindowsIdentity.Impersonate()
  fullName: System.Security.Principal.WindowsIdentity.Impersonate()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "によって表されるユーザーの権限を借用、 <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>オブジェクト。"
  remarks: "Windows NT プラットフォームでは、権限借用を許可するための十分な権限が、現在のユーザーに必要です。"
  example:
  - "The following example demonstrates how to obtain a Windows account token by calling the unmanaged Win32 `LogonUser` function, and how to use that token to impersonate another user and then revert to the original identity.  \n  \n [!code-cpp[WindowsIdentity Impersonation#1](~/add/codesnippet/cpp/m-system.security.princi_2_1.cpp)]\n [!code-cs[WindowsIdentity Impersonation#1](~/add/codesnippet/csharp/m-system.security.princi_2_1.cs)]\n [!code-vb[WindowsIdentity Impersonation#1](~/add/codesnippet/visualbasic/m-system.security.princi_2_1.vb)]"
  syntax:
    content: public virtual System.Security.Principal.WindowsImpersonationContext Impersonate ();
    parameters: []
    return:
      type: System.Security.Principal.WindowsImpersonationContext
      description: "偽装前の Windows ユーザーを表すオブジェクトこれは、元のユーザーのコンテキストに戻すには使用できます。"
  overload: System.Security.Principal.WindowsIdentity.Impersonate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "匿名の id は、権限の借用を実行しようとしました。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Win32 エラーが発生しました。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)
  id: Impersonate(System.IntPtr)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Impersonate(IntPtr)
  nameWithType: WindowsIdentity.Impersonate(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.Impersonate(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "指定したユーザー トークンによって表されるユーザーを偽装します。"
  remarks: "Windows NT プラットフォームでは、権限借用を許可するための十分な権限が、現在のユーザーに必要です。      > [!NOTE] > Impersonate メソッドを呼び出すと、`userToken`値<xref:System.IntPtr>は、Win32 の呼び出しに相当`RevertToSelf`関数</xref:System.IntPtr>。 別のユーザーが偽装されているが、コントロールは、元のユーザーに戻ります。       アンマネージ コードへの呼び出しの詳細については、次を参照してください。[アンマネージ DLL 関数の使用](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates how to obtain a Windows account token by calling the unmanaged Win32 `LogonUser` function, and how to use that token to impersonate another user and then revert to the original identity.  \n  \n [!code-vb[WindowsIdentity Impersonation2#1](~/add/codesnippet/visualbasic/m-system.security.princi_3_1.vb)]\n [!code-cs[WindowsIdentity Impersonation2#1](~/add/codesnippet/csharp/m-system.security.princi_3_1.cs)]"
  syntax:
    content: public static System.Security.Principal.WindowsImpersonationContext Impersonate (IntPtr userToken);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "Windows アカウント トークンのハンドル。 このトークンは、Win32 API への呼び出しなど、アンマネージ コードを呼び出すことによって取得通常<xref uid=&quot;langword_csharp_LogonUser&quot; name=&quot;LogonUser&quot; href=&quot;&quot;></xref>関数。"
    return:
      type: System.Security.Principal.WindowsImpersonationContext
      description: "偽装前の Windows ユーザーを表すオブジェクトこのオブジェクトは、元のユーザーのコンテキストに戻すには使用できます。"
  overload: System.Security.Principal.WindowsIdentity.Impersonate*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows では、Windows NT 状態コード STATUS_ACCESS_DENIED が返されます。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "使用可能なメモリ不足です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、適切なアクセス許可がありません。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: WindowsIdentity.ImpersonationLevel
  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "ユーザーの偽装レベルを取得します。"
  remarks: "WMI への接続に使用する偽装レベルをについて説明します。"
  example:
  - "The following code example shows the use of the ImpersonationLevel property to display the impersonation level for the current user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#21](~/add/codesnippet/csharp/p-system.security.princi_3_1.cs)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#21](~/add/codesnippet/visualbasic/p-system.security.princi_3_1.vb)]"
  syntax:
    content: public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "偽装レベルを指定する列挙値の&1; つ。"
  overload: System.Security.Principal.WindowsIdentity.ImpersonationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous
  id: IsAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsAnonymous
  nameWithType: WindowsIdentity.IsAnonymous
  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "システムによって、ユーザー アカウントが匿名アカウントとして識別されるかどうかを示す値を取得します。"
  remarks: "IsAnonymous プロパティによって返された匿名の id および Windows の匿名 id の両方を検出、<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>メソッド</xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>。       匿名アカウントは通常ときにのみ発生からのみ ASP.NET ベースのアプリケーション内で匿名アクセスには、インターネット インフォメーション サービス (IIS) では許可されています。"
  example:
  - "The following code shows the use of the IsAnonymous property to detect whether the user account is identified as an anonymous account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/csharp/p-system.security.princi_4_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/cpp/p-system.security.princi_4_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/visualbasic/p-system.security.princi_4_1.vb)]"
  syntax:
    content: public virtual bool IsAnonymous { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザー アカウントが匿名アカウントである場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Principal.WindowsIdentity.IsAnonymous*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: WindowsIdentity.IsAuthenticated
  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "ユーザーが Windows によって認証されているかどうかを示す値を取得します。"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、ユーザーが認証されています。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Principal.WindowsIdentity.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsGuest
  id: IsGuest
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsGuest
  nameWithType: WindowsIdentity.IsGuest
  fullName: System.Security.Principal.WindowsIdentity.IsGuest
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "ユーザー アカウントとして識別されているかどうかを示す値を取得、 <xref href=&quot;System.Security.Principal.WindowsAccountType&quot;> </xref>アカウント、システムで実行します。"
  remarks: ''
  example:
  - "The following code shows the use of the IsGuest property to return a value indicating whether the user account is identified as a <xref:System.Security.Principal.WindowsAccountType> account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/csharp/p-system.security.princi_11_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/cpp/p-system.security.princi_11_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/visualbasic/p-system.security.princi_11_1.vb)]"
  syntax:
    content: public virtual bool IsGuest { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザー アカウントがある場合、 <xref href=&quot;System.Security.Principal.WindowsAccountType&quot;> </xref>アカウントです。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Principal.WindowsIdentity.IsGuest*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsSystem
  id: IsSystem
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsSystem
  nameWithType: WindowsIdentity.IsSystem
  fullName: System.Security.Principal.WindowsIdentity.IsSystem
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "ユーザー アカウントとして識別されているかどうかを示す値を取得、 <xref href=&quot;System.Security.Principal.WindowsAccountType&quot;> </xref>アカウント、システムで実行します。"
  remarks: ''
  example:
  - "The following code shows the use of the IsSystem property to return a value indicating whether the user account is identified as a <xref:System.Security.Principal.WindowsAccountType> account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/csharp/p-system.security.princi_9_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/cpp/p-system.security.princi_9_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/visualbasic/p-system.security.princi_9_1.vb)]"
  syntax:
    content: public virtual bool IsSystem { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザー アカウントがある場合、 <xref href=&quot;System.Security.Principal.WindowsAccountType&quot;> </xref>アカウントです。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Principal.WindowsIdentity.IsSystem*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Name
  id: Name
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Name
  nameWithType: WindowsIdentity.Name
  fullName: System.Security.Principal.WindowsIdentity.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "ユーザーの Windows ログオン名を取得します。"
  remarks: "Domain \\username という形式では、ログオン名です。"
  example:
  - "The following code shows the use of the Name property to get the user's Windows logon name. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/csharp/p-system.security.princi_2_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/cpp/p-system.security.princi_2_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/visualbasic/p-system.security.princi_2_1.vb)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "コードが実行されている対象ユーザーの Windows ログオン名。"
  overload: System.Security.Principal.WindowsIdentity.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Owner
  id: Owner
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Owner
  nameWithType: WindowsIdentity.Owner
  fullName: System.Security.Principal.WindowsIdentity.Owner
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "トークン所有者のセキュリティ識別子 (SID) を取得します。"
  remarks: "SID は、ユーザーまたはすべての Windows NT 実装上のグループを一意に識別します。  返された SID では、新しく作成されたオブジェクトに適用される SID の既定の所有者を識別します。"
  example:
  - "The following code example shows the use of the Owner property to display the security identifier for the token owner.  This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#19](~/add/codesnippet/csharp/p-system.security.princi_5_1.cs)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#19](~/add/codesnippet/visualbasic/p-system.security.princi_5_1.vb)]"
  syntax:
    content: public System.Security.Principal.SecurityIdentifier Owner { get; }
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "トークン所有者のオブジェクトです。"
  overload: System.Security.Principal.WindowsIdentity.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  id: RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: RunImpersonated(SafeAccessTokenHandle,Action)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "偽装した Windows id として指定されたアクションを実行します。 偽装したメソッド呼び出しを使用して、関数を実行するのではなく<xref href=&quot;System.Security.Principal.WindowsImpersonationContext&quot;> </xref>RunImpersonated を使用して関数をパラメーターとして直接指定します。"
  remarks: ''
  example:
  - "The following example demonstrates the use of the <xref:System.Security.Principal.WindowsIdentity> class to impersonate a user.  \n  \n> [!WARNING]\n>  This sample asks the user to enter a password on the console screen. The password will be visible on the screen, because the console window does not support masked input natively.  \n  \n```c#  \n// The following example demonstrates the use of the WindowsIdentity class to impersonate a user.   \n// IMPORTANT NOTE:   \n// This sample asks the user to enter a password on the console screen.   \n// The password will be visible on the screen, because the console window   \n// does not support masked input natively.  \n  \nusing System;  \nusing System.Runtime.InteropServices;  \nusing System.Security;  \nusing System.Security.Principal;  \nusing Microsoft.Win32.SafeHandles;  \n  \npublic class ImpersonationDemo  \n{  \n    [DllImport(\"advapi32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]  \n    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword,  \n        int dwLogonType, int dwLogonProvider, out SafeAccessTokenHandle phToken);  \n  \n    public static void Main()  \n    {  \n        // Get the user token for the specified user, domain, and password using the   \n        // unmanaged LogonUser method.   \n        // The local machine name can be used for the domain name to impersonate a user on this machine.  \n        Console.Write(\"Enter the name of the domain on which to log on: \");  \n        string domainName = Console.ReadLine();  \n  \n        Console.Write(\"Enter the login of a user on {0} that you wish to impersonate: \", domainName);  \n        string userName = Console.ReadLine();  \n  \n        Console.Write(\"Enter the password for {0}: \", userName);  \n  \n        const int LOGON32_PROVIDER_DEFAULT = 0;  \n        //This parameter causes LogonUser to create a primary token.   \n        const int LOGON32_LOGON_INTERACTIVE = 2;  \n  \n        // Call LogonUser to obtain a handle to an access token.   \n        SafeAccessTokenHandle safeAccessTokenHandle;  \n        bool returnValue = LogonUser(userName, domainName, Console.ReadLine(),  \n            LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,  \n            out safeAccessTokenHandle);  \n  \n        if (false == returnValue)  \n        {  \n            int ret = Marshal.GetLastWin32Error();  \n            Console.WriteLine(\"LogonUser failed with error code : {0}\", ret);  \n            throw new System.ComponentModel.Win32Exception(ret);  \n        }  \n  \n        Console.WriteLine(\"Did LogonUser Succeed? \" + (returnValue ? \"Yes\" : \"No\"));  \n        // Check the identity.  \n        Console.WriteLine(\"Before impersonation: \" + WindowsIdentity.GetCurrent().Name);  \n  \n        // Note: if you want to run as unimpersonated, pass  \n        //       'SafeAccessTokenHandle.InvalidHandle' instead of variable 'safeAccessTokenHandle'  \n        WindowsIdentity.RunImpersonated(  \n            safeAccessTokenHandle,  \n            // User action  \n            () =>  \n            {  \n                // Check the identity.  \n                Console.WriteLine(\"During impersonation: \" + WindowsIdentity.GetCurrent().Name);  \n            }  \n            );  \n  \n        // Check the identity again.  \n        Console.WriteLine(\"After impersonation: \" + WindowsIdentity.GetCurrent().Name);  \n    }  \n}  \n  \n```"
  syntax:
    content: public static void RunImpersonated (Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Action action);
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "偽装した Windows id の SafeAccessTokenHandle。"
    - id: action
      type: System.Action
      description: "実行する System.Action。"
  overload: System.Security.Principal.WindowsIdentity.RunImpersonated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  id: RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: RunImpersonated(SafeAccessTokenHandle,Func<T>)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  syntax:
    content: public static T RunImpersonated<T> (Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Func<T> func);
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "追加します。"
    - id: func
      type: System.Func{T}
      description: "追加します。"
    return:
      type: T
      description: "追加します。"
  overload: System.Security.Principal.WindowsIdentity.RunImpersonated<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "実装して、 <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>インターフェイスし、逆シリアル化が完了すると、逆シリアル化イベントによってコールバックされます。"
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "逆シリアル化イベントのソース。"
  overload: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "セット、 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>をこの実行コンテキストのインスタンスを再作成するために必要な論理コンテキスト情報を持つオブジェクト。"
  remarks: "このメソッドを設定、<xref:System.Runtime.Serialization.SerializationInfo>論理呼び出しコンテキスト情報</xref:System.Runtime.Serialization.SerializationInfo>。 逆シリアル化実行コンテキストのオブジェクトはから再構成、 <xref:System.Runtime.Serialization.SerializationInfo>、ストリームで転送します</xref:System.Runtime.Serialization.SerializationInfo>。       詳細については、 <xref:System.Runtime.Serialization.SerializationInfo>。</xref:System.Runtime.Serialization.SerializationInfo>を参照してください。"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "シリアル化に必要な情報を格納するオブジェクト、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "ソースと関連付けられているシリアル化されたストリームの送信先を格納するオブジェクト、 <xref href=&quot;System.Collections.Hashtable&quot;></xref>です。"
  overload: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Token
  id: Token
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Token
  nameWithType: WindowsIdentity.Token
  fullName: System.Security.Principal.WindowsIdentity.Token
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "ユーザーの Windows アカウント トークンを取得します。"
  remarks: "明示的にしないでリリース トークン プロパティによって返されるアカウント トークンです。 トークンがによってリリースされた、<xref:System.Security.Principal.WindowsIdentity.Dispose%2A>メソッドで、コードで呼び出すことができます</xref:System.Security.Principal.WindowsIdentity.Dispose%2A>。 <xref:System.Security.Principal.WindowsIdentity.Dispose%2A>ガベージ コレクターによって自動的に呼び出されます。</xref:System.Security.Principal.WindowsIdentity.Dispose%2A>      > [!NOTE] > トークン プロパティによって返されるアカウント トークンが作成するために使用した Windows トークンの複製、<xref:System.Security.Principal.WindowsIdentity>オブジェクトし、.NET Framework によって自動的に解放されます</xref:System.Security.Principal.WindowsIdentity>。 これとは異なるアカウント トークン (、`userToken`コンス トラクターのパラメーター)、作成に使用される、<xref:System.Security.Principal.WindowsIdentity>オブジェクト</xref:System.Security.Principal.WindowsIdentity>。 `userToken`呼び出しによって作成される Windows アカウント トークン`LogonUser`し、メモリ リークを防ぐために閉じる必要があります。"
  example:
  - "The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.IsSystem%2A> property to get the Windows account token for the user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/csharp/p-system.security.princi_0_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/cpp/p-system.security.princi_0_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/visualbasic/p-system.security.princi_0_1.vb)]"
  syntax:
    content: public virtual IntPtr Token { get; }
    return:
      type: System.IntPtr
      description: "現在の実行スレッドに関連付けられているアクセス トークンのハンドル。"
  overload: System.Security.Principal.WindowsIdentity.Token*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.User
  id: User
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: User
  nameWithType: WindowsIdentity.User
  fullName: System.Security.Principal.WindowsIdentity.User
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "ユーザーのセキュリティ識別子 (SID) を取得します。"
  remarks: "SID は、ユーザーまたはすべての Windows NT 実装上のグループを一意に識別します。      > [!NOTE] >、<xref:System.Security.Principal.WindowsIdentity>によって返されるオブジェクト、<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>メソッドは Windows の匿名ユーザーと同じではありません</xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A></xref:System.Security.Principal.WindowsIdentity>。 このプロパティを取得`null`によって表される匿名のユーザー、<xref:System.Security.Principal.WindowsIdentity>によって返されるオブジェクト、<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>メソッド、匿名の Windows ユーザーを表す SID を取得しません</xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A></xref:System.Security.Principal.WindowsIdentity>。"
  syntax:
    content: public System.Security.Principal.SecurityIdentifier User { get; }
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "ユーザーのオブジェクト。"
  overload: System.Security.Principal.WindowsIdentity.User*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.UserClaims
  id: UserClaims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: UserClaims
  nameWithType: WindowsIdentity.UserClaims
  fullName: System.Security.Principal.WindowsIdentity.UserClaims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "持つクレームを取得、 <xref href=&quot;System.Security.Claims.ClaimTypes.WindowsUserClaim&quot;> </xref>プロパティのキー。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> UserClaims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "持つクレームのコレクション、 <xref href=&quot;System.Security.Claims.ClaimTypes.WindowsUserClaim&quot;> </xref>プロパティのキー。"
  overload: System.Security.Principal.WindowsIdentity.UserClaims*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: System.Security.Claims.ClaimsIdentity
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(WindowsIdentity)
  nameWithType: WindowsIdentity.WindowsIdentity(WindowsIdentity)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(WindowsIdentity)
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(String)
  nameWithType: WindowsIdentity.WindowsIdentity(String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr,String)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String)
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(String,String)
  nameWithType: WindowsIdentity.WindowsIdentity(String,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String,String)
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr,String,WindowsAccountType)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
- uid: System.Security.Principal.WindowsAccountType
  parent: System.Security.Principal
  isExternal: false
  name: WindowsAccountType
  nameWithType: WindowsAccountType
  fullName: System.Security.Principal.WindowsAccountType
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.WindowsIdentity.AccessToken
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AccessToken
  nameWithType: WindowsIdentity.AccessToken
  fullName: System.Security.Principal.WindowsIdentity.AccessToken
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeAccessTokenHandle
  nameWithType: SafeAccessTokenHandle
  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: WindowsIdentity.AuthenticationType
  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType
- uid: System.Security.Principal.WindowsIdentity.Claims
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Claims
  nameWithType: WindowsIdentity.Claims
  fullName: System.Security.Principal.WindowsIdentity.Claims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Principal.WindowsIdentity.Clone
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Clone()
  nameWithType: WindowsIdentity.Clone()
  fullName: System.Security.Principal.WindowsIdentity.Clone()
- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: DefaultIssuer
  nameWithType: WindowsIdentity.DefaultIssuer
  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer
- uid: System.Security.Principal.WindowsIdentity.DeviceClaims
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: DeviceClaims
  nameWithType: WindowsIdentity.DeviceClaims
  fullName: System.Security.Principal.WindowsIdentity.DeviceClaims
- uid: System.Security.Principal.WindowsIdentity.Dispose
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Dispose()
  nameWithType: WindowsIdentity.Dispose()
  fullName: System.Security.Principal.WindowsIdentity.Dispose()
- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: WindowsIdentity.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.Dispose(Boolean)
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetAnonymous()
  nameWithType: WindowsIdentity.GetAnonymous()
  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()
- uid: System.Security.Principal.WindowsIdentity.GetCurrent
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent()
  nameWithType: WindowsIdentity.GetCurrent()
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent(Boolean)
  nameWithType: WindowsIdentity.GetCurrent(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(Boolean)
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent(TokenAccessLevels)
  nameWithType: WindowsIdentity.GetCurrent(TokenAccessLevels)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(TokenAccessLevels)
- uid: System.Security.Principal.TokenAccessLevels
  parent: System.Security.Principal
  isExternal: false
  name: TokenAccessLevels
  nameWithType: TokenAccessLevels
  fullName: System.Security.Principal.TokenAccessLevels
- uid: System.Security.Principal.WindowsIdentity.Groups
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Groups
  nameWithType: WindowsIdentity.Groups
  fullName: System.Security.Principal.WindowsIdentity.Groups
- uid: System.Security.Principal.IdentityReferenceCollection
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReferenceCollection
  nameWithType: IdentityReferenceCollection
  fullName: System.Security.Principal.IdentityReferenceCollection
- uid: System.Security.Principal.WindowsIdentity.Impersonate
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Impersonate()
  nameWithType: WindowsIdentity.Impersonate()
  fullName: System.Security.Principal.WindowsIdentity.Impersonate()
- uid: System.Security.Principal.WindowsImpersonationContext
  parent: System.Security.Principal
  isExternal: false
  name: WindowsImpersonationContext
  nameWithType: WindowsImpersonationContext
  fullName: System.Security.Principal.WindowsImpersonationContext
- uid: System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Impersonate(IntPtr)
  nameWithType: WindowsIdentity.Impersonate(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.Impersonate(IntPtr)
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WindowsIdentity.ImpersonationLevel
  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAnonymous
  nameWithType: WindowsIdentity.IsAnonymous
  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: WindowsIdentity.IsAuthenticated
  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated
- uid: System.Security.Principal.WindowsIdentity.IsGuest
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsGuest
  nameWithType: WindowsIdentity.IsGuest
  fullName: System.Security.Principal.WindowsIdentity.IsGuest
- uid: System.Security.Principal.WindowsIdentity.IsSystem
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsSystem
  nameWithType: WindowsIdentity.IsSystem
  fullName: System.Security.Principal.WindowsIdentity.IsSystem
- uid: System.Security.Principal.WindowsIdentity.Name
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Name
  nameWithType: WindowsIdentity.Name
  fullName: System.Security.Principal.WindowsIdentity.Name
- uid: System.Security.Principal.WindowsIdentity.Owner
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Owner
  nameWithType: WindowsIdentity.Owner
  fullName: System.Security.Principal.WindowsIdentity.Owner
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated(SafeAccessTokenHandle,Action)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated(SafeAccessTokenHandle,Func<T>)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{T}
  parent: System
  isExternal: true
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Principal.WindowsIdentity.Token
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Token
  nameWithType: WindowsIdentity.Token
  fullName: System.Security.Principal.WindowsIdentity.Token
- uid: System.Security.Principal.WindowsIdentity.User
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: User
  nameWithType: WindowsIdentity.User
  fullName: System.Security.Principal.WindowsIdentity.User
- uid: System.Security.Principal.WindowsIdentity.UserClaims
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: UserClaims
  nameWithType: WindowsIdentity.UserClaims
  fullName: System.Security.Principal.WindowsIdentity.UserClaims
- uid: System.Security.Principal.WindowsIdentity.#ctor*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity.AccessToken*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AccessToken
  nameWithType: WindowsIdentity.AccessToken
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: WindowsIdentity.AuthenticationType
- uid: System.Security.Principal.WindowsIdentity.Claims*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Claims
  nameWithType: WindowsIdentity.Claims
- uid: System.Security.Principal.WindowsIdentity.Clone*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Clone
  nameWithType: WindowsIdentity.Clone
- uid: System.Security.Principal.WindowsIdentity.DeviceClaims*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: DeviceClaims
  nameWithType: WindowsIdentity.DeviceClaims
- uid: System.Security.Principal.WindowsIdentity.Dispose*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Dispose
  nameWithType: WindowsIdentity.Dispose
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetAnonymous
  nameWithType: WindowsIdentity.GetAnonymous
- uid: System.Security.Principal.WindowsIdentity.GetCurrent*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent
  nameWithType: WindowsIdentity.GetCurrent
- uid: System.Security.Principal.WindowsIdentity.Groups*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Groups
  nameWithType: WindowsIdentity.Groups
- uid: System.Security.Principal.WindowsIdentity.Impersonate*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Impersonate
  nameWithType: WindowsIdentity.Impersonate
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WindowsIdentity.ImpersonationLevel
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAnonymous
  nameWithType: WindowsIdentity.IsAnonymous
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: WindowsIdentity.IsAuthenticated
- uid: System.Security.Principal.WindowsIdentity.IsGuest*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsGuest
  nameWithType: WindowsIdentity.IsGuest
- uid: System.Security.Principal.WindowsIdentity.IsSystem*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsSystem
  nameWithType: WindowsIdentity.IsSystem
- uid: System.Security.Principal.WindowsIdentity.Name*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Name
  nameWithType: WindowsIdentity.Name
- uid: System.Security.Principal.WindowsIdentity.Owner*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Owner
  nameWithType: WindowsIdentity.Owner
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated
  nameWithType: WindowsIdentity.RunImpersonated
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated<T>*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated<T>
  nameWithType: WindowsIdentity.RunImpersonated<T>
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Security.Principal.WindowsIdentity.Token*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Token
  nameWithType: WindowsIdentity.Token
- uid: System.Security.Principal.WindowsIdentity.User*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: User
  nameWithType: WindowsIdentity.User
- uid: System.Security.Principal.WindowsIdentity.UserClaims*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: UserClaims
  nameWithType: WindowsIdentity.UserClaims
