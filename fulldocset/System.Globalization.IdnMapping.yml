### YamlMime:ManagedReference
items:
- uid: System.Globalization.IdnMapping
  id: IdnMapping
  children:
  - System.Globalization.IdnMapping.#ctor
  - System.Globalization.IdnMapping.AllowUnassigned
  - System.Globalization.IdnMapping.Equals(System.Object)
  - System.Globalization.IdnMapping.GetAscii(System.String)
  - System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)
  - System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)
  - System.Globalization.IdnMapping.GetHashCode
  - System.Globalization.IdnMapping.GetUnicode(System.String)
  - System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)
  - System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)
  - System.Globalization.IdnMapping.UseStd3AsciiRules
  langs:
  - csharp
  name: IdnMapping
  nameWithType: IdnMapping
  fullName: System.Globalization.IdnMapping
  type: Class
  summary: "インターネット ドメイン名の非 ASCII 文字の使用をサポートしています。 このクラスは継承できません。"
  remarks: "インターネット ドメイン名は、ラベルの区切り記号で区切られた、ドメイン名ラベルと呼ばれる、1 つまたは複数の部分で構成されます。 たとえば、ドメイン名&quot;www.proseware.com&quot;は、ラベル、&quot;www&quot;、「して」および&quot;com&quot;、ピリオドで区切られたで構成されます。 標準のドメイン名は、US ASCII (または基本ラテン) 文字の範囲内で、U +0&0021; U +0&007;E に指定された文字で構成されます。 は、US-ASCII 文字セットの国際化ドメイン名でアプリケーション IDNA () を使用してカルチャでのインターネット使用状況を容易には 2003 では、US-ASCII 文字の範囲の Unicode 文字を含めることをサポートするために標準が採用しました。 ただし、名前のサーバーとドメイン名の解決引き続き、US-ASCII 文字の範囲内の文字に依存します。       IDNA メカニズムでは、Punycode を使用して、ドメイン ネーム システムでサポートされる、US-ASCII 文字の範囲を US-ASCII 文字の範囲の Unicode 文字が含まれている国際化ドメイン名をマップします。 IDNA メカニズムを使用して、インターネット経由で転送されるデータはドメイン名を変換できます。      > [!IMPORTANT] > で、 [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]、IdnMapping クラスが使用中のオペレーティング システムに応じて、IDNA 標準のさまざまなバージョンをサポートしています: >> 上で実行するときに[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]で概説されている IDNA 規格の 2008年バージョンがサポートしている[RFC 5891: アプリケーション (IDNA) Internationalized Domain Names: プロトコル](http://go.microsoft.com/fwlink/?LinkId=231875)です。   >-で概説されている標準の 2003年バージョンをサポートしていることを以前のバージョンの Windows オペレーティング システムで実行時に[RFC 3490: 国際化ドメイン名のアプリケーション (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110)です。   >>「 [Unicode 技術標準 #46: IDNA 互換性処理](http://go.microsoft.com/fwlink/?LinkId=232459)これらの標準特定セットの文字を処理する方法に違いをします。       <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=fullName>メソッドは、各ラベルにドメイン名、表示可能な Unicode で構成される形式に正規化された名前は、US ASCII コード ポイント範囲 (U +0&0020; を U +0&007;E)、内の文字およびを ASCII 互換エンコーディング (ACE) プレフィックス (&quot;xn--&quot;) を先頭変換を正規化します</xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=fullName>。 <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=fullName>メソッドによって変換されたドメイン名ラベル、<xref:System.Globalization.IdnMapping.GetAscii%2A>メソッド</xref:System.Globalization.IdnMapping.GetAscii%2A></xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=fullName>。       変換対象の文字列には、ラベルの区切り文字が含まれている場合は、表意文字の完全停止を文字 (U +0&3002;)、全角完全停止 (U + FF0E)、および完全停止 (U + FF61)、全角半角、<xref:System.Globalization.IdnMapping.GetAscii%2A>メソッド完全停止 (期間、002E) ラベルの区切り文字に変換します</xref:System.Globalization.IdnMapping.GetAscii%2A>。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>メソッド、ただし、復元されません、元のラベルの区切り記号文字</xref:System.Globalization.IdnMapping.GetUnicode%2A>。"
  example:
  - "The following example uses the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> method to convert an array of internationalized domain names to Punycode. The <xref:System.Globalization.IdnMapping.GetUnicode%2A> method then converts the Punycode domain name back to the original domain name, but replaces the original label separators with the standard label separator.  \n  \n [!code-vb[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.i_1.vb)]\n [!code-cs[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/csharp/t-system.globalization.i_1.cs)]"
  syntax:
    content: public sealed class IdnMapping
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.IdnMapping.#ctor
  id: '#ctor'
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: IdnMapping()
  nameWithType: IdnMapping.IdnMapping()
  fullName: System.Globalization.IdnMapping.IdnMapping()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Globalization.IdnMapping&quot;> </xref>クラスです。"
  remarks: "<xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=fullName>と<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=fullName>プロパティが初期化に`false`</xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=fullName></xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=fullName>。 ASCII 文字 A ~ Z、0 ~ 9、ハイフン (-) 以外の小さなサブセット (U+002D) の文字しピリオド (.) 文字で使用できるドメイン名が未使用の Unicode コード ポイント。"
  syntax:
    content: public IdnMapping ();
    parameters: []
  overload: System.Globalization.IdnMapping.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.IdnMapping.AllowUnassigned
  id: AllowUnassigned
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: AllowUnassigned
  nameWithType: IdnMapping.AllowUnassigned
  fullName: System.Globalization.IdnMapping.AllowUnassigned
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "未割り当ての Unicode コード ポイントは、現在のメンバーによって実行される操作で使用されているかどうかを示す値を取得または<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>オブジェクト。"
  remarks: "登録済みドメイン名には、割り当てられていないコード ポイントを含めることはできません。 AllowUnassigned プロパティの既定値は、その結果、`false`です。 IDNA 仕様により、対応する文字列のクエリでのみ割り当てられていないコード ポイント (つまり、ドメイン名の検索で)。 ドメイン名に割り当てられていないコード ポイントの使用に関する詳細については、次を参照してください。 [RFC 3454、&quot;国際化された文字列 (stringprep) の準備&quot;](http://go.microsoft.com/fwlink/?LinkId=231873)と[RFC 5891、&quot;国際化ドメイン名でアプリケーション IDNA ():: プロトコル&quot;](http://go.microsoft.com/fwlink/?LinkId=231875)です。      > [!IMPORTANT] > TheAllowUnassigned プロパティが場合`false`プロパティに関連付けられている動作は、基になるオペレーティング システムによって異なります。 [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]、 <xref:System.Globalization.IdnMapping>IDNA 2008 では、Unicode 6.0 標準に基づくに準拠しているクラス</xref:System.Globalization.IdnMapping>。 以前のバージョンの Windows では、<xref:System.Globalization.IdnMapping>クラスに基づきます IDNA 2003 では、Unicode 3 に基づいています*。x*.</xref:System.Globalization.IdnMapping> でした。 IDNA 2003 で割り当てられた一部のコード ポイントは、文字が割り当てられているし、IDNA 2008 でサポートされます。 たとえば、U +0 0221 は、Unicode 4.0 で導入されました。  [!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]、としてエンコードされる&quot;xn —&6;la&quot;です。 以前のバージョンの Windows では、スロー、<xref:System.ArgumentException>例外です</xref:System.ArgumentException>。"
  syntax:
    content: public bool AllowUnassigned { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>操作内で割り当てられていないコード ポイントが使用されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Globalization.IdnMapping.AllowUnassigned*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.IdnMapping.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: IdnMapping.Equals(Object)
  fullName: System.Globalization.IdnMapping.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "示すかどうか、指定したオブジェクトと現在<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>オブジェクトが等しい。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "現在のオブジェクトと比較するオブジェクト。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>によって、オブジェクトが指定されている場合、 <code> obj </code>からパラメーターを派生<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>とその<> *> と<> *> プロパティが等しい。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Globalization.IdnMapping.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetAscii(System.String)
  id: GetAscii(System.String)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetAscii(String)
  nameWithType: IdnMapping.GetAscii(String)
  fullName: System.Globalization.IdnMapping.GetAscii(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "US-ASCII 文字の範囲内で表示可能な Unicode 文字の文字列に Unicode 文字で構成されるドメイン名ラベルの文字列をエンコードします。 文字列は、標準の IDNA に従ってフォーマットされます。"
  remarks: "`unicode`パラメーターの有効な Unicode 文字で構成される&1; つまたは複数のラベルの文字列を指定します。 ラベルは、ラベルの区切り記号で区切られます。 `unicode`パラメーターは、ラベルの区切り記号で始めることはできませんが含まれて、必要に応じて末尾に区切り記号を使用します。 ラベルの区切り記号は完全に停止 (期間、002E)、表意文字の完全停止 (U +0&3002;)、全角完全停止 (U + FF0E) と半角表意文字完全停止 (U + FF61)。 たとえば、ドメイン名&quot;www.adatum.com&quot;は、ラベル、&quot;www&quot;、&quot;adatum&quot;および&quot;com&quot;、ピリオドで区切られたで構成されます。       ラベルには、次の文字を含めることはできません:-Unicode コントロール文字 U + U +0&001; f、および U +0&007;F を通じて西暦&1; 年からです。      場合、Unicode 文字を未使用の値、<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>プロパティは`false`</xref:System.Globalization.IdnMapping.AllowUnassigned%2A>。      -非標準の文字、US-ASCII では文字、スペースなどの範囲 (u+0020)、感嘆符 (U +0&0021;) をマークして場合、改行 (U +0&005;F) 文字を低の値、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>プロパティは`true`</xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>。      -IDNA 標準の特定のバージョンで禁止されている文字。 禁止された文字の詳細については、次を参照してください。 [RFC 3454: 準備の国際化の文字列 (&quot;stringprep&quot;)](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 と[RFC 5982:、Unicode コード ポイントとアプリケーションの国際化ドメイン名](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008 用です。       <xref:System.Globalization.IdnMapping.GetAscii%2A>メソッドは、すべてのラベルの区切り記号を完全に停止 (期間、002E) に変換します</xref:System.Globalization.IdnMapping.GetAscii%2A>。       場合`unicode`US ASCII 以外の文字が含まれていない文字の範囲と、US-ASCII 文字の範囲内で文字を含まないが禁止されている場合、メソッドが返されます`unicode`変更されません。"
  example:
  - "The following example uses the GetAscii method to convert an array of internationalized domain names to Punycode, which is an encoded equivalent that consists of characters in the US-ASCII character range. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \n  \n [!code-vb[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/visualbasic/m-system.globalization.i_0_1.vb)]\n [!code-cs[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/csharp/m-system.globalization.i_0_1.cs)]"
  syntax:
    content: public string GetAscii (string unicode);
    parameters:
    - id: unicode
      type: System.String
      description: "ラベル区切り記号で区切られた&1; つまたは複数のドメイン名ラベルで構成される、変換する文字列。"
    return:
      type: System.String
      description: "指定された文字列と同等、 <code> unicode </code>パラメーターを US-ASCII で表示可能な Unicode 文字の文字範囲 (U +0&0020; に U +0&007;E) と IDNA 標準に従って書式設定します。"
  overload: System.Globalization.IdnMapping.GetAscii*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>unicode</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>unicode</code>無効なに基づいて、<xref:System.Globalization.IdnMapping.AllowUnassigned*>と<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>プロパティ、および標準の IDNA です。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)
  id: GetAscii(System.String,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetAscii(String,Int32)
  nameWithType: IdnMapping.GetAscii(String,Int32)
  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "ドメイン名ラベルを含む、US-ASCII 文字の範囲の Unicode 文字の部分文字列をエンコードします。 部分文字列は、US-ASCII 文字の範囲内で表示可能な Unicode 文字の文字列に変換し、IDNA 標準に従って書式設定します。"
  remarks: "`unicode`と`index`パラメーターは有効な Unicode 文字で構成される&1; つまたは複数のラベルが付いた部分文字列を定義します。 ラベルは、ラベルの区切り記号で区切られます。 部分文字列の最初の文字がラベルの区切り文字で始めることはできませんが含まれてし、必要に応じて、区切り記号で終わることができます。 ラベルの区切り記号は完全に停止 (期間、002E)、表意文字の完全停止 (U +0&3002;)、全角完全停止 (U + FF0E) と半角表意文字完全停止 (U + FF61)。 たとえば、ドメイン名&quot;www.adatum.com&quot;は、ラベル、&quot;www&quot;、&quot;adatum&quot;および&quot;com&quot;、ピリオドで区切られたで構成されます。       ラベルには、次の文字を含めることはできません:-Unicode コントロール文字 U + U +0&001; f、および U +0&007;F を通じて西暦&1; 年からです。      -の値に応じて、Unicode 文字を割り当てられていない、<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>プロパティ</xref:System.Globalization.IdnMapping.AllowUnassigned%2A>。      -非標準の文字、US-ASCII では文字、スペースなどの範囲 (u+0020)、感嘆符マーク (U +0&0021;)、しの値に応じて、低い行 (U +0&005;F) 文字、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>プロパティ</xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>。      -IDNA 標準の特定のバージョンで禁止されている文字。 禁止された文字の詳細については、次を参照してください。 [RFC 3454: 準備の国際化の文字列 (&quot;stringprep&quot;)](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 と[RFC 5982:、Unicode コード ポイントとアプリケーションの国際化ドメイン名](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008 用です。       <xref:System.Globalization.IdnMapping.GetAscii%2A>メソッドは、すべてのラベルの区切り記号を完全に停止 (期間、002E) に変換します</xref:System.Globalization.IdnMapping.GetAscii%2A>。       場合`unicode`US ASCII 以外の文字が含まれていない文字の範囲と、US-ASCII 文字の範囲内で文字を含まないが禁止されている場合、メソッドが返されます`unicode`変更されません。"
  example:
  - "The following example removes the local part and the @ character from an email address, and passes the resulting domain name to the GetAscii method to create a Punycode domain name, which is an encoded equivalent that consists of characters in the US-ASCII character range. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \n  \n [!code-cs[System.Globalization.IdnMapping.GetAscii#2](~/add/codesnippet/csharp/m-system.globalization.i_3_1.cs)]\n [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/add/codesnippet/visualbasic/m-system.globalization.i_3_1.vb)]"
  syntax:
    content: public string GetAscii (string unicode, int index);
    parameters:
    - id: unicode
      type: System.String
      description: "ラベル区切り記号で区切られた&1; つまたは複数のドメイン名ラベルで構成される、変換する文字列。"
    - id: index
      type: System.Int32
      description: "0 から始まるオフセット`unicode`に変換する部分文字列の先頭を指定します。 末尾にも変換操作を続行、`unicode`文字列。"
    return:
      type: System.String
      description: "指定された部分文字列と同等、 <code> unicode </code>と<code> index </code>パラメーター、US-ASCII で表示可能な Unicode 文字の文字範囲 (U +0&0020; に U +0&007;E) および IDNA 標準に従って書式設定します。"
  overload: System.Globalization.IdnMapping.GetAscii*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>unicode</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>index</code>がの長さより大きい<code>unicode</code>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>unicode</code>無効なに基づいて、<xref:System.Globalization.IdnMapping.AllowUnassigned*>と<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>プロパティ、および標準の IDNA です。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)
  id: GetAscii(System.String,System.Int32,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetAscii(String,Int32,Int32)
  nameWithType: IdnMapping.GetAscii(String,Int32,Int32)
  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定された、US-ASCII 文字の範囲の Unicode 文字が含まれているドメイン名ラベルの部分文字列の文字数をエンコードします。 部分文字列は、US-ASCII 文字の範囲内で表示可能な Unicode 文字の文字列に変換し、IDNA 標準に従って書式設定します。"
  remarks: "`Unicode`、 `index`、および`count`パラメーターは有効な Unicode 文字で構成される&1; つまたは複数のラベルが付いた部分文字列を定義します。 ラベルは、ラベルの区切り記号で区切られます。 部分文字列の最初の文字がラベルの区切り文字で始めることはできませんが含まれてし、必要に応じて、区切り記号で終わることができます。 ラベルの区切り記号は完全に停止 (期間、002E)、表意文字の完全停止 (U +0&3002;)、全角完全停止 (U + FF0E) と半角表意文字完全停止 (U + FF61)。 たとえば、ドメイン名&quot;www.adatum.com&quot;は、ラベル、&quot;www&quot;、&quot;adatum&quot;および&quot;com&quot;、ピリオドで区切られたで構成されます。       ラベルには、次の文字を含めることはできません:-Unicode コントロール文字 U + U +0&001; f、および U +0&007;F を通じて西暦&1; 年からです。      -の値に応じて、Unicode 文字を割り当てられていない、<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>プロパティ</xref:System.Globalization.IdnMapping.AllowUnassigned%2A>。      -非標準の文字、US-ASCII では文字、スペースなどの範囲 (u+0020)、感嘆符マーク (U +0&0021;)、しの値に応じて、低い行 (U +0&005;F) 文字、<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>プロパティ</xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>。      -IDNA 標準の特定のバージョンで禁止されている文字。 禁止された文字の詳細については、次を参照してください。 [RFC 3454: 準備の国際化の文字列 (&quot;stringprep&quot;)](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 と[RFC 5982:、Unicode コード ポイントとアプリケーションの国際化ドメイン名](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008 用です。       <xref:System.Globalization.IdnMapping.GetAscii%2A>メソッドは、すべてのラベルの区切り記号を完全に停止 (期間、002E) に変換します</xref:System.Globalization.IdnMapping.GetAscii%2A>。 部分文字列に、US-ASCII 文字の範囲の文字が含まれていないと、US-ASCII 文字の範囲内の文字は使用できません、このメソッドは変更されていない部分文字列を返します。"
  example:
  - "The following example uses the GetAscii method to convert an internationalized domain name to a domain name that complies with the IDNA standard. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> method then converts the standardized domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \n  \n [!code-vb[IdnMapping.GetX#1](~/add/codesnippet/visualbasic/9eb31a8b-c677-4c73-81bb-_1.vb)]\n [!code-cs[IdnMapping.GetX#1](~/add/codesnippet/csharp/9eb31a8b-c677-4c73-81bb-_1.cs)]"
  syntax:
    content: public string GetAscii (string unicode, int index, int count);
    parameters:
    - id: unicode
      type: System.String
      description: "ラベル区切り記号で区切られた&1; つまたは複数のドメイン名ラベルで構成される、変換する文字列。"
    - id: index
      type: System.Int32
      description: "0 から始まるオフセット`unicode`部分文字列の先頭を指定します。"
    - id: count
      type: System.Int32
      description: "指定された位置から開始する部分文字列に変換する文字数`index`で、`unicode`文字列。"
    return:
      type: System.String
      description: "指定された部分文字列の該当するショートカットは、 <code> unicode </code>、 <code> index </code>、および<code> count </code>パラメーター、US-ASCII で表示可能な Unicode 文字の文字範囲 (U +0&0020; に U +0&007;E) および IDNA 標準に従って書式設定します。"
  overload: System.Globalization.IdnMapping.GetAscii*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>unicode</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>または<code>count</code>が&0; 未満です。       - または -<code>index</code>がの長さより大きい<code>unicode</code>です。       - または -<code>index</code>がの長さより大きい<code>unicode</code>マイナス<code>count</code>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>unicode</code>無効なに基づいて、<xref:System.Globalization.IdnMapping.AllowUnassigned*>と<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>プロパティ、および標準の IDNA です。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetHashCode
  id: GetHashCode
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: IdnMapping.GetHashCode()
  fullName: System.Globalization.IdnMapping.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "このハッシュ コードを返します<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>オブジェクト。"
  remarks: "アプリケーションは、意味のあるハッシュを実装する必要がある場合は、GetHashCode メソッドをオーバーライドします。"
  example:
  - "The following example assumes that a single string can contain multiple email addresses separated by spaces. It removes the local part and the @ character from each email address, and passes the resulting domain name to the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> or <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> method to create a Punycode domain name. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> method then converts the Punycode domain name back into the original domain name.  \n  \n [!code-cs[System.Globalization.IdnMapping.GetAscii#3](~/add/codesnippet/csharp/m-system.globalization.i_2_1.cs)]\n [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/add/codesnippet/visualbasic/m-system.globalization.i_2_1.vb)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "プロパティから派生した次の 4 つの 32 ビット符号付き定数のいずれか、 <xref href=&quot;System.Globalization.IdnMapping&quot;> </xref>オブジェクト。  戻り値は、特別な意味を持たないし、ハッシュ コードのアルゴリズムで使用するには適していません。"
  overload: System.Globalization.IdnMapping.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetUnicode(System.String)
  id: GetUnicode(System.String)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetUnicode(String)
  nameWithType: IdnMapping.GetUnicode(String)
  fullName: System.Globalization.IdnMapping.GetUnicode(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "1 つまたは複数のドメイン名ラベルの IDNA 標準では、Unicode 文字の文字列をエンコードされた文字列をデコードします。"
  remarks: "ドメイン名、ラベル、およびラベルの区切り記号の詳細については、「解説」を参照してください、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>メソッド。</xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>"
  example:
  - "The following example uses the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> method to convert an array of internationalized domain names to Punycode. The GetUnicode method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \n  \n [!code-vb[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/visualbasic/m-system.globalization.i_1_1.vb)]\n [!code-cs[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/csharp/m-system.globalization.i_1_1.cs)]"
  syntax:
    content: public string GetUnicode (string ascii);
    parameters:
    - id: ascii
      type: System.String
      description: "IDNA 標準に従ってエンコード、US-ASCII 文字範囲 (U +0&0020; を U +0&007;E) 内の&1; つまたは複数のラベルで構成される、デコードする文字列。"
    return:
      type: System.String
      description: "指定された IDNA 部分文字列と等価の Unicode、 <code> ascii </code>パラメーター。"
  overload: System.Globalization.IdnMapping.GetUnicode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ascii</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ascii</code>無効なに基づいて、<xref:System.Globalization.IdnMapping.AllowUnassigned*>と<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>プロパティ、および標準の IDNA です。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)
  id: GetUnicode(System.String,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetUnicode(String,Int32)
  nameWithType: IdnMapping.GetUnicode(String,Int32)
  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "1 つまたは複数のドメイン名ラベルの IDNA 標準では、Unicode 文字の文字列をエンコードされた部分文字列をデコードします。"
  remarks: "ドメイン名、ラベル、およびラベルの区切り記号の詳細については、「解説」を参照してください、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>メソッド。</xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>"
  syntax:
    content: public string GetUnicode (string ascii, int index);
    parameters:
    - id: ascii
      type: System.String
      description: "IDNA 標準に従ってエンコード、US-ASCII 文字範囲 (U +0&0020; を U +0&007;E) 内の&1; つまたは複数のラベルで構成される、デコードする文字列。"
    - id: index
      type: System.Int32
      description: "0 から始まるオフセット`ascii`をデコードするサブスト リングの開始を指定します。 デコード操作の最後まで継続、`ascii`文字列。"
    return:
      type: System.String
      description: "指定された IDNA 部分文字列と等価の Unicode、 <code> ascii </code>と<code> index </code>パラメーター。"
  overload: System.Globalization.IdnMapping.GetUnicode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ascii</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>index</code>がの長さより大きい<code>ascii</code>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ascii</code>無効なに基づいて、<xref:System.Globalization.IdnMapping.AllowUnassigned*>と<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>プロパティ、および標準の IDNA です。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)
  id: GetUnicode(System.String,System.Int32,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetUnicode(String,Int32,Int32)
  nameWithType: IdnMapping.GetUnicode(String,Int32,Int32)
  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "ラベルを含む&1; つまたは複数のドメイン名、IDNA 標準では、Unicode 文字の文字列をエンコードされた指定した長さの部分文字列をデコードします。"
  remarks: "ドメイン名、ラベル、およびラベルの区切り記号の詳細については、「解説」を参照してください、<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>メソッド。</xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>"
  syntax:
    content: public string GetUnicode (string ascii, int index, int count);
    parameters:
    - id: ascii
      type: System.String
      description: "IDNA 標準に従ってエンコード、US-ASCII 文字範囲 (U +0&0020; を U +0&007;E) 内の&1; つまたは複数のラベルで構成される、デコードする文字列。"
    - id: index
      type: System.Int32
      description: "0 から始まるオフセット`ascii`部分文字列の先頭を指定します。"
    - id: count
      type: System.Int32
      description: "指定された位置から開始する部分文字列に変換する文字数`index`で、`ascii`文字列。"
    return:
      type: System.String
      description: "指定された IDNA 部分文字列と等価の Unicode、 <code> ascii </code>、 <code> index </code>、および<code> count </code>パラメーター。"
  overload: System.Globalization.IdnMapping.GetUnicode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ascii</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>または<code>count</code>が&0; 未満です。       - または -<code>index</code>がの長さより大きい<code>ascii</code>です。       - または -<code>index</code>がの長さより大きい<code>ascii</code>マイナス<code>count</code>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ascii</code>無効なに基づいて、<xref:System.Globalization.IdnMapping.AllowUnassigned*>と<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>プロパティ、および標準の IDNA です。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.UseStd3AsciiRules
  id: UseStd3AsciiRules
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: UseStd3AsciiRules
  nameWithType: IdnMapping.UseStd3AsciiRules
  fullName: System.Globalization.IdnMapping.UseStd3AsciiRules
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "標準または厳密でない名前付け規則は、現在のメンバーによって実行される操作で使用されているかどうかを示す値を取得または<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>オブジェクト。"
  remarks: "標準の名前付け規則に従っているドメイン名は、US-ASCII 文字の範囲内の文字の特定のサブセットで構成されます。 文字は、A ~ Z、0 ~ 9 の数字、ハイフン (-) 文字 (U+002D)、およびピリオド (.) 文字の文字がします。 文字の大文字と小文字は大きくありません。 厳密でない名前付け規則より広い範囲の ASCII の使用を許可する文字、スペースを含む文字 (u+0020)、感嘆符文字 (U +0&0021;)、および (U +0&005;F) の文字、および設定が可能です。 場合は UseStd3AsciiRules `true`、によって返されるラベルに標準文字のみを含めることができます、<xref:System.Globalization.IdnMapping.GetAscii%2A>メソッド</xref:System.Globalization.IdnMapping.GetAscii%2A>。       UseStd3AsciiRules プロパティの値は、既定では、 `false`、拡張 ASCII 文字のサブセットがラベルで許可されているとします。      > [!NOTE] >、<xref:System.Globalization.IdnMapping>クラスには U +0&001; f、を介して表示できない文字 u+0000 の使用が禁止されていて、ドメイン名で&007;F U +0 は UseStd3AsciiRules プロパティの設定に関係なくラベルします</xref:System.Globalization.IdnMapping>。 この規則は、名前の悪用などのセキュリティ攻撃のリスクを軽減します。"
  example:
  - "The following example generates URLs that contain characters in the ASCII range from U+0000 to U+007F and passes them to the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> method of two <xref:System.Globalization.IdnMapping> objects. One object has its UseStd3AsciiRules property set to `true`, and the other object has it set to `false`. The output displays the characters that are invalid when the UseStd3AsciiRules property is `true` but valid when it is `false`.  \n  \n [!code-cs[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/add/codesnippet/csharp/p-system.globalization.i_1.cs)]\n [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/add/codesnippet/visualbasic/p-system.globalization.i_1.vb)]"
  syntax:
    content: public bool UseStd3AsciiRules { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>操作内で標準的な名前付け規則が使用されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Globalization.IdnMapping.UseStd3AsciiRules*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Globalization.IdnMapping.#ctor
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: IdnMapping()
  nameWithType: IdnMapping.IdnMapping()
  fullName: System.Globalization.IdnMapping.IdnMapping()
- uid: System.Globalization.IdnMapping.AllowUnassigned
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: AllowUnassigned
  nameWithType: IdnMapping.AllowUnassigned
  fullName: System.Globalization.IdnMapping.AllowUnassigned
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.IdnMapping.Equals(System.Object)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: Equals(Object)
  nameWithType: IdnMapping.Equals(Object)
  fullName: System.Globalization.IdnMapping.Equals(Object)
- uid: System.Globalization.IdnMapping.GetAscii(System.String)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetAscii(String)
  nameWithType: IdnMapping.GetAscii(String)
  fullName: System.Globalization.IdnMapping.GetAscii(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetAscii(String,Int32)
  nameWithType: IdnMapping.GetAscii(String,Int32)
  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetAscii(String,Int32,Int32)
  nameWithType: IdnMapping.GetAscii(String,Int32,Int32)
  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32,Int32)
- uid: System.Globalization.IdnMapping.GetHashCode
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetHashCode()
  nameWithType: IdnMapping.GetHashCode()
  fullName: System.Globalization.IdnMapping.GetHashCode()
- uid: System.Globalization.IdnMapping.GetUnicode(System.String)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetUnicode(String)
  nameWithType: IdnMapping.GetUnicode(String)
  fullName: System.Globalization.IdnMapping.GetUnicode(String)
- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetUnicode(String,Int32)
  nameWithType: IdnMapping.GetUnicode(String,Int32)
  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32)
- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetUnicode(String,Int32,Int32)
  nameWithType: IdnMapping.GetUnicode(String,Int32,Int32)
  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32,Int32)
- uid: System.Globalization.IdnMapping.UseStd3AsciiRules
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: UseStd3AsciiRules
  nameWithType: IdnMapping.UseStd3AsciiRules
  fullName: System.Globalization.IdnMapping.UseStd3AsciiRules
- uid: System.Globalization.IdnMapping.#ctor*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: IdnMapping
  nameWithType: IdnMapping.IdnMapping
- uid: System.Globalization.IdnMapping.AllowUnassigned*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: AllowUnassigned
  nameWithType: IdnMapping.AllowUnassigned
- uid: System.Globalization.IdnMapping.Equals*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: Equals
  nameWithType: IdnMapping.Equals
- uid: System.Globalization.IdnMapping.GetAscii*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetAscii
  nameWithType: IdnMapping.GetAscii
- uid: System.Globalization.IdnMapping.GetHashCode*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetHashCode
  nameWithType: IdnMapping.GetHashCode
- uid: System.Globalization.IdnMapping.GetUnicode*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetUnicode
  nameWithType: IdnMapping.GetUnicode
- uid: System.Globalization.IdnMapping.UseStd3AsciiRules*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: UseStd3AsciiRules
  nameWithType: IdnMapping.UseStd3AsciiRules
