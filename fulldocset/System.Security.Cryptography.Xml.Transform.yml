### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.Xml.Transform
  id: Transform
  children:
  - System.Security.Cryptography.Xml.Transform.#ctor
  - System.Security.Cryptography.Xml.Transform.Algorithm
  - System.Security.Cryptography.Xml.Transform.Context
  - System.Security.Cryptography.Xml.Transform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
  - System.Security.Cryptography.Xml.Transform.GetInnerXml
  - System.Security.Cryptography.Xml.Transform.GetOutput
  - System.Security.Cryptography.Xml.Transform.GetOutput(System.Type)
  - System.Security.Cryptography.Xml.Transform.GetXml
  - System.Security.Cryptography.Xml.Transform.InputTypes
  - System.Security.Cryptography.Xml.Transform.LoadInnerXml(System.Xml.XmlNodeList)
  - System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)
  - System.Security.Cryptography.Xml.Transform.OutputTypes
  - System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
  - System.Security.Cryptography.Xml.Transform.Resolver
  langs:
  - csharp
  name: Transform
  nameWithType: Transform
  fullName: System.Security.Cryptography.Xml.Transform
  type: Class
  summary: "指定したすべての抽象基本クラスを表す<xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;> </xref> XML デジタル署名で使用できる要素が派生します。"
  remarks: "XML 署名と検証を実行するときに、 `Transform`> 要素は、署名者が署名されたデータ オブジェクトを変換する方法について説明します。  ドキュメントの検証を使用して、 `Transform`> 同じ方法で署名されたデータを変換する要素。  検証ツールは、同じ方法で署名されたデータを変換することはできない場合に、ドキュメントを確認することはできません。       暗号化された XML ドキュメントまたは署名付き XML ドキュメントを&1; つまたは複数の変換オブジェクトを追加する必要がある場合にトランス フォーム クラスから派生するクラスを使用します。       詳細については、`<Transform>`要素、www.w3.org/TR/xmldsig-core/ に World Wide Web Consortium (W3C) から入手できますが、XMLDSIG の仕様または www.w3.org/TR/xmlenc-core/ で W3C から利用できる XML 暗号化の仕様を参照してください。"
  syntax:
    content: public abstract class Transform
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: Transform()
  nameWithType: Transform.Transform()
  fullName: System.Security.Cryptography.Xml.Transform.Transform()
  type: Constructor
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref>クラスです。"
  syntax:
    content: protected Transform ();
    parameters: []
  overload: System.Security.Cryptography.Xml.Transform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.Algorithm
  id: Algorithm
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: Algorithm
  nameWithType: Transform.Algorithm
  fullName: System.Security.Cryptography.Xml.Transform.Algorithm
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得または設定、Uniform Resource Identifier () を現在の変換で実行されるアルゴリズムを識別します。"
  remarks: "このプロパティの属性は、アルゴリズムに対応する`<Transform>`XMLDSIG シグネチャ内の要素。 たとえば、URI Base64 デコード変換用のアルゴリズムは、http://www.w3.org/2000/09/xmldsig#base64 XMLDSIG の仕様 (セクション 6.6.2) として定義されます。       <xref:System.Security.Cryptography.Xml.SignedXml>クラス</xref:System.Security.Cryptography.Xml.SignedXml>に関連付けられている静的フィールドのいずれかを使用してこの値を簡単に設定できます。"
  syntax:
    content: public string Algorithm { get; set; }
    return:
      type: System.String
      description: "現在の実行アルゴリズムを識別する URI を<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.Transform.Algorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.Context
  id: Context
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: Context
  nameWithType: Transform.Context
  fullName: System.Security.Cryptography.Xml.Transform.Context
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得または設定、 <xref href=&quot;System.Xml.XmlElement&quot;> </xref>するドキュメントのコンテキストを表すオブジェクト、現在<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクトが実行されています。"
  remarks: "ドキュメントに署名する場合、コンテキスト プロパティに渡された値を表します、<xref:System.Security.Cryptography.Xml.SignedXml>コンス トラクター</xref:System.Security.Cryptography.Xml.SignedXml> 。  ドキュメントを検証するときにコンテキスト プロパティを表す<xref:System.Security.Cryptography.Xml.Signature>オブジェクト</xref:System.Security.Cryptography.Xml.Signature>。       コンテキスト プロパティは、変換が呼び出される前に、署名の計算と確認には、中に自動的に設定されます。"
  syntax:
    content: public System.Xml.XmlElement Context { get; set; }
    return:
      type: System.Xml.XmlElement
      description: "<xref href=&quot;System.Xml.XmlElement&quot;> </xref>するドキュメントのコンテキストを表すオブジェクト、現在<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクトが実行されています。"
  overload: System.Security.Cryptography.Xml.Transform.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
  id: GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: GetDigestedOutput(HashAlgorithm)
  nameWithType: Transform.GetDigestedOutput(HashAlgorithm)
  fullName: System.Security.Cryptography.Xml.Transform.GetDigestedOutput(HashAlgorithm)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "派生クラスでオーバーライドされると、関連付けのダイジェストを返します、 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref>オブジェクト。"
  syntax:
    content: public virtual byte[] GetDigestedOutput (System.Security.Cryptography.HashAlgorithm hash);
    parameters:
    - id: hash
      type: System.Security.Cryptography.HashAlgorithm
      description: "<xref href=&quot;System.Security.Cryptography.HashAlgorithm&quot;> </xref>ダイジェストを作成するために使用します。"
    return:
      type: System.Byte[]
      description: "関連付けられている、ダイジェスト、 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.Transform.GetDigestedOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.GetInnerXml
  id: GetInnerXml
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: GetInnerXml()
  nameWithType: Transform.GetInnerXml()
  fullName: System.Security.Cryptography.Xml.Transform.GetInnerXml()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "派生クラスでオーバーライドされると、パラメーターの XML 表現を返します、 <xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref>オブジェクトは、XMLDSIG のサブ要素として含まれるに適した<xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;></xref>要素。"
  remarks: ''
  example:
  - "If a <xref:System.Security.Cryptography.Xml.Transform> object represents an XPath transform using the XPath expression `self::text()`,a call to GetInnerXml results in an <xref:System.Xml.XmlNodeList> object that represents the following XML element:  \n  \n```  \n<XPath>   \n  self::text()   \n</XPath>  \n```  \n  \n This element corresponds to the transform-specific content of the `<Transform>` element as defined in Section 4.3.3.4 of the XMLDSIG specification. For the above XPath transform, the entire `<Transform>` element is as follows:  \n  \n```  \n<Transform Algorithm=\"http://www.w3.org/TR/1999/REC-xpath-19991116\">   \n  <XPath>   \n    self::text()   \n  </XPath>   \n</Transform>  \n```"
  syntax:
    content: protected abstract System.Xml.XmlNodeList GetInnerXml ();
    parameters: []
    return:
      type: System.Xml.XmlNodeList
      description: "現在の記述に必要な変換に固有のコンテンツを表す XML ノードの一覧<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;> </xref> 、XMLDSIG 内のオブジェクト<xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;></xref>要素。"
  overload: System.Security.Cryptography.Xml.Transform.GetInnerXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.GetOutput
  id: GetOutput
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: GetOutput()
  nameWithType: Transform.GetOutput()
  fullName: System.Security.Cryptography.Xml.Transform.GetOutput()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "派生クラスでオーバーライドされると、現在の出力を返します<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト。"
  syntax:
    content: public abstract object GetOutput ();
    parameters: []
    return:
      type: System.Object
      description: "現在の出力<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.Transform.GetOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.GetOutput(System.Type)
  id: GetOutput(System.Type)
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: GetOutput(Type)
  nameWithType: Transform.GetOutput(Type)
  fullName: System.Security.Cryptography.Xml.Transform.GetOutput(Type)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "派生クラスでオーバーライドされると、現在の出力を返します<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>指定した型のオブジェクト。"
  remarks: "GetOutput メソッドへの呼び出しによって以前に設定されている値で実行した後、現在の変換の出力が返されます、<xref:System.Security.Cryptography.Xml.Transform.LoadInput%2A>メソッド</xref:System.Security.Cryptography.Xml.Transform.LoadInput%2A>。       返されるオブジェクトの型は型のオブジェクトのいずれかを指定する必要があります、<xref:System.Security.Cryptography.Xml.Transform.OutputTypes%2A>プロパティ</xref:System.Security.Cryptography.Xml.Transform.OutputTypes%2A>。"
  syntax:
    content: public abstract object GetOutput (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "返される出力の型。 これは内の型のいずれかを指定する必要があります、<xref:System.Security.Cryptography.Xml.Transform.OutputTypes*>プロパティ</xref:System.Security.Cryptography.Xml.Transform.OutputTypes*>。"
    return:
      type: System.Object
      description: "現在の出力<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクトとして指定した型のオブジェクト。"
  overload: System.Security.Cryptography.Xml.Transform.GetOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.GetXml
  id: GetXml
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: GetXml()
  nameWithType: Transform.GetXml()
  fullName: System.Security.Cryptography.Xml.Transform.GetXml()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "現在の XML 表現を返します<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Xml.XmlElement>の XML スキーマに準拠しているこのメソッドによって返されるオブジェクト、 `<Transform>` XMLDSIG の仕様のセクション 4.3.3.4 で定義された要素</xref:System.Xml.XmlElement>。"
  syntax:
    content: public System.Xml.XmlElement GetXml ();
    parameters: []
    return:
      type: System.Xml.XmlElement
      description: "現在の XML 表現<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.Transform.GetXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.InputTypes
  id: InputTypes
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: InputTypes
  nameWithType: Transform.InputTypes
  fullName: System.Security.Cryptography.Xml.Transform.InputTypes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "派生クラスでオーバーライドされると場合に、有効な入力値をされている型の配列を取得、 <xref:System.Security.Cryptography.Xml.Transform.LoadInput*>、現在のメソッド<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト</xref:System.Security.Cryptography.Xml.Transform.LoadInput*>。"
  remarks: "InputTypes プロパティによって返される配列があるためには、少なくとも&1; つの要素を含める必要がありますすべて<xref:System.Security.Cryptography.Xml.Transform>オブジェクトに有効な入力として少なくとも&1; つの型を使用する必要があります</xref:System.Security.Cryptography.Xml.Transform>。       A<xref:System.Security.Cryptography.Xml.Transform>オブジェクト通常、次の種類の&1; つ以上入力として受け取ります<xref:System.IO.Stream>、 <xref:System.Xml.XmlDocument>、または<xref:System.Xml.XmlNodeList>。</xref:System.Xml.XmlNodeList> </xref:System.Xml.XmlDocument> </xref:System.IO.Stream> </xref:System.Security.Cryptography.Xml.Transform> 。"
  syntax:
    content: public abstract Type[] InputTypes { get; }
    return:
      type: System.Type[]
      description: "現在の有効な入力の型の配列<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクトですこれらの種類のいずれかのオブジェクトのみを渡すことができます、 <xref:System.Security.Cryptography.Xml.Transform.LoadInput*>、現在のメソッド<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト。</xref:System.Security.Cryptography.Xml.Transform.LoadInput*> 。"
  overload: System.Security.Cryptography.Xml.Transform.InputTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.LoadInnerXml(System.Xml.XmlNodeList)
  id: LoadInnerXml(System.Xml.XmlNodeList)
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: LoadInnerXml(XmlNodeList)
  nameWithType: Transform.LoadInnerXml(XmlNodeList)
  fullName: System.Security.Cryptography.Xml.Transform.LoadInnerXml(XmlNodeList)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "派生クラスでオーバーライドされると、指定した解析<xref href=&quot;System.Xml.XmlNodeList&quot;></xref>オブジェクトの変換に固有のコンテンツとして、 <xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;> </xref>要素、現在の内部状態を構成および<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>と一致するオブジェクト、 <xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;> </xref>要素。"
  remarks: "このメソッドはのサブ要素を処理するために使用する`<Transform>`要素。"
  syntax:
    content: public abstract void LoadInnerXml (System.Xml.XmlNodeList nodeList);
    parameters:
    - id: nodeList
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref>現在の変換に固有のコンテンツを指定するオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.Transform.LoadInnerXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)
  id: LoadInput(System.Object)
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: LoadInput(Object)
  nameWithType: Transform.LoadInput(Object)
  fullName: System.Security.Cryptography.Xml.Transform.LoadInput(Object)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "派生クラスでオーバーライドされると、現在、指定された入力を読み込みます<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト。"
  remarks: "入力オブジェクトの種類は内の型のいずれかを指定する必要があります、<xref:System.Security.Cryptography.Xml.Transform.InputTypes%2A>プロパティ</xref:System.Security.Cryptography.Xml.Transform.InputTypes%2A>。"
  syntax:
    content: public abstract void LoadInput (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "現在読み込む入力<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.Transform.LoadInput*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.OutputTypes
  id: OutputTypes
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: OutputTypes
  nameWithType: Transform.OutputTypes
  fullName: System.Security.Cryptography.Xml.Transform.OutputTypes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "派生クラスでオーバーライドされるから可能な出力をされている型の配列を取得、 <xref:System.Security.Cryptography.Xml.Transform.GetOutput*>、現在のメソッド<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト</xref:System.Security.Cryptography.Xml.Transform.GetOutput*>。"
  remarks: "OutputTypes プロパティによって返される配列は、すべての変換が出力として少なくとも&1; つの型を生成する必要がありますので、少なくとも&1; つの要素を含める必要があります。"
  syntax:
    content: public abstract Type[] OutputTypes { get; }
    return:
      type: System.Type[]
      description: "現在の有効な出力型の配列<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト以外のオブジェクトのみを次のいずれかの型はから返されます、 <xref:System.Security.Cryptography.Xml.Transform.GetOutput*>、現在のメソッド<xref href=&quot;System.Security.Cryptography.Xml.Transform&quot;></xref>オブジェクト</xref:System.Security.Cryptography.Xml.Transform.GetOutput*>。"
  overload: System.Security.Cryptography.Xml.Transform.OutputTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
  id: PropagatedNamespaces
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: PropagatedNamespaces
  nameWithType: Transform.PropagatedNamespaces
  fullName: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得または設定、 <xref href=&quot;System.Collections.Hashtable&quot;> </xref>シグネチャに反映される名前空間を含むオブジェクトです。"
  remarks: "XML 名前空間は、同じ名前を持つドキュメント内の別の要素を区別するために使用されます。       <xref:System.Collections.Hashtable>PropagatedNamespaces プロパティのキーは、名前空間プレフィックスおよび<xref:System.Collections.Hashtable>値は、名前空間の Uniform Resource Identifier (Uri).</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable>       PropagatedNamespaces プロパティは、変換が呼び出される前に、署名の計算と確認には、中に自動的に設定されます。"
  syntax:
    content: public System.Collections.Hashtable PropagatedNamespaces { get; }
    return:
      type: System.Collections.Hashtable
      description: "A <xref href=&quot;System.Collections.Hashtable&quot;> </xref>シグネチャに反映される名前空間を含むオブジェクトです。"
  overload: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "PropagatedNamespaces プロパティに設定された<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.Transform.Resolver
  id: Resolver
  parent: System.Security.Cryptography.Xml.Transform
  langs:
  - csharp
  name: Resolver
  nameWithType: Transform.Resolver
  fullName: System.Security.Cryptography.Xml.Transform.Resolver
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "現在の設定<xref href=&quot;System.Xml.XmlResolver&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Xml.XmlResolver>クラスによって、Uniform Resource Identifier () をという名前の外部 XML リソースを解決します</xref:System.Xml.XmlResolver>。 XML ファイルの作成元を信頼していない場合、URI でという名前のコンピューター リソースにアクセスする XML ファイルを許可する場合がありますされません。 競合回避モジュールのプロパティでは、XML ファイルがコンピューター リソースに異なるを指定しているアクセスのレベルを制御できます<xref:System.Xml.XmlResolver>オブジェクト。</xref:System.Xml.XmlResolver> 。 任意のアクセスを許可しないようにする場合このプロパティを設定することができます`null`(`Nothing` Visual Basic で)。"
  syntax:
    content: public System.Xml.XmlResolver Resolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "現在<xref href=&quot;System.Xml.XmlResolver&quot;></xref>オブジェクト。 このプロパティの既定値、 <xref href=&quot;System.Xml.XmlSecureResolver&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.Transform.Resolver*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.Xml.Transform.#ctor
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Transform()
  nameWithType: Transform.Transform()
  fullName: System.Security.Cryptography.Xml.Transform.Transform()
- uid: System.Security.Cryptography.Xml.Transform.Algorithm
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Algorithm
  nameWithType: Transform.Algorithm
  fullName: System.Security.Cryptography.Xml.Transform.Algorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.Xml.Transform.Context
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Context
  nameWithType: Transform.Context
  fullName: System.Security.Cryptography.Xml.Transform.Context
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Security.Cryptography.Xml.Transform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetDigestedOutput(HashAlgorithm)
  nameWithType: Transform.GetDigestedOutput(HashAlgorithm)
  fullName: System.Security.Cryptography.Xml.Transform.GetDigestedOutput(HashAlgorithm)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.Xml.Transform.GetInnerXml
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetInnerXml()
  nameWithType: Transform.GetInnerXml()
  fullName: System.Security.Cryptography.Xml.Transform.GetInnerXml()
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Security.Cryptography.Xml.Transform.GetOutput
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetOutput()
  nameWithType: Transform.GetOutput()
  fullName: System.Security.Cryptography.Xml.Transform.GetOutput()
- uid: System.Security.Cryptography.Xml.Transform.GetOutput(System.Type)
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetOutput(Type)
  nameWithType: Transform.GetOutput(Type)
  fullName: System.Security.Cryptography.Xml.Transform.GetOutput(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.Cryptography.Xml.Transform.GetXml
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetXml()
  nameWithType: Transform.GetXml()
  fullName: System.Security.Cryptography.Xml.Transform.GetXml()
- uid: System.Security.Cryptography.Xml.Transform.InputTypes
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: InputTypes
  nameWithType: Transform.InputTypes
  fullName: System.Security.Cryptography.Xml.Transform.InputTypes
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.Xml.Transform.LoadInnerXml(System.Xml.XmlNodeList)
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: LoadInnerXml(XmlNodeList)
  nameWithType: Transform.LoadInnerXml(XmlNodeList)
  fullName: System.Security.Cryptography.Xml.Transform.LoadInnerXml(XmlNodeList)
- uid: System.Security.Cryptography.Xml.Transform.LoadInput(System.Object)
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: LoadInput(Object)
  nameWithType: Transform.LoadInput(Object)
  fullName: System.Security.Cryptography.Xml.Transform.LoadInput(Object)
- uid: System.Security.Cryptography.Xml.Transform.OutputTypes
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: OutputTypes
  nameWithType: Transform.OutputTypes
  fullName: System.Security.Cryptography.Xml.Transform.OutputTypes
- uid: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: PropagatedNamespaces
  nameWithType: Transform.PropagatedNamespaces
  fullName: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Security.Cryptography.Xml.Transform.Resolver
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Resolver
  nameWithType: Transform.Resolver
  fullName: System.Security.Cryptography.Xml.Transform.Resolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Security.Cryptography.Xml.Transform.#ctor*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Transform
  nameWithType: Transform.Transform
- uid: System.Security.Cryptography.Xml.Transform.Algorithm*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Algorithm
  nameWithType: Transform.Algorithm
- uid: System.Security.Cryptography.Xml.Transform.Context*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Context
  nameWithType: Transform.Context
- uid: System.Security.Cryptography.Xml.Transform.GetDigestedOutput*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetDigestedOutput
  nameWithType: Transform.GetDigestedOutput
- uid: System.Security.Cryptography.Xml.Transform.GetInnerXml*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetInnerXml
  nameWithType: Transform.GetInnerXml
- uid: System.Security.Cryptography.Xml.Transform.GetOutput*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetOutput
  nameWithType: Transform.GetOutput
- uid: System.Security.Cryptography.Xml.Transform.GetXml*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: GetXml
  nameWithType: Transform.GetXml
- uid: System.Security.Cryptography.Xml.Transform.InputTypes*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: InputTypes
  nameWithType: Transform.InputTypes
- uid: System.Security.Cryptography.Xml.Transform.LoadInnerXml*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: LoadInnerXml
  nameWithType: Transform.LoadInnerXml
- uid: System.Security.Cryptography.Xml.Transform.LoadInput*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: LoadInput
  nameWithType: Transform.LoadInput
- uid: System.Security.Cryptography.Xml.Transform.OutputTypes*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: OutputTypes
  nameWithType: Transform.OutputTypes
- uid: System.Security.Cryptography.Xml.Transform.PropagatedNamespaces*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: PropagatedNamespaces
  nameWithType: Transform.PropagatedNamespaces
- uid: System.Security.Cryptography.Xml.Transform.Resolver*
  parent: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: Resolver
  nameWithType: Transform.Resolver
