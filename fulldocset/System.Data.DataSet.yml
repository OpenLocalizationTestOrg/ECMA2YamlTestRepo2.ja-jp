### YamlMime:ManagedReference
items:
- uid: System.Data.DataSet
  id: DataSet
  children:
  - System.Data.DataSet.#ctor
  - System.Data.DataSet.#ctor(System.String)
  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  - System.Data.DataSet.AcceptChanges
  - System.Data.DataSet.BeginInit
  - System.Data.DataSet.CaseSensitive
  - System.Data.DataSet.Clear
  - System.Data.DataSet.Clone
  - System.Data.DataSet.Copy
  - System.Data.DataSet.CreateDataReader
  - System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  - System.Data.DataSet.DataSetName
  - System.Data.DataSet.DefaultViewManager
  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.EndInit
  - System.Data.DataSet.EnforceConstraints
  - System.Data.DataSet.ExtendedProperties
  - System.Data.DataSet.GetChanges
  - System.Data.DataSet.GetChanges(System.Data.DataRowState)
  - System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  - System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.GetSchemaSerializable
  - System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.GetXml
  - System.Data.DataSet.GetXmlSchema
  - System.Data.DataSet.HasChanges
  - System.Data.DataSet.HasChanges(System.Data.DataRowState)
  - System.Data.DataSet.HasErrors
  - System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  - System.Data.DataSet.Initialized
  - System.Data.DataSet.InitializeDerivedDataSet
  - System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.IsInitialized
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  - System.Data.DataSet.Locale
  - System.Data.DataSet.Merge(System.Data.DataRow[])
  - System.Data.DataSet.Merge(System.Data.DataSet)
  - System.Data.DataSet.Merge(System.Data.DataTable)
  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  - System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.MergeFailed
  - System.Data.DataSet.Namespace
  - System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  - System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  - System.Data.DataSet.Prefix
  - System.Data.DataSet.RaisePropertyChanging(System.String)
  - System.Data.DataSet.ReadXml(System.IO.Stream)
  - System.Data.DataSet.ReadXml(System.IO.TextReader)
  - System.Data.DataSet.ReadXml(System.String)
  - System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  - System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  - System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  - System.Data.DataSet.ReadXmlSchema(System.String)
  - System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  - System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  - System.Data.DataSet.RejectChanges
  - System.Data.DataSet.Relations
  - System.Data.DataSet.RemotingFormat
  - System.Data.DataSet.Reset
  - System.Data.DataSet.SchemaSerializationMode
  - System.Data.DataSet.ShouldSerializeRelations
  - System.Data.DataSet.ShouldSerializeTables
  - System.Data.DataSet.Site
  - System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.DataSet.System#ComponentModel#IListSource#GetList
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - System.Data.DataSet.Tables
  - System.Data.DataSet.WriteXml(System.IO.Stream)
  - System.Data.DataSet.WriteXml(System.IO.TextWriter)
  - System.Data.DataSet.WriteXml(System.String)
  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  - System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  - System.Data.DataSet.WriteXmlSchema(System.String)
  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  langs:
  - csharp
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
  type: Class
  summary: "データのメモリ内キャッシュを表します。"
  remarks: "データセット、データ ソースから取得したデータのインメモリ キャッシュで、あるは、ADO.NET アーキテクチャの主要なコンポーネントです。 データセットのコレクションから成る<xref:System.Data.DataTable>で互いに関連付けることができるオブジェクト<xref:System.Data.DataRelation>オブジェクト</xref:System.Data.DataRelation></xref:System.Data.DataTable>。 使用して、データセット内のデータの整合性を適用することができますも、<xref:System.Data.UniqueConstraint>と<xref:System.Data.ForeignKeyConstraint>オブジェクト</xref:System.Data.ForeignKeyConstraint></xref:System.Data.UniqueConstraint>。 データセット オブジェクトを操作の詳細については、次を参照してください。[データセット、Datatable、および Dataview](~/add/includes/ajax-current-ext-md.md)です。       一方<xref:System.Data.DataTable>オブジェクトは、データを含む、<xref:System.Data.DataRelationCollection>がテーブルの階層構造を移動することができます</xref:System.Data.DataRelationCollection></xref:System.Data.DataTable>。 テーブルが含まれている、<xref:System.Data.DataTableCollection>経由でアクセス、<xref:System.Data.DataSet.Tables%2A>プロパティ</xref:System.Data.DataSet.Tables%2A></xref:System.Data.DataTableCollection>。 アクセスするときに<xref:System.Data.DataTable>オブジェクト、条件付きで大文字小文字が区別されることに注意してください</xref:System.Data.DataTable>。 たとえば、1 つ<xref:System.Data.DataTable>&quot;mydatatable&quot;の名前は&quot;Mydatatable&quot;という名前別と、テーブルのいずれかの検索に使用される文字列は大文字と小文字を区別見なされます</xref:System.Data.DataTable>。 ただし、&quot;mydatatable&quot;が存在する&quot;Mydatatable&quot;がない場合は、検索文字列が見なされると大文字小文字を区別しません。 操作の詳細については<xref:System.Data.DataTable>、オブジェクトを参照してください[DataTable の作成](~/add/includes/ajax-current-ext-md.md)</xref:System.Data.DataTable>。       データセットでは、読み取りでき、XML ドキュメントでは、データとスキーマを記述することができます。 データとスキーマする HTTP 経由で伝達し、XML が有効な任意のプラットフォーム上の任意のアプリケーションで使用します。 XML スキーマとしてスキーマを保存することができます、<xref:System.Data.DataSet.WriteXmlSchema%2A>を使用して、メソッド、およびスキーマとデータの両方を保存できる、<xref:System.Data.DataSet.WriteXml%2A>メソッド</xref:System.Data.DataSet.WriteXml%2A></xref:System.Data.DataSet.WriteXmlSchema%2A>。 スキーマとデータの両方を含む XML ドキュメントを読み取り、使用、<xref:System.Data.DataSet.ReadXml%2A>メソッド</xref:System.Data.DataSet.ReadXml%2A>。       一般的な複数層の実装では、元のデータの更新手順の作成と、データセットを更新し、逆には: 1。  構築し、各入力<xref:System.Data.DataTable><xref:System.Data.Common.DataAdapter>。</xref:System.Data.Common.DataAdapter>を使用してデータ ソースからデータを含むデータセットで</xref:System.Data.DataTable>      2.  個々 のデータが変更<xref:System.Data.DataTable>オブジェクトの追加、更新、または削除を<xref:System.Data.DataRow>オブジェクト</xref:System.Data.DataRow></xref:System.Data.DataTable>。      3.  呼び出す、<xref:System.Data.DataSet.GetChanges%2A>データへの変更のみが機能する&2; 番目のデータセットを作成する方法</xref:System.Data.DataSet.GetChanges%2A>。      4.  呼び出す、<xref:System.Data.Common.DataAdapter.Update%2A>のメソッド、 <xref:System.Data.Common.DataAdapter>、2 番目のデータセットを引数として渡します</xref:System.Data.Common.DataAdapter></xref:System.Data.Common.DataAdapter.Update%2A>。      5.  呼び出す、<xref:System.Data.DataSet.Merge%2A>最初に&2; 番目のデータセットからの変更をマージするメソッド</xref:System.Data.DataSet.Merge%2A>。      6.  呼び出す、<xref:System.Data.DataSet.AcceptChanges%2A>データセットにします</xref:System.Data.DataSet.AcceptChanges%2A>。 代わりに、呼び出す<xref:System.Data.DataSet.RejectChanges%2A>変更を取り消します</xref:System.Data.DataSet.RejectChanges%2A>。      > [!NOTE] > DataSet および<xref:System.Data.DataTable>オブジェクトから継承<xref:System.ComponentModel.MarshalByValueComponent>、およびサポート、<xref:System.Runtime.Serialization.ISerializable>リモート処理用のインターフェイス</xref:System.Runtime.Serialization.ISerializable></xref:System.ComponentModel.MarshalByValueComponent></xref:System.Data.DataTable>。 これらは、リモート処理ができる唯一の ADO.NET オブジェクトです。      > [!NOTE] > データセット内のファイナライザーが中止されたために、データセットから継承されたクラスは、ガベージ コレクターによって終了処理されません。 派生クラスを呼び出すことができます、 <xref:System.GC.ReRegisterForFinalize%2A>、クラス、ガベージ コレクターによって完了するを使用できるように、コンス トラクターのメソッド</xref:System.GC.ReRegisterForFinalize%2A>。"
  example:
  - "The following example consists of several methods that, combined, create and fill a DataSet from the **Northwind** database.  \n  \n [!code-cs[Classic WebData DataSet Example#1](~/add/codesnippet/csharp/t-system.data.dataset_1.cs)]\n [!code-vb[Classic WebData DataSet Example#1](~/add/codesnippet/visualbasic/t-system.data.dataset_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("DataSetName")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Xml.Serialization.XmlRoot("DataSet")]

      [System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")]

      public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements:
  - System.ComponentModel.IListSource
  - System.ComponentModel.ISupportInitializeNotification
  - System.Runtime.Serialization.ISerializable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.ToString
  platform:
  - net462
- uid: System.Data.DataSet.#ctor
  id: '#ctor'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet()
  nameWithType: DataSet.DataSet()
  fullName: System.Data.DataSet.DataSet()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.DataSet&quot;> </xref>クラスです。"
  remarks: "この実装、<xref:System.Data.DataSet>コンス トラクターのパラメーターをとらないし、&quot;NewDataSet、&quot;の既定の名前を新しいインスタンスを作成します</xref:System.Data.DataSet>。       名前、<xref:System.Data.DataSet>の XML 表現することを確認するために必要な<xref:System.Data.DataSet>常にスキーマ定義内の最上位の要素は、ドキュメントの要素の名前を持ちます</xref:System.Data.DataSet></xref:System.Data.DataSet>。"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.  \n  \n [!code-vb[Classic WebData DataSet.DataSet Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_1_1.vb)]"
  syntax:
    content: public DataSet ();
    parameters: []
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(String)
  nameWithType: DataSet.DataSet(String)
  fullName: System.Data.DataSet.DataSet(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定した名前のクラスです。"
  remarks: "名前、<xref:System.Data.DataSet>の XML 表現することを確認するために必要な<xref:System.Data.DataSet>常にスキーマ定義で最高レベルの要素は、ドキュメントの要素の名前を持ちます</xref:System.Data.DataSet></xref:System.Data.DataSet>。"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.  \n  \n [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_0_1.vb)]"
  syntax:
    content: public DataSet (string dataSetName);
    parameters:
    - id: dataSetName
      type: System.String
      description: "名前、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.DataSet&quot;> </xref>を指定したシリアル化情報とコンテキストを持つクラス。"
  syntax:
    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "オブジェクトを逆シリアル化または逆シリアル化に必要なデータです。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "ソースと指定したシリアル化されたストリームの転送先。"
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(SerializationInfo,StreamingContext,Boolean)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.DataSet&quot;> </xref>クラスです。"
  syntax:
    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>オブジェクト。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>オブジェクト</xref:System.Runtime.Serialization.StreamingContext>。"
    - id: ConstructSchema
      type: System.Boolean
      description: "ブール値です。"
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataSet.AcceptChanges()
  fullName: System.Data.DataSet.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "これに加えられたすべての変更をコミット<xref href=&quot;System.Data.DataSet&quot;></xref>読み込まれてから、または前回 AcceptChanges が呼び出されました。"
  remarks: "両方の<xref:System.Data.DataRow>と<xref:System.Data.DataTable>クラス AcceptChanges 方法があります</xref:System.Data.DataTable></xref:System.Data.DataRow>。 呼び出す<xref:System.Data.DataTable.AcceptChanges%2A>で、<xref:System.Data.DataTable>レベルの原因として、<xref:System.Data.DataRow.AcceptChanges%2A>メソッドごとに<xref:System.Data.DataRow>を呼び出せる</xref:System.Data.DataRow></xref:System.Data.DataRow.AcceptChanges%2A></xref:System.Data.DataTable></xref:System.Data.DataTable.AcceptChanges%2A>。 同様に、 <xref:System.Data.DataSet> <xref:System.Data.DataTable.AcceptChanges%2A> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>内の各テーブルに呼び出される</xref:System.Data.DataTable.AcceptChanges%2A>と、</xref:System.Data.DataSet> AcceptChanges を呼び出す この方法では、メソッドの呼び出された複数のレベルを持ちます。 AcceptChanges を呼び出す、<xref:System.Data.DataSet>を&1; 回の呼び出しですべての下位オブジェクト (たとえば、テーブルと行) のメソッドを呼び出すことができます</xref:System.Data.DataSet>。       呼び出すと`AcceptChanges`上、 `DataSet`、any<xref:System.Data.DataRow>まだ編集モードでのオブジェクトがそれらの編集を正常に終了します</xref:System.Data.DataRow>。 各<xref:System.Data.DataRow>の<xref:System.Data.DataRow.RowState%2A>プロパティも変更します。`Added`と`Modified`になる行`Unchanged`、および`Deleted`行が削除されます</xref:System.Data.DataRow.RowState%2A></xref:System.Data.DataRow>。       場合、`DataSet`が含まれています<xref:System.Data.ForeignKeyConstraint>呼び出し、オブジェクト、`AcceptChanges`メソッドもにより、<xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A>適用する</xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A></xref:System.Data.ForeignKeyConstraint>。      > [!NOTE]  >   `AcceptChanges`と`RejectChanges`のみに適用`DataRow`関連の変更 (つまり、Add、Remove、Delete、および変更)。 これらはスキーマまたは構造の変更を適用できません。   >> DataAdapter を使用して、データセットに格納された場合、通話 AcceptChanges は、データ ソースにこれらの変更をレプリケートされません。 そのような状況で呼び出す<xref:System.Data.Common.DataAdapter.Update%2A>代わりにします</xref:System.Data.Common.DataAdapter.Update%2A>。 参照してください[Dataadapter によるデータ ソースを更新](http://msdn.microsoft.com/library/33y2221y.aspx)詳細についてはします。"
  example:
  - "The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>. The AcceptChanges method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.  \n  \n [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ac_1.vb)]\n [!code-cs[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/csharp/m-system.data.dataset.ac_1.cs)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataSet.AcceptChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.BeginInit
  id: BeginInit
  parent: System.Data.DataSet
  langs:
  - csharp
  name: BeginInit()
  nameWithType: DataSet.BeginInit()
  fullName: System.Data.DataSet.BeginInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "初期化を開始、 <xref href=&quot;System.Data.DataSet&quot;> </xref>フォームまたは別のコンポーネントで使用します。 初期化は実行時に発生します。"
  remarks: "Visual Studio .NET デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用するコンポーネントの初期化を開始します。 <xref:System.Data.DataSet.EndInit%2A>メソッドが初期化を終了します</xref:System.Data.DataSet.EndInit%2A>。 BeginInit を使用して<xref:System.Data.DataSet.EndInit%2A>メソッド使用されないように、コントロールが完全に初期化される前にします</xref:System.Data.DataSet.EndInit%2A>。"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Data.DataSet.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CaseSensitive
  id: CaseSensitive
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
  fullName: System.Data.DataSet.CaseSensitive
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "内で比較を文字列かどうかを示す値を取得または設定<xref href=&quot;System.Data.DataTable&quot;></xref>オブジェクトは、大文字小文字を区別します。"
  remarks: "CaseSensitive プロパティでは、それぞれの並べ替え、検索、およびフィルター操作を実行する方法に影響<xref:System.Data.DataTable>に含まれているオブジェクト、<xref:System.Data.DataSet>を使用する場合、<xref:System.Data.DataTable.Select%2A>メソッド</xref:System.Data.DataTable.Select%2A></xref:System.Data.DataSet></xref:System.Data.DataTable>。       既定では、CaseSensitive プロパティを設定、<xref:System.Data.DataSet>も設定、<xref:System.Data.DataTable.CaseSensitive%2A>のそれぞれ関連付けられているプロパティ<xref:System.Data.DataTable>同じ値にします</xref:System.Data.DataTable></xref:System.Data.DataTable.CaseSensitive%2A></xref:System.Data.DataSet>。"
  example:
  - "The following example toggles the CaseSensitive property.  \n  \n [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ca_1.vb)]"
  syntax:
    content: public bool CaseSensitive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、文字列比較では、大文字小文字を区別します。それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.CaseSensitive*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Clear
  id: Clear
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Clear()
  nameWithType: DataSet.Clear()
  fullName: System.Data.DataSet.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "消去、 <xref href=&quot;System.Data.DataSet&quot;> </xref>のすべてのテーブル内のすべての行を削除することですべてのデータ。"
  remarks: "場合<xref:System.Data.DataSet><xref:System.Xml.XmlDataDocument>クリアまたは<xref:System.Data.DataTable.Clear%2A?displayProperty=fullName><xref:System.NotSupportedException>.</xref:System.NotSupportedException>を発生させます</xref:System.Data.DataTable.Clear%2A?displayProperty=fullName>を呼び出す</xref:System.Xml.XmlDataDocument>にバインド</xref:System.Data.DataSet> このような状況を避けるためには、テーブルごとに、一度に&1; 行ずつの削除を走査します。"
  example:
  - "The following example clears the <xref:System.Data.DataSet> of all rows in all tables.  \n  \n [!code-vb[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_1_1.vb)]\n [!code-cs[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_1_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataSet.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Clone
  id: Clone
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Clone()
  nameWithType: DataSet.Clone()
  fullName: System.Data.DataSet.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "構造をコピー、 <xref href=&quot;System.Data.DataSet&quot;> </xref>、すべてを含む<xref href=&quot;System.Data.DataTable&quot;></xref>スキーマ、リレーション、および制約。 任意のデータはコピーされません。"
  remarks: >-
    > [!NOTE]

    >  If these classes have been subclassed, the clone will also be of the same subclasses.
  example:
  - "The following example creates a clone of a <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_0_1.cs)]\n [!code-vb[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_0_1.vb)]"
  syntax:
    content: public virtual System.Data.DataSet Clone ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "新しい<xref href=&quot;System.Data.DataSet&quot;></xref>現在と同じスキーマで<xref href=&quot;System.Data.DataSet&quot;></xref>が、すべてのデータ。"
  overload: System.Data.DataSet.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Copy
  id: Copy
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Copy()
  nameWithType: DataSet.Copy()
  fullName: System.Data.DataSet.Copy()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "この構造とデータの両方をコピー <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example uses the Copy method to create a copy of the original <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/csharp/m-system.data.dataset.copy_1.cs)]\n [!code-vb[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.copy_1.vb)]"
  syntax:
    content: public System.Data.DataSet Copy ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "新しい<xref href=&quot;System.Data.DataSet&quot;></xref>同じ構造 (テーブルのスキーマ、リレーション、および制約) とこのデータを持つ<xref href=&quot;System.Data.DataSet&quot;></xref>です。       <div class=&quot;alert NOTE&quot;>    これらのクラスがサブクラス化されている場合、コピーが同じサブクラスにもなります。      </div>"
  overload: System.Data.DataSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CreateDataReader
  id: CreateDataReader
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CreateDataReader()
  nameWithType: DataSet.CreateDataReader()
  fullName: System.Data.DataSet.CreateDataReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "返します、 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>ごとに設定する&1; つの結果と<xref href=&quot;System.Data.DataTable&quot;></xref>で、同じシーケンスに表示される、テーブル、<xref:System.Data.DataSet.Tables*>コレクション</xref:System.Data.DataSet.Tables*>。"
  remarks: "内で返された結果セットの順序を保証するために<xref:System.Data.DataTableReader>場合、<xref:System.Data.DataTable>内で、<xref:System.Data.DataSet>が空で、これによって表される空の結果セット内で返された`DataTableReader`</xref:System.Data.DataSet></xref:System.Data.DataTable></xref:System.Data.DataTableReader>。"
  example:
  - "The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>. The example then passes the filled `DataSet` to a procedure that calls the CreateDataReader method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>. The example displays the results in the Console window.  \n  \n [!code-vb[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_0_1.vb)]\n [!code-cs[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_0_1.cs)]"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader ();
    parameters: []
    return:
      type: System.Data.DataTableReader
      description: "A <xref href=&quot;System.Data.DataTableReader&quot;> </xref>を対応する&1; つまたは複数の結果セットを含む、 <xref href=&quot;System.Data.DataTable&quot;> </xref> 、ソース内に含まれるインスタンス<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  overload: System.Data.DataSet.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  id: CreateDataReader(System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CreateDataReader(DataTable[])
  nameWithType: DataSet.CreateDataReader(DataTable[])
  fullName: System.Data.DataSet.CreateDataReader(DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "返します、 <xref href=&quot;System.Data.DataTableReader&quot;> </xref>ごとに設定する&1; つの結果に<xref href=&quot;System.Data.DataTable&quot;></xref>です。"
  remarks: "返された内の結果の順序を設定することを確認するために<xref:System.Data.DataTableReader>場合は、<xref:System.Data.DataTable>内で、<xref:System.Data.DataSet>が空で、これによって表される空の結果セット内で返された`DataTableReader`</xref:System.Data.DataSet></xref:System.Data.DataTable></xref:System.Data.DataTableReader>。 このオーバー ロードされたバージョンでは、リストを指定することができますので`DataTable`パラメーターとして、インスタンス内で返された結果セットが表示される順序を指定できます`DataTableReader`です。"
  example:
  - "This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>. The example calls the CreateDataReader method and displays the contents of the returned <xref:System.Data.DataTableReader>. Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters. The example displays the results in the Console window.  \n  \n [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_1_1.vb)]\n [!code-cs[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_1_1.cs)]"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader (System.Data.DataTable[] dataTables);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "返される結果の順序を提供するデータ テーブルの配列を設定、 <xref href=&quot;System.Data.DataTableReader&quot;></xref>です。"
    return:
      type: System.Data.DataTableReader
      description: "A <xref href=&quot;System.Data.DataTableReader&quot;> </xref>を対応する&1; つまたは複数の結果セットを含む、 <xref href=&quot;System.Data.DataTable&quot;> </xref> 、ソース内に含まれるインスタンス<xref href=&quot;System.Data.DataSet&quot;></xref>です。 指定された順序で返された結果セットにが、 <code> dataTables </code>パラメーター。"
  overload: System.Data.DataSet.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DataSetName
  id: DataSetName
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSetName
  nameWithType: DataSet.DataSetName
  fullName: System.Data.DataSet.DataSetName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "現在の名前を取得または<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataSet> with the given DataSetName.  \n  \n [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.da_1.vb)]\n [!code-cs[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/csharp/p-system.data.dataset.da_1.cs)]"
  syntax:
    content: public string DataSetName { get; set; }
    return:
      type: System.String
      description: "名前、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  overload: System.Data.DataSet.DataSetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DefaultViewManager
  id: DefaultViewManager
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
  fullName: System.Data.DataSet.DefaultViewManager
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "含まれるデータのカスタム ビューを取得、 <xref href=&quot;System.Data.DataSet&quot;> </xref>フィルター、検索、およびカスタムの使用を許可する<xref href=&quot;System.Data.DataViewManager&quot;></xref>です。"
  remarks: "<xref:System.Data.DataViewManager>プロパティでは、各<xref:System.Data.DataTable><xref:System.Data.DataSet>。</xref:System.Data.DataSet></xref:System.Data.DataTable>のカスタム設定を作成することができます DefaultViewManager によって返される</xref:System.Data.DataViewManager>       取得する場合、<xref:System.Data.DataView>から、 <xref:System.Data.DataTable>、並べ替え順、フィルター処理、および<xref:System.Data.DataViewRowState>DefaultViewManager プロパティの設定に従って構成されます</xref:System.Data.DataViewRowState></xref:System.Data.DataTable></xref:System.Data.DataView>。"
  example:
  - "The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.  \n  \n [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.de_1.vb)]"
  syntax:
    content: public System.Data.DataViewManager DefaultViewManager { get; }
    return:
      type: System.Data.DataViewManager
      description: "A <xref href=&quot;System.Data.DataViewManager&quot;></xref> object."
  overload: System.Data.DataSet.DefaultViewManager*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  id: DetermineSchemaSerializationMode(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DetermineSchemaSerializationMode(XmlReader)
  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "決定、<xref:System.Data.DataSet.SchemaSerializationMode*>の<xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.Data.DataSet.SchemaSerializationMode*> 。"
  remarks: "シリアル化、型指定された<xref:System.Data.DataSet>その<xref:System.Data.DataSet.SchemaSerializationMode%2A>。</xref:System.Data.DataSet.SchemaSerializationMode%2A>を決定する</xref:System.Data.DataSet>ときに、このメソッドを呼び出すことができます。"
  syntax:
    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>の逆シリアル化中に渡されるインスタンス、 <xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.Xml.XmlReader> 。"
    return:
      type: System.Data.SchemaSerializationMode
      description: "<xref href=&quot;System.Data.SchemaSerializationMode&quot;> </xref>ペイロードからスキーマ情報が省略されているかどうかを示す列挙値。"
  overload: System.Data.DataSet.DetermineSchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "決定、<xref:System.Data.DataSet.SchemaSerializationMode*>の<xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.Data.DataSet.SchemaSerializationMode*> 。"
  remarks: "シリアル化、型指定された<xref:System.Data.DataSet>その<xref:System.Data.DataSet.SchemaSerializationMode%2A>。</xref:System.Data.DataSet.SchemaSerializationMode%2A>を決定する</xref:System.Data.DataSet>ときに、このメソッドを呼び出すことができます。"
  syntax:
    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>を<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>コンス トラクターを protected &lt;xref:System.Data.DataSet.%23ctor%2A&gt;がリモート処理のシナリオで逆シリアル化中に呼び出されます。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>を<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>コンス トラクターを protected &lt;xref:System.Data.DataSet.%23ctor%2A&gt;がリモート処理のシナリオで逆シリアル化中に呼び出されます</xref:System.Runtime.Serialization.StreamingContext>。"
    return:
      type: System.Data.SchemaSerializationMode
      description: "<xref href=&quot;System.Data.SchemaSerializationMode&quot;> </xref>ペイロードからスキーマ情報が省略されているかどうかを示す列挙値。"
  overload: System.Data.DataSet.DetermineSchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.EndInit
  id: EndInit
  parent: System.Data.DataSet
  langs:
  - csharp
  name: EndInit()
  nameWithType: DataSet.EndInit()
  fullName: System.Data.DataSet.EndInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "初期化を終了、 <xref href=&quot;System.Data.DataSet&quot;> </xref>フォームまたは別のコンポーネントで使用します。 初期化は実行時に発生します。"
  remarks: "Visual Studio .NET デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用するコンポーネントの初期化を終了します。 <xref:System.Data.DataSet.BeginInit%2A>メソッドは、初期化を開始します</xref:System.Data.DataSet.BeginInit%2A>。 使用して、 <xref:System.Data.DataSet.BeginInit%2A>EndInit メソッド使用されないように、コントロールが完全に初期化される前に、</xref:System.Data.DataSet.BeginInit%2A> 。"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Data.DataSet.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.EnforceConstraints
  id: EnforceConstraints
  parent: System.Data.DataSet
  langs:
  - csharp
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
  fullName: System.Data.DataSet.EnforceConstraints
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または更新操作を行うときに、制約の規則が後にするかどうかを示す値を設定します。"
  remarks: "制約に設定される、<xref:System.Data.DataTable>レベル (<xref:System.Data.DataTable.Constraints%2A>プロパティ).</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable> 制約の作成の詳細については、次を参照してください。 [DataTable の制約](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>. The EnforceConstraints property is set to `false` and the values of each row are set to the same value. When the EnforceConstraints property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.  \n  \n [!code-cs[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/csharp/p-system.data.dataset.en_1.cs)]\n [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.en_1.vb)]"
  syntax:
    content: public bool EnforceConstraints { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>規則は実施されます。 場合、それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.EnforceConstraints*
  exceptions:
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "1 つまたは複数の制約を適用することはできません。"
  platform:
  - net462
- uid: System.Data.DataSet.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
  fullName: System.Data.DataSet.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "関連付けられているカスタマイズされたユーザー情報のコレクションを取得、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>です。"
  remarks: "ExtendedProperties プロパティにカスタム情報を保存することができます、`DataSet`です。 たとえば、データを更新する場合、時刻を格納可能性があります。       拡張プロパティが型でなければなりません<xref:System.String>場合は、ときに永続化、<xref:System.Data.DataSet>は XML として書き込まれます</xref:System.Data.DataSet></xref:System.String>。"
  example:
  - "The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property. The second example retrieves the custom property.  \n  \n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ex_1.cs)]\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ex_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "A <xref href=&quot;System.Data.PropertyCollection&quot;> </xref>すべてのカスタム ユーザー情報を使用します。"
  overload: System.Data.DataSet.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetChanges
  id: GetChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetChanges()
  nameWithType: DataSet.GetChanges()
  fullName: System.Data.DataSet.GetChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "コピーを取得、 <xref href=&quot;System.Data.DataSet&quot;> </xref>読み込まれてから、または後に加えられたすべての変更を格納している<xref:System.Data.DataSet.AcceptChanges*>最後に呼び出されています</xref:System.Data.DataSet.AcceptChanges*>。"
  remarks: "新たに作成<xref:System.Data.DataSet>、元のすべての行のコピーを格納している<xref:System.Data.DataSet>保留中の変更がある</xref:System.Data.DataSet></xref:System.Data.DataSet>。 リレーションシップの制限が原因で、新規に追加するその他の変更されていない行<xref:System.Data.DataSet>変更されていない行が変更された行の外部キーに対応する主キーを含めるかどうか</xref:System.Data.DataSet>。 このメソッドを返します`null`は元の行が存在しない場合<xref:System.Data.DataSet>保留中の変更がある</xref:System.Data.DataSet>。"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the GetChanges method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_0_1.cs)]\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_0_1.vb)]"
  syntax:
    content: public System.Data.DataSet GetChanges ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "これから加えた変更はコピー <xref href=&quot;System.Data.DataSet&quot;> </xref> <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*>をマージすると、それを後で実行されるアクションがあることができます 変更された行が見つからないかどうか、メソッドを返します<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)
  id: GetChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetChanges(DataRowState)
  nameWithType: DataSet.GetChanges(DataRowState)
  fullName: System.Data.DataSet.GetChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "コピーを取得、 <xref href=&quot;System.Data.DataSet&quot;> </xref>が最後に読み込まれた、または後に加えられたすべての変更を含む<xref:System.Data.DataSet.AcceptChanges*>呼び出されると、によってフィルター選択された<xref href=&quot;System.Data.DataRowState&quot;> </xref></xref:System.Data.DataSet.AcceptChanges*> 。"
  remarks: "<xref:System.Data.DataSet.GetChanges%2A>メソッドが&1; 秒あたりに生成するために使用される<xref:System.Data.DataSet>を元の変更のみを格納しているオブジェクトが導入されました</xref:System.Data.DataSet></xref:System.Data.DataSet.GetChanges%2A>。 使用して、`rowStates`新しいオブジェクトを含める必要があります変更の種類を指定する引数。       これは、コピーは、次のようにマージするように設計された返されるオリジナル<xref:System.Data.DataSet>.</xref:System.Data.DataSet> リレーションシップの制約がマークされている親行あります`Unchanged`含まれるようにします。 場合は、目的の行はありません<xref:System.Data.DataRowState>がある、<xref:System.Data.DataSet.GetChanges%2A>メソッドを返します`null`。</xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataRowState> 。"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_2_1.vb)]\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_2_1.cs)]"
  syntax:
    content: public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "1 つ、 <xref href=&quot;System.Data.DataRowState&quot;> </xref>値。"
    return:
      type: System.Data.DataSet
      description: "フィルター選択されたコピー、 <xref href=&quot;System.Data.DataSet&quot;> </xref> <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*>をマージして、その後で、実行アクションがあることができます 場合は、目的の行はありません<xref href=&quot;System.Data.DataRowState&quot;></xref>が見つかると、このメソッドを返します<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  id: GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetDataSetSchema(XmlSchemaSet)
  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)
  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "コピーを取得<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>データセット。"
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);
    parameters:
    - id: schemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: "指定されたスキーマに設定します。"
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "A copy of <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>."
  overload: System.Data.DataSet.GetDataSetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "シリアル化情報オブジェクトをシリアル化に必要なデータを追加、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>に関連付けられているシリアル化されたデータを保持する、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A<xref:System.Runtime.Serialization.StreamingContext>ソースを格納していると、シリアル化されたストリームの転送先に関連付けられている、 <xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.Runtime.Serialization.StreamingContext> 。"
  overload: System.Data.DataSet.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>info</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.GetSchemaSerializable
  id: GetSchemaSerializable
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetSchemaSerializable()
  nameWithType: DataSet.GetSchemaSerializable()
  fullName: System.Data.DataSet.GetSchemaSerializable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "シリアル化可能な返します<xref:System.Xml.Schema.XMLSchema>インスタンス</xref:System.Xml.Schema.XMLSchema>。"
  syntax:
    content: protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XMLSchema>インスタンス</xref:System.Xml.Schema.XMLSchema>。"
  overload: System.Data.DataSet.GetSchemaSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetSerializationData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "バイナリまたは XML ストリームからテーブル データを逆シリアル化します。"
  syntax:
    content: protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>インスタンス。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "ストリーミング コンテキスト。"
  overload: System.Data.DataSet.GetSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetXml
  id: GetXml
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetXml()
  nameWithType: DataSet.GetXml()
  fullName: System.Data.DataSet.GetXml()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "格納されたデータの XML 表現を返します、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "このメソッドを呼び出す<xref:System.Data.DataSet.WriteXml%2A><xref:System.Data.XmlWriteMode><xref:System.Data.XmlWriteMode>。</xref:System.Data.XmlWriteMode>設定</xref:System.Data.XmlWriteMode>と</xref:System.Data.DataSet.WriteXml%2A>呼び出し元と同じです。       GetXml がよりも多くのオーバーヘッドが必要し、なる XML を文字列として返します<xref:System.Data.DataSet.WriteXml%2A>に XML をファイルに書き込めません</xref:System.Data.DataSet.WriteXml%2A>。       構築する場合、<xref:System.Data.DataSet>スキーマの推論を使用して、シリアル化 XML または Web サービスを使用して列の順序変更可能性があります</xref:System.Data.DataSet>。"
  example:
  - "The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.  \n  \n [!code-cs[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_1_1.cs)]\n [!code-vb[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_1_1.vb)]  \n  \n This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML. This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.  \n  \n Before you compile and run the sample, you need to create four XML files in the sample directory. First, create ElementsWithAttributes.xml:  \n  \n```  \n<MySchool>  \n  <Course CourseID=\"C1045\" Year=\"2012\"  Title=\"Calculus\" Credits=\"4\" DepartmentID=\"7\">New</Course>  \n  <Course CourseID=\"C1061\" Year=\"2012\"  Title=\"Physics\" Credits=\"4\" DepartmentID=\"1\" />  \n  <Department DepartmentID=\"1\" Name=\"Engineering\" Budget=\"350000\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"2\" />  \n  <Department DepartmentID=\"7\" Name=\"Mathematics\" Budget=\"250024\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"3\">Cancelled</Department>  \n</MySchool>  \n```  \n  \n Next, create ElementsWithChildElementsxml.xml:  \n  \n```  \n<MySchool>  \n  <Course>  \n    <CourseID>C1045</CourseID>  \n    <Year>2012</Year>  \n    <Title>Calculus</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>7</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C1061</CourseID>  \n    <Year>2012</Year>  \n    <Title>Physics</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>1</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C2021</CourseID>  \n    <Year>2012</Year>  \n    <Title>Composition</Title>  \n    <Credits>3</Credits>  \n    <DepartmentID>2</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C2042</CourseID>  \n    <Year>2012</Year>  \n    <Title>Literature</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>2</DepartmentID>  \n  </Course>  \n  <Department>  \n    <DepartmentID>1</DepartmentID>  \n    <Name>Engineering</Name>  \n    <Budget>350000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>2</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>2</DepartmentID>  \n    <Name>English</Name>  \n    <Budget>120000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>6</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>4</DepartmentID>  \n    <Name>Economics</Name>  \n    <Budget>200000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>4</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>7</DepartmentID>  \n    <Name>Mathematics</Name>  \n    <Budget>250024</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>3</Administrator>  \n  </Department>  \n</MySchool>  \n```  \n  \n Now create ElementsWithOnlyAttributes.xml:  \n  \n```  \n<MySchool>  \n  <Course CourseID=\"C1045\" Year=\"2012\"  Title=\"Calculus\" Credits=\"4\" DepartmentID=\"7\" />  \n  <Course CourseID=\"C1061\" Year=\"2012\"  Title=\"Physics\" Credits=\"4\" DepartmentID=\"1\" />  \n  <Department DepartmentID=\"1\" Name=\"Engineering\" Budget=\"350000\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"2\" />  \n  <Department DepartmentID=\"7\" Name=\"Mathematics\" Budget=\"250024\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"3\" />  \n</MySchool>  \n```  \n  \n And finally, create RepeatingElements.xml:  \n  \n```  \n<MySchool>  \n  <Course>C1045</Course>  \n  <Course>C1061</Course>  \n  <Department>Engineering</Department>   \n  <Department>Mathematics</Department>  \n</MySchool>  \n```  \n  \n Now you can compile and run the following source code.  [How to Store Data of DataSet into XML File](http://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.IO;  \nusing System.Text;  \nusing System.Xml;  \n  \n// Use WriteXml method to export the dataset.  \nstatic class DataTableHelper {  \n   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  \n      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  \n         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  \n            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  \n            Console.WriteLine(\"Write {0} to the File {1}.\", dataset.DataSetName, xmlFileName);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n  \n   // Use GetXml method to get the XML data of the dataset and then export to the file.  \n   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  \n      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  \n         writer.WriteLine(dataset.GetXml());  \n         Console.WriteLine(\"Get Xml data from {0} and write to the File {1}.\", dataset.DataSetName, xmlFileName);  \n         Console.WriteLine();  \n      }  \n   }  \n  \n   // Use ReadXml method to import the dataset from the dataset.  \n   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  \n      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  \n         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  \n            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  \n         }  \n      }  \n   }  \n  \n   // Display the columns and value of DataSet.  \n   public static void ShowDataSet(DataSet dataset) {  \n      foreach (DataTable table in dataset.Tables) {  \n         Console.WriteLine(\"Table {0}:\", table.TableName);  \n         ShowDataTable(table);  \n      }  \n   }  \n  \n   // Display the columns and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(\"{0,-14}\", col.ColumnName);  \n      }  \n      Console.WriteLine(\"{0,-14}\", \"\");  \n  \n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(\"{0,-14:d}\", row[col, DataRowVersion.Original]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(\"{0,-14:C}\", row[col, DataRowVersion.Original]);  \n               }  \n               else {  \n                  Console.Write(\"{0,-14}\", row[col, DataRowVersion.Original]);  \n               }  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(\"{0,-14:d}\", row[col]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(\"{0,-14:C}\", row[col]);  \n               }  \n               else {  \n                  Console.Write(\"{0,-14}\", row[col]);  \n               }  \n            }  \n         }  \n         Console.WriteLine(\"{0,-14}\", \"\");  \n      }  \n   }  \n  \n   // Display the columns of DataSet.  \n   public static void ShowDataSetSchema(DataSet dataSet) {  \n      Console.WriteLine(\"{0} contains the following tables:\", dataSet.DataSetName);  \n      foreach (DataTable table in dataSet.Tables) {  \n         Console.WriteLine(\"   Table {0} contains the following columns:\", table.TableName);  \n         ShowDataTableSchema(table);  \n      }  \n   }  \n  \n   // Display the columns of DataTable  \n   private static void ShowDataTableSchema(DataTable table) {  \n      String columnString = \"\";  \n      foreach (DataColumn col in table.Columns) {  \n         columnString += col.ColumnName + \"   \";  \n      }  \n      Console.WriteLine(columnString);  \n   }  \n}  \n  \nclass Program {  \n   static void Main(string[] args) {  \n      // Create the DataSet  \n      DataSet school = new DataSet(\"MySchool\");  \n      DataTable course = CreateCourse();  \n      DataTable department = CreateDepartment();  \n      school.Tables.Add(course);  \n      school.Tables.Add(department);  \n  \n      // Define the constraint between the tables.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\"CourseDepartFK\", department.Columns[\"DepartmentID\"], course.Columns[\"DepartmentID\"]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n  \n      InsertDepartments(department);  \n      InsertCourses(course);  \n  \n      // Export the dataset to the XML file.  \n      Console.WriteLine(\"Data of the whole DataSet {0}\", school.DataSetName);  \n      DataTableHelper.ShowDataSet(school);  \n  \n      String xmlWithSchemaFileName = \"WriterXMLWithSchema.xml\";  \n      String xmlGetDataFileName = \"GetXML.xml\";  \n  \n      // Use two ways to export the dataset to the Xml file.  \n      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  \n      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  \n  \n      // Import the dataset from the XML file.  \n      // Use two ways to import the dataset from the Xml file.  \n      Console.WriteLine(\"Read Xml document into a new DataSet:\");  \n      DataSet newSchool = new DataSet(\"NewSchool\");  \n      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  \n      DataTableHelper.ShowDataSetSchema(newSchool);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Infer a schema for a DataSet from an XML document:\");  \n      InferDataSetSchemaFromXml();  \n  \n      Console.WriteLine(\"Press any key to exit.\");  \n      Console.ReadKey();  \n   }  \n  \n   static DataTable CreateCourse() {  \n      DataTable course = new DataTable(\"Course\");  \n      DataColumn[] cols ={  \n                              new DataColumn(\"CourseID\",typeof(String)),  \n                              new DataColumn(\"Year\",typeof(Int32)),  \n                              new DataColumn(\"Title\",typeof(String)),  \n                              new DataColumn(\"Credits\",typeof(Int32)),  \n                              new DataColumn(\"DepartmentID\",typeof(Int32))};  \n      course.Columns.AddRange(cols);  \n  \n      course.PrimaryKey = new DataColumn[] { course.Columns[\"CourseID\"], course.Columns[\"Year\"] };  \n  \n      return course;  \n   }  \n  \n   static DataTable CreateDepartment() {  \n      DataTable department = new DataTable(\"Department\");  \n      DataColumn[] cols = {   \n                                new DataColumn(\"DepartmentID\", typeof(Int32)),  \n                                new DataColumn(\"Name\",typeof(String)),  \n                                new DataColumn(\"Budget\",typeof(Decimal)),  \n                                new DataColumn(\"StartDate\",typeof(DateTime)),  \n                                new DataColumn(\"Administrator\",typeof(Int32))};  \n      department.Columns.AddRange(cols);  \n  \n      department.PrimaryKey = new DataColumn[] { department.Columns[\"DepartmentID\"] };  \n  \n      return department;  \n   }  \n  \n   static void InsertDepartments(DataTable department) {  \n      Object[] rows = {   \n                            new Object[]{1,\"Engineering\",350000.00,new DateTime(2007,9,1),2},  \n                            new Object[]{2,\"English\",120000.00,new DateTime(2007,9,1),6},  \n                            new Object[]{4,\"Economics\",200000.00,new DateTime(2007,9,1),4},  \n                            new Object[]{7,\"Mathematics\",250024.00,new DateTime(2007,9,1),3}};  \n  \n      foreach (Object[] row in rows) {  \n         department.Rows.Add(row);  \n      }  \n   }  \n  \n   static void InsertCourses(DataTable course) {  \n      Object[] rows ={  \n                               new Object[]{\"C1045\",2012,\"Calculus\",4,7},  \n                               new Object[]{\"C1061\",2012,\"Physics\",4,1},  \n                               new Object[]{\"C2021\",2012,\"Composition\",3,2},  \n                               new Object[]{\"C2042\",2012,\"Literature\",4,2}};  \n  \n      foreach (Object[] row in rows) {  \n         course.Rows.Add(row);  \n      }  \n   }  \n  \n   // Display the results of inferring schema from four types of XML structures  \n   private static void InferDataSetSchemaFromXml() {  \n      String[] xmlFileNames = {   \n  \n                                    @\"ElementsWithOnlyAttributes.xml\",   \n                                    @\"ElementsWithAttributes.xml\",  \n                                    @\"RepeatingElements.xml\",   \n                                    @\"ElementsWithChildElements.xml\" };  \n  \n      foreach (String xmlFileName in xmlFileNames) {  \n         Console.WriteLine(\"Result of {0}\", Path.GetFileNameWithoutExtension(xmlFileName));  \n         DataSet newSchool = new DataSet();  \n         newSchool.InferXmlSchema(xmlFileName, null);  \n         DataTableHelper.ShowDataSetSchema(newSchool);  \n         Console.WriteLine();  \n      }  \n   }  \n}  \n```"
  syntax:
    content: public string GetXml ();
    parameters: []
    return:
      type: System.String
      description: "示す文字列に格納されたデータの表現、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  overload: System.Data.DataSet.GetXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetXmlSchema
  id: GetXmlSchema
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetXmlSchema()
  nameWithType: DataSet.GetXmlSchema()
  fullName: System.Data.DataSet.GetXmlSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "XML スキーマに格納されたデータの XML 表現を返します、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "このメソッドを呼び出すを呼び出すことと同じです<xref:System.Data.DataSet.WriteXmlSchema%2A>プライマリ スキーマのみが書き込まれる点が異なります</xref:System.Data.DataSet.WriteXmlSchema%2A>。       GetXmlSchema がよりも多くのオーバーヘッドが必要し、なる XML を文字列として返します<xref:System.Data.DataSet.WriteXmlSchema%2A>をファイルに XML を書き込めません</xref:System.Data.DataSet.WriteXmlSchema%2A>。       構築する場合、<xref:System.Data.DataSet>スキーマの推論を使用して、シリアル化 XML または Web サービスを使用して列の順序変更可能性があります</xref:System.Data.DataSet>。"
  example:
  - "The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.  \n  \n [!code-cs[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_3_1.cs)]\n [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_3_1.vb)]"
  syntax:
    content: public string GetXmlSchema ();
    parameters: []
    return:
      type: System.String
      description: "XML スキーマに格納されたデータの XML 表現を示す文字列、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  overload: System.Data.DataSet.GetXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasChanges
  id: HasChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasChanges()
  nameWithType: DataSet.HasChanges()
  fullName: System.Data.DataSet.HasChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Data.DataSet&quot;> </xref>変更が、新しい、削除、または変更された行も含まれます。"
  remarks: ''
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_0_1.vb)]\n [!code-cs[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_0_1.cs)]"
  syntax:
    content: public bool HasChanges ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Data.DataSet&quot;> </xref>変更がそれ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.HasChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)
  id: HasChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasChanges(DataRowState)
  nameWithType: DataSet.HasChanges(DataRowState)
  fullName: System.Data.DataSet.HasChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Data.DataSet&quot;> </xref>でフィルター処理された、新しい、削除、または変更された行を含む、変更が<xref href=&quot;System.Data.DataRowState&quot;></xref>です。"
  remarks: "確認、<xref:System.Data.DataSet.HasChanges%2A>のプロパティ、`DataSet`を呼び出す前に、<xref:System.Data.DataSet.GetChanges%2A>メソッド</xref:System.Data.DataSet.GetChanges%2A></xref:System.Data.DataSet.HasChanges%2A>。"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_1_1.vb)]\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_1_1.cs)]"
  syntax:
    content: public bool HasChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "1 つ、 <xref href=&quot;System.Data.DataRowState&quot;> </xref>値。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Data.DataSet&quot;> </xref>変更がそれ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.HasChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasErrors
  id: HasErrors
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataSet.HasErrors
  fullName: System.Data.DataSet.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "いずれかでエラーがあるかどうかを示す値を取得、 <xref href=&quot;System.Data.DataTable&quot;> </xref>内でオブジェクト<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "各<xref:System.Data.DataTable>で、<xref:System.Data.DataSet>も、<xref:System.Data.DataTable.HasErrors%2A>プロパティ</xref:System.Data.DataTable.HasErrors%2A></xref:System.Data.DataSet></xref:System.Data.DataTable>。 使用して、`HasErrors`のプロパティ、`DataSet`かどうかを任意のテーブルのエラー、個別にチェックする前に、まず<xref:System.Data.DataTable>オブジェクト</xref:System.Data.DataTable>。 場合、 `DataTable` 、エラーが発生した、<xref:System.Data.DataTable.GetErrors%2A>メソッドの配列を返します<xref:System.Data.DataRow>、エラーを含むオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataTable.GetErrors%2A>。"
  example:
  - "The following example uses the HasErrors property to determine whether a <xref:System.Data.DataSet> object contains errors. If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.  \n  \n [!code-cs[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ha_1.cs)]\n [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ha_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、任意のテーブルには、エラーが含まれています。 それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  id: InferXmlSchema(System.IO.Stream,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(Stream,String[])
  nameWithType: DataSet.InferXmlSchema(Stream,String[])
  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定された対象から XML スキーマを適用<xref:System.IO.Stream>を<xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.IO.Stream> 。"
  syntax:
    content: public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref uid=&quot;langword_csharp_Stream&quot; name=&quot;Stream&quot; href=&quot;&quot;> </xref>元となるスキーマを読み取れません。"
    - id: nsArray
      type: System.String[]
      description: "スキーマの推論から除外する名前空間 (Uniform Resource Identifier) の文字列の配列。"
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  id: InferXmlSchema(System.IO.TextReader,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(TextReader,String[])
  nameWithType: DataSet.InferXmlSchema(TextReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定された対象から XML スキーマを適用<xref:System.IO.TextReader>を<xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.IO.TextReader> 。"
  syntax:
    content: public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref>元となるスキーマを読み取れません。"
    - id: nsArray
      type: System.String[]
      description: "スキーマの推論から除外する名前空間 (Uniform Resource Identifier) の文字列の配列。"
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  id: InferXmlSchema(System.String,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(String,String[])
  nameWithType: DataSet.InferXmlSchema(String,String[])
  fullName: System.Data.DataSet.InferXmlSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定されたファイルから XML スキーマの適用、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  syntax:
    content: public void InferXmlSchema (string fileName, string[] nsArray);
    parameters:
    - id: fileName
      type: System.String
      description: "スキーマの読み込み元のファイル (パスを含む) の名前。"
    - id: nsArray
      type: System.String[]
      description: "スキーマの推論から除外する名前空間 (Uniform Resource Identifier) の文字列の配列。"
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>設定されていない<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  id: InferXmlSchema(System.Xml.XmlReader,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(XmlReader,String[])
  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定された対象から XML スキーマを適用<xref:System.Xml.XmlReader>を<xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.Xml.XmlReader> 。"
  syntax:
    content: public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref uid=&quot;langword_csharp_XMLReader&quot; name=&quot;XMLReader&quot; href=&quot;&quot;> </xref>元となるスキーマを読み取れません。"
    - id: nsArray
      type: System.String[]
      description: "スキーマの推論から除外する名前空間 (Uniform Resource Identifier) の文字列の配列。"
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Initialized
  id: Initialized
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Initialized
  nameWithType: DataSet.Initialized
  fullName: System.Data.DataSet.Initialized
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "後に発生、 <xref href=&quot;System.Data.DataSet&quot;> </xref>が初期化されています。"
  remarks: "詳細については、 <xref:System.Data.DataSet.IsInitialized%2A>。</xref:System.Data.DataSet.IsInitialized%2A>を参照してください。"
  syntax:
    content: public event EventHandler Initialized;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InitializeDerivedDataSet
  id: InitializeDerivedDataSet
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InitializeDerivedDataSet()
  nameWithType: DataSet.InitializeDerivedDataSet()
  fullName: System.Data.DataSet.InitializeDerivedDataSet()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "すべてのバイナリまたは XML ストリームからのデータセットのテーブル データを逆シリアル化します。"
  syntax:
    content: protected virtual void InitializeDerivedDataSet ();
    parameters: []
  overload: System.Data.DataSet.InitializeDerivedDataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: IsBinarySerialized(SerializationInfo,StreamingContext)
  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "シリアル化された表現の形式を調べ、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>です。"
  remarks: "このメンバーは、.NET Framework インフラストラクチャをサポートしているをコードから直接使用するものではありません。"
  syntax:
    content: protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>オブジェクト。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>オブジェクト</xref:System.Runtime.Serialization.StreamingContext>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、指定した<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>を表す、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> 、バイナリ形式でシリアル化<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>それ以外の場合。"
  overload: System.Data.DataSet.IsBinarySerialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.IsInitialized
  id: IsInitialized
  parent: System.Data.DataSet
  langs:
  - csharp
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
  fullName: System.Data.DataSet.IsInitialized
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Data.DataSet&quot;> </xref>が初期化されています。"
  remarks: "状態を返します、<xref:System.Data.DataSet>ことによって作成される、インスタンスの Visual Studio 中</xref:System.Data.DataSet>。 <xref:System.Data.DataSet.BeginInit%2A>メソッドに設定を`false`と<xref:System.Data.DataSet.EndInit%2A>メソッドに設定を`true`</xref:System.Data.DataSet.EndInit%2A></xref:System.Data.DataSet.BeginInit%2A>。"
  syntax:
    content: public bool IsInitialized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>コンポーネントを示すために初期化が完了します。それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.IsInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "塗りつぶします、 <xref href=&quot;System.Data.DataSet&quot;> </xref> 、指定されたを使用してデータ ソースから値を持つ<xref href=&quot;System.Data.IDataReader&quot;> </xref>、配列を使用して<xref href=&quot;System.Data.DataTable&quot;></xref>スキーマと名前空間の情報を提供するインスタンス。"
  remarks: "<xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得したデータを<xref:System.Data.IDataReader>インスタンス</xref:System.Data.IDataReader></xref:System.Data.DataTable></xref:System.Data.DataTable.Load%2A>。 このメソッドが、同じ機能を提供しますが、 <xref:System.Data.IDataReader> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>内で複数のテーブル</xref:System.Data.IDataReader>から複数の結果セットを読み込むことができます。      > [!NOTE] > ロード操作は失敗し、 <xref:System.InvalidOperationException>、変換元データ列では、着信のいずれかの`reader`は計算列</xref:System.InvalidOperationException>。       `loadOption`パラメーターでは、インポートしたデータの既存のデータと対話してからの値のいずれかの方法を指定することができます、<xref:System.Data.LoadOption>列挙体です</xref:System.Data.LoadOption>。 <xref:System.Data.DataTable>ドキュメントを参照して<xref:System.Data.DataTable.Load%2A>方法の詳細で、このパラメーターを使用します</xref:System.Data.DataTable.Load%2A>。</xref:System.Data.DataTable>       `tables`パラメーターの配列を指定できます<xref:System.Data.DataTable>インスタンス、各結果セット、リーダーから読み込まれたに対応するテーブルの順序を示す。</xref:System.Data.DataTable> 。 Loadmethod がいっぱいになった各提供<xref:System.Data.DataTable>単一の結果セット、ソース データ リーダーからからのデータ インスタンス</xref:System.Data.DataTable>。 各結果セット後、Loadmethod がで次の結果が結果セットがなくなるまで、リーダー内セットに移動します。       このメソッドの名前解決スキームが同じ<xref:System.Data.Common.DbDataAdapter.Fill%2A><xref:System.Data.Common.DbDataAdapter>クラス</xref:System.Data.Common.DbDataAdapter>のメソッド</xref:System.Data.Common.DbDataAdapter.Fill%2A>に続く"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the Load method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets. Finally, the example displays the contents of the tables in the console window.  \n  \n [!code-vb[DataWorks DataSet.LoadTables#1](~/add/codesnippet/visualbasic/54dbea54-b320-4c41-9f97-_1.vb)]\n [!code-cs[DataWorks DataSet.LoadTables#1](~/add/codesnippet/csharp/54dbea54-b320-4c41-9f97-_1.cs)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.DataTable[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>&1; つまたは複数の結果セットを提供します。"
    - id: loadOption
      type: System.Data.LoadOption
      description: "値、 <xref href=&quot;System.Data.LoadOption&quot;> </xref>を示す列挙体方法で既に行、 <xref href=&quot;System.Data.DataTable&quot;> </xref>インスタンス内で、 <xref href=&quot;System.Data.DataSet&quot;> </xref>が同じ主キーを共有する受信の行に結合されます。"
    - id: tables
      type: System.Data.DataTable[]
      description: "配列<xref href=&quot;System.Data.DataTable&quot;> </xref> Load メソッドの名前と名前空間の情報の取得元となるインスタンスです。 これらのテーブルのそれぞれのメンバーである必要があります、 <xref href=&quot;System.Data.DataTableCollection&quot;> </xref>に含まれるこの<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,String[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "入力、 <xref href=&quot;System.Data.DataSet&quot;> </xref> 、指定されたを使用してデータ ソースから値を持つ<xref href=&quot;System.Data.IDataReader&quot;> </xref>、内のテーブルの名前を指定する文字列の配列を使用して、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>です。"
  remarks: "<xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得したデータを<xref:System.Data.IDataReader>インスタンス</xref:System.Data.IDataReader></xref:System.Data.DataTable></xref:System.Data.DataTable.Load%2A>。 このメソッドは、同じ機能を提供、読み込むことができますから複数の結果セット、`IDataReader`内で複数のテーブルに、`DataSet`です。      > [!NOTE] > ロード操作は失敗し、 <xref:System.InvalidOperationException>、変換元データ列では、着信のいずれかの`reader`は計算列</xref:System.InvalidOperationException>。       `loadOption`パラメーターでは、インポートしたデータの既存のデータと対話してからの値のいずれかの方法を指定することができます、<xref:System.Data.LoadOption>列挙体です</xref:System.Data.LoadOption>。 ドキュメントを参照して、<xref:System.Data.DataTable.Load%2A>方法の詳細で、このパラメーターを使用します</xref:System.Data.DataTable.Load%2A>。       `tables`パラメーターでは、各結果セット、リーダーから読み込まれたに対応するテーブルの順序を示す、テーブル名の配列を指定することができます。 `Load`メソッド内でテーブルの検索を試みます、`DataSet`順に、テーブル名の配列で見つかった名前に一致します。 一致するテーブルが見つかった場合は、現在の結果セットの内容でそのテーブルが読み込まれます。 一致するテーブルが見つからない場合、テーブル名の配列で指定した名前を使用して、テーブルを作成し、結果セットから新しいテーブルのスキーマを推論します。 各結果セットの後に、`Load`メソッドに次の結果が結果セットがなくなるまで、リーダー内セット移動します。       関連付けられている既定の名前空間`DataSet`のいずれかが新しく作成された各に関連付けられている場合は、`DataTable`です。 このメソッドの名前解決スキームが同じ<xref:System.Data.Common.DbDataAdapter.Fill%2A><xref:System.Data.Common.DbDataAdapter>クラス</xref:System.Data.Common.DbDataAdapter>のメソッド</xref:System.Data.Common.DbDataAdapter.Fill%2A>に続く"
  example:
  - "The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method. The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>. In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter. Once the data has been loaded, the example displays the contents of all its tables in the Console window.  \n  \n [!code-vb[DataWorks DataSet.LoadString#1](~/add/codesnippet/visualbasic/f903cc41-1885-430a-b43a-_1.vb)]\n [!code-cs[DataWorks DataSet.LoadString#1](~/add/codesnippet/csharp/f903cc41-1885-430a-b43a-_1.cs)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, string[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>&1; つまたは複数の結果セットを提供します。"
    - id: loadOption
      type: System.Data.LoadOption
      description: "値、 <xref href=&quot;System.Data.LoadOption&quot;> </xref>を示す列挙体方法で既に行、 <xref href=&quot;System.Data.DataTable&quot;> </xref>インスタンス内で、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>が同じ主キーを共有する受信の行に結合されます。"
    - id: tables
      type: System.String[]
      description: "元の文字列の配列、 <xref uid=&quot;langword_csharp_Load&quot; name=&quot;Load&quot; href=&quot;&quot;> </xref>メソッドはテーブル名の情報を取得します。"
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "塗りつぶします、 <xref href=&quot;System.Data.DataSet&quot;> </xref> 、指定されたを使用してデータ ソースから値を持つ<xref href=&quot;System.Data.IDataReader&quot;> </xref>、配列を使用して<xref href=&quot;System.Data.DataTable&quot;></xref>スキーマと名前空間の情報を提供するインスタンス。"
  remarks: "<xref:System.Data.DataTable.Load%2A>メソッドは、1 つの入力の手法を提供<xref:System.Data.DataTable>から取得したデータを<xref:System.Data.IDataReader>インスタンス</xref:System.Data.IDataReader></xref:System.Data.DataTable></xref:System.Data.DataTable.Load%2A>。 このメソッドが、同じ機能を提供しますが、 <xref:System.Data.IDataReader> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>内で複数のテーブル</xref:System.Data.IDataReader>から複数の結果セットを読み込むことができます。      > [!NOTE] > ロード操作は失敗し、 <xref:System.InvalidOperationException>、変換元データ列では、着信のいずれかの`reader`は計算列</xref:System.InvalidOperationException>。       `loadOption`パラメーターでは、インポートしたデータの既存のデータと対話してからの値のいずれかの方法を指定することができます、<xref:System.Data.LoadOption>列挙体です</xref:System.Data.LoadOption>。 <xref:System.Data.DataTable>ドキュメントを参照して<xref:System.Data.DataTable.Load%2A>方法の詳細で、このパラメーターを使用します</xref:System.Data.DataTable.Load%2A>。</xref:System.Data.DataTable>       `errorHandler`パラメーターは、<xref:System.Data.FillErrorEventHandler>データの読み込み中にエラーが発生したときに呼び出されるプロシージャを参照するデリゲート</xref:System.Data.FillErrorEventHandler>。 <xref:System.Data.FillErrorEventArgs>プロシージャに渡されたパラメーターができるように、エラーが発生した場合、データの現在の行に関する情報を取得するプロパティを提供し、<xref:System.Data.DataTable>入力中です</xref:System.Data.DataTable></xref:System.Data.FillErrorEventArgs>。 このデリゲート メカニズムを使用して、シンプルな try/catch ブロックではなく、エラーを確認することができます状況の処理し、必要な場合の処理を続行します。 <xref:System.Data.FillErrorEventArgs>パラメーターにより指定、<xref:System.Data.FillErrorEventArgs.Continue%2A>プロパティ: このプロパティを設定`true`処理を続行してエラーが処理されることを示すためにプロパティを設定`false`処理を停止することを示すためにします</xref:System.Data.FillErrorEventArgs.Continue%2A></xref:System.Data.FillErrorEventArgs>。 注意してそのプロパティを設定`false`によって、例外をスローする問題を引き起こしたコード。       `tables`パラメーターの配列を指定できます<xref:System.Data.DataTable>インスタンス、各結果セット、リーダーから読み込まれたに対応するテーブルの順序を示す。</xref:System.Data.DataTable> 。 Loadmethod がいっぱいになった各提供<xref:System.Data.DataTable>単一の結果セット、ソース データ リーダーからからのデータ インスタンス</xref:System.Data.DataTable>。 各結果セット後、Loadmethod がで次の結果が結果セットがなくなるまで、リーダー内セットに移動します。       このメソッドの名前解決スキームが同じ<xref:System.Data.Common.DbDataAdapter.Fill%2A><xref:System.Data.Common.DbDataAdapter>クラス</xref:System.Data.Common.DbDataAdapter>のメソッド</xref:System.Data.Common.DbDataAdapter.Fill%2A>に続く"
  example:
  - "The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the Load method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema. Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error. The output is displayed in the console window.  \n  \n [!code-vb[DataWorks DataSet.Load#1](~/add/codesnippet/visualbasic/a22aaabc-2cbb-4c1f-aa4e-_1.vb)]\n [!code-cs[DataWorks DataSet.Load#1](~/add/codesnippet/csharp/a22aaabc-2cbb-4c1f-aa4e-_1.cs)]"
  syntax:
    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, System.Data.DataTable[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>&1; つまたは複数の結果セットを提供します。"
    - id: loadOption
      type: System.Data.LoadOption
      description: "値、 <xref href=&quot;System.Data.LoadOption&quot;> </xref>を示す列挙体方法で既に行、 <xref href=&quot;System.Data.DataTable&quot;> </xref>インスタンス内で、 <xref href=&quot;System.Data.DataSet&quot;> </xref>が同じ主キーを共有する受信の行に結合されます。"
    - id: errorHandler
      type: System.Data.FillErrorEventHandler
      description: "A <xref href=&quot;System.Data.FillErrorEventHandler&quot;> </xref>データの読み込み中にエラーが発生したときに呼び出すデリゲート。"
    - id: tables
      type: System.Data.DataTable[]
      description: "配列<xref href=&quot;System.Data.DataTable&quot;> </xref> Load メソッドの名前と名前空間の情報の取得元となるインスタンスです。"
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Locale
  id: Locale
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Locale
  nameWithType: DataSet.Locale
  fullName: System.Data.DataSet.Locale
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得またはテーブル内の文字列を比較するために使用するロケール情報を設定します。"
  remarks: "Locale プロパティは、ロケールを指定する並べ替えを適用します。       既定では、ロケールを設定、<xref:System.Data.DataSet>のロケールにも設定<xref:System.Data.DataTable>を内のオブジェクト`DataSet`同じ値にします</xref:System.Data.DataTable></xref:System.Data.DataSet>。      > [!NOTE] >、式を含む列で、<xref:System.StringComparison>を使用します</xref:System.StringComparison>。 <xref:System.StringComparison>は無視されます</xref:System.StringComparison>。"
  example:
  - "The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.  \n  \n [!code-vb[Classic WebData DataSet.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.lo_1.vb)]"
  syntax:
    content: public System.Globalization.CultureInfo Locale { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo>、ユーザーのコンピューターのロケールに関するデータを格納します</xref:System.Globalization.CultureInfo>。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.Locale*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataRow[])
  id: Merge(System.Data.DataRow[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataRow[])
  nameWithType: DataSet.Merge(DataRow[])
  fullName: System.Data.DataSet.Merge(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "配列をマージ<xref href=&quot;System.Data.DataRow&quot;></xref>現在オブジェクト<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet.Merge%2A>メソッドを使用して&2; つのマージ<xref:System.Data.DataSet>ほぼ同じスキーマを持つオブジェクト</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet> これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataSet>、データ ソースから最新データを使用します</xref:System.Data.DataSet>。       <xref:System.Data.DataSet.Merge%2A>メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet>を最後に更新を含むプロシージャの終了時</xref:System.Data.DataSet.Merge%2A>       クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。 このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます</xref:System.Data.DataSet.GetChanges%2A>。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化されています</xref:System.Data.DataSet>。 <xref:System.Data.DataSet>オブジェクトのみ<xref:System.Data.DataTable>と<xref:System.Data.DataRow>元の<xref:System.Data.DataSet>。</xref:System.Data.DataSet>のサブセットの結果として得られる、変更されたオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataTable>が含まれています。</xref:System.Data.DataSet>この&2; つ目 このサブセットは通常小さくより効率的に渡されます中間層コンポーネントに戻す。 中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層送信できるように、新しいバックアップ<xref:System.Data.DataSet>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます</xref:System.Data.DataSet>。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<xref:System.Data.DataSet>クライアント アプリケーションの元にマージできます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド</xref:System.Data.DataSet.Merge%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。       ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、`missingSchemaAction`引数`MissingSchemaAction.Add`</xref:System.Data.DataColumn></xref:System.Data.DataSet>。 その場合、統合<xref:System.Data.DataSet>、追加されたスキーマとデータが含まれています</xref:System.Data.DataSet>。       スキーマをマージするには、後に、データがマージされます。       新しいソースをマージする際に<xref:System.Data.DataSet>、ターゲットに任意のソース行、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つ対象の行に一致した</xref:System.Data.DataRowState></xref:System.Data.DataSet>。 持つ行をソース、<xref:System.Data.DataRowState>の値`Added`新しいソース行として同じ主キーの値を持つ新しい対象行と照合されます</xref:System.Data.DataRowState>。       マージ中に制約が無効になります。 場合は、マージの最後に、すべての制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、結合されたデータは保持されます</xref:System.Data.ConstraintException>。 この場合、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されている`false`、無効なすべての行がエラーでマークされています</xref:System.Data.DataSet.EnforceConstraints%2A>。 リセットする前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`</xref:System.Data.DataSet.EnforceConstraints%2A>。"
  syntax:
    content: public void Merge (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "配列<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;></xref>にマージするオブジェクト、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet)
  id: Merge(System.Data.DataSet)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet)
  nameWithType: DataSet.Merge(DataSet)
  fullName: System.Data.DataSet.Merge(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定されたマージ<xref href=&quot;System.Data.DataSet&quot;></xref>と現在にそのスキーマ<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>です。"
  remarks: "2 をマージするマージ メソッドが使用される<xref:System.Data.DataSet>ほぼ同じスキーマを持つオブジェクト</xref:System.Data.DataSet>。 マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet> これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataSet>、データ ソースから最新データを使用します</xref:System.Data.DataSet>。       Merge メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet>を最後に更新を含むプロシージャの終了時       クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。 このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます</xref:System.Data.DataSet.GetChanges%2A>。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化されています</xref:System.Data.DataSet>。 <xref:System.Data.DataSet>オブジェクトのみ<xref:System.Data.DataTable>と<xref:System.Data.DataRow>元の<xref:System.Data.DataSet>。</xref:System.Data.DataSet>のサブセットの結果として得られる、変更されたオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataTable>が含まれています。</xref:System.Data.DataSet>この&2; つ目 このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。 中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層送信できるように、新しいバックアップ<xref:System.Data.DataSet>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます</xref:System.Data.DataSet>。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<xref:System.Data.DataSet>クライアント アプリケーションの元にマージできます<xref:System.Data.DataSet>マージ メソッドを使用します</xref:System.Data.DataSet></xref:System.Data.DataSet>。       Merge メソッドが呼び出される場合、2 つのスキーマの<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです</xref:System.Data.DataSet>。 たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、`missingSchemaAction`引数`MissingSchemaAction.Add`</xref:System.Data.DataColumn></xref:System.Data.DataSet>。 その場合、統合<xref:System.Data.DataSet>、追加されたスキーマとデータが含まれています</xref:System.Data.DataSet>。       スキーマをマージするには、後に、データがマージされます。       新しいソースをマージする際に<xref:System.Data.DataSet>、ターゲットに任意のソース行、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つ対象の行に一致した</xref:System.Data.DataRowState></xref:System.Data.DataSet>。 持つ行をソース、`DataRowState`の値`Added`新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。       マージ中に制約が無効になります。 場合は、マージの最後に、制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、結合されたデータは保持されます</xref:System.Data.ConstraintException>。 この場合、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されている`false`、無効なすべての行がエラーでマークされています</xref:System.Data.DataSet.EnforceConstraints%2A>。 リセットする前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`</xref:System.Data.DataSet.EnforceConstraints%2A>。"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and Merge methods on a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_2_1.vb)]\n [!code-cs[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_2_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>データとスキーマがマージされます。"
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "1 つまたは複数の制約を有効にすることはできません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataTable)
  id: Merge(System.Data.DataTable)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataTable)
  nameWithType: DataSet.Merge(DataTable)
  fullName: System.Data.DataSet.Merge(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定されたマージ<xref href=&quot;System.Data.DataTable&quot;></xref>と現在にそのスキーマ<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet.Merge%2A>メソッドを使用して&2; つのマージ<xref:System.Data.DataSet>ほぼ同じスキーマを持つオブジェクト</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet> これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataSet>、データ ソースから最新データを使用します</xref:System.Data.DataSet>。       <xref:System.Data.DataSet.Merge%2A>メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet>を最後に更新を含むプロシージャの終了時</xref:System.Data.DataSet.Merge%2A>       クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。 このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます</xref:System.Data.DataSet.GetChanges%2A>。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化されています</xref:System.Data.DataSet>。 <xref:System.Data.DataSet>オブジェクトのみ<xref:System.Data.DataTable>と<xref:System.Data.DataRow>元の<xref:System.Data.DataSet>。</xref:System.Data.DataSet>のサブセットの結果として得られる、変更されたオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataTable>が含まれています。</xref:System.Data.DataSet>この&2; つ目 このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。 中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層送信できるように、新しいバックアップ<xref:System.Data.DataSet>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます</xref:System.Data.DataSet>。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<xref:System.Data.DataSet>クライアント アプリケーションの元にマージできます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド</xref:System.Data.DataSet.Merge%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。       ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、`missingSchemaAction`引数`MissingSchemaAction.Add`</xref:System.Data.DataColumn></xref:System.Data.DataSet>。 その場合、統合<xref:System.Data.DataSet>、追加されたスキーマとデータが含まれています</xref:System.Data.DataSet>。       スキーマをマージするには、後に、データがマージされます。       新しいソースをマージする際に<xref:System.Data.DataSet>、ターゲットに任意のソース行、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つ対象の行に一致した</xref:System.Data.DataRowState></xref:System.Data.DataSet>。 持つ行をソース、`DataRowState`の値`Added`新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。       マージ中に制約が無効になります。 場合は、マージの最後に、制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、結合されたデータは保持されます</xref:System.Data.ConstraintException>。 この場合、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されている`false`、無効なすべての行がエラーでマークされています</xref:System.Data.DataSet.EnforceConstraints%2A>。 リセットする前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`</xref:System.Data.DataSet.EnforceConstraints%2A>。"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is identical to the first. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_1_1.vb)]\n [!code-cs[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_1_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref>データとスキーマがマージされます。"
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>table</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  id: Merge(System.Data.DataSet,System.Boolean)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet,Boolean)
  nameWithType: DataSet.Merge(DataSet,Boolean)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定されたマージ<xref href=&quot;System.Data.DataSet&quot;></xref>と現在にそのスキーマ<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>保持またはこの変更を破棄して、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>が指定した引数に応じて。"
  remarks: "<xref:System.Data.DataSet.Merge%2A>メソッドを使用して&2; つのマージ<xref:System.Data.DataSet>ほぼ同じスキーマを持つオブジェクト</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet> これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataSet>、データ ソースから最新データを使用します</xref:System.Data.DataSet>。       <xref:System.Data.DataSet.Merge%2A>メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet>を最後に更新を含むプロシージャの終了時</xref:System.Data.DataSet.Merge%2A>       クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。 このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます</xref:System.Data.DataSet.GetChanges%2A>。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化されています</xref:System.Data.DataSet>。 <xref:System.Data.DataSet>オブジェクトのみ<xref:System.Data.DataTable>と<xref:System.Data.DataRow>元の<xref:System.Data.DataSet>。</xref:System.Data.DataSet>のサブセットの結果として得られる、変更されたオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataTable>が含まれています。</xref:System.Data.DataSet>この&2; つ目 このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。 中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層送信できるように、新しいバックアップ<xref:System.Data.DataSet>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます</xref:System.Data.DataSet>。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<xref:System.Data.DataSet>クライアント アプリケーションの元にマージできます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド</xref:System.Data.DataSet.Merge%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。       ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、`missingSchemaAction`引数`MissingSchemaAction.Add`</xref:System.Data.DataColumn></xref:System.Data.DataSet>。 その場合、統合<xref:System.Data.DataSet>、追加されたスキーマとデータが含まれています</xref:System.Data.DataSet>。       スキーマをマージするには、後に、データがマージされます。       新しいソースをマージする際に<xref:System.Data.DataSet>、ターゲットに任意のソース行、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つ対象の行に一致した</xref:System.Data.DataRowState></xref:System.Data.DataSet>。 持つ行をソース、`DataRowState`の値`Added`新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。       マージ中に制約が無効になります。 場合は、マージの最後に、制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、結合されたデータは保持されます</xref:System.Data.ConstraintException>。 この場合、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されている`false`、無効なすべての行がエラーでマークされています</xref:System.Data.DataSet.EnforceConstraints%2A>。 リセットする前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`</xref:System.Data.DataSet.EnforceConstraints%2A>。"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. After adding ten rows, two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_0_1.cs)]\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_0_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>データとスキーマがマージされます。"
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>現在の変更を保存する<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataRow[],Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "配列をマージ<xref href=&quot;System.Data.DataRow&quot;></xref>現在オブジェクト<xref href=&quot;System.Data.DataSet&quot;></xref>保持する、または変更を破棄すること、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>および、互換性のないスキーマに従って、指定した引数を処理します。"
  remarks: "<xref:System.Data.DataSet.Merge%2A>メソッドを使用して&2; つのマージ<xref:System.Data.DataSet>ほぼ同じスキーマを持つオブジェクト</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet> これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataSet>、データ ソースから最新データを使用します</xref:System.Data.DataSet>。       <xref:System.Data.DataSet.Merge%2A>メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet>を最後に更新を含むプロシージャの終了時</xref:System.Data.DataSet.Merge%2A>       クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。 このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます</xref:System.Data.DataSet.GetChanges%2A>。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化されています</xref:System.Data.DataSet>。 <xref:System.Data.DataSet>オブジェクトのみ<xref:System.Data.DataTable>と<xref:System.Data.DataRow>元の<xref:System.Data.DataSet>。</xref:System.Data.DataSet>のサブセットの結果として得られる、変更されたオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataTable>が含まれています。</xref:System.Data.DataSet>この&2; つ目 このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。 中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層送信できるように、新しいバックアップ<xref:System.Data.DataSet>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます</xref:System.Data.DataSet>。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<xref:System.Data.DataSet>クライアント アプリケーションの元にマージできます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド</xref:System.Data.DataSet.Merge%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。       説明を容易にするために、<xref:System.Data.DataSet.Merge%2A>メソッドを使用して&quot;target&quot;を現在を示すために<xref:System.Data.DataSet>、および&2; つ目の (パラメーター) <xref:System.Data.DataSet>.</xref:System.Data.DataSet>の名前を付けるには、「ソース」</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> ターゲット<xref:System.Data.DataSet>と呼ばれるアクション (マージ) が発生した基になるオブジェクトになっているためです</xref:System.Data.DataSet>。 2 つ目<xref:System.Data.DataSet>と呼ばれます&quot;source&quot;が含まれている情報は変更されませんが、代わりに、現在<xref:System.Data.DataSet>。</xref:System.Data.DataSet>にマージされます。</xref:System.Data.DataSet>       ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、`missingSchemaAction`引数`MissingSchemaAction.Add`</xref:System.Data.DataColumn></xref:System.Data.DataSet>。 その場合、統合<xref:System.Data.DataSet>、追加されたスキーマとデータが含まれています</xref:System.Data.DataSet>。       スキーマをマージするには、後に、データがマージされます。       新しいソースをマージする際に<xref:System.Data.DataSet>、ターゲットに任意のソース行、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つ対象の行に一致した</xref:System.Data.DataRowState></xref:System.Data.DataSet>。 持つ行をソース、`DataRowState`の値`Added`新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。       マージ中に制約が無効になります。 場合は、マージの最後に、制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、結合されたデータは保持されます</xref:System.Data.ConstraintException>。 この場合、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されている`false`、無効なすべての行がエラーでマークされています</xref:System.Data.DataSet.EnforceConstraints%2A>。 リセットする前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`</xref:System.Data.DataSet.EnforceConstraints%2A>。"
  syntax:
    content: public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "配列<xref href=&quot;System.Data.DataRow&quot;></xref>にマージするオブジェクト、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>です。"
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>変更を保持するために、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "1 つ、 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref>値。"
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定されたマージ<xref href=&quot;System.Data.DataSet&quot;></xref>と、現在のスキーマ<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>保持する、または現在の変更を破棄する<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>および、互換性のないスキーマに従って、指定した引数の処理します。"
  remarks: "<xref:System.Data.DataSet.Merge%2A>メソッドを使用して&2; つのマージ<xref:System.Data.DataSet>ほぼ同じスキーマを持つオブジェクト</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet> これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataSet>、データ ソースから最新データを使用します</xref:System.Data.DataSet>。       <xref:System.Data.DataSet.Merge%2A>メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet>を最後に更新を含むプロシージャの終了時</xref:System.Data.DataSet.Merge%2A>       クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。 このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます</xref:System.Data.DataSet.GetChanges%2A>。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化されています</xref:System.Data.DataSet>。 <xref:System.Data.DataSet>オブジェクトのみ<xref:System.Data.DataTable>と<xref:System.Data.DataRow>元の<xref:System.Data.DataSet>。</xref:System.Data.DataSet>のサブセットの結果として得られる、変更されたオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataTable>が含まれています。</xref:System.Data.DataSet>この&2; つ目 このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。 中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層送信できるように、新しいバックアップ<xref:System.Data.DataSet>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます</xref:System.Data.DataSet>。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<xref:System.Data.DataSet>クライアント アプリケーションの元にマージできます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド</xref:System.Data.DataSet.Merge%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。       説明を容易にするために、<xref:System.Data.DataSet.Merge%2A>メソッドを使用して&quot;target&quot;を現在を示すために<xref:System.Data.DataSet>、および&2; つ目の (パラメーター) <xref:System.Data.DataSet>.</xref:System.Data.DataSet>の名前を付けるには、「ソース」</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> ターゲット<xref:System.Data.DataSet>と呼ばれるアクション (マージ) が発生した基になるオブジェクトになっているためです</xref:System.Data.DataSet>。 2 つ目<xref:System.Data.DataSet>と呼ばれます&quot;source&quot;が含まれている情報は変更されませんが、代わりに、現在<xref:System.Data.DataSet>。</xref:System.Data.DataSet>にマージされます。</xref:System.Data.DataSet>       ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、`missingSchemaAction`引数`MissingSchemaAction.Add`</xref:System.Data.DataColumn></xref:System.Data.DataSet>。 その場合、統合<xref:System.Data.DataSet>、追加されたスキーマとデータが含まれています</xref:System.Data.DataSet>。       スキーマをマージするには、後に、データがマージされます。       新しいソースをマージする際に<xref:System.Data.DataSet>、ターゲットに任意のソース行、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つ対象の行に一致した</xref:System.Data.DataRowState></xref:System.Data.DataSet>。 持つ行をソース、`DataRowState`の値`Added`新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。       マージ中に制約が無効になります。 場合は、マージの最後に、制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、結合されたデータは保持されます</xref:System.Data.ConstraintException>。 この場合、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されている`false`、無効なすべての行がエラーでマークされています</xref:System.Data.DataSet.EnforceConstraints%2A>。 リセットする前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`</xref:System.Data.DataSet.EnforceConstraints%2A>。"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/csharp/e5f91548-401c-49b5-ab4b-_1.cs)]\n [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/visualbasic/e5f91548-401c-49b5-ab4b-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>データとスキーマがマージされます。"
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>現在の変更を保存する<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "1 つ、 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref>値。"
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定されたマージ<xref href=&quot;System.Data.DataTable&quot;></xref>と現在にそのスキーマ<xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>保持する、または変更を破棄すること、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>および、互換性のないスキーマに従って、指定した引数を処理します。"
  remarks: "<xref:System.Data.DataSet.Merge%2A>メソッドを使用して&2; つのマージ<xref:System.Data.DataSet>ほぼ同じスキーマを持つオブジェクト</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 マージは、通常使用クライアント アプリケーションをデータ ソースから最新の変更を組み込む既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet> これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataSet>、データ ソースから最新データを使用します</xref:System.Data.DataSet>。       <xref:System.Data.DataSet.Merge%2A>メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および既存<xref:System.Data.DataSet>。</xref:System.Data.DataSet>を最後に更新を含むプロシージャの終了時</xref:System.Data.DataSet.Merge%2A>       イオン クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために共通です。 このシナリオでは、<xref:System.Data.DataSet.GetChanges%2A>メソッドが最初に呼び出されます</xref:System.Data.DataSet.GetChanges%2A>。 2 番目に返します<xref:System.Data.DataSet>検証とマージ用に最適化されています</xref:System.Data.DataSet>。 <xref:System.Data.DataSet>オブジェクトのみ<xref:System.Data.DataTable>と<xref:System.Data.DataRow>元の<xref:System.Data.DataSet>。</xref:System.Data.DataSet>のサブセットの結果として得られる、変更されたオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataTable>が含まれています。</xref:System.Data.DataSet>この&2; つ目 このサブセットは一般に小さいと、したがって複数中間層コンポーネントに渡される効率的にします。 中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層送信できるように、新しいバックアップ<xref:System.Data.DataSet>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます</xref:System.Data.DataSet>。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<xref:System.Data.DataSet>クライアント アプリケーションの元にマージできます<xref:System.Data.DataSet>で、<xref:System.Data.DataSet.Merge%2A>メソッド</xref:System.Data.DataSet.Merge%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。       ときに、<xref:System.Data.DataSet.Merge%2A>メソッドが呼び出されると、2 つのスキーマ<xref:System.Data.DataSet>オブジェクトを比較するスキーマが変更された可能性があるためです</xref:System.Data.DataSet></xref:System.Data.DataSet.Merge%2A>。 たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。 場合、ソース<xref:System.Data.DataSet>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、`missingSchemaAction`引数`MissingSchemaAction.Add`</xref:System.Data.DataColumn></xref:System.Data.DataSet>。 その場合、統合<xref:System.Data.DataSet>、追加されたスキーマとデータが含まれています</xref:System.Data.DataSet>。       スキーマをマージするには、後に、データがマージされます。       新しいソースをマージする際に<xref:System.Data.DataSet>、ターゲットに任意のソース行、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つ対象の行に一致した</xref:System.Data.DataRowState></xref:System.Data.DataSet>。 持つ行をソース、`DataRowState`の値`Added`新しいソース行として同じ主キーの値を新しいターゲットの行に一致します。       マージ中に制約が無効になります。 場合は、マージの最後に、制約を有効にすることはできません、<xref:System.Data.ConstraintException>が生成され、制約を無効にして、結合されたデータは保持されます</xref:System.Data.ConstraintException>。 この場合、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティに設定されている`false`、無効なすべての行がエラーでマークされています</xref:System.Data.DataSet.EnforceConstraints%2A>。 リセットする前に、エラーを解決する必要があります、<xref:System.Data.DataSet.EnforceConstraints%2A>プロパティを`true`</xref:System.Data.DataSet.EnforceConstraints%2A>。"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.  \n  \n [!code-cs[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/csharp/a63745f5-1a9e-4fc7-9c61-_1.cs)]\n [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/visualbasic/a63745f5-1a9e-4fc7-9c61-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "<xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>データとスキーマがマージされます。"
    - id: preserveChanges
      type: System.Boolean
      description: "1 つ、 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref>値。"
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>変更を保持するために、 <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref>それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.MergeFailed
  id: MergeFailed
  parent: System.Data.DataSet
  langs:
  - csharp
  name: MergeFailed
  nameWithType: DataSet.MergeFailed
  fullName: System.Data.DataSet.MergeFailed
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "ターゲットとソースときに発生<xref href=&quot;System.Data.DataRow&quot;></xref>同じ主キーの値があると<xref:System.Data.DataSet.EnforceConstraints*>設定を true にします</xref:System.Data.DataSet.EnforceConstraints*>。"
  remarks: 'イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。'
  example:
  - "The following example demonstrates the use of the MergeFailed event.  \n  \n [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/visualbasic/e-system.data.dataset.me_1.vb)]\n [!code-cs[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/csharp/e-system.data.dataset.me_1.cs)]"
  syntax:
    content: public event System.Data.MergeFailedEventHandler MergeFailed;
    return:
      type: System.Data.MergeFailedEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Namespace
  id: Namespace
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Namespace
  nameWithType: DataSet.Namespace
  fullName: System.Data.DataSet.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定の名前空間、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "Namespace プロパティにドキュメントの XML を読み書きするときに使用される、<xref:System.Data.DataSet>を使用して、 <xref:System.Data.DataSet.ReadXml%2A>、 <xref:System.Data.DataSet.WriteXml%2A>、 <xref:System.Data.DataSet.ReadXmlSchema%2A>、または<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.WriteXml%2A></xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet>。       XML ドキュメントの名前空間は XML 属性および<xref:System.Data.DataSet>。</xref:System.Data.DataSet>を読み取るときに要素のスコープを指定するために使用します。 たとえば場合、<xref:System.Data.DataSet>スキーマを含む&quot;myCompany、&quot;名前空間を持つドキュメントから読み込まれたと別の名前空間を持つドキュメントからのみデータを読み取るしようとしましたが、既存のスキーマに対応していないすべてのデータは無視されます</xref:System.Data.DataSet>。"
  example:
  - "The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.na_1.vb)]\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.na_1.cs)]"
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "名前空間、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  overload: System.Data.DataSet.Namespace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "名前空間には、既にデータがあります。"
  platform:
  - net462
- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "OnPropertyChanging イベントを発生させます。"
  remarks: 'イベントを発生させるには、イベント ハンドラーがデリゲートからを呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。'
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "A<xref:System.ComponentModel.PropertyChangedEventArgs>イベント データを格納します</xref:System.ComponentModel.PropertyChangedEventArgs>。"
  overload: System.Data.DataSet.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  id: OnRemoveRelation(System.Data.DataRelation)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnRemoveRelation(DataRelation)
  nameWithType: DataSet.OnRemoveRelation(DataRelation)
  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "発生したときに、 <xref href=&quot;System.Data.DataRelation&quot;> </xref>からオブジェクトが削除された、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。"
  remarks: "このメソッドは、テーブルの削除を制限するサブクラスによってオーバーライドされなければなりません"
  syntax:
    content: protected virtual void OnRemoveRelation (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "<xref href=&quot;System.Data.DataRelation&quot;> </xref>削除されます。"
  overload: System.Data.DataSet.OnRemoveRelation*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  id: OnRemoveTable(System.Data.DataTable)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnRemoveTable(DataTable)
  nameWithType: DataSet.OnRemoveTable(DataTable)
  fullName: System.Data.DataSet.OnRemoveTable(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "発生したときに、 <xref href=&quot;System.Data.DataTable&quot;> </xref>から削除されて、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "このメソッドは、削除からテーブルを制限するサブクラスによってオーバーライドできます。"
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> with the OnRemoveTable method overridden.  \n  \n [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.on_1.vb)]\n [!code-cs[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/csharp/m-system.data.dataset.on_1.cs)]"
  syntax:
    content: protected virtual void OnRemoveTable (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref>削除されます。"
  overload: System.Data.DataSet.OnRemoveTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Prefix
  id: Prefix
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Prefix
  nameWithType: DataSet.Prefix
  fullName: System.Data.DataSet.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定の名前空間のエイリアスを表すプレフィックス、XML、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "名前空間に属している要素を識別する XML ドキュメント全体にわたって Prefix プロパティが使用される、<xref:System.Data.DataSet>オブジェクト (によって、設定、<xref:System.Data.DataSet.Namespace%2A>プロパティ).</xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example sets the Prefix before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.pr_1.vb)]\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.pr_1.cs)]"
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "XML プレフィックス、 <xref href=&quot;System.Data.DataSet&quot;> </xref>名前空間。"
  overload: System.Data.DataSet.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataSet.RaisePropertyChanging(String)
  fullName: System.Data.DataSet.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "通知を送信、指定された<xref href=&quot;System.Data.DataSet&quot;></xref>プロパティが変更されようとしています。"
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "変更されるプロパティの名前。"
  overload: System.Data.DataSet.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.Stream)
  id: ReadXml(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(Stream)
  nameWithType: DataSet.ReadXml(Stream)
  fullName: System.Data.DataSet.ReadXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "XML スキーマとデータを読み取り、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して&lt;xref:System.IO.Stream?displayProperty=fullName&gt;です。"
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet>、XML ドキュメントから一方、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A>。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードを含む、`mode`パラメーター、その値に設定し、`ReadSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet.WriteXml%2A>。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>       インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。       インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。      > [!NOTE] >、`DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。       場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します</xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet>。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`と等しい&quot;qualified&quot;に、XML スキーマで次の例で示すようにします。      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> 場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`</xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_7_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_7_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>。</xref:System.IO.Stream>から派生したオブジェクト"
    return:
      type: System.Data.XmlReadMode
      description: "<xref href=&quot;System.Data.XmlReadMode&quot;> </xref>データの読み取りに使用します。"
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)
  id: ReadXml(System.IO.TextReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(TextReader)
  nameWithType: DataSet.ReadXml(TextReader)
  fullName: System.Data.DataSet.ReadXml(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "XML スキーマとデータを読み取り、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して&lt;xref:System.IO.TextReader?displayProperty=fullName&gt;です。"
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet>、XML ドキュメントから一方、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A>。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードを含む、`mode`パラメーター、その値に設定し、`ReadSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet.WriteXml%2A>。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>       インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。       インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。      > [!NOTE] >、`DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。       場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します</xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet>。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`と等しい&quot;qualified&quot;に、XML スキーマで次の例で示すようにします。      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```継承するクラス、<xref:System.IO.TextReader>クラスが含まれて、<xref:System.IO.StreamReader>と<xref:System.IO.StringReader>クラス</xref:System.IO.StringReader></xref:System.IO.StreamReader></xref:System.IO.TextReader>。      > [!NOTE] > 場合のスキーマ、<xref:System.Data.DataSet>要素を含むにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`</xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_3_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_3_1.cs)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref>スキーマとデータを読み取り元。"
    return:
      type: System.Data.XmlReadMode
      description: "<xref href=&quot;System.Data.XmlReadMode&quot;> </xref>データの読み取りに使用します。"
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.String)
  id: ReadXml(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(String)
  nameWithType: DataSet.ReadXml(String)
  fullName: System.Data.DataSet.ReadXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "XML スキーマとデータを読み取り、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定のファイルを使用します。"
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet>、XML ドキュメントから一方、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A>。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードを含む、`mode`パラメーター、その値に設定し、`ReadSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet.WriteXml%2A>。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>       インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。       インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。      > [!NOTE] >、`DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。       場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、 `targetNamespace`、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します</xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet>。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`と等しい&quot;qualified&quot;に、XML スキーマで次の例で示すようにします。      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> 場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`</xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_1_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_1_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "読み取り元 (パスを含む) ファイル名です。"
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref>データの読み取りに使用します。"
  overload: System.Data.DataSet.ReadXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>設定されていない<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(XmlReader)
  nameWithType: DataSet.ReadXml(XmlReader)
  fullName: System.Data.DataSet.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "XML スキーマとデータを読み取り、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して&lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;です。"
  remarks: "ReadXml メソッドでは、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet>、XML ドキュメントから一方、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet>。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードを含む、`mode`パラメーター、その値に設定し、`ReadSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet.WriteXml%2A>。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>       インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。       インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。      > [!NOTE] >、`DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。       場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、 `targetNamespace`、データを読み取ることができませんが、およびを読み込む ReadXml を呼び出すときに例外が発生する可能性があります、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します</xref:System.Data.DataSet></xref:System.Data.DataSet>。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`と等しい&quot;qualified&quot;に、XML スキーマで次の例で示すようにします。      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```       <xref:System.Xml.XmlTextReader?displayProperty=fullName><xref:System.Xml.XmlReader>。</xref:System.Xml.XmlReader>から継承します。</xref:System.Xml.XmlTextReader?displayProperty=fullName>      > [!NOTE] > 場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、<xref:System.Data.DataSet>でを指定して ReadXml `XmlReadMode.ReadSchema`</xref:System.Data.DataSet> </xref:System.Data.DataSet> 。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the ReadXml method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_2_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_2_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>読み取り元</xref:System.Xml.XmlReader>。"
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref>データの読み取りに使用します。"
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  id: ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(Stream,XmlReadMode)
  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "XML スキーマとデータを読み取り、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して&lt;xref:System.IO.Stream?displayProperty=fullName&gt;と<xref href=&quot;System.Data.XmlReadMode&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet>、XML ドキュメントから一方、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A>。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードを含む、`mode`パラメーター、その値に設定し、`ReadSchema`です。       場合も同様、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet.WriteXml%2A>。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。      > [!NOTE] > ReadXml を使用して設定する<xref:System.Data.XmlReadMode>に`Diffgram`、ターゲットのコンテンツ`DataSet`とオリジナル`DataSet`diffgram の生成方法と処理方法により異なる場合があります</xref:System.Data.XmlReadMode>。 Diffgram の詳細については、次を参照してください。 [Diffgram](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>       インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。       インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。      > [!NOTE] >、`DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。       場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します</xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet>。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`と等しい&quot;qualified&quot;に、XML スキーマで次の例で示すようにします。      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> 場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`</xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>読み取り元</xref:System.IO.Stream>。"
    - id: mode
      type: System.Data.XmlReadMode
      description: "1 つ、 <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>値。"
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref>データの読み取りに使用します。"
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  id: ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(TextReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "XML スキーマとデータを読み取り、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して&lt;xref:System.IO.TextReader?displayProperty=fullName&gt;と<xref href=&quot;System.Data.XmlReadMode&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet>、XML ドキュメントから一方、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A>。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードを含む、`mode`パラメーター、その値に設定し、`ReadSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet.WriteXml%2A>。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>       インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。       インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。      > [!NOTE] >、`DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。       場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています`targetNamespace`、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します</xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet>。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`と等しい&quot;qualified&quot;に、XML スキーマで次の例で示すようにします。      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> 場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`</xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref:System.IO.TextReader>読み取り元</xref:System.IO.TextReader>。"
    - id: mode
      type: System.Data.XmlReadMode
      description: "1 つ、 <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>値。"
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref>データの読み取りに使用します。"
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  id: ReadXml(System.String,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(String,XmlReadMode)
  nameWithType: DataSet.ReadXml(String,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "XML スキーマとデータを読み取り、 <xref href=&quot;System.Data.DataSet&quot;> </xref> 、指定したファイルを使用して<xref href=&quot;System.Data.XmlReadMode&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet>、XML ドキュメントから一方、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A>。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードを含む、`mode`パラメーター、その値に設定し、`ReadSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet.WriteXml%2A>。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>       インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。       インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。      > [!NOTE] >、`DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。       場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、 `targetNamespace`、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します</xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet>。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`と等しい&quot;qualified&quot;に、XML スキーマで次の例で示すようにします。      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> 場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`</xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "読み取り元 (パスを含む) ファイル名です。"
    - id: mode
      type: System.Data.XmlReadMode
      description: "1 つ、 <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>値。"
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref>データの読み取りに使用します。"
  overload: System.Data.DataSet.ReadXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>設定されていない<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  id: ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(XmlReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "XML スキーマとデータを読み取り、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して&lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;と<xref href=&quot;System.Data.XmlReadMode&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataSet>、XML ドキュメントから一方、<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A>。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`オーバー ロードを含む、`mode`パラメーター、その値に設定し、`ReadSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.WriteXml%2A>と<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet.WriteXml%2A>。 XML データ、または両方のスキーマとデータを書き込む、`DataSet`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>       インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。       インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。      > [!NOTE] >、`DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。       場合の XML スキーマ、<xref:System.Data.DataSet>が含まれています、 `targetNamespace`、データを読み取ることができませんが、および呼び出し時に例外が発生する可能性があります<xref:System.Data.DataSet.ReadXml%2A>を読み込む、<xref:System.Data.DataSet>修飾名前空間のない要素を含む XML を使用します</xref:System.Data.DataSet></xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet>。 修飾されていない要素を読み取り、次のように設定します。`elementFormDefault`と等しい&quot;qualified&quot;に、XML スキーマで次の例で示すようにします。      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> 場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスロー、<xref:System.Data.DataSet>で<xref:System.Data.DataSet.ReadXml%2A>を指定して`XmlReadMode.ReadSchema`</xref:System.Data.DataSet.ReadXml%2A></xref:System.Data.DataSet></xref:System.Data.DataSet>。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>読み取り元</xref:System.Xml.XmlReader>。"
    - id: mode
      type: System.Data.XmlReadMode
      description: "1 つ、 <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>値。"
    return:
      type: System.Data.XmlReadMode
      description: "<xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref>データの読み取りに使用します。"
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  id: ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(Stream)
  nameWithType: DataSet.ReadXmlSchema(Stream)
  fullName: System.Data.DataSet.ReadXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定された対象から XML スキーマを読み込みます<xref:System.IO.Stream>に、 <xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.IO.Stream> 。"
  remarks: "<xref:System.Data.DataSet.ReadXmlSchema%2A> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>のスキーマを作成するメソッド</xref:System.Data.DataSet.ReadXmlSchema%2A>を使用して スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド</xref:System.Data.DataSet.WriteXmlSchema%2A>。       XML スキーマは、XSD 標準を使用して書き込まれます。      > [!NOTE] >、Msdata:DataType と xs:type 型が一致しない場合、データの破損が発生することができます。 例外はスローされません。       <xref:System.Data.DataSet.ReadXmlSchema%2A>一般にこのメソッドは<xref:System.Data.DataSet.ReadXml%2A><xref:System.Data.DataSet>。</xref:System.Data.DataSet>の塗りつぶしに使用するメソッド</xref:System.Data.DataSet.ReadXml%2A>を呼び出す前に</xref:System.Data.DataSet.ReadXmlSchema%2A>       派生したクラス、<xref:System.IO.Stream>クラスを含める<xref:System.IO.BufferedStream>、 <xref:System.IO.FileStream>、 <xref:System.IO.MemoryStream>、 <xref:System.Net.Sockets.NetworkStream></xref:System.Net.Sockets.NetworkStream> </xref:System.IO.MemoryStream> </xref:System.IO.FileStream> </xref:System.IO.BufferedStream> </xref:System.IO.Stream> 。      > [!NOTE] > 場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますの<xref:System.Data.DataSet><xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet>にスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスローされる</xref:System.Data.DataSet>。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  example:
  - "The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \n  \n [!code-cs[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_5_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_5_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>読み取り元</xref:System.IO.Stream>。"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  id: ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(TextReader)
  nameWithType: DataSet.ReadXmlSchema(TextReader)
  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定された対象から XML スキーマを読み込みます<xref:System.IO.TextReader>に、 <xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.IO.TextReader> 。"
  remarks: "<xref:System.Data.DataSet.ReadXmlSchema%2A> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>のスキーマを作成するメソッド</xref:System.Data.DataSet.ReadXmlSchema%2A>を使用して スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド</xref:System.Data.DataSet.WriteXmlSchema%2A>。       XML スキーマは、XSD 標準を使用して書き込まれます。      > [!NOTE] >、Msdata:DataType と xs:type 型が一致しない場合、データの破損が発生することができます。 例外はスローされません。       <xref:System.Data.DataSet.ReadXmlSchema%2A>一般にこのメソッドは<xref:System.Data.DataSet.ReadXml%2A><xref:System.Data.DataSet>。</xref:System.Data.DataSet>の塗りつぶしに使用するメソッド</xref:System.Data.DataSet.ReadXml%2A>を呼び出す前に</xref:System.Data.DataSet.ReadXmlSchema%2A>       継承するクラス、<xref:System.IO.TextReader>クラスが含まれて、<xref:System.IO.StreamReader>と<xref:System.IO.StringReader>クラス</xref:System.IO.StringReader></xref:System.IO.StreamReader></xref:System.IO.TextReader>。      > [!NOTE] > 場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますの<xref:System.Data.DataSet><xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet>にスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスローされる</xref:System.Data.DataSet>。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  example:
  - "The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \n  \n [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_8_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_8_1.cs)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref:System.IO.TextReader>読み取り元</xref:System.IO.TextReader>。"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.String)
  id: ReadXmlSchema(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(String)
  nameWithType: DataSet.ReadXmlSchema(String)
  fullName: System.Data.DataSet.ReadXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定したファイルから XML スキーマを読み取り、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "<xref:System.Data.DataSet.ReadXmlSchema%2A> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>のスキーマを作成するメソッド</xref:System.Data.DataSet.ReadXmlSchema%2A>を使用して スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド</xref:System.Data.DataSet.WriteXmlSchema%2A>。       XML スキーマは、XSD 標準を使用して書き込まれます。      > [!NOTE] >、Msdata:DataType と xs:type 型が一致しない場合、データの破損が発生することができます。 例外はスローされません。       <xref:System.Data.DataSet.ReadXmlSchema%2A>一般にこのメソッドは<xref:System.Data.DataSet.ReadXml%2A><xref:System.Data.DataSet>。</xref:System.Data.DataSet>の塗りつぶしに使用するメソッド</xref:System.Data.DataSet.ReadXml%2A>を呼び出す前に</xref:System.Data.DataSet.ReadXmlSchema%2A>      > [!NOTE] > 場合のスキーマ、<xref:System.Data.DataSet>要素を含むスキーマを読み取ったり、into、<xref:System.Data.DataSet><xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet>しようとする同じ名前では、同じ名前空間内の別の種類の例外がスロー</xref:System.Data.DataSet> 。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  example:
  - >-
    [!code-cs[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_0_1.cs)]
     [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_0_1.vb)]
  syntax:
    content: public void ReadXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "ファイル読み出し元の名 (パスを含む)。"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>設定されていない<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  id: ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataSet.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定された対象から XML スキーマを読み込みます<xref:System.Xml.XmlReader>に、 <xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.Xml.XmlReader> 。"
  remarks: "ReadXmlSchema メソッドを使用して、 <xref:System.Data.DataSet>。</xref:System.Data.DataSet>のスキーマを作成するには スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。       XML スキーマは、XSD 標準を使用して書き込まれます。      > [!NOTE] >、Msdata:DataType と xs:type 型が一致しない場合、データの破損が発生することができます。 例外はスローされません。       ReadXmlSchema 一般にこのメソッドは、 <xref:System.Data.DataSet.ReadXml%2A> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>の塗りつぶしに使用するメソッド</xref:System.Data.DataSet.ReadXml%2A>を呼び出す前に       <xref:System.Xml.XmlReader?displayProperty=fullName>クラスは抽象クラスです</xref:System.Xml.XmlReader?displayProperty=fullName>。 継承するクラス、`XmlReader`は<xref:System.Xml.XmlTextReader?displayProperty=fullName>クラス</xref:System.Xml.XmlTextReader?displayProperty=fullName>です。      > [!NOTE] > 場合のスキーマ、<xref:System.Data.DataSet>要素が含まれていますにスキーマを読み取ろうとしたときに、名前が同じで、同じ名前空間内の別の種類の例外がスローする、 <xref:System.Data.DataSet>ReadXmlSchema と</xref:System.Data.DataSet></xref:System.Data.DataSet>。 .NET Framework version 1.0 を使用している場合、この例外は発生しません。"
  example:
  - "The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=fullName> object. The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=fullName> that is passed as an argument to the ReadXmlSchema method.  \n  \n [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_4_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_4_1.cs)]"
  syntax:
    content: public void ReadXmlSchema (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>読み取り元</xref:System.Xml.XmlReader>。"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  id: ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataSet.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "属性を無視し、空のデータセットを返します。"
  syntax:
    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "指定した XML リーダー。"
  overload: System.Data.DataSet.ReadXmlSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RejectChanges
  id: RejectChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataSet.RejectChanges()
  fullName: System.Data.DataSet.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "加えられたすべての変更をロールバック、 <xref href=&quot;System.Data.DataSet&quot;> </xref>の作成後、または前回&lt;xref:System.Data.DataSet.AcceptChanges%2A?displayProperty=fullName&gt;が呼び出されました。"
  remarks: "<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> <xref:System.Data.DataTable> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>オブジェクトに含まれる</xref:System.Data.DataTable>すべてのメソッド</xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>を呼び出す RejectChanges を呼び出し       <xref:System.Data.DataRow>含まれるオブジェクト、<xref:System.Data.DataSet>ごとに設定できる編集モードを呼び出すことによって、<xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName>メソッド</xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName></xref:System.Data.DataSet>。</xref:System.Data.DataRow> 呼び出し後に、<xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName>メソッドを呼び出して変更が拒否されることができます、<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>で、<xref:System.Data.DataTable>する、<xref:System.Data.DataRow>オブジェクトが属している</xref:System.Data.DataRow></xref:System.Data.DataTable></xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName></xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName>。       ときに、<xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>メソッドが呼び出されると、編集モードにまだ行が、編集をキャンセルします</xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>。 新しい行が削除されます。 変更および削除された行を返す元の状態に戻ります (`DataRowState.Unchanged`)。       Acceptchange と Rejectchange がのみに適用<xref:System.Data.DataRow>関連の変更 (つまり、 `Add`、 `Remove`、 `Delete`、および`Modify`).</xref:System.Data.DataRow> これらはスキーマまたは構造の変更を適用できません。"
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> class. The RejectChanges event is invoked from within a function.  \n  \n [!code-cs[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_6_1.cs)]\n [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_6_1.vb)]"
  syntax:
    content: public virtual void RejectChanges ();
    parameters: []
  overload: System.Data.DataSet.RejectChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Relations
  id: Relations
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Relations
  nameWithType: DataSet.Relations
  fullName: System.Data.DataSet.Relations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "テーブルをリンクし、ナビゲーションの親から子テーブルへのテーブルを許可するリレーションシップのコレクションを取得します。"
  remarks: ''
  example:
  - "The following example prints the column name of all child tables through the Relations property.  \n  \n [!code-vb[Classic WebData DataSet.Relations Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.re_1.vb)]"
  syntax:
    content: public System.Data.DataRelationCollection Relations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "A <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>のコレクションを含む<xref href=&quot;System.Data.DataRelation&quot;></xref>オブジェクト。 ない場合は、空のコレクションが返される<xref href=&quot;System.Data.DataRelation&quot;></xref>オブジェクトが存在します。"
  overload: System.Data.DataSet.Relations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RemotingFormat
  id: RemotingFormat
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
  fullName: System.Data.DataSet.RemotingFormat
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定、 <xref href=&quot;System.Data.SerializationFormat&quot;> </xref>の<xref href=&quot;System.Data.DataSet&quot;></xref>リモート処理中に使用します。"
  syntax:
    content: public System.Data.SerializationFormat RemotingFormat { get; set; }
    return:
      type: System.Data.SerializationFormat
      description: "A <xref href=&quot;System.Data.SerializationFormat&quot;></xref> object."
  overload: System.Data.DataSet.RemotingFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Reset
  id: Reset
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Reset()
  nameWithType: DataSet.Reset()
  fullName: System.Data.DataSet.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "すべてのテーブルをクリアし、すべてのリレーションシップ、外部の制約、およびからテーブルを削除、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。 サブクラスは、復元するリセットをオーバーライドする必要があります、 <xref href=&quot;System.Data.DataSet&quot;> </xref>を元の状態にします。"
  syntax:
    content: public virtual void Reset ();
    parameters: []
  overload: System.Data.DataSet.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.SchemaSerializationMode
  id: SchemaSerializationMode
  parent: System.Data.DataSet
  langs:
  - csharp
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
  fullName: System.Data.DataSet.SchemaSerializationMode
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets a <xref href=&quot;System.Data.SchemaSerializationMode&quot;></xref> for a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  remarks: "A <xref:System.Data.DataSet>Web サービス、およびリモート処理のシナリオでは既定のスキーマおよびインスタンス データをシリアル化します</xref:System.Data.DataSet>。 型指定されたの SchemaSerializationMode のプロパティを設定`DataSet`を<xref:System.Data.SchemaSerializationMode>スキーマ情報は、シリアル化のペイロードを除外します</xref:System.Data.SchemaSerializationMode>。       <xref:System.Data.SchemaSerializationMode>サポートは、型指定されたに対してのみ`DataSet`です。</xref:System.Data.SchemaSerializationMode> 型指定されていないため`DataSet`このプロパティは、 <xref:System.Data.SchemaSerializationMode>.</xref:System.Data.SchemaSerializationMode>にのみ設定できます       <xref:System.Data.SchemaSerializationMode>スキーマ情報を基になる型指定されている場合のみ使用する必要があります`DataTables`、`DataRelations`と`Constraints`は変更されていません。</xref:System.Data.SchemaSerializationMode> 変更がある<xref:System.Data.SchemaSerializationMode>。</xref:System.Data.SchemaSerializationMode>で発生した、完全なスキーマ情報をシリアル化する必要があります。       <xref:System.Data.SchemaSerializationMode>バージョン 2.0、.NET Framework の以降ではサポートします。</xref:System.Data.SchemaSerializationMode>       ときに<xref:System.Data.SchemaSerializationMode>が設定されて、上位レベルのランタイム プロパティのみに存在、<xref:System.Data.DataSet>はシリアル化します</xref:System.Data.DataSet></xref:System.Data.SchemaSerializationMode>。 さらに、既定値は異なる場合に、発生する場合にのみ、シリアル化されます。 いずれも、 `Tables`、`Relations`または`Constraints`はシリアル化します。 シリアル化されたランタイム プロパティには、 <xref:System.Data.DataSet.DataSetName%2A>、 <xref:System.Data.DataSet.Namespace%2A>、 <xref:System.Data.DataSet.Prefix%2A>、 <xref:System.Data.DataSet.Locale%2A>、 <xref:System.Data.DataSet.EnforceConstraints%2A>、 <xref:System.Data.DataSet.CaseSensitive%2A></xref:System.Data.DataSet.CaseSensitive%2A> </xref:System.Data.DataSet.EnforceConstraints%2A> </xref:System.Data.DataSet.Locale%2A> </xref:System.Data.DataSet.Prefix%2A> </xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet.DataSetName%2A> 。 これらのプロパティは、全体的なランタイム データの整合性が維持されることを確認してくださいにシリアル化されます。"
  syntax:
    content: public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }
    return:
      type: System.Data.SchemaSerializationMode
      description: "Gets or sets a <xref href=&quot;System.Data.SchemaSerializationMode&quot;></xref> for a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataSet.SchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ShouldSerializeRelations
  id: ShouldSerializeRelations
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ShouldSerializeRelations()
  nameWithType: DataSet.ShouldSerializeRelations()
  fullName: System.Data.DataSet.ShouldSerializeRelations()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "示す値を取得するかどうか<xref:System.Data.DataSet.Relations*>プロパティを永続化する必要があります</xref:System.Data.DataSet.Relations*>。"
  remarks: "いずれかをデザイナーを作成する場合は通常このメソッドを使用する、 <xref:System.Data.DataSet>、 <xref:System.Data.DataSet>.</xref:System.Data.DataSet>を組み込む独自のコントロールを作成または</xref:System.Data.DataSet>"
  example:
  - "The following examples show a class derived from the <xref:System.Data.DataSet> class. The <xref:System.Data.DataSet.Reset%2A> and ShouldSerializeRelations methods are invoked from within functions in the derived class.  \n  \n [!code-cs[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_3_1.cs)]\n [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_3_1.vb)]"
  syntax:
    content: protected virtual bool ShouldSerializeRelations ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティの値が既定から変更されている場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.ShouldSerializeRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ShouldSerializeTables
  id: ShouldSerializeTables
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ShouldSerializeTables()
  nameWithType: DataSet.ShouldSerializeTables()
  fullName: System.Data.DataSet.ShouldSerializeTables()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "示す値を取得するかどうか<xref:System.Data.DataSet.Tables*>プロパティを永続化する必要があります</xref:System.Data.DataSet.Tables*>。"
  remarks: "いずれかをデザイナーを作成する場合にのみ通常このメソッドを使用する、 <xref:System.Data.DataSet>、 <xref:System.Data.DataSet>.</xref:System.Data.DataSet>を組み込む独自のコントロールを作成または</xref:System.Data.DataSet>"
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> class. The ShouldSerializeTables method is called from within functions in the derived class.  \n  \n [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_2_1.vb)]\n [!code-cs[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_2_1.cs)]"
  syntax:
    content: protected virtual bool ShouldSerializeTables ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロパティの値が既定から変更されている場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataSet.ShouldSerializeTables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Site
  id: Site
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Site
  nameWithType: DataSet.Site
  fullName: System.Data.DataSet.Site
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得または設定、 <xref href=&quot;System.ComponentModel.ISite&quot;> </xref>の<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "サイトのバインド、<xref:System.ComponentModel.Component>を<xref:System.ComponentModel.Container>とそれらの間で通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理するための手段を提供します</xref:System.ComponentModel.Container></xref:System.ComponentModel.Component>。"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataSet.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "このメンバーの説明は、次を参照してください。 &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;です。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.DataSet>にインスタンスをキャスト、<xref:System.ComponentModel.IListSource>インターフェイス</xref:System.ComponentModel.IListSource></xref:System.Data.DataSet>。"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "このメンバーの説明は、次を参照してください。 &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;です。"
  overload: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "このメンバーの説明は、次を参照してください。 &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;です。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.DataSet>にインスタンスをキャスト、<xref:System.ComponentModel.IListSource>インターフェイス</xref:System.ComponentModel.IListSource></xref:System.Data.DataSet>。"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "このメンバーの説明は、次を参照してください。 &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;です。"
  overload: System.Data.DataSet.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "このメンバーの説明は、次を参照してください。 &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;です。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.DataSet>にインスタンスをキャスト、<xref:System.Xml.Serialization.IXmlSerializable>インターフェイス</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Data.DataSet>。"
  syntax:
    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "このメンバーの説明は、次を参照してください。 &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;です。"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "このメンバーの説明は、次を参照してください。 &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;です。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.DataSet>にインスタンスをキャスト、<xref:System.Xml.Serialization.IXmlSerializable>インターフェイス</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Data.DataSet>。"
  syntax:
    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "A <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "このメンバーの説明は、次を参照してください。 &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;です。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.DataSet>にインスタンスをキャスト、<xref:System.Xml.Serialization.IXmlSerializable>インターフェイス</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Data.DataSet>。"
  syntax:
    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "A <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Tables
  id: Tables
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Tables
  nameWithType: DataSet.Tables
  fullName: System.Data.DataSet.Tables
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "含まれているテーブルのコレクションを取得、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  remarks: "コレクションにテーブルを追加するには、 <xref:System.Data.DataTableCollection.Add%2A> <xref:System.Data.DataTableCollection>。</xref:System.Data.DataTableCollection>のメソッド</xref:System.Data.DataTableCollection.Add%2A>を使用します。 削除するにはテーブルを使用して、<xref:System.Data.DataTableCollection.Remove%2A>メソッド</xref:System.Data.DataTableCollection.Remove%2A>。"
  example:
  - "The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.  \n  \n [!code-vb[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ta_1.vb)]\n [!code-cs[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ta_1.cs)]"
  syntax:
    content: public System.Data.DataTableCollection Tables { get; }
    return:
      type: System.Data.DataTableCollection
      description: "<xref href=&quot;System.Data.DataTableCollection&quot;> </xref>に含まれるこの<xref href=&quot;System.Data.DataSet&quot;></xref>です。 ない場合は、空のコレクションが返される<xref href=&quot;System.Data.DataTable&quot;></xref>オブジェクトが存在します。"
  overload: System.Data.DataSet.Tables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.Stream)
  id: WriteXml(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(Stream)
  nameWithType: DataSet.WriteXml(Stream)
  fullName: System.Data.DataSet.WriteXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "現在のデータを書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して&lt;xref:System.IO.Stream?displayProperty=fullName&gt;です。"
  remarks: "`WriteXml`メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataSet>、XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet>。 データとスキーマの両方を含むオーバー ロードのいずれかの操作を使用して、`mode`パラメーター、その値に設定および`WriteSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXml%2A>。 XML データまたはスキーマとデータの両方を読み取り、`DataSet`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>"
  example:
  - "The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object. The object is then used with the WriteXml method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_2_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_2_1.vb)]"
  syntax:
    content: public void WriteXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>ファイルへの書き込みに使用されるオブジェクト</xref:System.IO.Stream>。"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)
  id: WriteXml(System.IO.TextWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(TextWriter)
  nameWithType: DataSet.WriteXml(TextWriter)
  fullName: System.Data.DataSet.WriteXml(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "現在のデータを書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定<xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>を使用します。"
  remarks: "`WriteXml`メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataSet>、XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet>。 データとスキーマの両方を含むオーバー ロードのいずれかの操作を使用して、`mode`パラメーター、その値に設定および`WriteSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXml%2A>。 XML データまたはスキーマとデータの両方を読み取り、`DataSet`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>書き込みに使用するオブジェクト</xref:System.IO.TextWriter>。"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.String)
  id: WriteXml(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(String)
  nameWithType: DataSet.WriteXml(String)
  fullName: System.Data.DataSet.WriteXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "現在のデータを書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定したファイルにします。"
  remarks: "`WriteXml`メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataSet>、XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet>。 データとスキーマの両方を含むオーバー ロードのいずれかの操作を使用して、`mode`パラメーター、その値に設定および`WriteSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXml%2A>。 XML データまたはスキーマとデータの両方を読み取り、`DataSet`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "ファイルを書き込む名 (パスを含む)。"
  overload: System.Data.DataSet.WriteXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>設定されていない<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(XmlWriter)
  nameWithType: DataSet.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "現在のデータを書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定<xref:System.Xml.XmlWriter></xref:System.Xml.XmlWriter>。"
  remarks: "`WriteXml`メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataSet>、XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet>。 データとスキーマの両方を含むオーバー ロードのいずれかの操作を使用して、`mode`パラメーター、その値に設定および`WriteSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXml%2A>。 XML データまたはスキーマとデータの両方を読み取り、`DataSet`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>書き込みに使用する</xref:System.Xml.XmlWriter>。"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "現在のデータおよび必要に応じて、スキーマを書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して&lt;xref:System.IO.Stream?displayProperty=fullName&gt;と<xref href=&quot;System.Data.XmlWriteMode&quot;></xref>です。 記述するには、スキーマの値を設定、 <code> mode </code>パラメーターを<xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>です。"
  remarks: "`WriteXml`メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataSet>、XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet>。 データとスキーマの両方を作成するには、設定、`mode`パラメーターを`WriteSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXml%2A>。 XML データまたはスキーマとデータの両方を読み取り、`DataSet`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>ファイルへの書き込みに使用されるオブジェクト</xref:System.IO.Stream>。"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "1 つ、 <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>値。"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "現在のデータおよび必要に応じて、スキーマを書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して<xref:System.IO.TextWriter>と<xref href=&quot;System.Data.XmlWriteMode&quot;> </xref></xref:System.IO.TextWriter> 。 記述するには、スキーマの値を設定、 <code> mode </code>パラメーターを<xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>です。"
  remarks: "`WriteXml`メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataSet>、XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet>。 データとスキーマの両方を作成するには、設定、`mode`パラメーターを`WriteSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXml%2A>。 XML データまたはスキーマとデータの両方を読み取り、`DataSet`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>"
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_7_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_7_1.cs)]"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "A &lt;xref:System.IO.TextWriter?displayProperty=fullName&gt;オブジェクト、ドキュメントを書き込むために使用します。"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "1 つ、 <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>値。"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  id: WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataSet.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "現在のデータおよび必要に応じて、スキーマを書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して、指定したファイルに<xref href=&quot;System.Data.XmlWriteMode&quot;></xref>です。 記述するには、スキーマの値を設定、 <code> mode </code>パラメーターを<xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>です。"
  remarks: "`WriteXml`メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataSet>、XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet>。 データとスキーマの両方を作成するには、設定、`mode`パラメーターを`WriteSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXml%2A>。 XML データまたはスキーマとデータの両方を読み取り、`DataSet`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_3_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_3_1.vb)]"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "ファイルを書き込む名 (パスを含む)。"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "1 つ、 <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>値。"
  overload: System.Data.DataSet.WriteXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>設定されていない<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "現在のデータおよび必要に応じて、スキーマを書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定して<xref:System.Xml.XmlWriter>と<xref href=&quot;System.Data.XmlWriteMode&quot;> </xref></xref:System.Xml.XmlWriter> 。 記述するには、スキーマの値を設定、 <code> mode </code>パラメーターを<xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;></xref>です。"
  remarks: "`WriteXml`メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataSet>、XML ドキュメントに対し、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます</xref:System.Data.DataSet.WriteXmlSchema%2A></xref:System.Data.DataSet>。 データとスキーマの両方を作成するには、設定、`mode`パラメーターを`WriteSchema`です。       True に設定が、同じことに注意してください、<xref:System.Data.DataSet.ReadXml%2A>と<xref:System.Data.DataSet.ReadXmlSchema%2A>メソッド、それぞれ</xref:System.Data.DataSet.ReadXmlSchema%2A></xref:System.Data.DataSet.ReadXml%2A>。 XML データまたはスキーマとデータの両方を読み取り、`DataSet`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。      > [!NOTE] >、<xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取られたり、実装<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable></xref:System.Dynamic.IDynamicMetaObjectProvider>に書き込まれた</xref:System.InvalidOperationException>"
  example:
  - "The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object that is used to create a new <xref:System.Xml.XmlTextWriter?displayProperty=fullName>. The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_1_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_1_1.vb)]"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>書き込みに使用する</xref:System.Xml.XmlWriter>。"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "1 つ、 <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>値。"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  id: WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(Stream)
  nameWithType: DataSet.WriteXmlSchema(Stream)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>構造体を指定した XML スキーマとして&lt;xref:System.IO.Stream?displayProperty=fullName&gt;オブジェクト。"
  remarks: "WriteXmlSchema メソッドのスキーマの記述を使用して、 <xref:System.Data.DataSet>XML ドキュメントにします</xref:System.Data.DataSet>。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。 XML ドキュメントにスキーマを記述するには、WriteXmlSchema メソッドを使用します。       XML スキーマは、XSD 標準を使用して書き込まれます。       XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド</xref:System.Data.DataSet.WriteXml%2A>。       派生したクラス、<xref:System.IO.Stream>クラスを含める<xref:System.IO.BufferedStream>、 <xref:System.IO.FileStream>、 <xref:System.IO.MemoryStream>、 <xref:System.Net.Sockets.NetworkStream></xref:System.Net.Sockets.NetworkStream> </xref:System.IO.MemoryStream> </xref:System.IO.FileStream> </xref:System.IO.BufferedStream> </xref:System.IO.Stream> 。"
  example:
  - "The following example creates a new <xref:System.IO.FileStream> object that is passed to the WriteXmlSchema method to write the schema to disk.  \n  \n [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_6_1.vb)]\n [!code-cs[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_6_1.cs)]"
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>ファイルへの書き込みに使用されるオブジェクト</xref:System.IO.Stream>。"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  id: WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataSet.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>構造体を指定した XML スキーマとして<xref:System.IO.TextWriter>オブジェクト</xref:System.IO.TextWriter>。"
  remarks: "使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataSet>XML ドキュメントにします</xref:System.Data.DataSet></xref:System.Data.DataSet.WriteXmlSchema%2A>。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド</xref:System.Data.DataSet.WriteXmlSchema%2A>。       XML スキーマは、XSD 標準を使用して書き込まれます。       XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド</xref:System.Data.DataSet.WriteXml%2A>。       クラスの派生元の<xref:System.IO.TextWriter?displayProperty=fullName>クラスが含まれて、 <xref:System.Web.HttpWriter?displayProperty=fullName>、 <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>、 <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>、 <xref:System.IO.StreamWriter?displayProperty=fullName>、 <xref:System.IO.StringWriter?displayProperty=fullName></xref:System.IO.StringWriter?displayProperty=fullName> </xref:System.IO.StreamWriter?displayProperty=fullName> </xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> </xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName> </xref:System.Web.HttpWriter?displayProperty=fullName> </xref:System.IO.TextWriter?displayProperty=fullName> 。"
  example:
  - "The following example creates a <xref:System.Text.StringBuilder?displayProperty=fullName> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=fullName>. The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.  \n  \n [!code-cs[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_0_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_0_1.vb)]"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>書き込みに使用するオブジェクト</xref:System.IO.TextWriter>。"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.String)
  id: WriteXmlSchema(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(String)
  nameWithType: DataSet.WriteXmlSchema(String)
  fullName: System.Data.DataSet.WriteXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>をファイルに XML スキーマとして構造体。"
  remarks: "使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataSet>XML ドキュメントにします</xref:System.Data.DataSet></xref:System.Data.DataSet.WriteXmlSchema%2A>。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド</xref:System.Data.DataSet.WriteXmlSchema%2A>。       XML スキーマは、XSD 標準を使用して書き込まれます。       XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド</xref:System.Data.DataSet.WriteXml%2A>。"
  example:
  - >-
    [!code-cs[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_4_1.cs)]
     [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_4_1.vb)]
  syntax:
    content: public void WriteXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "ファイルを書き込む名 (パスを含む)。"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>設定されていない<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  id: WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>構造体に XML スキーマとして、<xref:System.Xml.XmlWriter>オブジェクト</xref:System.Xml.XmlWriter>。"
  remarks: "使用して、<xref:System.Data.DataSet.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataSet>XML ドキュメントにします</xref:System.Data.DataSet></xref:System.Data.DataSet.WriteXmlSchema%2A>。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataSet.WriteXmlSchema%2A>メソッド</xref:System.Data.DataSet.WriteXmlSchema%2A>。       XML スキーマは、XSD 標準を使用して書き込まれます。       XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataSet.WriteXml%2A>メソッド</xref:System.Data.DataSet.WriteXml%2A>。       1 つを継承するクラス、<xref:System.Xml.XmlWriter?displayProperty=fullName>クラスは<xref:System.Xml.XmlTextWriter?displayProperty=fullName>クラス</xref:System.Xml.XmlTextWriter?displayProperty=fullName>です。</xref:System.Xml.XmlWriter?displayProperty=fullName>"
  example:
  - "The following example creates a new <xref:System.IO.FileStream?displayProperty=fullName> object with the specified path. The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XMLTextWriter?displayProperty=fullName> object. The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.  \n  \n [!code-cs[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_5_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_5_1.vb)]"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>を書き込めません</xref:System.Xml.XmlWriter>。"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(Stream,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>構造体を指定した XML スキーマとして&lt;xref:System.IO.Stream?displayProperty=fullName&gt;オブジェクト。"
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A &lt;xref:System.IO.Stream?displayProperty=fullName&gt;に書き込むオブジェクト。"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "変換に使用されるデリゲート<xref:System.Type>を文字列にします</xref:System.Type>。"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定<xref:System.IO.TextWriter></xref:System.IO.TextWriter>XML スキーマとして構造体。"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "A<xref:System.IO.TextWriter>に書き込むオブジェクト</xref:System.IO.TextWriter>。"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "変換に使用されるデリゲート<xref:System.Type>を文字列にします</xref:System.Type>。"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(String,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>をファイルに XML スキーマとして構造体。"
  syntax:
    content: public void WriteXmlSchema (string fileName, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: fileName
      type: System.String
      description: "書き込み先のファイルの名前。"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "変換に使用されるデリゲート<xref:System.Type>を文字列にします</xref:System.Type>。"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "書き込みます、 <xref href=&quot;System.Data.DataSet&quot;> </xref>指定<xref:System.Xml.XmlWriter></xref:System.Xml.XmlWriter>XML スキーマとして構造体。"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "A<xref:System.Xml.XmlWriter>に書き込むオブジェクト</xref:System.Xml.XmlWriter>。"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "変換に使用されるデリゲート<xref:System.Type>を文字列にします</xref:System.Type>。"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DataSet.#ctor
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet()
  nameWithType: DataSet.DataSet()
  fullName: System.Data.DataSet.DataSet()
- uid: System.Data.DataSet.#ctor(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(String)
  nameWithType: DataSet.DataSet(String)
  fullName: System.Data.DataSet.DataSet(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(SerializationInfo,StreamingContext,Boolean)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataSet.AcceptChanges
  parent: System.Data.DataSet
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataSet.AcceptChanges()
  fullName: System.Data.DataSet.AcceptChanges()
- uid: System.Data.DataSet.BeginInit
  parent: System.Data.DataSet
  isExternal: false
  name: BeginInit()
  nameWithType: DataSet.BeginInit()
  fullName: System.Data.DataSet.BeginInit()
- uid: System.Data.DataSet.CaseSensitive
  parent: System.Data.DataSet
  isExternal: false
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
  fullName: System.Data.DataSet.CaseSensitive
- uid: System.Data.DataSet.Clear
  parent: System.Data.DataSet
  isExternal: false
  name: Clear()
  nameWithType: DataSet.Clear()
  fullName: System.Data.DataSet.Clear()
- uid: System.Data.DataSet.Clone
  parent: System.Data.DataSet
  isExternal: false
  name: Clone()
  nameWithType: DataSet.Clone()
  fullName: System.Data.DataSet.Clone()
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataSet.Copy
  parent: System.Data.DataSet
  isExternal: false
  name: Copy()
  nameWithType: DataSet.Copy()
  fullName: System.Data.DataSet.Copy()
- uid: System.Data.DataSet.CreateDataReader
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader()
  nameWithType: DataSet.CreateDataReader()
  fullName: System.Data.DataSet.CreateDataReader()
- uid: System.Data.DataTableReader
  parent: System.Data
  isExternal: false
  name: DataTableReader
  nameWithType: DataTableReader
  fullName: System.Data.DataTableReader
- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader(DataTable[])
  nameWithType: DataSet.CreateDataReader(DataTable[])
  fullName: System.Data.DataSet.CreateDataReader(DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.DataSetName
  parent: System.Data.DataSet
  isExternal: false
  name: DataSetName
  nameWithType: DataSet.DataSetName
  fullName: System.Data.DataSet.DataSetName
- uid: System.Data.DataSet.DefaultViewManager
  parent: System.Data.DataSet
  isExternal: false
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
  fullName: System.Data.DataSet.DefaultViewManager
- uid: System.Data.DataViewManager
  parent: System.Data
  isExternal: false
  name: DataViewManager
  nameWithType: DataViewManager
  fullName: System.Data.DataViewManager
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode(XmlReader)
  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)
- uid: System.Data.SchemaSerializationMode
  parent: System.Data
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: SchemaSerializationMode
  fullName: System.Data.SchemaSerializationMode
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.EndInit
  parent: System.Data.DataSet
  isExternal: false
  name: EndInit()
  nameWithType: DataSet.EndInit()
  fullName: System.Data.DataSet.EndInit()
- uid: System.Data.DataSet.EnforceConstraints
  parent: System.Data.DataSet
  isExternal: false
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
  fullName: System.Data.DataSet.EnforceConstraints
- uid: System.Data.DataSet.ExtendedProperties
  parent: System.Data.DataSet
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
  fullName: System.Data.DataSet.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataSet.GetChanges
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges()
  nameWithType: DataSet.GetChanges()
  fullName: System.Data.DataSet.GetChanges()
- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges(DataRowState)
  nameWithType: DataSet.GetChanges(DataRowState)
  fullName: System.Data.DataSet.GetChanges(DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataSet
  isExternal: false
  name: GetDataSetSchema(XmlSchemaSet)
  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)
  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaComplexType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaComplexType
  nameWithType: XmlSchemaComplexType
  fullName: System.Xml.Schema.XmlSchemaComplexType
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.GetSchemaSerializable
  parent: System.Data.DataSet
  isExternal: false
  name: GetSchemaSerializable()
  nameWithType: DataSet.GetSchemaSerializable()
  fullName: System.Data.DataSet.GetSchemaSerializable()
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: GetSerializationData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.GetXml
  parent: System.Data.DataSet
  isExternal: false
  name: GetXml()
  nameWithType: DataSet.GetXml()
  fullName: System.Data.DataSet.GetXml()
- uid: System.Data.DataSet.GetXmlSchema
  parent: System.Data.DataSet
  isExternal: false
  name: GetXmlSchema()
  nameWithType: DataSet.GetXmlSchema()
  fullName: System.Data.DataSet.GetXmlSchema()
- uid: System.Data.DataSet.HasChanges
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges()
  nameWithType: DataSet.HasChanges()
  fullName: System.Data.DataSet.HasChanges()
- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges(DataRowState)
  nameWithType: DataSet.HasChanges(DataRowState)
  fullName: System.Data.DataSet.HasChanges(DataRowState)
- uid: System.Data.DataSet.HasErrors
  parent: System.Data.DataSet
  isExternal: false
  name: HasErrors
  nameWithType: DataSet.HasErrors
  fullName: System.Data.DataSet.HasErrors
- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(Stream,String[])
  nameWithType: DataSet.InferXmlSchema(Stream,String[])
  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(TextReader,String[])
  nameWithType: DataSet.InferXmlSchema(TextReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(String,String[])
  nameWithType: DataSet.InferXmlSchema(String,String[])
  fullName: System.Data.DataSet.InferXmlSchema(String,String[])
- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(XmlReader,String[])
  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])
- uid: System.Data.DataSet.Initialized
  parent: System.Data.DataSet
  isExternal: false
  name: Initialized
  nameWithType: DataSet.Initialized
  fullName: System.Data.DataSet.Initialized
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Data.DataSet.InitializeDerivedDataSet
  parent: System.Data.DataSet
  isExternal: false
  name: InitializeDerivedDataSet()
  nameWithType: DataSet.InitializeDerivedDataSet()
  fullName: System.Data.DataSet.InitializeDerivedDataSet()
- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: IsBinarySerialized(SerializationInfo,StreamingContext)
  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.IsInitialized
  parent: System.Data.DataSet
  isExternal: false
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
  fullName: System.Data.DataSet.IsInitialized
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,String[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.DataSet.Locale
  parent: System.Data.DataSet
  isExternal: false
  name: Locale
  nameWithType: DataSet.Locale
  fullName: System.Data.DataSet.Locale
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Data.DataSet.Merge(System.Data.DataRow[])
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataRow[])
  nameWithType: DataSet.Merge(DataRow[])
  fullName: System.Data.DataSet.Merge(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.Merge(System.Data.DataSet)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet)
  nameWithType: DataSet.Merge(DataSet)
  fullName: System.Data.DataSet.Merge(DataSet)
- uid: System.Data.DataSet.Merge(System.Data.DataTable)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataTable)
  nameWithType: DataSet.Merge(DataTable)
  fullName: System.Data.DataSet.Merge(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet,Boolean)
  nameWithType: DataSet.Merge(DataSet,Boolean)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean)
- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataRow[],Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
- uid: System.Data.DataSet.MergeFailed
  parent: System.Data.DataSet
  isExternal: false
  name: MergeFailed
  nameWithType: DataSet.MergeFailed
  fullName: System.Data.DataSet.MergeFailed
- uid: System.Data.MergeFailedEventHandler
  parent: System.Data
  isExternal: false
  name: MergeFailedEventHandler
  nameWithType: MergeFailedEventHandler
  fullName: System.Data.MergeFailedEventHandler
- uid: System.Data.DataSet.Namespace
  parent: System.Data.DataSet
  isExternal: false
  name: Namespace
  nameWithType: DataSet.Namespace
  fullName: System.Data.DataSet.Namespace
- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataSet
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveRelation(DataRelation)
  nameWithType: DataSet.OnRemoveRelation(DataRelation)
  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)
- uid: System.Data.DataRelation
  parent: System.Data
  isExternal: false
  name: DataRelation
  nameWithType: DataRelation
  fullName: System.Data.DataRelation
- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveTable(DataTable)
  nameWithType: DataSet.OnRemoveTable(DataTable)
  fullName: System.Data.DataSet.OnRemoveTable(DataTable)
- uid: System.Data.DataSet.Prefix
  parent: System.Data.DataSet
  isExternal: false
  name: Prefix
  nameWithType: DataSet.Prefix
  fullName: System.Data.DataSet.Prefix
- uid: System.Data.DataSet.RaisePropertyChanging(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataSet.RaisePropertyChanging(String)
  fullName: System.Data.DataSet.RaisePropertyChanging(String)
- uid: System.Data.DataSet.ReadXml(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(Stream)
  nameWithType: DataSet.ReadXml(Stream)
  fullName: System.Data.DataSet.ReadXml(Stream)
- uid: System.Data.XmlReadMode
  parent: System.Data
  isExternal: false
  name: XmlReadMode
  nameWithType: XmlReadMode
  fullName: System.Data.XmlReadMode
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(TextReader)
  nameWithType: DataSet.ReadXml(TextReader)
  fullName: System.Data.DataSet.ReadXml(TextReader)
- uid: System.Data.DataSet.ReadXml(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(String)
  nameWithType: DataSet.ReadXml(String)
  fullName: System.Data.DataSet.ReadXml(String)
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(XmlReader)
  nameWithType: DataSet.ReadXml(XmlReader)
  fullName: System.Data.DataSet.ReadXml(XmlReader)
- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(Stream,XmlReadMode)
  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(TextReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(String,XmlReadMode)
  nameWithType: DataSet.ReadXml(String,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(XmlReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(Stream)
  nameWithType: DataSet.ReadXmlSchema(Stream)
  fullName: System.Data.DataSet.ReadXmlSchema(Stream)
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(TextReader)
  nameWithType: DataSet.ReadXmlSchema(TextReader)
  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)
- uid: System.Data.DataSet.ReadXmlSchema(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(String)
  nameWithType: DataSet.ReadXmlSchema(String)
  fullName: System.Data.DataSet.ReadXmlSchema(String)
- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataSet.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)
- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataSet.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)
- uid: System.Data.DataSet.RejectChanges
  parent: System.Data.DataSet
  isExternal: false
  name: RejectChanges()
  nameWithType: DataSet.RejectChanges()
  fullName: System.Data.DataSet.RejectChanges()
- uid: System.Data.DataSet.Relations
  parent: System.Data.DataSet
  isExternal: false
  name: Relations
  nameWithType: DataSet.Relations
  fullName: System.Data.DataSet.Relations
- uid: System.Data.DataRelationCollection
  parent: System.Data
  isExternal: false
  name: DataRelationCollection
  nameWithType: DataRelationCollection
  fullName: System.Data.DataRelationCollection
- uid: System.Data.DataSet.RemotingFormat
  parent: System.Data.DataSet
  isExternal: false
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
  fullName: System.Data.DataSet.RemotingFormat
- uid: System.Data.SerializationFormat
  parent: System.Data
  isExternal: false
  name: SerializationFormat
  nameWithType: SerializationFormat
  fullName: System.Data.SerializationFormat
- uid: System.Data.DataSet.Reset
  parent: System.Data.DataSet
  isExternal: false
  name: Reset()
  nameWithType: DataSet.Reset()
  fullName: System.Data.DataSet.Reset()
- uid: System.Data.DataSet.SchemaSerializationMode
  parent: System.Data.DataSet
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
  fullName: System.Data.DataSet.SchemaSerializationMode
- uid: System.Data.DataSet.ShouldSerializeRelations
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeRelations()
  nameWithType: DataSet.ShouldSerializeRelations()
  fullName: System.Data.DataSet.ShouldSerializeRelations()
- uid: System.Data.DataSet.ShouldSerializeTables
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeTables()
  nameWithType: DataSet.ShouldSerializeTables()
  fullName: System.Data.DataSet.ShouldSerializeTables()
- uid: System.Data.DataSet.Site
  parent: System.Data.DataSet
  isExternal: false
  name: Site
  nameWithType: DataSet.Site
  fullName: System.Data.DataSet.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Data.DataSet.Tables
  parent: System.Data.DataSet
  isExternal: false
  name: Tables
  nameWithType: DataSet.Tables
  fullName: System.Data.DataSet.Tables
- uid: System.Data.DataTableCollection
  parent: System.Data
  isExternal: false
  name: DataTableCollection
  nameWithType: DataTableCollection
  fullName: System.Data.DataTableCollection
- uid: System.Data.DataSet.WriteXml(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(Stream)
  nameWithType: DataSet.WriteXml(Stream)
  fullName: System.Data.DataSet.WriteXml(Stream)
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(TextWriter)
  nameWithType: DataSet.WriteXml(TextWriter)
  fullName: System.Data.DataSet.WriteXml(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.DataSet.WriteXml(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(String)
  nameWithType: DataSet.WriteXml(String)
  fullName: System.Data.DataSet.WriteXml(String)
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(XmlWriter)
  nameWithType: DataSet.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.WriteXml(XmlWriter)
- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)
- uid: System.Data.XmlWriteMode
  parent: System.Data
  isExternal: false
  name: XmlWriteMode
  nameWithType: XmlWriteMode
  fullName: System.Data.XmlWriteMode
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)
- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataSet.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(Stream)
  nameWithType: DataSet.WriteXmlSchema(Stream)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataSet.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)
- uid: System.Data.DataSet.WriteXmlSchema(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(String)
  nameWithType: DataSet.WriteXmlSchema(String)
  fullName: System.Data.DataSet.WriteXmlSchema(String)
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(Stream,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
- uid: System.Converter{System.Type,System.String}
  parent: System
  isExternal: false
  name: Converter<Type,String>
  nameWithType: Converter<Type,String>
  fullName: System.Converter<System.Type,System.String>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: Converter<System.Type,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(TextWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(String,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
- uid: System.Data.DataSet.#ctor*
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet
  nameWithType: DataSet.DataSet
- uid: System.Data.DataSet.AcceptChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: AcceptChanges
  nameWithType: DataSet.AcceptChanges
- uid: System.Data.DataSet.BeginInit*
  parent: System.Data.DataSet
  isExternal: false
  name: BeginInit
  nameWithType: DataSet.BeginInit
- uid: System.Data.DataSet.CaseSensitive*
  parent: System.Data.DataSet
  isExternal: false
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
- uid: System.Data.DataSet.Clear*
  parent: System.Data.DataSet
  isExternal: false
  name: Clear
  nameWithType: DataSet.Clear
- uid: System.Data.DataSet.Clone*
  parent: System.Data.DataSet
  isExternal: false
  name: Clone
  nameWithType: DataSet.Clone
- uid: System.Data.DataSet.Copy*
  parent: System.Data.DataSet
  isExternal: false
  name: Copy
  nameWithType: DataSet.Copy
- uid: System.Data.DataSet.CreateDataReader*
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader
  nameWithType: DataSet.CreateDataReader
- uid: System.Data.DataSet.DataSetName*
  parent: System.Data.DataSet
  isExternal: false
  name: DataSetName
  nameWithType: DataSet.DataSetName
- uid: System.Data.DataSet.DefaultViewManager*
  parent: System.Data.DataSet
  isExternal: false
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
- uid: System.Data.DataSet.DetermineSchemaSerializationMode*
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode
  nameWithType: DataSet.DetermineSchemaSerializationMode
- uid: System.Data.DataSet.EndInit*
  parent: System.Data.DataSet
  isExternal: false
  name: EndInit
  nameWithType: DataSet.EndInit
- uid: System.Data.DataSet.EnforceConstraints*
  parent: System.Data.DataSet
  isExternal: false
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
- uid: System.Data.DataSet.ExtendedProperties*
  parent: System.Data.DataSet
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
- uid: System.Data.DataSet.GetChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges
  nameWithType: DataSet.GetChanges
- uid: System.Data.DataSet.GetDataSetSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: GetDataSetSchema
  nameWithType: DataSet.GetDataSetSchema
- uid: System.Data.DataSet.GetObjectData*
  parent: System.Data.DataSet
  isExternal: false
  name: GetObjectData
  nameWithType: DataSet.GetObjectData
- uid: System.Data.DataSet.GetSchemaSerializable*
  parent: System.Data.DataSet
  isExternal: false
  name: GetSchemaSerializable
  nameWithType: DataSet.GetSchemaSerializable
- uid: System.Data.DataSet.GetSerializationData*
  parent: System.Data.DataSet
  isExternal: false
  name: GetSerializationData
  nameWithType: DataSet.GetSerializationData
- uid: System.Data.DataSet.GetXml*
  parent: System.Data.DataSet
  isExternal: false
  name: GetXml
  nameWithType: DataSet.GetXml
- uid: System.Data.DataSet.GetXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: GetXmlSchema
  nameWithType: DataSet.GetXmlSchema
- uid: System.Data.DataSet.HasChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges
  nameWithType: DataSet.HasChanges
- uid: System.Data.DataSet.HasErrors*
  parent: System.Data.DataSet
  isExternal: false
  name: HasErrors
  nameWithType: DataSet.HasErrors
- uid: System.Data.DataSet.InferXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema
  nameWithType: DataSet.InferXmlSchema
- uid: System.Data.DataSet.InitializeDerivedDataSet*
  parent: System.Data.DataSet
  isExternal: false
  name: InitializeDerivedDataSet
  nameWithType: DataSet.InitializeDerivedDataSet
- uid: System.Data.DataSet.IsBinarySerialized*
  parent: System.Data.DataSet
  isExternal: false
  name: IsBinarySerialized
  nameWithType: DataSet.IsBinarySerialized
- uid: System.Data.DataSet.IsInitialized*
  parent: System.Data.DataSet
  isExternal: false
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
- uid: System.Data.DataSet.Load*
  parent: System.Data.DataSet
  isExternal: false
  name: Load
  nameWithType: DataSet.Load
- uid: System.Data.DataSet.Locale*
  parent: System.Data.DataSet
  isExternal: false
  name: Locale
  nameWithType: DataSet.Locale
- uid: System.Data.DataSet.Merge*
  parent: System.Data.DataSet
  isExternal: false
  name: Merge
  nameWithType: DataSet.Merge
- uid: System.Data.DataSet.Namespace*
  parent: System.Data.DataSet
  isExternal: false
  name: Namespace
  nameWithType: DataSet.Namespace
- uid: System.Data.DataSet.OnPropertyChanging*
  parent: System.Data.DataSet
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataSet.OnPropertyChanging
- uid: System.Data.DataSet.OnRemoveRelation*
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveRelation
  nameWithType: DataSet.OnRemoveRelation
- uid: System.Data.DataSet.OnRemoveTable*
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveTable
  nameWithType: DataSet.OnRemoveTable
- uid: System.Data.DataSet.Prefix*
  parent: System.Data.DataSet
  isExternal: false
  name: Prefix
  nameWithType: DataSet.Prefix
- uid: System.Data.DataSet.RaisePropertyChanging*
  parent: System.Data.DataSet
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataSet.RaisePropertyChanging
- uid: System.Data.DataSet.ReadXml*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml
  nameWithType: DataSet.ReadXml
- uid: System.Data.DataSet.ReadXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema
  nameWithType: DataSet.ReadXmlSchema
- uid: System.Data.DataSet.ReadXmlSerializable*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSerializable
  nameWithType: DataSet.ReadXmlSerializable
- uid: System.Data.DataSet.RejectChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: RejectChanges
  nameWithType: DataSet.RejectChanges
- uid: System.Data.DataSet.Relations*
  parent: System.Data.DataSet
  isExternal: false
  name: Relations
  nameWithType: DataSet.Relations
- uid: System.Data.DataSet.RemotingFormat*
  parent: System.Data.DataSet
  isExternal: false
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
- uid: System.Data.DataSet.Reset*
  parent: System.Data.DataSet
  isExternal: false
  name: Reset
  nameWithType: DataSet.Reset
- uid: System.Data.DataSet.SchemaSerializationMode*
  parent: System.Data.DataSet
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
- uid: System.Data.DataSet.ShouldSerializeRelations*
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeRelations
  nameWithType: DataSet.ShouldSerializeRelations
- uid: System.Data.DataSet.ShouldSerializeTables*
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeTables
  nameWithType: DataSet.ShouldSerializeTables
- uid: System.Data.DataSet.Site*
  parent: System.Data.DataSet
  isExternal: false
  name: Site
  nameWithType: DataSet.Site
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList*
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Data.DataSet.Tables*
  parent: System.Data.DataSet
  isExternal: false
  name: Tables
  nameWithType: DataSet.Tables
- uid: System.Data.DataSet.WriteXml*
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml
  nameWithType: DataSet.WriteXml
- uid: System.Data.DataSet.WriteXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema
  nameWithType: DataSet.WriteXmlSchema
