### YamlMime:ManagedReference
items:
- uid: System.Web.Routing.PageRouteHandler
  id: PageRouteHandler
  children:
  - System.Web.Routing.PageRouteHandler.#ctor(System.String)
  - System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  - System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  - System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  - System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  - System.Web.Routing.PageRouteHandler.VirtualPath
  langs:
  - csharp
  name: PageRouteHandler
  nameWithType: PageRouteHandler
  fullName: System.Web.Routing.PageRouteHandler
  type: Class
  summary: "プロパティと物理ファイルに URL がどのようにマップを定義するためのメソッドを提供します。"
  remarks: "PageRouteHandler のインスタンスを渡す、<xref:System.Web.Routing.Route>物理ファイルの URL にマップするためにコンス トラクター</xref:System.Web.Routing.Route> 。 PageRouteHandler オブジェクトは、物理ファイルの仮想パスを指定し、物理 URL の承認規則がチェックされているかどうかを決定します。"
  syntax:
    content: 'public class PageRouteHandler : System.Web.Routing.IRouteHandler'
  inheritance:
  - System.Object
  implements:
  - System.Web.Routing.IRouteHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: PageRouteHandler(String)
  nameWithType: PageRouteHandler.PageRouteHandler(String)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.Routing.PageRouteHandler&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターを使用すると、<xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>プロパティに設定されている`true`</xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>。"
  syntax:
    content: public PageRouteHandler (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "この物理ファイルの仮想パス<xref:System.Web.Routing.RouteData.Route*>オブジェクト</xref:System.Web.Routing.RouteData.Route*>。 ファイルは、現在のアプリケーションである必要があります。 そのため、パスは、チルダ (~) で始める必要があります。"
  overload: System.Web.Routing.PageRouteHandler.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> virtualPath </code>パラメーターは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または空の文字列またはで始まっていない&quot;~/&quot;です。"
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: PageRouteHandler(String,Boolean)
  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.Routing.PageRouteHandler&quot;> </xref>クラスです。"
  remarks: "既定では、<xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>プロパティは`true`</xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>。 したがって、承認規則をルート URL を物理ページの URL の両方に適用する場合は、使用できます、<xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29>このコンス トラクターではなくコンス トラクター</xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29> 。"
  syntax:
    content: public PageRouteHandler (string virtualPath, bool checkPhysicalUrlAccess);
    parameters:
    - id: virtualPath
      type: System.String
      description: "この物理ファイルの仮想パス<xref:System.Web.Routing.RouteData.Route*>オブジェクト</xref:System.Web.Routing.RouteData.Route*>。 ファイルは、現在のアプリケーションである必要があります。 そのため、パスは、チルダ (~) で始める必要があります。"
    - id: checkPhysicalUrlAccess
      type: System.Boolean
      description: "このプロパティ設定されている場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>、要求 URL を除く、物理ページの URL 承認ルールが適用されます。 このプロパティ設定されている場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要求の URL の両方に、物理ページの URL に承認ルールが適用されます。"
  overload: System.Web.Routing.PageRouteHandler.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> virtualPath </code>パラメーターは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または空の文字列またはで始まっていない&quot;~/&quot;です。"
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  id: CheckPhysicalUrlAccess
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "物理ファイルの URL に承認規則が適用されるかどうかを決定する値を取得します。"
  remarks: "CheckPhysicalUrlAccess プロパティを設定するには、使用すると、<xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29>コンス トラクター</xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29> 。       CheckPhysicalUrlAccess プロパティの値を決定するかどうか、<xref:System.Web.Routing.PageRouteHandler>オブジェクトはルートの URL に対してのみ、または物理的なページとルート URL の両方のセキュリティ アクセス許可を確認します</xref:System.Web.Routing.PageRouteHandler>。       CheckPhysicalUrlAccess プロパティに設定するときに`true`(既定値は、)、ユーザーはルートの URL と物理の URL の両方にアクセスする権限が必要です。 CheckPhysicalUrlAccess プロパティに設定するときに`false`へのルート URL のアクセス許可のみを要求、および物理 URL に対する権限はチェックされません。       アクセス許可は、次の例のように、Web.config ファイルで定義されて:```   <configuration>     <location path=&quot;categoriespage.aspx&quot;>       <system.web>         <authorization>           <allow roles=&quot;admin&quot;/>           <deny users=&quot;*&quot;/>         </authorization>       </system.web>     </location>     <location path=&quot;category&quot;>       <system.web>         <authorization>           <allow users=&quot;*&quot;/>         </authorization>       </system.web>     </location>   </configuration>   ```を含む要求 URL の`Category/food/show`ルートの URL パターンがある場合、ドメイン名の後に`Category/{action}/{categoryName}`であり、物理ページ Categoriespage.aspx、 [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] 、次の方法のいずれかで、前の例で定義されているアクセス許可の適用: CheckPhysicalUrlAccess プロパティがの場合 - `false`、すべてのユーザーのアクセスが付与されて、すべてのユーザーがアクセスを許可で始まる URL パターン`category`です。      -プロパティの場合、CheckPhysicalUrlAccess `true`、のみ`admin`ユーザー アクセスが付与されます。 始まる URL パターンにすべてのユーザーがアクセス`category`、のみが`admin`Categoriespage.aspx の物理ページにユーザーにアクセスします。"
  syntax:
    content: public bool CheckPhysicalUrlAccess { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ルートに関連付けられている物理ファイルの URL の承認がオンの場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  id: GetHttpHandler(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: GetHttpHandler(RequestContext)
  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "要求を処理するオブジェクトを返します。"
  syntax:
    content: public virtual System.Web.IHttpHandler GetHttpHandler (System.Web.Routing.RequestContext requestContext);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: "要求に関する情報をカプセル化するオブジェクト。"
    return:
      type: System.Web.IHttpHandler
      description: "要求を処理するオブジェクト。"
  overload: System.Web.Routing.PageRouteHandler.GetHttpHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  id: GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: GetSubstitutedVirtualPath(RequestContext)
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "置換パラメーター置換が適用された後は、ルートの物理ファイルの仮想パスを返します。"
  remarks: "場合、<xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>値がすべての置換パラメーターを含まない、GetSubstitutedVirtualPath メソッドとして同じ値を返します、<xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>プロパティ</xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A></xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>。"
  syntax:
    content: public string GetSubstitutedVirtualPath (System.Web.Routing.RequestContext requestContext);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: "要求に関する情報をカプセル化するオブジェクト。"
    return:
      type: System.String
      description: "ルートから生成された物理ファイルの URL です。"
  overload: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.VirtualPath
  id: VirtualPath
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
  fullName: System.Web.Routing.PageRouteHandler.VirtualPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "このルートに関連付けられている Web ページの仮想パスを取得します。"
  remarks: "VirtualPath プロパティで設定する、<xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>コンス トラクターまたは、<xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>コンス トラクター</xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> </xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> 。"
  syntax:
    content: public string VirtualPath { get; }
    return:
      type: System.String
      description: "置き換えが置換パラメーターに対して適用される前に、Web ページの URL です。"
  overload: System.Web.Routing.PageRouteHandler.VirtualPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler(String)
  nameWithType: PageRouteHandler.PageRouteHandler(String)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler(String,Boolean)
  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetHttpHandler(RequestContext)
  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)
- uid: System.Web.IHttpHandler
  parent: System.Web
  isExternal: false
  name: IHttpHandler
  nameWithType: IHttpHandler
  fullName: System.Web.IHttpHandler
- uid: System.Web.Routing.RequestContext
  parent: System.Web.Routing
  isExternal: true
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.Web.Routing.RequestContext
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetSubstitutedVirtualPath(RequestContext)
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
- uid: System.Web.Routing.PageRouteHandler.VirtualPath
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
  fullName: System.Web.Routing.PageRouteHandler.VirtualPath
- uid: System.Web.Routing.PageRouteHandler.#ctor*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler
  nameWithType: PageRouteHandler.PageRouteHandler
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetHttpHandler
  nameWithType: PageRouteHandler.GetHttpHandler
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetSubstitutedVirtualPath
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath
- uid: System.Web.Routing.PageRouteHandler.VirtualPath*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
