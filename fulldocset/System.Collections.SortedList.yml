### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  id: SortedList
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  summary: "キーにより並べ替えられた、インデックス キーにアクセスできるキー/値ペアのコレクションを表します。"
  remarks: "このコレクションの汎用バージョン、 <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>。</xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>を参照してください。       SortedList 要素は、いずれかで、要素と同様に、キーを使用してアクセスできる<xref:System.Collections.IDictionary>実装、またはいずれかの要素と同様に、インデックスを使用して<xref:System.Collections.IList>実装</xref:System.Collections.IList></xref:System.Collections.IDictionary>。       SortedList オブジェクトが内部的に、リストの要素を格納する&2; つの配列を保持します。1 つ配列は、キーと関連付けられている値を別の配列。 各要素は、キー/値ペアとしてアクセスできる、<xref:System.Collections.DictionaryEntry>オブジェクト</xref:System.Collections.DictionaryEntry>。 キーには`null`値を指定できますが、します。       SortedList オブジェクトの容量とは、SortedList に格納できる要素の数です。 SortedList に要素が追加されるため、容量を増やすは自動的に再割り当て、必要に応じて。 呼び出すことによって、容量を削減できる<xref:System.Collections.SortedList.TrimToSize%2A>かを設定して、<xref:System.Collections.SortedList.Capacity%2A>プロパティに明示的にします</xref:System.Collections.SortedList.Capacity%2A></xref:System.Collections.SortedList.TrimToSize%2A>。       SortedList オブジェクトの非常に大きい場合は、設定して、64 ビット システム上の 20億要素に最大の容量を増やすことができます、`enabled`構成要素の属性`true`実行時環境でします。       SortedList オブジェクトの要素のキーに基づいて並べ替えられますか特定に従って<xref:System.Collections.IComparer>、SortedList が作成されるとき、またはによると指定された実装、<xref:System.IComparable>キー自体で提供される実装</xref:System.IComparable></xref:System.Collections.IComparer>。 どちらの場合、SortedList に重複するキーは許可されません。       インデックス順序は、並べ替え順序に基づいています。 要素が追加されると、SortedList に正しい並べ替え順序で挿入され、それに応じてインデックス調整します。 要素が削除されると、インデックス作成もそれに応じて調整します。 そのため、要素が追加または SortedList オブジェクトから削除される、特定のキー/値ペアのインデックスを変更する可能性があります。       操作よりも遅いと思われる傾向がありますの SortedList オブジェクトの操作、<xref:System.Collections.Hashtable>並べ替えを行うためのオブジェクト</xref:System.Collections.Hashtable>。 ただし、SortedList では、関連するキーまたはインデックスのいずれかの値へのアクセスを許可して柔軟性を提供します。       このコレクション内の要素は、整数インデックスを使用してアクセスできます。  このコレクションのインデックスは&0; から始まります。       `foreach` C# 言語のステートメント (`for each` Visual Basic で)、コレクション内の要素の型のオブジェクトを返します。 SortedList オブジェクトの各要素が、キー/値ペアであるため、要素の型は、キーの型または値の型。 代わりに、要素の型は、 <xref:System.Collections.DictionaryEntry>。</xref:System.Collections.DictionaryEntry> 例: [!code-cpp[クラシック SortedList 例&2;](~/add/codesnippet/cpp/t-system.collections.sor_1.cpp)][!code-cs[クラシック SortedList 例&2;](~/add/codesnippet/csharp/t-system.collections.sor_1.cs)][!code-vb[クラシック SortedList 例&2;](~/add/codesnippet/visualbasic/t-system.collections.sor_1.vb) ] 、`foreach`ステートメントは、コレクションには書き込めませんから読み取りのみが使用できる列挙子のラッパー。    "
  example:
  - "The following code example shows how to create and initialize a SortedList object and how to print out its keys and values.  \n  \n [!code-cpp[Classic SortedList Example#1](~/add/codesnippet/cpp/t-system.collections.sor_2.cpp)]\n [!code-cs[Classic SortedList Example#1](~/add/codesnippet/csharp/t-system.collections.sor_2.cs)]\n [!code-vb[Classic SortedList Example#1](~/add/codesnippet/visualbasic/t-system.collections.sor_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortedList : ICloneable, System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>が空で、クラスが既定の初期量を備え、に従って並べ替えられます、<xref:System.IComparable>に追加された各キーによって実装されるインターフェイス、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト</xref:System.IComparable>。"
  remarks: "各キーを実装する必要があります、<xref:System.IComparable>内の他のすべてのキーの比較ができるようにするインターフェイス、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList></xref:System.IComparable>。 要素は、<xref:System.IComparable>各キー <xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>に追加の実装</xref:System.IComparable>では、に従って並べ替えられます       容量、<xref:System.Collections.SortedList>オブジェクトは、要素の数を<xref:System.Collections.SortedList>を保持できます</xref:System.Collections.SortedList></xref:System.Collections.SortedList>。 要素が追加されるにつれて、 <xref:System.Collections.SortedList>、容量は自動的に増加内部の配列を再割り当てによる要求どおり</xref:System.Collections.SortedList>。       コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       このコンス トラクターは、o (1) 操作です。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_7_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_7_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_7_1.cpp)]"
  syntax:
    content: public SortedList ();
    parameters: []
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>が空で、クラスが既定の初期量を備えされ、並べ替えは、指定に従って<xref:System.Collections.IComparer>インターフェイス</xref:System.Collections.IComparer>。"
  remarks: "要素は、指定に従って<xref:System.Collections.IComparer>実装</xref:System.Collections.IComparer>。 場合、`comparer`パラメーターは`null`、<xref:System.IComparable>各キーによって実装が使用されますしたがって、各キーを実装する必要があります、<xref:System.IComparable>内の他のすべてのキーの比較ができるようにするインターフェイス、<xref:System.Collections.SortedList>オブジェクト。</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable> 。       容量、<xref:System.Collections.SortedList>オブジェクトは、要素の数を<xref:System.Collections.SortedList>を保持できます</xref:System.Collections.SortedList></xref:System.Collections.SortedList>。 要素が追加されるにつれて、 <xref:System.Collections.SortedList>、容量は自動的に増加内部の配列を再割り当てによる要求どおり</xref:System.Collections.SortedList>。       コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       このコンス トラクターは、o (1) 操作です。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_18_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_18_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_18_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>キーを比較するときに使用する実装</xref:System.Collections.IComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>を使用する、<xref:System.IComparable>各キーによって実装されます</xref:System.IComparable>。"
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>指定されたディクショナリからコピーされた要素を含むクラスは、コピーした要素の数と同じ初期量を備えたし、に従って並べ替えられます、<xref:System.IComparable>各キーによって実装されるインターフェイス</xref:System.IComparable>。"
  remarks: "各キーを実装する必要があります、<xref:System.IComparable>内の他のすべてのキーの比較ができるようにするインターフェイス、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList></xref:System.IComparable>。 要素は、<xref:System.IComparable>各キー <xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>に追加の実装</xref:System.IComparable>では、に従って並べ替えられます       A<xref:System.Collections.Hashtable>オブジェクトの例に示します、<xref:System.Collections.IDictionary>このコンス トラクターに渡すことができる実装</xref:System.Collections.IDictionary></xref:System.Collections.Hashtable>。 新しい<xref:System.Collections.SortedList>オブジェクトには、キーと<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>に格納されている値のコピーが含まれています。</xref:System.Collections.SortedList>       容量、<xref:System.Collections.SortedList>オブジェクトは、要素の数を<xref:System.Collections.SortedList>を保持できます</xref:System.Collections.SortedList></xref:System.Collections.SortedList>。 要素が追加されるにつれて、 <xref:System.Collections.SortedList>、容量は自動的に増加内部の配列を再割り当てによる要求どおり</xref:System.Collections.SortedList>。       コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       このコンス トラクターは、O (`n`) 操作では、ここで`n`内の要素の数は、`d`です。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.sor_9_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.sor_9_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.sor_9_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>実装を新しいコピーを<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクト</xref:System.Collections.IDictionary>。"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "1 つまたは複数の要素で<code> d </code>を実装していない、<xref:System.IComparable>インターフェイス</xref:System.IComparable>。"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>が空で、クラスが、指定した初期量、およびに従って並べ替えられます、<xref:System.IComparable>を追加、各キーによって実装されるインターフェイス、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト</xref:System.IComparable>。"
  remarks: "各キーを実装する必要があります、<xref:System.IComparable>内の他のすべてのキーの比較ができるようにするインターフェイス、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList></xref:System.IComparable>。 要素は、<xref:System.IComparable>各キー <xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>に追加の実装</xref:System.IComparable>では、に従って並べ替えられます       容量、<xref:System.Collections.SortedList>オブジェクトは、要素の数を<xref:System.Collections.SortedList>を保持できます</xref:System.Collections.SortedList></xref:System.Collections.SortedList>。 要素が追加されるにつれて、 <xref:System.Collections.SortedList>、容量は自動的に増加内部の配列を再割り当てによる要求どおり</xref:System.Collections.SortedList>。       コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       このコンス トラクターは、O (`n`) 操作では、ここで`n`は`initialCapacity`します。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.sor_15_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.sor_15_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.sor_15_1.cpp)]"
  syntax:
    content: public SortedList (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "最初の要素数を<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクトを含めることができます。"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>0 未満です。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "作成する十分なメモリがない、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>指定したオブジェクト<code> initialCapacity</code>です。"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>が空で、クラスが指定した初期量を備えされ、並べ替えは、指定に従って<xref:System.Collections.IComparer>インターフェイス</xref:System.Collections.IComparer>。"
  remarks: "要素は、指定に従って<xref:System.Collections.IComparer>実装</xref:System.Collections.IComparer>。 場合、`comparer`パラメーターは`null`、<xref:System.IComparable>各キーによって実装が使用されますしたがって、各キーを実装する必要があります、<xref:System.IComparable>内の他のすべてのキーの比較ができるようにするインターフェイス、<xref:System.Collections.SortedList>オブジェクト。</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable> 。       容量、<xref:System.Collections.SortedList>オブジェクトは、要素の数を<xref:System.Collections.SortedList>を保持できます</xref:System.Collections.SortedList></xref:System.Collections.SortedList>。 要素が追加されるにつれて、 <xref:System.Collections.SortedList>、容量は自動的に増加内部の配列を再割り当てによる要求どおり</xref:System.Collections.SortedList>。       コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       このコンス トラクターは、O (`n`) 操作では、ここで`n`は`capacity`します。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/1806b376-56fc-45e2-aff7-_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/1806b376-56fc-45e2-aff7-_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/1806b376-56fc-45e2-aff7-_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer, int capacity);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>キーを比較するときに使用する実装</xref:System.Collections.IComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>を使用する、<xref:System.IComparable>各キーによって実装されます</xref:System.IComparable>。"
    - id: capacity
      type: System.Int32
      description: "最初の要素数を<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクトを含めることができます。"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>0 未満です。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "作成する十分なメモリがない、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>指定したオブジェクト<code> capacity</code>です。"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>を指定したディクショナリからコピーされた要素を含むクラスが、コピーした要素の数と同じ初期量を備えたされ、並べ替えは、指定に従って<xref:System.Collections.IComparer>インターフェイス</xref:System.Collections.IComparer>。"
  remarks: "要素は、指定に従って<xref:System.Collections.IComparer>実装</xref:System.Collections.IComparer>。 場合、`comparer`パラメーターは`null`、<xref:System.IComparable>各キーによって実装が使用されますしたがって、各キーを実装する必要があります、<xref:System.IComparable>内の他のすべてのキーの比較ができるようにするインターフェイス、<xref:System.Collections.SortedList>オブジェクト。</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable> 。       A<xref:System.Collections.Hashtable>オブジェクトの例に示します、<xref:System.Collections.IDictionary>このコンス トラクターに渡すことができる実装</xref:System.Collections.IDictionary></xref:System.Collections.Hashtable>。 新しい<xref:System.Collections.SortedList>オブジェクトには、キーと<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>に格納されている値のコピーが含まれています。</xref:System.Collections.SortedList>       容量、<xref:System.Collections.SortedList>オブジェクトは、要素の数を<xref:System.Collections.SortedList>を保持できます</xref:System.Collections.SortedList></xref:System.Collections.SortedList>。 要素が追加されるにつれて、 <xref:System.Collections.SortedList>、容量は自動的に増加内部の配列を再割り当てによる要求どおり</xref:System.Collections.SortedList>。       コレクションのサイズを推定できる場合に要素を追加するときにサイズ変更操作の数を実行する必要があるの初期量を指定する、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       このコンス トラクターは、O (`n`) 操作では、ここで`n`内の要素の数は、`d`です。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/653e16d8-524e-4544-8674-_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/653e16d8-524e-4544-8674-_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/653e16d8-524e-4544-8674-_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>実装を新しいコピーを<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクト</xref:System.Collections.IDictionary>。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>キーを比較するときに使用する実装</xref:System.Collections.IComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>を使用する、<xref:System.IComparable>各キーによって実装されます</xref:System.IComparable>。"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>comparer</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、および&1; つまたは複数の要素に<code>d</code>を実装していない、<xref:System.IComparable>インターフェイスです。"
  platform:
  - net462
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定したキーと値を持つ要素を追加、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "カーソルは、比較演算子を選択すると、明示的にまたは既定では、いずれかで決まるときに、<xref:System.Collections.SortedList>オブジェクトが作成されました</xref:System.Collections.SortedList>。       場合<xref:System.Collections.SortedList.Count%2A>既に等しい<xref:System.Collections.SortedList.Capacity%2A>、容量、<xref:System.Collections.SortedList>オブジェクトが内部の配列を自動的に再割り当て増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Capacity%2A></xref:System.Collections.SortedList.Count%2A>。       使用することも、<xref:System.Collections.SortedList.Item%2A>でキーの値を設定して、新しい要素を追加するプロパティが存在しません、<xref:System.Collections.SortedList>オブジェクト (たとえば、 `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Item%2A> ただしで指定したキーが既に存在する場合、 <xref:System.Collections.SortedList>、設定、<xref:System.Collections.SortedList.Item%2A>プロパティに古い値が上書きされます</xref:System.Collections.SortedList.Item%2A></xref:System.Collections.SortedList>。 これに対し、追加のメソッドでは、既存の要素は変更しません。       要素、<xref:System.Collections.SortedList>オブジェクトは、キーにより並べ替えられたいずれかに従って、特定<xref:System.Collections.IComparer>実装では、ときに指定された、<xref:System.Collections.SortedList>が作成されたかに応じて、<xref:System.IComparable>キー自体で提供される実装</xref:System.IComparable></xref:System.Collections.SortedList></xref:System.Collections.IComparer></xref:System.Collections.SortedList>。       キーには`null`値を指定できますが、します。       このメソッドは、O (`n`)、並べ替えられていないデータの操作を`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>には これは、O (ログ`n`) 操作の場合は、新しい要素は、リストの末尾に追加します。 カーソルでは、サイズ変更が発生する場合、操作は O (`n`)。"
  example:
  - "The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.sor_4_1.cpp)]\n [!code-vb[Classic SortedList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_4_1.vb)]\n [!code-cs[Classic SortedList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.sor_4_1.cs)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "追加する要素のキー。"
    - id: value
      type: System.Object
      description: "追加する要素の値。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.SortedList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定した要素<code> key </code>に既に存在する、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。       - または -、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>を使用する設定、<xref:System.IComparable>インターフェイス、および<code> key </code>を実装しません、<xref:System.IComparable>インターフェイス</xref:System.IComparable></xref:System.IComparable>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>のサイズが固定されています。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "要素を追加するための十分な使用可能なメモリがない、 <xref href=&quot;System.Collections.SortedList&quot;></xref>です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比較演算子は、例外をスローします。"
  platform:
  - net462
- uid: System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得または設定の容量、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "容量は、要素の数を<xref:System.Collections.SortedList>オブジェクトを格納できます</xref:System.Collections.SortedList>。 <xref:System.Collections.SortedList.Count%2A>実際に<xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>内にある要素の数です。</xref:System.Collections.SortedList.Count%2A>       容量は、常に<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>以上 場合<xref:System.Collections.SortedList.Count%2A>要素を追加中に容量を超えています、容量は前の要素をコピーして、新しい要素を追加する前に、内部配列の再割り当てによって自動的に増加します</xref:System.Collections.SortedList.Count%2A>。       呼び出すことによって、容量を削減できる<xref:System.Collections.SortedList.TrimToSize%2A>または容量プロパティを明示的に設定します</xref:System.Collections.SortedList.TrimToSize%2A>。 容量の値が明示的に設定されている場合、内部配列が指定した容量に合わせても再割り当てされます。       このプロパティの値を取得する場合は、o (1) 操作です。O は、プロパティの設定 (`n`) 操作、場所`n`新しい容量します。"
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "要素の数を<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクトを含めることができます。"
  overload: System.Collections.SortedList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "割り当てられている値が現在の要素数より小さい、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "システムでメモリ不足がありません。"
  platform:
  - net462
- uid: System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "すべての要素を削除する<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Collections.SortedList.Count%2A>0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。</xref:System.Collections.SortedList.Count%2A>       <xref:System.Collections.SortedList.Capacity%2A>変更されません。</xref:System.Collections.SortedList.Capacity%2A> 容量をリセットする、<xref:System.Collections.SortedList>オブジェクトを呼び出す<xref:System.Collections.SortedList.TrimToSize%2A>設定や、<xref:System.Collections.SortedList.Capacity%2A>プロパティを直接</xref:System.Collections.SortedList.Capacity%2A></xref:System.Collections.SortedList.TrimToSize%2A></xref:System.Collections.SortedList>。 空のトリミング<xref:System.Collections.SortedList>のキャパシティを設定、<xref:System.Collections.SortedList>を既定の容量</xref:System.Collections.SortedList></xref:System.Collections.SortedList>。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_14_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_14_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_14_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.SortedList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトは読み取り専用です。       - または -、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "簡易コピーを作成、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "参照型または値の型が参照先のオブジェクトはコピーされないかどうか、コレクションの簡易コピーは、コレクションの要素のみをコピーします。 新しいコレクション内の参照は、元のコレクション内の参照をポイントする同じオブジェクトをポイントします。       これに対し、コレクションのディープ コピーされた要素をコピーして、要素が直接または間接的に参照するすべてです。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "簡易コピー、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  overload: System.Collections.SortedList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "決定するかどうか、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトには、特定のキーが含まれています。"
  remarks: "要素、<xref:System.Collections.SortedList>オブジェクトは、キーにより並べ替えられたいずれかに従って、特定<xref:System.Collections.IComparer>実装では、ときに指定された、<xref:System.Collections.SortedList>が作成されたかに応じて、<xref:System.IComparable>キー自体で提供される実装</xref:System.IComparable></xref:System.Collections.SortedList></xref:System.Collections.IComparer></xref:System.Collections.SortedList>。       実装して<xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>。</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>が含まれています <xref:System.Collections.SortedList.ContainsKey%2A>。</xref:System.Collections.SortedList.ContainsKey%2A>とまったく同じように動作します。       このメソッドは、バイナリ検索アルゴリズムを使用します。そのため、このメソッドは、O (ログ`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_12_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_12_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "内で検索するキー、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトには、指定した要素が含まれています。 <code> key </code>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.SortedList.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比較演算子は、例外をスローします。"
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "決定するかどうか、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトには、特定のキーが含まれています。"
  remarks: "要素、<xref:System.Collections.SortedList>オブジェクトは、キーにより並べ替えられたいずれかに従って、特定<xref:System.Collections.IComparer>実装では、ときに指定された、<xref:System.Collections.SortedList>が作成されたかに応じて、<xref:System.IComparable>キー自体で提供される実装</xref:System.IComparable></xref:System.Collections.SortedList></xref:System.Collections.IComparer></xref:System.Collections.SortedList>。       このメソッドの動作とまったく同じ、<xref:System.Collections.SortedList.Contains%2A>メソッド</xref:System.Collections.SortedList.Contains%2A>。       このメソッドは、バイナリ検索アルゴリズムを使用します。そのため、このメソッドは、O (ログ`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_16_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_16_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_16_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "内で検索するキー、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトには、指定した要素が含まれています。 <code> key </code>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.SortedList.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比較演算子は、例外をスローします。"
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "決定かどうか、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトには、特定の値が含まれています。"
  remarks: "要素の値、<xref:System.Collections.SortedList>オブジェクトを使用して、指定した値と比較されます、<xref:System.Object.Equals%2A>メソッド</xref:System.Object.Equals%2A></xref:System.Collections.SortedList>。       このメソッドは、一方向の検索を実行します。したがって、平均実行時間は<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>に比例して つまり、このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_0_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_0_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_0_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "内で検索する値、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトには、指定した要素が含まれています。 <code> value </code>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.SortedList.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "コピー <xref href=&quot;System.Collections.SortedList&quot;> </xref>要素を&1; 次元<xref:System.Array>オブジェクト、配列の指定したインデックスから始まります</xref:System.Array>。"
  remarks: "キー/値ペアがコピーされた、<xref:System.Array>オブジェクトを列挙子が反復処理する順序と同じ順序で、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList></xref:System.Array>。       内のキーのみをコピーする、<xref:System.Collections.SortedList>を使用して`SortedList.Keys.CopyTo`</xref:System.Collections.SortedList>。       値だけをコピーする、<xref:System.Collections.SortedList>を使用して`SortedList.Values.CopyTo`</xref:System.Collections.SortedList>。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、"
  example:
  - "The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \n  \n [!code-cs[Classic SortedList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sor_20_1.cs)]\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sor_20_1.cpp)]\n [!code-vb[Classic SortedList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_20_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "1 次元<xref:System.Array>のコピー先であるオブジェクトを<xref:System.Collections.DictionaryEntry>からコピーされるオブジェクト<xref href=&quot;System.Collections.SortedList&quot;> </xref></xref:System.Collections.DictionaryEntry> </xref:System.Array> 。 <xref:System.Array>0 から始まるインデックス番号が必要です</xref:System.Array>。"
    - id: arrayIndex
      type: System.Int32
      description: "内の&0; から始まるインデックス`array`コピーの開始位置。"
  overload: System.Collections.SortedList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>0 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>多次元です。       - または - ソース内の要素の数<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクトがから利用可能な領域よりも大きい<code>arrayIndex</code>変換先の末尾に<code>array</code>です。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "ソースの種類<xref href=&quot;System.Collections.SortedList&quot;></xref>変換先の型に自動的にキャストすることはできません<code> array</code>です。"
  platform:
  - net462
- uid: System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "含まれる要素の数を取得、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "各要素は、キー/値ペアとしてアクセスできる、<xref:System.Collections.DictionaryEntry>オブジェクト</xref:System.Collections.DictionaryEntry>。       <xref:System.Collections.SortedList.Capacity%2A>要素の数を<xref:System.Collections.SortedList>オブジェクトを格納できます</xref:System.Collections.SortedList>。</xref:System.Collections.SortedList.Capacity%2A> 数は実際に<xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>内にある要素の数       <xref:System.Collections.SortedList.Capacity%2A>大きいか等しい数には常にします。</xref:System.Collections.SortedList.Capacity%2A> 数を超える場合<xref:System.Collections.SortedList.Capacity%2A>要素を追加するには、中に容量が前の要素をコピーし、新しい要素を追加する前に、内部配列の再割り当てによって自動的に増加します</xref:System.Collections.SortedList.Capacity%2A>。       このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "含まれる要素の数、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  overload: System.Collections.SortedList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定したインデックス位置の値を取得、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "インデックス順序は、並べ替え順序に基づいています。 挿入される要素が追加されると、<xref:System.Collections.SortedList>正しい並べ替えの順序、およびインデックス作成もそれに応じて調整します</xref:System.Collections.SortedList>。 要素が削除されると、インデックス作成もそれに応じて調整します。 要素が追加または削除、したがって、特定のキー/値ペアのインデックスを変更可能性があります、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       このメソッドは、o (1) 操作です。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_8_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_8_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_8_1.vb)]"
  syntax:
    content: public virtual object GetByIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "取得する値の&0; から始まるインデックス。"
    return:
      type: System.Object
      description: "指定したインデックスにある値、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  overload: System.Collections.SortedList.GetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>有効なインデックスの範囲外である、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  platform:
  - net462
- uid: System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返します、<xref:System.Collections.IDictionaryEnumerator>を反復処理するオブジェクト、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト</xref:System.Collections.IDictionaryEnumerator>。"
  remarks: "`foreach` C# 言語のステートメント (`for each` Visual Basic で)、列挙子の複雑さが隠されています。  したがってを使用して`foreach`列挙子を直接操作せずにお勧めします。       列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。       最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。 <xref:System.Collections.IEnumerator.Reset%2A>列挙子をこの位置に戻さ点もあります。</xref:System.Collections.IEnumerator.Reset%2A>  この位置にある<xref:System.Collections.IEnumerator.Current%2A>が定義されていません</xref:System.Collections.IEnumerator.Current%2A>。 したがって、 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.Current%2A>の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに</xref:System.Collections.IEnumerator.MoveNext%2A>呼び出す必要があります。       <xref:System.Collections.IEnumerator.Current%2A>いずれかのまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>と呼びます</xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.IEnumerator.Current%2A>次の要素にします</xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>       場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`</xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`</xref:System.Collections.IEnumerator.MoveNext%2A>。 最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 <xref:System.Collections.IEnumerator.Current%2A>再度、コレクションの最初の要素を<xref:System.Collections.IEnumerator.Reset%2A><xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>続けて</xref:System.Collections.IEnumerator.Reset%2A>を呼び出すことができます</xref:System.Collections.IEnumerator.Current%2A>を設定するには       コレクションが変更されない限り、列挙子は有効です。 コレクションの変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子は回復不可能とその動作は未定義です。       列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。  列挙中にスレッドの安全性を保証するためには、列挙中にコレクションをロックできます。  読み取りと書き込みの複数のスレッドがアクセスするコレクションを許可するのには、独自に同期を実装する必要があります。       このメソッドは、o (1) 操作です。"
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "<xref:System.Collections.IDictionaryEnumerator>オブジェクトに対して、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト</xref:System.Collections.IDictionaryEnumerator>。"
  overload: System.Collections.SortedList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定したインデックス位置のキーを取得、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "インデックス順序は、並べ替え順序に基づいています。 挿入される要素が追加されると、<xref:System.Collections.SortedList>正しい並べ替えの順序、およびインデックス作成もそれに応じて調整します</xref:System.Collections.SortedList>。 要素が削除されると、インデックス作成もそれに応じて調整します。 要素が追加または削除、したがって、特定のキー/値ペアのインデックスを変更可能性があります、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       このメソッドは、o (1) 操作です。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_19_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_19_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_19_1.vb)]"
  syntax:
    content: public virtual object GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "取得するキーの&0; から始まるインデックス。"
    return:
      type: System.Object
      description: "指定したインデックスにあるキーを<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクト。"
  overload: System.Collections.SortedList.GetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>有効なインデックスの範囲外である、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  platform:
  - net462
- uid: System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "内のキーを取得する<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクト。"
  remarks: "返された<xref:System.Collections.IList>オブジェクトは、キーの読み取り専用ビュー、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList></xref:System.Collections.IList>。 基になる<xref:System.Collections.SortedList><xref:System.Collections.IList>。</xref:System.Collections.IList>すぐに反映されます</xref:System.Collections.SortedList>への変更       <xref:System.Collections.IList> <xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>のキーと同じ順序で並べ替えられて</xref:System.Collections.IList>返されるの要素       このメソッドがに似ていますが、<xref:System.Collections.SortedList.Keys%2A>プロパティが返されます、<xref:System.Collections.IList>オブジェクトの代わりに、<xref:System.Collections.ICollection>オブジェクト</xref:System.Collections.ICollection></xref:System.Collections.IList></xref:System.Collections.SortedList.Keys%2A>。       このメソッドは、o (1) 操作です。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_1_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetKeyList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>オブジェクト内のキーを含む、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト</xref:System.Collections.IList>。"
  overload: System.Collections.SortedList.GetKeyList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "内の値を取得、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "返された<xref:System.Collections.IList>オブジェクトは、の値の読み取り専用ビュー、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList></xref:System.Collections.IList>。 基になる<xref:System.Collections.SortedList><xref:System.Collections.IList>。</xref:System.Collections.IList>すぐに反映されます</xref:System.Collections.SortedList>への変更       <xref:System.Collections.IList> <xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>の値と同じ順序で並べ替えられて</xref:System.Collections.IList>返されるの要素       このメソッドがに似ていますが、<xref:System.Collections.SortedList.Values%2A>プロパティが返されます、<xref:System.Collections.IList>オブジェクトの代わりに、<xref:System.Collections.ICollection>オブジェクト</xref:System.Collections.ICollection></xref:System.Collections.IList></xref:System.Collections.SortedList.Values%2A>。       このメソッドは、o (1) 操作です。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_11_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_11_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_11_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetValueList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>オブジェクトの値を含む、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト</xref:System.Collections.IList>。"
  overload: System.Collections.SortedList.GetValueList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定されたキーの&0; から始まるインデックスを返します、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "要素、<xref:System.Collections.SortedList>オブジェクトは、キーにより並べ替えられたいずれかに従って、特定<xref:System.Collections.IComparer>実装では、ときに指定された、<xref:System.Collections.SortedList>が作成された、またはそれに対応する、<xref:System.IComparable>キー自体で提供される実装</xref:System.IComparable></xref:System.Collections.SortedList></xref:System.Collections.IComparer></xref:System.Collections.SortedList>。       インデックス順序は、並べ替え順序に基づいています。 挿入される要素が追加されると、<xref:System.Collections.SortedList>正しい並べ替えの順序、およびインデックス作成もそれに応じて調整します</xref:System.Collections.SortedList>。 要素が削除されると、インデックス作成もそれに応じて調整します。 要素が追加または<xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>から削除されるため、特定のキー/値ペアのインデックスを変更可能性があります。       このメソッドは、バイナリ検索アルゴリズムを使用します。そのため、このメソッドは、O (ログ`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_2_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_2_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_2_1.cs)]"
  syntax:
    content: public virtual int IndexOfKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "内で検索するキー、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
    return:
      type: System.Int32
      description: "0 から始まるインデックス、 <code> key </code>パラメーター場合<code> key </code>で見つかった、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトです。 それ以外の場合、-1。"
  overload: System.Collections.SortedList.IndexOfKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比較演算子は、例外をスローします。"
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定した値の最初に見つかった位置の&0; から始まるインデックスを返します、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "インデックス順序は、並べ替え順序に基づいています。 挿入される要素が追加されると、<xref:System.Collections.SortedList>正しい並べ替えの順序、およびインデックス作成もそれに応じて調整します</xref:System.Collections.SortedList>。 要素が削除されると、インデックス作成もそれに応じて調整します。 要素が追加または削除、したがって、特定のキー/値ペアのインデックスを変更可能性があります、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       要素の値、<xref:System.Collections.SortedList>を使用して、指定した値と比較されます、<xref:System.Object.Equals%2A>メソッド</xref:System.Object.Equals%2A></xref:System.Collections.SortedList>。       このメソッドは一方向の検索を使用します。そのため、このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_5_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_5_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_5_1.cs)]"
  syntax:
    content: public virtual int IndexOfValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "内で検索する値、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Int32
      description: "最初に見つかった位置の&0; から始まるインデックス、 <code> value </code>パラメーター場合<code> value </code>で見つかった、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトです。 それ以外の場合、-1。"
  overload: System.Collections.SortedList.IndexOfValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトが固定サイズです。"
  remarks: "固定サイズ コレクションできない追加または削除の要素のコレクションが作成された後で、既存の要素の変更はできます。       固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。       このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトが固定サイズです。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.SortedList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトは読み取り専用です。"
  remarks: "読み取り専用であるコレクション追加、削除、または要素の変更後にできません、コレクションを作成します。       読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。       このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトは読み取り専用です。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.SortedList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "アクセスをするかどうかを示す値を取得、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトが同期されている (スレッド セーフである)。"
  remarks: "スレッド セーフを確保する、<xref:System.Collections.SortedList>オブジェクト、によって返されるラッパーを介してすべての操作を行う必要があります、<xref:System.Collections.SortedList.Synchronized%2A>メソッド</xref:System.Collections.SortedList.Synchronized%2A></xref:System.Collections.SortedList>。       コレクションの列挙は本質的にスレッド セーフなプロシージャ コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。"
  example:
  - "The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sor_1_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sor_1_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sor_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合へのアクセス、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトが同期されている (スレッド セーフである)、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.SortedList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得し、特定のキーに関連付けられている値を設定、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "項目のプロパティを使用するには、次の構文を指定することによって、コレクション内の特定の要素にアクセスする:`myCollection[key]`です。       要素を追加する新しいに存在しないキーの値を設定して、このプロパティを使用することもできます、<xref:System.Collections.SortedList>オブジェクト (たとえば、 `myCollection[&quot;myNonexistentKey&quot;] = myValue)`</xref:System.Collections.SortedList> 。 ただしで指定したキーが既に存在する場合、 <xref:System.Collections.SortedList>、古い値を上書きする項目のプロパティを設定します</xref:System.Collections.SortedList>。 これに対し、<xref:System.Collections.SortedList.Add%2A>メソッドでは、既存の要素は変更しません</xref:System.Collections.SortedList.Add%2A>。       キーには`null`値を指定できますが、します。 区別するために`null`指定したキーが見つからないため、返されると`null`指定したキーの値が返される`null`を使用して、<xref:System.Collections.SortedList.Contains%2A>メソッドまたは<xref:System.Collections.SortedList.ContainsKey%2A>一覧で、キーが存在するかどうかを決定するメソッド</xref:System.Collections.SortedList.ContainsKey%2A></xref:System.Collections.SortedList.Contains%2A>。       要素、<xref:System.Collections.SortedList>キーにより並べ替えられた、固有の仕様に従って、<xref:System.Collections.IComparer>実装では、ときに指定された、<xref:System.Collections.SortedList>が作成されたかに応じて、<xref:System.IComparable>キー自体で提供される実装</xref:System.IComparable></xref:System.Collections.SortedList></xref:System.Collections.IComparer></xref:System.Collections.SortedList>。       C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<xref:System.Collections.SortedList.Keys%2A>プロパティ</xref:System.Collections.SortedList.Keys%2A>。 Visual Basic では、同様のインデックス機能を提供する既定のプロパティとして項目を実装します。       O は、このプロパティの値を取得する (ログ`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、 プロパティの設定は、O (ログ`n`) キーが既に存在<xref:System.Collections.SortedList></xref:System.Collections.SortedList>場合の操作。 キーがない場合、一覧で、プロパティの設定は O (`n`)、並べ替えられていないデータまたは O の操作 (ログ`n`) 場合は、新しい要素は、リストの末尾に追加します。 カーソルでは、サイズ変更が発生する場合、操作は O (`n`)。"
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "取得または設定する値に関連付けられたキー。"
    return:
      type: System.Object
      description: "関連付けられている値、 <code> key </code>内のパラメーター、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>場合<code> key </code>以外、それ以外の場合は、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.SortedList.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "プロパティが設定され、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトは読み取り専用です。       - または - プロパティが設定されて、 <code> key </code> 、コレクションに存在しません、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>固定サイズです。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "要素を追加するための十分な使用可能なメモリがない、 <xref href=&quot;System.Collections.SortedList&quot;></xref>です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比較演算子は、例外をスローします。"
  platform:
  - net462
- uid: System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "内のキーを取得する<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Collections.ICollection>オブジェクトは、キーの読み取り専用ビュー、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList></xref:System.Collections.ICollection>。 基になる<xref:System.Collections.SortedList><xref:System.Collections.ICollection>。</xref:System.Collections.ICollection>すぐに反映されます</xref:System.Collections.SortedList>への変更       <xref:System.Collections.ICollection> <xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>のキーと同じ順序で並べ替えられた</xref:System.Collections.ICollection>要素       このプロパティがに似ていますが、<xref:System.Collections.SortedList.GetKeyList%2A>メソッド、コードが返されます、<xref:System.Collections.ICollection>オブジェクトの代わりに、<xref:System.Collections.IList>オブジェクト</xref:System.Collections.IList></xref:System.Collections.ICollection></xref:System.Collections.SortedList.GetKeyList%2A>。       このメソッドは、o (1) 操作です。"
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>オブジェクト内のキーを含む、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト</xref:System.Collections.ICollection>。"
  overload: System.Collections.SortedList.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定したキーを持つ要素を削除する<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクト。"
  remarks: "場合、<xref:System.Collections.SortedList>オブジェクトに指定のキーを持つ要素が含まれていません、<xref:System.Collections.SortedList>は変更されません</xref:System.Collections.SortedList></xref:System.Collections.SortedList>。 例外はスローされません。       リストなどの連続する要素のコレクションで、削除された要素に続く要素上へ移動繰りにします。 場合は、コレクションのインデックスが、移動した要素のインデックスも更新します。 この動作は、ここで要素がハッシュ テーブルなどのバケットにグループ化概念的にはコレクションには適用されません。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_6_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_6_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_6_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "削除する要素のキー。"
  overload: System.Collections.SortedList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトは読み取り専用です。       - または -、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定したインデックス位置にある要素を削除、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "インデックス順序は、並べ替え順序に基づいています。 挿入される要素が追加されると、<xref:System.Collections.SortedList>正しい並べ替えの順序、およびインデックス作成もそれに応じて調整します</xref:System.Collections.SortedList>。 要素が削除されると、インデックス作成もそれに応じて調整します。 要素が追加または削除、したがって、特定のキー/値ペアのインデックスを変更可能性があります、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       リストなどの連続する要素のコレクションで、削除された要素に続く要素上へ移動繰りにします。 場合は、コレクションのインデックスが、移動した要素のインデックスも更新します。 この動作は、ここで要素がハッシュ テーブルなどのバケットにグループ化概念的にはコレクションには適用されません。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_17_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_17_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_17_1.vb)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "削除する要素の&0; から始まるインデックス。"
  overload: System.Collections.SortedList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>有効なインデックスの範囲外である、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "特定のインデックスの値で置き換え、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "インデックス順序は、並べ替え順序に基づいています。 挿入される要素が追加されると、<xref:System.Collections.SortedList>正しい並べ替えの順序、およびインデックス作成もそれに応じて調整します</xref:System.Collections.SortedList>。 要素が削除されると、インデックス作成もそれに応じて調整します。 要素が追加または削除、したがって、特定のキー/値ペアのインデックスを変更可能性があります、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       このメソッドは、o (1) 操作です。"
  example:
  - "The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \n  \n [!code-vb[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_13_1.vb)]\n [!code-cs[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_13_1.cs)]\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_13_1.cpp)]"
  syntax:
    content: public virtual void SetByIndex (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "保存先となる位置の&0; から始まるインデックス`value`です。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>に保存する、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト</xref:System.Object>。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.SortedList.SetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>有効なインデックスの範囲外である、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  platform:
  - net462
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "同期 (スレッド セーフである) ラッパーを返します、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "スレッド セーフを確保する、<xref:System.Collections.SortedList>オブジェクト、このラッパーのみを通じてすべての操作を行う必要があります</xref:System.Collections.SortedList>。       コレクションの列挙は本質的にスレッド セーフなプロシージャ コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。"
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sor_10_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sor_10_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sor_10_1.vb)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sor_10_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sor_10_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_10_2.vb)]"
  syntax:
    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>を同期するオブジェクト。"
    return:
      type: System.Collections.SortedList
      description: "A 同期 (スレッド セーフである) ラッパーを<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクト。"
  overload: System.Collections.SortedList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "アクセスを同期するために使用できるオブジェクトを取得する<xref href=&quot;System.Collections.SortedList&quot;></xref>オブジェクト。"
  remarks: "同期されたバージョンを作成する、<xref:System.Collections.SortedList>オブジェクトを使用して、<xref:System.Collections.SortedList.Synchronized%2A>メソッド</xref:System.Collections.SortedList.Synchronized%2A></xref:System.Collections.SortedList>。 ただし、派生クラスは、独自の同期されたバージョンを指定、 <xref:System.Collections.SortedList>SyncRoot プロパティを使用します</xref:System.Collections.SortedList>。 同期されたコードでの操作を実行する必要があります、 <xref:System.Collections.SortedList>、 <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>で直接</xref:System.Collections.SortedList> これにより、他のオブジェクトから派生したコレクションを適切に操作します。 具体的には、同時に変更する可能性がある別スレッドとの適切な同期を維持、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList>。       コレクションの列挙は本質的にスレッド セーフなプロシージャ コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。"
  example:
  - "The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_0_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_0_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_0_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "アクセスを同期するために使用できるオブジェクト、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  overload: System.Collections.SortedList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返します、<xref:System.Collections.IEnumerator>を反復処理する、 <xref href=&quot;System.Collections.SortedList&quot;> </xref></xref:System.Collections.IEnumerator> 。"
  remarks: "[Visual Basic、C# の場合]      `foreach` C# 言語のステートメント (`for each` Visual Basic で)、列挙子の複雑さが隠されています。  したがってを使用して`foreach`列挙子を直接操作せずにお勧めします。       列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。       最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。 <xref:System.Collections.IEnumerator.Reset%2A>列挙子をこの位置に戻さ点もあります。</xref:System.Collections.IEnumerator.Reset%2A> この位置で、呼び出す<xref:System.Collections.IEnumerator.Current%2A>例外をスローします</xref:System.Collections.IEnumerator.Current%2A>。 したがって、 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.Current%2A>の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに</xref:System.Collections.IEnumerator.MoveNext%2A>呼び出す必要があります。       <xref:System.Collections.IEnumerator.Current%2A>いずれかのまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>と呼びます</xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.IEnumerator.Current%2A>次の要素にします</xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>       場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`</xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`</xref:System.Collections.IEnumerator.MoveNext%2A>。 場合は、最後の呼び出し<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、呼び出し元<xref:System.Collections.IEnumerator.Current%2A>例外をスローします</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 <xref:System.Collections.IEnumerator.Current%2A>再度、コレクションの最初の要素を<xref:System.Collections.IEnumerator.Reset%2A><xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>続けて</xref:System.Collections.IEnumerator.Reset%2A>を呼び出すことができます</xref:System.Collections.IEnumerator.Current%2A>を設定するには       コレクションが変更されない限り、列挙子は有効です。 コレクションの変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子は回復不可能な無効なり、次を<xref:System.Collections.IEnumerator.MoveNext%2A><xref:System.Collections.IEnumerator.Reset%2A><xref:System.InvalidOperationException>。</xref:System.InvalidOperationException>がスロー</xref:System.Collections.IEnumerator.Reset%2A>または</xref:System.Collections.IEnumerator.MoveNext%2A> 間で、コレクションが変更された場合<xref:System.Collections.IEnumerator.MoveNext%2A>と<xref:System.Collections.IEnumerator.Current%2A>、<xref:System.Collections.IEnumerator.Current%2A>列挙子が既に無効になっている場合でもに設定されている要素を返します</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。       列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。 コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。       このメソッドは、o (1) 操作です。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.SortedList&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "実際の要素数を容量を設定、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "このメソッドは、コレクションのメモリ オーバーヘッドを最小要素がコレクションに追加されない場合に使用できます。       リセット、<xref:System.Collections.SortedList>を呼び出し、初期状態のオブジェクト、 <xref:System.Collections.SortedList.Clear%2A>TrimToSize を呼び出す前にメソッド</xref:System.Collections.SortedList.Clear%2A></xref:System.Collections.SortedList>。 空のトリミング<xref:System.Collections.SortedList>のキャパシティを設定、<xref:System.Collections.SortedList>を既定の容量</xref:System.Collections.SortedList></xref:System.Collections.SortedList>。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>は、"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_3_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_3_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_3_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.SortedList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクトは読み取り専用です。       - または -、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "内の値を取得、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト。"
  remarks: "<xref:System.Collections.ICollection>オブジェクトは、の値の読み取り専用ビュー、<xref:System.Collections.SortedList>オブジェクト</xref:System.Collections.SortedList></xref:System.Collections.ICollection>。 基になる<xref:System.Collections.SortedList><xref:System.Collections.ICollection>。</xref:System.Collections.ICollection>すぐに反映されます</xref:System.Collections.SortedList>への変更       <xref:System.Collections.ICollection> <xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>の値と同じ順序で並べ替えられた</xref:System.Collections.ICollection>要素       このプロパティがに似ていますが、<xref:System.Collections.SortedList.GetValueList%2A>メソッド、コードが返されます、<xref:System.Collections.ICollection>オブジェクトの代わりに、<xref:System.Collections.IList>オブジェクト</xref:System.Collections.IList></xref:System.Collections.ICollection></xref:System.Collections.SortedList.GetValueList%2A>。       このメソッドは、o (1) 操作です。"
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>オブジェクトの値を含む、 <xref href=&quot;System.Collections.SortedList&quot;> </xref>オブジェクト</xref:System.Collections.ICollection>。"
  overload: System.Collections.SortedList.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.SortedList.#ctor
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.SortedList.#ctor(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
- uid: System.Collections.SortedList.Capacity
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
- uid: System.Collections.SortedList.Clear
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
- uid: System.Collections.SortedList.Clone
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
- uid: System.Collections.SortedList.Contains(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.SortedList.Count
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
- uid: System.Collections.SortedList.GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.SortedList.GetKey(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
- uid: System.Collections.SortedList.GetKeyList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.SortedList.GetValueList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
- uid: System.Collections.SortedList.IsFixedSize
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
- uid: System.Collections.SortedList.Keys
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.SortedList.Remove(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.SortedList.SyncRoot
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.SortedList.TrimToSize
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
- uid: System.Collections.SortedList.Values
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
- uid: System.Collections.SortedList.#ctor*
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList
  nameWithType: SortedList.SortedList
- uid: System.Collections.SortedList.Add*
  parent: System.Collections.SortedList
  isExternal: false
  name: Add
  nameWithType: SortedList.Add
- uid: System.Collections.SortedList.Capacity*
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
- uid: System.Collections.SortedList.Clear*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear
  nameWithType: SortedList.Clear
- uid: System.Collections.SortedList.Clone*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone
  nameWithType: SortedList.Clone
- uid: System.Collections.SortedList.Contains*
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains
  nameWithType: SortedList.Contains
- uid: System.Collections.SortedList.ContainsKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey
  nameWithType: SortedList.ContainsKey
- uid: System.Collections.SortedList.ContainsValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue
  nameWithType: SortedList.ContainsValue
- uid: System.Collections.SortedList.CopyTo*
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo
  nameWithType: SortedList.CopyTo
- uid: System.Collections.SortedList.Count*
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
- uid: System.Collections.SortedList.GetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex
  nameWithType: SortedList.GetByIndex
- uid: System.Collections.SortedList.GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedList.GetEnumerator
- uid: System.Collections.SortedList.GetKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey
  nameWithType: SortedList.GetKey
- uid: System.Collections.SortedList.GetKeyList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList
  nameWithType: SortedList.GetKeyList
- uid: System.Collections.SortedList.GetValueList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList
  nameWithType: SortedList.GetValueList
- uid: System.Collections.SortedList.IndexOfKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey
  nameWithType: SortedList.IndexOfKey
- uid: System.Collections.SortedList.IndexOfValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue
  nameWithType: SortedList.IndexOfValue
- uid: System.Collections.SortedList.IsFixedSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item*
  parent: System.Collections.SortedList
  isExternal: false
  name: Item
  nameWithType: SortedList.Item
- uid: System.Collections.SortedList.Keys*
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
- uid: System.Collections.SortedList.Remove*
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove
  nameWithType: SortedList.Remove
- uid: System.Collections.SortedList.RemoveAt*
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt
  nameWithType: SortedList.RemoveAt
- uid: System.Collections.SortedList.SetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex
  nameWithType: SortedList.SetByIndex
- uid: System.Collections.SortedList.Synchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized
  nameWithType: SortedList.Synchronized
- uid: System.Collections.SortedList.SyncRoot*
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.SortedList.TrimToSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize
  nameWithType: SortedList.TrimToSize
- uid: System.Collections.SortedList.Values*
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
