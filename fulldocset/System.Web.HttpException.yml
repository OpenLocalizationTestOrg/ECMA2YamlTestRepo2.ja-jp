### YamlMime:ManagedReference
items:
- uid: System.Web.HttpException
  id: HttpException
  children:
  - System.Web.HttpException.#ctor
  - System.Web.HttpException.#ctor(System.String)
  - System.Web.HttpException.#ctor(System.Int32,System.String)
  - System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Web.HttpException.#ctor(System.String,System.Exception)
  - System.Web.HttpException.#ctor(System.String,System.Int32)
  - System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)
  - System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)
  - System.Web.HttpException.CreateFromLastError(System.String)
  - System.Web.HttpException.GetHtmlErrorMessage
  - System.Web.HttpException.GetHttpCode
  - System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Web.HttpException.WebEventCode
  langs:
  - csharp
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
  type: Class
  summary: "HTTP 要求の処理中に発生した例外を表します。"
  remarks: "HttpException クラスは、ASP.NET の例外情報を生成できるようにする HTTP 固有の例外クラスです。 スローして、例外の処理の詳細については、次を参照してください。[例外](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to use the HttpException class to raise customized exceptions. The `Button_Click` method determines which button was clicked, and then calls either the `CheckNumber` or `CheckBoolean` method. If the user-entered value in the text box does not correspond to the expected type, an HttpException exception is created and thrown with a customized message based on the error type.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[HttpException#1](~/add/codesnippet/visualbasic/t-system.web.httpexception_1.aspx)]\n [!code-cs[HttpException#1](~/add/codesnippet/csharp/t-system.web.httpexception_1.aspx)]"
  syntax:
    content: 'public class HttpException : System.Runtime.InteropServices.ExternalException'
  inheritance:
  - System.Exception
  - System.SystemException
  - System.Runtime.InteropServices.ExternalException
  implements: []
  inheritedMembers:
  - System.Runtime.InteropServices.ExternalException.ErrorCode
  - System.Runtime.InteropServices.ExternalException.ToString
  platform:
  - net462
- uid: System.Web.HttpException.#ctor
  id: '#ctor'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException()
  nameWithType: HttpException.HttpException()
  fullName: System.Web.HttpException.HttpException()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.HttpException&quot;> </xref>クラスし、空を作成<xref href=&quot;System.Web.HttpException&quot;></xref>オブジェクト。"
  remarks: "例外を処理する場合は、一連の内部例外への応答でスローされた外側の例外に関連する例外をキャプチャすると便利ですができます。       外側の例外の原因となった内部例外への参照がから利用可能な<xref:System.Exception.InnerException%2A>外側の例外のプロパティ</xref:System.Exception.InnerException%2A>。 このメカニズムでは、意味のある例外を作成するときに元の例外を含む、以前の例外で示されているエラー情報を保持します。 詳細については、 <xref:System.Exception.InnerException%2A>。</xref:System.Exception.InnerException%2A>を参照してください。"
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. The `CheckNumber` method accepts a user-entered value through a text box and checks whether it is an integer. If the value is not an integer, an exception is thrown, and then a new <xref:System.Web.HttpException> object is created and thrown. That exception is caught in the `Button_Click` event handler and the error message is displayed on the browser.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[HttpException_Constructor1#1](~/add/codesnippet/csharp/m-system.web.httpexcepti_2_1.aspx)]\n [!code-vb[HttpException_Constructor1#1](~/add/codesnippet/visualbasic/m-system.web.httpexcepti_2_1.aspx)]"
  syntax:
    content: public HttpException ();
    parameters: []
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(String)
  nameWithType: HttpException.HttpException(String)
  fullName: System.Web.HttpException.HttpException(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.HttpException&quot;> </xref>クラスの指定されたエラー メッセージを使用します。"
  remarks: ''
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. An <xref:System.Web.HttpException> is thrown if a user-entered value is 0.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[Classic HttpException.HttpException1 Example#1](~/add/codesnippet/csharp/m-system.web.httpexcepti_0_1.cs)]\n [!code-vb[Classic HttpException.HttpException1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpexcepti_0_1.vb)]"
  syntax:
    content: public HttpException (string message);
    parameters:
    - id: message
      type: System.String
      description: "クライアントでは、例外がスローされたときに表示されるエラー メッセージ。"
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(Int32,String)
  nameWithType: HttpException.HttpException(Int32,String)
  fullName: System.Web.HttpException.HttpException(Int32,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.HttpException&quot;> </xref>クラスの HTTP 応答のステータス コードとエラー メッセージを使用します。"
  syntax:
    content: public HttpException (int httpCode, string message);
    parameters:
    - id: httpCode
      type: System.Int32
      description: "このエラーに対応するクライアントに送信される HTTP 応答状態コードです。"
    - id: message
      type: System.String
      description: "クライアントでは、例外がスローされたときに表示されるエラー メッセージ。"
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(SerializationInfo,StreamingContext)
  nameWithType: HttpException.HttpException(SerializationInfo,StreamingContext)
  fullName: System.Web.HttpException.HttpException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.HttpException&quot;> </xref>シリアル化されたデータを持つクラス。"
  remarks: "HttpException コンス トラクターは、ストリームを介して送信される例外オブジェクトを再構成する逆シリアル化中に呼び出されます。 詳細については、次を参照してください。 [XML および SOAP シリアル化](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: protected HttpException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>スローされた例外に関するシリアル化されたオブジェクト データを保持します。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>元または転送先に関するコンテキスト情報を保持する</xref:System.Runtime.Serialization.StreamingContext>。"
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(String,Exception)
  nameWithType: HttpException.HttpException(String,Exception)
  fullName: System.Web.HttpException.HttpException(String,Exception)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.HttpException&quot;> </xref>クラスのエラー メッセージを使用して、<xref:System.Exception.InnerException*>プロパティ</xref:System.Exception.InnerException*>。"
  remarks: "例外を処理する場合は、一連の内部例外への応答でスローされた外側の例外に関連する例外をキャプチャすると便利ですができます。       外側の例外の原因となった内部例外への参照がから利用可能な<xref:System.Exception.InnerException%2A>外側の例外のプロパティ</xref:System.Exception.InnerException%2A>。 このメカニズムでは、意味のある例外を作成するときに元の例外を含む、以前の例外で示されているエラー情報を保持します。 詳細については、 <xref:System.Exception.InnerException%2A>。</xref:System.Exception.InnerException%2A>を参照してください。"
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. The `CheckNumber` method accepts a user-entered value through a text box and checks whether it is an integer. If the value is not an integer, an exception is thrown, and then in the catch block, a new <xref:System.Web.HttpException> object is created and thrown. That exception is caught in the `Button_Click` event handler and the error message is displayed on the browser.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[HttpException_Constructor2#1](~/add/codesnippet/visualbasic/m-system.web.httpexcepti_1_1.aspx)]\n [!code-cs[HttpException_Constructor2#1](~/add/codesnippet/csharp/m-system.web.httpexcepti_1_1.aspx)]"
  syntax:
    content: public HttpException (string message, Exception innerException);
    parameters:
    - id: message
      type: System.String
      description: "クライアントでは、例外がスローされたときに表示されるエラー メッセージ。"
    - id: innerException
      type: System.Exception
      description: "<xref:System.Exception.InnerException*>いずれか、現在の例外をスローした場合、</xref:System.Exception.InnerException*> 。"
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(String,Int32)
  nameWithType: HttpException.HttpException(String,Int32)
  fullName: System.Web.HttpException.HttpException(String,Int32)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.HttpException&quot;> </xref>クラスのエラー メッセージと例外コードを使用します。"
  remarks: ''
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. An <xref:System.Web.HttpException> exception is thrown if a user-entered value is 0.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[Classic HttpException.HttpException2 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpexcepti_4_1.vb)]\n [!code-cs[Classic HttpException.HttpException2 Example#1](~/add/codesnippet/csharp/m-system.web.httpexcepti_4_1.cs)]"
  syntax:
    content: public HttpException (string message, int hr);
    parameters:
    - id: message
      type: System.String
      description: "クライアントでは、例外がスローされたときに表示されるエラー メッセージ。"
    - id: hr
      type: System.Int32
      description: "エラーを定義する例外コードです。"
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)
  id: '#ctor(System.Int32,System.String,System.Exception)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(Int32,String,Exception)
  nameWithType: HttpException.HttpException(Int32,String,Exception)
  fullName: System.Web.HttpException.HttpException(Int32,String,Exception)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.HttpException&quot;> </xref>クラスの HTTP 応答ステータス コード、エラー メッセージを使用して、<xref:System.Exception.InnerException*>プロパティ</xref:System.Exception.InnerException*>。"
  remarks: "例外を処理する場合は、一連の内部例外への応答でスローされた外側の例外に関連する例外をキャプチャすると便利ですができます。       外側の例外の原因となった内部例外への参照がから利用可能な<xref:System.Exception.InnerException%2A>外側の例外のプロパティ</xref:System.Exception.InnerException%2A>。 このメカニズムでは、意味のある例外を作成するときに元の例外を含む、以前の例外で示されているエラー情報を保持します。 詳細については、 <xref:System.Exception.InnerException%2A>。</xref:System.Exception.InnerException%2A>を参照してください。"
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. The `CheckNumber` method accepts a user-entered value and checks whether it is an integer. If the value is not an integer, an exception is thrown, and then a new <xref:System.Web.HttpException> object containing the HTTP response status code, the exception's message, and any inner exception is created. That exception is caught in the `Button_Click` event handler and the error message, error code, and inner exception are displayed.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[HttpException_Constructor3#1](~/add/codesnippet/csharp/6bc30991-e249-4e7f-addb-_1.aspx)]\n [!code-vb[HttpException_Constructor3#1](~/add/codesnippet/visualbasic/6bc30991-e249-4e7f-addb-_1.aspx)]"
  syntax:
    content: public HttpException (int httpCode, string message, Exception innerException);
    parameters:
    - id: httpCode
      type: System.Int32
      description: "クライアントに表示される HTTP 応答状態コードです。"
    - id: message
      type: System.String
      description: "クライアントでは、例外がスローされたときに表示されるエラー メッセージ。"
    - id: innerException
      type: System.Exception
      description: "<xref:System.Exception.InnerException*>いずれか、現在の例外をスローした場合、</xref:System.Exception.InnerException*> 。"
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)
  id: '#ctor(System.Int32,System.String,System.Int32)'
  parent: System.Web.HttpException
  langs:
  - csharp
  name: HttpException(Int32,String,Int32)
  nameWithType: HttpException.HttpException(Int32,String,Int32)
  fullName: System.Web.HttpException.HttpException(Int32,String,Int32)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.HttpException&quot;> </xref>クラスの HTTP 応答状態コード、エラー メッセージ、および例外コードを使用します。"
  remarks: ''
  example:
  - "The following code example demonstrates the HttpException constructor of the <xref:System.Web.HttpException> class. The user name and e-mail information are entered by the user in the provided text boxes. If any of the text boxes are left blank, an <xref:System.Web.HttpException> object is created and thrown. The error code of the <xref:System.Web.HttpException> is obtained by the <xref:System.Web.HttpException.GetHttpCode%2A> method and displayed on the Web page.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[HttpException_Constructor#1](~/add/codesnippet/csharp/m-system.web.httpexcepti_3_1.aspx)]\n [!code-vb[HttpException_Constructor#1](~/add/codesnippet/visualbasic/m-system.web.httpexcepti_3_1.aspx)]"
  syntax:
    content: public HttpException (int httpCode, string message, int hr);
    parameters:
    - id: httpCode
      type: System.Int32
      description: "クライアントに表示される HTTP 応答状態コードです。"
    - id: message
      type: System.String
      description: "クライアントでは、例外がスローされたときに表示されるエラー メッセージ。"
    - id: hr
      type: System.Int32
      description: "エラーを定義する例外コードです。"
  overload: System.Web.HttpException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.CreateFromLastError(System.String)
  id: CreateFromLastError(System.String)
  parent: System.Web.HttpException
  langs:
  - csharp
  name: CreateFromLastError(String)
  nameWithType: HttpException.CreateFromLastError(String)
  fullName: System.Web.HttpException.CreateFromLastError(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新たに作成<xref href=&quot;System.Web.HttpException&quot;></xref>例外は、Win32 API から返されるエラー コードに基づく<xref uid=&quot;langword_csharp_GetLastError()&quot; name=&quot;GetLastError()&quot; href=&quot;&quot;></xref>メソッドです。"
  syntax:
    content: public static System.Web.HttpException CreateFromLastError (string message);
    parameters:
    - id: message
      type: System.String
      description: "クライアントでは、例外がスローされたときに表示されるエラー メッセージ。"
    return:
      type: System.Web.HttpException
      description: "<xref href=&quot;System.Web.HttpException&quot;> </xref> Win32 API への呼び出しから返されるエラー コードに基づく<xref uid=&quot;langword_csharp_GetLastError()&quot; name=&quot;GetLastError()&quot; href=&quot;&quot;></xref>メソッドです。"
  overload: System.Web.HttpException.CreateFromLastError*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.GetHtmlErrorMessage
  id: GetHtmlErrorMessage
  parent: System.Web.HttpException
  langs:
  - csharp
  name: GetHtmlErrorMessage()
  nameWithType: HttpException.GetHtmlErrorMessage()
  fullName: System.Web.HttpException.GetHtmlErrorMessage()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "クライアントに戻るには html 形式のエラー メッセージを取得します。"
  syntax:
    content: public string GetHtmlErrorMessage ();
    parameters: []
    return:
      type: System.String
      description: "Html 形式のエラー メッセージ。"
  overload: System.Web.HttpException.GetHtmlErrorMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.GetHttpCode
  id: GetHttpCode
  parent: System.Web.HttpException
  langs:
  - csharp
  name: GetHttpCode()
  nameWithType: HttpException.GetHttpCode()
  fullName: System.Web.HttpException.GetHttpCode()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "クライアントに返す HTTP 応答状態コードを取得します。"
  remarks: "ゼロ以外の HTTP コードがある場合が返されます。 それ以外の場合、<xref:System.Exception.InnerException%2A>コードが返されます</xref:System.Exception.InnerException%2A>。 どちらの場合、<xref:System.Exception.InnerException%2A>コードも 0 以外の HTTP コードは、使用できますが、HTTP 応答状態コード 500 が返されます</xref:System.Exception.InnerException%2A>。 HTTP 応答のステータス コードの詳細については、ハイパー テキスト転送のプロトコルの世界では、http/1.1 の状態コードの定義を参照してください。 [Wide Web Consortium (W3C) の Web サイト](http://go.microsoft.com/fwlink/?linkid=37125)です。"
  syntax:
    content: public int GetHttpCode ();
    parameters: []
    return:
      type: System.Int32
      description: "例外を表すゼロ以外の HTTP コードまたは<xref:System.Exception.InnerException*>コードですそれ以外の場合、HTTP 応答状態コード 500。</xref:System.Exception.InnerException*> 。"
  overload: System.Web.HttpException.GetHttpCode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Web.HttpException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: HttpException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Web.HttpException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "例外に関する情報を取得し、それを追加、 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>オブジェクト。"
  remarks: "GetObjectData メソッドを追加する例外に関する情報、<xref:System.Runtime.Serialization.SerializationInfo>シリアル化の対象となるオブジェクト</xref:System.Runtime.Serialization.SerializationInfo>。 逆シリアル化中に例外が再構成されて、<xref:System.Runtime.Serialization.SerializationInfo>ストリームで送信された</xref:System.Runtime.Serialization.SerializationInfo>。"
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>スローされた例外に関するシリアル化されたオブジェクト データを保持します。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>元または転送先に関するコンテキスト情報を保持する</xref:System.Runtime.Serialization.StreamingContext>。"
  overload: System.Web.HttpException.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpException.WebEventCode
  id: WebEventCode
  parent: System.Web.HttpException
  langs:
  - csharp
  name: WebEventCode
  nameWithType: HttpException.WebEventCode
  fullName: System.Web.HttpException.WebEventCode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "HTTP 例外に関連付けられているイベントのコードを取得します。"
  syntax:
    content: public int WebEventCode { get; }
    return:
      type: System.Int32
      description: "Web イベントのコードを表す整数。"
  overload: System.Web.HttpException.WebEventCode*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.ExternalException
  isExternal: false
  name: System.Runtime.InteropServices.ExternalException
- uid: System.Web.HttpException.#ctor
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException()
  nameWithType: HttpException.HttpException()
  fullName: System.Web.HttpException.HttpException()
- uid: System.Web.HttpException.#ctor(System.String)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(String)
  nameWithType: HttpException.HttpException(String)
  fullName: System.Web.HttpException.HttpException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.HttpException.#ctor(System.Int32,System.String)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(Int32,String)
  nameWithType: HttpException.HttpException(Int32,String)
  fullName: System.Web.HttpException.HttpException(Int32,String)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(SerializationInfo,StreamingContext)
  nameWithType: HttpException.HttpException(SerializationInfo,StreamingContext)
  fullName: System.Web.HttpException.HttpException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Web.HttpException.#ctor(System.String,System.Exception)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(String,Exception)
  nameWithType: HttpException.HttpException(String,Exception)
  fullName: System.Web.HttpException.HttpException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.HttpException.#ctor(System.String,System.Int32)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(String,Int32)
  nameWithType: HttpException.HttpException(String,Int32)
  fullName: System.Web.HttpException.HttpException(String,Int32)
- uid: System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(Int32,String,Exception)
  nameWithType: HttpException.HttpException(Int32,String,Exception)
  fullName: System.Web.HttpException.HttpException(Int32,String,Exception)
- uid: System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException(Int32,String,Int32)
  nameWithType: HttpException.HttpException(Int32,String,Int32)
  fullName: System.Web.HttpException.HttpException(Int32,String,Int32)
- uid: System.Web.HttpException.CreateFromLastError(System.String)
  parent: System.Web.HttpException
  isExternal: false
  name: CreateFromLastError(String)
  nameWithType: HttpException.CreateFromLastError(String)
  fullName: System.Web.HttpException.CreateFromLastError(String)
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.HttpException.GetHtmlErrorMessage
  parent: System.Web.HttpException
  isExternal: false
  name: GetHtmlErrorMessage()
  nameWithType: HttpException.GetHtmlErrorMessage()
  fullName: System.Web.HttpException.GetHtmlErrorMessage()
- uid: System.Web.HttpException.GetHttpCode
  parent: System.Web.HttpException
  isExternal: false
  name: GetHttpCode()
  nameWithType: HttpException.GetHttpCode()
  fullName: System.Web.HttpException.GetHttpCode()
- uid: System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Web.HttpException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: HttpException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Web.HttpException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Web.HttpException.WebEventCode
  parent: System.Web.HttpException
  isExternal: false
  name: WebEventCode
  nameWithType: HttpException.WebEventCode
  fullName: System.Web.HttpException.WebEventCode
- uid: System.Web.HttpException.#ctor*
  parent: System.Web.HttpException
  isExternal: false
  name: HttpException
  nameWithType: HttpException.HttpException
- uid: System.Web.HttpException.CreateFromLastError*
  parent: System.Web.HttpException
  isExternal: false
  name: CreateFromLastError
  nameWithType: HttpException.CreateFromLastError
- uid: System.Web.HttpException.GetHtmlErrorMessage*
  parent: System.Web.HttpException
  isExternal: false
  name: GetHtmlErrorMessage
  nameWithType: HttpException.GetHtmlErrorMessage
- uid: System.Web.HttpException.GetHttpCode*
  parent: System.Web.HttpException
  isExternal: false
  name: GetHttpCode
  nameWithType: HttpException.GetHttpCode
- uid: System.Web.HttpException.GetObjectData*
  parent: System.Web.HttpException
  isExternal: false
  name: GetObjectData
  nameWithType: HttpException.GetObjectData
- uid: System.Web.HttpException.WebEventCode*
  parent: System.Web.HttpException
  isExternal: false
  name: WebEventCode
  nameWithType: HttpException.WebEventCode
