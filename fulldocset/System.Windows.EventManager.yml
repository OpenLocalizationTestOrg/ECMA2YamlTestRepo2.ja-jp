### YamlMime:ManagedReference
items:
- uid: System.Windows.EventManager
  id: EventManager
  children:
  - System.Windows.EventManager.GetRoutedEvents
  - System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  langs:
  - csharp
  name: EventManager
  nameWithType: EventManager
  fullName: System.Windows.EventManager
  type: Class
  summary: "クラスの所有者のルーティング イベントを登録し、クラス ハンドラーを追加するイベントに関連するユーティリティ メソッドを提供します。"
  remarks: "このクラスは、新しいルーティング イベントを登録する、 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A>最もよく使用します。       2 つ目の最も一般的な[!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)]使用率が<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A> このメソッドを使用するには、クラスにルーティングされたイベントまたは添付イベントのクラス処理を有効にします。 詳細については、「 [Handled、クラス処理とルーティング イベントをマーク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example show how to use this class to register a new routed event as a class member, along with the routed event \"wrapper\" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event.  \n  \n [!code-cs[DPCustom#EventManagerClass](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#eventmanagerclass)]\n [!code-vb[DPCustom#EventManagerClass](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#eventmanagerclass)]"
  syntax:
    content: public static class EventManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.EventManager.GetRoutedEvents
  id: GetRoutedEvents
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: System.Windows.EventManager.GetRoutedEvents()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "イベントのシステムに登録されているルーティング イベントの識別子を返します。"
  remarks: "詳細<xref:System.Windows.RoutedEvent>オブジェクトを後で登録することができます</xref:System.Windows.RoutedEvent>。 このメソッドは、スナップショットを取得し、ルーティングされたイベントのコレクションは、アプリケーションの有効期間全体で書き込み可能です。 返されるコレクションは、非常に大きくなる可能性があります。 一部となるイベントをカウントのみでも、 [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]コレクションのカウントが高い百にもはします。"
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEvents ();
    parameters: []
    return:
      type: System.Windows.RoutedEvent[]
      description: "型の配列<xref href=&quot;System.Windows.RoutedEvent&quot;></xref>登録済みのオブジェクトを格納しています。"
  overload: System.Windows.EventManager.GetRoutedEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  id: GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "指定した所有者の種類に登録されているイベントのすべてのルーティング イベントの識別子を検索します。"
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);
    parameters:
    - id: ownerType
      type: System.Type
      description: "使用して検索を開始する型。 検索では、基本クラスが含まれています。"
    return:
      type: System.Windows.RoutedEvent[]
      description: "ルーティング イベントの識別子と一致するすべての一致が見つかった場合の配列それ以外の場合、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.EventManager.GetRoutedEventsForOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type,RoutedEvent,Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "特定のルーティング イベントのクラス ハンドラーを登録します。"
  remarks: "クラスの処理は、バックアップするルーティング イベントに実装されている添付イベントを含む、ルーティング イベントに使用される機能です。 クラスのハンドラーは、クラスのすべてのインスタンスが存在する静的なハンドラーに似ています。 ハンドラーが静的では、クラス ハンドラーを直接インスタンス プロパティを変更することはできませんが、を通じてインスタンスにアクセスすることができますので、`sender`パラメーターまたはイベント データ。       インスタンス ハンドラーの前に、クラス ハンドラーが呼び出されます。 イベントを処理済みとしてマークの動作がクラス ハンドラーを実装することができます。 そのため、専用のイベント処理のインスタンス ハンドラーを登録しない限り、クラスで処理されるイベントのハンドラーをインスタンスは呼び出されません。       多くは、[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]基本要素のイベントが仮想メソッドを処理するクラスを提供します。 基本クラスを継承するクラスでこれらのメソッドをオーバーライドするクラスで静的コンス トラクター RegisterClassHandler を呼び出さずに処理を実装できます。 通常、これらのクラス処理メソッドは、入力イベントの存在し、名前が&quot;On&quot;で始まるクラス処理されているイベントの名前で終了します。       クラスの処理の詳細については、次を参照してください。 [Handled、クラス処理とルーティング イベントをマーク](~/add/includes/ajax-current-ext-md.md)です。       この署名を使用して、クラス ハンドラーは、未処理のイベントへの応答でのみ呼び出す登録されます。 呼び出すイベント引数を使用してが処理される、付いている場合でも、クラス ハンドラーを登録することも、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>署名と`handledEventsToo`に設定`true`</xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>。"
  example:
  - "The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling RegisterClassHandler.  \n  \n [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/visualbasic/ClassHandling.sdksamplelibrary/class1.vb#staticandregisterclasshandler)]\n [!code-cs[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/csharp/ClassHandling/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]"
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: classType
      type: System.Type
      description: "クラス処理を宣言するクラスの型。"
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "処理するイベントのルーティング イベントの識別子です。"
    - id: handler
      type: System.Delegate
      description: "クラスのハンドラー実装への参照。"
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "処理されるイベント データは既に設定されているイベントを処理するためのオプションを特定のルーティング イベントのクラス ハンドラーを登録します。"
  remarks: "クラスの処理は、バックアップするルーティング イベントに実装されている添付イベントを含む、ルーティング イベントに使用される機能です。 クラスのハンドラーは、クラスのすべてのインスタンスが存在する静的なハンドラーに似ています。 ハンドラーが静的では、クラス ハンドラーを直接インスタンス プロパティを変更することはできませんが、を通じてインスタンスにアクセスすることができますので、`sender`パラメーターまたはイベント データ。       インスタンス ハンドラーの前に、クラス ハンドラーが呼び出されます。 イベントを処理済みとしてマークの動作がクラス ハンドラーを実装することができます。 そのため、専用のイベント処理のインスタンス ハンドラーを登録しない限り、クラスで処理されるイベントのハンドラーをインスタンスは呼び出されません。       多くは、[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]基本要素のイベントが仮想メソッドを処理するクラスを提供します。 クラス処理を呼び出さずを実装する基本クラスを継承するクラスでこれらのメソッドをオーバーライドして<xref:System.Windows.EventManager.RegisterClassHandler%2A>で静的コンス トラクター</xref:System.Windows.EventManager.RegisterClassHandler%2A> 。 通常、これらのクラス処理メソッドは、入力イベントの存在し、名前が&quot;On&quot;で始まるクラス処理されているイベントの名前で終了します。       クラスの処理の詳細については、次を参照してください。 [Handled、クラス処理とルーティング イベントをマーク](~/add/includes/ajax-current-ext-md.md)です。       この署名を使用して、クラス ハンドラーに登録できるを設定して、イベントの処理時に呼び出す`handledEventsToo`&quot;éý&quot;`true`です。 一般に、行う必要がありますこれを回避する、マウスやキーボード イベントから処理入力システムなどして既知の処理に関する問題がある場合にのみです。"
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: classType
      type: System.Type
      description: "クラス処理を宣言するクラスの型。"
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "処理するイベントのルーティング イベントの識別子です。"
    - id: handler
      type: System.Delegate
      description: "クラスのハンドラー実装への参照。"
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ルーティング イベントの引数が指定されている場合でも、このクラスのハンドラーを起動する次のように処理します。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>のすべてのマークで処理されるイベント ハンドラーを呼び出していない既定の動作を保持します。"
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  id: RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "新しいルーティング イベントを登録、[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]イベント システムです。"
  remarks: "このメソッドの戻り値を使用して、一意の静的な宣言を作成する<xref:System.Windows.RoutedEvent>識別子フィールドです</xref:System.Windows.RoutedEvent>。 このフィールドは、所有者型内に格納する必要があります。       数多くの規則があるとベスト プラクティスがどのようにルーティング イベントに関連付けられている必要がありますしてという名前を登録されると、クラスで公開されています。 詳細については、次を参照してください。[ルーティング イベントの概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "ルーティング イベントの名前。 名前、所有者型内で一意である必要がありすることはできません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または空の文字列。"
    - id: routingStrategy
      type: System.Windows.RoutingStrategy
      description: "列挙の値としてのイベントのルーティング方法。"
    - id: handlerType
      type: System.Type
      description: "イベント ハンドラーの型。 これは、デリゲート型でなければならないし、することはできません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    - id: ownerType
      type: System.Type
      description: "ルーティング イベントの所有者のクラス型。 これは、ことはできません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Windows.RoutedEvent
      description: "新しく登録されたルーティング イベントの識別子。 この識別子のオブジェクトができるようになりました、クラスの静的フィールドとして格納され、イベントにハンドラーをアタッチするメソッドのパラメーターとして使用されます。 ルーティング イベントの識別子は他のイベント システムにも使用[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]です。"
  overload: System.Windows.EventManager.RegisterRoutedEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.EventManager.GetRoutedEvents
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: System.Windows.EventManager.GetRoutedEvents()
- uid: System.Windows.RoutedEvent[]
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent[]
  spec.csharp:
  - uid: System.Windows.RoutedEvent
    name: RoutedEvent
    nameWithType: RoutedEvent
    fullName: RoutedEvent[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type,RoutedEvent,Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.RoutingStrategy
  parent: System.Windows
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutingStrategy
  fullName: System.Windows.RoutingStrategy
- uid: System.Windows.EventManager.GetRoutedEvents*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents
  nameWithType: EventManager.GetRoutedEvents
- uid: System.Windows.EventManager.GetRoutedEventsForOwner*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner
  nameWithType: EventManager.GetRoutedEventsForOwner
- uid: System.Windows.EventManager.RegisterClassHandler*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler
  nameWithType: EventManager.RegisterClassHandler
- uid: System.Windows.EventManager.RegisterRoutedEvent*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent
  nameWithType: EventManager.RegisterRoutedEvent
