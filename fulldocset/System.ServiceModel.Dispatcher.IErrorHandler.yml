### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "実装者が、呼び出し元に返されるエラー メッセージを制御し、必要に応じてカスタム エラー処理を実行ログ記録などを使用できます。"
  remarks: "例外がスローされたときに、アプリケーションの動作を明示的に制御、IErrorHandler インターフェイスを実装しに追加、<xref:System.ServiceModel.Dispatcher.ChannelDispatcher>の<xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>プロパティ</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A></xref:System.ServiceModel.Dispatcher.ChannelDispatcher>。 IErrorHandler を使用すると、明示的に生成される SOAP エラーのコントロールをクライアントに送信し、ログ記録などの関連するタスクを実行するかどうかを決定できます。 エラー ハンドラーに追加された順序で呼び出されます、<xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>プロパティ</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>。       実装、<xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>をクライアントに返されるエラー メッセージを制御する方法</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>。       実装、<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>エラー ログの記録、フェイル ファーストをアプリケーションをシャット ダウンなどのエラーに関連する動作を実現するためにメソッド</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>。      > [!NOTE] > ため、<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>さまざまな場所から保証はありませんスレッドについて、メソッドがメソッドを呼び出すことができます</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>。 依存しない<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>が操作スレッドで呼び出されるメソッド</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>。       すべて<xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>実装は、応答メッセージを送信する前に、まず呼び出されます</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>。 ときにすべて<xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>実装が呼び出された、返す場合に`fault`以外`null`、操作コントラクトに従ってクライアントに送信します</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>。 場合`fault`は`null`応答メッセージがによって制御されるすべての実装が呼び出された後、<xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>プロパティの値</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>。      > [!NOTE] > すべての例外が発生することが<xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>実装が呼び出され、応答メッセージがチャネルに渡されます</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>。 (たとえば、メッセージのシリアル化が困難な) チャネル例外が発生した場合 IErrorHandler オブジェクトに通知します。 この場合、まだを確認してください、問題を検出するトレースの利用、または、開発環境をキャッチし、自分にこのような例外が表示されます。 トレースの詳細については、次を参照してください。 [、アプリケーションのトラブルシューティングを使用してトレース](~/add/includes/ajax-current-ext-md.md)です。       応答メッセージが送信された後、すべて<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>実装が同じ順序で呼び出されます</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>。       通常に IErrorHandler 実装を追加、<xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>サービス (および双方向通信の場合、クライアント) のプロパティ</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>。       IErrorHandler をランタイムに追加するには、動作を実装することで (どちらか、 <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>、 <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>、 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>、または<xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>オブジェクト) 動作プログラムでは、構成ファイルからまたはを使用してカスタム属性を持つ、IErrorHandler をアタッチします</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName></xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName></xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName></xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>。       動作を使用してランタイムを変更する方法の詳細については、次を参照してください。[を構成すると、ランタイムのビヘイビアーの使用を拡張する](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "エラーに関連する処理を有効にして、セッションおよび場合によっては、インスタンス コンテキストをディスパッチャーが中断するかどうかを示す値を返します。"
  remarks: "HandleError メソッドを使用して、エラー ログ、システム通知、アプリケーション、およびをシャット ダウンなどのエラーに関連する動作を実装し、例外が適切に処理されたかどうかを指定する値を返します。      > [!NOTE] > HandleError メソッドは、さまざまな場所から保証はありませんスレッドについて、メソッドが呼び出すことがあるためです。 依存していない HandleError メソッドが操作スレッドで呼び出されるとします。       すべて<xref:System.ServiceModel.Dispatcher.IErrorHandler>実装が呼び出されます</xref:System.ServiceModel.Dispatcher.IErrorHandler>。 既定で (戻り値が`false`)、例外がある場合、ディスパッチャーは任意のセッションを中止し、中止、<xref:System.ServiceModel.InstanceContext>場合<xref:System.ServiceModel.InstanceContextMode><xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode>以外の何かが</xref:System.ServiceModel.InstanceContextMode></xref:System.ServiceModel.InstanceContext>  例外はそのと見なされます。 ハンドルされないと、いずれかの状態が破損していると見なされます。       返す`true`この既定の動作を防ぐために HandleError からです。 いずれかのエラー ハンドラーを返す場合`true`指示[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]失敗した要求に関連付けられている状態を使用して続行しても安全であります。       エラー ハンドラーから返されなかった場合`true`未処理の例外と見なされますメソッド、HandleError からおよびされた可能性があります、中止<xref:System.ServiceModel.InstanceContext?displayProperty=fullName>とチャネル セッション チャネルまたは<xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName><xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName></xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>プロパティが設定されていない</xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>通信するときに</xref:System.ServiceModel.InstanceContext?displayProperty=fullName>既定の応答が適用されます。       `error`パラメーターは決して`null`スローされた例外オブジェクトが含まれています。"
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "処理中にスローされる例外。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]必要があります (存在する場合)、セッションを中断されず、インスタンス コンテキストがない場合、インスタンス コンテキスト<xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "カスタムの作成できるように&lt;xref:System.ServiceModel.FaultException%601&gt;サービス メソッドの途中で例外から返されます。"
  remarks: "クライアントに返されるカスタム エラー メッセージを作成する ProvideFault メソッドを実装します。  ProvideFault メソッドは、WCF ランタイムとして特に致命的な例外を認識し、例外自体を再スローを除く、操作のままにして例外が常に呼び出されます。 クライアントに、エラー メッセージが送信されるすべての ProvideFault 実装が呼び出されると、(場合`fault`以外`null`)。 場合、`fault`パラメーターは`null`既定フォールトがクライアントに送信します。      > [!NOTE] > からこのメソッド中に処理エラーの原因となった受信メッセージが利用可能な<xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>プロパティ</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>。      > [!NOTE] > ProvideFault メソッドを呼び出されると、さまざまな場所から保証はありませんでメソッドを呼び出したスレッドのためです。 依存していない ProvideFault メソッドが操作スレッドで呼び出されるとします。"
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "<xref:System.Exception>サービス操作の過程でスローされるオブジェクト</xref:System.Exception>。"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "メッセージの SOAP バージョン。"
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "&lt;Xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt;クライアント、または双方向の場合、サービスに返されるオブジェクト。"
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
