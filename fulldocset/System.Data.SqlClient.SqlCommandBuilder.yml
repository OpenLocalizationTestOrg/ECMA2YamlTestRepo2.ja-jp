### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlCommandBuilder
  id: SqlCommandBuilder
  children:
  - System.Data.SqlClient.SqlCommandBuilder.#ctor
  - System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)
  - System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  - System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  - System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  - System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)
  - System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand
  - System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand
  - System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)
  - System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)
  - System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)
  - System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  - System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand
  - System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  - System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)
  - System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  - System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  - System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  - System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  - System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)
  langs:
  - csharp
  name: SqlCommandBuilder
  nameWithType: SqlCommandBuilder
  fullName: System.Data.SqlClient.SqlCommandBuilder
  type: Class
  summary: "加えられた変更を調整するために使用される単一テーブル コマンドを自動的に生成、 <xref href=&quot;System.Data.DataSet&quot;> </xref> SQL Server データベースに関連付けられました。 このクラスは継承できません。"
  remarks: "<xref:System.Data.SqlClient.SqlDataAdapter>に加えられた変更を調整するために必要な TRANSACT-SQL ステートメントを自動的に生成しない、<xref:System.Data.DataSet>関連付けられている SQL Server のインスタンスと</xref:System.Data.DataSet></xref:System.Data.SqlClient.SqlDataAdapter>。 ただし、 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> <xref:System.Data.SqlClient.SqlDataAdapter>。</xref:System.Data.SqlClient.SqlDataAdapter>のプロパティ</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>を設定した場合、1 つのテーブルの更新プログラム用の TRANSACT-SQL ステートメントを自動的に生成する Sqlcommand オブジェクトを作成できます。 次に、追加の Transact SQL ステートメントを設定しないことが、SqlCommandBuilder によって生成されます。       SqlCommandBuilder では、自身を登録するためのリスナーとして<xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>を設定する場合に、イベント、<xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A>プロパティ</xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A></xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>。 関連付けることができますのみ<xref:System.Data.SqlClient.SqlDataAdapter>または Sqlcommand オブジェクトは、互いに一度に&1; つ</xref:System.Data.SqlClient.SqlDataAdapter>。       INSERT、UPDATE、または DELETE ステートメントを生成する、SqlCommandBuilder を使用して、<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>自動的に必要な一連のメタデータを取得するプロパティ</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>。 変更した場合、<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>呼び出す必要があります最初の更新の後など、メタデータが取得された後、<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>にメタデータを更新する方法</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A></xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>。       `SelectCommand`に少なくとも&1; つの主キーまたは一意の列にも返す必要があります。 存在しない場合、 **InvalidOperation**例外が生成され、コマンドは生成されません。       また、SqlCommandBuilder、使用、 <xref:System.Data.SqlClient.SqlCommand.Connection%2A>、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>、 <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>.</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>によって参照されるプロパティ</xref:System.Data.SqlClient.SqlCommand.Transaction%2A>と</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A></xref:System.Data.SqlClient.SqlCommand.Connection%2A> ユーザーが呼び出す必要があります<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>1 つ以上のこれらのプロパティを変更すると場合、または、<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>自体は置き換えられます</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A></xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>。 それ以外の場合、 <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>、 <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>、および<xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>プロパティは、前回の値を保持します</xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A></xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A></xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>。       呼び出す場合<xref:System.ComponentModel.Component.Dispose%2A>から、SqlCommandBuilder の関連付けが解除され、 <xref:System.Data.SqlClient.SqlDataAdapter>、され、生成されたコマンドは使用されなく</xref:System.Data.SqlClient.SqlDataAdapter></xref:System.ComponentModel.Component.Dispose%2A>。"
  example:
  - "The following example uses the <xref:System.Data.SqlClient.SqlCommand>, along <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlConnection>, to select rows from a data source. The example is passed a connection string, a query string that is a Transact-SQL SELECT statement, and a string that is the name of the database table. The example then creates a SqlCommandBuilder.  \n  \n [!code-vb[Classic WebData SqlCommandBuilder#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._12_1.vb)]\n [!code-cs[Classic WebData SqlCommandBuilder#1](~/add/codesnippet/csharp/t-system.data.sqlclient._12_1.cs)]"
  syntax:
    content: 'public sealed class SqlCommandBuilder : System.Data.Common.DbCommandBuilder'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbCommandBuilder
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbCommandBuilder.ConflictOption
  - System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)
  - System.Data.Common.DbCommandBuilder.RefreshSchema
  - System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbCommandBuilder.SetAllValues
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SqlCommandBuilder()
  nameWithType: SqlCommandBuilder.SqlCommandBuilder()
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref>クラスです。"
  syntax:
    content: public SqlCommandBuilder ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommandBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)
  id: '#ctor(System.Data.SqlClient.SqlDataAdapter)'
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SqlCommandBuilder(SqlDataAdapter)
  nameWithType: SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref> 、関連付けられているクラス<xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Data.SqlClient.SqlCommandBuilder>自体のリスナーとして登録<xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>によって生成されるイベント、<xref:System.Data.SqlClient.SqlDataAdapter>このプロパティで指定します</xref:System.Data.SqlClient.SqlDataAdapter></xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating></xref:System.Data.SqlClient.SqlCommandBuilder>。       新しいインスタンスを作成する場合<xref:System.Data.SqlClient.SqlCommandBuilder>、既存<xref:System.Data.SqlClient.SqlCommandBuilder>これに関連付けられている<xref:System.Data.SqlClient.SqlDataAdapter>を解放します</xref:System.Data.SqlClient.SqlDataAdapter></xref:System.Data.SqlClient.SqlCommandBuilder></xref:System.Data.SqlClient.SqlCommandBuilder>。"
  syntax:
    content: public SqlCommandBuilder (System.Data.SqlClient.SqlDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.SqlClient.SqlDataAdapter
      description: "名前、 <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlCommandBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  id: ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  nameWithType: SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow datarow, System.Data.StatementType statementType, bool whereClause);
    parameters:
    - id: parameter
      type: System.Data.Common.DbParameter
      description: "追加します。"
    - id: datarow
      type: System.Data.DataRow
      description: "追加します。"
    - id: statementType
      type: System.Data.StatementType
      description: "追加します。"
    - id: whereClause
      type: System.Boolean
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  id: CatalogLocation
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: CatalogLocation
  nameWithType: SqlCommandBuilder.CatalogLocation
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または設定、 <xref href=&quot;System.Data.Common.CatalogLocation&quot;> </xref>のインスタンスの<xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;></xref>クラスです。"
  syntax:
    content: public override System.Data.Common.CatalogLocation CatalogLocation { get; set; }
    return:
      type: System.Data.Common.CatalogLocation
      description: "A <xref href=&quot;System.Data.Common.CatalogLocation&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  id: CatalogSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: CatalogSeparator
  nameWithType: SqlCommandBuilder.CatalogSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "インスタンスのカタログの区切り記号として使用する文字列を取得または設定、 <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref>クラスです。"
  syntax:
    content: public override string CatalogSeparator { get; set; }
    return:
      type: System.String
      description: "インスタンスで使用するカタログの区切り記号を示す文字列、 <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref>クラスです。"
  overload: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  id: DataAdapter
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: DataAdapter
  nameWithType: SqlCommandBuilder.DataAdapter
  fullName: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または設定、 <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;> </xref>オブジェクトをどの TRANSACT-SQL ステートメントが自動的に生成します。"
  remarks: "<xref:System.Data.SqlClient.SqlCommandBuilder>自体のリスナーとして登録<xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>によって生成されるイベント、<xref:System.Data.SqlClient.SqlDataAdapter>このプロパティで指定します</xref:System.Data.SqlClient.SqlDataAdapter></xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating></xref:System.Data.SqlClient.SqlCommandBuilder>。       新しいインスタンスを作成する場合<xref:System.Data.SqlClient.SqlCommandBuilder>、既存<xref:System.Data.SqlClient.SqlCommandBuilder>これに関連付けられている<xref:System.Data.SqlClient.SqlDataAdapter>を解放します</xref:System.Data.SqlClient.SqlDataAdapter></xref:System.Data.SqlClient.SqlCommandBuilder></xref:System.Data.SqlClient.SqlCommandBuilder>。"
  syntax:
    content: public System.Data.SqlClient.SqlDataAdapter DataAdapter { get; set; }
    return:
      type: System.Data.SqlClient.SqlDataAdapter
      description: "A <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommandBuilder.DataAdapter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)
  id: DeriveParameters(System.Data.SqlClient.SqlCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: DeriveParameters(SqlCommand)
  nameWithType: SqlCommandBuilder.DeriveParameters(SqlCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(SqlCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定されたストアド プロシージャからパラメーター情報を取得、 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>取り込んで、<xref:System.Data.SqlClient.SqlCommand.Parameters*>の指定されたコレクション<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>オブジェクト</xref:System.Data.SqlClient.SqlCommand.Parameters*>。"
  remarks: "`DeriveParameters`既存のパラメーター情報を上書き、`SqlDbCommand`です。       `DeriveParameters`情報を取得するデータベースに追加の呼び出しが必要です。 パラメーター情報が事前にわかっている場合は、情報を明示的に設定して、パラメーター コレクションを設定する方が効率的です。       使用できるだけ`DeriveParameters`ストアド プロシージャを使用します。 使用することはできません`DeriveParameters`拡張ストアド プロシージャでします。 使用することはできません`DeriveParameters`を設定する、<xref:System.Data.SqlClient.SqlParameterCollection>パラメーター化された SELECT ステートメントなど、任意の TRANSACT-SQL ステートメントを使用します</xref:System.Data.SqlClient.SqlParameterCollection>。       詳細については、次を参照してください。[構成パラメーターとパラメーターのデータ型](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static void DeriveParameters (System.Data.SqlClient.SqlCommand command);
    parameters:
    - id: command
      type: System.Data.SqlClient.SqlCommand
      description: "<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>が、パラメーター情報の派生元となるストアド プロシージャを参照します。 派生パラメーターに追加されます、<xref:System.Data.SqlClient.SqlCommand.Parameters*>のコレクション、 <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref></xref:System.Data.SqlClient.SqlCommand.Parameters*> 。"
  overload: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "コマンド テキストは、有効なストアド プロシージャ名ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand
  id: GetDeleteCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetDeleteCommand()
  nameWithType: SqlCommandBuilder.GetDeleteCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "自動的に生成された取得<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>オブジェクト、データベースの削除を実行するために必要です。"
  remarks: "アプリケーションは、返すために、情報やトラブルシューティングのための GetDeleteCommand メソッドを使用できます、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト</xref:System.Data.SqlClient.SqlCommand>。       また、変更されたコマンドの基礎として GetDeleteCommand を使用することができます。 たとえば、可能性があります GetDeleteCommand を呼び出し<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値、および<xref:System.Data.SqlClient.SqlDataAdapter>。</xref:System.Data.SqlClient.SqlDataAdapter>ことを明示的に設定</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>を変更       アプリケーションが明示的に呼び出す必要があります、SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>任意の方法で、ステートメントが変更された場合</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>。 それ以外の場合、GetDeleteCommand が使用される情報を前のステートメントは、正しくない可能性があります。 SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または GetDeleteCommand</xref:System.Data.Common.DbDataAdapter.Update%2A> 。       詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetDeleteCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "自動的に生成された<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>削除を実行するために必要なオブジェクトです。"
  overload: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)
  id: GetDeleteCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetDeleteCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetDeleteCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "自動的に生成された取得<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>削除を実行するデータベースで必要なオブジェクトです。"
  remarks: "アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>。       使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>変更されたコマンドの基礎として</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>。 たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>し<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値、および<xref:System.Data.SqlClient.SqlDataAdapter>。</xref:System.Data.SqlClient.SqlDataAdapter>ことを明示的に設定</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>を変更</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>       アプリケーションが明示的に呼び出す必要があります、SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>任意の方法で、ステートメントが変更された場合</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>。 それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用される</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>。 SQL ステートメントは、アプリケーションがいずれか<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>。</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A>       使用するパラメーター名を生成するときに、既定の動作は、 @p1、 @p2、さまざまなパラメーターについてです。 渡す`true`の`useColumnsForParameterNames`パラメーターさせることができます、<xref:System.Data.OleDb.OleDbCommandBuilder>を代わりに、列名に基づいたパラメーターを生成します</xref:System.Data.OleDb.OleDbCommandBuilder>。 これが成功したら、次の条件を満たしている場合のみ: -<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>から返される、 **GetSchema**メソッドを呼び出すし、ではありません、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションが指定されており、その長さが同じかまたは生成されたパラメーター名よりも大きい</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation></xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>。      -生成されたパラメーターの名前で指定した条件を満たしている、<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>正規表現のコレクション</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation></xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>。      A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションを指定します</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation></xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>。       詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetDeleteCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>、可能な場合は、列名を一致するパラメーター名を生成します。 場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>、生成@p1、@p2のようにします。"
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "自動的に生成された<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>削除を実行する必要なオブジェクトです。"
  overload: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand
  id: GetInsertCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetInsertCommand()
  nameWithType: SqlCommandBuilder.GetInsertCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "自動的に生成された取得<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>データベースでの挿入を実行するために必要なオブジェクトです。"
  remarks: "アプリケーションは、返すために、情報やトラブルシューティングのための GetInsertCommand メソッドを使用できます、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト</xref:System.Data.SqlClient.SqlCommand>。       また、変更されたコマンドの基礎として GetInsertCommand を使用することができます。 たとえば、可能性があります GetInsertCommand を呼び出し<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値、および<xref:System.Data.SqlClient.SqlDataAdapter>。</xref:System.Data.SqlClient.SqlDataAdapter>ことを明示的に設定</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>を変更       アプリケーションが明示的に呼び出す必要があります: TRANSACT-SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>任意の方法で、ステートメントが変更された場合</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>。 それ以外の場合、GetInsertCommand が使用される情報を前のステートメントは、正しくない可能性があります。 TRANSACT-SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または GetInsertCommand</xref:System.Data.Common.DbDataAdapter.Update%2A> 。       詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetInsertCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "自動的に生成された<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>挿入を実行するために必要なオブジェクトです。"
  overload: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)
  id: GetInsertCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetInsertCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetInsertCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "自動的に生成された取得<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>挿入を実行するデータベースで必要なオブジェクトです。"
  remarks: "アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>。       使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>変更されたコマンドの基礎として</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>。 たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>し<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値、および<xref:System.Data.SqlClient.SqlDataAdapter>。</xref:System.Data.SqlClient.SqlDataAdapter>ことを明示的に設定</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>を変更</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>       アプリケーションが明示的に呼び出す必要があります: TRANSACT-SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>任意の方法で、ステートメントが変更された場合</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>。 それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用される</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>。 TRANSACT-SQL ステートメントは、アプリケーションがいずれか<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>。</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A>       使用するパラメーター名を生成するときに、既定の動作は、 @p1、 @p2、さまざまなパラメーターについてです。 渡す`true`の`useColumnsForParameterNames`パラメーターさせることができます、<xref:System.Data.OleDb.OleDbCommandBuilder>を代わりに、列名に基づいたパラメーターを生成します</xref:System.Data.OleDb.OleDbCommandBuilder>。 これが成功したら、次の条件を満たしている場合のみ: -<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>から返される、 **GetSchema**メソッドを呼び出すし、ではありません、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションが指定されており、その長さが同じかまたは生成されたパラメーター名よりも大きい</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation></xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>。      -生成されたパラメーターの名前で指定した条件を満たしている、<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>正規表現のコレクション</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation></xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>。      A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションを指定します</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation></xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>。       詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetInsertCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>、可能な場合は、列名を一致するパラメーター名を生成します。 場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>、生成@p1、@p2のようにします。"
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "自動的に生成された<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>挿入を実行する必要なオブジェクトです。"
  overload: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)
  id: GetParameterName(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetParameterName(Int32)
  nameWithType: SqlCommandBuilder.GetParameterName(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override string GetParameterName (int parameterOrdinal);
    parameters:
    - id: parameterOrdinal
      type: System.Int32
      description: "追加します。"
    return:
      type: System.String
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommandBuilder.GetParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)
  id: GetParameterName(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetParameterName(String)
  nameWithType: SqlCommandBuilder.GetParameterName(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override string GetParameterName (string parameterName);
    parameters:
    - id: parameterName
      type: System.String
      description: "追加します。"
    return:
      type: System.String
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommandBuilder.GetParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)
  id: GetParameterPlaceholder(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetParameterPlaceholder(Int32)
  nameWithType: SqlCommandBuilder.GetParameterPlaceholder(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override string GetParameterPlaceholder (int parameterOrdinal);
    parameters:
    - id: parameterOrdinal
      type: System.Int32
      description: "追加します。"
    return:
      type: System.String
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  id: GetSchemaTable(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetSchemaTable(DbCommand)
  nameWithType: SqlCommandBuilder.GetSchemaTable(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(DbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand srcCommand);
    parameters:
    - id: srcCommand
      type: System.Data.Common.DbCommand
      description: "追加します。"
    return:
      type: System.Data.DataTable
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand
  id: GetUpdateCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetUpdateCommand()
  nameWithType: SqlCommandBuilder.GetUpdateCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "自動的に生成された取得<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>オブジェクト、データベースに対する更新を実行するために必要です。"
  remarks: "アプリケーションは、返すために、情報やトラブルシューティングのための GetUpdateCommand メソッドを使用できます、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト</xref:System.Data.SqlClient.SqlCommand>。       また、変更されたコマンドの基礎として GetUpdateCommand を使用することができます。 たとえば、可能性があります GetUpdateCommand を呼び出し<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値、および<xref:System.Data.SqlClient.SqlDataAdapter>。</xref:System.Data.SqlClient.SqlDataAdapter>ことを明示的に設定</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>を変更       アプリケーションが明示的に呼び出す必要があります: TRANSACT-SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>任意の方法で、ステートメントが変更された場合</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>。 それ以外の場合、GetUpdateCommand が使用される情報を前のステートメントは、正しくない可能性があります。 TRANSACT-SQL ステートメントは、アプリケーションがいずれかの<xref:System.Data.Common.DbDataAdapter.Update%2A>または GetUpdateCommand</xref:System.Data.Common.DbDataAdapter.Update%2A> 。       詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetUpdateCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "自動的に生成された<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>更新を実行する必要なオブジェクトです。"
  overload: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)
  id: GetUpdateCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetUpdateCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetUpdateCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "自動的に生成された取得<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>オブジェクト、データベースに対する更新を実行するために必要です。"
  remarks: "アプリケーションで使用できます、<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>メソッド情報やトラブルシューティングの目的を返すので、<xref:System.Data.SqlClient.SqlCommand>を実行するオブジェクト</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>。       使用することも<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>変更されたコマンドの基礎として</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>。 たとえば、呼び出すことができます<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>し<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>値、および<xref:System.Data.SqlClient.SqlDataAdapter>。</xref:System.Data.SqlClient.SqlDataAdapter>ことを明示的に設定</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>を変更</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>       アプリケーションが明示的に呼び出す必要があります: TRANSACT-SQL ステートメントを生成後<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>任意の方法で、ステートメントが変更された場合</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>。 それ以外の場合、<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>正しくない可能性があります、前のステートメントからの情報が使用される</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>。 TRANSACT-SQL ステートメントは、アプリケーションがいずれか<xref:System.Data.Common.DbDataAdapter.Update%2A>または<xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>。</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A>       使用するパラメーター名を生成するときに、既定の動作は、 @p1、 @p2、さまざまなパラメーターについてです。 渡す`true`の`useColumnsForParameterNames`パラメーターさせることができます、<xref:System.Data.OleDb.OleDbCommandBuilder>を代わりに、列名に基づいたパラメーターを生成します</xref:System.Data.OleDb.OleDbCommandBuilder>。 これが成功したら、次の条件を満たしている場合のみ: -<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>から返される、 **GetSchema**メソッドを呼び出すし、ではありません、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションが指定されており、その長さが同じかまたは生成されたパラメーター名よりも大きい</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation></xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>。      -生成されたパラメーターの名前で指定した条件を満たしている、<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>正規表現のコレクション</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation></xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>。      A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>から返される、 **GetSchema**メソッドを呼び出すしで見つかった、<xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>コレクションを指定します</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation></xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>。       詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetUpdateCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>、可能な場合は、列名を一致するパラメーター名を生成します。 場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>、生成@p1、@p2のようにします。"
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "自動的に生成された<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>オブジェクトの更新を実行するために必要です。"
  overload: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  id: InitializeCommand(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: InitializeCommand(DbCommand)
  nameWithType: SqlCommandBuilder.InitializeCommand(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(DbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);
    parameters:
    - id: command
      type: System.Data.Common.DbCommand
      description: "追加します。"
    return:
      type: System.Data.Common.DbCommand
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)
  id: QuoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: QuoteIdentifier(String)
  nameWithType: SqlCommandBuilder.QuoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "正しいカタログ ケースで囲まれていない識別子、指定したを返します、正しい形式の id を引用符で囲まれました。 これには、識別子に埋め込まれた引用符は、正しくエスケープが含まれます。"
  syntax:
    content: public override string QuoteIdentifier (string unquotedIdentifier);
    parameters:
    - id: unquotedIdentifier
      type: System.String
      description: "元の囲まれていない識別子です。"
    return:
      type: System.String
      description: "引用符で囲まれた識別子のバージョンです。 Id 内に埋め込まれた引用符は、正しくエスケープします。"
  overload: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  id: QuotePrefix
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: QuotePrefix
  nameWithType: SqlCommandBuilder.QuotePrefix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または開始文字以上のテーブルまたは名前にスペースまたは予約済みトークンなどの文字を含む列などの SQL Server データベース オブジェクトを指定するときに使用する文字を設定します。"
  remarks: >-
    > [!NOTE]

    >  Although you cannot change the QuotePrefix or <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a DataAdapter.
  syntax:
    content: public override string QuotePrefix { get; set; }
    return:
      type: System.String
      description: "開始する文字または文字列を使用します。 既定では、空の文字列です。"
  overload: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このプロパティは、INSERT、UPDATE、後に変更することはできませんまたは DELETE コマンドが生成されました。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  id: QuoteSuffix
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: QuoteSuffix
  nameWithType: SqlCommandBuilder.QuoteSuffix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得または終了文字以上のテーブルまたは名前にスペースまたは予約済みトークンなどの文字を含む列などの SQL Server データベース オブジェクトを指定するときに使用する文字を設定します。"
  remarks: >-
    > [!NOTE]

    >  Although you cannot change the <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> or QuoteSuffix properties after an insert, update, or delete operation has been generated, you can change their settings after calling the `Update` method of a DataAdapter.
  syntax:
    content: public override string QuoteSuffix { get; set; }
    return:
      type: System.String
      description: "最後の文字またはを使用する文字列。 既定では、空の文字列です。"
  overload: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Insert、update、または delete コマンドが生成された後に、このプロパティを変更できません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  id: SchemaSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SchemaSeparator
  nameWithType: SqlCommandBuilder.SchemaSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得またはスキーマ識別子とその他の id の間の区切り記号に使用する文字を設定します。"
  remarks: "一般に、データベース サーバーは、いくつかの文字を持つ id からスキーマ名を区切ることによって、識別子のスキーマを示します。 たとえば、SQL Server はピリオド、Person.CustomerName、&quot;Person&quot;、スキーマ名があり、識別子は、&quot;CustomerName&quot;などの完全な識別子を作成します。 このプロパティの設定には、開発者はこの動作を変更することができます。"
  syntax:
    content: public override string SchemaSeparator { get; set; }
    return:
      type: System.String
      description: "スキーマの区切り記号として使用する文字。"
  overload: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  id: SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SetRowUpdatingHandler(DbDataAdapter)
  nameWithType: SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "追加します。"
  overload: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)
  id: UnquoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: UnquoteIdentifier(String)
  nameWithType: SqlCommandBuilder.UnquoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "引用符で囲まれた識別子では、指定した識別子の正しい引用符なしの形式を返します。 これには、識別子に埋め込まれた引用符を正しくエスケープ解除が含まれます。"
  syntax:
    content: public override string UnquoteIdentifier (string quotedIdentifier);
    parameters:
    - id: quotedIdentifier
      type: System.String
      description: "埋め込まれた引用符が削除される id。"
    return:
      type: System.String
      description: "正しくエスケープ解除された埋め込み文字を引用符で囲まれていない識別子です。"
  overload: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: System.Data.Common.DbCommandBuilder
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SqlCommandBuilder()
  nameWithType: SqlCommandBuilder.SqlCommandBuilder()
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder()
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SqlCommandBuilder(SqlDataAdapter)
  nameWithType: SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
- uid: System.Data.SqlClient.SqlDataAdapter
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlDataAdapter
  nameWithType: SqlDataAdapter
  fullName: System.Data.SqlClient.SqlDataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  nameWithType: SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
- uid: System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: false
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogLocation
  nameWithType: SqlCommandBuilder.CatalogLocation
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
- uid: System.Data.Common.CatalogLocation
  parent: System.Data.Common
  isExternal: false
  name: CatalogLocation
  nameWithType: CatalogLocation
  fullName: System.Data.Common.CatalogLocation
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogSeparator
  nameWithType: SqlCommandBuilder.CatalogSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DataAdapter
  nameWithType: SqlCommandBuilder.DataAdapter
  fullName: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DeriveParameters(SqlCommand)
  nameWithType: SqlCommandBuilder.DeriveParameters(SqlCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(SqlCommand)
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetDeleteCommand()
  nameWithType: SqlCommandBuilder.GetDeleteCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand()
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetDeleteCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetDeleteCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(Boolean)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetInsertCommand()
  nameWithType: SqlCommandBuilder.GetInsertCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand()
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetInsertCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetInsertCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(Boolean)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterName(Int32)
  nameWithType: SqlCommandBuilder.GetParameterName(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterName(String)
  nameWithType: SqlCommandBuilder.GetParameterName(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(String)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterPlaceholder(Int32)
  nameWithType: SqlCommandBuilder.GetParameterPlaceholder(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(Int32)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetSchemaTable(DbCommand)
  nameWithType: SqlCommandBuilder.GetSchemaTable(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(DbCommand)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetUpdateCommand()
  nameWithType: SqlCommandBuilder.GetUpdateCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand()
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetUpdateCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetUpdateCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(Boolean)
- uid: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: InitializeCommand(DbCommand)
  nameWithType: SqlCommandBuilder.InitializeCommand(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(DbCommand)
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteIdentifier(String)
  nameWithType: SqlCommandBuilder.QuoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(String)
- uid: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuotePrefix
  nameWithType: SqlCommandBuilder.QuotePrefix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteSuffix
  nameWithType: SqlCommandBuilder.QuoteSuffix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
- uid: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SchemaSeparator
  nameWithType: SqlCommandBuilder.SchemaSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
- uid: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SetRowUpdatingHandler(DbDataAdapter)
  nameWithType: SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: UnquoteIdentifier(String)
  nameWithType: SqlCommandBuilder.UnquoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(String)
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SqlCommandBuilder
  nameWithType: SqlCommandBuilder.SqlCommandBuilder
- uid: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: ApplyParameterInfo
  nameWithType: SqlCommandBuilder.ApplyParameterInfo
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogLocation
  nameWithType: SqlCommandBuilder.CatalogLocation
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogSeparator
  nameWithType: SqlCommandBuilder.CatalogSeparator
- uid: System.Data.SqlClient.SqlCommandBuilder.DataAdapter*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DataAdapter
  nameWithType: SqlCommandBuilder.DataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DeriveParameters
  nameWithType: SqlCommandBuilder.DeriveParameters
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetDeleteCommand
  nameWithType: SqlCommandBuilder.GetDeleteCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetInsertCommand
  nameWithType: SqlCommandBuilder.GetInsertCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterName
  nameWithType: SqlCommandBuilder.GetParameterName
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterPlaceholder
  nameWithType: SqlCommandBuilder.GetParameterPlaceholder
- uid: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetSchemaTable
  nameWithType: SqlCommandBuilder.GetSchemaTable
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetUpdateCommand
  nameWithType: SqlCommandBuilder.GetUpdateCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: InitializeCommand
  nameWithType: SqlCommandBuilder.InitializeCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteIdentifier
  nameWithType: SqlCommandBuilder.QuoteIdentifier
- uid: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuotePrefix
  nameWithType: SqlCommandBuilder.QuotePrefix
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteSuffix
  nameWithType: SqlCommandBuilder.QuoteSuffix
- uid: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SchemaSeparator
  nameWithType: SqlCommandBuilder.SchemaSeparator
- uid: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SetRowUpdatingHandler
  nameWithType: SqlCommandBuilder.SetRowUpdatingHandler
- uid: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: UnquoteIdentifier
  nameWithType: SqlCommandBuilder.UnquoteIdentifier
