### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpClient
  id: UdpClient
  children:
  - System.Net.Sockets.UdpClient.#ctor
  - System.Net.Sockets.UdpClient.#ctor(System.Int32)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Active
  - System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.UdpClient.Available
  - System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.Client
  - System.Net.Sockets.UdpClient.Close
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Dispose
  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  - System.Net.Sockets.UdpClient.DontFragment
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.EnableBroadcast
  - System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  - System.Net.Sockets.UdpClient.ExclusiveAddressUse
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.MulticastLoopback
  - System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.ReceiveAsync
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Ttl
  langs:
  - csharp
  name: UdpClient
  nameWithType: UdpClient
  fullName: System.Net.Sockets.UdpClient
  type: Class
  summary: "ユーザー データグラム プロトコル (UDP) ネットワーク サービスを提供します。"
  remarks: "The UdpClient class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \n  \n-   Create an instance of the UdpClient class using the remote host name and port number as parameters.  \n  \n-   Create an instance of the UdpClient class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \n  \n You can use any of the send methods provided in the UdpClient to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \n  \n> [!NOTE]\n>  Do not call [Send(Byte\\[\\], Int32, IPEndPoint)](assetId:///M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)?qualifyHint=False&autoUpgrade=True) using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, UdpClient will throw an exception.  \n  \n UdpClient methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a UdpClient to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a UdpClient from a multicast group."
  example:
  - "The following example establishes a UdpClient connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \n  \n [!code-vb[Classic UdpClientExample#1](~/add/codesnippet/visualbasic/t-system.net.sockets.udp_1.vb)]\n [!code-cpp[Classic UdpClientExample#1](~/add/codesnippet/cpp/t-system.net.sockets.udp_1.cpp)]\n [!code-cs[Classic UdpClientExample#1](~/add/codesnippet/csharp/t-system.net.sockets.udp_1.cs)]"
  syntax:
    content: 'public class UdpClient : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターが新たに作成<xref:System.Net.Sockets.UdpClient>し、基になるサービス プロバイダーが、最も適切なローカル IPv4 アドレスとポート番号を割り当てることができます</xref:System.Net.Sockets.UdpClient>。 このコンス トラクターを使用する場合、<xref:System.Net.Sockets.UdpClient>インスタンスが変更されたか IPv6 ターゲット接続メソッドの呼び出しによって上書きされることはできませんを IPv4 のアドレス ファミリで設定します</xref:System.Net.Sockets.UdpClient>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。       このコンス トラクターは、ソケットのバインドを実行しないため、マルチキャスト グループに参加させるに適したはありません。 また、IPv4 アドレスの種類でのみ動作します。"
  example:
  - "The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.udp_11_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.udp_11_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_11_1.vb)]"
  syntax:
    content: public UdpClient ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>クラスし、指定されたローカル ポート番号にバインドします。"
  remarks: "このコンス トラクターを作成、基になる<xref:System.Net.Sockets.Socket>し通信するために使用するポート番号にバインドします</xref:System.Net.Sockets.Socket>。 関心がある場合のみローカルのポート番号の設定では、このコンス トラクターを使用します。 基になるサービス プロバイダーでは、ローカル IP アドレスを割り当てます。 コンス トラクターに 0 を渡すと、基になるサービス プロバイダーは、ポート番号を割り当てます。 このコンス トラクターを使用する場合、<xref:System.Net.Sockets.UdpClient>インスタンスが変更されたか IPv6 ターゲット接続メソッドの呼び出しによって上書きされることはできませんを IPv4 のアドレス ファミリで設定します</xref:System.Net.Sockets.UdpClient>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。       このコンス トラクターは、IPv4 アドレスの種類でのみ動作します。"
  example:
  - "The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_4_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_4_1.vb)]"
  syntax:
    content: public UdpClient (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "通信するために使用するローカル ポート番号。"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> port </code>パラメーターがより大きい<xref:System.Net.IPEndPoint.MaxPort>か<xref:System.Net.IPEndPoint.MinPort>.</xref:System.Net.IPEndPoint.MinPort>より小さい</xref:System.Net.IPEndPoint.MaxPort>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>クラスし、指定したローカル エンドポイントにバインドします。"
  remarks: "このコンス トラクターが新たに作成<xref:System.Net.Sockets.UdpClient>にバインドし、<xref:System.Net.IPEndPoint>によって指定された、`localEP`パラメーター</xref:System.Net.IPEndPoint> </xref:System.Net.Sockets.UdpClient> 。 このコンス トラクターを呼び出す前に作成する必要があります、<xref:System.Net.IPEndPoint>データを送受信する IP アドレスとポート番号を使用します</xref:System.Net.IPEndPoint>。 データを送受信するためのローカル IP アドレスとポート番号を指定する必要はありません。 そうしないと、基になるサービス プロバイダーは、最も適切なローカル IP アドレスとポート番号を割り当てます。       このコンス トラクターを使用する場合、<xref:System.Net.Sockets.UdpClient>で指定したアドレス ファミリでインスタンスが設定されている、`localEP`パラメーターを変更したり、別のアドレス ファミリの connect メソッドの呼び出しで上書きすることはできません</xref:System.Net.Sockets.UdpClient>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_9_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_9_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_9_1.vb)]"
  syntax:
    content: public UdpClient (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>を表す、UDP 接続をバインドするローカル エンドポイント</xref:System.Net.IPEndPoint>。"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>クラスです。"
  remarks: "`family`パラメーターは、リスナーは、IP バージョン 4 アドレス (IPv4) または IP version 6 (IPv6) を使用するかどうかを判断アドレス。 使用するには、IPv4 アドレスを渡す、<xref:System.Net.Sockets.AddressFamily>値</xref:System.Net.Sockets.AddressFamily>。 IPv6 アドレスを使用するに渡す、<xref:System.Net.Sockets.AddressFamily>値</xref:System.Net.Sockets.AddressFamily>。 その他の値を渡すことにより、 <xref:System.ArgumentException>。</xref:System.ArgumentException>をスローするメソッド       このコンス トラクターを使用する場合、<xref:System.Net.Sockets.UdpClient>で指定したアドレス ファミリでインスタンスが設定されている、`family`パラメーターを変更したり、別のアドレス ファミリの connect メソッドの呼び出しで上書きすることはできません</xref:System.Net.Sockets.UdpClient>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。       UdpClient は、ソケットのバインドを実行しないため、マルチキャスト グループに参加させるのには適していません。"
  syntax:
    content: public UdpClient (System.Net.Sockets.AddressFamily family);
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "1 つ、<xref:System.Net.Sockets.AddressFamily>ソケットのアドレス指定スキームを指定する値</xref:System.Net.Sockets.AddressFamily>。"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>クラスし、指定されたローカル ポート番号にバインドします。"
  remarks: "このコンス トラクターを作成、基になる<xref:System.Net.Sockets.Socket>し通信するために使用するポート番号にバインドします</xref:System.Net.Sockets.Socket>。       `family`パラメーターは、リスナーは、IP バージョン 4 アドレス (IPv4) または IP version 6 (IPv6) を使用するかどうかを判断アドレス。 使用するには、IPv4 アドレスを渡す、<xref:System.Net.Sockets.AddressFamily>値</xref:System.Net.Sockets.AddressFamily>。 IPv6 アドレスを使用するに渡す、<xref:System.Net.Sockets.AddressFamily>値</xref:System.Net.Sockets.AddressFamily>。 その他の値を渡すことにより、 <xref:System.ArgumentException>。</xref:System.ArgumentException>をスローするメソッド       このコンス トラクターを使用する場合、<xref:System.Net.Sockets.UdpClient>で指定したアドレス ファミリでインスタンスが設定されている、`family`パラメーターを変更したり、別のアドレス ファミリの connect メソッドの呼び出しで上書きすることはできません</xref:System.Net.Sockets.UdpClient>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照してください。"
  example:
  - "The following code example shows how to create a UDP client to use in a multicast group.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/cpp/c2c91fdb-fd73-47cc-8239-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/visualbasic/c2c91fdb-fd73-47cc-8239-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/csharp/c2c91fdb-fd73-47cc-8239-_1.cs)]"
  syntax:
    content: public UdpClient (int port, System.Net.Sockets.AddressFamily family);
    parameters:
    - id: port
      type: System.Int32
      description: "着信接続の試行をリッスンするポートです。"
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "1 つ、<xref:System.Net.Sockets.AddressFamily>ソケットのアドレス指定スキームを指定する値</xref:System.Net.Sockets.AddressFamily>。"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>大きい<xref:System.Net.IPEndPoint.MaxPort>またはより小さい<xref:System.Net.IPEndPoint.MinPort>です。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>クラスし、既定のリモート ホストを確立します。"
  remarks: "このコンス トラクターを新しい初期化<xref:System.Net.Sockets.UdpClient>を使用してリモート ホストを確立し、`hostname`と`port`パラメーター</xref:System.Net.Sockets.UdpClient> 。 既定のリモート ホストを確立することはオプションです。 このコンス トラクターを使用する場合を呼び出すたびにリモート ホストを指定する必要はありません、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド</xref:System.Net.Sockets.UdpClient.Send%2A>。 既定のリモート ホストを指定すると、そのホストにのみ制限されます。 いつでも既定のリモート ホストを変更するには呼び出すことによって、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド</xref:System.Net.Sockets.UdpClient.Connect%2A>。 呼び出しでリモート ホストを指定するかどうか、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドでは、このコンス トラクターを使用しないでください</xref:System.Net.Sockets.UdpClient.Send%2A>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.udp_7_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.udp_7_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_7_1.vb)]"
  syntax:
    content: public UdpClient (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "接続先のリモートの DNS ホストの名前。"
    - id: port
      type: System.Int32
      description: "接続先のリモートのポート番号。"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hostname</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>間<xref:System.Net.IPEndPoint.MinPort>と<xref:System.Net.IPEndPoint.MaxPort>です。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Active
  id: Active
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "取得または既定のリモート ホストが確立されているかどうかを示す値を設定します。"
  remarks: "派生するクラス<xref:System.Net.Sockets.UdpClient>このプロパティを使用して既定のリモート ホストが確立されているかどうかを決定できます</xref:System.Net.Sockets.UdpClient>。 既定のリモート ホストを確立するには、適切なコンス トラクターを使用または呼び出すことによって、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド</xref:System.Net.Sockets.UdpClient.Connect%2A>。 既定のリモート ホストを確立すると場合、 <xref:System.Net.Sockets.UdpClient.Send%2A>。</xref:System.Net.Sockets.UdpClient.Send%2A>への呼び出しでリモート ホストを指定できません。"
  syntax:
    content: protected bool Active { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>接続がアクティブである場合はそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Sockets.UdpClient.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "有効または無効にネットワーク アドレス変換 (NAT) トラバーサル、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>インスタンス。"
  remarks: "AllowNatTraversal メソッドが有効にするにまたは NAT トラバーサルを無効にするため、<xref:System.Net.Sockets.UdpClient>インスタンス</xref:System.Net.Sockets.UdpClient>。 NAT トラバーサルを指定するには、Teredo、6to4、または ISATAP トンネルを使用します。       ときに、`allowed`パラメーターが false の場合、 <xref:System.Net.Sockets.SocketOptionName> <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel>に関連付けられているソケットでオプションが設定されています。</xref:System.Net.Sockets.SocketOptionName> NAT トラバーサルが明示的に無効になります、<xref:System.Net.Sockets.UdpClient>インスタンス</xref:System.Net.Sockets.UdpClient>。       ときに、`allowed`パラメーターが true の場合、 <xref:System.Net.Sockets.SocketOptionName> <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel>に関連付けられているソケットでオプションが設定されています。</xref:System.Net.Sockets.SocketOptionName> これは、NAT トラバーサルを許可することがあります、<xref:System.Net.Sockets.UdpClient>システム上でファイアウォール規則によって異なります</xref:System.Net.Sockets.UdpClient>。       Teredo アドレスは、IPv6 アドレス プレフィックスが 2001年::/32 です。 Teredo アドレスは、通常の DNS 名解決によって返されるまたはローカル インターフェイスに割り当てられている IPv6 アドレスとして列挙できます。"
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "有効にするか、NAT トラバーサルを無効にするかどうかを指定するブール値。"
  overload: System.Net.Sockets.UdpClient.AllowNatTraversal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Available
  id: Available
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "読み取り可能なネットワークから受信したデータの量を取得します。"
  remarks: "使用可能なプロパティを使用すると、読み取り用のネットワーク バッファーにキューに置かれたデータの量を決定します。 データが使用可能な場合は、呼び出す<xref:System.Net.Sockets.NetworkStream.Read%2A>データを取得します</xref:System.Net.Sockets.NetworkStream.Read%2A>。 使用可能なデータがない場合は、使用可能なプロパティは 0 を返します。       リモート ホストはシャット ダウンまたは接続を閉じ、使用可能なプロパティをスロー <xref:System.Net.Sockets.SocketException>。</xref:System.Net.Sockets.SocketException>      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>を特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/エラーの詳細な説明をします</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。"
  example:
  - "The following code example shows the use of the Available property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_1_1.cpp)]"
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: "ネットワークから受信したデータのバイト数。"
  overload: System.Net.Sockets.UdpClient.Available*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットへのアクセス中にエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  id: BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "非同期的に、リモート ホストからデータグラムを受信します。"
  remarks: "呼び出して、非同期 BeginReceive 操作を完了する必要があります、<xref:System.Net.Sockets.UdpClient.EndReceive%2A>メソッド</xref:System.Net.Sockets.UdpClient.EndReceive%2A>。 通常、このメソッドはによって、`requestCallback`を委任します。       このメソッドは、操作が完了するまでにはブロックされません。 使用して、操作が完了するまで、禁止する、<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッド</xref:System.Net.Sockets.UdpClient.Receive%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example uses BeginReceive to asynchronously receive a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_12_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_12_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>操作の完了時に呼び出すメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "受信操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、`requestCallback`委任操作が完了するとします。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期の受信を参照するオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.Sockets.UdpClient.BeginReceive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "リモート ホストに、データグラムを非同期的に送信します。 転送先に指定された以前<xref:System.Net.Sockets.UdpClient.Connect*>。</xref:System.Net.Sockets.UdpClient.Connect*>への呼び出し"
  remarks: "呼び出して、非同期 BeginSend 操作を完了する必要があります、<xref:System.Net.Sockets.UdpClient.EndSend%2A>メソッド</xref:System.Net.Sockets.UdpClient.EndSend%2A>。 通常、このメソッドはによって、`requestCallback`を委任します。       このメソッドは、操作が完了するまでにはブロックされません。 操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドのオーバー ロード</xref:System.Net.Sockets.UdpClient.Send%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example uses BeginSend to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A<xref:System.Byte>を送信するデータを格納する配列</xref:System.Byte>。"
    - id: bytes
      type: System.Int32
      description: "送信するバイト数。"
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>操作の完了時に呼び出すメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "送信操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、`requestCallback`委任操作が完了するとします。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期送信を参照するオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "変換先にデータグラムを非同期的に送信します。 変換先が<xref:System.Net.EndPoint>。</xref:System.Net.EndPoint>で指定されました。"
  remarks: "呼び出して、非同期 BeginSend 操作を完了する必要があります、<xref:System.Net.Sockets.UdpClient.EndSend%2A>メソッド</xref:System.Net.Sockets.UdpClient.EndSend%2A>。 通常、このメソッドはによって、`requestCallback`を委任します。       このメソッドは、操作が完了するまでにはブロックされません。 操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドのオーバー ロード</xref:System.Net.Sockets.UdpClient.Send%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A<xref:System.Byte>を送信するデータを格納する配列</xref:System.Byte>。"
    - id: bytes
      type: System.Int32
      description: "送信するバイト数。"
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.EndPoint>、データの変換先を表す</xref:System.Net.EndPoint>。"
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>操作の完了時に呼び出すメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "送信操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、`requestCallback`委任操作が完了するとします。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期送信を参照するオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "変換先にデータグラムを非同期的に送信します。 ホスト名で、変換先を指定し、ポート番号。"
  remarks: "呼び出して、非同期 BeginSend 操作を完了する必要があります、<xref:System.Net.Sockets.UdpClient.EndSend%2A>メソッド</xref:System.Net.Sockets.UdpClient.EndSend%2A>。 通常、このメソッドはによって、`requestCallback`を委任します。       このメソッドは、操作が完了するまでにはブロックされません。 操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドのオーバー ロード</xref:System.Net.Sockets.UdpClient.Send%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "A<xref:System.Byte>を送信するデータを格納する配列</xref:System.Byte>。"
    - id: bytes
      type: System.Int32
      description: "送信するバイト数。"
    - id: hostname
      type: System.String
      description: "送信先のホスト。"
    - id: port
      type: System.Int32
      description: "宛先ポート番号。"
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>操作の完了時に呼び出すメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "送信操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、`requestCallback`委任操作が完了するとします。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期送信を参照するオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Client
  id: Client
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "取得または設定の基になるネットワーク<xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>"
  remarks: "<xref:System.Net.Sockets.UdpClient>作成、 <xref:System.Net.Sockets.Socket>、ネットワーク経由でデータを送受信するために使用します</xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.UdpClient> <xref:System.Net.Sockets.UdpClient>このプロパティを取得またはこの<xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>の設定を使用することができます</xref:System.Net.Sockets.UdpClient> から派生するクラス 使用して、基になる<xref:System.Net.Sockets.Socket>する以上のアクセスを必要とする場合、クライアントから返されたを<xref:System.Net.Sockets.UdpClient>を提供します</xref:System.Net.Sockets.UdpClient></xref:System.Net.Sockets.Socket>。 設定する、基になる<xref:System.Net.Sockets.Socket>既存の<xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>に</xref:System.Net.Sockets.Socket>クライアントを使用することもできます。 これは、わかりやすくするため<xref:System.Net.Sockets.UdpClient>の既存の<xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient>を使用するを利用する場合に役立ちます。"
  example:
  - "The following example demonstrates the use of the Client property. In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cs[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_0_1.cs)]\n [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_0_1.cpp)]\n [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/p-system.net.sockets.udp_0_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket Client { get; set; }
    return:
      type: System.Net.Sockets.Socket
      description: "基になるネットワーク<xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.UdpClient.Client*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Close
  id: Close
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "UDP 接続を閉じます。"
  remarks: "閉じる無効にして、基になる<xref:System.Net.Sockets.Socket><xref:System.Net.Sockets.UdpClient>。</xref:System.Net.Sockets.UdpClient>に関連付けられているすべてのマネージ コードとアンマネージ リソースを解放し、</xref:System.Net.Sockets.Socket>      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  example:
  - "The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the Close method.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/csharp/m-system.net.sockets.udp_10_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/cpp/m-system.net.sockets.udp_10_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_10_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Close*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  id: Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "指定したネットワーク エンドポイントを使用する既定のリモート ホストを確立します。"
  remarks: "<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドで指定された値を使用して既定のリモート ホストの確立、`endPoint`パラメーター</xref:System.Net.Sockets.UdpClient.Connect%2A> 。 確立されるを呼び出すたびに、リモート ホストを指定する必要はありません、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド</xref:System.Net.Sockets.UdpClient.Send%2A>。       既定のリモート ホストを確立することはオプションです。 既定のリモート ホストを指定すると、そのホストにのみ制限されます。 別のリモート ホストにデータグラムを送信する場合は、別の呼び出しを行う必要があります、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドを作成または<xref:System.Net.Sockets.UdpClient>既定のリモート ホストなし</xref:System.Net.Sockets.UdpClient></xref:System.Net.Sockets.UdpClient.Connect%2A>。 既定のリモートが確立されている場合は、ホストも入力するリモート ホスト呼び出しにこの<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドは、 <xref:System.Net.Sockets.UdpClient.Send%2A> <xref:System.Net.Sockets.SocketException>。</xref:System.Net.Sockets.SocketException>がスローされます。</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。       呼び出す場合は、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドは、指定した既定値は破棄されます以外のアドレスから到着したデータグラム</xref:System.Net.Sockets.Socket.Connect%2A>。 継承する場合を除き、このメソッドを使用してブロードキャスト アドレスに既定のリモート ホストを設定することはできません<xref:System.Net.Sockets.UdpClient>、クライアントのメソッドを使用して、基になるを取得する<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName></xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>ソケット オプションを設定および</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient>。       ただしことができます、指定した場合、既定値にブロードキャスト データ ブロードキャスト アドレス、255.255.255.255、<xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>への呼び出しで、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド</xref:System.Net.Sockets.UdpClient.Send%2A></xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>。 アプリケーションには、ブロードキャスト アドレスより詳細な制御が必要とする場合、<xref:System.Net.Sockets.Socket>クラス</xref:System.Net.Sockets.Socket>を使用してに戻すこともできます。      > [!NOTE] > ための UDP プロトコルは、コネクションレス、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドをブロックしません</xref:System.Net.Sockets.UdpClient.Connect%2A>。 呼び出す必要はありません、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド マルチキャスト データグラムを受信する場合</xref:System.Net.Sockets.UdpClient.Connect%2A>。"
  example:
  - "The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/csharp/m-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/cpp/m-system.net.sockets.udp_1_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_1_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPEndPoint endPoint);
    parameters:
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>データを送信する先のネットワーク エンドポイントを指定します</xref:System.Net.IPEndPoint>。"
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>endPoint</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>が閉じられます。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "指定された IP アドレスとポート番号を使用して既定のリモート ホストを確立します。"
  remarks: "<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドで指定された値を使用して既定のリモート ホストの確立、`addr`と`port`パラメーター</xref:System.Net.Sockets.UdpClient.Connect%2A> 。 確立されるを呼び出すたびに、リモート ホストを指定する必要はありません、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド</xref:System.Net.Sockets.UdpClient.Send%2A>。       既定のリモート ホストを確立することはオプションです。 既定のリモート ホストを指定すると、そのホストにのみ制限されます。 別のリモート ホストにデータグラムを送信する場合は、別の呼び出しを行う必要があります、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドを作成または<xref:System.Net.Sockets.UdpClient>既定のリモート ホストなし</xref:System.Net.Sockets.UdpClient></xref:System.Net.Sockets.UdpClient.Connect%2A>。 既定のリモートが確立されている場合は、ホストも入力するリモート ホスト呼び出しにこの<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドは、 <xref:System.Net.Sockets.UdpClient.Send%2A> <xref:System.Net.Sockets.SocketException>。</xref:System.Net.Sockets.SocketException>がスローされます。</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。       呼び出す場合は、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドは、指定した既定値は破棄されます以外のアドレスから到着したデータグラム</xref:System.Net.Sockets.Socket.Connect%2A>。 継承する場合を除き、このメソッドを使用してブロードキャスト アドレスに既定のリモート ホストを設定することはできません<xref:System.Net.Sockets.UdpClient>、クライアントのメソッドを使用して、基になるを取得する<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName></xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>ソケット オプションを設定および</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient>。       ただしことができます、指定した場合、既定値にブロードキャスト データ ブロードキャスト アドレス、255.255.255.255、<xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>への呼び出しで、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド</xref:System.Net.Sockets.UdpClient.Send%2A></xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>。 アプリケーションには、ブロードキャスト アドレスより詳細な制御が必要とする場合、<xref:System.Net.Sockets.Socket>クラス</xref:System.Net.Sockets.Socket>を使用してに戻すこともできます。      > [!NOTE] > ための UDP プロトコルは、コネクションレス、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドをブロックしません</xref:System.Net.Sockets.UdpClient.Connect%2A>。 呼び出す必要はありません、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド マルチキャスト データグラムを受信する場合</xref:System.Net.Sockets.UdpClient.Connect%2A>。"
  example:
  - "The following example uses an IP address and port number to connect with a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/csharp/m-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/cpp/m-system.net.sockets.udp_6_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_6_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPAddress addr, int port);
    parameters:
    - id: addr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>データを送信する先のリモート ホストの</xref:System.Net.IPAddress>。"
    - id: port
      type: System.Int32
      description: "先のポート番号は、データを送信します。"
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>閉じています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>addr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>間<xref:System.Net.IPEndPoint.MinPort>と<xref:System.Net.IPEndPoint.MaxPort>です。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "指定して既定のリモート ホストを確立ホスト名とポート番号。"
  remarks: "Connect メソッドで指定された値を使用して既定のリモート ホストの確立、`port`と`hostname`のパラメーターです。 確立されるを呼び出すたびに、リモート ホストを指定する必要はありません、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド</xref:System.Net.Sockets.UdpClient.Send%2A>。       既定のリモート ホストを確立することはオプションです。 既定のリモート ホストを指定すると、そのホストにのみ制限されます。 別のリモート ホストにデータグラムを送信する場合は、する必要があります Connect メソッドを呼び出すか、別の作成別<xref:System.Net.Sockets.UdpClient>既定のリモート ホストなし</xref:System.Net.Sockets.UdpClient>。       既定のリモートが確立されている場合は、ホストも入力するリモート ホスト呼び出しにこの<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドは、 <xref:System.Net.Sockets.UdpClient.Send%2A> <xref:System.Net.Sockets.SocketException>。</xref:System.Net.Sockets.SocketException>がスローされます。</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。       呼び出す場合は、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドは、指定した既定値は破棄されます以外のアドレスから到着したデータグラム</xref:System.Net.Sockets.Socket.Connect%2A>。 継承する場合を除き、このメソッドを使用してブロードキャスト アドレスに既定のリモート ホストを設定することはできません<xref:System.Net.Sockets.UdpClient>、クライアントのメソッドを使用して、基になるを取得する<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName></xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>ソケット オプションを設定および</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient>。       ただしことができます、指定した場合、既定値にブロードキャスト データ ブロードキャスト アドレス、255.255.255.255、<xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>への呼び出しで、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド</xref:System.Net.Sockets.UdpClient.Send%2A></xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>。 アプリケーションには、ブロードキャスト アドレスより詳細な制御が必要とする場合、<xref:System.Net.Sockets.Socket>クラス</xref:System.Net.Sockets.Socket>を使用してに戻すこともできます。      > [!NOTE] > ため、udp はコネクションレス、Connect メソッドをブロックしません。 マルチキャスト データグラムを受信する場合は、Connect メソッドを呼び出さないでください。"
  example:
  - "The following example uses the host name and port number to connect to a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/csharp/m-system.net.sockets.udp_13_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/cpp/m-system.net.sockets.udp_13_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_13_1.vb)]"
  syntax:
    content: public void Connect (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "データを送信する先のリモート ホストの DNS 名。"
    - id: port
      type: System.Int32
      description: "データを送信するリモート ホストのポート番号。"
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>が閉じられます。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>間<xref:System.Net.IPEndPoint.MinPort>と<xref:System.Net.IPEndPoint.MaxPort>です。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "によって使用されるマネージ コードとアンマネージ リソースを解放、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>です。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A>。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Net.Sockets.UdpClient>参照。</xref:System.Net.Sockets.UdpClient> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "取得または設定、<xref:System.Boolean>値を指定するかどうか、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>により、断片化のインターネット プロトコル (IP) データグラム</xref:System.Boolean>。"
  remarks: "データグラムでは、そのサイズが、最大転送単位 (MTU) の伝送媒体を超えたときに断片化が必要です。 送信元のホストまたは中間ルーターによって、データグラムを断片化された可能性があります。 場合は、データグラムを断片化している必要があります、および<xref:System.Net.Sockets.Socket.DontFragment%2A>オプションが設定されている、データグラム破棄され、インターネット制御メッセージ プロトコル (ICMP) エラー メッセージが、データグラムの送信者に返されます</xref:System.Net.Sockets.Socket.DontFragment%2A>。"
  example:
  - "The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#2](~/add/codesnippet/csharp/p-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#2](~/add/codesnippet/cpp/p-system.net.sockets.udp_5_1.cpp)]"
  syntax:
    content: public bool DontFragment { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>データグラム フラグメントを許可して、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Sockets.UdpClient.DontFragment*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "使用するソケットに対してのみこのプロパティを設定することができます、<xref:System.Net.Sockets.AddressFamily>フラグまたは<xref:System.Net.Sockets.AddressFamily>フラグ</xref:System.Net.Sockets.AddressFamily></xref:System.Net.Sockets.AddressFamily>。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  id: DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "マルチキャスト グループのままにします。"
  remarks: "<xref:System.Net.Sockets.UdpClient>指定した<xref:System.Net.IPAddress>。</xref:System.Net.IPAddress>で識別されるマルチキャスト グループから</xref:System.Net.Sockets.UdpClient>DropMulticastGroup メソッドを取り消します 基になる、DropMulticastGroup メソッドを呼び出した後<xref:System.Net.Sockets.Socket>ルーターとルーターをマルチキャスト グループから削除する、インターネット グループ管理プロトコル (IGMP) パケットを送信します</xref:System.Net.Sockets.Socket>。 後に、<xref:System.Net.Sockets.UdpClient>を取り消します、グループからされなくなりますをそのグループに送信されるデータグラムを受信できません</xref:System.Net.Sockets.UdpClient>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  example:
  - "The following example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_3_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_3_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_3_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>のマルチキャスト グループをそのままにします</xref:System.Net.IPAddress>。"
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP アドレスと互換性がない、<xref:System.Net.Sockets.AddressFamily>ソケットのアドレス指定スキームを定義する値</xref:System.Net.Sockets.AddressFamily>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "マルチキャスト グループのままにします。"
  remarks: "<xref:System.Net.Sockets.UdpClient>指定した<xref:System.Net.IPAddress>。</xref:System.Net.IPAddress>で識別されるマルチキャスト グループから</xref:System.Net.Sockets.UdpClient>DropMulticastGroup メソッドを取り消します 基になる、DropMulticastGroup メソッドを呼び出した後<xref:System.Net.Sockets.Socket>ルーターとルーターをマルチキャスト グループから削除する、インターネット グループ管理プロトコル (IGMP) パケットを送信します</xref:System.Net.Sockets.Socket>。 後に、<xref:System.Net.Sockets.UdpClient>を取り消します、グループからされなくなりますをそのグループに送信されるデータグラムを受信できません</xref:System.Net.Sockets.UdpClient>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>固有のエラー コードを取得するプロパティ</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得した後は、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  example:
  - "The following code example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/d83f3217-6e3e-43a5-a5d8-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/d83f3217-6e3e-43a5-a5d8-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/d83f3217-6e3e-43a5-a5d8-_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>のマルチキャスト グループをそのままにします</xref:System.Net.IPAddress>。"
    - id: ifindex
      type: System.Int32
      description: "そのままにマルチキャスト グループのローカル アドレス。"
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP アドレスと互換性がない、<xref:System.Net.Sockets.AddressFamily>ソケットのアドレス指定スキームを定義する値</xref:System.Net.Sockets.AddressFamily>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "取得または設定、<xref:System.Boolean>値を指定するかどうか、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>送信またはブロードキャスト パケットを受信する可能性があります</xref:System.Boolean>。"
  remarks: "ブロードキャストは、特定のサブネットに制限されます。 255.255.255.255 以外にパケットを送信することによって、ローカル サブネットにブロードキャストすることができます。または、ホストの部分を設定するすべてのビットをインターネット プロトコル (IP) アドレスの一部でネットワーク向けのブロードキャスト アドレスを使用することができます。 たとえば、お客様の IP アドレスが 192.168.1.40 (最初の 3 つのオクテットとしてネットワーク部分とホスト部分のクラス C アドレスは、最後のオクテット) の場合は、有向ブロードキャスト アドレスは 192.168.1.255 です。"
  example:
  - "The following code example shows the use of the EnableBroadcast property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#3](~/add/codesnippet/csharp/p-system.net.sockets.udp_3_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#3](~/add/codesnippet/cpp/p-system.net.sockets.udp_3_1.cpp)]"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>により、ブロードキャスト パケット、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Sockets.UdpClient.EnableBroadcast*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  id: EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "終了、保留中の非同期受信します。"
  remarks: "このメソッドは、操作するまでブロックを完了します。       この操作を同期的に実行するを使用して、<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッド</xref:System.Net.Sockets.UdpClient.Receive%2A>。"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/5ace0ab2-d0e9-4f1f-a415-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/5ace0ab2-d0e9-4f1f-a415-_1.cs)]"
  syntax:
    content: public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "の<xref:System.IAsyncResult><xref:System.Net.Sockets.UdpClient.BeginReceive*>。</xref:System.Net.Sockets.UdpClient.BeginReceive*>への呼び出しによって返されるオブジェクト</xref:System.IAsyncResult>"
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "指定したリモート エンドポイント。"
    return:
      type: System.Byte[]
      description: "成功した場合、バイト数を受信します。 失敗した場合は、このメソッドは 0 を返します。"
  overload: System.Net.Sockets.UdpClient.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>呼び出しによって返されませんでした、<xref:System.Net.Sockets.UdpClient.BeginReceive*>メソッドです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndReceive が以前の非同期読み取りが呼び出されました。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "基になる<xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>にアクセスしようとするときにエラーが発生しました 詳細については「解説」セクションを参照してください。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  id: EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "保留中の非同期送信を終了します。"
  remarks: "このメソッドは、操作するまでブロックを完了します。       この操作を同期的に実行するを使用して、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド</xref:System.Net.Sockets.UdpClient.Send%2A>。"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_0_1.cs)]"
  syntax:
    content: public int EndSend (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "の<xref:System.IAsyncResult><xref:System.Net.Sockets.UdpClient.BeginSend*>。</xref:System.Net.Sockets.UdpClient.BeginSend*>への呼び出しによって返されるオブジェクト</xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "かどうか、成功した、送信したバイト数を<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>です。"
  overload: System.Net.Sockets.UdpClient.EndSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>呼び出しによって返されませんでした、<xref:System.Net.Sockets.Socket.BeginSend*>メソッドです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.Socket.EndSend*>以前の非同期読み取りが呼び出されました。</xref:System.Net.Sockets.Socket.EndSend*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "基になるソケットにアクセスしようとするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "取得または設定、<xref:System.Boolean>値を指定するかどうか、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>ポートを使用するクライアントは&1; つだけ</xref:System.Boolean>"
  remarks: "既定では、複数のクライアントが特定のポートを使用できます。ただし、クライアントの&1; つだけでは、ポートに送信されるネットワーク トラフィックの操作を実行できます。 ExclusiveAddressUse プロパティを使用すると、複数のクライアントが特定のポートを使用できないようにします。       基になるソケットは、クライアントのポートにバインドされる前に、このプロパティを設定する必要があります。 呼び出す場合<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>、 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>、 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>、または<xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>クライアントのポートは、コンス トラクターの副作用としてバインドし ExclusiveAddressUse プロパティを設定することはできません、その後、</xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#4](~/add/codesnippet/csharp/p-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#4](~/add/codesnippet/cpp/p-system.net.sockets.udp_4_1.cpp)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>特定のポートを使用する&1; つのみのクライアントは、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Windows Server 2003 および Windows XP Service Pack 2 以降および<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>の他のすべてのバージョン。"
  overload: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "基になるソケットにアクセスしようとするときにエラーが発生しました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "追加、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>マルチキャスト グループにします。"
  remarks: "<xref:System.Net.Sockets.UdpClient>マルチキャスト グループに指定された<xref:System.Net.IPAddress>。</xref:System.Net.IPAddress>を使用して</xref:System.Net.Sockets.UdpClient>サブスクライブする JoinMulticastGroup メソッド 基になる、JoinMulticastGroup メソッドを呼び出した後<xref:System.Net.Sockets.Socket>マルチキャスト グループのメンバーシップを要求しているルーターへのインターネット グループ管理プロトコル (IGMP) パケットを送信します</xref:System.Net.Sockets.Socket>。 マルチキャスト アドレス範囲は、224.0.0.0 ~ 239.255.255.255 です。 この範囲外のアドレスを指定する場合、または要求が実行される、ルーターがマルチキャストではない場合は、有効になっている、 <xref:System.Net.Sockets.UdpClient> <xref:System.Net.Sockets.SocketException>。</xref:System.Net.Sockets.SocketException>がスローされます。</xref:System.Net.Sockets.UdpClient> 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。 1 回、<xref:System.Net.Sockets.UdpClient>が表示されているマルチキャスト グループのメンバーとしてルーターでは、そのことが、指定した<xref:System.Net.IPAddress>.</xref:System.Net.IPAddress>に送信される multicasted データグラムを受信</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > を作成する必要があります、 <xref:System.Net.Sockets.UdpClient>、マルチキャスト ポート番号を使用しますそれ以外の場合、することはできません multicasted データグラムを受信します。</xref:System.Net.Sockets.UdpClient> 。 呼び出す必要はありません、 <xref:System.Net.Sockets.UdpClient.Connect%2A>JoinMulticastGroup メソッドを呼び出す前にメソッド、または<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッドは機能しません</xref:System.Net.Sockets.UdpClient.Receive%2A></xref:System.Net.Sockets.UdpClient.Connect%2A>。 マルチキャスト IP アドレスにデータグラムを送信するマルチキャスト グループに属している必要はありません。       マルチキャスト グループに参加する前に、ソケットは、ポートまたはエンドポイントにバインドされていることを確認します。 呼び出して、ポートまたはパラメーターとしてエンドポイントをそのまま使用するコンス トラクターのいずれかの操作を行います。       マルチキャスト データグラムの受信を停止する呼び出し、<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>メソッドを提供し、<xref:System.Net.IPAddress>を取り出すにはグループ元となるのです</xref:System.Net.IPAddress></xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>。      > [!NOTE] > IPv6 の場合は、いくつかのマルチキャスト アドレス範囲から選択できます。 IETF RFC 2375 を参照してください。      > [!NOTE] > 呼び出すことはできません<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>で、<xref:System.Net.Sockets.UdpClient>特定のローカル ポートを使用せずに作成 (つまりを使用して、<xref:System.Net.Sockets.UdpClient.%23ctor>または<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>コンス トラクター).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example demonstrates how to join a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_8_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_8_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_8_1.cs)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "マルチキャスト<xref:System.Net.IPAddress>に参加するグループの</xref:System.Net.IPAddress>。"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP アドレスと互換性がない、<xref:System.Net.Sockets.AddressFamily>ソケットのアドレス指定スキームを定義する値</xref:System.Net.Sockets.AddressFamily>。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "追加、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>マルチキャスト グループにします。"
  remarks: "マルチキャスト グループに参加する前に、ソケットがポートまたはエンドポイントにバインドされていることを確認します。 ポートまたはエンドポイントをパラメーターとして受け入れるコンス トラクターのいずれかを呼び出すことによって、これを行うことができます。       `infindex`パラメーターを使用して同じリンク上のハードウェア インターフェイスを識別します。      > [!NOTE] > から選択するいくつかのマルチキャスト アドレス範囲が存在します。 IETF RFC 2375 を参照してください。      > [!NOTE] > 呼び出すことはできません<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>で、<xref:System.Net.Sockets.UdpClient>特定のローカル ポートを使用せずに作成 (つまりを使用して、<xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName>または<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName>コンス トラクター).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - >-
    [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/cpp/f675abdc-8a60-48f5-a8c6-_1.cpp)]
     [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/visualbasic/f675abdc-8a60-48f5-a8c6-_1.vb)]
     [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/csharp/f675abdc-8a60-48f5-a8c6-_1.cs)]
  syntax:
    content: public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);
    parameters:
    - id: ifindex
      type: System.Int32
      description: "マルチキャスト グループに参加するローカル IP アドレスに関連付けられているインターフェイスのインデックス。"
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "マルチキャスト<xref:System.Net.IPAddress>に参加するグループの</xref:System.Net.IPAddress>。"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "追加、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>指定 Time to Live (TTL) を持つマルチキャスト グループにします。"
  remarks: "<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>メソッド<xref:System.Net.Sockets.UdpClient>指定した<xref:System.Net.IPAddress>。</xref:System.Net.IPAddress>を使用してマルチキャスト グループに</xref:System.Net.Sockets.UdpClient>サブスクライブ</xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>する 呼び出した後、<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>メソッドを基になる<xref:System.Net.Sockets.Socket>マルチキャスト グループのメンバーシップを要求しているルーターへのインターネット グループ管理プロトコル (IGMP) パケットを送信します</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>。 マルチキャスト アドレス範囲は、224.0.0.0 ~ 239.255.255.255 です。 この範囲外のアドレスを指定する場合、または要求が実行される、ルーターがマルチキャストではない場合は、有効になっている、 <xref:System.Net.Sockets.UdpClient> <xref:System.Net.Sockets.SocketException>。</xref:System.Net.Sockets.SocketException>がスローされます。</xref:System.Net.Sockets.UdpClient> 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。 `timeToLive`破棄される前に、マルチキャスト データグラムのルーター ホップの数が許可されるパラメーターを指定します。 1 回、<xref:System.Net.Sockets.UdpClient>が表示されているマルチキャスト グループのメンバーとしてルーターでは、そのことが、指定した<xref:System.Net.IPAddress>.</xref:System.Net.IPAddress>に送信される multicasted データグラムを受信</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > を作成する必要があります、<xref:System.Net.Sockets.UdpClient>マルチキャストのポート番号を使用してそれ以外の場合することはできません multicasted データグラムを受信します</xref:System.Net.Sockets.UdpClient>。 呼び出す必要はありません、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドを呼び出す前に、<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>メソッドまたは receive メソッドは機能しません</xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A></xref:System.Net.Sockets.UdpClient.Connect%2A>。 マルチキャスト IP アドレスにデータグラムを送信するマルチキャスト グループに属している必要はありません。       マルチキャスト グループに参加する前に、ソケットは、ポートまたはエンドポイントにバインドされていることを確認します。 呼び出して、ポートまたはエンドポイントをパラメーターとして受け取るコンス トラクターのいずれかの操作を行います。       マルチキャスト データグラムの受信を停止する呼び出し、<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>メソッドを提供し、<xref:System.Net.IPAddress>を取り出すにはグループ元となるのです</xref:System.Net.IPAddress></xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>。      > [!NOTE] > 呼び出すことはできません<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>で、<xref:System.Net.Sockets.UdpClient>特定のローカル ポートを使用せずに作成 (つまりを使用して、<xref:System.Net.Sockets.UdpClient.%23ctor>または<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>コンス トラクター).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/csharp/2ab5d1d5-1bd6-4398-ae63-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/cpp/2ab5d1d5-1bd6-4398-ae63-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/visualbasic/2ab5d1d5-1bd6-4398-ae63-_1.vb)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>マルチキャスト グループに参加するのです</xref:System.Net.IPAddress>。"
    - id: timeToLive
      type: System.Int32
      description: "ルーター ホップで、Time to Live (TTL) が測定されます。"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定された TTL が 0 から 255 までの間ではありません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP アドレスと互換性がない、<xref:System.Net.Sockets.AddressFamily>ソケットのアドレス指定スキームを定義する値</xref:System.Net.Sockets.AddressFamily>。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "追加、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>マルチキャスト グループにします。"
  remarks: "マルチキャスト グループに参加する前に、ソケットがポートまたはエンドポイントにバインドされていることを確認してください。 ポートまたはエンドポイントをパラメーターとして受け入れるコンス トラクターのいずれかを呼び出すことによって、これを行うことができます。      > [!NOTE] > から選択するいくつかのマルチキャスト アドレス範囲が存在します。 IETF RFC 2375 で確認することができます。      > [!NOTE] > 呼び出すことはできません<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>で、<xref:System.Net.Sockets.UdpClient>特定のローカル ポートを使用せずに作成 (つまりを使用して、<xref:System.Net.Sockets.UdpClient.%23ctor>または<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>コンス トラクター).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example shows the use of the JoinMulticastGroup method.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#6](~/add/codesnippet/csharp/83ef7d63-bccd-4c55-a88d-_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#6](~/add/codesnippet/cpp/83ef7d63-bccd-4c55-a88d-_1.cpp)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "マルチキャスト<xref:System.Net.IPAddress>に参加するグループの</xref:System.Net.IPAddress>。"
    - id: localAddress
      type: System.Net.IPAddress
      description: "ローカル<xref:System.Net.IPAddress>。</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "取得または設定、<xref:System.Boolean>発信マルチキャスト パケットが送信元アプリケーションに配信されるかどうかを指定する値</xref:System.Boolean>。"
  remarks: "マルチキャストは、インターネット上の多対多の通信用のスケーラブルな方法です。 プロセスは、マルチキャスト アドレスにサブスクライブする場合、パケットは送信でマルチキャスト アドレスにサブスクライブしている他のすべてのプロセスでプロセスが受信したこと。"
  example:
  - "The following code example shows the use of the MulticastLoopback property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#7](~/add/codesnippet/csharp/p-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#7](~/add/codesnippet/cpp/p-system.net.sockets.udp_2_1.cpp)]"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>出力方向のマルチキャスト パケットが受信それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Sockets.UdpClient.MulticastLoopback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  id: Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "リモート ホストによって送信された UDP データグラムを返します。"
  remarks: "Receive メソッドは、リモート ホストからデータグラムを受信するまでブロックされます。 データが利用できる場合、Receive メソッドが最初にキュー入れられたデータグラムを読み取るし、バイト配列としてデータ部分を返します。 このメソッドは追加、`remoteEP`を持つパラメーター、<xref:System.Net.IPAddress>と送信者のポート番号</xref:System.Net.IPAddress>。       既定のリモート ホストを指定する場合、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド、Receive メソッドはそのホストでのみからデータグラムを受け入れます</xref:System.Net.Sockets.UdpClient.Connect%2A>。 その他のすべてのデータグラムは破棄されます。       表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。      > [!NOTE] > マルチキャスト データグラムを受信する場合は、呼び出すことはありません、 <xref:System.Net.Sockets.UdpClient.Connect%2A>Receive メソッドを呼び出す前にメソッド</xref:System.Net.Sockets.UdpClient.Connect%2A>。 <xref:System.Net.Sockets.UdpClient>受信に使用するデータグラムは、マルチキャストのポート番号を使用して作成する必要があります</xref:System.Net.Sockets.UdpClient>。"
  example:
  - "The following example demonstrates the Receive method. The Receive method blocks execution until it receives a message. Using the <xref:System.Net.IPEndPoint> passed to Receive, the identity of the responding host is revealed.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/csharp/m-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/cpp/m-system.net.sockets.udp_5_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_5_1.vb)]"
  syntax:
    content: public byte[] Receive (ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>データの送信元となるリモート ホストを表す</xref:System.Net.IPEndPoint>。"
    return:
      type: System.Byte[]
      description: "型の配列<xref:System.Byte>データグラム データを格納している</xref:System.Byte>。"
  overload: System.Net.Sockets.UdpClient.Receive*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  id: ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "リモート ホストによって送信されたを非同期的に UDP データグラムを返します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、UDP パケットの受信後に完了します</xref:System.Threading.Tasks.Task%601>。       既定のリモート ホストを指定する場合、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドでは、このメソッドはそのホストでのみからデータグラムを受け入れます</xref:System.Net.Sockets.UdpClient.Connect%2A>。 その他のすべてのデータグラムは破棄されます。       表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。      > [!WARNING] > マルチキャスト データグラムを受信する場合は、呼び出すことはありません、<xref:System.Net.Sockets.UdpClient.Connect%2A>前に、このメソッドを呼び出すメソッド</xref:System.Net.Sockets.UdpClient.Connect%2A>。 <xref:System.Net.Sockets.UdpClient>受信に使用するデータグラムは、マルチキャストのポート番号を使用して作成する必要があります</xref:System.Net.Sockets.UdpClient>。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;です。       非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Sockets.UdpClient.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  id: Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "リモート ホストに UDP データグラムを送信します。"
  remarks: "このオーバー ロードで確立されているリモート ホストにデータグラムを送信する、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドと送信したバイト数を返します</xref:System.Net.Sockets.UdpClient.Connect%2A>。 <xref:System.Net.Sockets.UdpClient.Connect%2A><xref:System.Net.Sockets.UdpClient.Send%2A>メソッドでは、 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException>をスローします</xref:System.Net.Sockets.UdpClient.Send%2A>このオーバー ロードを呼び出す前に</xref:System.Net.Sockets.UdpClient.Connect%2A>呼び出さない場合。 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。       別のリモート ホストにデータグラムを送信する場合は、呼び出す必要があります、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドし、目的のリモート ホストを指定します</xref:System.Net.Sockets.UdpClient.Connect%2A>。 その他のいずれかを使用して<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドのオーバー ロード、ブロードキャスト アドレスにデータグラムを送信する</xref:System.Net.Sockets.UdpClient.Send%2A>。"
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. You must establish a default remote host prior to using this overload.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/csharp/m-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/cpp/m-system.net.sockets.udp_2_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_2_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "型の配列<xref:System.Byte>バイトの配列として表される送信する UDP データグラムを指定します</xref:System.Byte>。"
    - id: bytes
      type: System.Int32
      description: "データグラム内のバイト数。"
    return:
      type: System.Int32
      description: "送信されたバイト数。"
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>既定のリモート ホストが既に確立します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>が閉じられます。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "指定したリモート エンドポイントにあるホストに UDP データグラムを送信します。"
  remarks: "Send メソッドは、指定されたエンドポイントにデータグラムを送信し、正常に送信されたバイト数を返します。 このオーバー ロードを呼び出す前に作成する必要が最初、<xref:System.Net.IPEndPoint>データグラムの配信先のリモート ホストの IP アドレスとポート番号を使用します</xref:System.Net.IPEndPoint>。 <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> <xref:System.Net.IPAddress.Address%2A> <xref:System.Net.IPEndPoint>。</xref:System.Net.IPEndPoint>のプロパティ</xref:System.Net.IPAddress.Address%2A></xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>を指定して既定のブロードキャスト アドレスに、255.255.255.255、データグラムを送信できます。 これを作成した後<xref:System.Net.IPEndPoint>、として送信メソッドに渡す、`endPoint`パラメーター</xref:System.Net.IPEndPoint> 。       その他のブロードキャスト アドレスにデータグラムを送信する場合を使用して、<xref:System.Net.Sockets.UdpClient.Client%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName></xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>ソケット オプションを設定および</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient.Client%2A>。 <xref:System.Net.Sockets.Socket>クラス</xref:System.Net.Sockets.Socket>を使用してに戻すこともできます。      > [!NOTE] > を指定しない、`endPoint`でリモート ホストが既に確立されている場合は、このメソッドのパラメーター、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド</xref:System.Net.Sockets.UdpClient.Connect%2A>。 Send メソッドが<xref:System.Net.Sockets.SocketException>。</xref:System.Net.Sockets.SocketException>をスローする場合は、 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  example:
  - "The following example demonstrates the Send method. This example uses an <xref:System.Net.IPEndPoint> to specify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/csharp/2c594ef1-b462-42a1-adc5-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/cpp/2c594ef1-b462-42a1-adc5-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/visualbasic/2c594ef1-b462-42a1-adc5-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "型の配列<xref:System.Byte>バイトの配列として表された、送信する UDP データグラムを指定します</xref:System.Byte>。"
    - id: bytes
      type: System.Int32
      description: "データグラム内のバイト数。"
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>ホストとデータグラムを送信するポートを表す</xref:System.Net.IPEndPoint>。"
    return:
      type: System.Int32
      description: "送信されたバイト数。"
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>既定のリモート ホストを既に確立しました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>閉じています。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  id: Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "指定したリモート ホスト上の指定したポートに UDP データグラムを送信します。"
  remarks: "<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドで指定された値にデータグラムを送信する、`hostname`と`port`パラメーターと正常に送信したバイト数を返します</xref:System.Net.Sockets.UdpClient.Send%2A>。 既定のブロードキャスト アドレスにデータグラムを送信するにはの「255.255.255.255」を指定することによって、`hostname`パラメーターの値。       その他のブロードキャスト アドレスにデータグラムを送信する場合を使用して、<xref:System.Net.Sockets.UdpClient.Client%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName></xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>ソケット オプションを設定および</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient.Client%2A>。 <xref:System.Net.Sockets.Socket>クラス</xref:System.Net.Sockets.Socket>を使用してに戻すこともできます。      > [!NOTE] > ポートでは、リモート ホストが既に確立されている場合をこのメソッドに番号またはホスト名を指定しないで、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド</xref:System.Net.Sockets.UdpClient.Connect%2A>。 作成する場合、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドでは、 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException>をスローします</xref:System.Net.Sockets.UdpClient.Send%2A>。 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses a host name and a port number to identify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/csharp/5d28964f-8575-4595-a91e-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/cpp/5d28964f-8575-4595-a91e-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/visualbasic/5d28964f-8575-4595-a91e-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, string hostname, int port);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "型の配列<xref:System.Byte>バイトの配列として表される送信する UDP データグラムを指定します</xref:System.Byte>。"
    - id: bytes
      type: System.Int32
      description: "データグラム内のバイト数。"
    - id: hostname
      type: System.String
      description: "データグラムを送信するリモート ホストの名前。"
    - id: port
      type: System.Int32
      description: "通信するリモートのポート番号。"
    return:
      type: System.Int32
      description: "送信されたバイト数。"
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>既定のリモート ホストが既に確立します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>が閉じられます。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  id: SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "リモート ホストに UDP データグラムを非同期的に送信します。"
  remarks: "このオーバー ロードで確立されているリモート ホストにデータグラムを送信する、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド</xref:System.Net.Sockets.UdpClient.Connect%2A>。 <xref:System.Net.Sockets.UdpClient.Connect%2A>このオーバー ロードを呼び出す前に、メソッドは、 <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException>をスロー</xref:System.Net.Sockets.UdpClient.Connect%2A>を呼び出すことはありません場合、 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。       別のリモート ホストにデータグラムを送信する場合は、呼び出す必要があります、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドし、目的のリモート ホストを指定します</xref:System.Net.Sockets.UdpClient.Connect%2A>。 その他のいずれかを使用して<xref:System.Net.Sockets.UdpClient.SendAsync%2A>メソッドのオーバー ロード、ブロードキャスト アドレスにデータグラムを送信する</xref:System.Net.Sockets.UdpClient.SendAsync%2A>。"
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "型の配列<xref:System.Byte>バイトの配列として表される送信する UDP データグラムを指定します</xref:System.Byte>。"
    - id: bytes
      type: System.Int32
      description: "データグラム内のバイト数。"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;です。"
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>既定のリモート ホストが既に確立します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>が閉じられます。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "リモート ホストに UDP データグラムを非同期的に送信します。"
  remarks: "このメソッドは、指定されたエンドポイントにデータグラムを送信します。 このオーバー ロードを呼び出す前に作成する必要が最初、<xref:System.Net.IPEndPoint>データグラムの配信先のリモート ホストの IP アドレスとポート番号を使用します</xref:System.Net.IPEndPoint>。 <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> <xref:System.Net.IPAddress.Address%2A> <xref:System.Net.IPEndPoint>。</xref:System.Net.IPEndPoint>のプロパティ</xref:System.Net.IPAddress.Address%2A></xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>を指定して既定のブロードキャスト アドレスに、255.255.255.255、データグラムを送信できます。 これを作成した後<xref:System.Net.IPEndPoint>、としては、このメソッドに渡して、`endPoint`パラメーター</xref:System.Net.IPEndPoint> 。       その他のブロードキャスト アドレスにデータグラムを送信する場合を使用して、<xref:System.Net.Sockets.UdpClient.Client%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName></xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>ソケット オプションを設定および</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient.Client%2A>。 <xref:System.Net.Sockets.Socket>クラス</xref:System.Net.Sockets.Socket>を使用してに戻すこともできます。      > [!WARNING] > を指定しない、`endPoint`でリモート ホストが既に確立されている場合は、このメソッドのパラメーター、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド</xref:System.Net.Sockets.UdpClient.Connect%2A>。 このメソッドは<xref:System.Net.Sockets.SocketException>。</xref:System.Net.Sockets.SocketException>をスローする場合、 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "型の配列<xref:System.Byte>バイトの配列として表される送信する UDP データグラムを指定します</xref:System.Byte>。"
    - id: bytes
      type: System.Int32
      description: "データグラム内のバイト数。"
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>ホストとデータグラムを送信するポートを表す</xref:System.Net.IPEndPoint>。"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;です。"
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>既定のリモート ホストを既に確立しました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>閉じています。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "リモート ホストに UDP データグラムを非同期的に送信します。"
  remarks: "このメソッドで指定された値にデータグラムを送信する、`hostname`と`port`パラメーター。 既定のブロードキャスト アドレスにデータグラムを送信するにはの「255.255.255.255」を指定することによって、`hostname`パラメーターの値。       その他のブロードキャスト アドレスにデータグラムを送信する場合を使用して、<xref:System.Net.Sockets.UdpClient.Client%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName></xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>ソケット オプションを設定および</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient.Client%2A>。 <xref:System.Net.Sockets.Socket>クラス</xref:System.Net.Sockets.Socket>を使用してに戻すこともできます。      > [!WARNING] > ポートでは、リモート ホストが既に確立されている場合をこのメソッドに番号またはホスト名を指定しないで、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド</xref:System.Net.Sockets.UdpClient.Connect%2A>。 このメソッドは<xref:System.Net.Sockets.SocketException>。</xref:System.Net.Sockets.SocketException>をスローする場合、 表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>、特定のエラー コードを取得します</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。 このコードを取得すると、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, string hostname, int port);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "型の配列<xref:System.Byte>バイトの配列として表される送信する UDP データグラムを指定します</xref:System.Byte>。"
    - id: bytes
      type: System.Int32
      description: "データグラム内のバイト数。"
    - id: hostname
      type: System.String
      description: "データグラムを送信するリモート ホストの名前。"
    - id: port
      type: System.Int32
      description: "通信するリモートのポート番号。"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;です。"
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>既定のリモート ホストが既に確立します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>が閉じられます。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットにアクセスするときにエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Ttl
  id: Ttl
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "取得または設定が送信するインターネット プロトコル (IP) パケットの Live (TTL) 値を指定する値、 <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>です。"
  remarks: "TTL 値は、ルーターはパケットとインターネット制御メッセージ プロトコル (ICMP) の&quot;TTL を超えています&quot;を破棄する前に、パケットが走査できるルーターの最大数を示すエラー メッセージが送信者に返されます。"
  example:
  - "The following code example shows the use of the Ttl property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#5](~/add/codesnippet/csharp/p-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#5](~/add/codesnippet/cpp/p-system.net.sockets.udp_6_1.cpp)]"
  syntax:
    content: public short Ttl { get; set; }
    return:
      type: System.Int16
      description: "TTL 値です。"
  overload: System.Net.Sockets.UdpClient.Ttl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.UdpClient.#ctor
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: true
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Sockets.UdpClient.Active
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.UdpClient.Available
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.Client
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.UdpClient.Close
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
- uid: System.Net.Sockets.UdpClient.Dispose
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
- uid: System.Net.Sockets.UdpClient.DontFragment
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<UdpReceiveResult>
  nameWithType: Task<UdpReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.UdpReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: UdpReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.Ttl
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.UdpClient.#ctor*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient
  nameWithType: UdpClient.UdpClient
- uid: System.Net.Sockets.UdpClient.Active*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal
  nameWithType: UdpClient.AllowNatTraversal
- uid: System.Net.Sockets.UdpClient.Available*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive
  nameWithType: UdpClient.BeginReceive
- uid: System.Net.Sockets.UdpClient.BeginSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend
  nameWithType: UdpClient.BeginSend
- uid: System.Net.Sockets.UdpClient.Client*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
- uid: System.Net.Sockets.UdpClient.Close*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close
  nameWithType: UdpClient.Close
- uid: System.Net.Sockets.UdpClient.Connect*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect
  nameWithType: UdpClient.Connect
- uid: System.Net.Sockets.UdpClient.Dispose*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose
  nameWithType: UdpClient.Dispose
- uid: System.Net.Sockets.UdpClient.DontFragment*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup
  nameWithType: UdpClient.DropMulticastGroup
- uid: System.Net.Sockets.UdpClient.EnableBroadcast*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive
  nameWithType: UdpClient.EndReceive
- uid: System.Net.Sockets.UdpClient.EndSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend
  nameWithType: UdpClient.EndSend
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup
  nameWithType: UdpClient.JoinMulticastGroup
- uid: System.Net.Sockets.UdpClient.MulticastLoopback*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive
  nameWithType: UdpClient.Receive
- uid: System.Net.Sockets.UdpClient.ReceiveAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync
  nameWithType: UdpClient.ReceiveAsync
- uid: System.Net.Sockets.UdpClient.Send*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send
  nameWithType: UdpClient.Send
- uid: System.Net.Sockets.UdpClient.SendAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync
  nameWithType: UdpClient.SendAsync
- uid: System.Net.Sockets.UdpClient.Ttl*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
