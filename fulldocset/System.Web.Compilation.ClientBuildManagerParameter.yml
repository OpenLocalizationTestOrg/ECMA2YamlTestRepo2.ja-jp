### YamlMime:ManagedReference
items:
- uid: System.Web.Compilation.ClientBuildManagerParameter
  id: ClientBuildManagerParameter
  children:
  - System.Web.Compilation.ClientBuildManagerParameter.#ctor
  - System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths
  - System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags
  - System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer
  - System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile
  langs:
  - csharp
  name: ClientBuildManagerParameter
  nameWithType: ClientBuildManagerParameter
  fullName: System.Web.Compilation.ClientBuildManagerParameter
  type: Class
  summary: "プリコンパイル時に、ASP.NET コンパイラに渡された値が含まれています。"
  remarks: "ASP.NET Web ページおよびコード ファイルをプリコンパイルすると、ユーザーへの高速な応答を容易にし、ソース コードを配置することがなく、サイトの展開を許可することができます。 ASP.NET Web サイトをプリコンパイルの詳細については、次を参照してください。 [ASP.NET Web サイト プロジェクト プリコンパイル概要](~/add/includes/ajax-current-ext-md.md)です。       ClientBuildManagerParameter クラスでは、プリコンパイル時に使用される値を格納します。 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>プロパティは、アセンブリをビルドする方法を決定します</xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>。 たとえば、設定することができます<xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>に<xref:System.Web.Compilation.PrecompilationFlags>、コンパイル済みのコンポーネントを再コンパイルやには、設定を<xref:System.Web.Compilation.PrecompilationFlags>ターゲット ディレクトリ内のすべてのコンポーネントを上書きする結果として得られるアセンブリを許可するようにします</xref:System.Web.Compilation.PrecompilationFlags></xref:System.Web.Compilation.PrecompilationFlags></xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>。 <xref:System.Web.Compilation.PrecompilationFlags>列挙子が、 <xref:System.FlagsAttribute>、メンバー値のビットごとの組み合わせを可能にする属性</xref:System.FlagsAttribute></xref:System.Web.Compilation.PrecompilationFlags>。 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>プロパティから&1; つ以上の値を含めることができます、<xref:System.Web.Compilation.PrecompilationFlags>プリコンパイル動作の組み合わせを指定する列挙体です</xref:System.Web.Compilation.PrecompilationFlags></xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>。       いずれか、<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>プロパティまたは<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>プロパティには、厳密な名前のアセンブリを作成する値が割り当てられます</xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A></xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>。 両方の値は、厳密な名前のアセンブリを作成するために設定する必要はありません。       ClientBuildManagerParameter オブジェクトに渡す、<xref:System.Web.Compilation.ClientBuildManager>オブジェクトを介して、<xref:System.Web.Compilation.ClientBuildManager.%23ctor%2A>コンス トラクター</xref:System.Web.Compilation.ClientBuildManager.%23ctor%2A> </xref:System.Web.Compilation.ClientBuildManager> 。"
  example:
  - "The following code example is part of a code example found in the <xref:System.Web.Compilation.ClientBuildManager> class overview. In the example, a ClientBuildManagerParameter object is created and its values set. The resulting assembly will have a strong name based on the provided key file and will precompile according to the provided <xref:System.Web.Compilation.PrecompilationFlags> values.  \n  \n [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/add/codesnippet/visualbasic/t-system.web.compilation_9_1.vb)]\n [!code-cs[System.Web.Compilation.ClientBuildManager#2](~/add/codesnippet/csharp/t-system.web.compilation_9_1.cs)]"
  syntax:
    content: public class ClientBuildManagerParameter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Compilation.ClientBuildManagerParameter.#ctor
  id: '#ctor'
  parent: System.Web.Compilation.ClientBuildManagerParameter
  langs:
  - csharp
  name: ClientBuildManagerParameter()
  nameWithType: ClientBuildManagerParameter.ClientBuildManagerParameter()
  fullName: System.Web.Compilation.ClientBuildManagerParameter.ClientBuildManagerParameter()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.Compilation.ClientBuildManagerParameter&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターは、すべてのプロパティ値を初期化できません。 使ってそれらの値を設定する必要があります、 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>、 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>、および<xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A>オブジェクトが作成された後のプロパティ</xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A></xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A></xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>。"
  example:
  - "The following code example is part of a code example found in the <xref:System.Web.Compilation.ClientBuildManager> class overview. In the example, a <xref:System.Web.Compilation.ClientBuildManagerParameter> object is created and its values set. The resulting assembly will have a strong name based on the provided key file and will precompile according to the provided <xref:System.Web.Compilation.PrecompilationFlags> values.  \n  \n [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/add/codesnippet/visualbasic/m-system.web.compilation_1.vb)]\n [!code-cs[System.Web.Compilation.ClientBuildManager#2](~/add/codesnippet/csharp/m-system.web.compilation_1.cs)]"
  syntax:
    content: public ClientBuildManagerParameter ();
    parameters: []
  overload: System.Web.Compilation.ClientBuildManagerParameter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths
  id: ExcludedVirtualPaths
  parent: System.Web.Compilation.ClientBuildManagerParameter
  langs:
  - csharp
  name: ExcludedVirtualPaths
  nameWithType: ClientBuildManagerParameter.ExcludedVirtualPaths
  fullName: System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "取得または設定は、仮想パスを除外します。"
  syntax:
    content: public System.Collections.Generic.List<string> ExcludedVirtualPaths { get; }
    return:
      type: System.Collections.Generic.List{System.String}
      description: "仮想パスを除外します。"
  overload: System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags
  id: PrecompilationFlags
  parent: System.Web.Compilation.ClientBuildManagerParameter
  langs:
  - csharp
  name: PrecompilationFlags
  nameWithType: ClientBuildManagerParameter.PrecompilationFlags
  fullName: System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "取得またはプリコンパイル動作を決定するフラグを設定します。"
  remarks: "PrecompilationFlags プロパティは、アセンブリのビルド方法を決定します。 PrecompilationFlags を設定するなど、 <xref:System.Web.Compilation.PrecompilationFlags>、コンパイル済みのコンポーネントを再コンパイルやには、設定を<xref:System.Web.Compilation.PrecompilationFlags>ターゲット ディレクトリ内のすべてのコンポーネントを上書きする結果として得られるアセンブリを許可するようにします</xref:System.Web.Compilation.PrecompilationFlags></xref:System.Web.Compilation.PrecompilationFlags>。 <xref:System.Web.Compilation.PrecompilationFlags>列挙子が、 <xref:System.FlagsAttribute>、メンバー値のビットごとの組み合わせを可能にする属性</xref:System.FlagsAttribute></xref:System.Web.Compilation.PrecompilationFlags>。 PrecompilationFlags プロパティから&1; つ以上の値を含めることができます、<xref:System.Web.Compilation.PrecompilationFlags>プリコンパイル動作の組み合わせを指定する列挙体です</xref:System.Web.Compilation.PrecompilationFlags>。"
  example:
  - "The following code example is part of a code example found in the <xref:System.Web.Compilation.ClientBuildManager> class overview. In the example, a <xref:System.Web.Compilation.ClientBuildManagerParameter> object is created and its values set. The resulting assembly will have a strong name based on the provided key file and will precompile according to the provided <xref:System.Web.Compilation.PrecompilationFlags> values.  \n  \n [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/add/codesnippet/visualbasic/p-system.web.compilation_3_1.vb)]\n [!code-cs[System.Web.Compilation.ClientBuildManager#2](~/add/codesnippet/csharp/p-system.web.compilation_3_1.cs)]"
  syntax:
    content: public System.Web.Compilation.PrecompilationFlags PrecompilationFlags { get; set; }
    return:
      type: System.Web.Compilation.PrecompilationFlags
      description: "<xref href=&quot;System.Web.Compilation.PrecompilationFlags&quot;> </xref>クライアント ビルドします。"
  overload: System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer
  id: StrongNameKeyContainer
  parent: System.Web.Compilation.ClientBuildManagerParameter
  langs:
  - csharp
  name: StrongNameKeyContainer
  nameWithType: ClientBuildManagerParameter.StrongNameKeyContainer
  fullName: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "取得またはコンパイル時に使用されるキー コンテナーを設定します。"
  remarks: "StrongNameKeyContainer プロパティまたは<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>プロパティには、厳密な名前のアセンブリを作成する値が割り当てられます</xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>。 両方の値は、厳密な名前のアセンブリを作成するために設定する必要はありません。"
  example:
  - "The following code example is similar to the code example found in the <xref:System.Web.Compilation.ClientBuildManager> class overview except that the resulting assembly will have a strong name based on the provided key container. It will precompile according to the provided <xref:System.Web.Compilation.PrecompilationFlags> values.  \n  \n [!code-cs[System.Web.Compilation.ClientBuildManager_2#1](~/add/codesnippet/csharp/p-system.web.compilation_1_1.cs)]\n [!code-vb[System.Web.Compilation.ClientBuildManager_2#1](~/add/codesnippet/visualbasic/p-system.web.compilation_1_1.vb)]"
  syntax:
    content: public string StrongNameKeyContainer { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>キー コンテナーの値</xref:System.String>。"
  overload: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile
  id: StrongNameKeyFile
  parent: System.Web.Compilation.ClientBuildManagerParameter
  langs:
  - csharp
  name: StrongNameKeyFile
  nameWithType: ClientBuildManagerParameter.StrongNameKeyFile
  fullName: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "取得またはコンパイル時に使用されるキー ファイルを設定します。"
  remarks: "いずれか、<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>プロパティまたは StrongNameKeyFile プロパティが厳密な名前のアセンブリを作成する値を割り当てられます</xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>。 両方の値は、厳密な名前のアセンブリを作成するために設定する必要はありません。"
  example:
  - "The following code example is part of a code example found in the <xref:System.Web.Compilation.ClientBuildManager> class overview. In the example, a <xref:System.Web.Compilation.ClientBuildManagerParameter> object is created and its values set. The resulting assembly will have a strong name based on the provided key file and will precompile according to the provided <xref:System.Web.Compilation.PrecompilationFlags> values.  \n  \n [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/add/codesnippet/visualbasic/p-system.web.compilation_2_1.vb)]\n [!code-cs[System.Web.Compilation.ClientBuildManager#2](~/add/codesnippet/csharp/p-system.web.compilation_2_1.cs)]"
  syntax:
    content: public string StrongNameKeyFile { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>のキー ファイルの値</xref:System.String>。"
  overload: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Compilation.ClientBuildManagerParameter.#ctor
  parent: System.Web.Compilation.ClientBuildManagerParameter
  isExternal: false
  name: ClientBuildManagerParameter()
  nameWithType: ClientBuildManagerParameter.ClientBuildManagerParameter()
  fullName: System.Web.Compilation.ClientBuildManagerParameter.ClientBuildManagerParameter()
- uid: System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths
  parent: System.Web.Compilation.ClientBuildManagerParameter
  isExternal: false
  name: ExcludedVirtualPaths
  nameWithType: ClientBuildManagerParameter.ExcludedVirtualPaths
  fullName: System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths
- uid: System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags
  parent: System.Web.Compilation.ClientBuildManagerParameter
  isExternal: false
  name: PrecompilationFlags
  nameWithType: ClientBuildManagerParameter.PrecompilationFlags
  fullName: System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags
- uid: System.Web.Compilation.PrecompilationFlags
  parent: System.Web.Compilation
  isExternal: false
  name: PrecompilationFlags
  nameWithType: PrecompilationFlags
  fullName: System.Web.Compilation.PrecompilationFlags
- uid: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer
  parent: System.Web.Compilation.ClientBuildManagerParameter
  isExternal: false
  name: StrongNameKeyContainer
  nameWithType: ClientBuildManagerParameter.StrongNameKeyContainer
  fullName: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile
  parent: System.Web.Compilation.ClientBuildManagerParameter
  isExternal: false
  name: StrongNameKeyFile
  nameWithType: ClientBuildManagerParameter.StrongNameKeyFile
  fullName: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile
- uid: System.Web.Compilation.ClientBuildManagerParameter.#ctor*
  parent: System.Web.Compilation.ClientBuildManagerParameter
  isExternal: false
  name: ClientBuildManagerParameter
  nameWithType: ClientBuildManagerParameter.ClientBuildManagerParameter
- uid: System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths*
  parent: System.Web.Compilation.ClientBuildManagerParameter
  isExternal: false
  name: ExcludedVirtualPaths
  nameWithType: ClientBuildManagerParameter.ExcludedVirtualPaths
- uid: System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags*
  parent: System.Web.Compilation.ClientBuildManagerParameter
  isExternal: false
  name: PrecompilationFlags
  nameWithType: ClientBuildManagerParameter.PrecompilationFlags
- uid: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer*
  parent: System.Web.Compilation.ClientBuildManagerParameter
  isExternal: false
  name: StrongNameKeyContainer
  nameWithType: ClientBuildManagerParameter.StrongNameKeyContainer
- uid: System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile*
  parent: System.Web.Compilation.ClientBuildManagerParameter
  isExternal: false
  name: StrongNameKeyFile
  nameWithType: ClientBuildManagerParameter.StrongNameKeyFile
