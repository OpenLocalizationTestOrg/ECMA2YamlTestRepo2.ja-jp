### YamlMime:ManagedReference
items:
- uid: System.IO.Log.LogStore
  id: LogStore
  children:
  - System.IO.Log.LogStore.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)
  - System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode)
  - System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Security.AccessControl.FileSecurity)
  - System.IO.Log.LogStore.Archivable
  - System.IO.Log.LogStore.BaseSequenceNumber
  - System.IO.Log.LogStore.CreateLogArchiveSnapshot
  - System.IO.Log.LogStore.CreateLogArchiveSnapshot(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)
  - System.IO.Log.LogStore.Delete(System.String)
  - System.IO.Log.LogStore.Dispose
  - System.IO.Log.LogStore.Extents
  - System.IO.Log.LogStore.FreeBytes
  - System.IO.Log.LogStore.Handle
  - System.IO.Log.LogStore.LastSequenceNumber
  - System.IO.Log.LogStore.Length
  - System.IO.Log.LogStore.Policy
  - System.IO.Log.LogStore.SetArchiveTail(System.IO.Log.SequenceNumber)
  - System.IO.Log.LogStore.StreamCount
  langs:
  - csharp
  name: LogStore
  nameWithType: LogStore
  fullName: System.IO.Log.LogStore
  type: Class
  summary: "ログ構造化ストレージを表します。"
  remarks: "<xref:System.IO.Log.LogRecordSequence>クラスは、Common Log File System (CLFS) ログ上で、レコード シーケンス インターフェイスの実装を提供します。</xref:System.IO.Log.LogRecordSequence> それと共に、LogStore クラスを直接操作および CLFS ログ ファイルを管理するため、インターフェイスを提供します。 ログ ストアは、ディスク エクステントのセットの追加専用ストレージを提供します。 LogStore クラスは、このストレージを表しの追加、コンテナーを削除して、ポリシーの設定、およびアーカイブを作成するメソッドを提供します。 読み取りと、ストレージへの書き込みのメソッドは提供されません。これらのメソッドが<xref:System.IO.Log.LogRecordSequence>クラス</xref:System.IO.Log.LogRecordSequence>によって提供されます。       LogStore クラス間のリレーションシップと<xref:System.IO.Log.LogRecordSequence>クラスは、ディスク ファイルの間のリレーションシップに似ています、<xref:System.IO.FileStream>オブジェクト</xref:System.IO.FileStream></xref:System.IO.Log.LogRecordSequence>。 ディスク ファイルは、実際の記憶域を提供し、長さ、<xref:System.IO.FileStream>オブジェクトは、読み取りし、書き込みを突き止めに使用できるファイルのビューを提供</xref:System.IO.FileStream>中に、最終アクセス日時などの属性を持つ 同様に、LogStore このクラスには、ポリシーやディスク エクステントのコレクションなどの属性と<xref:System.IO.Log.LogRecordSequence>クラスには、データ読み取りおよび書き込みのレコード指向の機構が用意されています</xref:System.IO.Log.LogRecordSequence>。       によって表されるファイル レコード シーケンスとは異なり、<xref:System.IO.Log.FileRecordSequence>クラス、LogStore インスタンスにデータを保存で表されるディスク エクステントのコレクション<xref:System.IO.Log.LogExtent>インスタンス</xref:System.IO.Log.LogExtent></xref:System.IO.Log.FileRecordSequence>。 指定された LogStore インスタンス内のエクステントはすべて、均一のサイズのおよび領域が追加され、エクステント増加分 LogStore インスタンスから削除します。 追加し、ログ エクステントを削除するを使用して、<xref:System.IO.Log.LogExtentCollection.Add%2A>と<xref:System.IO.Log.LogExtentCollection.Remove%2A>のメソッド、<xref:System.IO.Log.LogExtentCollection>によって返される、オブジェクト、<xref:System.IO.Log.LogStore.Extents%2A>プロパティ</xref:System.IO.Log.LogStore.Extents%2A></xref:System.IO.Log.LogExtentCollection></xref:System.IO.Log.LogExtentCollection.Remove%2A></xref:System.IO.Log.LogExtentCollection.Add%2A>。       LogStore インスタンスには、ポリシーを関連付けることができます。 これらで表されます<xref:System.IO.Log.LogPolicy>によって返されるインスタンス、<xref:System.IO.Log.LogStore.Policy%2A>プロパティ</xref:System.IO.Log.LogStore.Policy%2A></xref:System.IO.Log.LogPolicy>。 ポリシーでは、ログは、エクステントと最小サイズ、および命令の最大数などのに従ってに増大したり、特定の条件下で LogStore を圧縮しようとする規則によって決まります。 さらに、LogStore インスタンスがアーカイブ可能にするかどうかを指定することができます。 ポリシーが&1; つのログ設定し、は、揮発性ログへの各ハンドルが閉じられると、ポリシー不要になったが存在することを意味します。"
  example:
  - "The following example shows how to archive a LogStore to an XML document.  \n  \n [!code-vb[logarchievesnapshot#0](~/add/codesnippet/visualbasic/t-system.io.log.logstore_1.vb)]\n [!code-cs[logarchievesnapshot#0](~/add/codesnippet/csharp/t-system.io.log.logstore_1.cs)]"
  syntax:
    content: 'public sealed class LogStore : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Log.LogStore.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)
  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)'
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: LogStore(SafeFileHandle)
  nameWithType: LogStore.LogStore(SafeFileHandle)
  fullName: System.IO.Log.LogStore.LogStore(SafeFileHandle)
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.Log.LogStore&quot;> </xref>クラス ハンドルを指定します。"
  syntax:
    content: public LogStore (Microsoft.Win32.SafeHandles.SafeFileHandle handle);
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: "ログのファイル ハンドルがファイルを現在<xref href=&quot;System.IO.Log.LogStore&quot;></xref>オブジェクトによってカプセル化します。"
  overload: System.IO.Log.LogStore.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>handle</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ログ ハンドルをスレッド プールにバインドできませんでした。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode)
  id: '#ctor(System.String,System.IO.FileMode)'
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: LogStore(String,FileMode)
  nameWithType: LogStore.LogStore(String,FileMode)
  fullName: System.IO.Log.LogStore.LogStore(String,FileMode)
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.Log.LogStore&quot;> </xref>クラスを指定したパスとモードを使用します。"
  remarks: "このコンス トラクターを使用して、指定したパスおよびモードでログ ストアを開きます。 ストアは、読み取り/書き込みアクセス権を持つが開かれ、読み取りアクセスを共有します。       `path`パラメーターは、次の構文を使用する必要があります:`log:<physical log name>[::<log client name>]`場所`<physical log name>`ログ ファイルに有効なパスと`<log client name>`一意のクライアント識別子です。 ログ ストアは、物理ログ ストアと、仮想ログ ストアの両方ではなくはどちらかにする必要があります。 ログ ストアが、物理的または仮想的に作成されたら、有効期間にわたって維持します。 物理ログ名のみを指定して、物理ログ ストアが作成されます。 仮想ログ ストアを作成するには、物理ログ名とログ クライアント名の両方を指定します。       同じ物理ログ名を共有しているクライアントは、同じエクステント コレクションとポリシーを共有します。"
  syntax:
    content: public LogStore (string path, System.IO.FileMode mode);
    parameters:
    - id: path
      type: System.String
      description: "開くログ ストアの基本ファイルの相対パスまたは絶対パス。"
    - id: mode
      type: System.IO.FileMode
      description: "1 つ、 <xref href=&quot;System.IO.FileMode&quot;> </xref>開くか、ストアを作成する方法を決定する値。"
  overload: System.IO.Log.LogStore.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>空の文字列 (&quot;&quot;) です。       - または -<code>path</code>空白のみが含まれています。       - または - <code>path</code>&1; つまたは複数の無効な文字が含まれています。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>無効な値が含まれています。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが見つかりません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ログ ストアを開くときに、I/O エラーが発生します。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref href=&quot;System.IO.Log.LogStore&quot;></xref>必要な Common Log File System (CLFS) コンポーネントがインストールされていないために使用できません。 プラットフォームおよび使用可能な場合は、CLFS コンポーネントをインストール、 <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>クラスの代わりにします。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)'
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: LogStore(String,FileMode,FileAccess)
  nameWithType: LogStore.LogStore(String,FileMode,FileAccess)
  fullName: System.IO.Log.LogStore.LogStore(String,FileMode,FileAccess)
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.Log.LogStore&quot;> </xref>指定したパス、モード、およびアクセスを持つクラス。"
  remarks: "このコンス トラクターを使用して、指定したパス、モード、およびアクセスで新しいログ ストアを開きます。 このストアが開き読み取りアクセスを共有します。       `path`パラメーターは、次の構文を使用する必要があります:`log:<physical log name>[::<log client name>]`場所`<physical log name>`ログ ファイルに有効なパスと`<log client name>`一意のクライアント識別子です。 ログ ストアは、物理ログ ストアと、仮想ログ ストアの両方ではなくはどちらかにする必要があります。 ログ ストアが、物理的または仮想的に作成されたら、有効期間にわたって維持します。 物理ログ名のみを指定して、物理ログ ストアが作成されます。 仮想ログ ストアを作成するには、物理ログ名とログ クライアント名の両方を指定します。       同じ物理ログ名を共有しているクライアントは、同じエクステント コレクションとポリシーを共有します。"
  syntax:
    content: public LogStore (string path, System.IO.FileMode mode, System.IO.FileAccess access);
    parameters:
    - id: path
      type: System.String
      description: "開くログ ストアの基本ファイルの相対パスまたは絶対パス。"
    - id: mode
      type: System.IO.FileMode
      description: "1 つ、 <xref href=&quot;System.IO.FileMode&quot;> </xref>開くか、ストアを作成する方法を決定する値。"
    - id: access
      type: System.IO.FileAccess
      description: "1 つ、 <xref href=&quot;System.IO.FileAccess&quot;> </xref>によって、ファイルにアクセスできる方法を決定する値、 <xref href=&quot;System.IO.Log.LogStore&quot;></xref>です。"
  overload: System.IO.Log.LogStore.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>空の文字列 (&quot;&quot;) です。       - または -<code>path</code>空白のみが含まれています。       - または - <code>path</code>&1; つまたは複数の無効な文字が含まれています。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>無効な値が含まれています。       - または<code>access</code>に無効な値が含まれています。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが見つかりません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ログ ストアを開くときに、I/O エラーが発生します。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref href=&quot;System.IO.Log.LogStore&quot;></xref>必要な Common Log File System (CLFS) コンポーネントがインストールされていないために使用できません。 プラットフォームおよび使用可能な場合は、CLFS コンポーネントをインストール、 <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>クラスの代わりにします。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)'
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: LogStore(String,FileMode,FileAccess,FileShare)
  nameWithType: LogStore.LogStore(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.Log.LogStore.LogStore(String,FileMode,FileAccess,FileShare)
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.Log.LogStore&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターを新しい初期化<xref:System.IO.Log.LogStore>し、指定したパス、モード、およびアクセスと共に開きますオブジェクト</xref:System.IO.Log.LogStore>。 このストアが開き、指定したアクセスを共有します。       `path`パラメーターは、次の構文を使用する必要があります:`log:<physical log name>[::<log client name>]`場所`<physical log name>`ログ ファイルに有効なパスと`<log client name>`一意のクライアント識別子です。 ログ ストアは、物理ログ ストアと、仮想ログ ストアの両方ではなくはどちらかにする必要があります。 ログ ストアが、物理的または仮想的に作成されたら、有効期間にわたって維持します。 物理ログ名のみを指定して、物理ログ ストアが作成されます。 仮想ログ ストアを作成するには、物理ログ名とログ クライアント名の両方を指定します。       同じ物理ログ名を共有しているクライアントは、同じエクステント コレクションとポリシーを共有します。"
  syntax:
    content: public LogStore (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
    parameters:
    - id: path
      type: System.String
      description: "開くログ ストアの基本ファイルの相対パスまたは絶対パス。"
    - id: mode
      type: System.IO.FileMode
      description: "1 つ、 <xref href=&quot;System.IO.FileMode&quot;> </xref>開くか、ストアを作成する方法を決定する値。"
    - id: access
      type: System.IO.FileAccess
      description: "1 つ、 <xref href=&quot;System.IO.FileAccess&quot;> </xref>によって、ファイルにアクセスできる方法を決定する値、 <xref href=&quot;System.IO.Log.LogStore&quot;></xref>です。"
    - id: share
      type: System.IO.FileShare
      description: "1 つ、 <xref href=&quot;System.IO.FileShare&quot;> </xref>プロセス間でログ ストアを共有する方法を決定する値。"
  overload: System.IO.Log.LogStore.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>空の文字列 (&quot;&quot;) です。       - または -<code>path</code>空白のみが含まれています。       - または - <code>path</code>&1; つまたは複数の無効な文字が含まれています。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>無効な値が含まれています。       - または<code>access</code>に無効な値が含まれています。       - または -<code>share</code>に無効な値が含まれています。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが見つかりません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ログ ストアを開くときに、I/O エラーが発生します。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref href=&quot;System.IO.Log.LogStore&quot;></xref>必要な Common Log File System (CLFS) コンポーネントがインストールされていないために使用できません。 プラットフォームおよび使用可能な場合は、CLFS コンポーネントをインストール、 <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>クラスの代わりにします。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Security.AccessControl.FileSecurity)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Security.AccessControl.FileSecurity)'
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: LogStore(String,FileMode,FileAccess,FileShare,FileSecurity)
  nameWithType: LogStore.LogStore(String,FileMode,FileAccess,FileShare,FileSecurity)
  fullName: System.IO.Log.LogStore.LogStore(String,FileMode,FileAccess,FileShare,FileSecurity)
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.Log.LogStore&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターを新しい初期化<xref:System.IO.Log.LogStore>し、指定したパス、モード、およびアクセスと共に開きますオブジェクト</xref:System.IO.Log.LogStore>。 このストアが開き、指定したアクセスを共有します。 `path`パラメーターは、次の構文に従う必要があります:`log:<physical log name>[::<log client name>]`場所`<physical log name>`ログ ファイルに有効なパスと`<log client name>`一意のクライアント識別子です。 ログ ストアは、物理ログ ストアと、仮想ログ ストアの両方ではなくはどちらかにする必要があります。 ログ ストアが、物理的または仮想的に作成されたら、有効期間にわたって維持します。 物理ログ名のみを指定して、物理ログ ストアが作成されます。 仮想ログ ストアを作成するには、物理ログ名とログ クライアント名の両方を指定します。       同じ物理ログ名を共有しているクライアントは、同じエクステント コレクションとポリシーを共有します。"
  syntax:
    content: public LogStore (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Security.AccessControl.FileSecurity fileSecurity);
    parameters:
    - id: path
      type: System.String
      description: "開くログ ストアの基本ファイルの相対パスまたは絶対パス。"
    - id: mode
      type: System.IO.FileMode
      description: "1 つ、 <xref href=&quot;System.IO.FileMode&quot;> </xref>開くか、ストアを作成する方法を決定する値。"
    - id: access
      type: System.IO.FileAccess
      description: "1 つ、 <xref href=&quot;System.IO.FileAccess&quot;> </xref>によって、ファイルにアクセスできる方法を決定する値、 <xref href=&quot;System.IO.Log.LogStore&quot;></xref>です。"
    - id: share
      type: System.IO.FileShare
      description: "1 つ、 <xref href=&quot;System.IO.FileShare&quot;> </xref>プロセス間でログ ストアを共有する方法を決定する値。"
    - id: fileSecurity
      type: System.Security.AccessControl.FileSecurity
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref>ストアを作成する必要がある場合、新しく作成されたストアに設定するセキュリティを指定する値。"
  overload: System.IO.Log.LogStore.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定されたログ ストア ファイル名<code> path </code>が無効です。       - または - <code> Mode </code>は<xref uid=&quot;langword_csharp_CreateNew&quot; name=&quot;CreateNew&quot; href=&quot;&quot;> </xref>、書き込みアクセスがなければを使用することはできません。       - または - <code> Mode </code>は<xref uid=&quot;langword_csharp_OpenOrCreate&quot; name=&quot;OpenOrCreate&quot; href=&quot;&quot;> </xref>、書き込みアクセスがなければを使用することはできません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>無効な値が含まれています。       - または<code>access</code>に無効な値が含まれています。       - または -<code>share</code>に無効な値が含まれています。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが見つかりません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ログ ストアを開くときに、I/O エラーが発生します。       によって指定されたファイル<code> path </code>別のプロセスによって使用されているために、アクセスできません。       - または - で指定されたファイル<code> path </code>ファイルまたはディレクトリが既に存在するために作成することはできません。       - または - ログ ハンドルをスレッド プールにバインドできませんでした。       または、指定されたログ ファイル形式またはバージョンが無効です。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref href=&quot;System.IO.Log.LogStore&quot;></xref>必要な Common Log File System (CLFS) コンポーネントがインストールされていないために使用できません。 プラットフォームおよび使用可能な場合は、CLFS コンポーネントをインストール、 <xref href=&quot;System.IO.Log.FileRecordSequence&quot;> </xref>クラスの代わりにします。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "レコード シーケンスがいっぱいです。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.Archivable
  id: Archivable
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: Archivable
  nameWithType: LogStore.Archivable
  fullName: System.IO.Log.LogStore.Archivable
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "示す値を取得するかどうかこの<xref href=&quot;System.IO.Log.LogStore&quot;></xref>インスタンスをアーカイブすることができます。"
  remarks: "場合、<xref:System.IO.Log.LogStore>はアーカイブできませんへの呼び出し、<xref:System.IO.Log.LogStore.CreateLogArchiveSnapshot%2A>と<xref:System.IO.Log.LogStore.SetArchiveTail%2A>メソッドの結果、<xref:System.NotSupportedException>がスローされます</xref:System.NotSupportedException></xref:System.IO.Log.LogStore.SetArchiveTail%2A></xref:System.IO.Log.LogStore.CreateLogArchiveSnapshot%2A></xref:System.IO.Log.LogStore>。"
  syntax:
    content: public bool Archivable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>この場合<xref href=&quot;System.IO.Log.LogStore&quot;></xref>インスタンスがアーカイブされた、それ以外の場合も<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.Log.LogStore.Archivable*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後にプロパティがアクセスされました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.BaseSequenceNumber
  id: BaseSequenceNumber
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: BaseSequenceNumber
  nameWithType: LogStore.BaseSequenceNumber
  fullName: System.IO.Log.LogStore.BaseSequenceNumber
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "これで、有効なレコードに対応する下限のシーケンス番号を取得<xref href=&quot;System.IO.Log.LogStore&quot;></xref>インスタンス。"
  remarks: "有効なシーケンス番号より大きいまたは basesequencenumber と同じ値に等しいと<xref:System.IO.Log.LogStore.LastSequenceNumber%2A>。</xref:System.IO.Log.LogStore.LastSequenceNumber%2A>よりも小さい"
  syntax:
    content: public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "これで有効なレコードに対応する下限のシーケンス番号<xref href=&quot;System.IO.Log.LogStore&quot;></xref>インスタンス。"
  overload: System.IO.Log.LogStore.BaseSequenceNumber*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後にプロパティがアクセスされました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.CreateLogArchiveSnapshot
  id: CreateLogArchiveSnapshot
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: CreateLogArchiveSnapshot()
  nameWithType: LogStore.CreateLogArchiveSnapshot()
  fullName: System.IO.Log.LogStore.CreateLogArchiveSnapshot()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "バックアップを作成するログ ストアの状態のスナップショットを取得します。"
  remarks: ''
  example:
  - "The following example shows how to archive a <xref:System.IO.Log.LogStore> to an XML document.  \n  \n [!code-vb[logarchievesnapshot#0](~/add/codesnippet/visualbasic/m-system.io.log.logstore_1_1.vb)]\n [!code-cs[logarchievesnapshot#0](~/add/codesnippet/csharp/m-system.io.log.logstore_1_1.cs)]"
  syntax:
    content: public System.IO.Log.LogArchiveSnapshot CreateLogArchiveSnapshot ();
    parameters: []
    return:
      type: System.IO.Log.LogArchiveSnapshot
      description: "A <xref href=&quot;System.IO.Log.LogArchiveSnapshot&quot;> </xref>アーカイブのために必要な状態を格納するオブジェクト。"
  overload: System.IO.Log.LogStore.CreateLogArchiveSnapshot*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ログ ストアはアーカイブできません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "アーカイブ スナップショットを作成するときに、I/O エラーが発生します。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引数が正しくありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "無効な操作が実行されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "レコード シーケンスがいっぱいです。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.CreateLogArchiveSnapshot(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)
  id: CreateLogArchiveSnapshot(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: CreateLogArchiveSnapshot(SequenceNumber,SequenceNumber)
  nameWithType: LogStore.CreateLogArchiveSnapshot(SequenceNumber,SequenceNumber)
  fullName: System.IO.Log.LogStore.CreateLogArchiveSnapshot(SequenceNumber,SequenceNumber)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "バックアップを行うための特定のシーケンス番号の間でログ ストア状態のスナップショットを取得します。"
  remarks: "このメソッドから返されるアーカイブ スナップショットは、基本シーケンス番号またはアーカイブ シーケンス番号のいずれかからの情報を含む、小さい方最後のシーケンス番号。 最後のシーケンスの番号は、アーカイブにまで、最後のレコードにはのみが含まれていることを意味の包括的ではありません。 さらに、このメソッドを使用する場合、開始 SequenceNumber は一致するようにアーカイブするために、basesequencenumber と同じ値と等しくする必要があります。"
  syntax:
    content: public System.IO.Log.LogArchiveSnapshot CreateLogArchiveSnapshot (System.IO.Log.SequenceNumber first, System.IO.Log.SequenceNumber last);
    parameters:
    - id: first
      type: System.IO.Log.SequenceNumber
      description: "アーカイブする範囲の開始のシーケンス番号。"
    - id: last
      type: System.IO.Log.SequenceNumber
      description: "アーカイブする範囲の終了のシーケンス番号。"
    return:
      type: System.IO.Log.LogArchiveSnapshot
      description: "A <xref href=&quot;System.IO.Log.LogArchiveSnapshot&quot;> </xref>アーカイブのために必要な状態を格納するオブジェクト。"
  overload: System.IO.Log.LogStore.CreateLogArchiveSnapshot*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>first</code>または<code>last</code>このシーケンスの基本と最後のシーケンス番号の間ではありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>first</code>も大きい<code>last</code>です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "無効な操作が実行されました。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "アーカイブ スナップショットを作成するときに、I/O エラーが発生します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ログ ストアはアーカイブできません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "レコード シーケンスがいっぱいです。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.Delete(System.String)
  id: Delete(System.String)
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: Delete(String)
  nameWithType: LogStore.Delete(String)
  fullName: System.IO.Log.LogStore.Delete(String)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "ログ ストアを削除します。"
  syntax:
    content: public static void Delete (string path);
    parameters:
    - id: path
      type: System.String
      description: "削除するログ ストアの基本ファイルの相対パスまたは絶対パス。"
  overload: System.IO.Log.LogStore.Delete*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>空の文字列 (&quot;&quot;) です。       - または -<code>path</code>空白のみが含まれています。       - または - <code>path</code>&1; つまたは複数の無効な文字が含まれています。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが見つかりません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ログ ストアを開くときに、I/O エラーが発生します。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.Dispose
  id: Dispose
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: Dispose()
  nameWithType: LogStore.Dispose()
  fullName: System.IO.Log.LogStore.Dispose()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.IO.Log.LogStore&quot;></xref>です。"
  remarks: "<xref:System.IO.Log.LogStore>。</xref:System.IO.Log.LogStore>を使い終わったら破棄を呼び出します Dispose メソッドは、<xref:System.IO.Log.LogStore>使用不可の状態</xref:System.IO.Log.LogStore>。 Dispose を呼び出した後は、すべての参照を解放する必要があります、<xref:System.IO.Log.LogStore>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.IO.Log.LogStore>占有されていた</xref:System.IO.Log.LogStore></xref:System.IO.Log.LogStore>。      > [!NOTE] ><xref:System.IO.Log.LogStore></xref:System.IO.Log.LogStore>の最後の参照を解放する前に常に呼び出しが破棄。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.IO.Log.LogStore>オブジェクトの`Finalize`メソッド</xref:System.IO.Log.LogStore>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.Log.LogStore.Dispose*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.Extents
  id: Extents
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: Extents
  nameWithType: LogStore.Extents
  fullName: System.IO.Log.LogStore.Extents
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "このログ ストアのデータを格納しているログ エクステントのコレクションを取得します。"
  remarks: "A<xref:System.IO.Log.LogStore>インスタンスによって表されるディスク エクステントのコレクション内のデータを格納する<xref:System.IO.Log.LogExtent>インスタンス</xref:System.IO.Log.LogExtent></xref:System.IO.Log.LogStore>。 範囲を指定された<xref:System.IO.Log.LogStore>インスタンスはすべて、均一のサイズと、領域が追加されから削除、<xref:System.IO.Log.LogStore>エクステント増加分インスタンス</xref:System.IO.Log.LogStore></xref:System.IO.Log.LogStore>。 追加し、ログ エクステントを削除するを使用して、<xref:System.IO.Log.LogExtentCollection.Add%2A>と<xref:System.IO.Log.LogExtentCollection.Remove%2A>のメソッド、<xref:System.IO.Log.LogExtentCollection>オブジェクトで、このプロパティによって返される</xref:System.IO.Log.LogExtentCollection></xref:System.IO.Log.LogExtentCollection.Remove%2A></xref:System.IO.Log.LogExtentCollection.Add%2A>。"
  syntax:
    content: public System.IO.Log.LogExtentCollection Extents { get; }
    return:
      type: System.IO.Log.LogExtentCollection
      description: "A <xref href=&quot;System.IO.Log.LogExtentCollection&quot;> </xref>このログ ストアのデータをカプセル化したログ エクステントのコレクションを含むインスタンス。"
  overload: System.IO.Log.LogStore.Extents*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogStore.FreeBytes
  id: FreeBytes
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: FreeBytes
  nameWithType: LogStore.FreeBytes
  fullName: System.IO.Log.LogStore.FreeBytes
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "ログ ストアで使用できるバイト数を取得します。"
  syntax:
    content: public long FreeBytes { get; }
    return:
      type: System.Int64
      description: "ログ ストアで使用できるバイト数。"
  overload: System.IO.Log.LogStore.FreeBytes*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後にプロパティがアクセスされました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.Handle
  id: Handle
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: Handle
  nameWithType: LogStore.Handle
  fullName: System.IO.Log.LogStore.Handle
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "オペレーティング システム ファイル ハンドルが取得されるログ ファイルの現在の<xref href=&quot;System.IO.Log.LogStore&quot;></xref>インスタンスによってカプセル化します。"
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeFileHandle Handle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: "ファイルをオペレーティング システム ファイル ハンドルは、ログの現在の<xref href=&quot;System.IO.Log.LogStore&quot;></xref>インスタンスによってカプセル化します。"
  overload: System.IO.Log.LogStore.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogStore.LastSequenceNumber
  id: LastSequenceNumber
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: LastSequenceNumber
  nameWithType: LogStore.LastSequenceNumber
  fullName: System.IO.Log.LogStore.LastSequenceNumber
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "派生クラスでオーバーライドされると、ログ ストアに追加される次のレコードのシーケンス番号を取得します。"
  remarks: "有効なシーケンス番号がより大きいか等しい<xref:System.IO.Log.LogStore.BaseSequenceNumber%2A>LastSequenceNumber よりも小さいです</xref:System.IO.Log.LogStore.BaseSequenceNumber%2A>。"
  syntax:
    content: public System.IO.Log.SequenceNumber LastSequenceNumber { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "ログ ストアに追加される次のレコードのシーケンス番号。"
  overload: System.IO.Log.LogStore.LastSequenceNumber*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後にプロパティがアクセスされました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.Length
  id: Length
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: Length
  nameWithType: LogStore.Length
  fullName: System.IO.Log.LogStore.Length
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "(バイト単位)、ログ ストアのサイズを取得します。"
  remarks: "ログ ストアのサイズは、ログ エクステントのサイズの合計です。"
  syntax:
    content: public long Length { get; }
    return:
      type: System.Int64
      description: "(バイト単位)、ログ ストアのサイズ。"
  overload: System.IO.Log.LogStore.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後にプロパティがアクセスされました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.Policy
  id: Policy
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: Policy
  nameWithType: LogStore.Policy
  fullName: System.IO.Log.LogStore.Policy
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "このログ ストアに関連付けられたポリシーを取得します。"
  remarks: "<xref:System.IO.Log.LogPolicy>この<xref:System.IO.Log.LogStore>。</xref:System.IO.Log.LogStore>に関連付けられているを確認し、ログのポリシーを操作するには、このプロパティによって返されるインスタンス</xref:System.IO.Log.LogPolicy>を使用することができます。"
  syntax:
    content: public System.IO.Log.LogPolicy Policy { get; }
    return:
      type: System.IO.Log.LogPolicy
      description: "A <xref href=&quot;System.IO.Log.LogPolicy&quot;> </xref>このログ ストアに関連付けられているポリシーを表すインスタンス。"
  overload: System.IO.Log.LogStore.Policy*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogStore.SetArchiveTail(System.IO.Log.SequenceNumber)
  id: SetArchiveTail(System.IO.Log.SequenceNumber)
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: SetArchiveTail(SequenceNumber)
  nameWithType: LogStore.SetArchiveTail(SequenceNumber)
  fullName: System.IO.Log.LogStore.SetArchiveTail(SequenceNumber)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "アーカイブ末尾のシーケンス番号を設定します。"
  remarks: "基本シーケンス番号とアーカイブ末尾のうち、小さい方では、ログの末尾を決定します。"
  example:
  - "The following example shows how to archive a <xref:System.IO.Log.LogStore> to an XML document.  \n  \n [!code-vb[logarchievesnapshot#0](~/add/codesnippet/visualbasic/m-system.io.log.logstore_0_1.vb)]\n [!code-cs[logarchievesnapshot#0](~/add/codesnippet/csharp/m-system.io.log.logstore_0_1.cs)]"
  syntax:
    content: public void SetArchiveTail (System.IO.Log.SequenceNumber archiveTail);
    parameters:
    - id: archiveTail
      type: System.IO.Log.SequenceNumber
      description: "アーカイブ末尾のシーケンス番号。"
  overload: System.IO.Log.LogStore.SetArchiveTail*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>archiveTail</code>このシーケンスの基本と最後のシーケンス番号の間ではありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>archiveTail</code>このシーケンスに対して無効です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "無効な操作が実行されました。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "アーカイブ スナップショットを作成するときに、I/O エラーが発生します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ログ ストアはアーカイブできません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "シーケンスが破棄された後に、メソッドが呼び出されました。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "プログラムの実行を継続する十分なメモリがありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "指定されたログ ストアへのアクセスは、オペレーティング システムによって拒否されました。"
  platform:
  - net462
- uid: System.IO.Log.LogStore.StreamCount
  id: StreamCount
  parent: System.IO.Log.LogStore
  langs:
  - csharp
  name: StreamCount
  nameWithType: LogStore.StreamCount
  fullName: System.IO.Log.LogStore.StreamCount
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "このログ ストアのログ ストリームの数を取得します。"
  syntax:
    content: public int StreamCount { get; }
    return:
      type: System.Int32
      description: "このログ ストアのログ ストリームの数。"
  overload: System.IO.Log.LogStore.StreamCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.Log.SequenceFullException
  parent: System.IO.Log
  isExternal: false
  name: SequenceFullException
  nameWithType: SequenceFullException
  fullName: System.IO.Log.SequenceFullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.Log.LogStore.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)
  parent: System.IO.Log.LogStore
  isExternal: false
  name: LogStore(SafeFileHandle)
  nameWithType: LogStore.LogStore(SafeFileHandle)
  fullName: System.IO.Log.LogStore.LogStore(SafeFileHandle)
- uid: Microsoft.Win32.SafeHandles.SafeFileHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeFileHandle
  nameWithType: SafeFileHandle
  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle
- uid: System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode)
  parent: System.IO.Log.LogStore
  isExternal: false
  name: LogStore(String,FileMode)
  nameWithType: LogStore.LogStore(String,FileMode)
  fullName: System.IO.Log.LogStore.LogStore(String,FileMode)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Log.LogStore
  isExternal: false
  name: LogStore(String,FileMode,FileAccess)
  nameWithType: LogStore.LogStore(String,FileMode,FileAccess)
  fullName: System.IO.Log.LogStore.LogStore(String,FileMode,FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Log.LogStore
  isExternal: false
  name: LogStore(String,FileMode,FileAccess,FileShare)
  nameWithType: LogStore.LogStore(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.Log.LogStore.LogStore(String,FileMode,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.Log.LogStore.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Security.AccessControl.FileSecurity)
  parent: System.IO.Log.LogStore
  isExternal: false
  name: LogStore(String,FileMode,FileAccess,FileShare,FileSecurity)
  nameWithType: LogStore.LogStore(String,FileMode,FileAccess,FileShare,FileSecurity)
  fullName: System.IO.Log.LogStore.LogStore(String,FileMode,FileAccess,FileShare,FileSecurity)
- uid: System.Security.AccessControl.FileSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: FileSecurity
  nameWithType: FileSecurity
  fullName: System.Security.AccessControl.FileSecurity
- uid: System.IO.Log.LogStore.Archivable
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Archivable
  nameWithType: LogStore.Archivable
  fullName: System.IO.Log.LogStore.Archivable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Log.LogStore.BaseSequenceNumber
  parent: System.IO.Log.LogStore
  isExternal: false
  name: BaseSequenceNumber
  nameWithType: LogStore.BaseSequenceNumber
  fullName: System.IO.Log.LogStore.BaseSequenceNumber
- uid: System.IO.Log.SequenceNumber
  parent: System.IO.Log
  isExternal: false
  name: SequenceNumber
  nameWithType: SequenceNumber
  fullName: System.IO.Log.SequenceNumber
- uid: System.IO.Log.LogStore.CreateLogArchiveSnapshot
  parent: System.IO.Log.LogStore
  isExternal: false
  name: CreateLogArchiveSnapshot()
  nameWithType: LogStore.CreateLogArchiveSnapshot()
  fullName: System.IO.Log.LogStore.CreateLogArchiveSnapshot()
- uid: System.IO.Log.LogArchiveSnapshot
  parent: System.IO.Log
  isExternal: false
  name: LogArchiveSnapshot
  nameWithType: LogArchiveSnapshot
  fullName: System.IO.Log.LogArchiveSnapshot
- uid: System.IO.Log.LogStore.CreateLogArchiveSnapshot(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)
  parent: System.IO.Log.LogStore
  isExternal: false
  name: CreateLogArchiveSnapshot(SequenceNumber,SequenceNumber)
  nameWithType: LogStore.CreateLogArchiveSnapshot(SequenceNumber,SequenceNumber)
  fullName: System.IO.Log.LogStore.CreateLogArchiveSnapshot(SequenceNumber,SequenceNumber)
- uid: System.IO.Log.LogStore.Delete(System.String)
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Delete(String)
  nameWithType: LogStore.Delete(String)
  fullName: System.IO.Log.LogStore.Delete(String)
- uid: System.IO.Log.LogStore.Dispose
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Dispose()
  nameWithType: LogStore.Dispose()
  fullName: System.IO.Log.LogStore.Dispose()
- uid: System.IO.Log.LogStore.Extents
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Extents
  nameWithType: LogStore.Extents
  fullName: System.IO.Log.LogStore.Extents
- uid: System.IO.Log.LogExtentCollection
  parent: System.IO.Log
  isExternal: false
  name: LogExtentCollection
  nameWithType: LogExtentCollection
  fullName: System.IO.Log.LogExtentCollection
- uid: System.IO.Log.LogStore.FreeBytes
  parent: System.IO.Log.LogStore
  isExternal: false
  name: FreeBytes
  nameWithType: LogStore.FreeBytes
  fullName: System.IO.Log.LogStore.FreeBytes
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Log.LogStore.Handle
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Handle
  nameWithType: LogStore.Handle
  fullName: System.IO.Log.LogStore.Handle
- uid: System.IO.Log.LogStore.LastSequenceNumber
  parent: System.IO.Log.LogStore
  isExternal: false
  name: LastSequenceNumber
  nameWithType: LogStore.LastSequenceNumber
  fullName: System.IO.Log.LogStore.LastSequenceNumber
- uid: System.IO.Log.LogStore.Length
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Length
  nameWithType: LogStore.Length
  fullName: System.IO.Log.LogStore.Length
- uid: System.IO.Log.LogStore.Policy
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Policy
  nameWithType: LogStore.Policy
  fullName: System.IO.Log.LogStore.Policy
- uid: System.IO.Log.LogPolicy
  parent: System.IO.Log
  isExternal: false
  name: LogPolicy
  nameWithType: LogPolicy
  fullName: System.IO.Log.LogPolicy
- uid: System.IO.Log.LogStore.SetArchiveTail(System.IO.Log.SequenceNumber)
  parent: System.IO.Log.LogStore
  isExternal: false
  name: SetArchiveTail(SequenceNumber)
  nameWithType: LogStore.SetArchiveTail(SequenceNumber)
  fullName: System.IO.Log.LogStore.SetArchiveTail(SequenceNumber)
- uid: System.IO.Log.LogStore.StreamCount
  parent: System.IO.Log.LogStore
  isExternal: false
  name: StreamCount
  nameWithType: LogStore.StreamCount
  fullName: System.IO.Log.LogStore.StreamCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Log.LogStore.#ctor*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: LogStore
  nameWithType: LogStore.LogStore
- uid: System.IO.Log.LogStore.Archivable*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Archivable
  nameWithType: LogStore.Archivable
- uid: System.IO.Log.LogStore.BaseSequenceNumber*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: BaseSequenceNumber
  nameWithType: LogStore.BaseSequenceNumber
- uid: System.IO.Log.LogStore.CreateLogArchiveSnapshot*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: CreateLogArchiveSnapshot
  nameWithType: LogStore.CreateLogArchiveSnapshot
- uid: System.IO.Log.LogStore.Delete*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Delete
  nameWithType: LogStore.Delete
- uid: System.IO.Log.LogStore.Dispose*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Dispose
  nameWithType: LogStore.Dispose
- uid: System.IO.Log.LogStore.Extents*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Extents
  nameWithType: LogStore.Extents
- uid: System.IO.Log.LogStore.FreeBytes*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: FreeBytes
  nameWithType: LogStore.FreeBytes
- uid: System.IO.Log.LogStore.Handle*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Handle
  nameWithType: LogStore.Handle
- uid: System.IO.Log.LogStore.LastSequenceNumber*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: LastSequenceNumber
  nameWithType: LogStore.LastSequenceNumber
- uid: System.IO.Log.LogStore.Length*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Length
  nameWithType: LogStore.Length
- uid: System.IO.Log.LogStore.Policy*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: Policy
  nameWithType: LogStore.Policy
- uid: System.IO.Log.LogStore.SetArchiveTail*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: SetArchiveTail
  nameWithType: LogStore.SetArchiveTail
- uid: System.IO.Log.LogStore.StreamCount*
  parent: System.IO.Log.LogStore
  isExternal: false
  name: StreamCount
  nameWithType: LogStore.StreamCount
