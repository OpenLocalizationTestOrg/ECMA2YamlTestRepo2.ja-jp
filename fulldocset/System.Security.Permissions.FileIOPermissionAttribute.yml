### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.FileIOPermissionAttribute
  id: FileIOPermissionAttribute
  children:
  - System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.FileIOPermissionAttribute.All
  - System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  - System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  - System.Security.Permissions.FileIOPermissionAttribute.Append
  - System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  - System.Security.Permissions.FileIOPermissionAttribute.CreatePermission
  - System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  - System.Security.Permissions.FileIOPermissionAttribute.Read
  - System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  - System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  - System.Security.Permissions.FileIOPermissionAttribute.Write
  langs:
  - csharp
  name: FileIOPermissionAttribute
  nameWithType: FileIOPermissionAttribute
  fullName: System.Security.Permissions.FileIOPermissionAttribute
  type: Class
  summary: "により、セキュリティ アクションを<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>宣言セキュリティを使用してコードに適用します。 このクラスは継承できません。"
  remarks: "Files and directories are specified using absolute paths. When accessing files, a security check is performed when the file is created or opened. The security check is not done again unless the file is closed and reopened. Checking permissions when the file is first accessed minimizes the impact of the security check on application performance because opening a file happens only once, while reading and writing can happen multiple times.  \n  \n The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \n  \n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \n  \n> [!CAUTION]\n>  `Unrestricted` <xref:System.Security.Permissions.FileIOPermission> grants permission for all paths within a file system, including multiple pathnames that can be used to access a single given file. To <xref:System.Security.CodeAccessPermission.Deny%2A> access to a file, you must `Deny` all possible paths to the file. For example, if \\\\\\server\\share is mapped to the network drive X, to `Deny` access to \\\\\\server\\share\\file, you must `Deny` \\\\\\server\\share\\file, X:\\file and any other path that you can use to access the file."
  example:
  - "The following code example demonstrates how to request <xref:System.Security.Permissions.FileIOPermission> by using the FileIOPermissionAttribute class, indicating the only permission that is to be granted to the code.  \n  \n [!code-cpp[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/cpp/t-system.security.permis_3_1.cpp)]\n [!code-vb[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_3_1.vb)]\n [!code-cs[Classic FileIOPermissionAttribute Example#1](~/add/codesnippet/csharp/t-system.security.permis_3_1.cs)]  \n  \n The following example shows how to demand that the calling code has unrestricted <xref:System.Security.Permissions.FileIOPermission>. You typically make demands in managed libraries (DLLs) to help protect methods or classes from potentially harmful code.  \n  \n [!code-cpp[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/cpp/t-system.security.permis_3_2.cpp)]\n [!code-vb[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/visualbasic/t-system.security.permis_3_2.vb)]\n [!code-cs[Classic FileIOPermissionAttribute Example#2](~/add/codesnippet/csharp/t-system.security.permis_3_2.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class FileIOPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: FileIOPermissionAttribute(SecurityAction)
  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAttribute&quot;> </xref> 、指定したクラス<xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref>です。"
  remarks: ''
  example:
  - "The following code example creates several instances of the <xref:System.Security.Permissions.FileIOPermissionAttribute> class to set varying levels of file I/O permissions.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/cpp/b53c5cc8-9649-49f3-9193-_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/csharp/b53c5cc8-9649-49f3-9193-_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#1](~/add/codesnippet/visualbasic/b53c5cc8-9649-49f3-9193-_1.vb)]"
  syntax:
    content: public FileIOPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "1 つ、 <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>値。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> action </code>パラメーターが有効ではありません<xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.All
  id: All
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: All
  nameWithType: FileIOPermissionAttribute.All
  fullName: System.Security.Permissions.FileIOPermissionAttribute.All
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得またはファイルまたは文字列値が指定されているディレクトリにフル アクセスを設定します。"
  remarks: "このプロパティは、1 つのファイルまたはディレクトリのアクセスを設定します。 追加の属性を使用すると、追加のファイルおよびディレクトリを指定できます。"
  example:
  - "The following code example sets the All property to grant full access to the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/cpp/p-system.security.permis_24_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/csharp/p-system.security.permis_24_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#6](~/add/codesnippet/visualbasic/p-system.security.permis_24_1.vb)]"
  syntax:
    content: public string All { get; set; }
    return:
      type: System.String
      description: "ファイルまたはフル アクセスのディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.All*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "このプロパティの get メソッドがサポートされていません。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  id: AllFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: AllFiles
  nameWithType: FileIOPermissionAttribute.AllFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得またはすべてのファイルへのアクセス許可を設定します。"
  remarks: "このプロパティを取得またはローカル コンピューターとネットワーク ドライブ上のすべてのファイルへのアクセス許可を設定します。       個人<xref:System.Security.Permissions.FileIOPermissionAccess>値をビット単位で決定できます`AND`操作</xref:System.Security.Permissions.FileIOPermissionAccess>。"
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>をすべてのファイルのアクセス許可を表す値です。 既定値は<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.AllFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  id: AllLocalFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: AllLocalFiles
  nameWithType: FileIOPermissionAttribute.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得またはすべてのローカル ファイルへのアクセス許可を設定します。"
  remarks: "ローカル ファイルは、ローカル コンピューター上に含まれるファイルです。 ネットワーク ドライブを通じてアクセスされていないすべてのファイルは、ローカル ファイルです。       個人<xref:System.Security.Permissions.FileIOPermissionAccess>値をビット単位で決定できます`AND`操作</xref:System.Security.Permissions.FileIOPermissionAccess>。"
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>をすべてのローカル ファイルのアクセス許可を表す値です。 既定値は<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.Append
  id: Append
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: Append
  nameWithType: FileIOPermissionAttribute.Append
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Append
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "追加のファイルまたは文字列値が指定されているディレクトリへのアクセスを取得または設定します。"
  remarks: "このプロパティは、1 つのファイルまたはディレクトリのアクセスを設定します。 追加の属性を使用すると、追加のファイルおよびディレクトリを指定できます。"
  example:
  - "The following code example sets the Append property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/cpp/p-system.security.permis_6_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/csharp/p-system.security.permis_6_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#4](~/add/codesnippet/visualbasic/p-system.security.permis_6_1.vb)]"
  syntax:
    content: public string Append { get; set; }
    return:
      type: System.String
      description: "ファイルまたは追加アクセスのためのディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  id: ChangeAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: ChangeAccessControl
  nameWithType: FileIOPermissionAttribute.ChangeAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得または設定、ファイルまたはディレクトリのアクセス制御情報を変更できます。"
  remarks: "このプロパティを取得または&1; つのファイルまたはディレクトリへのアクセスを設定します。 使用して追加<xref:System.Security.Permissions.FileIOPermissionAttribute>属性を追加のファイルおよびディレクトリを指定しています</xref:System.Security.Permissions.FileIOPermissionAttribute>。      > [!IMPORTANT] > アクセス制御リスト (ACL) には、個人またはグループがある、または権限がない、特定のファイルとそのプロパティに特定のアクションをユーザーがについて説明します。  ACL を変更することは重要なアクセス許可し、慎重に付与する必要があります。"
  syntax:
    content: public string ChangeAccessControl { get; set; }
    return:
      type: System.String
      description: "ファイルまたはアクセス制御情報を変更できるディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: FileIOPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "作成して、新しい返します<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>です。"
  remarks: "このメソッドは、アプリケーション コードからではなく、セキュリティ システムからのみ呼び出す必要があります。       コンパイル時に、属性は、セキュリティの宣言をメタデータのシリアル化された形式に変換されます。 メタデータの宣言セキュリティ データは、この属性に対応する権限をこのメソッドが返すから作成されます。"
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>この属性に対応します。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ファイルまたはディレクトリのアクセスをセキュリティで保護する対象のパス情報には、無効な文字やワイルドカード文字が含まれています。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  id: PathDiscovery
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: PathDiscovery
  nameWithType: FileIOPermissionAttribute.PathDiscovery
  fullName: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得またはファイルまたはパスの検出を付与するディレクトリを設定します。"
  remarks: "Path discovery controls access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.  \n  \n> [!NOTE]\n>  For performance reasons, PathDiscovery should be granted only to directories, not to files. For example, PathDiscovery permission should be granted to paths such as C:\\test and C:\\test\\\\, not to files such as C:\\test\\example.txt.  \n  \n This property sets access for a single file or directory. Use additional attributes to specify additional files and directories."
  example:
  - "The following code example sets the PathDiscovery property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/cpp/p-system.security.permis_31_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/csharp/p-system.security.permis_31_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#3](~/add/codesnippet/visualbasic/p-system.security.permis_31_1.vb)]"
  syntax:
    content: public string PathDiscovery { get; set; }
    return:
      type: System.String
      description: "ファイルまたはディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.Read
  id: Read
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: Read
  nameWithType: FileIOPermissionAttribute.Read
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Read
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得またはファイルまたは文字列値で指定されたディレクトリの読み取りアクセス許可を設定します。"
  remarks: "このプロパティは、1 つのファイルまたはディレクトリのアクセスを設定します。 追加の属性を使用すると、追加のファイルおよびディレクトリを指定できます。"
  example:
  - "The following example sets the Read property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/cpp/p-system.security.permis_20_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/csharp/p-system.security.permis_20_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#2](~/add/codesnippet/visualbasic/p-system.security.permis_20_1.vb)]"
  syntax:
    content: public string Read { get; set; }
    return:
      type: System.String
      description: "ファイルまたは読み取りアクセス用のディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  id: ViewAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: ViewAccessControl
  nameWithType: FileIOPermissionAttribute.ViewAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得または設定、ファイルまたはディレクトリのアクセス制御情報を表示できます。"
  remarks: "このプロパティを取得または&1; つのファイルまたはディレクトリへのアクセスを設定します。 使用して追加<xref:System.Security.Permissions.FileIOPermissionAttribute>属性を追加のファイルおよびディレクトリを指定しています</xref:System.Security.Permissions.FileIOPermissionAttribute>。      > [!IMPORTANT] > アクセス制御リスト (ACL) には、個人またはグループがある、または権限がない、特定のファイルとそのプロパティに特定のアクションをユーザーがについて説明します。  ACL を表示する機能は重要なアクセス許可し、慎重に付与する必要があります。"
  syntax:
    content: public string ViewAccessControl { get; set; }
    return:
      type: System.String
      description: "ファイルまたはアクセス制御情報を表示できるディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  id: ViewAndModify
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: ViewAndModify
  nameWithType: FileIOPermissionAttribute.ViewAndModify
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得または設定、ファイルまたはディレクトリのファイル データを表示および変更できます。"
  remarks: "このプロパティを設定、 <xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A>、 <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A>、 <xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A>、および<xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A>1 つのファイルまたはディレクトリのプロパティ</xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A></xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A></xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A></xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A>。 使用して追加<xref:System.Security.Permissions.FileIOPermissionAttribute>属性を追加のファイルおよびディレクトリを指定しています</xref:System.Security.Permissions.FileIOPermissionAttribute>。 アクセス権は、ファイル データのみです。アクセス制御のプロパティ<xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A>と<xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A>。</xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A></xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A>含まれない      > [!NOTE] >、`get`アクセサーは c# コンパイラとの互換性を提供します。 C# コンパイラでは、読み取り/書き込み属性プロパティが必要です。"
  syntax:
    content: public string ViewAndModify { get; set; }
    return:
      type: System.String
      description: "ファイルまたはファイル データを表示および変更できるディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref>アクセサーが呼び出されます。 アクセサーは c# コンパイラの互換性のためだけに提供されます。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAttribute.Write
  id: Write
  parent: System.Security.Permissions.FileIOPermissionAttribute
  langs:
  - csharp
  name: Write
  nameWithType: FileIOPermissionAttribute.Write
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Write
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得またはファイルまたは文字列値で指定されたディレクトリへの書き込みアクセスを設定します。"
  remarks: "このプロパティは、1 つのファイルまたはディレクトリのアクセスを設定します。 追加の属性を使用すると、追加のファイルおよびディレクトリを指定できます。"
  example:
  - "The following example sets the Write property to grant <xref:System.Security.Permissions.FileIOPermissionAccess> access to files in the specified directory.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/cpp/p-system.security.permis_18_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/csharp/p-system.security.permis_18_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#5](~/add/codesnippet/visualbasic/p-system.security.permis_18_1.vb)]"
  syntax:
    content: public string Write { get; set; }
    return:
      type: System.String
      description: "ファイルまたは書き込みアクセス用のディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermissionAttribute.Write*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: FileIOPermissionAttribute(SecurityAction)
  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.FileIOPermissionAttribute.All
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: All
  nameWithType: FileIOPermissionAttribute.All
  fullName: System.Security.Permissions.FileIOPermissionAttribute.All
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermissionAttribute.AllFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllFiles
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermissionAttribute.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermissionAttribute.Append
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Append
  nameWithType: FileIOPermissionAttribute.Append
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Append
- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ChangeAccessControl
  nameWithType: FileIOPermissionAttribute.ChangeAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: FileIOPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: PathDiscovery
  nameWithType: FileIOPermissionAttribute.PathDiscovery
  fullName: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery
- uid: System.Security.Permissions.FileIOPermissionAttribute.Read
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Read
  nameWithType: FileIOPermissionAttribute.Read
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Read
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAccessControl
  nameWithType: FileIOPermissionAttribute.ViewAccessControl
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAndModify
  nameWithType: FileIOPermissionAttribute.ViewAndModify
  fullName: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify
- uid: System.Security.Permissions.FileIOPermissionAttribute.Write
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Write
  nameWithType: FileIOPermissionAttribute.Write
  fullName: System.Security.Permissions.FileIOPermissionAttribute.Write
- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: FileIOPermissionAttribute
  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute
- uid: System.Security.Permissions.FileIOPermissionAttribute.All*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: All
  nameWithType: FileIOPermissionAttribute.All
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermissionAttribute.AllFiles
- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermissionAttribute.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermissionAttribute.Append*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Append
  nameWithType: FileIOPermissionAttribute.Append
- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ChangeAccessControl
  nameWithType: FileIOPermissionAttribute.ChangeAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: FileIOPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: PathDiscovery
  nameWithType: FileIOPermissionAttribute.PathDiscovery
- uid: System.Security.Permissions.FileIOPermissionAttribute.Read*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Read
  nameWithType: FileIOPermissionAttribute.Read
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAccessControl
  nameWithType: FileIOPermissionAttribute.ViewAccessControl
- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: ViewAndModify
  nameWithType: FileIOPermissionAttribute.ViewAndModify
- uid: System.Security.Permissions.FileIOPermissionAttribute.Write*
  parent: System.Security.Permissions.FileIOPermissionAttribute
  isExternal: false
  name: Write
  nameWithType: FileIOPermissionAttribute.Write
