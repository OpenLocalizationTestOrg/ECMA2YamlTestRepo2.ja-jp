### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.Dispatcher
  id: Dispatcher
  children:
  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])
  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  - System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.Dispatcher.CheckAccess
  - System.Windows.Threading.Dispatcher.CurrentDispatcher
  - System.Windows.Threading.Dispatcher.DisableProcessing
  - System.Windows.Threading.Dispatcher.ExitAllFrames
  - System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)
  - System.Windows.Threading.Dispatcher.HasShutdownFinished
  - System.Windows.Threading.Dispatcher.HasShutdownStarted
  - System.Windows.Threading.Dispatcher.Hooks
  - System.Windows.Threading.Dispatcher.Invoke(System.Action)
  - System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  - System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)
  - System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})
  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  - System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)
  - System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  - System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})
  - System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  - System.Windows.Threading.Dispatcher.InvokeShutdown
  - System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)
  - System.Windows.Threading.Dispatcher.Run
  - System.Windows.Threading.Dispatcher.ShutdownFinished
  - System.Windows.Threading.Dispatcher.ShutdownStarted
  - System.Windows.Threading.Dispatcher.Thread
  - System.Windows.Threading.Dispatcher.UnhandledException
  - System.Windows.Threading.Dispatcher.UnhandledExceptionFilter
  - System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)
  - System.Windows.Threading.Dispatcher.VerifyAccess
  - System.Windows.Threading.Dispatcher.Yield
  - System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)
  langs:
  - csharp
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
  type: Class
  summary: "スレッドの作業項目のキューを管理するためのサービスを提供します。"
  remarks: "ディスパッチャーは、特定のスレッドの作業項目の優先順位の高いキューを保持します。       ディスパッチャーは、スレッドで作成された、ディスパッチャーがシャット ダウン場合でも、スレッドに関連付けることができる唯一のディスパッチャーになります。       取得しようとすると、<xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>の現在のスレッドとディスパッチャーに関連付けられていないスレッド、ディスパッチャーが作成されます</xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>。 ディスパッチャーは<xref:System.Windows.Threading.DispatcherObject>。</xref:System.Windows.Threading.DispatcherObject>を作成するときにも作成します。 バック グラウンド スレッドでディスパッチャーを作成する場合は、スレッドを終了する前に、ディスパッチャーをシャット ダウンすることを確認します。       ディスパッチャーがシャット ダウンは再開できません。       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、<xref:System.Windows.Threading.DispatcherObject>ディスパッチャーに関連付けられていることによってのみアクセスできます</xref:System.Windows.Threading.DispatcherObject>。  たとえば、バック グラウンド スレッドがの内容を更新できません、<xref:System.Windows.Controls.Button>にディスパッチャーに関連付けられる、[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]スレッド</xref:System.Windows.Controls.Button>。  バック グラウンド スレッドにアクセスするために、<xref:System.Windows.Controls.ContentControl.Content%2A>のプロパティ、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドがディスパッチャーに関連付けられている作業を委任する必要があります、[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]スレッド</xref:System.Windows.Controls.Button></xref:System.Windows.Controls.ContentControl.Content%2A>。  いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>  操作は、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>位置にあるディスパッチャーのキューに追加されます。       場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>をシャット ダウン、返された<xref:System.Windows.Threading.DispatcherOperation><xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus>に設定されている</xref:System.Windows.Threading.DispatcherOperation>の status プロパティがディスパッチャーに呼び出されます</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       すべてのディスパッチャーでメソッドの例外が<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>は、フリー スレッドします</xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>。       派生したオブジェクト<xref:System.Windows.Threading.DispatcherObject>スレッド アフィニティがあります</xref:System.Windows.Threading.DispatcherObject>。       派生したオブジェクト<xref:System.Windows.Freezable>はフリー スレッドが固定されている場合</xref:System.Windows.Freezable>。  詳細については、次を参照してください。 [Freezable オブジェクトの概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example shows how to place an operation onto a Dispatcher.  For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).  \n  \n First, a delegate is created that accepts no arguments.  \n  \n [!code-vb[ThreadingPrimeNumber#ThreadingPrimeNumberInit](~/add/codesnippet/visualbasic/t-system.windows.threadi_2_1.vb)]\n [!code-cs[ThreadingPrimeNumber#ThreadingPrimeNumberInit](~/add/codesnippet/csharp/t-system.windows.threadi_2_1.cs)]  \n  \n Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.  This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.  \n  \n [!code-vb[ThreadingPrimeNumber#ThreadingPrimeNumberBeingInvoke](~/add/codesnippet/visualbasic/t-system.windows.threadi_2_2.vb)]\n [!code-cs[ThreadingPrimeNumber#ThreadingPrimeNumberBeingInvoke](~/add/codesnippet/csharp/t-system.windows.threadi_2_2.cs)]"
  syntax:
    content: public sealed class Dispatcher
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])
  id: BeginInvoke(System.Delegate,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvoke(Delegate,Object[])
  nameWithType: Dispatcher.BeginInvoke(Delegate,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(Delegate,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで非同期的に指定された引数で指定したデリゲートを実行する、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に作成されました。"
  remarks: "<xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます: - 変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします</xref:System.Windows.Threading.DispatcherPriority></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.DispatcherOperation>。      -デリゲートがイベント キューから削除しています。      -を返すデリゲート待機しています。      後に、デリゲートが返された値を取得するが実行されます。       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。 たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。 バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。 いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A> 操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>に<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返された<xref:System.Windows.Threading.DispatcherOperation><xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus>に設定されている</xref:System.Windows.Threading.DispatcherOperation>の status プロパティが</xref:System.Windows.Threading.Dispatcher>呼び出されます</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "指定されたパラメーターを受け取るメソッドへのデリゲート`args`にプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: args
      type: System.Object[]
      description: "特定のメソッドに引数として渡すオブジェクトの配列。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "後すぐに返されるオブジェクトを<xref:System.Windows.Threading.Dispatcher.BeginInvoke*>が呼び出されると、それが実行保留中イベントのキューとして、デリゲートと対話する使用できる</xref:System.Windows.Threading.Dispatcher.BeginInvoke*>。"
  overload: System.Windows.Threading.Dispatcher.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  id: BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvoke(DispatcherPriority,Delegate)
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate)
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで、指定された優先順位で非同期的に指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられています。"
  remarks: "同時に複数の BeginInvoke 呼び出しが行われる場合<xref:System.Windows.Threading.DispatcherPriority>、これらは、呼び出しが行われた順序で実行されます</xref:System.Windows.Threading.DispatcherPriority>。       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返します、<xref:System.Windows.Threading.DispatcherOperation>デリゲートは、キューでは、イベントの場合、デリゲートと対話するために使用できるオブジェクト</xref:System.Windows.Threading.DispatcherOperation>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       <xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます: - 変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします</xref:System.Windows.Threading.DispatcherPriority></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.DispatcherOperation>。      -デリゲートがイベント キューから削除しています。      -を返すデリゲート待機しています。      後に、デリゲートが返された値を取得するが実行されます。       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。  たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。  バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。  いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>  操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>に<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返された<xref:System.Windows.Threading.DispatcherOperation><xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus>に設定されている</xref:System.Windows.Threading.DispatcherOperation>の status プロパティが</xref:System.Windows.Threading.Dispatcher>呼び出されます</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>"
  example:
  - "The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.  For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).  \n  \n First, a delegate is created that accepts no arguments.  \n  \n [!code-vb[ThreadingPrimeNumber#ThreadingPrimeNumberInit](~/add/codesnippet/visualbasic/8c08cb62-5b5f-4560-a7bd-_1.vb)]\n [!code-cs[ThreadingPrimeNumber#ThreadingPrimeNumberInit](~/add/codesnippet/csharp/8c08cb62-5b5f-4560-a7bd-_1.cs)]  \n  \n Next, BeginInvoke is called.  Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.   The call to BeginInvoke takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.  \n  \n [!code-vb[ThreadingPrimeNumber#ThreadingPrimeNumberBeingInvoke](~/add/codesnippet/visualbasic/8c08cb62-5b5f-4560-a7bd-_2.vb)]\n [!code-cs[ThreadingPrimeNumber#ThreadingPrimeNumberBeingInvoke](~/add/codesnippet/csharp/8c08cb62-5b5f-4560-a7bd-_2.cs)]"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: method
      type: System.Delegate
      description: "メソッドへのデリゲートを引数を使用しないにプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "後すぐに返されるオブジェクトを<xref:System.Windows.Threading.Dispatcher.BeginInvoke*>が呼び出されると、それが実行保留中イベントのキューとして、デリゲートと対話する使用できる</xref:System.Windows.Threading.Dispatcher.BeginInvoke*>。"
  overload: System.Windows.Threading.Dispatcher.BeginInvoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>有効ではありません<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  id: BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvoke(Delegate,DispatcherPriority,Object[])
  nameWithType: Dispatcher.BeginInvoke(Delegate,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(Delegate,DispatcherPriority,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで非同期的に、引数を指定して、指定された優先順位で指定したデリゲートを実行する、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に作成されました。"
  remarks: "<xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます: - 変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします</xref:System.Windows.Threading.DispatcherPriority></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.DispatcherOperation>。      -デリゲートがイベント キューから削除しています。      -を返すデリゲート待機しています。      後に、デリゲートが返された値を取得するが実行されます。       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。 たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。 バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。 いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A> 操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>に<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返された<xref:System.Windows.Threading.DispatcherOperation><xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus>に設定されている</xref:System.Windows.Threading.DispatcherOperation>の status プロパティが</xref:System.Windows.Threading.Dispatcher>呼び出されます</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "指定されたパラメーターを受け取るメソッドへのデリゲート`args`にプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: args
      type: System.Object[]
      description: "特定のメソッドに引数として渡すオブジェクトの配列。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "後すぐに返されるオブジェクトを<xref:System.Windows.Threading.Dispatcher.BeginInvoke*>が呼び出されると、それが実行保留中イベントのキューとして、デリゲートと対話する使用できる</xref:System.Windows.Threading.Dispatcher.BeginInvoke*>。"
  overload: System.Windows.Threading.Dispatcher.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  id: BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvoke(DispatcherPriority,Delegate,Object)
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで指定された優先度で非同期的に、指定された引数の指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>関連付けられています。"
  remarks: "`Arg`指定できます`null`引数が必要ない場合。       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返します、<xref:System.Windows.Threading.DispatcherOperation>デリゲートは、キューでは、イベントの場合、デリゲートと対話するために使用できるオブジェクト</xref:System.Windows.Threading.DispatcherOperation>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       <xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます: - 変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします</xref:System.Windows.Threading.DispatcherPriority></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.DispatcherOperation>。      -デリゲートがイベント キューから削除しています。      -を返すデリゲート待機しています。      後に、デリゲートが返された値を取得するが実行されます。       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。  たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。  バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。  いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>  操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       複数<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>同時呼び出しが行われる<xref:System.Windows.Threading.DispatcherPriority>、これらは、呼び出しが行われた順序で実行されます</xref:System.Windows.Threading.DispatcherPriority></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。       場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>に<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返された<xref:System.Windows.Threading.DispatcherOperation><xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus>に設定されている</xref:System.Windows.Threading.DispatcherOperation>の status プロパティが</xref:System.Windows.Threading.Dispatcher>呼び出されます</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>"
  example:
  - "The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.  \n  \n First, a delegate is created that accepts one argument, in this case a string.  \n  \n [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/add/codesnippet/visualbasic/threadingweatherforecastsample/window1.xaml.vb#threadingweatherdelegates)]\n [!code-cs[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/add/codesnippet/csharp/ThreadingWeatherForecastSample/Window1.xaml.cs#threadingweatherdelegates)]  \n  \n Next, BeginInvoke is called.  Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`. The call to BeginInvoke takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.  \n  \n [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/add/codesnippet/visualbasic/threadingweatherforecastsample/window1.xaml.vb#threadingweatherdispatcheronearge)]\n [!code-cs[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/add/codesnippet/csharp/ThreadingWeatherForecastSample/Window1.xaml.cs#threadingweatherdispatcheronearge)]"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: method
      type: System.Delegate
      description: "プッシュする&1; つの引数を受け取るメソッドへのデリゲート、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: arg
      type: System.Object
      description: "指定したメソッドに引数として渡すオブジェクト。"
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "後すぐに返されるオブジェクトを<xref:System.Windows.Threading.Dispatcher.BeginInvoke*>が呼び出されると、それが実行保留中イベントのキューとして、デリゲートと対話する使用できる</xref:System.Windows.Threading.Dispatcher.BeginInvoke*>。"
  overload: System.Windows.Threading.Dispatcher.BeginInvoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>有効ではありません<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  id: BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで指定された優先順位に非同期的に指定された引数の配列で、指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられています。"
  remarks: "`arg`パラメーターを指定できます`null`の引数が必要ない場合。       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>返します、<xref:System.Windows.Threading.DispatcherOperation>デリゲートは、キューでは、イベントの場合、デリゲートと対話するために使用できるオブジェクト</xref:System.Windows.Threading.DispatcherOperation>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       <xref:System.Windows.Threading.DispatcherOperation>によって返されるオブジェクト<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>など、指定したデリゲートと対話するいくつかの方法で使用できます: - 変更、<xref:System.Windows.Threading.DispatcherPriority>デリゲートの保留中は実行のイベント キューします</xref:System.Windows.Threading.DispatcherPriority></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.DispatcherOperation>。      -デリゲートがイベント キューから削除しています。      -を返すデリゲート待機しています。      後に、デリゲートが返された値を取得するが実行されます。       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>非同期です。したがって、コントロールが呼び出された後、呼び出し元のオブジェクトをすぐに返されます。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。  たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。  バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。  いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>  操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       複数<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>同時呼び出しが行われる<xref:System.Windows.Threading.DispatcherPriority>、これらは、呼び出しが行われた順序で実行されます</xref:System.Windows.Threading.DispatcherPriority></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。       場合<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>に<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、返された<xref:System.Windows.Threading.DispatcherOperation><xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus>に設定されている</xref:System.Windows.Threading.DispatcherOperation>の status プロパティが</xref:System.Windows.Threading.Dispatcher>呼び出されます</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, object[] args);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: method
      type: System.Delegate
      description: "メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: arg
      type: System.Object
      description: "指定したメソッドに引数として渡すオブジェクト。"
    - id: args
      type: System.Object[]
      description: "指定したメソッドに引数として渡すオブジェクトの配列。"
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "後にすぐに返されるオブジェクトを<xref:System.Windows.Threading.Dispatcher.BeginInvoke*>が呼び出されると、保留中の実行では、デリゲートの対話に使用できる、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>キュー</xref:System.Windows.Threading.Dispatcher.BeginInvoke*> 。"
  overload: System.Windows.Threading.Dispatcher.BeginInvoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>有効な優先度がありません。"
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)
  id: BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvokeShutdown(DispatcherPriority)
  nameWithType: Dispatcher.BeginInvokeShutdown(DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.BeginInvokeShutdown(DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "シャット ダウンを開始、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>非同期的にします。"
  remarks: "BeginInvokeShutdown は、UI の無制限のアクセス許可を要求します。       ときに、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、起動、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>に設定されている`true`</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A></xref:System.Windows.Threading.Dispatcher.ShutdownStarted></xref:System.Windows.Threading.Dispatcher>。       <xref:System.Windows.Threading.Dispatcher>シャット ダウンしない完全にイベント キューのアンワインドするまで</xref:System.Windows.Threading.Dispatcher>。       ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A></xref:System.Windows.Threading.Dispatcher.ShutdownFinished>。       シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。"
  syntax:
    content: public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "ディスパッチャーのシャット ダウンを開始する優先度です。"
  overload: System.Windows.Threading.Dispatcher.BeginInvokeShutdown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.CheckAccess
  id: CheckAccess
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: CheckAccess()
  nameWithType: Dispatcher.CheckAccess()
  fullName: System.Windows.Threading.Dispatcher.CheckAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "呼び出し元のスレッドがこれに関連付けられているスレッドかどうかを判断<xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
  remarks: "のみ、<xref:System.Windows.Threading.Dispatcher>を<xref:System.Windows.Threading.DispatcherObject>が作成されるオブジェクトへのアクセス可能性がありますにします</xref:System.Windows.Threading.DispatcherObject></xref:System.Windows.Threading.Dispatcher>。  使用して<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>別のスレッドからオブジェクトにアクセスする</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>。       CheckAccess は、任意のスレッドから呼び出すことができます。       CheckAccess の違いと<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>CheckAccess が呼び出し元のスレッドがへのアクセスを持っているかどうかを示すブール値を返しますが、<xref:System.Windows.Threading.Dispatcher>と<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>例外をスローします</xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A></xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>。"
  example:
  - "The following example uses CheckAccess to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.  The CheckAccess method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.  The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.  \n  \n [!code-cs[DispatcherAccessSample#DispatcherAccessCheckAccess](~/add/codesnippet/csharp/DispatcherAccessSample/Window1.xaml.cs#dispatcheraccesscheckaccess)]\n [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/add/codesnippet/visualbasic/dispatcheraccesssample/window1.xaml.vb#dispatcheraccesscheckaccess)]"
  syntax:
    content: public bool CheckAccess ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>かどうか、呼び出し元のスレッドがこれに関連付けられている<xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Threading.Dispatcher.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.CurrentDispatcher
  id: CurrentDispatcher
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: CurrentDispatcher
  nameWithType: Dispatcher.CurrentDispatcher
  fullName: System.Windows.Threading.Dispatcher.CurrentDispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "取得、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>のスレッドの現在実行中と新たに作成<xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>のスレッドに関連付けられているいずれかがない場合。"
  remarks: "場合、 <xref:System.Windows.Threading.Dispatcher>、現在のスレッドに関連付けられていない新しい<xref:System.Windows.Threading.Dispatcher>が作成されます</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher>。  これは、ケースではありません、<xref:System.Windows.Threading.Dispatcher.FromThread%2A>メソッド</xref:System.Windows.Threading.Dispatcher.FromThread%2A>。  <xref:System.Windows.Threading.Dispatcher.FromThread%2A>返されます`null`指定されたスレッドに関連付けられているディスパッチャーがないかどうか。</xref:System.Windows.Threading.Dispatcher.FromThread%2A>"
  syntax:
    content: public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "現在のスレッドに関連付けられているディスパッチャー。"
  overload: System.Windows.Threading.Dispatcher.CurrentDispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.DisableProcessing
  id: DisableProcessing
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: DisableProcessing()
  nameWithType: Dispatcher.DisableProcessing()
  fullName: System.Windows.Threading.Dispatcher.DisableProcessing()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "処理を無効になります、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>キュー。"
  remarks: "ディスパッチャーの処理を無効にすることは、関連のない再入の可能性を排除するためのものでは、高度な方法です。       処理を無効にする場合の影響は次のとおり:-[!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)]ロックはないメッセージ ポンプを内部的にします。      -<xref:System.Windows.Threading.DispatcherFrame>プッシュするオブジェクトは許可されません</xref:System.Windows.Threading.DispatcherFrame>。      のメッセージ処理が許可されていません。       <xref:System.Windows.Threading.DispatcherProcessingDisabled>ディスパッチャーの処理を再度有効にする DisableProcessing が呼び出された場合に返す構造体を使用することができます</xref:System.Windows.Threading.DispatcherProcessingDisabled>。  呼び出す<xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>上、<xref:System.Windows.Threading.DispatcherProcessingDisabled>構造が処理を再度有効します</xref:System.Windows.Threading.DispatcherProcessingDisabled></xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>。       DisableProcessing は、スレッドでのみ呼び出すことができます、<xref:System.Windows.Threading.Dispatcher>に関連付けられている</xref:System.Windows.Threading.Dispatcher>。"
  example:
  - "The following example shows how to disable dispatcher processing and re-enable dispatcher processing.  DisableProcessing is called in a **using** statement.  DisableProcessing returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.  When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.  \n  \n [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/add/codesnippet/visualbasic/dispatchersnippets/window1.xaml.vb#dispatcherdisableprocessing)]\n [!code-cs[DispatcherSnippets#DispatcherDisableProcessing](~/add/codesnippet/csharp/DispatcherSnippets/Window1.xaml.cs#dispatcherdisableprocessing)]"
  syntax:
    content: public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();
    parameters: []
    return:
      type: System.Windows.Threading.DispatcherProcessingDisabled
      description: "ディスパッチャーの処理を有効にする構造体。"
  overload: System.Windows.Threading.Dispatcher.DisableProcessing*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.ExitAllFrames
  id: ExitAllFrames
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: ExitAllFrames()
  nameWithType: Dispatcher.ExitAllFrames()
  fullName: System.Windows.Threading.Dispatcher.ExitAllFrames()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "入れ子になったフレームを含むすべてのフレームを閉じるように要求します。"
  syntax:
    content: public static void ExitAllFrames ();
    parameters: []
  overload: System.Windows.Threading.Dispatcher.ExitAllFrames*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)
  id: FromThread(System.Threading.Thread)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: FromThread(Thread)
  nameWithType: Dispatcher.FromThread(Thread)
  fullName: System.Windows.Threading.Dispatcher.FromThread(Thread)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "取得、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>指定したスレッドにします。"
  remarks: "ディスパッチャーが使用できない場合、指定されたスレッドの`null`が返されます。       FromThread は作成されません、 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher>。</xref:System.Windows.Threading.Dispatcher>を持たないスレッドで</xref:System.Windows.Threading.Dispatcher>   新しい<xref:System.Windows.Threading.Dispatcher>をまだ持たないスレッドで作成された、<xref:System.Windows.Threading.Dispatcher>を取得しようとすると、<xref:System.Windows.Threading.Dispatcher>を使用して、<xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>プロパティ</xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A></xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher>。"
  syntax:
    content: public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);
    parameters:
    - id: thread
      type: System.Threading.Thread
      description: "取得する、スレッド、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>からです。"
    return:
      type: System.Windows.Threading.Dispatcher
      description: "ディスパッチャー <code> thread</code>です。"
  overload: System.Windows.Threading.Dispatcher.FromThread*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.HasShutdownFinished
  id: HasShutdownFinished
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: HasShutdownFinished
  nameWithType: Dispatcher.HasShutdownFinished
  fullName: System.Windows.Threading.Dispatcher.HasShutdownFinished
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "指定するかどうか、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>シャット ダウンが完了します。"
  remarks: "ときに、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、起動、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>に設定されている`true`</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A></xref:System.Windows.Threading.Dispatcher.ShutdownStarted></xref:System.Windows.Threading.Dispatcher>。       <xref:System.Windows.Threading.Dispatcher>イベント キューのアンワインドするまで完全にシャット ダウンをしません</xref:System.Windows.Threading.Dispatcher>。       ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、HasShutdownFinished プロパティに設定`true`</xref:System.Windows.Threading.Dispatcher.ShutdownFinished>。       シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。"
  syntax:
    content: public bool HasShutdownFinished { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ディスパッチャーがシャット ダウンを完了した場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Threading.Dispatcher.HasShutdownFinished*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.HasShutdownStarted
  id: HasShutdownStarted
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: HasShutdownStarted
  nameWithType: Dispatcher.HasShutdownStarted
  fullName: System.Windows.Threading.Dispatcher.HasShutdownStarted
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "指定するかどうか、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>がシャット ダウン中です。"
  remarks: "ときに、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、起動、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生しに設定されている HasShutdownStarted `true`</xref:System.Windows.Threading.Dispatcher.ShutdownStarted> </xref:System.Windows.Threading.Dispatcher> 。       <xref:System.Windows.Threading.Dispatcher>シャット ダウンしない完全にイベント キューのアンワインドするまで</xref:System.Windows.Threading.Dispatcher>。       ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A></xref:System.Windows.Threading.Dispatcher.ShutdownFinished>。       シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。"
  syntax:
    content: public bool HasShutdownStarted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>シャット ダウン以外の場合が開始<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Threading.Dispatcher.HasShutdownStarted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Hooks
  id: Hooks
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Hooks
  nameWithType: Dispatcher.Hooks
  fullName: System.Windows.Threading.Dispatcher.Hooks
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "に関するその他のイベント情報を提供するフック関数のコレクションを取得、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
  remarks: "<xref:System.Windows.Threading.DispatcherHooks>クラスに関する追加のイベント情報を提供する、 <xref:System.Windows.Threading.Dispatcher>、場合など、<xref:System.Windows.Threading.Dispatcher>がアクティブでないか、操作が完了しました</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.DispatcherHooks>。"
  syntax:
    content: public System.Windows.Threading.DispatcherHooks Hooks { get; }
    return:
      type: System.Windows.Threading.DispatcherHooks
      description: "これに関連付けられているフック<xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
  overload: System.Windows.Threading.Dispatcher.Hooks*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action)
  id: Invoke(System.Action)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Action)
  nameWithType: Dispatcher.Invoke(Action)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "指定された実行<xref:System.Action>スレッドで同期的に、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられている</xref:System.Action>。"
  syntax:
    content: public void Invoke (Action callback);
    parameters:
    - id: callback
      type: System.Action
      description: "ディスパッチャーを介した呼び出すデリゲート。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)
  id: Invoke(System.Action,System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Action,DispatcherPriority)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "指定された実行<xref:System.Action>スレッドで指定された優先順位で同期的に、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられている</xref:System.Action>。"
  syntax:
    content: public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: callback
      type: System.Action
      description: "ディスパッチャーを介した呼び出すデリゲート。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした順序で指定されたコールバックが呼び出されるを決定する優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])
  id: Invoke(System.Delegate,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Delegate,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで同期的に指定された引数で指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>関連付けられています。"
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。 たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。 バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。 いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A> 操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "指定されたパラメーターを受け取るメソッドへのデリゲート`args`にプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: args
      type: System.Object[]
      description: "特定のメソッドに引数として渡すオブジェクトの配列。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "呼び出されるデリゲートからの戻り値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートに戻り値があるない場合。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,Delegate)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "指定された優先順位で同期的に指定されたデリゲートをスレッド上で実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられています。"
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。  たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。  バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。  いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>  操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  example:
  - "The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority> using Invoke.  \n  \n [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/add/codesnippet/visualbasic/invalidaterequerywithsystemtimer/window1.xaml.vb#systemtimerdispatcherinvoke)]\n [!code-cs[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/add/codesnippet/csharp/InvalidateRequeryWithSystemTimer/Window1.xaml.cs#systemtimerdispatcherinvoke)]"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: method
      type: System.Delegate
      description: "メソッドにデリゲートする引数を使用しないにプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    return:
      type: System.Object
      description: "呼び出されるデリゲートからの戻り値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートに戻り値があるない場合。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>priority</code>等しい<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>です。"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>有効な優先度がありません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  id: Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Action,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "指定された実行<xref:System.Action>スレッドで指定された優先順位で同期的に、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられている</xref:System.Action>。"
  syntax:
    content: public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: callback
      type: System.Action
      description: "ディスパッチャーを介した呼び出すデリゲート。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした順序で指定されたコールバックが呼び出されるを決定する優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "操作をキャンセルするかどうかを示すオブジェクト。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])
  id: Invoke(System.Delegate,System.TimeSpan,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Delegate,TimeSpan,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,TimeSpan,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,TimeSpan,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで同期的に指定された引数で指定された優先順位にある指定された時間範囲内で指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられています。"
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。 たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。 バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。 いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A> 操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (Delegate method, TimeSpan timeout, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "指定されたパラメーターを受け取るメソッドへのデリゲート`args`にプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: timeout
      type: System.TimeSpan
      description: "操作が完了するまで待機する時間の最大量。"
    - id: args
      type: System.Object[]
      description: "特定のメソッドに引数として渡すオブジェクトの配列。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "呼び出されるデリゲートからの戻り値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートに戻り値があるない場合。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  id: Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Delegate,DispatcherPriority,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,DispatcherPriority,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで同期的に指定された引数で指定された優先度で指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられています。"
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。 たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。 バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。 いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A> 操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "指定されたパラメーターを受け取るメソッドへのデリゲート`args`にプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: args
      type: System.Object[]
      description: "特定のメソッドに引数として渡すオブジェクトの配列。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "呼び出されるデリゲートからの戻り値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートに戻り値があるない場合。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,Delegate,Object)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで同期的に指定された引数で指定された優先度で指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられています。"
  remarks: "`Arg`指定できます`null`で引数が不要な場合[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。  たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。  バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。  いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>  操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: method
      type: System.Delegate
      description: "プッシュする&1; つの引数を受け取るメソッドへのデリゲート、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: arg
      type: System.Object
      description: "特定のメソッドに引数として渡すオブジェクト。"
    return:
      type: System.Object
      description: "呼び出されるデリゲートからの戻り値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートに戻り値があるない場合。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>priority</code>等しい<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>です。"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>有効な優先度がありません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,TimeSpan,Delegate)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで指定された優先順位に同期的に指定されたタイムアウト値で、指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>作成されました。"
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。  たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。  バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。  いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>  操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: timeout
      type: System.TimeSpan
      description: "操作が終了するまで待機する最大時間。"
    - id: method
      type: System.Delegate
      description: "メソッドへのデリゲートを引数を使用しないにプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    return:
      type: System.Object
      description: "呼び出されるデリゲートからの戻り値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートに戻り値があるない場合。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  id: Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "指定された実行<xref:System.Action>スレッドで指定された優先順位で同期的に、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられている</xref:System.Action>。"
  syntax:
    content: public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);
    parameters:
    - id: callback
      type: System.Action
      description: "ディスパッチャーを介した呼び出すデリゲート。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした順序で指定されたコールバックが呼び出されるを決定する優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "操作をキャンセルするかどうかを示すオブジェクト。"
    - id: timeout
      type: System.TimeSpan
      description: "操作を開始するまで待機する時間の最小量。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])
  id: Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで同期的に指定された引数で指定された優先順位にある指定された時間範囲内で指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられています。"
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。 たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。 バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。 いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A> 操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "指定されたパラメーターを受け取るメソッドへのデリゲート`args`にプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: timeout
      type: System.TimeSpan
      description: "操作が完了するまで待機する時間の最大量。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: args
      type: System.Object[]
      description: "特定のメソッドに引数として渡すオブジェクトの配列。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "呼び出されるデリゲートからの戻り値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートに戻り値があるない場合。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,Delegate,Object,Object[])
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate,Object,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで同期的に指定された引数で指定された優先度で指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられています。"
  remarks: "`Arg`指定できます`null`で引数が不要な場合[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。  たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。  バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。  いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>  操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, object[] args);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: method
      type: System.Delegate
      description: "メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: arg
      type: System.Object
      description: "特定のメソッドに引数として渡すオブジェクト。"
    - id: args
      type: System.Object[]
      description: "特定のメソッドに引数として渡すオブジェクトの配列。"
    return:
      type: System.Object
      description: "呼び出されるデリゲートからの戻り値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートに戻り値があるない場合。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>priority</code>等しい<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>です。"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>有効な優先度がありません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで同期的に指定された引数で指定された優先度で指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられています。"
  remarks: "`Arg`指定できます`null`で引数が不要な場合[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。  たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。  バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。  いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>  操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: timeout
      type: System.TimeSpan
      description: "操作が終了するまで待機する最大時間。"
    - id: method
      type: System.Delegate
      description: "メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: arg
      type: System.Object
      description: "特定のメソッドに引数として渡すオブジェクト。 これは、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>引数が必要ない場合。"
    return:
      type: System.Object
      description: "呼び出されるデリゲートからの戻り値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートに戻り値があるない場合。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>priority</code>等しい<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>です。"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>有効な優先度がありません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドで同期的に指定された引数で指定された優先度で指定したデリゲートを実行、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられています。"
  remarks: "`Arg`指定できます`null`引数が必要ない場合。       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]、作成されたスレッドのみ、<xref:System.Windows.Threading.DispatcherObject>そのオブジェクトにアクセスすることがあります</xref:System.Windows.Threading.DispatcherObject>。  たとえば、メイン UI スレッドからで確立されるバック グラウンド スレッドがの内容を更新できません、 <xref:System.Windows.Controls.Button>UI スレッド上に作成された</xref:System.Windows.Controls.Button>。  バック グラウンド スレッドのコンテンツのプロパティにアクセスするために、 <xref:System.Windows.Controls.Button>、バック グラウンド スレッドに作業を委任する必要があります、 <xref:System.Windows.Threading.Dispatcher>UI スレッドに関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Controls.Button>。  いずれか<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用してこれを実現します。  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期的および<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>は非同期です</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>  操作は<xref:System.Windows.Threading.Dispatcher>、指定した<xref:System.Windows.Threading.DispatcherPriority>。</xref:System.Windows.Threading.DispatcherPriority>で</xref:System.Windows.Threading.Dispatcher>のイベント キューに追加されます。       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>同期操作です。したがって、コントロールは返されませんまでは、呼び出し元のオブジェクトにコールバックが返された後。</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, object[] args);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした、優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キューを指定したメソッドが呼び出されます。"
    - id: timeout
      type: System.TimeSpan
      description: "操作が終了するまで待機する最大時間。"
    - id: method
      type: System.Delegate
      description: "メソッドへのデリゲートを受け取る複数の引数にプッシュされますが、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>イベント キュー。"
    - id: arg
      type: System.Object
      description: "指定したメソッドに引数として渡すオブジェクト。"
    - id: args
      type: System.Object[]
      description: "指定したメソッドに引数として渡すオブジェクトの配列。"
    return:
      type: System.Object
      description: "呼び出されるデリゲートからの戻り値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートに戻り値があるない場合。"
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>priority</code>等しい<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>です。"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>有効ではありません<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})
  id: Invoke``1(System.Func{``0})
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Func<TResult>)
  nameWithType: Dispatcher.Invoke(Func<TResult>)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public TResult Invoke<TResult> (Func<TResult> callback);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "追加します。"
    return:
      type: TResult
      description: "追加します。"
  overload: System.Windows.Threading.Dispatcher.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  id: Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Func<TResult>,DispatcherPriority)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public TResult Invoke<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "追加します。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "追加します。"
    return:
      type: TResult
      description: "追加します。"
  overload: System.Windows.Threading.Dispatcher.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  id: Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public TResult Invoke<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "追加します。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "追加します。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "追加します。"
    return:
      type: TResult
      description: "追加します。"
  overload: System.Windows.Threading.Dispatcher.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  id: Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public TResult Invoke<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "追加します。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "追加します。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "追加します。"
    - id: timeout
      type: System.TimeSpan
      description: "追加します。"
    return:
      type: TResult
      description: "追加します。"
  overload: System.Windows.Threading.Dispatcher.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)
  id: InvokeAsync(System.Action)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Action)
  nameWithType: Dispatcher.InvokeAsync(Action)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "指定された実行<xref:System.Action>スレッドで非同期的に、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>関連付けられている</xref:System.Action>。"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);
    parameters:
    - id: callback
      type: System.Action
      description: "ディスパッチャーを介した呼び出すデリゲート。"
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "オブジェクト、InvokeAsync が呼び出された後にすぐに返される、それが実行保留中のイベント キューに、デリゲートと対話するを使用できます。"
  overload: System.Windows.Threading.Dispatcher.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)
  id: InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Action,DispatcherPriority)
  nameWithType: Dispatcher.InvokeAsync(Action,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action,DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "指定された実行<xref:System.Action>スレッドで指定された優先度で非同期的に、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられている</xref:System.Action>。"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: callback
      type: System.Action
      description: "ディスパッチャーを介した呼び出すデリゲート。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした順序で指定されたコールバックが呼び出されるを決定する優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "オブジェクト、InvokeAsync が呼び出された後にすぐに返される、それが実行保留中のイベント キューに、デリゲートと対話するを使用できます。"
  overload: System.Windows.Threading.Dispatcher.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  id: InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Action,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.InvokeAsync(Action,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action,DispatcherPriority,CancellationToken)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "指定された実行<xref:System.Action>スレッドで指定された優先度で非同期的に、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>に関連付けられている</xref:System.Action>。"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: callback
      type: System.Action
      description: "ディスパッチャーを介した呼び出すデリゲート。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "保留中の操作で、他の基準とした順序で指定されたコールバックが呼び出されるを決定する優先度、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "操作をキャンセルするかどうかを示すオブジェクト。"
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "オブジェクト、InvokeAsync が呼び出された後にすぐに返される、それが実行保留中のイベント キューに、デリゲートと対話するを使用できます。"
  overload: System.Windows.Threading.Dispatcher.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})
  id: InvokeAsync``1(System.Func{``0})
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Func<TResult>)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public System.Windows.Threading.DispatcherOperation<TResult> InvokeAsync<TResult> (Func<TResult> callback);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "追加します。"
    return:
      type: System.Windows.Threading.DispatcherOperation`1
      description: "追加します。"
  overload: System.Windows.Threading.Dispatcher.InvokeAsync<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  id: InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Func<TResult>,DispatcherPriority)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public System.Windows.Threading.DispatcherOperation<TResult> InvokeAsync<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "追加します。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "追加します。"
    return:
      type: System.Windows.Threading.DispatcherOperation`1
      description: "追加します。"
  overload: System.Windows.Threading.Dispatcher.InvokeAsync<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  id: InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public System.Windows.Threading.DispatcherOperation<TResult> InvokeAsync<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "追加します。"
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "追加します。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "追加します。"
    return:
      type: System.Windows.Threading.DispatcherOperation`1
      description: "追加します。"
  overload: System.Windows.Threading.Dispatcher.InvokeAsync<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeShutdown
  id: InvokeShutdown
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeShutdown()
  nameWithType: Dispatcher.InvokeShutdown()
  fullName: System.Windows.Threading.Dispatcher.InvokeShutdown()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "シャット ダウン プロセスを開始、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>同期的に処理します。"
  remarks: "InvokeShutdown は、UI の無制限のアクセス許可を要求します。       ときに、<xref:System.Windows.Threading.Dispatcher>をシャット ダウン、起動、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>に設定されている`true`</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A></xref:System.Windows.Threading.Dispatcher.ShutdownStarted></xref:System.Windows.Threading.Dispatcher>。       <xref:System.Windows.Threading.Dispatcher>シャット ダウンしない完全にイベント キューのアンワインドするまで</xref:System.Windows.Threading.Dispatcher>。       ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A></xref:System.Windows.Threading.Dispatcher.ShutdownFinished>。       シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。"
  syntax:
    content: public void InvokeShutdown ();
    parameters: []
  overload: System.Windows.Threading.Dispatcher.InvokeShutdown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)
  id: PushFrame(System.Windows.Threading.DispatcherFrame)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: PushFrame(DispatcherFrame)
  nameWithType: Dispatcher.PushFrame(DispatcherFrame)
  fullName: System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "実行ループに入ります。"
  remarks: "A<xref:System.Windows.Threading.DispatcherFrame>保留中の作業項目を処理するループを表します</xref:System.Windows.Threading.DispatcherFrame>。       ディスパッチャーは、ループ内での作業項目のキューを処理します。  ループは、フレームと呼ばれます。  <xref:System.Windows.Threading.Dispatcher.Run%2A>。</xref:System.Windows.Threading.Dispatcher.Run%2A>を呼び出すことによって、アプリケーションによって初期ループが開始通常       パラメーターによって表されるループに入る PushFrame`frame`です。  ループの繰り返しごとに、<xref:System.Windows.Threading.Dispatcher>チェック、<xref:System.Windows.Threading.DispatcherFrame.Continue%2A>プロパティを<xref:System.Windows.Threading.DispatcherFrame>ループを続行するかどうか、または停止したかどうかを決めるクラスを</xref:System.Windows.Threading.DispatcherFrame></xref:System.Windows.Threading.DispatcherFrame.Continue%2A></xref:System.Windows.Threading.Dispatcher>。       <xref:System.Windows.Threading.DispatcherFrame><xref:System.Windows.Threading.DispatcherFrame.Continue%2A>プロパティを明示的に設定して、尊重<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A><xref:System.Windows.Threading.Dispatcher>。</xref:System.Windows.Threading.Dispatcher>プロパティ</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A></xref:System.Windows.Threading.DispatcherFrame.Continue%2A>では、します。</xref:System.Windows.Threading.DispatcherFrame>  つまり、ときに、<xref:System.Windows.Threading.Dispatcher>をシャット ダウンが起動し、既定値を使用するフレーム<xref:System.Windows.Threading.DispatcherFrame>を終了する入れ子になったすべてのフレームを有効にする、実装が終了されます</xref:System.Windows.Threading.DispatcherFrame></xref:System.Windows.Threading.Dispatcher>。"
  example:
  - "The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.  \n  \n [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/add/codesnippet/visualbasic/dispatchersnippets/window1.xaml.vb#dispatcherdispatcherframedoevents)]\n [!code-cs[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/add/codesnippet/csharp/DispatcherSnippets/Window1.xaml.cs#dispatcherdispatcherframedoevents)]"
  syntax:
    content: public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);
    parameters:
    - id: frame
      type: System.Windows.Threading.DispatcherFrame
      description: "ディスパッチャーが処理するのフレームです。"
  overload: System.Windows.Threading.Dispatcher.PushFrame*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>frame</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*>is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>       -or-       <code>frame</code> is running on a different <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>.</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*>       または、ディスパッチャーの処理を無効になっています。"
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Run
  id: Run
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Run()
  nameWithType: Dispatcher.Run()
  fullName: System.Windows.Threading.Dispatcher.Run()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "メインの実行のフレームに、イベント キューのプッシュ、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
  remarks: "<xref:System.Windows.Threading.Dispatcher>ループ内で、イベント キューを処理します</xref:System.Windows.Threading.Dispatcher>。  ループは、フレームと呼ばれます。  初期のループは、実行を呼び出すことによって通常、アプリケーションによって開始されます。       メインの実行のフレームはまで引き続き、<xref:System.Windows.Threading.Dispatcher>シャット ダウンします</xref:System.Windows.Threading.Dispatcher>。"
  syntax:
    content: public static void Run ();
    parameters: []
  overload: System.Windows.Threading.Dispatcher.Run*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.ShutdownFinished
  id: ShutdownFinished
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: ShutdownFinished
  nameWithType: Dispatcher.ShutdownFinished
  fullName: System.Windows.Threading.Dispatcher.ShutdownFinished
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "発生したときに、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>シャット ダウンが完了するとします。"
  remarks: "ときのシャット ダウン プロセス、<xref:System.Windows.Threading.Dispatcher>が開始されて、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted>イベントが発生したと<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>に設定されている`true`</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A></xref:System.Windows.Threading.Dispatcher.ShutdownStarted></xref:System.Windows.Threading.Dispatcher>。       <xref:System.Windows.Threading.Dispatcher>イベント キューのアンワインドするまで完全にシャット ダウンをしません</xref:System.Windows.Threading.Dispatcher>。       ディスパッチャーは、シャット ダウンが完了したら、ShutdownFinished イベントは、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>。       シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。"
  syntax:
    content: public event EventHandler ShutdownFinished;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.ShutdownStarted
  id: ShutdownStarted
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: ShutdownStarted
  nameWithType: Dispatcher.ShutdownStarted
  fullName: System.Windows.Threading.Dispatcher.ShutdownStarted
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "発生したときに、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>シャット ダウンを開始します。"
  remarks: "ときに、シャット ダウン プロセスの<xref:System.Windows.Threading.Dispatcher>は ShutdownStarted イベントを発生が開始されると、および<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>éý &quot; è `true`</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> </xref:System.Windows.Threading.Dispatcher> 。       <xref:System.Windows.Threading.Dispatcher>イベント キューのアンワインドするまで完全にシャット ダウンをしません</xref:System.Windows.Threading.Dispatcher>。       ディスパッチャーは、シャット ダウンが完了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished>イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>プロパティに設定されている`true`</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A></xref:System.Windows.Threading.Dispatcher.ShutdownFinished>。       シャット ダウン プロセスが開始されると、保留中のすべての作業キュー内の項目は中止されました。"
  syntax:
    content: public event EventHandler ShutdownStarted;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Thread
  id: Thread
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Thread
  nameWithType: Dispatcher.Thread
  fullName: System.Windows.Threading.Dispatcher.Thread
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "このスレッドを取得<xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>に関連付けられています。"
  syntax:
    content: public System.Threading.Thread Thread { get; }
    return:
      type: System.Threading.Thread
      description: "スレッドです。"
  overload: System.Windows.Threading.Dispatcher.Thread*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.UnhandledException
  id: UnhandledException
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: UnhandledException
  nameWithType: Dispatcher.UnhandledException
  fullName: System.Windows.Threading.Dispatcher.UnhandledException
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドの例外がスローされ、によってデリゲートの実行中にキャッチされなかったときに発生<> *> または<> *> です。"
  remarks: "このイベントはによってデリゲートの実行中にスローされた例外<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>はキャッチされません</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>。       ハンドラーが例外処理済みとしてマークから呼び出される内部の例外ハンドラーができなくなります。       発生したすべて慎重セカンダリ例外の作成を回避し、キャッチするには、このイベントに対するイベント ハンドラーを書き込む必要があります。 メモリの割り当てや、任意のリソースのハンドラーで処理を要する操作を実行しないようにお勧めします。       <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>イベントは、UnhandledException イベントを発生させませんする手段を提供します</xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>。  <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>イベントは、最初に、場合<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>上、<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>に設定されている`false`、UnhandledException イベントは発生しません</xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs></xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A></xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>。"
  syntax:
    content: public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;
    return:
      type: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.UnhandledExceptionFilter
  id: UnhandledExceptionFilter
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: UnhandledExceptionFilter
  nameWithType: Dispatcher.UnhandledExceptionFilter
  fullName: System.Windows.Threading.Dispatcher.UnhandledExceptionFilter
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "スレッドの例外がスローされ、によってデリゲートの実行中にキャッチされなかったときに発生<> *> または<> *> フィルター ステージの場合にします。"
  remarks: "によってデリゲートの実行中に発生する例外のフィルターのステージ中にこのイベントは<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>がキャッチされたとします</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>。       呼び出しスタックは、この時点で (初回例外) アンワインドではありません。       発生したすべて慎重セカンダリ例外の作成を回避し、キャッチするには、このイベントに対するイベント ハンドラーを書き込む必要があります。  メモリの割り当てや、任意のリソースのハンドラーで処理を要する操作を実行しないようにお勧めします。       UnhandledExceptionFilter イベントを発生させませんする手段を提供する、<xref:System.Windows.Threading.Dispatcher.UnhandledException>イベント</xref:System.Windows.Threading.Dispatcher.UnhandledException>。  UnhandledExceptionFilter イベントが最初に、発生した場合に<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>で、<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>に設定`false`、<xref:System.Windows.Threading.Dispatcher.UnhandledException>イベントは発生しません</xref:System.Windows.Threading.Dispatcher.UnhandledException></xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs></xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>。"
  syntax:
    content: public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;
    return:
      type: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)
  id: ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: ValidatePriority(DispatcherPriority,String)
  nameWithType: Dispatcher.ValidatePriority(DispatcherPriority,String)
  fullName: System.Windows.Threading.Dispatcher.ValidatePriority(DispatcherPriority,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "決定するかどうか、指定した<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>優先順位が無効です。"
  syntax:
    content: public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "チェックする優先度です。"
    - id: parameterName
      type: System.String
      description: "優先順位が有効でない場合に発生する例外によって返される文字列。"
  overload: System.Windows.Threading.Dispatcher.ValidatePriority*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>有効ではありません<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.VerifyAccess
  id: VerifyAccess
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: VerifyAccess()
  nameWithType: Dispatcher.VerifyAccess()
  fullName: System.Windows.Threading.Dispatcher.VerifyAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "呼び出し元のスレッドがへのアクセスを持つかどうかを判断<xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
  remarks: "スレッドでのみ、<xref:System.Windows.Threading.Dispatcher>が作成される<xref:System.Windows.Threading.Dispatcher>.</xref:System.Windows.Threading.Dispatcher>でアクセス</xref:System.Windows.Threading.Dispatcher>       このメソッドはパブリックです。したがって、任意のスレッドを<xref:System.Windows.Threading.Dispatcher>。</xref:System.Windows.Threading.Dispatcher>へのアクセスを持っているかどうかが確認確認できます。       間の違い<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>VerifyAccess は<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>呼び出し元のスレッドにへのアクセスがない場合は、ブール値を返します、 <xref:System.Windows.Threading.Dispatcher>VerifyAccess、例外をスローします</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher.CheckAccess%2A></xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>。"
  example:
  - "The following example uses VerifyAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.  The VerifyAccess method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  \n  \n If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.  \n  \n If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.  \n  \n [!code-cs[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/add/codesnippet/csharp/DispatcherAccessSample/Window1.xaml.cs#dispatcheraccessverifyaccess)]\n [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/add/codesnippet/visualbasic/dispatcheraccesssample/window1.xaml.vb#dispatcheraccessverifyaccess)]"
  syntax:
    content: public void VerifyAccess ();
    parameters: []
  overload: System.Windows.Threading.Dispatcher.VerifyAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼び出し元のスレッドでは、これにアクセスできない<xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Yield
  id: Yield
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Yield()
  nameWithType: Dispatcher.Yield()
  fullName: System.Windows.Threading.Dispatcher.Yield()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "非同期的に現在のディスパッチャーにコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクトを作成します。"
  remarks: "このメソッドは、その他のイベントを処理するなど、他の作業を行えるように一時的に実行制御を現在のディスパッチャーをリリースするための手段を提供します。 使用して、 `await`、または`Await`Visual basic で現在のディスパッチャーに制御を戻し、戻り値の演算子。 場合、このメソッドを使用して、アプリにアプリが多くの UI スレッドでの作業を行っているときにイベントを処理する機会を提供します。 たとえば、コントロールを更新する実行時間の長いループ内で、このメソッドを使用できます。       このメソッドは、呼び出す<xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29>メソッドと受け渡し<xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>。</xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName> </xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29>"
  syntax:
    content: public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();
    parameters: []
    return:
      type: System.Windows.Threading.DispatcherPriorityAwaitable
      description: "非同期的に現在のディスパッチャーにコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクト。"
  overload: System.Windows.Threading.Dispatcher.Yield*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)
  id: Yield(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Yield(DispatcherPriority)
  nameWithType: Dispatcher.Yield(DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Yield(DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "非同期的に現在のディスパッチャーにコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクトを作成します。  このメソッドの結果を待機中のコードに制御が戻るときに発生する作業は、指定された優先順位がスケジュールされます。"
  remarks: "このメソッドは、その他のイベントを処理するなど、他の作業を行えるように一時的に実行制御を現在のディスパッチャーをリリースするための手段を提供します。 使用して、 `await`、または`Await`Visual basic で現在のディスパッチャーに制御を戻し、戻り値の演算子。 場合、このメソッドを使用して、アプリにアプリが多くの UI スレッドでの作業を行っているときにイベントを処理する機会を提供します。 たとえば、コントロールを更新する実行時間の長いループ内で、このメソッドを使用できます。"
  syntax:
    content: public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "継続をスケジュールする優先度です。"
    return:
      type: System.Windows.Threading.DispatcherPriorityAwaitable
      description: "非同期的に現在のディスパッチャーにコントロールを生成し、その他のイベントを処理するディスパッチャーの機会を提供する待機可能オブジェクト。"
  overload: System.Windows.Threading.Dispatcher.Yield*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke(Delegate,Object[])
  nameWithType: Dispatcher.BeginInvoke(Delegate,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(Delegate,Object[])
- uid: System.Windows.Threading.DispatcherOperation
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherOperation
  nameWithType: DispatcherOperation
  fullName: System.Windows.Threading.DispatcherOperation
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke(DispatcherPriority,Delegate)
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate)
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate)
- uid: System.Windows.Threading.DispatcherPriority
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherPriority
  nameWithType: DispatcherPriority
  fullName: System.Windows.Threading.DispatcherPriority
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke(Delegate,DispatcherPriority,Object[])
  nameWithType: Dispatcher.BeginInvoke(Delegate,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(Delegate,DispatcherPriority,Object[])
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke(DispatcherPriority,Delegate,Object)
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object)
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
- uid: System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvokeShutdown(DispatcherPriority)
  nameWithType: Dispatcher.BeginInvokeShutdown(DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.BeginInvokeShutdown(DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.CheckAccess
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: CheckAccess()
  nameWithType: Dispatcher.CheckAccess()
  fullName: System.Windows.Threading.Dispatcher.CheckAccess()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.Dispatcher.CurrentDispatcher
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: CurrentDispatcher
  nameWithType: Dispatcher.CurrentDispatcher
  fullName: System.Windows.Threading.Dispatcher.CurrentDispatcher
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.Dispatcher.DisableProcessing
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: DisableProcessing()
  nameWithType: Dispatcher.DisableProcessing()
  fullName: System.Windows.Threading.Dispatcher.DisableProcessing()
- uid: System.Windows.Threading.DispatcherProcessingDisabled
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherProcessingDisabled
  nameWithType: DispatcherProcessingDisabled
  fullName: System.Windows.Threading.DispatcherProcessingDisabled
- uid: System.Windows.Threading.Dispatcher.ExitAllFrames
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ExitAllFrames()
  nameWithType: Dispatcher.ExitAllFrames()
  fullName: System.Windows.Threading.Dispatcher.ExitAllFrames()
- uid: System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: FromThread(Thread)
  nameWithType: Dispatcher.FromThread(Thread)
  fullName: System.Windows.Threading.Dispatcher.FromThread(Thread)
- uid: System.Threading.Thread
  parent: System.Threading
  isExternal: false
  name: Thread
  nameWithType: Thread
  fullName: System.Threading.Thread
- uid: System.Windows.Threading.Dispatcher.HasShutdownFinished
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: HasShutdownFinished
  nameWithType: Dispatcher.HasShutdownFinished
  fullName: System.Windows.Threading.Dispatcher.HasShutdownFinished
- uid: System.Windows.Threading.Dispatcher.HasShutdownStarted
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: HasShutdownStarted
  nameWithType: Dispatcher.HasShutdownStarted
  fullName: System.Windows.Threading.Dispatcher.HasShutdownStarted
- uid: System.Windows.Threading.Dispatcher.Hooks
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Hooks
  nameWithType: Dispatcher.Hooks
  fullName: System.Windows.Threading.Dispatcher.Hooks
- uid: System.Windows.Threading.DispatcherHooks
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherHooks
  nameWithType: DispatcherHooks
  fullName: System.Windows.Threading.DispatcherHooks
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Action)
  nameWithType: Dispatcher.Invoke(Action)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action)
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Action,DispatcherPriority)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Delegate,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,Object[])
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,Delegate)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Action,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Delegate,TimeSpan,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,TimeSpan,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,TimeSpan,Object[])
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Delegate,DispatcherPriority,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,DispatcherPriority,Object[])
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,Delegate,Object)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate,Object)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,TimeSpan,Delegate)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,Delegate,Object,Object[])
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate,Object,Object[])
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Func<TResult>)
  nameWithType: Dispatcher.Invoke(Func<TResult>)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>)
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{TResult}
  parent: System
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Func<TResult>,DispatcherPriority)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Action)
  nameWithType: Dispatcher.InvokeAsync(Action)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action)
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Action,DispatcherPriority)
  nameWithType: Dispatcher.InvokeAsync(Action,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action,DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Action,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.InvokeAsync(Action,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action,DispatcherPriority,CancellationToken)
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Func<TResult>)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>)
- uid: System.Windows.Threading.DispatcherOperation`1
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherOperation<TResult>
  nameWithType: DispatcherOperation<TResult>
  fullName: System.Windows.Threading.DispatcherOperation<TResult>
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Func<TResult>,DispatcherPriority)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
- uid: System.Windows.Threading.Dispatcher.InvokeShutdown
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeShutdown()
  nameWithType: Dispatcher.InvokeShutdown()
  fullName: System.Windows.Threading.Dispatcher.InvokeShutdown()
- uid: System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: PushFrame(DispatcherFrame)
  nameWithType: Dispatcher.PushFrame(DispatcherFrame)
  fullName: System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame)
- uid: System.Windows.Threading.DispatcherFrame
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherFrame
  nameWithType: DispatcherFrame
  fullName: System.Windows.Threading.DispatcherFrame
- uid: System.Windows.Threading.Dispatcher.Run
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Run()
  nameWithType: Dispatcher.Run()
  fullName: System.Windows.Threading.Dispatcher.Run()
- uid: System.Windows.Threading.Dispatcher.ShutdownFinished
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ShutdownFinished
  nameWithType: Dispatcher.ShutdownFinished
  fullName: System.Windows.Threading.Dispatcher.ShutdownFinished
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Threading.Dispatcher.ShutdownStarted
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ShutdownStarted
  nameWithType: Dispatcher.ShutdownStarted
  fullName: System.Windows.Threading.Dispatcher.ShutdownStarted
- uid: System.Windows.Threading.Dispatcher.Thread
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Thread
  nameWithType: Dispatcher.Thread
  fullName: System.Windows.Threading.Dispatcher.Thread
- uid: System.Windows.Threading.Dispatcher.UnhandledException
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: UnhandledException
  nameWithType: Dispatcher.UnhandledException
  fullName: System.Windows.Threading.Dispatcher.UnhandledException
- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherUnhandledExceptionEventHandler
  nameWithType: DispatcherUnhandledExceptionEventHandler
  fullName: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler
- uid: System.Windows.Threading.Dispatcher.UnhandledExceptionFilter
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: UnhandledExceptionFilter
  nameWithType: Dispatcher.UnhandledExceptionFilter
  fullName: System.Windows.Threading.Dispatcher.UnhandledExceptionFilter
- uid: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherUnhandledExceptionFilterEventHandler
  nameWithType: DispatcherUnhandledExceptionFilterEventHandler
  fullName: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler
- uid: System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ValidatePriority(DispatcherPriority,String)
  nameWithType: Dispatcher.ValidatePriority(DispatcherPriority,String)
  fullName: System.Windows.Threading.Dispatcher.ValidatePriority(DispatcherPriority,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Threading.Dispatcher.VerifyAccess
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: VerifyAccess()
  nameWithType: Dispatcher.VerifyAccess()
  fullName: System.Windows.Threading.Dispatcher.VerifyAccess()
- uid: System.Windows.Threading.Dispatcher.Yield
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Yield()
  nameWithType: Dispatcher.Yield()
  fullName: System.Windows.Threading.Dispatcher.Yield()
- uid: System.Windows.Threading.DispatcherPriorityAwaitable
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherPriorityAwaitable
  nameWithType: DispatcherPriorityAwaitable
  fullName: System.Windows.Threading.DispatcherPriorityAwaitable
- uid: System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Yield(DispatcherPriority)
  nameWithType: Dispatcher.Yield(DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Yield(DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.BeginInvoke*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke
  nameWithType: Dispatcher.BeginInvoke
- uid: System.Windows.Threading.Dispatcher.BeginInvokeShutdown*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvokeShutdown
  nameWithType: Dispatcher.BeginInvokeShutdown
- uid: System.Windows.Threading.Dispatcher.CheckAccess*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: CheckAccess
  nameWithType: Dispatcher.CheckAccess
- uid: System.Windows.Threading.Dispatcher.CurrentDispatcher*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: CurrentDispatcher
  nameWithType: Dispatcher.CurrentDispatcher
- uid: System.Windows.Threading.Dispatcher.DisableProcessing*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: DisableProcessing
  nameWithType: Dispatcher.DisableProcessing
- uid: System.Windows.Threading.Dispatcher.ExitAllFrames*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ExitAllFrames
  nameWithType: Dispatcher.ExitAllFrames
- uid: System.Windows.Threading.Dispatcher.FromThread*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: FromThread
  nameWithType: Dispatcher.FromThread
- uid: System.Windows.Threading.Dispatcher.HasShutdownFinished*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: HasShutdownFinished
  nameWithType: Dispatcher.HasShutdownFinished
- uid: System.Windows.Threading.Dispatcher.HasShutdownStarted*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: HasShutdownStarted
  nameWithType: Dispatcher.HasShutdownStarted
- uid: System.Windows.Threading.Dispatcher.Hooks*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Hooks
  nameWithType: Dispatcher.Hooks
- uid: System.Windows.Threading.Dispatcher.Invoke*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke
  nameWithType: Dispatcher.Invoke
- uid: System.Windows.Threading.Dispatcher.Invoke<TResult>*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke<TResult>
  nameWithType: Dispatcher.Invoke<TResult>
- uid: System.Windows.Threading.Dispatcher.InvokeAsync*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync
  nameWithType: Dispatcher.InvokeAsync
- uid: System.Windows.Threading.Dispatcher.InvokeAsync<TResult>*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync<TResult>
  nameWithType: Dispatcher.InvokeAsync<TResult>
- uid: System.Windows.Threading.Dispatcher.InvokeShutdown*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeShutdown
  nameWithType: Dispatcher.InvokeShutdown
- uid: System.Windows.Threading.Dispatcher.PushFrame*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: PushFrame
  nameWithType: Dispatcher.PushFrame
- uid: System.Windows.Threading.Dispatcher.Run*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Run
  nameWithType: Dispatcher.Run
- uid: System.Windows.Threading.Dispatcher.Thread*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Thread
  nameWithType: Dispatcher.Thread
- uid: System.Windows.Threading.Dispatcher.ValidatePriority*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ValidatePriority
  nameWithType: Dispatcher.ValidatePriority
- uid: System.Windows.Threading.Dispatcher.VerifyAccess*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: VerifyAccess
  nameWithType: Dispatcher.VerifyAccess
- uid: System.Windows.Threading.Dispatcher.Yield*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Yield
  nameWithType: Dispatcher.Yield
