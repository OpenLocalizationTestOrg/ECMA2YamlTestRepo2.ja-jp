### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DataAdapter
  id: DataAdapter
  children:
  - System.Data.Common.DataAdapter.#ctor
  - System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.GetFillParameters
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.Data.Common.DataAdapter.Update(System.Data.DataSet)
  langs:
  - csharp
  name: DataAdapter
  nameWithType: DataAdapter
  fullName: System.Data.Common.DataAdapter
  type: Class
  summary: "SQL コマンドと塗りつぶしに使用されるデータベース接続のセットを表す、 <xref href=&quot;System.Data.DataSet&quot;> </xref>およびデータ ソースを更新します。"
  remarks: "DataAdapter 役割間の仲介役を果たす、<xref:System.Data.DataSet>とデータ ソースを取得して、データを保存します</xref:System.Data.DataSet>。 データ アダプター<xref:System.Data.Common.DataAdapter.Fill%2A>には、<xref:System.Data.DataSet>データ ソース、および<xref:System.Data.IDataAdapter.Update%2A><xref:System.Data.DataSet>。</xref:System.Data.DataSet>データに一致するデータ ソース内のデータを変更する</xref:System.Data.IDataAdapter.Update%2A>のデータと一致する</xref:System.Data.DataSet>データを変更する、</xref:System.Data.Common.DataAdapter.Fill%2A>マップすることによってこのブリッジを提供します。       SQL Server データベースに接続する場合を使用して全体的なパフォーマンスを増やすことができます、<xref:System.Data.SqlClient.SqlDataAdapter>および関連する<xref:System.Data.SqlClient.SqlCommand>と<xref:System.Data.SqlClient.SqlConnection>オブジェクト</xref:System.Data.SqlClient.SqlConnection></xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlDataAdapter>。 OLE DB をサポートするデータ ソースとそれに関連するデータ アダプターを使用して<xref:System.Data.OleDb.OleDbCommand>と<xref:System.Data.OleDb.OleDbConnection>オブジェクト</xref:System.Data.OleDb.OleDbConnection></xref:System.Data.OleDb.OleDbCommand>。 ODBC でサポートされているデータ ソースとそれに関連する DataAdapter を使用して<xref:System.Data.Odbc.OdbcCommand>と<xref:System.Data.Odbc.OdbcConnection>オブジェクト</xref:System.Data.Odbc.OdbcConnection></xref:System.Data.Odbc.OdbcCommand>。 Oracle データベースを使用して、データ アダプターとそれに関連する<xref:System.Data.OracleClient.OracleCommand>と<xref:System.Data.OracleClient.OracleConnection>オブジェクト</xref:System.Data.OracleClient.OracleConnection></xref:System.Data.OracleClient.OracleCommand>。       データ アダプターのインスタンスが作成されると、読み取り/書き込みプロパティは、初期値に設定されます。 これらの値の一覧は、DataAdapter コンス トラクターを参照してください。"
  syntax:
    content: 'public class DataAdapter : System.ComponentModel.Component, System.Data.IDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.Data.IDataAdapter
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: DataAdapter()
  nameWithType: DataAdapter.DataAdapter()
  fullName: System.Data.Common.DataAdapter.DataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref>クラスです。"
  remarks: "インスタンス<xref:System.Data.Common.DataAdapter>作成されると、次読み取り/書き込みプロパティは、次の初期値に設定されます</xref:System.Data.Common.DataAdapter>。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  |<xref:System.Data.Common.DataAdapter.TableMappings%2A>|<xref:System.Data.Common.DataAdapter.TableMappings%2A>オブジェクトの配列です |。      これらのプロパティを個別に呼び出してプロパティのいずれかの値を変更することができます</xref:System.Data.Common.DataAdapter.TableMappings%2A></xref:System.Data.Common.DataAdapter.TableMappings%2A></xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A></xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>。"
  syntax:
    content: protected DataAdapter ();
    parameters: []
  overload: System.Data.Common.DataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)
  id: '#ctor(System.Data.Common.DataAdapter)'
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: DataAdapter(DataAdapter)
  nameWithType: DataAdapter.DataAdapter(DataAdapter)
  fullName: System.Data.Common.DataAdapter.DataAdapter(DataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref>同じ型の既存のオブジェクトからのクラスです。"
  remarks: "このオーバー ロード、<xref:System.Data.Common.DataAdapter>コンス トラクターが使用できるように設計を .NET Framework データ プロバイダーによって clone の実装で使用するためのようなコンス トラクターを実装する場合</xref:System.Data.Common.DataAdapter>。"
  syntax:
    content: protected DataAdapter (System.Data.Common.DataAdapter from);
    parameters:
    - id: from
      type: System.Data.Common.DataAdapter
      description: "A <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> 、新規作成に使用されるオブジェクト<xref href=&quot;System.Data.Common.DataAdapter&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill
  id: AcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: AcceptChangesDuringFill
  nameWithType: DataAdapter.AcceptChangesDuringFill
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringFill
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得または設定を示す値かどうか<> *> で呼び出されると、 <xref href=&quot;System.Data.DataRow&quot;> </xref>に追加された後、 <xref href=&quot;System.Data.DataTable&quot;> </xref>のいずれかの中に、 **塗りつぶし** 操作します。"
  remarks: "場合`false`、<xref:System.Data.DataRow.AcceptChanges%2A>が呼び出されないと、新しく追加された行が挿入された行として扱われます</xref:System.Data.DataRow.AcceptChanges%2A>。"
  syntax:
    content: public bool AcceptChangesDuringFill { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<xref:System.Data.DataRow.AcceptChanges*>で呼び出されると、 <xref href=&quot;System.Data.DataRow&quot;></xref>それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Data.DataRow.AcceptChanges*> 。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.AcceptChangesDuringFill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  id: AcceptChangesDuringUpdate
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: AcceptChangesDuringUpdate
  nameWithType: DataAdapter.AcceptChangesDuringUpdate
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得または設定するかどうか<> *> 中に呼び出されますが、 <> </> *> です。"
  remarks: "呼び出し中に、`Update`のメソッド、`DataAdapter`データベースは、結果セットの最初の返されたレコードとして、または出力パラメーターとして、ADO.NET アプリケーションにデータを送信することができます。 ADO.NET がこれらの値を取得および更新の対応する列、<xref:System.Data.DataRow>更新中です</xref:System.Data.DataRow>。 既定では、ADO.NET の呼び出し、`AcceptChanges`のメソッド、`DataRow`の更新の後です。 ただし、マージする場合、更新された行に戻す別<xref:System.Data.DataTable>、することもそのまま保たれ、主キー列の元の値</xref:System.Data.DataTable>。 たとえば、id 列などのデータベースで自動的にインクリメントの列に対応する主キー列が新しい割り当てられた値をデータベースに割り当てられている元の値と一致しないを含めることができます、`DataRow`です。 既定では、 `AcceptChanges` 、更新、および元の値であった可能性があります行の後に暗黙的に呼び出されます<xref:System.Data.DataColumn.AutoIncrement%2A>ADO.NET によって割り当てられている値は失われます</xref:System.Data.DataColumn.AutoIncrement%2A>。 元の値を保持することができます、`DataRow`を防ぐことで`ADO.NET`呼び出し元から`AcceptChanges`AcceptChangesDuringUpdate プロパティを設定、行の更新プログラムを実行した後`false`、元の値が保護されます。      > [!NOTE] > 設定、`AcceptChangesDuringUpdate`プロパティを`false`データ変更をすべてに適用され、だけでなく挿入します。 呼び出しを抑制する場合は、編集、または、同じ更新プログラム内の行を削除する場合と`AcceptChanges`のみ挿入、し、設定ではなく`AccceptChangesDuringUpdate`に`false`のイベント ハンドラーを使用して、`RowUpdated`のイベント、`DataAdapter`です。 イベントのハンドラーを確認できます、<xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A>およびデータの変更が、挿入を判別`true`、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A><xref:System.Data.Common.RowUpdatedEventArgs><xref:System.Data.UpdateStatus></xref:System.Data.UpdateStatus></xref:System.Data.Common.RowUpdatedEventArgs>のプロパティ</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>を設定する</xref:System.Data.Common.RowUpdatedEventArgs.StatementType%2A>。 例および詳細については、次を参照してください。 [Id の取得や Autonumber 値](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This example demonstrates extracting changed rows from a `DataTable` and using a <xref:System.Data.SqlClient.SqlDataAdapter> to update the data source and retrieve a new identity column value. By setting the `AcceptChangesDuringUpdate` property of the <xref:System.Data.SqlClient.SqlDataAdapter> to `false` to preserve the original auto increment value, the new data can then be merged into the original <xref:System.Data.DataTable>, even if the new identity value does not match the original auto increment value in the `DataTable`.  \n  \n [!code-vb[DataWorks SqlClient.AcceptChangesDuringUpdate#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_7_1.vb)]\n [!code-cs[DataWorks SqlClient.AcceptChangesDuringUpdate#1](~/add/codesnippet/csharp/p-system.data.common.dat_7_1.cs)]"
  syntax:
    content: public bool AcceptChangesDuringUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<> *> 中に呼び出されますが、 <> </> *> それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.CloneInternals
  id: CloneInternals
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: CloneInternals()
  nameWithType: DataAdapter.CloneInternals()
  fullName: System.Data.Common.DataAdapter.CloneInternals()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "このインスタンスのコピーを作成<xref href=&quot;System.Data.Common.DataAdapter&quot;></xref>です。"
  remarks: "このメソッドは推奨されません。 <xref:System.Data.Common.DataAdapter.%23ctor%2A>コンス トラクターは、このメソッドの代わりに使用する必要があります</xref:System.Data.Common.DataAdapter.%23ctor%2A>。       すべてのコマンド、 <xref:System.Data.Common.DataAdapter.TableMappings%2A>、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>、および<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>を複製します</xref:System.Data.Common.DataAdapter.MissingMappingAction%2A></xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A></xref:System.Data.Common.DataAdapter.TableMappings%2A>。 ただし、コマンドの接続は、コピーしますが、共有されません。 したがって、複製された<xref:System.Data.Common.DataAdapter>元と同じ接続に対して使用できます</xref:System.Data.Common.DataAdapter>。"
  syntax:
    content: protected virtual System.Data.Common.DataAdapter CloneInternals ();
    parameters: []
    return:
      type: System.Data.Common.DataAdapter
      description: "複製インスタンス<xref href=&quot;System.Data.Common.DataAdapter&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.CloneInternals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError
  id: ContinueUpdateOnError
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ContinueUpdateOnError
  nameWithType: DataAdapter.ContinueUpdateOnError
  fullName: System.Data.Common.DataAdapter.ContinueUpdateOnError
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得または行の更新中にエラー時に例外を生成するを発生したかどうかを指定する値を設定します。"
  remarks: "場合`ContinueUpdateOnError`に設定されている`true`行の更新中にエラーが発生したときに例外がスローされません。 行の更新はスキップされ、エラー情報に配置されます、<xref:System.Data.DataRow.RowError%2A>エラー内の行のプロパティ</xref:System.Data.DataRow.RowError%2A>。 <xref:System.Data.Common.DataAdapter>に&2; 行目以降の更新を続けます</xref:System.Data.Common.DataAdapter>。       場合`ContinueUpdateOnError`に設定されている`false`行の更新中にエラーが発生したときに、例外がスローされます。"
  syntax:
    content: public bool ContinueUpdateOnError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>例外を生成せずに、更新プログラムを続行するにはそれ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.ContinueUpdateOnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.CreateTableMappings
  id: CreateTableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: CreateTableMappings()
  nameWithType: DataAdapter.CreateTableMappings()
  fullName: System.Data.Common.DataAdapter.CreateTableMappings()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "新たに作成<xref href=&quot;System.Data.Common.DataTableMappingCollection&quot;></xref>です。"
  syntax:
    content: protected virtual System.Data.Common.DataTableMappingCollection CreateTableMappings ();
    parameters: []
    return:
      type: System.Data.Common.DataTableMappingCollection
      description: "新しいテーブルのマッピング コレクションです。"
  overload: System.Data.Common.DataAdapter.CreateTableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック<xref:System.IDisposable.Dispose%2A>メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A></xref:System.IDisposable.Dispose%2A>。 `Dispose`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Data.Common.DataAdapter>参照。</xref:System.Data.Common.DataAdapter> 。 このメソッドを呼び出して、`Dispose`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Data.Common.DataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "追加または内の行を更新、 <xref href=&quot;System.Data.DataSet&quot;> </xref>データ ソースのものと一致します。"
  remarks: "Fill メソッドが関連付けられている、指定した SELECT ステートメントを使用してデータ ソースから行を取得<xref:System.Data.IDbDataAdapter.SelectCommand%2A>プロパティ</xref:System.Data.IDbDataAdapter.SelectCommand%2A>。 SELECT ステートメントに関連付けられている接続オブジェクトが有効である必要がありますが、開放する必要はありません。 Fill が呼び出される前に、接続が閉じている場合は、データを取得するために開く、閉じられました。 Fill が呼び出される前に、接続が開いている場合は、開いたままです。       格納操作し、変換先に行を追加する<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうかは、まだ存在しない</xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Data.DataTable>。 作成するときに<xref:System.Data.DataTable>オブジェクトを格納操作は、通常のみの列名のメタデータを作成します</xref:System.Data.DataTable>。 ただし場合、<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>プロパティに設定されている`AddWithKey`、適切なプライマリ キーと制約も作成されます</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>。       場合、 `SelectCommand` OUTER JOIN の結果を返します、 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A>結果として得られる<xref:System.Data.DataTable>.</xref:System.Data.DataTable>の値</xref:System.Data.DataTable.PrimaryKey%2A>を設定しません 重複する行が正しく解決されることを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/add/includes/ajax-current-ext-md.md)です。       データ アダプターの設定中に重複した列が検出されると、 <xref:System.Data.DataTable>、パターン&quot;columnname1&quot;、&quot;columnname2&quot;、&quot;columnname3&quot;などを使用して、後続の列に名前が生成されます</xref:System.Data.DataTable>。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン&quot;Column1&quot;、&quot;Column2&quot;など</xref:System.Data.DataSet>。 複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットは、個別のテーブルに配置されます</xref:System.Data.DataSet>。 追加の結果セットは指定したテーブル名 (たとえば、&quot;Table&quot;、&quot;Table1&quot;、&quot;Table2&quot;、およびなど) に整数値を追加してという名前です。 列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。       設定する SELECT ステートメントを使用する場合、<xref:System.Data.DataSet>複数の結果を返す、バッチの SQL ステートメントなど、エラーが含まれる結果のいずれかの場合それ以降のすべての結果はスキップされ、 <xref:System.Data.DataSet>.</xref:System.Data.DataSet>に追加されていない</xref:System.Data.DataSet>       同じ<xref:System.Data.DataTable>。</xref:System.Data.DataTable> 、Fill メソッド複数回を使用できます。 主キーが存在する場合は、受信した行が既に存在する行と一致すると共にマージされます。 主キーがない場合、受信した行が<xref:System.Data.DataTable>。</xref:System.Data.DataTable>      > [!NOTE] > を複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction>&quot;éý&quot; `AddWithKey`</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 。"
  syntax:
    content: public virtual int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref>のレコードを格納して、必要に応じて、スキーマです。"
    return:
      type: System.Int32
      description: "行の数が正常に追加または更新されて、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。 これには、行を返さないステートメントによって影響を受けた行は含まれません。"
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  id: Fill(System.Data.DataTable,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDataReader)
  nameWithType: DataAdapter.Fill(DataTable,IDataReader)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable,IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "追加または内の行を更新、 <xref href=&quot;System.Data.DataTable&quot;> </xref>一致するように、データ ソースを使用して、 <xref href=&quot;System.Data.DataTable&quot;> </xref>名前と、指定した<xref href=&quot;System.Data.IDataReader&quot;></xref>です。"
  remarks: "「解説」を参照してください`System.Data.Common.DataAdapter.Fill(System.Data.DataSet)`の詳細。"
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>にレコードを格納します。"
    - id: dataReader
      type: System.Data.IDataReader
      description: "インスタンス<xref href=&quot;System.Data.IDataReader&quot;></xref>です。"
    return:
      type: System.Int32
      description: "行の数が正常に追加または更新されて、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。 これには、行を返さないステートメントによって影響を受けた行は含まれません。"
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  id: Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "追加またはコレクション内の指定された範囲内の行を更新<xref href=&quot;System.Data.DataTable&quot;></xref>データ ソースのものと一致するオブジェクト。"
  remarks: "「解説」を参照してください`System.Data.Common.DataAdapter.Fill(System.Data.DataSet)`の詳細。"
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, System.Data.IDataReader dataReader, int startRecord, int maxRecords);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "コレクション<xref href=&quot;System.Data.DataTable&quot;></xref>のレコードを格納するオブジェクト。"
    - id: dataReader
      type: System.Data.IDataReader
      description: "インスタンス<xref href=&quot;System.Data.IDataReader&quot;></xref>です。"
    - id: startRecord
      type: System.Int32
      description: "開始レコードの&0; から始まるインデックス。"
    - id: maxRecords
      type: System.Int32
      description: "レコードの最大数を示す整数。"
    return:
      type: System.Int32
      description: "行の数が正常に追加または更新されて、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。 これには、行を返さないステートメントによって影響を受けた行は含まれません。"
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  id: Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String,IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "追加または更新で指定された範囲内の行、 <xref href=&quot;System.Data.DataSet&quot;> </xref>一致するように、データ ソースを使用して、 <xref href=&quot;System.Data.DataSet&quot;> </xref>と<xref href=&quot;System.Data.DataTable&quot;></xref>名。"
  remarks: "「解説」を参照してください`System.Data.Common.DataAdapter.Fill(System.Data.DataSet)`の詳細。"
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref>にレコードを格納します。"
    - id: srcTable
      type: System.String
      description: "ソース テーブルの名前を示す文字列。"
    - id: dataReader
      type: System.Data.IDataReader
      description: "インスタンス<xref href=&quot;System.Data.IDataReader&quot;></xref>です。"
    - id: startRecord
      type: System.Int32
      description: "開始レコードの&0; から始まるインデックス。"
    - id: maxRecords
      type: System.Int32
      description: "レコードの最大数を示す整数。"
    return:
      type: System.Int32
      description: "行の数が正常に追加または更新されて、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。 これには、行を返さないステートメントによって影響を受けた行は含まれません。"
  overload: System.Data.Common.DataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillError
  id: FillError
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillError
  nameWithType: DataAdapter.FillError
  fullName: System.Data.Common.DataAdapter.FillError
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Fill 操作中にエラーが発生したときに返されます。"
  remarks: "**FillError**イベントにより、ユーザーは、エラーが発生した後に、fill 操作を続行するかどうかを決定します。 場合の例、 **FillError**イベントが発生する可能性がいる: - に追加されるデータ、`DataSet`有効桁数を失うことがなく、共通言語ランタイムの型に変換できません。      追加する行に適用する必要があります、制約に違反するデータが含まれています、`DataColumn`で、`DataSet`です。"
  syntax:
    content: public event System.Data.FillErrorEventHandler FillError;
    return:
      type: System.Data.FillErrorEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillLoadOption
  id: FillLoadOption
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillLoadOption
  nameWithType: DataAdapter.FillLoadOption
  fullName: System.Data.Common.DataAdapter.FillLoadOption
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得または設定、 <xref href=&quot;System.Data.LoadOption&quot;> </xref> 、アダプターを設定する方法を決定する、 <xref href=&quot;System.Data.DataTable&quot;> </xref>から、 <xref href=&quot;System.Data.Common.DbDataReader&quot;></xref>です。"
  syntax:
    content: public System.Data.LoadOption FillLoadOption { get; set; }
    return:
      type: System.Data.LoadOption
      description: "A <xref href=&quot;System.Data.LoadOption&quot;></xref> value."
  overload: System.Data.Common.DataAdapter.FillLoadOption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "追加、 <xref href=&quot;System.Data.DataTable&quot;> </xref>を指定した<xref href=&quot;System.Data.DataSet&quot;></xref>に基づいて、指定された、データ ソースにある一致するようにスキーマを構成および<xref href=&quot;System.Data.SchemaType&quot;></xref>です。"
  remarks: "FillSchema メソッド<xref:System.Data.IDbDataAdapter.SelectCommand%2A>。</xref:System.Data.IDbDataAdapter.SelectCommand%2A>を使用してデータ ソースからスキーマを取得します。 接続オブジェクトに関連付けられている、<xref:System.Data.IDbDataAdapter.SelectCommand%2A>有効である必要がありますを開く必要はありませんが</xref:System.Data.IDbDataAdapter.SelectCommand%2A>。 FillSchema が呼び出される前に、接続が閉じている場合がデータを取得するために開くされ、終了します。 FillSchema が呼び出される前に、接続が開いている場合は、開いたままです。       FillSchema 操作追加<xref:System.Data.DataTable>先<xref:System.Data.DataSet>。</xref:System.Data.DataSet> </xref:System.Data.DataTable> 列を次に、追加、<xref:System.Data.DataColumnCollection>の<xref:System.Data.DataTable>、次の構成と<xref:System.Data.DataColumn>プロパティ、データ ソースに存在する場合:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> 設定する必要があります<xref:System.Data.DataColumn.AutoIncrementStep%2A>と<xref:System.Data.DataColumn.AutoIncrementSeed%2A>とは別にします</xref:System.Data.DataColumn.AutoIncrementSeed%2A></xref:System.Data.DataColumn.AutoIncrementStep%2A>。      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>-<xref:System.Data.DataColumn.Unique%2A>構成も行います FillSchema、<xref:System.Data.DataTable.PrimaryKey%2A>と<xref:System.Data.DataTable.Constraints%2A>次の規則に従ってプロパティ: -&1; つまたは複数の主キー列がこの<xref:System.Data.IDbDataAdapter.SelectCommand%2A><xref:System.Data.DataTable>.</xref:System.Data.DataTable>の主キー列として使用される、</xref:System.Data.IDbDataAdapter.SelectCommand%2A>によって返される場合</xref:System.Data.DataTable.Constraints%2A></xref:System.Data.DataTable.PrimaryKey%2A></xref:System.Data.DataColumn.Unique%2A></xref:System.Data.DataColumn.ReadOnly%2A></xref:System.Data.DataColumn.MaxLength%2A>      の場合主キー列は返されませんが、一意の列の一意の列は、のみのすべての一意の列は null 値非許容場合、主キーとして使用されます。 任意の列は null を許容すると場合、<xref:System.Data.UniqueConstraint>に追加、 <xref:System.Data.ConstraintCollection>、ですが、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティが設定されていません</xref:System.Data.DataTable.PrimaryKey%2A></xref:System.Data.ConstraintCollection></xref:System.Data.UniqueConstraint>。      主キー列と一意の列の両方が返された場合でも、主キー列は<xref:System.Data.DataTable>。</xref:System.Data.DataTable>の主キー列として使用されます。      > [!NOTE] > 基になるデータ ストアでサポートされていない列属性を許可することがあります、 <xref:System.Data.DataColumn>、それが原因で正しく変換されない一部の列属性</xref:System.Data.DataColumn>。 たとえば、 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] tinyint のデータ型で id 列は、一方、<xref:System.Data.DataColumn>のみ許可するには、Int16、Int32 と Int64、<xref:System.Data.DataColumn.AutoIncrement%2A>プロパティ セット</xref:System.Data.DataColumn.AutoIncrement%2A></xref:System.Data.DataColumn>。 `FillSchema`無視される場合もここで、<xref:System.Data.DataColumn>データ ソースを正確にミラー化できないし、例外はスローされません</xref:System.Data.DataColumn>。       主キーと一意の制約が追加することに注意してください、 <xref:System.Data.ConstraintCollection>、前述のルールがその他の制約に従って、型は追加されません</xref:System.Data.ConstraintCollection>。       一意のクラスター化または SQL Server テーブルに複数の列にインデックスを定義し、主キー制約が定義されて、個別の列のセットで、クラスター化インデックスの列の名前が返されます。 主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。 クエリ ヒントを指定する方法の詳細については、次を参照してください。[クエリ ヒント (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)です。       場合、<xref:System.Data.Common.DataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>のパターンを使用して、後続の列名が生成されます&quot;*columnname*1&quot;、&quot;*columnname*2「,」*columnname*3&quot;のようにします</xref:System.Data.DataTable></xref:System.Data.Common.DataAdapter>。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン&quot;Column1&quot;、&quot;Column2&quot;など</xref:System.Data.DataSet>。 複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットは、個別のテーブルに配置されます</xref:System.Data.DataSet>。 追加の結果セットは指定したテーブル名 (たとえば、&quot;Table&quot;、&quot;Table1&quot;、&quot;Table2&quot;、およびなど) に整数値を追加してという名前です。 列とテーブルの名前を使用してアプリケーションには、これらの名前付けパターンとの競合が発生しないことを確認します。       FillSchema には、すべての行は返しません。 <xref:System.Data.Common.DataAdapter.Fill%2A> <xref:System.Data.DataTable>。</xref:System.Data.DataTable>行を追加するメソッド</xref:System.Data.Common.DataAdapter.Fill%2A>を使用して      > [!NOTE] > を複数の結果の実装を返す SQL ステートメントのバッチを処理するときに<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の .NET Framework Data Provider for OLE DB は、最初の結果のみのスキーマ情報を取得します</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>。 複数の結果のスキーマ情報を取得する<xref:System.Data.Common.DbDataAdapter.Fill%2A>で、 <xref:System.Data.MissingSchemaAction>&quot;éý&quot; `AddWithKey`</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 。"
  syntax:
    content: public virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref>データ ソースからスキーマを格納します。"
    - id: schemaType
      type: System.Data.SchemaType
      description: "1 つ、 <xref href=&quot;System.Data.SchemaType&quot;> </xref>値。"
    return:
      type: System.Data.DataTable[]
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>データ ソースからスキーマ情報を格納するオブジェクトが返されます。"
  overload: System.Data.Common.DataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "追加、 <xref href=&quot;System.Data.DataTable&quot;> </xref>を指定した<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDataReader dataReader);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref>によって満たされます、 <xref href=&quot;System.Data.IDataReader&quot;></xref>です。"
    - id: schemaType
      type: System.Data.SchemaType
      description: "1 つ、 <xref href=&quot;System.Data.SchemaType&quot;> </xref>値。"
    - id: dataReader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>いっぱいになるときに、データ ソースとして使用される、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>データ ソースからスキーマ情報を格納するオブジェクトが返されます。"
  overload: System.Data.Common.DataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "追加、 <xref href=&quot;System.Data.DataTable&quot;> </xref>を指定した<xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable, System.Data.IDataReader dataReader);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref>によって満たされます、 <xref href=&quot;System.Data.IDataReader&quot;></xref>です。"
    - id: schemaType
      type: System.Data.SchemaType
      description: "1 つ、 <xref href=&quot;System.Data.SchemaType&quot;> </xref>値。"
    - id: srcTable
      type: System.String
      description: "テーブル マップに使用するソース テーブルの名前。"
    - id: dataReader
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>いっぱいになるときに、データ ソースとして使用される、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。"
    return:
      type: System.Data.DataTable[]
      description: "コレクションへの参照を<xref href=&quot;System.Data.DataTable&quot;></xref>オブジェクトに追加された、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DataAdapter.GetFillParameters()
  fullName: System.Data.Common.DataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "SQL SELECT ステートメントを実行するときに、ユーザーによって設定パラメーターを取得します。"
  syntax:
    content: public virtual System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "配列<xref href=&quot;System.Data.IDataParameter&quot;></xref>パラメーターを格納するオブジェクトがユーザーによって設定します。"
  overload: System.Data.Common.DataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.HasTableMappings
  id: HasTableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: HasTableMappings()
  nameWithType: DataAdapter.HasTableMappings()
  fullName: System.Data.Common.DataAdapter.HasTableMappings()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "示すかどうか、 <xref href=&quot;System.Data.Common.DataTableMappingCollection&quot;> </xref>が作成されました。"
  syntax:
    content: protected bool HasTableMappings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Data.Common.DataTableMappingCollection&quot;> </xref>それ以外に作成された<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.HasTableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.MissingMappingAction
  id: MissingMappingAction
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: MissingMappingAction
  nameWithType: DataAdapter.MissingMappingAction
  fullName: System.Data.Common.DataAdapter.MissingMappingAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "一致するテーブルまたは列の受信データがないときに実行するアクションを決定します。"
  remarks: "<xref:System.Data.Common.DataAdapter.TableMappings%2A>プロパティは、返されたレコードと<xref:System.Data.DataSet>。</xref:System.Data.DataSet>マスターのマッピングを提供します。</xref:System.Data.Common.DataAdapter.TableMappings%2A>"
  example:
  - "The following example creates a derived class, <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_4_1.vb)]\n [!code-cs[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_4_1.cs)]"
  syntax:
    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }
    return:
      type: System.Data.MissingMappingAction
      description: "1 つ、 <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref>値。 既定値は<xref uid=&quot;langword_csharp_Passthrough&quot; name=&quot;Passthrough&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.MissingMappingAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定されている値が、 <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref>値。"
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.MissingSchemaAction
  id: MissingSchemaAction
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: MissingSchemaAction
  nameWithType: DataAdapter.MissingSchemaAction
  fullName: System.Data.Common.DataAdapter.MissingSchemaAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "既存のときに実行するアクションを決定<xref href=&quot;System.Data.DataSet&quot;></xref>スキーマが受信データと一致しません。"
  remarks: ''
  example:
  - "The following example creates a derived class, <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_9_1.vb)]\n [!code-cs[Classic WebData DataAdapter.MissingMappingAction Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_9_1.cs)]"
  syntax:
    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }
    return:
      type: System.Data.MissingSchemaAction
      description: "1 つ、 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref>値。 既定値は<xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.MissingSchemaAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定されている値が、 <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref>値。"
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  id: OnFillError(System.Data.FillErrorEventArgs)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: OnFillError(FillErrorEventArgs)
  nameWithType: DataAdapter.OnFillError(FillErrorEventArgs)
  fullName: System.Data.Common.DataAdapter.OnFillError(FillErrorEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "エラーが発生したときに呼び出される、 <xref uid=&quot;langword_csharp_Fill&quot; name=&quot;Fill&quot; href=&quot;&quot;></xref>です。"
  syntax:
    content: protected virtual void OnFillError (System.Data.FillErrorEventArgs value);
    parameters:
    - id: value
      type: System.Data.FillErrorEventArgs
      description: "A <xref href=&quot;System.Data.FillErrorEventArgs&quot;></xref> object."
  overload: System.Data.Common.DataAdapter.OnFillError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ResetFillLoadOption
  id: ResetFillLoadOption
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ResetFillLoadOption()
  nameWithType: DataAdapter.ResetFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ResetFillLoadOption()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "リセット<> *> を既定の状態と原因&lt;xref:System.Data.Common.DataAdapter.Fill%2A?displayProperty=fullName&gt;に従う<> *> です。"
  syntax:
    content: public void ResetFillLoadOption ();
    parameters: []
  overload: System.Data.Common.DataAdapter.ResetFillLoadOption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  id: ReturnProviderSpecificTypes
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ReturnProviderSpecificTypes
  nameWithType: DataAdapter.ReturnProviderSpecificTypes
  fullName: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得または設定するかどうか、 <xref uid=&quot;langword_csharp_Fill&quot; name=&quot;Fill&quot; href=&quot;&quot;> </xref>メソッドは、プロバイダー固有の値または一般的な CLS 準拠の値を返す必要があります。"
  remarks: "既定値は `false` です。"
  syntax:
    content: public virtual bool ReturnProviderSpecificTypes { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref uid=&quot;langword_csharp_Fill&quot; name=&quot;Fill&quot; href=&quot;&quot;> </xref>メソッドは、プロバイダー固有の値を返す必要があります。 それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> CLS 準拠の共通の値を返します。"
  overload: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  id: ShouldSerializeAcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ShouldSerializeAcceptChangesDuringFill()
  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "指定するかどうか、<xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*>プロパティを永続化する必要があります</xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*>。"
  syntax:
    content: public virtual bool ShouldSerializeAcceptChangesDuringFill ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、<xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*>プロパティは、それ以外の永続化された<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Data.Common.DataAdapter.AcceptChangesDuringFill*> 。"
  overload: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  id: ShouldSerializeFillLoadOption
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ShouldSerializeFillLoadOption()
  nameWithType: DataAdapter.ShouldSerializeFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "指定するかどうか、<xref:System.Data.Common.DataAdapter.FillLoadOption*>プロパティを永続化する必要があります</xref:System.Data.Common.DataAdapter.FillLoadOption*>。"
  syntax:
    content: public virtual bool ShouldSerializeFillLoadOption ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、<xref:System.Data.Common.DataAdapter.FillLoadOption*>プロパティは、それ以外の永続化された<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Data.Common.DataAdapter.FillLoadOption*> 。"
  overload: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  id: ShouldSerializeTableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: ShouldSerializeTableMappings()
  nameWithType: DataAdapter.ShouldSerializeTableMappings()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeTableMappings()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "1 つかどうかを決定以上<xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref>オブジェクトが存在し、永続化する必要があります。"
  syntax:
    content: protected virtual bool ShouldSerializeTableMappings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>1 つまたは複数<xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref>オブジェクトが存在します。 それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.ShouldSerializeTableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  id: System#Data#IDataAdapter#TableMappings
  isEii: true
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: System.Data.IDataAdapter.TableMappings
  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.System.Data.IDataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "ソース テーブルを dataset テーブルにマップする方法を示します。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.Common.DataAdapter>にインスタンスをキャスト、<xref:System.Data.IDataAdapter>インターフェイス</xref:System.Data.IDataAdapter></xref:System.Data.Common.DataAdapter>。       詳細については、詳しい<xref:System.Data.IDataAdapter.TableMappings%2A>。</xref:System.Data.IDataAdapter.TableMappings%2A>を参照してください。"
  syntax:
    content: System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }
    return:
      type: System.Data.ITableMappingCollection
      description: "返されたレコードの間でマスター マッピングを提供するコレクションと<xref href=&quot;System.Data.DataSet&quot;></xref>です。 既定値は、空のコレクションです。"
  overload: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.TableMappings
  id: TableMappings
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: TableMappings
  nameWithType: DataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "取得元のテーブル間のマスター マッピングを提供するコレクションと<xref href=&quot;System.Data.DataTable&quot;></xref>です。"
  remarks: "<xref:System.Data.Common.DataAdapter> <xref:System.Data.Common.DataTableMappingCollection> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>で使用される列名を持つデータ ソースで使用される列名に関連付けるコレクション</xref:System.Data.Common.DataTableMappingCollection>を使用して</xref:System.Data.Common.DataAdapter>変更を調整する場合に"
  example:
  - "The following example uses a derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to add <xref:System.Data.Common.DataTableMapping> objects to its TableMappings collection and display a list of those mapped source tables. This example assumes that an <xref:System.Data.OleDb.OleDbDataAdapter> has already been created.  \n  \n [!code-vb[Classic WebData DataAdapter.TableMappings Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dat_14_1.vb)]\n [!code-cs[Classic WebData DataAdapter.TableMappings Example#1](~/add/codesnippet/csharp/p-system.data.common.dat_14_1.cs)]"
  syntax:
    content: public System.Data.Common.DataTableMappingCollection TableMappings { get; }
    return:
      type: System.Data.Common.DataTableMappingCollection
      description: "返されたレコードの間でマスター マッピングを提供するコレクションと<xref href=&quot;System.Data.DataSet&quot;></xref>です。 既定値は、空のコレクションです。"
  overload: System.Data.Common.DataAdapter.TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DataAdapter.Update(DataSet)
  fullName: System.Data.Common.DataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "それぞれの INSERT、UPDATE、または DELETE ステートメントの問い合わせについては、挿入、更新、または削除された、指定した行に各<xref href=&quot;System.Data.DataSet&quot;></xref>から、 <xref href=&quot;System.Data.DataTable&quot;> </xref> &quot;Table&quot;という名前"
  remarks: "更新プログラムは、行ごとに実行されます。 すべての挿入、変更、および削除された行の更新プログラムを判断するメソッドで行われた変更の種類 (挿入、更新または削除) します。 変更の種類に応じて、 `Insert`、`Update,`または`Delete`コマンド テンプレートが実行されて、データ ソースに変更された行を伝達します。 アプリケーションは、Update メソッドを呼び出すときに、<xref:System.Data.Common.DataAdapter>を調べ、<xref:System.Data.DataRow.RowState%2A>プロパティ、 <xref:System.Data.DataSet>.</xref:System.Data.DataSet>で構成されているインデックスの順序に基づいて、各行の繰り返し、必要な INSERT、UPDATE、または DELETE ステートメントを実行および</xref:System.Data.DataRow.RowState%2A></xref:System.Data.Common.DataAdapter> たとえば、更新プログラムが後に、INSERT ステートメントと<xref:System.Data.DataTable>。</xref:System.Data.DataTable>内の行の順序付けのためのもう&1; つの DELETE ステートメント、DELETE ステートメントを実行可能性があります。       これらのステートメントは、バッチ処理としては実行されないことに注意してください。各行が個別に更新されます。 アプリケーションが呼び出すことができます、<xref:System.Data.DataSet.GetChanges%2A>ステートメントの種類のシーケンスを制御する必要がありますの状況でメソッド (たとえば、更新する前に挿入) です</xref:System.Data.DataSet.GetChanges%2A>。 詳細については、次を参照してください。 [Dataadapter によるデータ ソースを更新](~/add/includes/ajax-current-ext-md.md)です。       かどうか挿入、更新、または DELETE ステートメントが指定されていない、Update メソッドは、例外を生成します。 ただし、作成することができます、<xref:System.Data.SqlClient.SqlCommandBuilder>または<xref:System.Data.OleDb.OleDbCommandBuilder>設定した場合、SQL ステートメントの&1; つのテーブルの更新プログラムを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティ</xref:System.Data.OleDb.OleDbCommandBuilder></xref:System.Data.SqlClient.SqlCommandBuilder>。 次に、追加の SQL ステートメントを設定しないことがによって生成される、 **CommandBuilder**です。 この生成ロジックには、 <xref:System.Data.DataSet>。</xref:System.Data.DataSet>に存在するキー列情報が必要です。 詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。       Update メソッドは、更新プログラムを実行する前に最初のマッピングに示されたテーブルから行を取得します。 更新プログラムの値を使用して行を更新し、<xref:System.Data.IDbCommand.UpdatedRowSource%2A>プロパティ</xref:System.Data.IDbCommand.UpdatedRowSource%2A>。 返されるその他の行は無視されます。       すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントを発生すると、ユーザーが、調整を検査できるように<xref:System.Data.DataSet>行とその出力、コマンドによって返されるパラメーター</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> 。 行が正常に更新される、その行に対する変更が受け入れられます。       実行の順序は次のように、更新プログラムを使用する場合: 1。  内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます</xref:System.Data.DataRow>。      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>イベントが発生します</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>。      3.  コマンドを実行します。      4.  コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果<xref:System.Data.DataRow>.</xref:System.Data.DataRow>に格納し、      5.  <xref:System.Data.DataRow>。</xref:System.Data.DataRow>に配置される出力パラメーターがある場合      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントが発生します</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>。      7.  <xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=fullName>呼び出されます。</xref:System.Data.DataRow.AcceptChanges%2A?displayProperty=fullName> これは、両方<xref:System.Data.DataTable.RowChanging?displayProperty=fullName>および<xref:System.Data.DataTable.RowChanged?displayProperty=fullName>更新された<xref:System.Data.DataRow>。</xref:System.Data.DataRow>イベント</xref:System.Data.DataTable.RowChanged?displayProperty=fullName></xref:System.Data.DataTable.RowChanging?displayProperty=fullName>が生成されます。       <xref:System.Data.Common.DataAdapter>通常はそれに関連付けられているパラメーターのコレクション</xref:System.Data.Common.DataAdapter>に関連付けられている各コマンド パラメーターを使用して、現在行にマップされます、`SourceColumn`と`SourceVersion`a.NET データ プロバイダーのプロパティ`Parameter`クラスです。 `SourceColumn`指す、<xref:System.Data.DataTable>列を<xref:System.Data.Common.DataAdapter>参照を現在の行のパラメーターの値を取得します</xref:System.Data.Common.DataAdapter></xref:System.Data.DataTable>。       `SourceColumn`すべてのテーブル マップを適用する前に、マップされていない列の名前を指します。 場合`SourceColumn`は存在しない列に実行されるアクションは、次のいずれかに依存<xref:System.Data.MissingMappingAction>値</xref:System.Data.MissingMappingAction>。      |列挙値 |実行されるアクション |  |-----------------------|------------------|  |`MissingMappingAction.Passthrough`|マッピングが存在しない場合、ソース列の名前とテーブル名を<xref:System.Data.DataSet>に使用します |。  |`MissingMappingAction.Ignore`|A<xref:System.SystemException>が生成されます</xref:System.SystemException></xref:System.Data.DataSet>。 設定すると、マッピングは明示的に、入力パラメーターがエラーの結果では通常、不足しているマップします |。  |`MissingMappingAction.Error`|<xref:System.SystemException>が生成されます |。      `SourceColumn`出力の値をマップするプロパティを使用しても、または入力/出力パラメーターにバックアップ、 `DataSet`</xref:System.SystemException> 。 存在しない列を参照する場合、例外が生成されます。       `SourceVersion`の .NET データ プロバイダーのプロパティ`Parameter`クラスは、列の値の元の現在、または提案済みバージョンを使用するかどうかを決定します。 この機能は、オプティミスティック同時実行制御違反をチェックする UPDATE ステートメントの WHERE 句に元の値を含めるによく使用されます。       の呼び出し、<xref:System.Data.DataSet.AcceptChanges%2A>メソッドまたは<xref:System.Data.DataTable.AcceptChanges%2A>メソッドはすべての変更、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>。</xref:System.Data.DataTable></xref:System.Data.DataSet>にコミット</xref:System.Data.DataTable.AcceptChanges%2A></xref:System.Data.DataSet.AcceptChanges%2A> 前にこれらのメソッドのいずれかが呼び出された場合、<xref:System.Data.Common.DbDataAdapter.Update%2A>メソッドが呼び出されると、変更はコミットされないときに、<xref:System.Data.Common.DbDataAdapter.Update%2A>以降をさらに変更が加えられたしない限り、メソッドが呼び出されます<xref:System.Data.DataSet.AcceptChanges%2A>または<xref:System.Data.DataTable.AcceptChanges%2A>が呼び出されました</xref:System.Data.DataTable.AcceptChanges%2A></xref:System.Data.DataSet.AcceptChanges%2A></xref:System.Data.Common.DbDataAdapter.Update%2A></xref:System.Data.Common.DbDataAdapter.Update%2A>。      > [!NOTE] > 行を更新中にエラーが発生した場合、例外がスローされ、更新プログラムの実行は廃止されました。 エラーが発生したときに例外を生成せず、更新操作を続行するには設定、<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>プロパティを`true` <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A>を呼び出す前に</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベントです。 内で例外を生成せず、更新操作を続行する、`RowUpdated`イベント、<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A><xref:System.Data.Common.RowUpdatedEventArgs><xref:System.Data.UpdateStatus></xref:System.Data.UpdateStatus></xref:System.Data.Common.RowUpdatedEventArgs>のプロパティ</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>を設定します。。   >> すべての列をデータ ソース onUpdate に反映されるまで、パラメーターを追加するのには`InsertCommand`、 `UpdateCommand`、または`DeleteCommand`です。 `SourceColumn`パラメーターのプロパティは、列の名前に設定する必要があります。 この設定は、パラメーターの値が、手動で設定されていないが、現在処理されている行の特定の列から取得したことを示します。"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to Update the data source.  \n  \n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dat_26_1.cs)]\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dat_26_1.vb)]"
  syntax:
    content: public virtual int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref>データ ソースを更新するために使用します。"
    return:
      type: System.Int32
      description: "正常に更新された行の数、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。"
  overload: System.Data.Common.DataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ソース テーブルが正しくありません。"
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "INSERT、UPDATE、または DELETE ステートメントを実行しようとすると、影響を受けた&0; 個のレコードが発生しました。"
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DataAdapter.#ctor
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: DataAdapter()
  nameWithType: DataAdapter.DataAdapter()
  fullName: System.Data.Common.DataAdapter.DataAdapter()
- uid: System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: DataAdapter(DataAdapter)
  nameWithType: DataAdapter.DataAdapter(DataAdapter)
  fullName: System.Data.Common.DataAdapter.DataAdapter(DataAdapter)
- uid: System.Data.Common.DataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DataAdapter
  nameWithType: DataAdapter
  fullName: System.Data.Common.DataAdapter
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringFill
  nameWithType: DataAdapter.AcceptChangesDuringFill
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringFill
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringUpdate
  nameWithType: DataAdapter.AcceptChangesDuringUpdate
  fullName: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
- uid: System.Data.Common.DataAdapter.CloneInternals
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CloneInternals()
  nameWithType: DataAdapter.CloneInternals()
  fullName: System.Data.Common.DataAdapter.CloneInternals()
- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ContinueUpdateOnError
  nameWithType: DataAdapter.ContinueUpdateOnError
  fullName: System.Data.Common.DataAdapter.ContinueUpdateOnError
- uid: System.Data.Common.DataAdapter.CreateTableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CreateTableMappings()
  nameWithType: DataAdapter.CreateTableMappings()
  fullName: System.Data.Common.DataAdapter.CreateTableMappings()
- uid: System.Data.Common.DataTableMappingCollection
  parent: System.Data.Common
  isExternal: false
  name: DataTableMappingCollection
  nameWithType: DataTableMappingCollection
  fullName: System.Data.Common.DataTableMappingCollection
- uid: System.Data.Common.DataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DataAdapter.Dispose(Boolean)
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataTable,IDataReader)
  nameWithType: DataAdapter.Fill(DataTable,IDataReader)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable,IDataReader)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataTable[],IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataTable[],IDataReader,Int32,Int32)
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill(DataSet,String,IDataReader,Int32,Int32)
  nameWithType: DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
  fullName: System.Data.Common.DataAdapter.Fill(DataSet,String,IDataReader,Int32,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DataAdapter.FillError
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillError
  nameWithType: DataAdapter.FillError
  fullName: System.Data.Common.DataAdapter.FillError
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.Common.DataAdapter.FillLoadOption
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillLoadOption
  nameWithType: DataAdapter.FillLoadOption
  fullName: System.Data.Common.DataAdapter.FillLoadOption
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataTable,SchemaType,IDataReader)
- uid: System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String,IDataReader)
  nameWithType: DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
  fullName: System.Data.Common.DataAdapter.FillSchema(DataSet,SchemaType,String,IDataReader)
- uid: System.Data.Common.DataAdapter.GetFillParameters
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DataAdapter.GetFillParameters()
  fullName: System.Data.Common.DataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DataAdapter.HasTableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: HasTableMappings()
  nameWithType: DataAdapter.HasTableMappings()
  fullName: System.Data.Common.DataAdapter.HasTableMappings()
- uid: System.Data.Common.DataAdapter.MissingMappingAction
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: DataAdapter.MissingMappingAction
  fullName: System.Data.Common.DataAdapter.MissingMappingAction
- uid: System.Data.MissingMappingAction
  parent: System.Data
  isExternal: false
  name: MissingMappingAction
  nameWithType: MissingMappingAction
  fullName: System.Data.MissingMappingAction
- uid: System.Data.Common.DataAdapter.MissingSchemaAction
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: DataAdapter.MissingSchemaAction
  fullName: System.Data.Common.DataAdapter.MissingSchemaAction
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: OnFillError(FillErrorEventArgs)
  nameWithType: DataAdapter.OnFillError(FillErrorEventArgs)
  fullName: System.Data.Common.DataAdapter.OnFillError(FillErrorEventArgs)
- uid: System.Data.FillErrorEventArgs
  parent: System.Data
  isExternal: false
  name: FillErrorEventArgs
  nameWithType: FillErrorEventArgs
  fullName: System.Data.FillErrorEventArgs
- uid: System.Data.Common.DataAdapter.ResetFillLoadOption
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ResetFillLoadOption()
  nameWithType: DataAdapter.ResetFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ResetFillLoadOption()
- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ReturnProviderSpecificTypes
  nameWithType: DataAdapter.ReturnProviderSpecificTypes
  fullName: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeAcceptChangesDuringFill()
  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill()
- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeFillLoadOption()
  nameWithType: DataAdapter.ShouldSerializeFillLoadOption()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption()
- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeTableMappings()
  nameWithType: DataAdapter.ShouldSerializeTableMappings()
  fullName: System.Data.Common.DataAdapter.ShouldSerializeTableMappings()
- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.IDataAdapter.TableMappings
  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.System.Data.IDataAdapter.TableMappings
- uid: System.Data.ITableMappingCollection
  parent: System.Data
  isExternal: false
  name: ITableMappingCollection
  nameWithType: ITableMappingCollection
  fullName: System.Data.ITableMappingCollection
- uid: System.Data.Common.DataAdapter.TableMappings
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: DataAdapter.TableMappings
  fullName: System.Data.Common.DataAdapter.TableMappings
- uid: System.Data.Common.DataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DataAdapter.Update(DataSet)
  fullName: System.Data.Common.DataAdapter.Update(DataSet)
- uid: System.Data.Common.DataAdapter.#ctor*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: DataAdapter
  nameWithType: DataAdapter.DataAdapter
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringFill*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringFill
  nameWithType: DataAdapter.AcceptChangesDuringFill
- uid: System.Data.Common.DataAdapter.AcceptChangesDuringUpdate*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: AcceptChangesDuringUpdate
  nameWithType: DataAdapter.AcceptChangesDuringUpdate
- uid: System.Data.Common.DataAdapter.CloneInternals*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CloneInternals
  nameWithType: DataAdapter.CloneInternals
- uid: System.Data.Common.DataAdapter.ContinueUpdateOnError*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ContinueUpdateOnError
  nameWithType: DataAdapter.ContinueUpdateOnError
- uid: System.Data.Common.DataAdapter.CreateTableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: CreateTableMappings
  nameWithType: DataAdapter.CreateTableMappings
- uid: System.Data.Common.DataAdapter.Dispose*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DataAdapter.Dispose
- uid: System.Data.Common.DataAdapter.Fill*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Fill
  nameWithType: DataAdapter.Fill
- uid: System.Data.Common.DataAdapter.FillLoadOption*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillLoadOption
  nameWithType: DataAdapter.FillLoadOption
- uid: System.Data.Common.DataAdapter.FillSchema*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DataAdapter.FillSchema
- uid: System.Data.Common.DataAdapter.GetFillParameters*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DataAdapter.GetFillParameters
- uid: System.Data.Common.DataAdapter.HasTableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: HasTableMappings
  nameWithType: DataAdapter.HasTableMappings
- uid: System.Data.Common.DataAdapter.MissingMappingAction*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: DataAdapter.MissingMappingAction
- uid: System.Data.Common.DataAdapter.MissingSchemaAction*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: DataAdapter.MissingSchemaAction
- uid: System.Data.Common.DataAdapter.OnFillError*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: OnFillError
  nameWithType: DataAdapter.OnFillError
- uid: System.Data.Common.DataAdapter.ResetFillLoadOption*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ResetFillLoadOption
  nameWithType: DataAdapter.ResetFillLoadOption
- uid: System.Data.Common.DataAdapter.ReturnProviderSpecificTypes*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ReturnProviderSpecificTypes
  nameWithType: DataAdapter.ReturnProviderSpecificTypes
- uid: System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeAcceptChangesDuringFill
  nameWithType: DataAdapter.ShouldSerializeAcceptChangesDuringFill
- uid: System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeFillLoadOption
  nameWithType: DataAdapter.ShouldSerializeFillLoadOption
- uid: System.Data.Common.DataAdapter.ShouldSerializeTableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: ShouldSerializeTableMappings
  nameWithType: DataAdapter.ShouldSerializeTableMappings
- uid: System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.IDataAdapter.TableMappings
  nameWithType: DataAdapter.System.Data.IDataAdapter.TableMappings
- uid: System.Data.Common.DataAdapter.TableMappings*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: DataAdapter.TableMappings
- uid: System.Data.Common.DataAdapter.Update*
  parent: System.Data.Common.DataAdapter
  isExternal: false
  name: Update
  nameWithType: DataAdapter.Update
