### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceBase
  id: ServiceBase
  children:
  - System.ServiceProcess.ServiceBase.#ctor
  - System.ServiceProcess.ServiceBase.AutoLog
  - System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  - System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  - System.ServiceProcess.ServiceBase.CanPauseAndContinue
  - System.ServiceProcess.ServiceBase.CanShutdown
  - System.ServiceProcess.ServiceBase.CanStop
  - System.ServiceProcess.ServiceBase.Dispose(System.Boolean)
  - System.ServiceProcess.ServiceBase.EventLog
  - System.ServiceProcess.ServiceBase.ExitCode
  - System.ServiceProcess.ServiceBase.MaxNameLength
  - System.ServiceProcess.ServiceBase.OnContinue
  - System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)
  - System.ServiceProcess.ServiceBase.OnPause
  - System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  - System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  - System.ServiceProcess.ServiceBase.OnShutdown
  - System.ServiceProcess.ServiceBase.OnStart(System.String[])
  - System.ServiceProcess.ServiceBase.OnStop
  - System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)
  - System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)
  - System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])
  - System.ServiceProcess.ServiceBase.ServiceHandle
  - System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)
  - System.ServiceProcess.ServiceBase.ServiceName
  - System.ServiceProcess.ServiceBase.Stop
  langs:
  - csharp
  name: ServiceBase
  nameWithType: ServiceBase
  fullName: System.ServiceProcess.ServiceBase
  type: Class
  summary: "サービス アプリケーションの一部として存在するサービスの基本クラスを提供します。 ServiceBase は、新しいサービス クラスを作成するときからを派生する必要があります。"
  remarks: "Derive from ServiceBase when defining your service class in a service application. Any useful service overrides the [OnStart(String\\[\\])](assetId:///M:System.ServiceProcess.ServiceBase.OnStart(System.String[])?qualifyHint=False&autoUpgrade=True) and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods. For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.  \n  \n A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account. The service can run without any user being logged on to the computer.  \n  \n By default, services run under the System account, which is not the same as the Administrator account. You cannot change the rights of the System account. Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.  \n  \n An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service. The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system. The installer also associates each service with an event log that you can use to record service commands. The `main()` function in the executable defines which services should run. The current working directory of the service is the system directory, not the directory in which the executable is located.  \n  \n When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable. However, running the service is not the same as running the executable. The executable only loads the service. The service is accessed (for example, started and stopped) through the Service Control Manager.  \n  \n The executable calls the ServiceBase derived class's constructor the first time you call Start on the service. The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes. The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.  \n  \n The Service Control Manager (SCM) provides a way to interact with the service. You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service. The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands. Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class. If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.  \n  \n You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface. You can automate the tasks available in the console. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.  \n  \n You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in ServiceBase. However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden. The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method. The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the ServiceBase object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.  \n  \n You can use `InstallUtil.exe` to install services on your system.  \n  \n> [!NOTE]\n>  You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log. Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging."
  syntax:
    content: >-
      [System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))]

      public class ServiceBase : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceBase()
  nameWithType: ServiceBase.ServiceBase()
  fullName: System.ServiceProcess.ServiceBase.ServiceBase()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "新しいインスタンスを作成、 <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>クラスです。"
  remarks: "<xref:System.ServiceProcess.ServiceBase>クラス</xref:System.ServiceProcess.ServiceBase>のインスタンスを作成できません。 代わりに<xref:System.ServiceProcess.ServiceBase>、派生クラスのインスタンスを作成して</xref:System.ServiceProcess.ServiceBase>から派生します。 最小値から継承されたクラスのコンス トラクターで実装する必要があります<xref:System.ServiceProcess.ServiceBase>を設定するには、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>、コンポーネントでします</xref:System.ServiceProcess.ServiceBase.ServiceName%2A></xref:System.ServiceProcess.ServiceBase>。 他の処理は、コンス トラクターで具体的には必要ありません。 ほとんどの初期化を処理する必要があります<xref:System.ServiceProcess.ServiceBase.OnStart%2A>コンス トラクターではなく</xref:System.ServiceProcess.ServiceBase.OnStart%2A>。 それ以外の場合、オブジェクトは再初期化が停止した後にサービスを再起動すると保証はありません。       派生クラスでコンス トラクターをオーバーライドする場合は、コードで基本クラス コンス トラクターを呼び出します。       <xref:System.ServiceProcess.ServiceBase>コンス トラクター セット<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`true`</xref:System.ServiceProcess.ServiceBase.AutoLog%2A></xref:System.ServiceProcess.ServiceBase>。 自動的に呼び出しをログにサービスにサービス コントロール マネージャー (SCM) からたくない場合は、設定<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>。       実行可能ファイルに&1; つのサービスが含まれている場合、システムは、開始が scm でが選択されているし、Stop が呼び出された場合にデストラクターを実行時に、サービスのコンス トラクターを呼び出します。       実行可能ファイルに複数のサービスが含まれている場合、実行可能ファイルのすべてのサービスに対して呼び出されるコンス トラクターは、1 つのサービスの開始を呼び出すとが、指定したサービスのみが開始します。 サービスのデストラクターは、サービスをすべて停止している個別ではなく各サービスが停止しているときに一緒に実行されます。      > [!NOTE] > 基底クラス コンス トラクターをオーバーライドする場合、明示的に呼び出す必要が、派生クラスのコンス トラクターでします。"
  syntax:
    content: public ServiceBase ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.AutoLog
  id: AutoLog
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: AutoLog
  nameWithType: ServiceBase.AutoLog
  fullName: System.ServiceProcess.ServiceBase.AutoLog
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "イベント ログの開始、停止、一時停止、および Continue コマンドを報告するかどうかを示します。"
  remarks: "AutoLog 設定`true`サービスの開始、停止、一時停止、状態変更情報だけでなく、コマンドの失敗を報告する、アプリケーション イベント ログを使用してサービスにイベントを続行するように指示します。 サービスの名前は、ログの<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>。</xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>として使用します。       アプリケーション ログではなく、カスタム イベント ログに情報を報告、AutoLog 設定`false`とコマンドの処理メソッド内の指示に書き込み<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>適切なログを送信する</xref:System.ServiceProcess.ServiceBase.OnStop%2A></xref:System.ServiceProcess.ServiceBase.OnPause%2A></xref:System.ServiceProcess.ServiceBase.OnContinue%2A>      > [!NOTE] ><xref:System.ServiceProcess.ServiceBase.ServiceName%2A>ランダウン イベント ログのソース文字列設定する必要が、サービスがイベント ログに書き込みを試みる前に、</xref:System.ServiceProcess.ServiceBase.ServiceName%2A> ソース名を設定する前に、イベント ログにアクセスしようとしています。 には、例外がスローされます。"
  syntax:
    content: public bool AutoLog { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>イベント ログに情報を報告するそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceProcess.ServiceBase.AutoLog*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  id: CanHandlePowerEvent
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanHandlePowerEvent
  nameWithType: ServiceBase.CanHandlePowerEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはサービスがコンピューターの電源状態の変更の通知を処理できるかどうかを示す値を設定します。"
  remarks: "ときに、コンピューターの電源状態の変更では、サービス コントロール マネージャー (SCM) を確認、サービスが CanHandlePowerEvent の値を使用して電源イベント コマンドを受け入れるかどうか。       CanHandlePowerEvent 場合`true`、コマンドは、サービスに渡されると<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>定義されている場合、メソッドが呼び出されます</xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>。 場合<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>は実装されていません SCM が空の基底クラスを通じた電源イベントを処理、派生クラスで<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName>メソッド</xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName></xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>。"
  syntax:
    content: public bool CanHandlePowerEvent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>サービス処理に変更が示されているコンピューターの電源状態、 <xref href=&quot;System.ServiceProcess.PowerBroadcastStatus&quot;> </xref>クラス、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceProcess.ServiceBase.CanHandlePowerEvent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このプロパティは、サービスが開始された後に変更します。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  id: CanHandleSessionChangeEvent
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanHandleSessionChangeEvent
  nameWithType: ServiceBase.CanHandleSessionChangeEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはサービスで、ターミナル サーバー セッションから受信したセッションの変更イベントを処理できるかどうかを示す値を設定します。"
  syntax:
    content: public bool CanHandleSessionChangeEvent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>サービスは、ターミナル サーバー セッションの変更イベントを処理できる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このプロパティは、サービスが開始された後に変更します。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue
  id: CanPauseAndContinue
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanPauseAndContinue
  nameWithType: ServiceBase.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceBase.CanPauseAndContinue
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはサービスの一時停止および再開するかどうかを示す値を設定します。"
  remarks: "サービスのコンス トラクターでは、CanPauseAndContinue プロパティの値を設定します。       サービスが一時停止しているときに、それが何を停止します。 (いずれかのサービス コントロール マネージャーを使用またはプログラムによって)、サービスを続行すると<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>を実行します</xref:System.ServiceProcess.ServiceBase.OnContinue%2A>。       サービスを一時停止要求を送信すると、システム リソースを節約できます。 一時停止は、すべてのシステム リソースを解放できないことがありますが、停止します。 <xref:System.ServiceProcess.ServiceBase.OnPause%2A><xref:System.ServiceProcess.ServiceBase.OnContinue%2A><xref:System.ServiceProcess.ServiceBase.OnStop%2A>して<xref:System.ServiceProcess.ServiceBase.OnStart%2A>。</xref:System.ServiceProcess.ServiceBase.OnStart%2A></xref:System.ServiceProcess.ServiceBase.OnStop%2A>よりも少ない処理を実行する多くの場合、実装</xref:System.ServiceProcess.ServiceBase.OnContinue%2A></xref:System.ServiceProcess.ServiceBase.OnPause%2A>       CanPauseAndContinue が場合`true`、オーバーライド<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>サービス コントロール マネージャー (SCM) は、サービスに、一時停止または続行要求を通過するときに発生する処理を指定します</xref:System.ServiceProcess.ServiceBase.OnContinue%2A></xref:System.ServiceProcess.ServiceBase.OnPause%2A>。 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A><xref:System.ServiceProcess.ServiceBase.OnPause%2A>。</xref:System.ServiceProcess.ServiceBase.OnPause%2A>処理を元に戻すに実装する必要があります。</xref:System.ServiceProcess.ServiceBase.OnContinue%2A>       CanPauseAndContinue 場合`false`SCM は一時停止を通過しません、またはサービスにため続行を要求、<xref:System.ServiceProcess.ServiceBase.OnPause%2A>と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>実装されている場合でも、メソッドは呼び出されません</xref:System.ServiceProcess.ServiceBase.OnContinue%2A></xref:System.ServiceProcess.ServiceBase.OnPause%2A>。 SCM で、`Pause`と`Continue`コントロールを無効化は、CanPauseAndContinue`false`です。"
  syntax:
    content: public bool CanPauseAndContinue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、サービスを一時停止できます。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceProcess.ServiceBase.CanPauseAndContinue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは既に開始されています。 サービスが開始されたら、CanPauseAndContinue プロパティを変更できません。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanShutdown
  id: CanShutdown
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanShutdown
  nameWithType: ServiceBase.CanShutdown
  fullName: System.ServiceProcess.ServiceBase.CanShutdown
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはシステムのシャット ダウン時にサービスに通知するかどうかを示す値を設定します。"
  remarks: "CanShutdown 場合`true`サービスは、システムのシャット ダウンするときに通知します。 シャット ダウン時に<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>、派生クラスで実装されている場合、メソッドが呼び出されます</xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>      > [!NOTE] > システムのみの原因には、 <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>; を実行する方法、サービスを呼び出すことができますが、これは推奨されません</xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>。"
  syntax:
    content: public bool CanShutdown { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、システムのシャット ダウン時にサービスに通知する必要があります。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。  既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceProcess.ServiceBase.CanShutdown*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは既に開始されています。 サービスが開始されたら、CanShutdown プロパティを変更できません。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanStop
  id: CanStop
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanStop
  nameWithType: ServiceBase.CanStop
  fullName: System.ServiceProcess.ServiceBase.CanStop
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはが開始された後にサービスを停止できるかどうかを示す値を設定します。"
  remarks: "サービス停止が呼び出されると、サービス コントロール マネージャー (SCM) は、サービスが停止を CanStop の値を使用してコマンドを受け入れるかどうかを確認します。 CanStop の値は、ほとんどのサービス`true`、一部のオペレーティング システム サービスなど、見えないようにユーザーに通知を停止します。       CanStop 場合`true`、Stop コマンドは、サービスに渡されると<xref:System.ServiceProcess.ServiceBase.OnStop%2A>が定義されている場合、メソッドが呼び出されます</xref:System.ServiceProcess.ServiceBase.OnStop%2A>。 場合<xref:System.ServiceProcess.ServiceBase.OnStop%2A>、停止が空の基底クラスを通じてコマンド SCM ハンドル、派生クラスで実装されていません<xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName>メソッド</xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName></xref:System.ServiceProcess.ServiceBase.OnStop%2A>。"
  syntax:
    content: public bool CanStop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>サービスを停止する場合、<xref:System.ServiceProcess.ServiceBase.OnStop*>メソッドが呼び出されますそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceProcess.ServiceBase.OnStop*> 。"
  overload: System.ServiceProcess.ServiceBase.CanStop*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは既に開始されています。 サービスが開始されたら、CanStop プロパティを変更できません。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ServiceBase.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceBase.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "使用したリソース (メモリを除く) の破棄、 <xref href=&quot;System.ServiceProcess.ServiceBase&quot;></xref>です。"
  remarks: "派生クラスで Dispose を呼び出します (これによって内、<xref:System.ServiceProcess.ServiceBase>クラス)、派生クラスの使用が終了したときに</xref:System.ServiceProcess.ServiceBase> Dispose メソッドは、使用不可の状態、派生クラスを残します。 Dispose を呼び出した後は、派生クラスへのすべての参照を解放する必要がありますと<xref:System.ServiceProcess.ServiceBase>が占有されたメモリをガベージ コレクションによって再要求できるようにします</xref:System.ServiceProcess.ServiceBase>。      > [!NOTE] > 常に<xref:System.ServiceProcess.ServiceBase>.</xref:System.ServiceProcess.ServiceBase>から派生したクラスへの参照を解放する前に Dispose の呼び出し それ以外の場合、リソース<xref:System.ServiceProcess.ServiceBase>、派生クラスを使用しているがガベージ コレクションは、オブジェクトのデストラクターを呼び出すまで解放されないためです</xref:System.ServiceProcess.ServiceBase>。       <xref:System.ServiceProcess.ServiceBase.OnStop%2A>内のコードを処理するために実装が多くの場合、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>Dispose の呼び出しと組み合わせた</xref:System.ServiceProcess.ServiceBase.OnPause%2A>。</xref:System.ServiceProcess.ServiceBase.OnStop%2A> これを行うには、派生クラスでを選択する場合を実装する一般的な<xref:System.ServiceProcess.ServiceBase.OnStart%2A>Dispose がリリースされたを割り当てることです</xref:System.ServiceProcess.ServiceBase.OnStart%2A>。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.ServiceProcess.ServiceBase.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.EventLog
  id: EventLog
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: EventLog
  nameWithType: ServiceBase.EventLog
  fullName: System.ServiceProcess.ServiceBase.EventLog
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービス コマンドの呼び出し、開始、停止などの通知、アプリケーション イベント ログに書き込みをする際、イベント ログを取得します。"
  remarks: "コンス トラクターは、イベント ログ プロパティを持つインスタンスを<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>と<xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName>プロパティを設定します</xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName></xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>。 ソースは、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>、サービスのログは、コンピューターのアプリケーション ログおよび</xref:System.ServiceProcess.ServiceBase.ServiceName%2A> これらの値は、自動的に設定し、ログ サービス コマンドの自動記録は変更できません。       ときに<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>は`true`開始、停止、一時停止、続行、およびカスタムのコマンドは、アプリケーション イベント ログに自動的に記録</xref:System.ServiceProcess.ServiceBase.AutoLog%2A> イベント ログ プロパティを使用すると、追加のメッセージをログに書き込むこともできます。 コンポーネントの呼び出し<xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName>この EventLog メンバーを使用します</xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName>。       アプリケーション ログではなく、カスタム イベント ログに情報を報告の設定、<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>に`false`とコマンドの処理メソッド内の指示に書き込み<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>適切なログを送信する</xref:System.ServiceProcess.ServiceBase.OnStop%2A></xref:System.ServiceProcess.ServiceBase.OnPause%2A></xref:System.ServiceProcess.ServiceBase.OnContinue%2A></xref:System.ServiceProcess.ServiceBase.AutoLog%2A>"
  syntax:
    content: public virtual System.Diagnostics.EventLog EventLog { get; }
    return:
      type: System.Diagnostics.EventLog
      description: "<xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>アプリケーション ログにあるソースが登録されているインスタンス。"
  overload: System.ServiceProcess.ServiceBase.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ExitCode
  id: ExitCode
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ExitCode
  nameWithType: ServiceBase.ExitCode
  fullName: System.ServiceProcess.ServiceBase.ExitCode
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはサービスの終了コードを設定します。"
  remarks: "サービス コントロール マネージャーにエラーを示すためにサービスを停止する前に&0; 以外の値に ExitCode プロパティを設定します。"
  syntax:
    content: public int ExitCode { get; set; }
    return:
      type: System.Int32
      description: "サービスの終了コード。"
  overload: System.ServiceProcess.ServiceBase.ExitCode*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.MaxNameLength
  id: MaxNameLength
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: MaxNameLength
  nameWithType: ServiceBase.MaxNameLength
  fullName: System.ServiceProcess.ServiceBase.MaxNameLength
  type: Field
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービス名の最大サイズを示します。"
  remarks: "ServiceName および DisplayName 両方に、サービス クラスでプロパティを設定するときに従う必要がありますをサイズ制限があります。"
  syntax:
    content: public const int MaxNameLength = 80;
    return:
      type: System.Int32
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnContinue
  id: OnContinue
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnContinue()
  nameWithType: ServiceBase.OnContinue()
  fullName: System.ServiceProcess.ServiceBase.OnContinue()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "派生クラスで実装された場合、続行のコマンドが送信されると、サービスにサービス コントロール マネージャー (SCM) によって OnContinue が実行されます。 一時停止された後に正常に機能しているサービスの再開時に実行されるアクションを指定します。"
  remarks: "OnContinue <xref:System.ServiceProcess.ServiceBase.OnPause%2A>。</xref:System.ServiceProcess.ServiceBase.OnPause%2A>へのアプリケーションの応答をミラー化を実装します。 処理は実行されます、OnContinue (いずれかのサービス コンソールを使用またはプログラムによって)、サービスを続行して、サービスが再度アクティブになります。       OnContinue をする必要がオーバーライドされるときに、<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>プロパティは`true`</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>。       場合<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`SCM は一時停止を通過しません、またはサービスにため続行を要求、<xref:System.ServiceProcess.ServiceBase.OnPause%2A>あり実装されている場合でも、OnContinue メソッドを呼び出すことはできません</xref:System.ServiceProcess.ServiceBase.OnPause%2A></xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>。 SCM で、`Pause`と`Continue`コントロールが無効になっているときに<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>。"
  syntax:
    content: protected virtual void OnContinue ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnContinue*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)
  id: OnCustomCommand(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnCustomCommand(Int32)
  nameWithType: ServiceBase.OnCustomCommand(Int32)
  fullName: System.ServiceProcess.ServiceBase.OnCustomCommand(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "派生クラスで実装された場合、サービス コントロール マネージャー (SCM) は、サービスにカスタム コマンドを渡すとき OnCustomCommand を実行します。 指定したパラメーター値を持つコマンドが発生したときに実行されるアクションを指定します。"
  remarks: "OnCustomCommand では、起動、停止、一時停止と継続的なサービス以外の追加の機能を指定することができます。       SCM では、サービスをサポートしているかどうかを確認するカスタム コマンドについては検査しません、`command`でパラメーターに渡されます。 サービスに直接カスタム コマンドを渡します。 サービスで認識されない場合、`command`パラメーター、何もしません。       カスタムのコマンドはによって発生させ、<xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A>内のステートメント、<xref:System.ServiceProcess.ServiceController>コンポーネント</xref:System.ServiceProcess.ServiceController></xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A>。 Switch ステートメントを使用する場合、または.サービスで定義するカスタム コマンドを処理する条件です。       アプリケーションで定義または OnCustomCommand で使用できるカスタム コマンドの唯一の値は 128 ~ 255 の範囲です。 128 未満の整数は、システム予約値に対応します。       場合、<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>プロパティは`true`、他のすべてのコマンドと同様に、カスタムのコマンドは、メソッドの実行が成功または失敗するかどうかを報告するイベント ログにエントリを書き込む</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>。"
  syntax:
    content: protected virtual void OnCustomCommand (int command);
    parameters:
    - id: command
      type: System.Int32
      description: "コマンド メッセージをサービスに送信します。"
  overload: System.ServiceProcess.ServiceBase.OnCustomCommand*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnPause
  id: OnPause
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnPause()
  nameWithType: ServiceBase.OnPause()
  fullName: System.ServiceProcess.ServiceBase.OnPause()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "派生クラスとして実装された場合は、一時停止コマンドが送信されると、サービスにサービス コントロール マネージャー (SCM) によってを実行します。 サービスが一時中断時に実行するアクションを指定します。"
  remarks: "OnPause を使用すると、サービスが一時停止コマンドを受け取るときに発生する処理を指定します。 OnPause をする必要がオーバーライドされるときに、<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>プロパティは`true`</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>。       (いずれかのサービス コンソールを使用またはプログラムによって)、一時停止したサービスを続行すると、<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>処理が実行され、サービスが再度アクティブになります</xref:System.ServiceProcess.ServiceBase.OnContinue%2A>。       一時停止コマンドは、特定のイベントに反応するため、アプリケーションだけを許可します。 OnPause では、定義していないことを行うには、サービスに何も行いません。       サービスを一時停止要求を送信すると、一時停止は、すべてのシステム リソースを解放しない必要があるためにシステム リソースを節約できます。 たとえば、スレッドのスレッドを開いたままでも、許可できますを停止するのではなく、サービスを一時停止、プロセスによって開かれた場合、サービスを継続するには、そのファイルを再割り当てします必要があります。 すべてのシステム リソースを解放する一時停止を定義する場合、Stop コマンドと同様に動作します。       設定<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>に`true`、OnPause をオーバーライドおよび<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>SCM は、サービスに、一時停止または続行要求を通過するときに発生する処理を指定します</xref:System.ServiceProcess.ServiceBase.OnContinue%2A></xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>。 <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>OnPause の処理を元に戻すに実装する必要があります。</xref:System.ServiceProcess.ServiceBase.OnContinue%2A>       場合<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`SCM は渡さないようにして一時停止、または続行サービスへの要求、そのため、OnPause と<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>実装されている場合でも、メソッドは呼び出されません</xref:System.ServiceProcess.ServiceBase.OnContinue%2A></xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>。 SCM で、`Pause`と`Continue`コントロールが無効になっているときに<xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>は`false`</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>。"
  syntax:
    content: protected virtual void OnPause ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnPause*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  id: OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnPowerEvent(PowerBroadcastStatus)
  nameWithType: ServiceBase.OnPowerEvent(PowerBroadcastStatus)
  fullName: System.ServiceProcess.ServiceBase.OnPowerEvent(PowerBroadcastStatus)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "派生クラスとして実装された場合は、コンピューターの電源状態が変更されたときに実行します。 これにより、システムのシャット ダウンと同じではない、中断モードに移行するときに、ラップトップ コンピューターに適用されます。"
  remarks: "OnPowerEvent を使用して、システム イベントに示されているときに発生する処理を指定、<xref:System.ServiceProcess.PowerBroadcastStatus>列挙--などまたはときに発生コンピューター サスペンド モードで配置バッテリ電力を示します</xref:System.ServiceProcess.PowerBroadcastStatus>。       OnPowerEvent をする必要がオーバーライドされるときに、<xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>プロパティは`true`</xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>。"
  syntax:
    content: protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);
    parameters:
    - id: powerStatus
      type: System.ServiceProcess.PowerBroadcastStatus
      description: "A <xref href=&quot;System.ServiceProcess.PowerBroadcastStatus&quot;> </xref>の電源状態に関するシステムからの通知を示すです。"
    return:
      type: System.Boolean
      description: "派生クラスで実装された場合、アプリケーションのニーズは、返される値を決定します。 たとえば場合、 <xref uid=&quot;langword_csharp_QuerySuspend&quot; name=&quot;QuerySuspend&quot; href=&quot;&quot;> </xref>ブロードキャストのステータスは、アプリケーションを返すことによって、クエリを拒否する可能性があります<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceProcess.ServiceBase.OnPowerEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  id: OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnSessionChange(SessionChangeDescription)
  nameWithType: ServiceBase.OnSessionChange(SessionChangeDescription)
  fullName: System.ServiceProcess.ServiceBase.OnSessionChange(SessionChangeDescription)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "ターミナル サーバー セッションからの変更イベントが受信したときに実行します。"
  remarks: "設定する必要があります、<xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>プロパティを`true`このメソッドの実行を有効にします</xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>。"
  syntax:
    content: protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);
    parameters:
    - id: changeDescription
      type: System.ServiceProcess.SessionChangeDescription
      description: "変更の種類を識別する構造体。"
  overload: System.ServiceProcess.ServiceBase.OnSessionChange*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnShutdown
  id: OnShutdown
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnShutdown()
  nameWithType: ServiceBase.OnShutdown()
  fullName: System.ServiceProcess.ServiceBase.OnShutdown()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "派生クラスとして実装された場合は、システムがシャット ダウン中を実行します。 システムがシャット ダウンの直前に何が起きるかを指定します。"
  remarks: "OnShutdown を使用すると、システムのシャット ダウン時に発生する処理を指定します。       このイベントは、コンピューターが電源オフ時ではなく、オペレーティング システムをシャット ダウン時にのみ発生します。       OnShutdown をする必要がオーバーライドされるときに、<xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>プロパティは`true`</xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>。"
  syntax:
    content: protected virtual void OnShutdown ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnShutdown*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnStart(System.String[])
  id: OnStart(System.String[])
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnStart(String[])
  nameWithType: ServiceBase.OnStart(String[])
  fullName: System.ServiceProcess.ServiceBase.OnStart(String[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "派生クラスとして実装された場合は、Start コマンドを送信すると、サービスまたはサービス コントロール マネージャー (SCM) によって、オペレーティング システムを起動すると (自動的に起動するサービス) を実行します。 サービスの開始時に実行されるアクションを指定します。"
  remarks: "Use OnStart to specify the processing that occurs when the service receives a Start command. OnStart is the method in which you specify the behavior of the service. OnStart can take arguments as a way to pass data, but this usage is rare.  \n  \n> [!CAUTION]\n>  Do not use the constructor to perform processing that should be in OnStart. Use OnStart to handle all initialization of your service. The constructor is called when the application's executable runs, not when the service runs. The executable runs before OnStart. When you continue, for example, the constructor is not called again because the SCM already holds the object in memory. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in OnStart, the needed resources would not be created again the second time the service is called.  \n  \n Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode>. In such a situation, OnStart would be called at system startup.  \n  \n OnStart is expected to be overridden in the derived class. For the service to be useful, OnStart and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.  \n  \n Process initialization arguments for the service in the OnStart method, not in the Main method. The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console. The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel. Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<service name>*). You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`."
  syntax:
    content: protected virtual void OnStart (string[] args);
    parameters:
    - id: args
      type: System.String[]
      description: "Start コマンドによって渡されるデータ。"
  overload: System.ServiceProcess.ServiceBase.OnStart*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnStop
  id: OnStop
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnStop()
  nameWithType: ServiceBase.OnStop()
  fullName: System.ServiceProcess.ServiceBase.OnStop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "派生クラスとして実装された場合を停止するコマンドが送信されると、サービスにサービス コントロール マネージャー (SCM) によってを実行します。 実行しているサービスが停止したときに実行するアクションを指定します。"
  remarks: "OnStop を使用すると、サービスを停止するコマンドを受信するときに発生する処理を指定します。       値を使用して、SCM では、Stop コマンドを受信するときに<xref:System.ServiceProcess.ServiceBase.CanStop%2A>サービスが停止コマンドを受け入れるかどうかを確認する</xref:System.ServiceProcess.ServiceBase.CanStop%2A>。 場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>は`true`、Stop コマンドは、サービスに渡され、定義されている場合、OnStop メソッドが呼び出されます</xref:System.ServiceProcess.ServiceBase.CanStop%2A>。 サービスでは、OnStop は実装されていない、SCM は停止コマンドを処理します。       場合<xref:System.ServiceProcess.ServiceBase.CanStop%2A>は`false`、SCM Stop コマンドは無視されます</xref:System.ServiceProcess.ServiceBase.CanStop%2A>。 サービスが渡されない。 Stop コマンドを返し、例外がスローされます。       OnStop は、派生クラスでオーバーライドされると想定されます。 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>OnStop をどちらも、サービス クラスで実装して</xref:System.ServiceProcess.ServiceBase.OnStart%2A>、役に立つにサービス"
  syntax:
    content: protected virtual void OnStop ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnStop*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)
  id: RequestAdditionalTime(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: RequestAdditionalTime(Int32)
  nameWithType: ServiceBase.RequestAdditionalTime(Int32)
  fullName: System.ServiceProcess.ServiceBase.RequestAdditionalTime(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "保留中の操作の時間を追加要求。"
  remarks: "RequestAdditionalTime メソッドを呼び出すものでは、オーバーライドされたによって<xref:System.ServiceProcess.ServiceBase.OnContinue%2A>、 <xref:System.ServiceProcess.ServiceBase.OnPause%2A>、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>、または<xref:System.ServiceProcess.ServiceBase.OnStop%2A>要求をサービス コントロール マネージャー (SCM) が応答するいないと、サービスをマークすることを防ぐために、保留中の操作の時間を追加する方法</xref:System.ServiceProcess.ServiceBase.OnStop%2A></xref:System.ServiceProcess.ServiceBase.OnStart%2A></xref:System.ServiceProcess.ServiceBase.OnPause%2A></xref:System.ServiceProcess.ServiceBase.OnContinue%2A>。  保留中の操作が続行、一時停止、開始または停止がない場合、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException>。"
  syntax:
    content: public void RequestAdditionalTime (int milliseconds);
    parameters:
    - id: milliseconds
      type: System.Int32
      description: "要求時間 (ミリ秒単位)。"
  overload: System.ServiceProcess.ServiceBase.RequestAdditionalTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスが、保留中の状態にない。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)
  id: Run(System.ServiceProcess.ServiceBase)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Run(ServiceBase)
  nameWithType: ServiceBase.Run(ServiceBase)
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービス コントロール マネージャー (SCM) とサービスの実行可能ファイルを登録します。"
  remarks: "このオーバー ロードを呼び出して、`main()`サービス、サービス コントロール マネージャーに、サービスを登録する実行可能ファイルの関数。 サービス コントロール マネージャーがへの呼び出しで結果 Start コマンドを発行実行を呼び出した後、 <xref:System.ServiceProcess.ServiceBase.OnStart%2A>、サービスのメソッド</xref:System.ServiceProcess.ServiceBase.OnStart%2A>。 開始コマンドが実行されるまで、サービスが開始されていません。       実行メソッドとほぼ同じ方法で呼び出す<xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>Windows フォーム アプリケーションです</xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>。       場合<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>は`true`、によって、サービスが指定されている場合、イベント ログにエントリが書き込まれる、`service`パラメーターの開始に失敗します</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>。"
  syntax:
    content: public static void Run (System.ServiceProcess.ServiceBase service);
    parameters:
    - id: service
      type: System.ServiceProcess.ServiceBase
      description: "A <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>サービスを開始することを示します。"
  overload: System.ServiceProcess.ServiceBase.Run*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>service</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])
  id: Run(System.ServiceProcess.ServiceBase[])
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Run(ServiceBase[])
  nameWithType: ServiceBase.Run(ServiceBase[])
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービス コントロール マネージャー (SCM) に複数のサービスの実行可能ファイルを登録します。"
  remarks: "このオーバー ロードを呼び出して、`main()`サービス、サービス コントロール マネージャーに、サービスを登録する実行可能ファイルの関数。 サービス コントロール マネージャーがへの呼び出しが発生する開始コマンドを発行して実行を呼び出した後、<xref:System.ServiceProcess.ServiceBase.OnStart%2A>サービス内のメソッド</xref:System.ServiceProcess.ServiceBase.OnStart%2A>。 Start コマンドが実行されるまで、サービスは開始されません。       実行メソッドとほぼ同じ方法で呼び出す、 <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>Windows フォーム アプリケーションのメソッド</xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>。       場合<xref:System.ServiceProcess.ServiceBase.AutoLog%2A>は`true`配列内のサービスが開始に失敗した場合、イベント ログにエントリが書き込まれます</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>。"
  syntax:
    content: public static void Run (System.ServiceProcess.ServiceBase[] services);
    parameters:
    - id: services
      type: System.ServiceProcess.ServiceBase[]
      description: "サービスを開始することを示す ServiceBase インスタンスの配列。"
  overload: System.ServiceProcess.ServiceBase.Run*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "サービスを開始するが指定されていません。 この配列である可能性があります<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または空です。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ServiceHandle
  id: ServiceHandle
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceHandle
  nameWithType: ServiceBase.ServiceHandle
  fullName: System.ServiceProcess.ServiceBase.ServiceHandle
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービスのサービス コントロールのハンドルを取得します。"
  remarks: "サービス コントロール ハンドルは、サービス コントロール マネージャー (SCM) との通信に使用されます。  ハンドルを使用して、アンマネージを使用して、呼び出し側サービスのサービス コントロール マネージャーの状態情報を更新すること`SetServiceStatus`関数。"
  syntax:
    content: protected IntPtr ServiceHandle { get; }
    return:
      type: System.IntPtr
      description: "<xref:System.IntPtr>サービスのサービス コントロールのハンドルを格納する構造体</xref:System.IntPtr>。"
  overload: System.ServiceProcess.ServiceBase.ServiceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)
  id: ServiceMainCallback(System.Int32,System.IntPtr)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceMainCallback(Int32,IntPtr)
  nameWithType: ServiceBase.ServiceMainCallback(Int32,IntPtr)
  fullName: System.ServiceProcess.ServiceBase.ServiceMainCallback(Int32,IntPtr)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "コマンド ハンドラーを登録し、サービスを開始します。"
  syntax:
    content: public void ServiceMainCallback (int argCount, IntPtr argPointer);
    parameters:
    - id: argCount
      type: System.Int32
      description: "引数の配列の引数の数。"
    - id: argPointer
      type: System.IntPtr
      description: "<xref:System.IntPtr>引数の配列を指す構造体</xref:System.IntPtr>。"
  overload: System.ServiceProcess.ServiceBase.ServiceMainCallback*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceBase.ServiceName
  fullName: System.ServiceProcess.ServiceBase.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはシステム サービスを識別するために使用する短い名前を設定します。"
  remarks: "ServiceName は、サービス コントロール マネージャーに、サービスを識別します。 このプロパティの値は<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName>、対応するインストーラー クラスのプロパティ</xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName>そのサービスに対して記録された名前と同じにする必要があります。 コードでは、サービスのサービス名は、通常設定、`main()`実行可能ファイルの関数。       指定する、ServiceName を使用しても、<xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>に関連付けられている、<xref:System.ServiceProcess.ServiceBase.EventLog%2A>プロパティ</xref:System.ServiceProcess.ServiceBase.EventLog%2A></xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>。 このの<xref:System.ServiceProcess.ServiceBase.EventLog%2A>アプリケーション ログにサービス コマンドの情報を書き込むインスタンスです。</xref:System.ServiceProcess.ServiceBase.EventLog%2A>       サービスがイベント ログに書き込む前に、イベント ログのソース文字列を指定するには、サービス名を設定する必要があります。 スローする例外が発生したソース名を設定する前に、イベント ログにアクセスしようとしています。"
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "サービスの名前。"
  overload: System.ServiceProcess.ServiceBase.ServiceName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは既に開始されています。 サービスが開始後は、ServiceName プロパティを変更することはできません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定した名前が長さ&0; の文字列は、またはよりも長い<xref href=&quot;System.ServiceProcess.ServiceBase.MaxNameLength&quot;> </xref>、または指定した名前には、前方のスラッシュまたは円記号の文字が含まれています。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Stop
  id: Stop
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Stop()
  nameWithType: ServiceBase.Stop()
  fullName: System.ServiceProcess.ServiceBase.Stop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービスの実行を停止します。"
  remarks: "Stop メソッド呼び出しと、停止が保留中を示すためにサービスの状態の設定、<xref:System.ServiceProcess.ServiceBase.OnStop%2A>メソッド</xref:System.ServiceProcess.ServiceBase.OnStop%2A>。  アプリケーションが停止したら、サービスの状態が停止に設定します。 アプリケーションが、ホステッド サービスの場合は、アプリケーション ドメインがアンロードされます。"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.Stop*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ServiceProcess.ServiceBase.#ctor
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceBase()
  nameWithType: ServiceBase.ServiceBase()
  fullName: System.ServiceProcess.ServiceBase.ServiceBase()
- uid: System.ServiceProcess.ServiceBase.AutoLog
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: AutoLog
  nameWithType: ServiceBase.AutoLog
  fullName: System.ServiceProcess.ServiceBase.AutoLog
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandlePowerEvent
  nameWithType: ServiceBase.CanHandlePowerEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandleSessionChangeEvent
  nameWithType: ServiceBase.CanHandleSessionChangeEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceBase.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceBase.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceBase.CanShutdown
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceBase.CanShutdown
  fullName: System.ServiceProcess.ServiceBase.CanShutdown
- uid: System.ServiceProcess.ServiceBase.CanStop
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanStop
  nameWithType: ServiceBase.CanStop
  fullName: System.ServiceProcess.ServiceBase.CanStop
- uid: System.ServiceProcess.ServiceBase.Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ServiceBase.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceBase.Dispose(Boolean)
- uid: System.ServiceProcess.ServiceBase.EventLog
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: EventLog
  nameWithType: ServiceBase.EventLog
  fullName: System.ServiceProcess.ServiceBase.EventLog
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.ServiceProcess.ServiceBase.ExitCode
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ExitCode
  nameWithType: ServiceBase.ExitCode
  fullName: System.ServiceProcess.ServiceBase.ExitCode
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceProcess.ServiceBase.MaxNameLength
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: MaxNameLength
  nameWithType: ServiceBase.MaxNameLength
  fullName: System.ServiceProcess.ServiceBase.MaxNameLength
- uid: System.ServiceProcess.ServiceBase.OnContinue
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnContinue()
  nameWithType: ServiceBase.OnContinue()
  fullName: System.ServiceProcess.ServiceBase.OnContinue()
- uid: System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnCustomCommand(Int32)
  nameWithType: ServiceBase.OnCustomCommand(Int32)
  fullName: System.ServiceProcess.ServiceBase.OnCustomCommand(Int32)
- uid: System.ServiceProcess.ServiceBase.OnPause
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPause()
  nameWithType: ServiceBase.OnPause()
  fullName: System.ServiceProcess.ServiceBase.OnPause()
- uid: System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPowerEvent(PowerBroadcastStatus)
  nameWithType: ServiceBase.OnPowerEvent(PowerBroadcastStatus)
  fullName: System.ServiceProcess.ServiceBase.OnPowerEvent(PowerBroadcastStatus)
- uid: System.ServiceProcess.PowerBroadcastStatus
  parent: System.ServiceProcess
  isExternal: false
  name: PowerBroadcastStatus
  nameWithType: PowerBroadcastStatus
  fullName: System.ServiceProcess.PowerBroadcastStatus
- uid: System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnSessionChange(SessionChangeDescription)
  nameWithType: ServiceBase.OnSessionChange(SessionChangeDescription)
  fullName: System.ServiceProcess.ServiceBase.OnSessionChange(SessionChangeDescription)
- uid: System.ServiceProcess.SessionChangeDescription
  parent: System.ServiceProcess
  isExternal: false
  name: SessionChangeDescription
  nameWithType: SessionChangeDescription
  fullName: System.ServiceProcess.SessionChangeDescription
- uid: System.ServiceProcess.ServiceBase.OnShutdown
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnShutdown()
  nameWithType: ServiceBase.OnShutdown()
  fullName: System.ServiceProcess.ServiceBase.OnShutdown()
- uid: System.ServiceProcess.ServiceBase.OnStart(System.String[])
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStart(String[])
  nameWithType: ServiceBase.OnStart(String[])
  fullName: System.ServiceProcess.ServiceBase.OnStart(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceBase.OnStop
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStop()
  nameWithType: ServiceBase.OnStop()
  fullName: System.ServiceProcess.ServiceBase.OnStop()
- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: RequestAdditionalTime(Int32)
  nameWithType: ServiceBase.RequestAdditionalTime(Int32)
  fullName: System.ServiceProcess.ServiceBase.RequestAdditionalTime(Int32)
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Run(ServiceBase)
  nameWithType: ServiceBase.Run(ServiceBase)
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase)
- uid: System.ServiceProcess.ServiceBase
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceBase
  nameWithType: ServiceBase
  fullName: System.ServiceProcess.ServiceBase
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Run(ServiceBase[])
  nameWithType: ServiceBase.Run(ServiceBase[])
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase[])
- uid: System.ServiceProcess.ServiceBase[]
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceBase
  nameWithType: ServiceBase
  fullName: System.ServiceProcess.ServiceBase[]
  spec.csharp:
  - uid: System.ServiceProcess.ServiceBase
    name: ServiceBase
    nameWithType: ServiceBase
    fullName: ServiceBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceBase.ServiceHandle
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceBase.ServiceHandle
  fullName: System.ServiceProcess.ServiceBase.ServiceHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceMainCallback(Int32,IntPtr)
  nameWithType: ServiceBase.ServiceMainCallback(Int32,IntPtr)
  fullName: System.ServiceProcess.ServiceBase.ServiceMainCallback(Int32,IntPtr)
- uid: System.ServiceProcess.ServiceBase.ServiceName
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceName
  nameWithType: ServiceBase.ServiceName
  fullName: System.ServiceProcess.ServiceBase.ServiceName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceBase.Stop
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Stop()
  nameWithType: ServiceBase.Stop()
  fullName: System.ServiceProcess.ServiceBase.Stop()
- uid: System.ServiceProcess.ServiceBase.#ctor*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceBase
  nameWithType: ServiceBase.ServiceBase
- uid: System.ServiceProcess.ServiceBase.AutoLog*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: AutoLog
  nameWithType: ServiceBase.AutoLog
- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandlePowerEvent
  nameWithType: ServiceBase.CanHandlePowerEvent
- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandleSessionChangeEvent
  nameWithType: ServiceBase.CanHandleSessionChangeEvent
- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceBase.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceBase.CanShutdown*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceBase.CanShutdown
- uid: System.ServiceProcess.ServiceBase.CanStop*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanStop
  nameWithType: ServiceBase.CanStop
- uid: System.ServiceProcess.ServiceBase.Dispose*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Dispose
  nameWithType: ServiceBase.Dispose
- uid: System.ServiceProcess.ServiceBase.EventLog*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: EventLog
  nameWithType: ServiceBase.EventLog
- uid: System.ServiceProcess.ServiceBase.ExitCode*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ExitCode
  nameWithType: ServiceBase.ExitCode
- uid: System.ServiceProcess.ServiceBase.OnContinue*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnContinue
  nameWithType: ServiceBase.OnContinue
- uid: System.ServiceProcess.ServiceBase.OnCustomCommand*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnCustomCommand
  nameWithType: ServiceBase.OnCustomCommand
- uid: System.ServiceProcess.ServiceBase.OnPause*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPause
  nameWithType: ServiceBase.OnPause
- uid: System.ServiceProcess.ServiceBase.OnPowerEvent*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPowerEvent
  nameWithType: ServiceBase.OnPowerEvent
- uid: System.ServiceProcess.ServiceBase.OnSessionChange*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnSessionChange
  nameWithType: ServiceBase.OnSessionChange
- uid: System.ServiceProcess.ServiceBase.OnShutdown*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnShutdown
  nameWithType: ServiceBase.OnShutdown
- uid: System.ServiceProcess.ServiceBase.OnStart*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStart
  nameWithType: ServiceBase.OnStart
- uid: System.ServiceProcess.ServiceBase.OnStop*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStop
  nameWithType: ServiceBase.OnStop
- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: RequestAdditionalTime
  nameWithType: ServiceBase.RequestAdditionalTime
- uid: System.ServiceProcess.ServiceBase.Run*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Run
  nameWithType: ServiceBase.Run
- uid: System.ServiceProcess.ServiceBase.ServiceHandle*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceBase.ServiceHandle
- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceMainCallback
  nameWithType: ServiceBase.ServiceMainCallback
- uid: System.ServiceProcess.ServiceBase.ServiceName*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceName
  nameWithType: ServiceBase.ServiceName
- uid: System.ServiceProcess.ServiceBase.Stop*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Stop
  nameWithType: ServiceBase.Stop
