### YamlMime:ManagedReference
items:
- uid: System.UnhandledExceptionEventArgs
  id: UnhandledExceptionEventArgs
  children:
  - System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  - System.UnhandledExceptionEventArgs.ExceptionObject
  - System.UnhandledExceptionEventArgs.IsTerminating
  langs:
  - csharp
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs
  fullName: System.UnhandledExceptionEventArgs
  type: Class
  summary: "任意のアプリケーション ドメインで処理されない例外があるときに発生するイベントのデータを提供します。"
  remarks: "UnhandledExceptionEventArgs は、例外オブジェクトと、共通言語ランタイムが終了しているかどうかを示すフラグへのアクセスを提供します。 渡されるパラメーターの&1; つ、UnhandledExceptionEventArgs は<xref:System.UnhandledExceptionEventHandler>の<xref:System.AppDomain.UnhandledException?displayProperty=fullName>イベント</xref:System.AppDomain.UnhandledException?displayProperty=fullName></xref:System.UnhandledExceptionEventHandler>。       イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベント](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class UnhandledExceptionEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  id: '#ctor(System.Object,System.Boolean)'
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.UnhandledExceptionEventArgs&quot;> </xref>クラス例外オブジェクトと共通言語ランタイムの終了フラグを使用します。"
  syntax:
    content: public UnhandledExceptionEventArgs (object exception, bool isTerminating);
    parameters:
    - id: exception
      type: System.Object
      description: "この例外は処理されません。"
    - id: isTerminating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、ランタイムが終了中です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.UnhandledExceptionEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  id: ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "未処理の例外オブジェクトを取得します。"
  remarks: "このプロパティは、型<xref:System.Object>はなく<xref:System.Exception>。</xref:System.Exception>から派生した&1; つ</xref:System.Object>のオブジェクトを返します 共通言語仕様では、すべての例外型は<xref:System.Exception><xref:System.Exception>。</xref:System.Exception>から派生していないオブジェクトでの例外をスローするメソッドに対して可能であれば</xref:System.Exception>から派生する必要がありますが この例外を使用するには、次を行うことができます:-適用、<xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>属性が、<xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName>の値`true`イベント ハンドラーを含むアセンブリにします</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName></xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>。 派生していないすべての例外をラップこの、<xref:System.Exception>クラス内で、<xref:System.Runtime.CompilerServices.RuntimeWrappedException>オブジェクト</xref:System.Runtime.CompilerServices.RuntimeWrappedException></xref:System.Exception>。 できますし、安全にキャスト (c#) または変換する (Visual Basic) のこのプロパティによって返されるオブジェクト、<xref:System.Exception>オブジェクト、およびから元の例外オブジェクトを取得、<xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName>プロパティ</xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName></xref:System.Exception>。 C# および Visual Basic のコンパイラなど、一部のコンパイラが、この属性を自動的に適用されるに注意してください。      -このプロパティによって返されるオブジェクトのキャスト、<xref:System.Exception>オブジェクト</xref:System.Exception>。"
  example:
  - "The following example demonstrates the <xref:System.AppDomain.UnhandledException> event. It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a **try/catch** block. The second is unhandled and invokes the `MyHandle` routine before the application terminates.  \n  \n [!code-cs[AppDomain_UnhandledException#1](~/add/codesnippet/csharp/p-system.unhandledexcept_1.cs)]\n [!code-vb[AppDomain_UnhandledException#1](~/add/codesnippet/visualbasic/p-system.unhandledexcept_1.vb)]\n [!code-cpp[AppDomain_UnhandledException#1](~/add/codesnippet/cpp/p-system.unhandledexcept_1.cpp)]"
  syntax:
    content: public object ExceptionObject { get; }
    return:
      type: System.Object
      description: "未処理の例外オブジェクト。"
  overload: System.UnhandledExceptionEventArgs.ExceptionObject*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  id: IsTerminating
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "共通言語ランタイムが終了中かどうかを示します。"
  remarks: "以降、.NET Framework version 2.0 では、このプロパティを返します`true`ほとんどのアプリケーション互換性フラグをバージョン 1.0 および 1.1 の動作に戻すには使用しない場合、ハンドルされない例外です。 理由は、通常はそのアプリケーションの終了結果、続行するか、スレッド プールのスレッドを含め、スレッドでハンドルされない例外最もが許可されていることです。 これで、ランタイムが終了しない、ケースのリストを含む詳細については、次を参照してください。[マネージ スレッドの例外](~/add/includes/ajax-current-ext-md.md)です。      ## バージョン情報が .NET Framework のバージョン 1.0 および 1.1 に、次が適用されます。 このプロパティを返します`true`例外は、受信したものの、アプリケーションのメイン スレッドで処理されないときです。 このプロパティも返します`true`アンマネージ スレッドがマネージ コードの実行、および未処理の例外を受信する場合。 最後に、このプロパティを返します`false`スレッド プールのスレッドとマネージ スレッドがバージョン 1.0 および 1.1 は、このようなスレッドでハンドルされない例外をキャッチし、それらを無視するために、アプリケーションが作成されます。"
  syntax:
    content: public bool IsTerminating { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、ランタイムが終了中です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.UnhandledExceptionEventArgs.IsTerminating*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
- uid: System.UnhandledExceptionEventArgs.#ctor*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs
- uid: System.UnhandledExceptionEventArgs.ExceptionObject*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
