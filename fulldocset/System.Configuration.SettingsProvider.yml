### YamlMime:ManagedReference
items:
- uid: System.Configuration.SettingsProvider
  id: SettingsProvider
  children:
  - System.Configuration.SettingsProvider.#ctor
  - System.Configuration.SettingsProvider.ApplicationName
  - System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  - System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  langs:
  - csharp
  name: SettingsProvider
  nameWithType: SettingsProvider
  fullName: System.Configuration.SettingsProvider
  type: Class
  summary: "アプリケーション設定アーキテクチャでカスタム設定プロバイダーを派生させるための基本クラスとして機能します。"
  remarks: "設定プロバイダーでは、アプリケーション設定アーキテクチャで使用される構成データを格納するためのメカニズムを定義します。 .NET Framework には、1 つの既定の設定プロバイダー <xref:System.Configuration.LocalFileSettingsProvider>、ローカル ファイル システムに構成データを格納します</xref:System.Configuration.LocalFileSettingsProvider>。 ただし、抽象 SettingsProvider クラスから派生することで、代替ストレージ メカニズムを作成できます。 ラッパー クラスを使用するプロバイダーは、クラス ラッパー <xref:System.Configuration.SettingsProviderAttribute>。</xref:System.Configuration.SettingsProviderAttribute>によって決まります この属性が指定されていない場合、既定値、<xref:System.Configuration.LocalFileSettingsProvider>を使用します</xref:System.Configuration.LocalFileSettingsProvider>。       少なくとも、カスタム設定プロバイダーを作成するときに、このクラスの&3; つのメソッドの実装を提供する必要があります: <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A> <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> <xref:System.Configuration.SettingsProvider.ApplicationName%2A></xref:System.Configuration.SettingsProvider.ApplicationName%2A> </xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> 、</xref:System.Configuration.SettingsProvider.GetPropertyValues%2A> 。       クライアント アプリケーションの機能を追加できますより標準化されたカスタムのプロバイダーにも実装することによって、<xref:System.Configuration.IApplicationSettingsProvider>インターフェイス</xref:System.Configuration.IApplicationSettingsProvider>。 このインターフェイスのメソッドをミラー化、<xref:System.Configuration.ApplicationSettingsBase>クラスは、主にバージョン管理サポートを有効します</xref:System.Configuration.ApplicationSettingsBase>。       通常、単一インスタンスの記憶域リソースの競合を回避するように設定プロバイダーを設計する必要があります。 プロバイダーでは、1 つのアプリケーション ドメイン内の複数のラッパー インスタンスとは別のドメインに複数のアプリケーションから同時に、呼び出すことができるため、スレッド セーフである必要がありますもあります。       少なくとも、設定プロバイダーが&3; つの属性を認識する必要があります:<xref:System.Configuration.ApplicationScopedSettingAttribute>、 <xref:System.Configuration.UserScopedSettingAttribute>、 <xref:System.Configuration.DefaultSettingValueAttribute></xref:System.Configuration.DefaultSettingValueAttribute> </xref:System.Configuration.UserScopedSettingAttribute> </xref:System.Configuration.ApplicationScopedSettingAttribute> 。 アプリケーションの設定を適用できる属性の完全な一覧については、次を参照してください。[アプリケーション設定の属性](~/add/includes/ajax-current-ext-md.md)です。 カスタム設定プロバイダーは、次のように設定のプロパティに適用される属性を解決する必要があります: 1。  場合は、プロバイダーは、属性が含まれる要求を満たすことができます、明らかにその要求を実行します。      2.  場合は、プロバイダーは、要求を満たすことはできません、それを無視します。      3.  2 つ以上のプロパティが競合する場合たとえば、両方で<xref:System.Configuration.ApplicationScopedSettingAttribute><xref:System.Configuration.UserScopedSettingAttribute>、プロバイダーが<xref:System.Configuration.ConfigurationException>。</xref:System.Configuration.ConfigurationException>をスローする必要があります以外の場合は</xref:System.Configuration.UserScopedSettingAttribute>、</xref:System.Configuration.ApplicationScopedSettingAttribute>装飾されているプロパティ"
  syntax:
    content: 'public abstract class SettingsProvider : System.Configuration.Provider.ProviderBase'
  inheritance:
  - System.Object
  - System.Configuration.Provider.ProviderBase
  implements: []
  inheritedMembers:
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.#ctor
  id: '#ctor'
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: SettingsProvider()
  nameWithType: SettingsProvider.SettingsProvider()
  fullName: System.Configuration.SettingsProvider.SettingsProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.Configuration
  summary: "インスタンスを初期化、 <xref href=&quot;System.Configuration.SettingsProvider&quot;> </xref>クラスです。"
  remarks: "これは、この既定値に、この抽象クラスのプロテクト コンス トラクターです。 派生したカスタム設定プロバイダーがあるために、明示的なコンス トラクターを提供する必要はありません、<xref:System.Configuration.Provider.ProviderBase.Initialize%2A>メソッドは、通常、すべての初期化を実行します</xref:System.Configuration.Provider.ProviderBase.Initialize%2A>。       クライアント コード通常は直接インスタンス化できません設定プロバイダー。代わりに、特定の設定のプロパティの設定プロバイダーを検索する次の手順を使用する: 1。  <xref:System.ComponentModel.Component.GetService%2A>現在の<xref:System.ComponentModel.Component>または<xref:System.ComponentModel.ISite>現在<xref:System.Configuration.ISettingsProviderService>。</xref:System.Configuration.ISettingsProviderService>への参照を返す</xref:System.ComponentModel.ISite></xref:System.ComponentModel.Component>メソッド</xref:System.ComponentModel.Component.GetService%2A>を呼び出す      2.  呼び出す、<xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A>のメソッド、<xref:System.Configuration.ISettingsProviderService>設定プロバイダーを返すには、最初の手順で取得します</xref:System.Configuration.ISettingsProviderService></xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A>。"
  syntax:
    content: protected SettingsProvider ();
    parameters: []
  overload: System.Configuration.SettingsProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.ApplicationName
  id: ApplicationName
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
  fullName: System.Configuration.SettingsProvider.ApplicationName
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "取得または現在実行中のアプリケーションの名前を設定します。"
  remarks: "ApplicationName と<xref:System.Configuration.Provider.ProviderBase.Name%2A>プロパティは、同様に別のアプリケーションのプロパティの名前付きの設定を区別するために役立ちます</xref:System.Configuration.Provider.ProviderBase.Name%2A>。"
  syntax:
    content: public abstract string ApplicationName { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>を含まない完全パスまたは拡張子、たとえば、アプリケーションの短縮名を格納している`SimpleAppSettings`</xref:System.String>。"
  overload: System.Configuration.SettingsProvider.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  id: GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "指定したアプリケーション インスタンスと設定のプロパティ グループのプロパティの値の設定のコレクションを返します。"
  remarks: "特別な設定を処理する GetPropertyValues メソッドを実装する必要がありますでマークした<xref:System.Configuration.SpecialSettingAttribute>と、アプリケーションとユーザーの設定を調整します</xref:System.Configuration.SpecialSettingAttribute>。"
  syntax:
    content: public abstract System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection collection);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref>現在使用されているアプリケーションを記述します。"
    - id: collection
      type: System.Configuration.SettingsPropertyCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyCollection&quot;> </xref>取得するのには、値が設定プロパティのグループを含むです。"
    return:
      type: System.Configuration.SettingsPropertyValueCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;> </xref>指定した設定のプロパティ グループの値を格納します。"
  overload: System.Configuration.SettingsProvider.GetPropertyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  id: SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "指定した設定のグループのプロパティの値を設定します。"
  remarks: "<xref:System.Configuration.ApplicationSettingsBase>含まれています、<xref:System.Configuration.ApplicationSettingsBase.Save%2A>すべてその設定のプロパティの値を保持すると呼ばれるメソッド</xref:System.Configuration.ApplicationSettingsBase.Save%2A>。</xref:System.Configuration.ApplicationSettingsBase> このメソッドは、すべての設定プロバイダーがその設定のプロパティに関連付けられているし、各 SetPropertyValues メソッドを呼び出します列挙<xref:System.Configuration.SettingsProvider>、実際のシリアル化操作を実行します</xref:System.Configuration.SettingsProvider>。       セキュリティを考慮して SetPropertyValues メソッドを実装する必要があります: - コードは、アプリケーション設定の更新を許可するかを完全に信頼できるのみです。 部分的に信頼されたコードは、ユーザー アプリケーションの設定のみを更新できる必要があります。 通常、信頼できないコードはアプリケーション設定の更新には許可されません。      -部分的に信頼されたアプリケーションでは、リソースの攻撃を防ぐ使用状況クォータを考慮してください。"
  syntax:
    content: public abstract void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection collection);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref>現在のアプリケーションの使用状況を記述します。"
    - id: collection
      type: System.Configuration.SettingsPropertyValueCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;> </xref>を設定するプロパティの設定のグループを表すです。"
  overload: System.Configuration.SettingsProvider.SetPropertyValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: System.Configuration.Provider.ProviderBase
- uid: System.Configuration.SettingsProvider.#ctor
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SettingsProvider()
  nameWithType: SettingsProvider.SettingsProvider()
  fullName: System.Configuration.SettingsProvider.SettingsProvider()
- uid: System.Configuration.SettingsProvider.ApplicationName
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
  fullName: System.Configuration.SettingsProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
- uid: System.Configuration.SettingsPropertyValueCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyValueCollection
  nameWithType: SettingsPropertyValueCollection
  fullName: System.Configuration.SettingsPropertyValueCollection
- uid: System.Configuration.SettingsContext
  parent: System.Configuration
  isExternal: false
  name: SettingsContext
  nameWithType: SettingsContext
  fullName: System.Configuration.SettingsContext
- uid: System.Configuration.SettingsPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyCollection
  nameWithType: SettingsPropertyCollection
  fullName: System.Configuration.SettingsPropertyCollection
- uid: System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
- uid: System.Configuration.SettingsProvider.#ctor*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SettingsProvider
  nameWithType: SettingsProvider.SettingsProvider
- uid: System.Configuration.SettingsProvider.ApplicationName*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
- uid: System.Configuration.SettingsProvider.GetPropertyValues*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: GetPropertyValues
  nameWithType: SettingsProvider.GetPropertyValues
- uid: System.Configuration.SettingsProvider.SetPropertyValues*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SetPropertyValues
  nameWithType: SettingsProvider.SetPropertyValues
