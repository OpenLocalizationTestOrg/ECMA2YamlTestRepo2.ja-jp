### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RijndaelManagedTransform
  id: RijndaelManagedTransform
  children:
  - System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  - System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  - System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  - System.Security.Cryptography.RijndaelManagedTransform.Clear
  - System.Security.Cryptography.RijndaelManagedTransform.Dispose
  - System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  - System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  - System.Security.Cryptography.RijndaelManagedTransform.Reset
  - System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: RijndaelManagedTransform
  nameWithType: RijndaelManagedTransform
  fullName: System.Security.Cryptography.RijndaelManagedTransform
  type: Class
  summary: "Rijndael アルゴリズムを使用してデータを暗号変換を実行します。 このクラスは継承できません。"
  remarks: "> [!NOTE]> このクラスの使用は推奨されません。 使用することをお勧め<xref:System.Security.Cryptography.RijndaelManaged>で、<xref:System.Security.Cryptography.CryptoStream>オブジェクト</xref:System.Security.Cryptography.CryptoStream></xref:System.Security.Cryptography.RijndaelManaged>。 <xref:System.Security.Cryptography.CryptoStream>オブジェクトは RijndaelManagedTransform を直接使用するときに発生するパディングの問題を処理します</xref:System.Security.Cryptography.CryptoStream>。 例については、<xref:System.Security.Cryptography.RijndaelManaged>クラス</xref:System.Security.Cryptography.RijndaelManaged>を参照してください。       両方の<xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A>と<xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A>メソッドは、現在のキーの情報に初期化される RijndaelManagedTransform クラスのインスタンスを返す<xref:System.Security.Cryptography.RijndaelManaged>オブジェクト</xref:System.Security.Cryptography.RijndaelManaged></xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A></xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A>。  暗号化または Rijndael アルゴリズムを使用してデータを復号化は、これらのメソッドによって返される RijndaelManagedTransform オブジェクトを渡す、<xref:System.Security.Cryptography.CryptoStream>オブジェクト</xref:System.Security.Cryptography.CryptoStream>。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class RijndaelManagedTransform : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: RijndaelManagedTransform.BlockSizeValue
  fullName: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "ブロック サイズを取得します。"
  syntax:
    content: public int BlockSizeValue { get; }
    return:
      type: System.Int32
      description: "データ ブロックのサイズ (バイト単位)。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: RijndaelManagedTransform.CanReuseTransform
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在の変換を再利用できるかどうかを示す値を取得します。"
  syntax:
    content: public bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "複数のブロックを変換できるかどうかを示す値を取得します。"
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>複数のブロックを変換できる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear
  id: Clear
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: Clear()
  nameWithType: RijndaelManagedTransform.Clear()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Cryptography.RijndaelManagedTransform&quot;> </xref>クラスです。"
  remarks: "このメソッドは、単純な<xref:System.IDisposable.Dispose%2A?displayProperty=fullName>クラス</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       呼び出す`Dispose`により、リソースで使用される、<xref:System.Security.Cryptography.RijndaelManagedTransform>を他の目的を再割り当てする</xref:System.Security.Cryptography.RijndaelManagedTransform>。 詳細については`Dispose`を参照してください[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.RijndaelManagedTransform.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose
  id: Dispose
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: Dispose()
  nameWithType: RijndaelManagedTransform.Dispose()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在のインスタンスによって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Cryptography.RijndaelManagedTransform&quot;> </xref>クラスです。"
  remarks: "呼び出す`Dispose` <xref:System.Security.Cryptography.RijndaelManagedTransform>.</xref:System.Security.Cryptography.RijndaelManagedTransform>の使用が終了したときに `Dispose`メソッドによって、<xref:System.Security.Cryptography.RijndaelManagedTransform>使用不可の状態</xref:System.Security.Cryptography.RijndaelManagedTransform>。 呼び出した後`Dispose`へのすべての参照を解放する必要があります、<xref:System.Security.Cryptography.RijndaelManagedTransform>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Security.Cryptography.RijndaelManagedTransform>占有されていた</xref:System.Security.Cryptography.RijndaelManagedTransform></xref:System.Security.Cryptography.RijndaelManagedTransform>。       詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 常に呼び出し`Dispose`<xref:System.Security.Cryptography.RijndaelManagedTransform></xref:System.Security.Cryptography.RijndaelManagedTransform>の最後の参照を解放する前に。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Security.Cryptography.RijndaelManagedTransform>オブジェクトの`Finalize`メソッド</xref:System.Security.Cryptography.RijndaelManagedTransform>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.RijndaelManagedTransform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: RijndaelManagedTransform.InputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "入力ブロック サイズを取得します。"
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "入力データのサイズ (バイト単位) をブロックします。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: RijndaelManagedTransform.OutputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "出力ブロック サイズを取得します。"
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "出力データ ブロックのサイズ (バイト単位)。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset
  id: Reset
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: Reset()
  nameWithType: RijndaelManagedTransform.Reset()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "内部状態をリセット<xref href=&quot;System.Security.Cryptography.RijndaelManagedTransform&quot;></xref>を別の暗号化または復号化を行うには再度使用できるようにします。"
  remarks: "Reset メソッドは、 <xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A>。</xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A>を呼び出すときに自動的に呼び出されます。 たとえば、暗号化された入力データはガベージされ、暗号化を解除できないときに、Reset メソッドは呼び出されません。 ここでは、例外がスローされ、リセットは呼び出されません。 手動でこのケースで Reset メソッドを呼び出すことができます。"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Cryptography.RijndaelManagedTransform.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "入力バイト配列の指定した領域の変換を計算し、その結果の変換を出力バイト配列の指定した領域にコピーします。"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "操作の実行を入力します。"
    - id: inputOffset
      type: System.Int32
      description: "データの使用を開始する入力バイト配列へのオフセット。"
    - id: inputCount
      type: System.Int32
      description: "データとして使用する入力バイト配列内のバイト数。"
    - id: outputBuffer
      type: System.Byte[]
      description: "データを書き込む出力します。"
    - id: outputOffset
      type: System.Int32
      description: "データの書き込みを開始する出力バイト配列へのオフセット。"
    return:
      type: System.Int32
      description: "書き込まれたバイト数。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>outputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "入力バッファーの長さは、入力のオフセット、および入力の数の合計よりも小さいです。       - または - の値、 <code> inputCount </code>パラメーターが 0 未満です。       - または - の値、 <code> inputCount </code>パラメーターがの長さより大きい、 <code> inputBuffer </code>パラメーター。       - または - の長さ、 <code> inputCount </code>パラメーターは入力ブロック サイズで均等に devisable ではありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "値、 <code> inputOffset </code>パラメーターが負の値。"
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したバイト配列の指定した領域の変換を計算します。"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "操作の実行を入力します。"
    - id: inputOffset
      type: System.Int32
      description: "データの使用を開始するバイト配列へのオフセット。"
    - id: inputCount
      type: System.Int32
      description: "データとして使用するバイト配列内のバイト数。"
    return:
      type: System.Byte[]
      description: "計算に変換します。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "値、 <code> inputCount </code>パラメーターが 0 未満です。       - または - の値、 <code> inputCount </code>パラメーターがの長さよりもそれより大きく<code> inputBuffer </code>パラメーター。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "値、 <code> inputOffset </code>パラメーターが負の値。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "長さ、 <code> inputCount </code>パラメーターは入力ブロック サイズで均等に devisable ではありません。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: BlockSizeValue
  nameWithType: RijndaelManagedTransform.BlockSizeValue
  fullName: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: RijndaelManagedTransform.CanReuseTransform
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Clear()
  nameWithType: RijndaelManagedTransform.Clear()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Clear()
- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Dispose()
  nameWithType: RijndaelManagedTransform.Dispose()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Dispose()
- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: RijndaelManagedTransform.InputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: RijndaelManagedTransform.OutputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Reset()
  nameWithType: RijndaelManagedTransform.Reset()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Reset()
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: BlockSizeValue
  nameWithType: RijndaelManagedTransform.BlockSizeValue
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: RijndaelManagedTransform.CanReuseTransform
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Clear
  nameWithType: RijndaelManagedTransform.Clear
- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Dispose
  nameWithType: RijndaelManagedTransform.Dispose
- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: RijndaelManagedTransform.InputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: RijndaelManagedTransform.OutputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Reset
  nameWithType: RijndaelManagedTransform.Reset
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformBlock
  nameWithType: RijndaelManagedTransform.TransformBlock
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: RijndaelManagedTransform.TransformFinalBlock
