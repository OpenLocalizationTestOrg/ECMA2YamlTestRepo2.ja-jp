### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.DateAndTime
  id: DateAndTime
  children:
  - Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)
  - Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)
  - Microsoft.VisualBasic.DateAndTime.DateString
  - Microsoft.VisualBasic.DateAndTime.DateValue(System.String)
  - Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)
  - Microsoft.VisualBasic.DateAndTime.Now
  - Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.TimeOfDay
  - Microsoft.VisualBasic.DateAndTime.Timer
  - Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)
  - Microsoft.VisualBasic.DateAndTime.TimeString
  - Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)
  - Microsoft.VisualBasic.DateAndTime.Today
  - Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  - Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  - Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)
  langs:
  - csharp
  name: DateAndTime
  nameWithType: DateAndTime
  fullName: Microsoft.VisualBasic.DateAndTime
  type: Class
  summary: "<xref uid=&quot;langword_csharp_DateAndTime&quot; name=&quot;DateAndTime&quot; href=&quot;&quot;> </xref>モジュールには、日付と時刻の演算で使用されるプロパティ、プロシージャが含まれています。"
  remarks: "このモジュールは、Visual Basic 言語のキーワードとランタイム ライブラリ メンバーを現在の日付または時刻の取得、日付計算の実行、日付または時刻を返す、日付または時刻を設定または処理の期間を時間をサポートします。"
  example:
  - "This example uses the `Today` property to return the current system date.  \n  \n```  \nDim thisDate As Date  \nthisDate = Today   \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class DateAndTime
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  id: DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateAdd(DateInterval,Double,DateTime)
  nameWithType: DateAndTime.DateAdd(DateInterval,Double,DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(DateInterval,Double,DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>指定の時間間隔が追加された日付と時刻の値を含む値です。"
  remarks: "使用することができます、`DateAdd`関数を追加または特定の日付の指定した時間間隔を減算します。 たとえば、今すぐ今日または時 45 分前に、から 30 日の日付を計算できます。       日数を加算する`DateValue`、使用することができます`DateInterval.Day`、 `DateInterval.DayOfYear`、または`DateInterval.Weekday`です。 これらとして扱われますと同じのため`DayOfYear`と`Weekday`意味のある時間間隔ではありません。       `DateAdd`関数が無効な日付を返すことはありません。 必要に応じて、その年の月の最終日を結果として得られる日付の日の部分は下方調整されます。 次の例は、1 月 31 日に 1 か月を追加:```vb#   Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)   ```この例では`DateAdd`返します`#2/28/1995#`ではなく、`#2/31/1995#`です。 場合`DateValue`は`#1/31/1996#`、返します`#2/29/1996#`1996 が閏年であるのためです。      > [!NOTE]  >   `DateAdd`から現在の予定表の設定を使用して、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>のプロパティ、<xref:System.Globalization.CultureInfo>クラス内で、<xref:System.Globalization>名前空間</xref:System.Globalization></xref:System.Globalization.CultureInfo></xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 既定値<xref:System.Globalization.CultureInfo.CurrentCulture%2A>値によって決まります**コントロール パネルの **設定</xref:System.Globalization.CultureInfo.CurrentCulture%2A>。       すべて`Date`値でサポートされて、<xref:System.DateTime>構造体、そのメソッドを与える時間間隔を加算する追加のオプション</xref:System.DateTime>。 たとえば、小数の日付をミリ秒単位に丸められますを追加することができます、`Date`次のように変数: ```vb#   Dim NextTime As Date = Now        &quot; Current date and time.   NextTime = NextTime.AddDays(3.4)  &quot; Increment by 3 2/5 days.   ``` 、`Interval`引数は、次の設定のいずれかを持つことができます。      |列挙値 |文字列 |追加する時間間隔の単位 |  |-----------------------|------------|----------------------------------|  |`DateInterval.Day`|d|1 日です。整数値に切り捨てられます |  |`DateInterval.DayOfYear`|y|1 日です。整数値に切り捨てられます |  |`DateInterval.Hour`|h|1 時間です。ミリ秒単位に丸められます |  |`DateInterval.Minute`|n|1 分です。ミリ秒単位に丸められます |  |`DateInterval.Month`|m|月です。整数値に切り捨てられます |  |`DateInterval.Quarter`|q|四半期です。整数値に切り捨てられます |  |`DateInterval.Second`|s|秒です。ミリ秒単位に丸められます |  |`DateInterval.Weekday`|w|1 日です。整数値に切り捨てられます |  |`DateInterval.WeekOfYear`|ww|1 週間です。整数値に切り捨てられます |  |`DateInterval.Year`|yyyy|年。整数値に切り捨てられます |"
  example:
  - "This example takes a date and, using the `DateAdd` function, displays a corresponding date a specified number of months in the future.  \n  \n [!code-vb[VbVbalrFunctions#25](~/add/codesnippet/visualbasic/1a306149-706d-46fd-9b1a-_1.vb)]"
  syntax:
    content: public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);
    parameters:
    - id: Interval
      type: Microsoft.VisualBasic.DateInterval
      description: "必須。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列挙値または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>を追加する時間間隔を表す式。"
    - id: Number
      type: System.Double
      description: "必須。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. 追加する間隔の数を表す浮動小数点式です。 `Number`(将来の日付/時刻値を取得) を正または負の値 (過去の日付/時刻値を取得) を指定できます。 含めることができます、小数部パートとき`Interval`時間、分、または秒を指定します。 その他の値の`Interval`小数の一部`Number`は無視されます。"
    - id: DateValue
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 間隔を追加するときの日時を表す式を指定します。 `DateValue`呼び出し元のプログラムでそれ自体は変更されません。"
    return:
      type: System.DateTime
      description: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>指定の時間間隔が追加された日付と時刻の値を含む値です。"
  overload: Microsoft.VisualBasic.DateAndTime.DateAdd*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>強制変換は<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>正しくありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "計算された日付は、1、または年 12 月 31 日 23時 59分: 59 より後の年 1 月 1 日 00時 00分: 00 以前 9999 です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)
  id: DateAdd(System.String,System.Double,System.Object)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateAdd(String,Double,Object)
  nameWithType: DateAndTime.DateAdd(String,Double,Object)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(String,Double,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>指定の時間間隔が追加された日付と時刻の値を含む値です。"
  remarks: "使用することができます、`DateAdd`関数を追加または特定の日付の指定した時間間隔を減算します。 たとえば、今すぐ今日または時 45 分前に、から 30 日の日付を計算できます。       日数を加算する`DateValue`、使用することができます`DateInterval.Day`、 `DateInterval.DayOfYear`、または`DateInterval.Weekday`です。 これらとして扱われますと同じのため`DayOfYear`と`Weekday`意味のある時間間隔ではありません。       `DateAdd`関数が無効な日付を返すことはありません。 必要に応じて、その年の月の最終日を結果として得られる日付の日の部分は下方調整されます。 次の例は、1 月 31 日に 1 か月を追加:```vb#   Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)   ```この例では`DateAdd`返します`#2/28/1995#`ではなく、`#2/31/1995#`です。 場合`DateValue`は`#1/31/1996#`、返します`#2/29/1996#`1996 が閏年であるのためです。      > [!NOTE]  >   `DateAdd`から現在の予定表の設定を使用して、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>のプロパティ、<xref:System.Globalization.CultureInfo>クラス内で、<xref:System.Globalization>名前空間</xref:System.Globalization></xref:System.Globalization.CultureInfo></xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 既定値<xref:System.Globalization.CultureInfo.CurrentCulture%2A>値によって決まります**コントロール パネルの **設定</xref:System.Globalization.CultureInfo.CurrentCulture%2A>。       すべて`Date`値でサポートされて、<xref:System.DateTime>構造体、そのメソッドを与える時間間隔を加算する追加のオプション</xref:System.DateTime>。 たとえば、小数の日付をミリ秒単位に丸められますを追加することができます、`Date`次のように変数: ```vb#   Dim NextTime As Date = Now        &quot; Current date and time.   NextTime = NextTime.AddDays(3.4)  &quot; Increment by 3 2/5 days.   ``` 、`Interval`引数は、次の設定のいずれかを持つことができます。      |列挙値 |文字列 |追加する時間間隔の単位 |  |-----------------------|------------|----------------------------------|  |`DateInterval.Day`|d|1 日です。整数値に切り捨てられます |  |`DateInterval.DayOfYear`|y|1 日です。整数値に切り捨てられます |  |`DateInterval.Hour`|h|1 時間です。ミリ秒単位に丸められます |  |`DateInterval.Minute`|n|1 分です。ミリ秒単位に丸められます |  |`DateInterval.Month`|m|月です。整数値に切り捨てられます |  |`DateInterval.Quarter`|q|四半期です。整数値に切り捨てられます |  |`DateInterval.Second`|s|秒です。ミリ秒単位に丸められます |  |`DateInterval.Weekday`|w|1 日です。整数値に切り捨てられます |  |`DateInterval.WeekOfYear`|ww|1 週間です。整数値に切り捨てられます |  |`DateInterval.Year`|yyyy|年。整数値に切り捨てられます |"
  example:
  - "This example takes a date and, using the `DateAdd` function, displays a corresponding date a specified number of months in the future.  \n  \n [!code-vb[VbVbalrFunctions#25](~/add/codesnippet/visualbasic/8ee426fa-d573-45a5-a0f5-_1.vb)]"
  syntax:
    content: public static DateTime DateAdd (string Interval, double Number, object DateValue);
    parameters:
    - id: Interval
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列挙値または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>を追加する時間間隔を表す式。"
    - id: Number
      type: System.Double
      description: "必須。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. 追加する間隔の数を表す浮動小数点式です。 `Number`(将来の日付/時刻値を取得) を正または負の値 (過去の日付/時刻値を取得) を指定できます。 含めることができます、小数部パートとき`Interval`時間、分、または秒を指定します。 その他の値の`Interval`小数の一部`Number`は無視されます。"
    - id: DateValue
      type: System.Object
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 間隔を追加するときの日時を表す式を指定します。 `DateValue`呼び出し元のプログラムでそれ自体は変更されません。"
    return:
      type: System.DateTime
      description: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>指定の時間間隔が追加された日付と時刻の値を含む値です。"
  overload: Microsoft.VisualBasic.DateAndTime.DateAdd*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>強制変換は<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>正しくありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "計算された日付は、1、または年 12 月 31 日 23時 59分: 59 より後の年 1 月 1 日 00時 00分: 00 以前 9999 です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;> </xref>&2; つまでの時間間隔の数を指定する値<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>値。"
  remarks: "使用することができます、`DateDiff`指定された時間間隔の数が&2; つの日付/時刻値の間に存在するかを判断する関数。 たとえば、使用する場合があります`DateDiff`を&2; つの日付または現在および年の終わりまでの週の数までの日数の数を計算します。      ## 動作 -**パラメーターの扱いです。** `DateDiff`値を減算`Date1`の値から`Date2`の違いを生成するためにします。 どちらの値は、呼び出し元のプログラムで変更されます。      -**値を返します。** `Date1`と`Date2`は、`Date`データ型、日付と時刻の値が格納精度は 100 ナノ秒タイマー刻みシステム タイマーです。 ただし、`DateDiff`として時間間隔の数を常に返します、`Long`値。           場合`Date1`以降の日付とよりも時間を表します`Date2`、`DateDiff`負の数を返します。      -**日間の期間。** 場合`Interval`に設定されている`DateInterval.DayOfYear`、扱われますと同じ`DateInterval.Day`ので、`DayOfYear`の時間間隔の意味のある単体ではありません。      -**週の間隔。** 場合`Interval`に設定されている`DateInterval.WeekOfYear`、戻り値が含まれている週の最初の日までの週の数を表す`Date1`とを含む週の最初の日`Date2`です。 次の例は、異なる結果がどのように生成`DateInterval.Weekday`です。           [!code-vb[VbVbalrFunctions 60](~/add/codesnippet/visualbasic/e9b06095-1039-4b68-96e4-_1.vb) ]前の例で`DateDiff`に 0 を返します`wD`であるため、2 つの日付の差未満である 7 日間に 1 を返します`wY`それぞれのカレンダーの週の最初の日の間で 7 日間の相違があるためです。      -**間隔を長くします。** 場合`Interval`に設定されている`DateInterval.Year`、純粋、年の部分からの戻り値が計算される`Date1`と`Date2`です。 同様に、戻り値`DateInterval.Month`は、引数の年と月の部分から純粋な計算`DateInterval.Quarter`2 つの日付を含む四半期からです。           たとえば、次の年の 1 月 1 日に 12 月 31 日を比較するときに`DateDiff`に 1 を返します`DateInterval.Year`、 `DateInterval.Quarter`、または`DateInterval.Month`多くて 1 日が経過した場合でも、します。           持つ複数時代 (年号)、日本語などのカルチャ、`DateDiff`違いは、次の&2; つまたは複数の時代 (年号) にまたがる場合に、メソッドで年の差分が返されません。 によって返される値の差を計算する代わりに、<xref:System.DateTime.Year%2A>プロパティ、次の例のように: `date2.Year - date1.Year`</xref:System.DateTime.Year%2A> 。      -**その他の間隔。** すべて`Date`値でサポートされて、<xref:System.DateTime>構造体、そのメソッドを与える時間間隔を検索する追加のオプション</xref:System.DateTime>。 たとえば、使用することができます、`Subtract`メソッドのオーバー ロードされたフォームのいずれかの:<xref:System.DateTime.Subtract%2A?displayProperty=fullName>減算、<xref:System.TimeSpan>から、`Date`を返す別の変数`Date`値、および<xref:System.DateTime.Subtract%2A?displayProperty=fullName>減算、 `Date` <xref:System.TimeSpan>.</xref:System.TimeSpan>に返される値</xref:System.DateTime.Subtract%2A?displayProperty=fullName></xref:System.TimeSpan></xref:System.DateTime.Subtract%2A?displayProperty=fullName> 次の例のようににかかる時間をミリ秒単位を調べるには処理時間の計測することができます。           [!code-vb[VbVbalrFunctions&#61;](~/add/codesnippet/visualbasic/e9b06095-1039-4b68-96e4-_2.vb) ] 、`Interval`引数は、次の設定のいずれかを持つことができます。      |列挙値 |文字列値 |時間間隔の単位 |  |-----------------------|------------------|-----------------------------|  |`DateInterval.Day`|&quot;d&quot;|1 日 |  |`DateInterval.DayOfYear`|&quot;y&quot;|1 日 |  |`DateInterval.Hour`|&quot;h&quot;|時間 |  |`DateInterval.Minute`|&quot;n&quot;|分 |  |`DateInterval.Month`|&quot;m&quot;|月 |  |`DateInterval.Quarter`|&quot;q&quot;|四半期 |  |`DateInterval.Second`|&quot;s&quot;|2 番目 |  |`DateInterval.Weekday`|&quot;w&quot;|週 |  |`DateInterval.WeekOfYear`|&quot;ww&quot;|カレンダーの週 |  |`DateInterval.Year`|&quot;yyyy&quot;|年 |      `DayOfWeek`引数は、次の設定のいずれかを持つことができます。      |列挙値 |値 |説明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の日 |  |`FirstDayOfWeek.Sunday`|1|日曜日 (既定値) |  |`FirstDayOfWeek.Monday`|2|月曜日 (iso 8601 の標準的な 3.17) |  |`FirstDayOfWeek.Tuesday`|3|火曜日 |  |`FirstDayOfWeek.Wednesday`|4|水曜日 |  |`FirstDayOfWeek.Thursday`|5|木曜日 |  |`FirstDayOfWeek.Friday`|6|金曜日 |  |`FirstDayOfWeek.Saturday`|7|土曜日 |      `WeekOfYear`引数は、次の設定のいずれかを持つことができます。      |列挙値 |値 |説明 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|システムの設定で指定された年の最初の週 |  |`FirstWeekOfYear.Jan1`|1|週を月 1 日 (既定値) |  |`FirstWeekOfYear.FirstFourDays`|2|(ISO 8601 の標準的な 3.17 に準拠している) 新しい年には、少なくとも 4 日間にある最初の週 |  |`FirstWeekOfYear.FirstFullWeek`|3|新しい年の第 1 週 |"
  example:
  - "This example uses the `DateDiff` function to display the number of days between a given date and today.  \n  \n [!code-vb[VbVbalrFunctions#26](~/add/codesnippet/visualbasic/e9b06095-1039-4b68-96e4-_3.vb)]"
  syntax:
    content: public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: Microsoft.VisualBasic.DateInterval
      description: "必須。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列挙値または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>間の差異の単位として使用する時間間隔を表す式`Date1`と`Date2`です。"
    - id: Date1
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 最初の日付/時刻値の計算に使用する場合します。"
    - id: Date2
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 計算で使用する&2; 番目の日付/時刻値。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "任意。 選択した値、 <xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;> </xref>週の最初の日を指定する列挙です。 指定しない場合、 <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>を使用します。"
    - id: WeekOfYear
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "任意。 選択した値、 <xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;> </xref>年の最初の週を指定する列挙です。 指定しない場合、 <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>を使用します。"
    return:
      type: System.Int64
      description: "返します、 <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;> </xref>&2; つまでの時間間隔の数を指定する値<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>値。"
  overload: Microsoft.VisualBasic.DateAndTime.DateDiff*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Date1</code>、 <code>Date2</code>、または<code>DayofWeek</code>が範囲外です。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>Date1</code>または<code>Date2</code>に無効な型です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;> </xref>&2; つまでの時間間隔の数を指定する値<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>値。"
  remarks: "使用することができます、`DateDiff`指定された時間間隔の数が&2; つの日付/時刻値の間に存在するかを判断する関数。 たとえば、使用する場合があります`DateDiff`を&2; つの日付または現在および年の終わりまでの週の数までの日数の数を計算します。      ## 動作 -**パラメーターの扱いです。** `DateDiff`値を減算`Date1`の値から`Date2`の違いを生成するためにします。 どちらの値は、呼び出し元のプログラムで変更されます。      -**値を返します。** `Date1`と`Date2`は、`Date`データ型、日付と時刻の値が格納精度は 100 ナノ秒タイマー刻みシステム タイマーです。 ただし、`DateDiff`として時間間隔の数を常に返します、`Long`値。           場合`Date1`以降の日付とよりも時間を表します`Date2`、`DateDiff`負の数を返します。      -**日間の期間。** 場合`Interval`に設定されている`DateInterval.DayOfYear`、扱われますと同じ`DateInterval.Day`ので、`DayOfYear`の時間間隔の意味のある単体ではありません。      -**週の間隔。** 場合`Interval`に設定されている`DateInterval.WeekOfYear`、戻り値が含まれている週の最初の日までの週の数を表す`Date1`とを含む週の最初の日`Date2`です。 次の例は、異なる結果がどのように生成`DateInterval.Weekday`です。           [!code-vb[VbVbalrFunctions 60](~/add/codesnippet/visualbasic/46a9da0a-21fc-441c-a532-_1.vb) ]前の例で`DateDiff`に 0 を返します`wD`であるため、2 つの日付の差未満である 7 日間に 1 を返します`wY`それぞれのカレンダーの週の最初の日の間で 7 日間の相違があるためです。      -**間隔を長くします。** 場合`Interval`に設定されている`DateInterval.Year`、純粋、年の部分からの戻り値が計算される`Date1`と`Date2`です。 同様に、戻り値`DateInterval.Month`は、引数の年と月の部分から純粋な計算`DateInterval.Quarter`2 つの日付を含む四半期からです。           たとえば、次の年の 1 月 1 日に 12 月 31 日を比較するときに`DateDiff`に 1 を返します`DateInterval.Year`、 `DateInterval.Quarter`、または`DateInterval.Month`多くて 1 日が経過した場合でも、します。           持つ複数時代 (年号)、日本語などのカルチャ、`DateDiff`違いは、次の&2; つまたは複数の時代 (年号) にまたがる場合に、メソッドで年の差分が返されません。 によって返される値の差を計算する代わりに、<xref:System.DateTime.Year%2A>プロパティ、次の例のように: `date2.Year - date1.Year`</xref:System.DateTime.Year%2A> 。      -**その他の間隔。** すべて`Date`値でサポートされて、<xref:System.DateTime>構造体、そのメソッドを与える時間間隔を検索する追加のオプション</xref:System.DateTime>。 たとえば、使用することができます、`Subtract`メソッドのオーバー ロードされたフォームのいずれかの:<xref:System.DateTime.Subtract%2A?displayProperty=fullName>減算、<xref:System.TimeSpan>から、`Date`を返す別の変数`Date`値、および<xref:System.DateTime.Subtract%2A?displayProperty=fullName>減算、 `Date` <xref:System.TimeSpan>.</xref:System.TimeSpan>に返される値</xref:System.DateTime.Subtract%2A?displayProperty=fullName></xref:System.TimeSpan></xref:System.DateTime.Subtract%2A?displayProperty=fullName> 次の例のようににかかる時間をミリ秒単位を調べるには処理時間の計測することができます。           [!code-vb[VbVbalrFunctions&#61;](~/add/codesnippet/visualbasic/46a9da0a-21fc-441c-a532-_2.vb) ] 、`Interval`引数は、次の設定のいずれかを持つことができます。      |列挙値 |文字列値 |時間間隔の単位 |  |-----------------------|------------------|-----------------------------|  |`DateInterval.Day`|&quot;d&quot;|1 日 |  |`DateInterval.DayOfYear`|&quot;y&quot;|1 日 |  |`DateInterval.Hour`|&quot;h&quot;|時間 |  |`DateInterval.Minute`|&quot;n&quot;|分 |  |`DateInterval.Month`|&quot;m&quot;|月 |  |`DateInterval.Quarter`|&quot;q&quot;|四半期 |  |`DateInterval.Second`|&quot;s&quot;|2 番目 |  |`DateInterval.Weekday`|&quot;w&quot;|週 |  |`DateInterval.WeekOfYear`|&quot;ww&quot;|カレンダーの週 |  |`DateInterval.Year`|&quot;yyyy&quot;|年 |      `DayOfWeek`引数は、次の設定のいずれかを持つことができます。      |列挙値 |値 |説明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の日 |  |`FirstDayOfWeek.Sunday`|1|日曜日 (既定値) |  |`FirstDayOfWeek.Monday`|2|月曜日 (iso 8601 の標準的な 3.17) |  |`FirstDayOfWeek.Tuesday`|3|火曜日 |  |`FirstDayOfWeek.Wednesday`|4|水曜日 |  |`FirstDayOfWeek.Thursday`|5|木曜日 |  |`FirstDayOfWeek.Friday`|6|金曜日 |  |`FirstDayOfWeek.Saturday`|7|土曜日 |      `WeekOfYear`引数は、次の設定のいずれかを持つことができます。      |列挙値 |値 |説明 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|システムの設定で指定された年の最初の週 |  |`FirstWeekOfYear.Jan1`|1|週を月 1 日 (既定値) |  |`FirstWeekOfYear.FirstFourDays`|2|(ISO 8601 の標準的な 3.17 に準拠している) 新しい年には、少なくとも 4 日間にある最初の週 |  |`FirstWeekOfYear.FirstFullWeek`|3|新しい年の第 1 週 |"
  example:
  - "This example uses the `DateDiff` function to display the number of days between a given date and today.  \n  \n [!code-vb[VbVbalrFunctions#26](~/add/codesnippet/visualbasic/46a9da0a-21fc-441c-a532-_3.vb)]"
  syntax:
    content: public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列挙値または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>間の差異の単位として使用する時間間隔を表す式`Date1`と`Date2`です。"
    - id: Date1
      type: System.Object
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 最初の日付/時刻値の計算に使用する場合します。"
    - id: Date2
      type: System.Object
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 計算で使用する&2; 番目の日付/時刻値。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "任意。 選択した値、 <xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;> </xref>週の最初の日を指定する列挙です。 指定しない場合、 <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>を使用します。"
    - id: WeekOfYear
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "任意。 選択した値、 <xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;> </xref>年の最初の週を指定する列挙です。 指定しない場合、 <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>を使用します。"
    return:
      type: System.Int64
      description: "返します、 <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;> </xref>&2; つまでの時間間隔の数を指定する値<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>値。"
  overload: Microsoft.VisualBasic.DateAndTime.DateDiff*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Date1</code>、 <code>Date2</code>、または<code>DayofWeek</code>が範囲外です。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>Date1</code>または<code>Date2</code>に無効な型です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>値の指定したコンポーネントを含む、指定された<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>値。"
  remarks: "使用することができます、`DatePart`を日付/時刻値を評価し、特定のコンポーネントを返す関数。 たとえば、使用する場合があります`DatePart`週や現在の時刻の日を計算します。       選択した場合`DateInterval.Weekday`の`Interval`引数、戻り値の値と矛盾して、`FirstDayOfWeek`列挙します。 選択した場合`DateInterval.WeekOfYear`、`DatePart`を使用して、<xref:System.Globalization.Calendar>と<xref:System.Globalization.CultureInfo>のクラス、 <xref:System.Globalization>、現在の設定を決定する名前空間</xref:System.Globalization></xref:System.Globalization.CultureInfo></xref:System.Globalization.Calendar>。       `FirstDayOfWeekValue`引数を使用する計算に影響を与える、`DateInterval.Weekday`と`DateInterval.WeekOfYear``Interval`設定します。 `FirstWeekOfYearValue`引数を指定する計算に影響を与える`DateInterval.WeekOfYear`の`Interval`します。       すべて`Date`値でサポートされて、<xref:System.DateTime>構造体、そのメソッドを使う日付/時刻の部分を取得する追加のオプション</xref:System.DateTime>。 たとえばの全体の日付の値を取得できます、 `Date` 、時刻値で、変数が次のように、午前&0; 時に設定: ```vb#   Dim CurrDatTim As Date = Now   &quot; Current date and time.   Dim LastMidnight As Date = CurrDatTim.Date   &quot; At midnight.   ``` 、`Interval`引数は、次の設定のいずれかを持つことができます。      |列挙値 |文字列 |返す日付/時刻値の一部 |  |-----------------------|------------|----------------------------------------|  |`DateInterval.Day`|d|(1 ~ 31) の月の日 |  |`DateInterval.DayOfYear`|y|年 (1 ~ 366) の日 |  |`DateInterval.Hour`|h|時間 |  |`DateInterval.Minute`|n|分 |  |`DateInterval.Month`|m|月 |  |`DateInterval.Quarter`|q|四半期 |  |`DateInterval.Second`|s|2 番目 |  |`DateInterval.Weekday`|w|曜日 (1 ~ 7) |  |`DateInterval.WeekOfYear`|ww|週 (1 ~ 53) |  |`DateInterval.Year`|yyyy|年 |      `FirstDayOfWeekValue`引数は、次の設定のいずれかを持つことができます。      |列挙値 |値 |説明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の日 |  |`FirstDayOfWeek.Sunday`|1|日曜日 (既定値) |  |`FirstDayOfWeek.Monday`|2|月曜日 (iso 8601 の標準的な 3.17) |  |`FirstDayOfWeek.Tuesday`|3|火曜日 |  |`FirstDayOfWeek.Wednesday`|4|水曜日 |  |`FirstDayOfWeek.Thursday`|5|木曜日 |  |`FirstDayOfWeek.Friday`|6|金曜日 |  |`FirstDayOfWeek.Saturday`|7|土曜日 |      `FirstWeekOfYearValue`引数は、次の設定のいずれかを持つことができます。      |列挙値 |値 |説明 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|システムの設定で指定された年の最初の週 |  |`FirstWeekOfYear.Jan1`|1|週を月 1 日 (既定値) |  |`FirstWeekOfYear.FirstFourDays`|2|(ISO 8601 の標準的な 3.17 に準拠している) 新しい年には、少なくとも 4 日間にある最初の週 |  |`FirstWeekOfYear.FirstFullWeek`|3|新しい年の第 1 週 |"
  example:
  - "This example takes a date and, using the `DatePart` function, displays the quarter of the year in which it occurs.  \n  \n [!code-vb[VbVbalrFunctions#27](~/add/codesnippet/visualbasic/982d49dd-7819-40e1-9b19-_1.vb)]"
  syntax:
    content: public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: Microsoft.VisualBasic.DateInterval
      description: "必須。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列挙値または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>を取得する日付/時刻値の一部を表す式。"
    - id: DateValue
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>評価する値。"
    - id: FirstDayOfWeekValue
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "任意。 選択した値、 <xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;> </xref>週の最初の日を指定する列挙です。 指定しない場合、 <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>を使用します。"
    - id: FirstWeekOfYearValue
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "任意。 選択した値、 <xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;> </xref>年の最初の週を指定する列挙です。 指定しない場合、 <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>を使用します。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>値の指定したコンポーネントを含む、指定された<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>値。"
  overload: Microsoft.VisualBasic.DateAndTime.DatePart*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>正しくありません。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>強制変換は<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>値の指定したコンポーネントを含む、指定された<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>値。"
  remarks: "使用することができます、`DatePart`を日付/時刻値を評価し、特定のコンポーネントを返す関数。 たとえば、使用する場合があります`DatePart`週や現在の時刻の日を計算します。       選択した場合`DateInterval.Weekday`の`Interval`引数、戻り値の値と矛盾して、`FirstDayOfWeek`列挙します。 選択した場合`DateInterval.WeekOfYear`、`DatePart`を使用して、<xref:System.Globalization.Calendar>と<xref:System.Globalization.CultureInfo>のクラス、 <xref:System.Globalization>、現在の設定を決定する名前空間</xref:System.Globalization></xref:System.Globalization.CultureInfo></xref:System.Globalization.Calendar>。       `FirstDayOfWeekValue`引数を使用する計算に影響を与える、`DateInterval.Weekday`と`DateInterval.WeekOfYear``Interval`設定します。 `FirstWeekOfYearValue`引数を指定する計算に影響を与える`DateInterval.WeekOfYear`の`Interval`します。       すべて`Date`値でサポートされて、<xref:System.DateTime>構造体、そのメソッドを使う日付/時刻の部分を取得する追加のオプション</xref:System.DateTime>。 たとえばの全体の日付の値を取得できます、 `Date` 、時刻値で、変数が次のように、午前&0; 時に設定: ```vb#   Dim CurrDatTim As Date = Now   &quot; Current date and time.   Dim LastMidnight As Date = CurrDatTim.Date   &quot; At midnight.   ``` 、`Interval`引数は、次の設定のいずれかを持つことができます。      |列挙値 |文字列 |返す日付/時刻値の一部 |  |-----------------------|------------|----------------------------------------|  |`DateInterval.Day`|d|(1 ~ 31) の月の日 |  |`DateInterval.DayOfYear`|y|年 (1 ~ 366) の日 |  |`DateInterval.Hour`|h|時間 |  |`DateInterval.Minute`|n|分 |  |`DateInterval.Month`|m|月 |  |`DateInterval.Quarter`|q|四半期 |  |`DateInterval.Second`|s|2 番目 |  |`DateInterval.Weekday`|w|曜日 (1 ~ 7) |  |`DateInterval.WeekOfYear`|ww|週 (1 ~ 53) |  |`DateInterval.Year`|yyyy|年 |      `FirstDayOfWeekValue`引数は、次の設定のいずれかを持つことができます。      |列挙値 |値 |説明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の日 |  |`FirstDayOfWeek.Sunday`|1|日曜日 (既定値) |  |`FirstDayOfWeek.Monday`|2|月曜日 (iso 8601 の標準的な 3.17) |  |`FirstDayOfWeek.Tuesday`|3|火曜日 |  |`FirstDayOfWeek.Wednesday`|4|水曜日 |  |`FirstDayOfWeek.Thursday`|5|木曜日 |  |`FirstDayOfWeek.Friday`|6|金曜日 |  |`FirstDayOfWeek.Saturday`|7|土曜日 |      `FirstWeekOfYearValue`引数は、次の設定のいずれかを持つことができます。      |列挙値 |値 |説明 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|システムの設定で指定された年の最初の週 |  |`FirstWeekOfYear.Jan1`|1|週を月 1 日 (既定値) |  |`FirstWeekOfYear.FirstFourDays`|2|(ISO 8601 の標準的な 3.17 に準拠している) 新しい年には、少なくとも 4 日間にある最初の週 |  |`FirstWeekOfYear.FirstFullWeek`|3|新しい年の第 1 週 |"
  example:
  - "This example takes a date and, using the `DatePart` function, displays the quarter of the year in which it occurs.  \n  \n [!code-vb[VbVbalrFunctions#27](~/add/codesnippet/visualbasic/682455c0-1619-4c4c-8238-_1.vb)]"
  syntax:
    content: public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>列挙値または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>を取得する日付/時刻値の一部を表す式。"
    - id: DateValue
      type: System.Object
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>評価する値。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "任意。 選択した値、 <xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;> </xref>週の最初の日を指定する列挙です。 指定しない場合、 <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>を使用します。"
    - id: WeekOfYear
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "任意。 選択した値、 <xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;> </xref>年の最初の週を指定する列挙です。 指定しない場合、 <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>を使用します。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>値の指定したコンポーネントを含む、指定された<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>値。"
  overload: Microsoft.VisualBasic.DateAndTime.DatePart*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>正しくありません。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>強制変換は<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)
  id: DateSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.DateSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.DateSerial(Int32,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>午前&0; 時に設定された時刻情報と共に指定した年、月、および日を表す値 (00:&00;:00)。"
  remarks: "Windows 98 または Windows 2000 では、下 2 桁の年、`Year`引数は、コンピューターのユーザー定義の設定に基づいて解釈されます。 既定の設定では 0 から 29 までの値は 2000 – 2029 年、30 ~ 99 の値が 1930 – 1999 年として解釈されます。 他のすべての`Year`引数を使用して、4 桁の年、たとえば 1924 です。       以前のバージョンの Windows には、前述の既定値に基づいて&2; 桁の年が解釈されます。 関数が正しい値を返すことを確認、4 桁を使用して`Year`です。       次の例で負の場合、0、および引数の正の値。 ここでは、`DateSerial`関数が返される、 `Date` 10 年前です。 現在の年に、3 月の最初の日の前日を表す 10 年 2 月の最終日つまり、します。      ```vb#   Dim EndFeb As Date = DateSerial(-10, 3, 0)   ```いずれか`Month`または`Day`の通常の範囲を超えています、単位に適切に適用されます。 たとえば、32 日を指定すると、評価されますと 1 の値に応じて、次の 4 つの日に 1 か月として`Month`です。 場合`Year`が 9999 より大きい場合、または-2,147, 483,648 ~ 2,147, 483,647、範囲外のいずれかの引数が、<xref:System.ArgumentException>エラーが発生します</xref:System.ArgumentException>。 3 つの引数で指定された日付よりも前か 1 の場合、または年 12 月 31 日 23時 59分: 59 より後の年 1 月 1 日 00時 00分: 00 ~ 9999 場合、<xref:System.ArgumentOutOfRangeException>エラーが発生します</xref:System.ArgumentOutOfRangeException>。       `Date`データ型には、時間のコンポーネントが含まれます。 `DateSerial`すべて設定する 0 にこれらのため、返される値が計算された日の開始を表します。       すべて`Date`値でサポートされて、<xref:System.DateTime>構造体、そのメソッドを使う追加のオプションをまとめることで、`Date`値</xref:System.DateTime>。 オーバー ロードされたいずれかを使用するなど、<xref:System.DateTime.%23ctor%2A>を設定するコンス トラクター、`Date`コンポーネントの目的の組み合わせを使用して変数</xref:System.DateTime.%23ctor%2A>。 次の例のセット`NewDateTime`1978 月 6日 10 分の 1 秒 8:30 の前に。```vb#   Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)   ```"
  example:
  - "This example uses the `DateSerial` function to return the date for the specified year, month, and day.  \n  \n [!code-vb[VbVbalrFunctions#28](~/add/codesnippet/visualbasic/2c6c2f83-8b90-492d-bf33-_1.vb)]"
  syntax:
    content: public static DateTime DateSerial (int Year, int Month, int Day);
    parameters:
    - id: Year
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>1 から 9999 式です。 ただし、この範囲を下回る値も指定します。 場合`Year`0 ~ 99 は、以下の「解説」セクションで説明したよう 1930 と 2029 間するものとして解釈されます。 場合`Year`1 未満の値は、現在の年から引かれます。"
    - id: Month
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>1 ~ 12 の式です。 ただし、この範囲外の値も指定します。 値`Month`は 1 つずつ offset し、計算された年の月に適用します。 つまり、(`Month` - 1) は月 1 日に追加します。 年は、必要な場合に再計算されます。 次の結果がこの影響を示しています。 場合`Month`1 に設定されて、結果は、計算された年の月です。       場合`Month`が 0 の結果は前の年の 12 月場合、です。       場合`Month`-1 で、前の年の&11; 月になります。       場合`Month`13 は、次の年の 1 月になります。"
    - id: Day
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>1 ~ 31 の式です。 ただし、この範囲外の値も指定します。 値`Day`は 1 つずつオフセットされ、計算された月の最初の日に適用します。 つまり、(`Day` - 1) に追加された月の最初。 年と月は、必要に応じて再計算されます。 次の結果がこの影響を示しています。 場合`Day`1 に設定されて、結果は、計算された月の最初の日です。       場合`Day`が 0 の結果は、前の月の最終日場合、。       場合`Day`-1 で、結果は、前の月の前月の日です。       場合`Day`結果、現在の月の最後が、適切な次の月の日を過ぎています。 たとえば場合、`Month`は 4 と`Day`31、結果は、5 月 1日です。"
    return:
      type: System.DateTime
      description: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>午前&0; 時に設定された時刻情報と共に指定した年、月、および日を表す値 (00:&00;:00)。"
  overload: Microsoft.VisualBasic.DateAndTime.DateSerial*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateString
  id: DateString
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateString
  nameWithType: DateAndTime.DateString
  fullName: Microsoft.VisualBasic.DateAndTime.DateString
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返すか設定、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>システムの現在の日付を表す値です。"
  remarks: "`DateString`システム日付を月の省略名を使用して年-月-日形式で返します。 日付の許容される形式は、M-d yyyy, M-y d、m/d/yyyy、および M/d/y です。 これは、2 バイト文字セット (DBCS) を使用するものを除くすべてのシステム ロケールの場合は true です。 システムのロケールが、2 バイト文字セットを使用している場合`DateString`-yyyy-mm-dd の形式で、システムの日付を返します。 使用して、システムのロケールを設定、**時計、言語および地域**内の項目**コントロール パネルの **です。       **注**、`DateString`プロパティでは、システムの日付を返します - yyyy-mm-dd の形式でのみ、 `zh` (中国語簡体字)、 `ko` (韓国語)、および`ja`Silverlight 内での Visual Basic を実行している場合 (日本語) のシステム ロケール。       取得または設定の現在のシステム時刻として、`String`を使用して、<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>プロパティ</xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>。       現在のロケールの形式またはカスタム書式指定では、現在のシステム日付または時刻を取得するには、指定、<xref:Microsoft.VisualBasic.DateAndTime.Now%2A>プロパティを<xref:Microsoft.VisualBasic.Strings.Format%2A>関数、またはユーザー定義の定義済み日付/時刻形式の指定します</xref:Microsoft.VisualBasic.Strings.Format%2A></xref:Microsoft.VisualBasic.DateAndTime.Now%2A>。 次の例を示します。      ```   MsgBox(&quot;The formatted date is &quot; & Format(Now, &quot;dddd, d MMM yyyy&quot;))   ```現在のシステム日付にアクセスする、`Date`を使用して、<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>プロパティ</xref:Microsoft.VisualBasic.DateAndTime.Today%2A>。      > [!IMPORTANT] >、アンマネージ コード アクセス許可を必要とシステムの日付または時刻を設定します。 詳細については、次を参照してください<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission> 。"
  example:
  - "The following example uses the `DateString` property to display the current system date.  \n  \n [!code-vb[VbVbalrDateProperties#1](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#1)]"
  syntax:
    content: public static string DateString { get; set; }
    return:
      type: System.String
      description: "返すか設定、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>システムの現在の日付を表す値です。"
  overload: Microsoft.VisualBasic.DateAndTime.DateString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "値を設定するために使用する無効な形式<xref uid=&quot;langword_csharp_DateString&quot; name=&quot;DateString&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateValue(System.String)
  id: DateValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateValue(String)
  nameWithType: DateAndTime.DateValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.DateValue(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>時間情報が午前&0; 時に設定された文字列で表される日付情報を含む値 (00:&00;:00)。"
  remarks: "場合`StringDate`1 ~ 12 の有効な日付の区切り記号で区切られた数字だけを含む`DateValue`月、日、およびシステムに指定された短い日付形式に従って年の順で認識します。 `DateValue`現在の予定表の設定を使用して、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>のプロパティ、<xref:System.Globalization.CultureInfo>クラス内で、<xref:System.Globalization>名前空間</xref:System.Globalization></xref:System.Globalization.CultureInfo></xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 既定値<xref:System.Globalization.CultureInfo.CurrentCulture%2A>値によって決まります**コントロール パネルの **設定</xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 短い日付形式を上書きするには、設定して、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>のプロパティ、<xref:System.Globalization.DateTimeFormatInfo>クラス内で、<xref:System.Globalization>名前空間</xref:System.Globalization></xref:System.Globalization.DateTimeFormatInfo></xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>。       `DateValue`長、省略形、および数値の形式での月の名前を認識します。 12/30/1991 と 12/30/91 を認識するだけでなく、 `DateValue` 1991 年 12 月 30 日と 1991 年 12 月 30 日にも認識します。       場合の年の部分`StringDate`を省略すると、`DateValue`コンピューターのシステムの日付から現在の年を使用します。       場合、`StringDate`引数には、時刻の情報が含まれています。 `DateValue` 、返される値には含まれません。 ただし場合、 `StringDate` 「89:&98;」などの無効な時刻の情報が含まれています、<xref:System.InvalidCastException>エラーが発生します</xref:System.InvalidCastException>。"
  example:
  - "This example uses the `DateValue` function to convert a string to a date. You can also use date literals to directly assign a date to an `Object` or `Date` variable, for example, `oldDate = #2/12/69#`.  \n  \n [!code-vb[VbVbalrFunctions#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._84_1.vb)]"
  syntax:
    content: public static DateTime DateValue (string StringDate);
    parameters:
    - id: StringDate
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>9999 年 12 月 31 日の 23時 59分: 59 まで 1 年 1 月 1 日 00時 00分: 00 から日付/時刻値を表す式です。"
    return:
      type: System.DateTime
      description: "<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>時間の情報が午前&0; 時に設定された文字列で表される日付情報を含む値 (00:&00;:00)。"
  overload: Microsoft.VisualBasic.DateAndTime.DateValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>StringDate</code>無効な時刻情報が含まれます。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)
  id: Day(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Day(DateTime)
  nameWithType: DateAndTime.Day(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Day(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 1 ~ 31、月の日付を表す値です。"
  remarks: "使用する場合、`Day`関数で修飾する必要があります、`Microsoft.VisualBasic`名前空間、ため、<xref:System.Windows.Forms>名前空間を定義<xref:System.Windows.Forms.Day>列挙体として</xref:System.Windows.Forms.Day></xref:System.Windows.Forms>。 例を次に該当する方法`Day`このあいまいさの解決:```vb#   Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)   ```を呼び出して、月の日を取得することも`DatePart`を指定して`DateInterval.Day`の*間隔*引数。"
  example:
  - "The following example uses the `Day` function to obtain the day of the month from a specified date. In the development environment, the date literal is displayed in standard short format (such as \"02/12/1969\") using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._126_1.vb)]  \n  \n `Day` is qualified to distinguish it from the <xref:System.Windows.Forms.Day?displayProperty=fullName> enumeration."
  syntax:
    content: public static int Day (DateTime DateValue);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>日を抽出する値。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 1 ~ 31、月の日付を表す値です。"
  overload: Microsoft.VisualBasic.DateAndTime.Day*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)
  id: Hour(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Hour(DateTime)
  nameWithType: DateAndTime.Hour(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Hour(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 0 ~ 23、日の時間を表す値です。"
  remarks: "呼び出して、1 日の時間を取得することも`DatePart`を指定して`DateInterval.Hour`の`Interval`引数。"
  example:
  - "This example uses the `Hour` function to obtain the hour from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#32](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._192_1.vb)]"
  syntax:
    content: public static int Hour (DateTime TimeValue);
    parameters:
    - id: TimeValue
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>時間を抽出する値。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 0 ~ 23、日の時間を表す値です。"
  overload: Microsoft.VisualBasic.DateAndTime.Hour*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)
  id: Minute(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Minute(DateTime)
  nameWithType: DateAndTime.Minute(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Minute(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 0 ~ 59 分、時間を表す値です。"
  remarks: "呼び出して、分を取得することも`DatePart`を指定して`DateInterval.Minute`の`Interval`引数。"
  example:
  - "This example uses the `Minute` function to obtain the minute of the hour from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#42](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._195_1.vb)]"
  syntax:
    content: public static int Minute (DateTime TimeValue);
    parameters:
    - id: TimeValue
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>分を抽出する値。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 0 ~ 59 分、時間を表す値です。"
  overload: Microsoft.VisualBasic.DateAndTime.Minute*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)
  id: Month(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Month(DateTime)
  nameWithType: DateAndTime.Month(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Month(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>から年の月を表す 1 ~ 12 の値。"
  remarks: "呼び出して、年の月を取得することも`DatePart`を指定して`DateInterval.Month`の`Interval`引数。"
  example:
  - "This example uses the `Month` function to obtain the month from a specified date. In the development environment, the date literal is displayed in short date format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#43](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._213_1.vb)]"
  syntax:
    content: public static int Month (DateTime DateValue);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>月を抽出する値。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>から年の月を表す 1 ~ 12 の値。"
  overload: Microsoft.VisualBasic.DateAndTime.Month*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)
  id: MonthName(System.Int32,System.Boolean)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: MonthName(Int32,Boolean)
  nameWithType: DateAndTime.MonthName(Int32,Boolean)
  fullName: Microsoft.VisualBasic.DateAndTime.MonthName(Int32,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>指定した月の名前を格納します。"
  remarks: "によって返される文字列`MonthName`異なりますだけでなく、入力引数以外にも、**地域のオプション**、Windows で指定された設定**コントロール パネルの **です。      > [!NOTE]  >   `MonthName`から現在の予定表の設定を使用して、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>のプロパティ、<xref:System.Globalization.CultureInfo>クラス内で、<xref:System.Globalization>名前空間</xref:System.Globalization></xref:System.Globalization.CultureInfo></xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 既定値<xref:System.Globalization.CultureInfo.CurrentCulture%2A>値によって決まります**コントロール パネルの **設定</xref:System.Globalization.CultureInfo.CurrentCulture%2A>。"
  example:
  - "This example uses the `MonthName` function to determine the name of the month, by the integer given. The Boolean value will determine whether the full name (`False`) or the abbreviated name (`True`) will be displayed.  \n  \n [!code-vb[VbVbalrFunctions#44](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._194_1.vb)]"
  syntax:
    content: public static string MonthName (int Month, bool Abbreviate = false);
    parameters:
    - id: Month
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 月、1 ~ 13; の数値の表記1 は年 1 月、12 は 12 月を示します。 13 か月カレンダーで値 13 を使用することができます。 システムが 12 か月カレンダーを使用していると`Month`13、 <xref uid=&quot;langword_csharp_MonthName&quot; name=&quot;MonthName&quot; href=&quot;&quot;> </xref>空の文字列を返します。"
    - id: Abbreviate
      type: System.Boolean
      description: "任意。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>月の名前を省略するかどうかを示す値です。 省略した場合、既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>、つまり、月の名前は短縮されません。"
    return:
      type: System.String
      description: "返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>指定した月の名前を格納します。"
  overload: Microsoft.VisualBasic.DateAndTime.MonthName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Month</code>1 より小さいか、13 をよりも大きい値です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Now
  id: Now
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Now
  nameWithType: DateAndTime.Now
  fullName: Microsoft.VisualBasic.DateAndTime.Now
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>値が現在の日付とシステム時刻を格納します。"
  remarks: "システム日付を設定するには、使用、<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>プロパティ</xref:Microsoft.VisualBasic.DateAndTime.Today%2A>。 システム時刻を設定するには、使用、<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>プロパティ</xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>。"
  example:
  - "The following example uses the `Now` property to return the current system date and time.  \n  \n [!code-vb[VbVbalrDateProperties#4](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#4)]"
  syntax:
    content: public static DateTime Now { get; }
    return:
      type: System.DateTime
      description: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>値が現在の日付とシステム時刻を格納します。"
  overload: Microsoft.VisualBasic.DateAndTime.Now*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)
  id: Second(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Second(DateTime)
  nameWithType: DateAndTime.Second(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Second(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 0 ~ 59 秒、分を表す値です。"
  remarks: "呼び出して、1 分間の秒を取得することも`DatePart`を指定して`DateInterval.Second`の`Interval`引数。"
  example:
  - "The following example uses the `Second` function to obtain the second of the minute from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#46](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._54_1.vb)]"
  syntax:
    content: public static int Second (DateTime TimeValue);
    parameters:
    - id: TimeValue
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>2 番目の抽出元となる値です。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 0 ~ 59 秒、分を表す値です。"
  overload: Microsoft.VisualBasic.DateAndTime.Second*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay
  id: TimeOfDay
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeOfDay
  nameWithType: DateAndTime.TimeOfDay
  fullName: Microsoft.VisualBasic.DateAndTime.TimeOfDay
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返すか設定、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>システムの現在の時刻を含む値です。"
  remarks: "`Date`データ型には、日付のコンポーネントが含まれます。 システム時刻を返す場合`TimeOfDay`返される値は 1 年の最初の日を表すために、これらすべてを 1 を設定します。 システム時刻を設定するときに`TimeOfDay`日付の構成要素は無視されます。       現在のシステム時刻としてにアクセスする、`String`を使用して、<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>プロパティ</xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>。       取得または現在のシステム日付を設定を使用して、<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>プロパティ</xref:Microsoft.VisualBasic.DateAndTime.Today%2A>。      > [!IMPORTANT] >、アンマネージ コード アクセス許可を必要とシステムの日付または時刻を設定します。 詳細については、次を参照してください<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission> 。"
  example:
  - "This example uses the `TimeOfDay` property to return the current system time.  \n  \n [!code-vb[VbVbalrDateProperties#3](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#3)]"
  syntax:
    content: public static DateTime TimeOfDay { get; set; }
    return:
      type: System.DateTime
      description: "返すか設定、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>システムの現在の時刻を含む値です。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeOfDay*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Timer
  id: Timer
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Timer
  nameWithType: DateAndTime.Timer
  fullName: Microsoft.VisualBasic.DateAndTime.Timer
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref>午前&0; 時から経過した秒数を表す値です。"
  remarks: "`Timer`プロパティは、最新の午前&0; 時から秒とミリ秒数の両方を返します。 秒は、戻り値の整数部分にあり、小数部がミリ秒。"
  example:
  - "This example uses the `Timer` property to pause the application. It can perform other processing during the pause.  \n  \n [!code-vb[VbVbalrTimerProperty#1](~/add/codesnippet/visualbasic/VbVbalrTimerProperty/Form1.vb#1)]  \n  \n Note that you must qualify the `Timer` property with the <xref:Microsoft.VisualBasic?displayProperty=fullName> namespace, because `Timer` is also a defined class in the <xref:System.Threading?displayProperty=fullName>, <xref:System.Timers?displayProperty=fullName>, and <xref:System.Windows.Forms?displayProperty=fullName> namespaces."
  syntax:
    content: public static double Timer { get; }
    return:
      type: System.Double
      description: "返します、 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref>午前&0; 時から経過した秒数を表す値です。"
  overload: Microsoft.VisualBasic.DateAndTime.Timer*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)
  id: TimeSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.TimeSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeSerial(Int32,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>日付情報が 1 月 1 日西暦 1 年の基準とした設定で指定された時間、分、および秒を表す値です。"
  remarks: "次の例で負の場合、0、および引数の正の値。 `TimeSerial`正午、または 8時 45分: 00 AM まで 3 時間まで 15 分を表す時間を返します。      ```vb#   Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)   ```いずれか`Minute`または`Second`の通常の範囲を超えています、単位に適切に適用されます。 たとえば、75 分を指定する場合は 1 時間 15 分として評価されます。       `TimeSerial`1 日の秒数である 86,400、剰余合計秒数が減少します。 そのため、返される時刻には 00時 00分: 00 ~ 23時 59分: 59 常にします。       `Date`データ型には、日付のコンポーネントが含まれます。 `TimeSerial`返される値は 1 年の最初の日を表すために、これらすべてを 1 を設定します。 ただし、引数の値によって計算された時刻が 24 時間を超える場合、1 日は、必要に応じてが増加します。 次の例では、値で`Hour`と`Minute`合計時間は 24 時間以上が発生します。      ```vb#   MsgBox(TimeSerial(23, 75, 0))    &quot; The preceding statement displays &quot;1/2/0001 12:15:00 AM&quot;.   ```引数の値は、負の値の計算される時間間隔で結果、日付情報は 1/1/0001 を設定し、時刻情報は 00時 00分: 00 ~ 23時 59分: 59 にするのに調整します。 ただし、計算される時間が負の値 24 時間未満の場合、<xref:System.ArgumentOutOfRangeException>エラーが発生します</xref:System.ArgumentOutOfRangeException>。       すべて`Date`値でサポートされて、<xref:System.DateTime?displayProperty=fullName>構造体、そのメソッドを使う追加のオプションをまとめることで、`Date`値</xref:System.DateTime?displayProperty=fullName>。 オーバー ロードされたいずれかを使用するなど、<xref:System.DateTime.%23ctor%2A>を設定するコンス トラクター、`Date`コンポーネントの目的の組み合わせを使用して変数</xref:System.DateTime.%23ctor%2A>。 次の例のセット`newDateTime`1978 月 6日 10 分の 1 秒 8:30 の前に。```vb#   Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)   ```"
  example:
  - "The following example uses the `TimeSerial` function to return a time for the specified hour, minute, and second.  \n  \n [!code-vb[VbVbalrFunctions#50](~/add/codesnippet/visualbasic/4788d161-48a1-4476-aa26-_1.vb)]"
  syntax:
    content: public static DateTime TimeSerial (int Hour, int Minute, int Second);
    parameters:
    - id: Hour
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 ~ 23 の式です。 ただし、この範囲外の値も指定します。"
    - id: Minute
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 ~ 59 の式です。 ただし、この範囲外の値も指定します。 値`Minute`計算された時刻に追加されるので、負の値は、その時刻より前に、の分を指定します。"
    - id: Second
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 ~ 59 の式です。 ただし、この範囲外の値も指定します。 値`Second`のため負の値をその分までの秒を指定しますが、計算される&1; 分に追加します。"
    return:
      type: System.DateTime
      description: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>日付情報が 1 月 1 日西暦 1 年の基準とした設定で指定された時間、分、および秒を表す値です。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeSerial*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引数は-2,147, 483,648 ~ 2,147, 483,647 の範囲外"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "計算は負の値の 24 時間未満です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeString
  id: TimeString
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeString
  nameWithType: DateAndTime.TimeString
  fullName: Microsoft.VisualBasic.DateAndTime.TimeString
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返すか設定、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>システムの現在の時刻を表す値です。"
  remarks: "`TimeString`常に 24 時間形式は&quot;HH:mm:ss&quot;としてのシステム時刻を返します。 この形式はカルチャに依存しない、変更した場合でもは変わらないため、**地域のオプション**で**コントロール パネルの **です。       取得またはとして現在のシステム日付を設定する、`String`を使用して、<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>プロパティ</xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>。       現在のロケールの形式またはカスタム書式指定では、現在のシステム日付または時刻を取得するには、指定、<xref:Microsoft.VisualBasic.DateAndTime.Now%2A>プロパティを<xref:Microsoft.VisualBasic.Strings.Format%2A>関数、またはユーザー定義の定義済み日付/時刻形式の指定します</xref:Microsoft.VisualBasic.Strings.Format%2A></xref:Microsoft.VisualBasic.DateAndTime.Now%2A>。 次の例を示します。      ```   MsgBox(&quot;The formatted time is &quot; & Format(Now, &quot;hh.mm.ss.fff tt&quot;))   ```現在のシステム時刻としてにアクセスする、`Date`を使用して、<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>プロパティ</xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>。      > [!IMPORTANT] > システムの日付または時刻を設定するには、部分的な信頼されている状況での実行に影響する可能性があります、アンマネージ コード権限が必要です。 詳細については、次を参照してください<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission> 。"
  example:
  - "This example uses the `TimeString` property to display the current system time.  \n  \n [!code-vb[VbVbalrDateProperties#2](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#2)]"
  syntax:
    content: public static string TimeString { get; set; }
    return:
      type: System.String
      description: "返すか設定、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>システムの現在の時刻を表す値です。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "値を設定するために使用する無効な形式<xref uid=&quot;langword_csharp_TimeString&quot; name=&quot;TimeString&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)
  id: TimeValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeValue(String)
  nameWithType: DateAndTime.TimeValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeValue(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>日付情報が 1 年 1 月 1 日に設定された文字列で表される時刻情報を含む値です。"
  remarks: "有効な時刻を入力する 12 時間制または 24 時間制を使用しています。 たとえば、`&quot;2:24 P.M.&quot;`と`&quot;14:24&quot;`が両方とも有効な`StringTime`引数。       場合、`StringTime`引数には、日付情報が含まれています。 `TimeValue` 、返される値には含まれません。 ただし場合、`StringTime`無効な日付についてには、たとえば&quot;年 32年 1 月&quot;が含まれています、<xref:System.InvalidCastException>エラーが発生します</xref:System.InvalidCastException>。"
  example:
  - "The following example uses the `TimeValue` function to convert a string to a time. You can also use date literals to directly assign a time to a `Date` variable.  \n  \n [!code-vb[VbVbalrFunctions#51](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._232_1.vb)]"
  syntax:
    content: public static DateTime TimeValue (string StringTime);
    parameters:
    - id: StringTime
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>9999 年 12 月 31 日の 23時 59分: 59 まで 1 年 1 月 1 日 00時 00分: 00 から日付/時刻値を表す式です。"
    return:
      type: System.DateTime
      description: "返します、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>日付情報が 1 年 1 月 1 日に設定された文字列で表される時刻情報を含む値です。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>StringTime</code>無効な日付の情報が含まれます。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Today
  id: Today
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Today
  nameWithType: DateAndTime.Today
  fullName: Microsoft.VisualBasic.DateAndTime.Today
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返すか設定、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>システムの現在の日付を含む値です。"
  remarks: "`Date`データ型には、時間のコンポーネントが含まれます。 システム日付を返す場合`Today`を 0 にこれらのすべて設定するため、返される値が午前 0 時を表します (00: 00:00)。 システム日付を設定するときに`Today`時コンポーネントは無視されます。       現在のシステム日付にアクセスする、`String`を使用して、<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>プロパティ</xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>。       取得または現在のシステム時刻を設定を使用して、<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>プロパティ</xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>。      > [!IMPORTANT] >、アンマネージ コード アクセス許可を必要とシステムの日付または時刻を設定します。 詳細については、次を参照してください<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission> 。"
  example:
  - "This example uses the `Today` property to return the current system date.  \n  \n [!code-vb[VbVbalrDateProperties#5](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#5)]"
  syntax:
    content: public static DateTime Today { get; set; }
    return:
      type: System.DateTime
      description: "返すか設定、 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>システムの現在の日付を含む値です。"
  overload: Microsoft.VisualBasic.DateAndTime.Today*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  id: Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Weekday(DateTime,FirstDayOfWeek)
  nameWithType: DateAndTime.Weekday(DateTime,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.Weekday(DateTime,FirstDayOfWeek)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>週の曜日を表す数値を含むです。"
  remarks: "によって返される値、`Weekday`の値に対応する関数、`FirstDayOfWeek`列挙体です。 つまり、1 は日曜日を表し、7 は土曜日を表します。      > [!NOTE]  >   `Weekday`から現在の予定表の設定を使用して、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>のプロパティ、<xref:System.Globalization.CultureInfo>クラス内で、<xref:System.Globalization>名前空間</xref:System.Globalization></xref:System.Globalization.CultureInfo></xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 既定値<xref:System.Globalization.CultureInfo.CurrentCulture%2A>値によって決まります**コントロール パネルの **設定</xref:System.Globalization.CultureInfo.CurrentCulture%2A>。       `DayOfWeek`引数は、次の設定のいずれかを持つことができます。      |列挙値 |値 |説明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|システム設定で指定された週の最初の日 |  |`FirstDayOfWeek.Sunday`|1|日曜日 (既定値) |  |`FirstDayOfWeek.Monday`|2|月曜日 (iso 8601 の標準的な 3.17) |  |`FirstDayOfWeek.Tuesday`|3|火曜日 |  |`FirstDayOfWeek.Wednesday`|4|水曜日 |  |`FirstDayOfWeek.Thursday`|5|木曜日 |  |`FirstDayOfWeek.Friday`|6|金曜日 |  |`FirstDayOfWeek.Saturday`|7|土曜日 |"
  example:
  - "The following example uses the `Weekday` function to obtain the day of the week from a specified date.  \n  \n [!code-vb[VbVbalrFunctions#57](~/add/codesnippet/visualbasic/369e7ed8-1790-4eb8-9e17-_1.vb)]"
  syntax:
    content: public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>週の曜日を決定する値。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "任意。 選択した値、 <xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;> </xref>週の最初の日を指定する列挙です。 指定しない場合、 <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>を使用します。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>週の曜日を表す数値を含むです。"
  overload: Microsoft.VisualBasic.DateAndTime.Weekday*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>DayOfWeek</code>0 未満か、7 よりも詳細です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  id: WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: WeekdayName(Int32,Boolean,FirstDayOfWeek)
  nameWithType: DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>指定した曜日の名前を格納します。"
  remarks: "によって返される文字列`WeekdayName`異なりますだけでなく、入力引数以外にも、**地域のオプション**、Windows で指定された設定**コントロール パネルの **です。      > [!NOTE]  >   `WeekdayName`から現在の予定表の設定を使用して、<xref:System.Globalization.CultureInfo.CurrentCulture%2A>のプロパティ、<xref:System.Globalization.CultureInfo>クラス内で、<xref:System.Globalization>名前空間</xref:System.Globalization></xref:System.Globalization.CultureInfo></xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 既定値<xref:System.Globalization.CultureInfo.CurrentCulture%2A>値によって決まります**コントロール パネルの **設定</xref:System.Globalization.CultureInfo.CurrentCulture%2A>。       `FirstDayOfWeekValue`引数は、次の設定のいずれかを持つことができます。      |列挙値 |値 |説明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|システムで指定された週の最初の日 (既定値) の設定 |  |`FirstDayOfWeek.Sunday`|1|日曜日 |  |`FirstDayOfWeek.Monday`|2|月曜日 (iso 8601 の標準的な 3.17) |  |`FirstDayOfWeek.Tuesday`|3|火曜日 |  |`FirstDayOfWeek.Wednesday`|4|水曜日 |  |`FirstDayOfWeek.Thursday`|5|木曜日 |  |`FirstDayOfWeek.Friday`|6|金曜日 |  |`FirstDayOfWeek.Saturday`|7|土曜日 |"
  example:
  - "The following example uses the `Weekday` function to obtain the day of the week from a specified date, and then the `WeekDayName` function to obtain the name of the weekday from its number.  \n  \n [!code-vb[VbVbalrFunctions#58](~/add/codesnippet/visualbasic/3ef2fbeb-749b-412a-a8c7-_1.vb)]"
  syntax:
    content: public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);
    parameters:
    - id: Weekday
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 1 ~ 7;、曜日の数値の表記1 は、週の最初の日、7 が週の最終日を示します。 最初と最後の日の id は、の設定によって異なります。`FirstDayOfWeekValue`です。"
    - id: Abbreviate
      type: System.Boolean
      description: "任意。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>曜日名を省略するかどうかを示す値です。 省略した場合、既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>、つまり、曜日名は短縮されません。"
    - id: FirstDayOfWeekValue
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "任意。 選択した値、 <xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;> </xref>週の最初の日を指定する列挙です。 指定しない場合、 <xref uid=&quot;langword_csharp_FirstDayOfWeek.System&quot; name=&quot;FirstDayOfWeek.System&quot; href=&quot;&quot;> </xref>を使用します。"
    return:
      type: System.String
      description: "返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>指定した曜日の名前を格納します。"
  overload: Microsoft.VisualBasic.DateAndTime.WeekdayName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Weekday</code>1 より小さいか、または 7 より大きいまたは<code>FirstDayOfWeekValue</code>は 0 より小さいか、7 より大きい。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)
  id: Year(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Year(DateTime)
  nameWithType: DateAndTime.Year(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Year(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 1 ~ 9999 年を表す値です。"
  remarks: "呼び出して、年を取得することも`DatePart`を指定して`DateInterval.Year`の`Interval`引数。"
  example:
  - "The following example uses the `Year` function to obtain the year from a specified date. In the development environment, the date literal is displayed in short date format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#59](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._223_1.vb)]"
  syntax:
    content: public static int Year (DateTime DateValue);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>年を抽出する値。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> 1 ~ 9999 年を表す値です。"
  overload: Microsoft.VisualBasic.DateAndTime.Year*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateAdd(DateInterval,Double,DateTime)
  nameWithType: DateAndTime.DateAdd(DateInterval,Double,DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(DateInterval,Double,DateTime)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateInterval
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateInterval
  nameWithType: DateInterval
  fullName: Microsoft.VisualBasic.DateInterval
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateAdd(String,Double,Object)
  nameWithType: DateAndTime.DateAdd(String,Double,Object)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(String,Double,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.FirstDayOfWeek
  parent: Microsoft.VisualBasic
  isExternal: false
  name: FirstDayOfWeek
  nameWithType: FirstDayOfWeek
  fullName: Microsoft.VisualBasic.FirstDayOfWeek
- uid: Microsoft.VisualBasic.FirstWeekOfYear
  parent: Microsoft.VisualBasic
  isExternal: false
  name: FirstWeekOfYear
  nameWithType: FirstWeekOfYear
  fullName: Microsoft.VisualBasic.FirstWeekOfYear
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
- uid: Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.DateSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.DateSerial(Int32,Int32,Int32)
- uid: Microsoft.VisualBasic.DateAndTime.DateString
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateString
  nameWithType: DateAndTime.DateString
  fullName: Microsoft.VisualBasic.DateAndTime.DateString
- uid: Microsoft.VisualBasic.DateAndTime.DateValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateValue(String)
  nameWithType: DateAndTime.DateValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.DateValue(String)
- uid: Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Day(DateTime)
  nameWithType: DateAndTime.Day(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Day(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Hour(DateTime)
  nameWithType: DateAndTime.Hour(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Hour(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Minute(DateTime)
  nameWithType: DateAndTime.Minute(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Minute(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Month(DateTime)
  nameWithType: DateAndTime.Month(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Month(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: MonthName(Int32,Boolean)
  nameWithType: DateAndTime.MonthName(Int32,Boolean)
  fullName: Microsoft.VisualBasic.DateAndTime.MonthName(Int32,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.DateAndTime.Now
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Now
  nameWithType: DateAndTime.Now
  fullName: Microsoft.VisualBasic.DateAndTime.Now
- uid: Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Second(DateTime)
  nameWithType: DateAndTime.Second(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Second(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeOfDay
  nameWithType: DateAndTime.TimeOfDay
  fullName: Microsoft.VisualBasic.DateAndTime.TimeOfDay
- uid: Microsoft.VisualBasic.DateAndTime.Timer
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Timer
  nameWithType: DateAndTime.Timer
  fullName: Microsoft.VisualBasic.DateAndTime.Timer
- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.TimeSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeSerial(Int32,Int32,Int32)
- uid: Microsoft.VisualBasic.DateAndTime.TimeString
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeString
  nameWithType: DateAndTime.TimeString
  fullName: Microsoft.VisualBasic.DateAndTime.TimeString
- uid: Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeValue(String)
  nameWithType: DateAndTime.TimeValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeValue(String)
- uid: Microsoft.VisualBasic.DateAndTime.Today
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Today
  nameWithType: DateAndTime.Today
  fullName: Microsoft.VisualBasic.DateAndTime.Today
- uid: Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Weekday(DateTime,FirstDayOfWeek)
  nameWithType: DateAndTime.Weekday(DateTime,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.Weekday(DateTime,FirstDayOfWeek)
- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: WeekdayName(Int32,Boolean,FirstDayOfWeek)
  nameWithType: DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
- uid: Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Year(DateTime)
  nameWithType: DateAndTime.Year(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Year(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateAdd
  nameWithType: DateAndTime.DateAdd
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateDiff
  nameWithType: DateAndTime.DateDiff
- uid: Microsoft.VisualBasic.DateAndTime.DatePart*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DatePart
  nameWithType: DateAndTime.DatePart
- uid: Microsoft.VisualBasic.DateAndTime.DateSerial*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateSerial
  nameWithType: DateAndTime.DateSerial
- uid: Microsoft.VisualBasic.DateAndTime.DateString*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateString
  nameWithType: DateAndTime.DateString
- uid: Microsoft.VisualBasic.DateAndTime.DateValue*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateValue
  nameWithType: DateAndTime.DateValue
- uid: Microsoft.VisualBasic.DateAndTime.Day*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Day
  nameWithType: DateAndTime.Day
- uid: Microsoft.VisualBasic.DateAndTime.Hour*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Hour
  nameWithType: DateAndTime.Hour
- uid: Microsoft.VisualBasic.DateAndTime.Minute*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Minute
  nameWithType: DateAndTime.Minute
- uid: Microsoft.VisualBasic.DateAndTime.Month*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Month
  nameWithType: DateAndTime.Month
- uid: Microsoft.VisualBasic.DateAndTime.MonthName*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: MonthName
  nameWithType: DateAndTime.MonthName
- uid: Microsoft.VisualBasic.DateAndTime.Now*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Now
  nameWithType: DateAndTime.Now
- uid: Microsoft.VisualBasic.DateAndTime.Second*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Second
  nameWithType: DateAndTime.Second
- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeOfDay
  nameWithType: DateAndTime.TimeOfDay
- uid: Microsoft.VisualBasic.DateAndTime.Timer*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Timer
  nameWithType: DateAndTime.Timer
- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeSerial
  nameWithType: DateAndTime.TimeSerial
- uid: Microsoft.VisualBasic.DateAndTime.TimeString*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeString
  nameWithType: DateAndTime.TimeString
- uid: Microsoft.VisualBasic.DateAndTime.TimeValue*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeValue
  nameWithType: DateAndTime.TimeValue
- uid: Microsoft.VisualBasic.DateAndTime.Today*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Today
  nameWithType: DateAndTime.Today
- uid: Microsoft.VisualBasic.DateAndTime.Weekday*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Weekday
  nameWithType: DateAndTime.Weekday
- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: WeekdayName
  nameWithType: DateAndTime.WeekdayName
- uid: Microsoft.VisualBasic.DateAndTime.Year*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Year
  nameWithType: DateAndTime.Year
