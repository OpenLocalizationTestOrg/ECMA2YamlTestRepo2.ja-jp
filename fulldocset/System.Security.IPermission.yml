### YamlMime:ManagedReference
items:
- uid: System.Security.IPermission
  id: IPermission
  children:
  - System.Security.IPermission.Copy
  - System.Security.IPermission.Demand
  - System.Security.IPermission.Intersect(System.Security.IPermission)
  - System.Security.IPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.IPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
  type: Interface
  summary: "アクセス許可の種類によって実装されるメソッドを定義します。"
  remarks: "共通言語ランタイムでのアクセス許可は、指定したリソースのセキュリティを設定できる操作のセットを記述するオブジェクトです。 権限オブジェクトには、操作またはセキュリティ制御の対象となるアクセスについて説明します。アクセスまたは操作を実行する権限は表しません。 アクセス許可は、次のようにアプリケーション コードと .NET Framework セキュリティ システムの両方で使用されます。      コードでは、実行するために必要なアクセス許可を要求します。      -セキュリティ システム ポリシーでは、コードを実行するために権限を付与します。      -コードでは、コードの呼び出しのアクセス許可があることを要求します。      コードでは、アサート/拒否/許可のみを使用して、セキュリティのスタックをオーバーライドします。      > [!NOTE] > 新しいアクセス許可を記述する場合は、クラス内でこのインターフェイスを実装する必要があります。      > [!IMPORTANT] > アクセス許可は、複数のスレッドによってアクセスできます。 このインターフェイスを実装するときを保証する必要があります、 <xref:System.Security.IPermission.IsSubsetOf%2A>、 <xref:System.Security.IPermission.Intersect%2A>、 <xref:System.Security.IPermission.Union%2A>、および<xref:System.Security.IPermission.Copy%2A>メソッドの実装がスレッド セーフである</xref:System.Security.IPermission.Copy%2A></xref:System.Security.IPermission.Union%2A></xref:System.Security.IPermission.Intersect%2A></xref:System.Security.IPermission.IsSubsetOf%2A>。"
  example:
  - "This example shows how to define a permission class for use with code access security. All of the necessary permission interfaces are implemented.  \n  \n [!code-cs[Permission#1](~/add/codesnippet/csharp/t-system.security.ipermi_1.cs)]\n [!code-vb[Permission#1](~/add/codesnippet/visualbasic/t-system.security.ipermi_1.vb)]\n [!code-cpp[Permission#1](~/add/codesnippet/cpp/t-system.security.ipermi_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IPermission : System.Security.ISecurityEncodable
  implements:
  - System.Security.ISecurityEncodable
  platform:
  - net462
- uid: System.Security.IPermission.Copy
  id: Copy
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: IPermission.Copy()
  fullName: System.Security.IPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "作成して、現在のアクセス許可の完全なコピーを返します。"
  remarks: "アクセス許可のコピーは、元のアクセス許可としてリソースに対して同じアクセス権を表します。"
  example:
  - "The following code example demonstrates implementing the Copy method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#4](~/add/codesnippet/csharp/m-system.security.ipermi_2_1.cs)]\n [!code-vb[Permission#4](~/add/codesnippet/visualbasic/m-system.security.ipermi_2_1.vb)]\n [!code-cpp[Permission#4](~/add/codesnippet/cpp/m-system.security.ipermi_2_1.cpp)]"
  syntax:
    content: public System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "現在のアクセス許可のコピー。"
  overload: System.Security.IPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IPermission.Demand
  id: Demand
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: IPermission.Demand()
  fullName: System.Security.IPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "スロー、<xref:System.Security.SecurityException>セキュリティ要件が満たされていない場合、実行時に</xref:System.Security.SecurityException>"
  remarks: "このメソッドは通常、呼び出し元がリソースにアクセスする権限を持っていることを確認する安全なライブラリによって使用されます。 たとえば、安全なクラス ライブラリ内のファイル クラスを呼び出します<xref:System.Security.CodeAccessPermission.Demand%2A>、必要なの<xref:System.Security.Permissions.FileIOPermission>、呼び出し元によって要求されたファイルの操作を実行する前にします</xref:System.Security.Permissions.FileIOPermission></xref:System.Security.CodeAccessPermission.Demand%2A>。       このインターフェイス メソッドを実装するクラスのほとんどは、完全なスタック ウォークを実行することによってセキュリティ基準を満たす、スタック ウォークは必ずしも行われません。 スタック ウォークを実行しない実装の例としては<xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>。</xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>       スタック ウォークが実行されると、このメソッドを呼び出すコードのアクセス許可はチェックされません。チェックは、そのコードの直前の呼び出し元から開始され、スタックの上位に進みます。 通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下位にあるメソッドを呼び出すようにダウン、成長として表されます。 <xref:System.Security.CodeAccessPermission.Demand%2A>場合にのみ成功ありません<xref:System.Security.SecurityException>が発生します</xref:System.Security.SecurityException>。</xref:System.Security.CodeAccessPermission.Demand%2A>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IPermission.Demand*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: IPermission.Intersect(IPermission)
  fullName: System.Security.IPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "作成し、現在のアクセス許可と指定したアクセス許可の積集合であるアクセス許可を返します。"
  remarks: "2 つのアクセス許可の積集合は、一連の両方に共通する操作を説明する権限です。 元の両方の権限を通過する要求だけでは、積集合を渡されます。       次のステートメントは、true、Intersect メソッドのすべての実装を指定する必要があります。 `X`および`Y`表す<xref:System.Security.IPermission>れていないオブジェクト参照`null`</xref:System.Security.IPermission>。      -   `X`.Intersect (`X`) と等しい値を返します`X`です。      -   `X`.Intersect (`Y`) と同じ値を返します`Y`です。Intersect (`X`)。      -   `X`.Intersect (`null`) を返します`null`です。"
  example:
  - "The following code example demonstrates implementing the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#2](~/add/codesnippet/csharp/m-system.security.ipermi_3_1.cs)]\n [!code-vb[Permission#2](~/add/codesnippet/visualbasic/m-system.security.ipermi_3_1.vb)]\n [!code-cpp[Permission#2](~/add/codesnippet/cpp/m-system.security.ipermi_3_1.cpp)]"
  syntax:
    content: public System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "現在のアクセス許可と交差するアクセス許可。 これは、現在のアクセス許可と同じ型でなければなりません。"
    return:
      type: System.Security.IPermission
      description: "現在のアクセス許可と指定したアクセス許可の積集合を表す新しいアクセス許可。 この新しいアクセス許可は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>積集合が空の場合。"
  overload: System.Security.IPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>パラメーターではありません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>し、現在のアクセス許可と同じクラスのインスタンスではありません。"
  platform:
  - net462
- uid: System.Security.IPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.IPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: IPermission.IsSubsetOf(IPermission)
  fullName: System.Security.IPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のアクセス許可が指定したアクセス許可のサブセットであるかどうかを判断します。"
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be true for all implementations of the IsSubsetOf method. `X`, `Y`, and `Z` represent <xref:System.Security.IPermission> objects that are not `null`.  \n  \n-   `X`.IsSubsetOf(`X`) returns `true`.  \n  \n-   `X`.IsSubsetOf(`Y`) returns the same value as `Y`.IsSubsetOf(`X`) if and only if `X` and `Y` represent the same set of permissions.  \n  \n-   If `X`.IsSubsetOf(`Y`) and `Y`.IsSubsetOf(`Z`) both return `true`, `X`.IsSubsetOf(`Z`) returns `true`.  \n  \n If `X` represents an empty <xref:System.Security.IPermission> object with a permission state of <xref:System.Security.Permissions.PermissionState> and `Y` represents an <xref:System.Security.IPermission> object that is `null`, `X`.IsSubsetOf(`Y`) returns `true`. If `Z` is also an empty permission, the compound set operation `X`.Union(Z).IsSubsetOf(Y) also returns `true` because the union of two empty permissions is an empty permission."
  example:
  - "The following code example demonstrates implementing the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#3](~/add/codesnippet/csharp/m-system.security.ipermi_1_1.cs)]\n [!code-vb[Permission#3](~/add/codesnippet/visualbasic/m-system.security.ipermi_1_1.vb)]\n [!code-cpp[Permission#3](~/add/codesnippet/cpp/m-system.security.ipermi_1_1.cpp)]"
  syntax:
    content: public bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "サブセットの関係をテストするのには権限です。 このアクセス許可は、現在のアクセス許可と同じ型でなければなりません。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>現在のアクセス許可が指定した権限のサブセットの場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.IPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>パラメーターではありません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>と現在のアクセス許可と同じ型でもありません。"
  platform:
  - net462
- uid: System.Security.IPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: IPermission.Union(IPermission)
  fullName: System.Security.IPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のアクセス許可と、指定した権限の和集合であるアクセス許可を作成します。"
  remarks: "共用体への呼び出しの結果は、現在のアクセス許可と、指定した権限の両方で表されるすべての操作を表すアクセス許可です。 いずれかのアクセス許可に適合する要求は、その共用体を渡します。       次のステートメントは、true、共用体のメソッドのすべての実装を指定する必要があります。 `X`および`Y`表す<xref:System.Security.IPermission>れていないオブジェクト`null`</xref:System.Security.IPermission>。      -   `X`.共用体 (`X`) と同じ値を持つオブジェクトを返します`X`です。      -   `X`.共用体 (`Y`) によって返されるオブジェクトと同じ値を持つオブジェクトを返します`Y`です。共用体 (`X`)。      -   `X`.共用体 (`null`) と同じ値を持つオブジェクトを返します`X`です。"
  example:
  - "The following code example demonstrates implementing the Union method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#5](~/add/codesnippet/csharp/m-system.security.ipermi_0_1.cs)]\n [!code-vb[Permission#5](~/add/codesnippet/visualbasic/m-system.security.ipermi_0_1.vb)]\n [!code-cpp[Permission#5](~/add/codesnippet/cpp/m-system.security.ipermi_0_1.cpp)]  \n  \n-"
  syntax:
    content: public System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "現在のアクセス許可と結合するアクセス許可。 これは、現在のアクセス許可と同じ型でなければなりません。"
    return:
      type: System.Security.IPermission
      description: "現在のアクセス許可と、指定した権限の和集合を表す新しいアクセス許可。"
  overload: System.Security.IPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>パラメーターではありません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>と現在のアクセス許可と同じ型でもありません。"
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.IPermission.Copy
  parent: System.Security.IPermission
  isExternal: false
  name: Copy()
  nameWithType: IPermission.Copy()
  fullName: System.Security.IPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.IPermission.Demand
  parent: System.Security.IPermission
  isExternal: false
  name: Demand()
  nameWithType: IPermission.Demand()
  fullName: System.Security.IPermission.Demand()
- uid: System.Security.IPermission.Intersect(System.Security.IPermission)
  parent: System.Security.IPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: IPermission.Intersect(IPermission)
  fullName: System.Security.IPermission.Intersect(IPermission)
- uid: System.Security.IPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.IPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: IPermission.IsSubsetOf(IPermission)
  fullName: System.Security.IPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.IPermission.Union(System.Security.IPermission)
  parent: System.Security.IPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: IPermission.Union(IPermission)
  fullName: System.Security.IPermission.Union(IPermission)
- uid: System.Security.IPermission.Copy*
  parent: System.Security.IPermission
  isExternal: false
  name: Copy
  nameWithType: IPermission.Copy
- uid: System.Security.IPermission.Demand*
  parent: System.Security.IPermission
  isExternal: false
  name: Demand
  nameWithType: IPermission.Demand
- uid: System.Security.IPermission.Intersect*
  parent: System.Security.IPermission
  isExternal: false
  name: Intersect
  nameWithType: IPermission.Intersect
- uid: System.Security.IPermission.IsSubsetOf*
  parent: System.Security.IPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: IPermission.IsSubsetOf
- uid: System.Security.IPermission.Union*
  parent: System.Security.IPermission
  isExternal: false
  name: Union
  nameWithType: IPermission.Union
