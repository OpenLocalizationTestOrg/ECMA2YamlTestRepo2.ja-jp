### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Security.SecureConversationServiceCredential
  id: SecureConversationServiceCredential
  children:
  - System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  - System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  langs:
  - csharp
  name: SecureConversationServiceCredential
  nameWithType: SecureConversationServiceCredential
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential
  type: Class
  summary: "セキュリティで保護されたメッセージ交換サービスの資格情報の設定を提供します。"
  remarks: "セキュリティで保護されたメッセージ交換では、複数のメッセージの交換を伴うおよび、セキュリティを確保する、セキュリティ コンテキスト トークン (SCT) を使用します。 SCT は、通信セッションの有効期間の通信参加者の間で共有されます。 サービスは、次の&2; つの種類の Sct を発行できます:-1 つはセッション ベースの SCT は一意の id を含むです。 メッセージ id だけを実行して、サービスが、SCT id と内容 (クレーム、セキュリティ キーなど) の間でマップする状態マッピング キャッシュを保持します。 適切に動作のクライアントには、キャッシュのリソースの最適化処理に必要な SCT キャンセルを送信する必要があります。 呼び出してこのクラスをインスタンス化する場合<xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A>で、`requireCancellation`パラメーターと等しい`true`、この方法で、SCT を発行します</xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A>。      2 つ目は、クライアントのクッキーに存在する自己完結型の SCT です。 この SCT は、全体の状態情報が含まれています、どちらも、サービスからの状態管理も、クライアントからの SCT キャンセルを必要とします。 「クッキー モード」SCT とも呼びます。 SCT に全体の状態情報が含まれているため、サイズはセッション ベースの場合よりも大きいです。 セッション ベースの Sct と共には、サービスは、多くの状態情報を格納します。 ただし、自己完結型であるため、サービスの有効期間の間で使用でき、サービスのシャット ダウンと再起動の間で永続化します。"
  syntax:
    content: public sealed class SecureConversationServiceCredential
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  id: SecurityContextClaimTypes
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  langs:
  - csharp
  name: SecurityContextClaimTypes
  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "コレクションを取得、<xref:System.Type>クッキー シリアル化の要求</xref:System.Type>。"
  remarks: "クレームを SCT クッキーにシリアル化する[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]使用<xref:System.Runtime.Serialization.DataContractSerializer>既定値として</xref:System.Runtime.Serialization.DataContractSerializer>。 クレームのリソースを拡張するため[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]既知のリソースの種類の一覧を指定することができます。 これは、機能によって、<xref:System.Runtime.Serialization.DataContractSerializer>元の厳密に型指定されたオブジェクト返すことができるようにクッキー内のクレームの逆シリアル化中に</xref:System.Runtime.Serialization.DataContractSerializer>。"
  example:
  - "The following code shows how to get this property.  \n  \n [!code-cs[S_UE_SecureConversationServiceCredential#2](~/add/codesnippet/csharp/e8a69534-ad60-48be-9b2e-_1.cs)]"
  syntax:
    content: public System.Collections.ObjectModel.Collection<Type> SecurityContextClaimTypes { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Type}
      description: "コレクション、<xref:System.Type>クッキー シリアル化の要求</xref:System.Type>。"
  overload: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  id: SecurityStateEncoder
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  langs:
  - csharp
  name: SecurityStateEncoder
  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "取得または設定、カスタマイズされた<xref href=&quot;System.ServiceModel.Security.SecurityStateEncoder&quot;></xref>エンコードとデコード クッキー シリアル化します。"
  remarks: "「クッキー モード」で、サービス発行クライアント cookie の形式でのセキュリティ コンテキスト トークン (SCT) をクライアントに、セキュリティ状態を維持するためがあるないようにします。 クライアントは、サービスの保護を解除して、要求メッセージを検証する方法が認識できるように、要求メッセージに cookie を送信します。 SCT はセキュリティ保護されていないネットワーク経由で送信される多くの場合、のでを保護する必要があります。       既定では、[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]を使用して、<xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder>データ保護 API (DPAPI) を使用して cookie を保護するクラス</xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder>。 Web ファーム環境で動作する DPAPI は、すべてのバックエンド サービスは、同じドメイン ユーザー アカウントとして実行する必要があります。 つまり、サービスが Web ホストされている場合は、ドメイン ユーザーとして実行するインターネット インフォメーション サービス (IIS) ワーカー プロセスを構成する必要があります。       このプロパティを使用すると、カスタマイズされた使用<xref:System.ServiceModel.Security.SecurityStateEncoder>暗号化し、cookie を復号化、DPAPI に依存しない</xref:System.ServiceModel.Security.SecurityStateEncoder>。"
  example:
  - "The following code shows how to set this property.  \n  \n [!code-cs[S_UE_SecureConversationServiceCredential#1](~/add/codesnippet/csharp/72c1f567-836b-4b6f-bbcd-_1.cs)]"
  syntax:
    content: public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }
    return:
      type: System.ServiceModel.Security.SecurityStateEncoder
      description: "A <xref href=&quot;System.ServiceModel.Security.SecurityStateEncoder&quot;> </xref>のカスタマイズでは、オブジェクトの<xref href=&quot;System.ServiceModel.Security.DataProtectionSecurityStateEncoder&quot;></xref>です。"
  overload: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityContextClaimTypes
  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
- uid: System.Collections.ObjectModel.Collection{System.Type}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Type>
  nameWithType: Collection<Type>
  fullName: System.Collections.ObjectModel.Collection<System.Type>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityStateEncoder
  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
- uid: System.ServiceModel.Security.SecurityStateEncoder
  parent: System.ServiceModel.Security
  isExternal: false
  name: SecurityStateEncoder
  nameWithType: SecurityStateEncoder
  fullName: System.ServiceModel.Security.SecurityStateEncoder
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes*
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityContextClaimTypes
  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder*
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityStateEncoder
  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder
