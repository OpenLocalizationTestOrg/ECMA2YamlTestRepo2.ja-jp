### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.Serialization.ExpressionContext
  id: ExpressionContext
  children:
  - System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  - System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  - System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  - System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  - System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  - System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  langs:
  - csharp
  name: ExpressionContext
  nameWithType: ExpressionContext
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext
  type: Class
  summary: "シリアライザー間でコンテキストの状態を渡す方法を提供します。 このクラスは継承できません。"
  remarks: "ExpressionContext はコンテキスト スタックに配置され、シリアル化中に最も関連する式が含まれています。 次の c# コードでは、割り当てを示します。      ```   button1.Text = &quot;Hello&quot;;   ```シリアル化中のいくつかのシリアライザーには、この&1; つのステートメントの作成を担当します。 「こんにちは」を作成するためのこれらのシリアライザーの一方はします。 そのシリアライザー可能性があります式を作成するコンテキストを知る必要がある場合もあります。 前の例では、このコンテキストは必要ありません。 次の c# コードは、コンテキストの知識が必要である状況を示しています。      ```   button1.Text = rm.GetString(&quot;button1_Text&quot;);   ```この場合、リソースの式を作成するシリアライザーは、対象オブジェクトの名前を通知する必要があります。 この ExpressionContext クラスを使用できます。 各シリアライザーでは、式を作成し、全体としてステートメントの一部を処理するシリアライザーを呼び出す、シリアライザーは式のコンテキストをコンテキスト スタックにプッシュします。 各式のコンテキストでは、スタック上に次の式のコンテキストを検出する親プロパティがあります。 これは、便利な走査機能を提供します。"
  syntax:
    content: public sealed class ExpressionContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  id: '#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)'
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionContext(CodeExpression,Type,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ComponentModel.Design.Serialization.ExpressionContext&quot;> </xref>指定された式と所有者を持つクラス。"
  syntax:
    content: public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);
    parameters:
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "指定したコード式。"
    - id: expressionType
      type: System.Type
      description: "指定したコード式の型。"
    - id: owner
      type: System.Object
      description: "指定したコード式の所有者。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  id: '#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)'
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionContext(CodeExpression,Type,Object,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ComponentModel.Design.Serialization.ExpressionContext&quot;> </xref>現在の値を持つクラス。"
  syntax:
    content: public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);
    parameters:
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "指定したコード式。"
    - id: expressionType
      type: System.Type
      description: "指定したコード式の型。"
    - id: owner
      type: System.Object
      description: "指定したコード式の所有者。"
    - id: presetValue
      type: System.Object
      description: "指定したコード式には、値が事前設定します。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  id: Expression
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: Expression
  nameWithType: ExpressionContext.Expression
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "このコンテキストを表す式を取得します。"
  syntax:
    content: public System.CodeDom.CodeExpression Expression { get; }
    return:
      type: System.CodeDom.CodeExpression
      description: "このコンテキストを表す式です。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.Expression*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  id: ExpressionType
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "取得、<xref:System.Type>式の</xref:System.Type>。"
  remarks: "使用することができます<xref:System.ComponentModel.Design.Serialization.ExpressionContext>キャストが式を割り当てる場合に必要なかどうかを決定する</xref:System.ComponentModel.Design.Serialization.ExpressionContext>。"
  syntax:
    content: public Type ExpressionType { get; }
    return:
      type: System.Type
      description: "<xref:System.Type>式の</xref:System.Type>。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  id: Owner
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: Owner
  nameWithType: ExpressionContext.Owner
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "この式を所有するオブジェクトを取得します。"
  remarks: "式がへのプロパティ参照である場合、<xref:System.Windows.Forms.Control.Text%2A>のインスタンスのプロパティ<xref:System.Windows.Forms.Button>と呼ばれる`button1`、所有者を返します`button1`</xref:System.Windows.Forms.Button></xref:System.Windows.Forms.Control.Text%2A>。"
  syntax:
    content: public object Owner { get; }
    return:
      type: System.Object
      description: "この式を所有するオブジェクト。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  id: PresetValue
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "式の事前設定された値を取得します。"
  remarks: "1 つ存在する必要があります、式の事前設定された値が含まれています。 たとえば、式が参照するプロパティの参照を式で、<xref:System.Windows.Forms.Control.Controls%2A>のプロパティ、 <xref:System.Windows.Forms.Button>、PresetValue プロパティがのインスタンスを含む、<xref:System.Windows.Forms.Control.Controls%2A>プロパティ</xref:System.Windows.Forms.Control.Controls%2A></xref:System.Windows.Forms.Button></xref:System.Windows.Forms.Control.Controls%2A>。 これは、プロパティは読み取り専用と値を格納するオブジェクトによって事前に設定されたためにです。 その一方などのプロパティ<xref:System.Windows.Forms.Control.Text%2A>または<xref:System.Windows.Forms.Control.Visible%2A>事前定義された値とそのため、PresetValue プロパティがありません返します`null`</xref:System.Windows.Forms.Control.Visible%2A></xref:System.Windows.Forms.Control.Text%2A>。       次の c# コードでは、シリアライザーがシリアル化を使用してこの情報をどのように使用する方法を示します。       [C#]     ```   Padding p = new Padding();   p.Left = 5;   button1.Padding = p;      button1.Padding.Left = 5;   ```のシリアライザー、<xref:System.Windows.Forms.Padding>構造体は、最初または 2 番目のフォームを生成する場合に通知する必要があります</xref:System.Windows.Forms.Padding>。 既定では、最初の形式が生成されます。 ある場合にのみ、2 番目の形式が生成、 <xref:System.ComponentModel.Design.Serialization.ExpressionContext>、PresetValue を含むコンテキスト スタック上の値に等しく、<xref:System.Windows.Forms.Padding>現在シリアル化される</xref:System.Windows.Forms.Padding></xref:System.ComponentModel.Design.Serialization.ExpressionContext>。"
  syntax:
    content: public object PresetValue { get; }
    return:
      type: System.Object
      description: "この式の事前定義された値または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>割り当てられていない場合。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext(CodeExpression,Type,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
- uid: System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext(CodeExpression,Type,Object,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Expression
  nameWithType: ExpressionContext.Expression
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Owner
  nameWithType: ExpressionContext.Owner
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext
  nameWithType: ExpressionContext.ExpressionContext
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Expression
  nameWithType: ExpressionContext.Expression
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Owner
  nameWithType: ExpressionContext.Owner
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
