### YamlMime:ManagedReference
items:
- uid: System.IO.DirectoryInfo
  id: DirectoryInfo
  children:
  - System.IO.DirectoryInfo.#ctor(System.String)
  - System.IO.DirectoryInfo.Create
  - System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  - System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.Delete
  - System.IO.DirectoryInfo.Delete(System.Boolean)
  - System.IO.DirectoryInfo.EnumerateDirectories
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFiles
  - System.IO.DirectoryInfo.EnumerateFiles(System.String)
  - System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.Exists
  - System.IO.DirectoryInfo.GetAccessControl
  - System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  - System.IO.DirectoryInfo.GetDirectories
  - System.IO.DirectoryInfo.GetDirectories(System.String)
  - System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFiles
  - System.IO.DirectoryInfo.GetFiles(System.String)
  - System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFileSystemInfos
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.MoveTo(System.String)
  - System.IO.DirectoryInfo.Name
  - System.IO.DirectoryInfo.Parent
  - System.IO.DirectoryInfo.Root
  - System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.ToString
  langs:
  - csharp
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
  type: Class
  summary: "作成、移動、およびディレクトリやサブディレクトリを通じてを列挙するためのインスタンス メソッドを公開します。 このクラスは継承できません。       この型の .NET Framework ソース コードを参照するを参照してください。、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e)です。"
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the DirectoryInfo class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \n  \n If you are going to reuse an object several times, consider using the instance method of DirectoryInfo instead of the corresponding static methods of the <xref:System.IO.Directory> class, because a security check will not always be necessary.  \n  \n> [!NOTE]\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \n  \n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n By default, full read/write access to new directories is granted to all users.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates some of the main members of the `DirectoryInfo` class.  \n  \n [!code-cpp[DirInfo Class Example#1](~/add/codesnippet/cpp/t-system.io.directoryinfo_1.cpp)]\n [!code-cs[DirInfo Class Example#1](~/add/codesnippet/csharp/t-system.io.directoryinfo_1.cs)]\n [!code-vb[DirInfo Class Example#1](~/add/codesnippet/visualbasic/t-system.io.directoryinfo_1.vb)]  \n  \n The following example demonstrates how to copy a directory and its contents.  \n  \n [!code-cs[IO.DirectoryInfo-CopyDir#1](~/add/codesnippet/csharp/t-system.io.directoryinfo_2.cs)]\n [!code-vb[IO.DirectoryInfo-CopyDir#1](~/add/codesnippet/visualbasic/t-system.io.directoryinfo_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class DirectoryInfo : System.IO.FileSystemInfo
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.FileSystemInfo
  implements: []
  inheritedMembers:
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Refresh
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.DirectoryInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: DirectoryInfo(String)
  nameWithType: DirectoryInfo.DirectoryInfo(String)
  fullName: System.IO.DirectoryInfo.DirectoryInfo(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>指定したパスのクラスです。"
  remarks: "このコンス トラクターでは、ディレクトリが存在するかどうかはチェックされません。 このコンス トラクターとは、後の操作でディスクにアクセスするために使用される文字列にプレース ホルダーです。       `path`パラメーターは、汎用名前付け規則 (UNC) 共有上のファイルを含む、ファイル名を指定できます。      > [!CAUTION] > 文字のセットをコンパイル時に特定のカルチャ設定を同じ文字を別のカルチャ設定を取得する文字、解釈されないことし、例外をスローする可能性があります。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example uses this constructor to create the specified directory and subdirectory, and demonstrates that a directory that contains subdirectories cannot be deleted.  \n  \n [!code-cs[DirInfo Ctor#1](~/add/codesnippet/csharp/m-system.io.directoryinf_18_1.cs)]\n [!code-cpp[DirInfo Ctor#1](~/add/codesnippet/cpp/m-system.io.directoryinf_18_1.cpp)]\n [!code-vb[DirInfo Ctor#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_18_1.vb)]"
  syntax:
    content: public DirectoryInfo (string path);
    parameters:
    - id: path
      type: System.String
      description: "作成する対象のパスを指定する文字列、 <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.DirectoryInfo.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>無効な文字を含む&quot;、 &lt;、 &gt;、または |。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。 指定したパス、ファイル名、またはその両方が長すぎます。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Create
  id: Create
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Create()
  nameWithType: DirectoryInfo.Create()
  fullName: System.IO.DirectoryInfo.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ディレクトリを作成します。"
  remarks: "ディレクトリが既に存在する場合は、このメソッドは何も行いません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example checks whether a specified directory exists, creates the directory if it does not exist, and deletes the directory.  \n  \n [!code-cpp[DirInfo Create#1](~/add/codesnippet/cpp/m-system.io.directoryinf_11_1.cpp)]\n [!code-cs[DirInfo Create#1](~/add/codesnippet/csharp/m-system.io.directoryinf_11_1.cs)]\n [!code-vb[DirInfo Create#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_11_1.vb)]"
  syntax:
    content: public void Create ();
    parameters: []
  overload: System.IO.DirectoryInfo.Create*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ディレクトリを作成することはできません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  id: Create(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Create(DirectorySecurity)
  nameWithType: DirectoryInfo.Create(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.Create(DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "使用して、ディレクトリを作成、 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>オブジェクト。"
  remarks: "このメソッドのオーバー ロードを使用すると、セキュリティが適用される前に、ディレクトリにアクセスできる可能性がないように、アクセス制御のディレクトリを作成します。       ディレクトリが既に存在する場合は、このメソッドは何も行いません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void Create (System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "ディレクトリに適用するアクセス制御。"
  overload: System.IO.DirectoryInfo.Create*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "指定されたディレクトリ<code> path </code>は読み取り専用または空ではありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定のパスがマップされていないドライブにあるなど、有効ではありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "コロン (:) 文字のみで、ディレクトリの作成が試行されました。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  id: CreateSubdirectory(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: CreateSubdirectory(String)
  nameWithType: DirectoryInfo.CreateSubdirectory(String)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたパスに&1; つ以上のサブディレクトリを作成します。 このインスタンスに対する相対指定されたパスを指定できます、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>クラスです。"
  remarks: "指定されていると、すべてのディレクトリ`path`しない限り、作成の一部`path`が無効です。 `path`ファイル パスではなく、ディレクトリのパスを指定します。 サブディレクトリに既に存在する場合、このメソッドは何も行いません。      > [!NOTE] > パス名は 248 文字に制限されます。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates creating a subdirectory. In this example, the created directories are removed once created. Therefore, to test this sample, comment out the delete lines in the code.  \n  \n [!code-cpp[directoryinfocreatesub#1](~/add/codesnippet/cpp/m-system.io.directoryinf_9_1.cpp)]\n [!code-cs[directoryinfocreatesub#1](~/add/codesnippet/csharp/m-system.io.directoryinf_9_1.cs)]\n [!code-vb[directoryinfocreatesub#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_9_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo CreateSubdirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "指定されたパス。 これは、異なるディスク ボリュームまたは汎用名前付け規則 (UNC) 名にすることはできません。"
    return:
      type: System.IO.DirectoryInfo
      description: "指定された最後のディレクトリ<code> path</code>です。"
  overload: System.IO.DirectoryInfo.CreateSubdirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>有効なファイル パスを指定しないか、無効なが含まれています<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>文字です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定のパスがマップされていないドライブにあるなど、有効ではありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "サブディレクトリを作成することはできません。       - または - ファイルまたはディレクトリに指定した名前は既に<code> path</code>です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。 指定したパス、ファイル名、またはその両方が長すぎます。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、ディレクトリを作成するコード アクセス許可がありません。       または、呼び出し元が、返されたによって記述されるディレクトリの読み取りにコード アクセス許可を持たない<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>オブジェクト。  これは、発生時に、 <code> path </code>パラメーターには、既存のディレクトリがについて説明します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>ドライブのラベルの一部ではないコロン文字 (:) が含まれています (&quot;c:\\&quot;)。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  id: CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: CreateSubdirectory(String,DirectorySecurity)
  nameWithType: DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "セキュリティを指定して、指定したパスに&1; つ以上のサブディレクトリを作成します。 このインスタンスに対する相対指定されたパスを指定できます、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>クラスです。"
  remarks: "指定されていると、すべてのディレクトリ`path`しない限り、作成の一部`path`が無効です。 `path`ファイル パスではなく、ディレクトリのパスを指定します。 サブディレクトリに既に存在する場合、このメソッドは何も行いません。      > [!NOTE] > パス名は 248 文字に制限されます。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.IO.DirectoryInfo CreateSubdirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "指定されたパス。 これは、異なるディスク ボリュームまたは汎用名前付け規則 (UNC) 名にすることはできません。"
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "適用するセキュリティ。"
    return:
      type: System.IO.DirectoryInfo
      description: "指定された最後のディレクトリ<code> path</code>です。"
  overload: System.IO.DirectoryInfo.CreateSubdirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>有効なファイル パスを指定しないか、無効なが含まれています<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>文字です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定のパスがマップされていないドライブにあるなど、有効ではありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "サブディレクトリを作成することはできません。       - または - ファイルまたはディレクトリに指定した名前は既に<code> path</code>です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。 指定したパス、ファイル名、またはその両方が長すぎます。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、ディレクトリを作成するコード アクセス許可がありません。       または、呼び出し元が、返されたによって記述されるディレクトリの読み取りにコード アクセス許可を持たない<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>オブジェクト。  これは、発生時に、 <code> path </code>パラメーターには、既存のディレクトリがについて説明します。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>ドライブのラベルの一部ではないコロン文字 (:) が含まれています (&quot;c:\\&quot;)。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Delete
  id: Delete
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Delete()
  nameWithType: DirectoryInfo.Delete()
  fullName: System.IO.DirectoryInfo.Delete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "これを削除<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>が空の場合。"
  remarks: "共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example throws an exception if you attempt to delete a directory that is not empty.  \n  \n [!code-cpp[DirInfo Delete1#1](~/add/codesnippet/cpp/m-system.io.directoryinf_4_1.cpp)]\n [!code-cs[DirInfo Delete1#1](~/add/codesnippet/csharp/m-system.io.directoryinf_4_1.cs)]\n [!code-vb[DirInfo Delete1#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_4_1.vb)]"
  syntax:
    content: public override void Delete ();
    parameters: []
  overload: System.IO.DirectoryInfo.Delete*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ディレクトリには、読み取り専用ファイルが含まれています。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "これによって記述されるディレクトリ<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>オブジェクトが存在しないか、見つかりませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ディレクトリが空ではありません。       または、ディレクトリは、アプリケーションの現在の作業ディレクトリです。       - または - ディレクトリに開いているハンドルがあるし、オペレーティング システムが Windows XP 以前のバージョン。 このハンドルを開いてディレクトリを列挙することがあります。 詳細については、次を参照してください。[する方法: ディレクトリと列挙ファイル](~/add/includes/ajax-current-ext-md.md)です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Delete(System.Boolean)
  id: Delete(System.Boolean)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Delete(Boolean)
  nameWithType: DirectoryInfo.Delete(Boolean)
  fullName: System.IO.DirectoryInfo.Delete(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "インスタンスを削除、 <xref href=&quot;System.IO.DirectoryInfo&quot;></xref>サブディレクトリとファイルを削除するかどうかを指定します。"
  remarks: "場合、`DirectoryInfo`ファイルやサブディレクトリを含まない、このメソッドは、削除、`DirectoryInfo`場合でも`recursive`は`false`します。 削除しようとすると、`DirectoryInfo`が空でない場合に`recursive`は`false` <xref:System.IO.IOException>.</xref:System.IO.IOException>がスローされます       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates deleting a directory. Because the directory is removed, first comment out the `Delete` line to test that the directory exists. Then uncomment the same line of code to test that the directory was removed successfully.  \n  \n [!code-vb[directoryinfodelete#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_16_1.vb)]\n [!code-cs[directoryinfodelete#1](~/add/codesnippet/csharp/m-system.io.directoryinf_16_1.cs)]\n [!code-cpp[directoryinfodelete#1](~/add/codesnippet/cpp/m-system.io.directoryinf_16_1.cpp)]"
  syntax:
    content: public void Delete (bool recursive);
    parameters:
    - id: recursive
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このディレクトリ、そのサブディレクトリ、およびすべてのファイルを削除するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.DirectoryInfo.Delete*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ディレクトリには、読み取り専用ファイルが含まれています。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "これによって記述されるディレクトリ<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>オブジェクトが存在しないか、見つかりませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ディレクトリは、読み取り専用です。       または、ディレクトリには、1 つまたは複数のファイルまたはサブディレクトリが含まれていますと<code> recursive </code>は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。       または、ディレクトリは、アプリケーションの現在の作業ディレクトリです。       - または - ディレクトリやそのファイルの&1; つ上の開いているハンドルがあるし、オペレーティング システムが Windows XP 以前のバージョン。 このハンドルを開いてディレクトリとファイルを列挙することがあります。 詳細については、次を参照してください。[する方法: ディレクトリと列挙ファイル](~/add/includes/ajax-current-ext-md.md)です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories
  id: EnumerateDirectories
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories()
  nameWithType: DirectoryInfo.EnumerateDirectories()
  fullName: System.IO.DirectoryInfo.EnumerateDirectories()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のディレクトリにディレクトリ情報の列挙可能なコレクションを返します。"
  remarks: "EnumerateDirectories と<xref:System.IO.DirectoryInfo.GetDirectories%2A>メソッドが次のように異なります: - EnumerateDirectories を使用する場合のコレクションの列挙を開始する<xref:System.IO.DirectoryInfo>オブジェクトのコレクション全体が返される前にします</xref:System.IO.DirectoryInfo></xref:System.IO.DirectoryInfo.GetDirectories%2A>。      の使用すると<xref:System.IO.DirectoryInfo.GetDirectories%2A>の配列全体を待つ必要があります<xref:System.IO.DirectoryInfo>配列にアクセスする前に返されるオブジェクト</xref:System.IO.DirectoryInfo></xref:System.IO.DirectoryInfo.GetDirectories%2A>。       そのため、多くのファイルとディレクトリを使用するときに EnumerateDirectories はより効率的なのようにできます。       このメソッドは、次の値を事前に入力<xref:System.IO.DirectoryInfo>プロパティ:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>、返されるコレクションはキャッシュされません以外への各呼び出しの場合は、<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>コレクションのメソッドは新しい列挙を開始します</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTime%2A></xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A></xref:System.IO.FileSystemInfo.LastAccessTime%2A></xref:System.IO.FileSystemInfo.CreationTimeUtc%2A></xref:System.IO.FileSystemInfo.CreationTime%2A></xref:System.IO.FileSystemInfo.Attributes%2A></xref:System.IO.DirectoryInfo>。"
  example:
  - "The following example enumerates the subdirectories under the C:\\Program Files directory and uses a LINQ query to return the names of all directories that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \n  \n If you only need the names of the subdirectories, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%29> method.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumDirs#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_8_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumDirs#1](~/add/codesnippet/csharp/m-system.io.directoryinf_8_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "現在のディレクトリ内のディレクトリの列挙可能なコレクション。"
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化された、パス、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>オブジェクトが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  id: EnumerateDirectories(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories(String)
  nameWithType: DirectoryInfo.EnumerateDirectories(String)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定した検索パターンに一致するディレクトリ情報の列挙可能なコレクションを返します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ディレクトリの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "一致するディレクトリの列挙可能なコレクション<code> searchPattern</code>です。"
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化された、パス、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>オブジェクトが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  id: EnumerateDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定した検索パターンと検索のサブディレクトリのオプションに一致するディレクトリ情報の列挙可能なコレクションを返します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."
  example:
  - "The following example, starting from a specified directory, uses this method and the <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> method to enumerate the files and directories within the start directory and display details of any files over 10 MB in size.  \n  \n [!code-cs[System.IO.DirectoryInfo.EnumerateDirectories#1](~/add/codesnippet/csharp/688c5354-9ee8-487c-ac88-_1.cs)]\n [!code-vb[System.IO.DirectoryInfo.EnumerateDirectories#1](~/add/codesnippet/visualbasic/688c5354-9ee8-487c-ac88-_1.vb)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ディレクトリの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作が現在のディレクトリのみまたはすべてのサブディレクトリを含めるかどうかを指定する列挙値の&1; つ。 既定値は<xref href=&quot;System.IO.SearchOption&quot;></xref>です。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "一致するディレクトリの列挙可能なコレクション<code> searchPattern </code>と<code> searchOption</code>です。"
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化された、パス、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>オブジェクトが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles
  id: EnumerateFiles
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles()
  nameWithType: DirectoryInfo.EnumerateFiles()
  fullName: System.IO.DirectoryInfo.EnumerateFiles()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のディレクトリ内のファイル情報の列挙可能なコレクションを返します。"
  remarks: "EnumerateFiles と<xref:System.IO.DirectoryInfo.GetFiles%2A>メソッドが次のように異なります: - EnumerateFiles を使用する場合のコレクションの列挙を開始する<xref:System.IO.FileInfo>オブジェクトのコレクション全体が返される前にします</xref:System.IO.FileInfo></xref:System.IO.DirectoryInfo.GetFiles%2A>。      の使用すると<xref:System.IO.DirectoryInfo.GetFiles%2A>の配列全体を待つ必要があります<xref:System.IO.FileInfo>配列にアクセスする前に返されるオブジェクト</xref:System.IO.FileInfo></xref:System.IO.DirectoryInfo.GetFiles%2A>。       そのため、多くのファイルとディレクトリを使用するときに EnumerateFiles はより効率的なのようにできます。       このメソッドは、次の値を事前に入力<xref:System.IO.FileInfo>プロパティ:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>- <xref:System.IO.FileInfo.Length%2A>、返されるコレクションはキャッシュされません以外への各呼び出しの場合は、<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>コレクションのメソッドは新しい列挙を開始します</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A></xref:System.IO.FileInfo.Length%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTime%2A></xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A></xref:System.IO.FileSystemInfo.LastAccessTime%2A></xref:System.IO.FileSystemInfo.CreationTimeUtc%2A></xref:System.IO.FileSystemInfo.CreationTime%2A></xref:System.IO.FileSystemInfo.Attributes%2A></xref:System.IO.FileInfo>。"
  example:
  - "The following example enumerates the files under a specified directory and uses a LINQ query to return the names of all files that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \n  \n If you only need the names of the files, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateFiles%28System.String%29?displayProperty=fullName> method.  \n  \n [!code-cs[System.IO.DirectoryInfo.EnumFiles#1](~/add/codesnippet/csharp/m-system.io.directoryinf_2_1.cs)]\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_2_1.vb)]  \n  \n The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_2_2.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_2_2.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "現在のディレクトリ内のファイルの列挙可能なコレクション。"
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化された、パス、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>オブジェクトが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  id: EnumerateFiles(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles(String)
  nameWithType: DirectoryInfo.EnumerateFiles(String)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "検索パターンに一致するファイル情報の列挙可能なコレクションを返します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  example:
  - "The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_1_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_1_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ファイルの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "一致するファイルの列挙可能なコレクション<code> searchPattern</code>です。"
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化されたパス、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>オブジェクトが有効でない (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  id: EnumerateFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定した検索パターンと検索のサブディレクトリのオプションに一致するファイル情報の列挙可能なコレクションを返します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  example:
  - "The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_7_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_7_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ファイルの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作が現在のディレクトリのみまたはすべてのサブディレクトリを含めるかどうかを指定する列挙値の&1; つ。 既定値は<xref href=&quot;System.IO.SearchOption&quot;></xref>です。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "一致するファイルの列挙可能なコレクション<code> searchPattern </code>と<code> searchOption</code>です。"
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化された、パス、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>オブジェクトが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos
  id: EnumerateFileSystemInfos
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos()
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のディレクトリにファイル システム情報の列挙可能なコレクションを返します。"
  remarks: "EnumerateFileSystemInfos と<xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>メソッドが次のように異なります: - EnumerateFileSystemInfos を使用する場合のコレクションの列挙を開始する<xref:System.IO.FileInfo>オブジェクトのコレクション全体が返される前にします</xref:System.IO.FileInfo></xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>。      の使用すると<xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>の配列全体を待つ必要があります<xref:System.IO.FileSystemInfo>配列にアクセスする前に返されるオブジェクト</xref:System.IO.FileSystemInfo></xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>。       そのため、多くのファイルとディレクトリを使用するときに EnumerateFileSystemInfos はより効率的なのようにできます。       このメソッドは、次の値を事前に入力<xref:System.IO.FileSystemInfo>プロパティ:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>、返されるコレクションはキャッシュされません以外への各呼び出しの場合は、<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>コレクションのメソッドは新しい列挙を開始します</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTime%2A></xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A></xref:System.IO.FileSystemInfo.LastAccessTime%2A></xref:System.IO.FileSystemInfo.CreationTimeUtc%2A></xref:System.IO.FileSystemInfo.CreationTime%2A></xref:System.IO.FileSystemInfo.Attributes%2A></xref:System.IO.FileSystemInfo>。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "現在のディレクトリにファイル システム情報の列挙可能なコレクション。"
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化された、パス、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>オブジェクトが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  id: EnumerateFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos(String)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定した検索パターンに一致するファイル システム情報の列挙可能なコレクションを返します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ディレクトリの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "一致するファイル システム情報オブジェクトの列挙可能なコレクション<code> searchPattern</code>です。"
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化された、パス、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>オブジェクトが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  id: EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定した検索パターンと検索のサブディレクトリのオプションに一致するファイル システム情報の列挙可能なコレクションを返します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ディレクトリの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作が現在のディレクトリのみまたはすべてのサブディレクトリを含めるかどうかを指定する列挙値の&1; つ。 既定値は<xref href=&quot;System.IO.SearchOption&quot;></xref>です。"
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "一致するファイル システム情報オブジェクトの列挙可能なコレクション<code> searchPattern </code>と<code> searchOption</code>です。"
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化された、パス、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>オブジェクトが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Exists
  id: Exists
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Exists
  nameWithType: DirectoryInfo.Exists
  fullName: System.IO.DirectoryInfo.Exists
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ディレクトリが存在するかどうかを示す値を取得します。"
  remarks: "Exists プロパティから返される`false`指定したファイルが存在するかどうかを判断するときにエラーが発生した場合。 これは無効な文字または文字が多すぎます、失敗、または見つからないディスクでは、ファイル名を渡すなどの例外が発生する状況で発生する、呼び出し元には、ファイルの読み取りアクセス許可がない場合またはします。"
  example:
  - "The following example demonstrates a use of the `Exists` property in the context of copying a source directory to a target directory.  \n  \n [!code-cpp[DirectoryInfo Usage Example#1](~/add/codesnippet/cpp/p-system.io.directoryinf_0_1.cpp)]\n [!code-cs[DirectoryInfo Usage Example#1](~/add/codesnippet/csharp/p-system.io.directoryinf_0_1.cs)]\n [!code-vb[DirectoryInfo Usage Example#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_0_1.vb)]"
  syntax:
    content: public override bool Exists { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ディレクトリが存在する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.DirectoryInfo.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetAccessControl
  id: GetAccessControl
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetAccessControl()
  nameWithType: DirectoryInfo.GetAccessControl()
  fullName: System.IO.DirectoryInfo.GetAccessControl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得、 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>現在によって記述されるディレクトリのアクセス制御リスト (ACL) エントリをカプセル化するオブジェクト<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>オブジェクト。"
  remarks: "このメソッドのオーバー ロードを呼び出すことは<xref:System.IO.Directory.GetAccessControl%2A>メソッド オーバー ロードを呼び出すと、アクセス制御のセクションでは<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>を指定することに相当 |<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> |<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> (<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> in Visual Basic).</xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.IO.Directory.GetAccessControl%2A>       GetAccessControl メソッドを使用すると、現在のファイルのアクセス制御リスト (ACL) エントリを取得できます。       ACL には、個人、グループ、または権限がない、指定したファイルまたはディレクトリの特定のアクションをユーザーがについて説明します。 詳細については、次を参照してください。[する方法: アクセス制御リスト エントリを追加または](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example uses the GetAccessControl and <xref:System.IO.DirectoryInfo.SetAccessControl%2A> methods to add and then remove an access control list (ACL) entry from a directory.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.directoryinf_14_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.directoryinf_14_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_14_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl ();
    parameters: []
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>ディレクトリのアクセス制御規則をカプセル化するオブジェクト。"
  overload: System.IO.DirectoryInfo.GetAccessControl*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "ディレクトリが見つからないか、変更します。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "ディレクトリは、読み取り専用です。       または、この操作は現在のプラットフォームでサポートされていません。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ディレクトリを開くときに I/O エラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムは Microsoft Windows 2000 以降ではありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  id: GetAccessControl(System.Security.AccessControl.AccessControlSections)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetAccessControl(AccessControlSections)
  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)
  fullName: System.IO.DirectoryInfo.GetAccessControl(AccessControlSections)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得、 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>現在によって記述されるディレクトリのアクセス制御リスト (ACL) エントリの指定した型をカプセル化するオブジェクト<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>オブジェクト。"
  remarks: "GetAccessControl メソッドを使用すると、現在のファイルのアクセス制御リスト (ACL) エントリを取得できます。       ACL には、個人、グループ、または権限がない、指定したファイルまたはディレクトリの特定のアクションをユーザーがについて説明します。 詳細については、次を参照してください。[する方法: アクセス制御リスト エントリを追加または](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref>アクセスの種類を指定する値を受け取るリスト (ACL) 情報を制御します。"
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>によって記述されるファイルの規則、アクセス制御をカプセル化するオブジェクト、 <code> path </code>パラメーター。       例外       <table><thead><tr><th> 例外の種類       </th><th> 条件       </th></tr></thead><tbody><tr><td><xref href=&quot;System.SystemException&quot;></xref></td><td> ディレクトリが見つからないか、変更します。       </td></tr><tr><td> <xref:System.UnauthorizedAccessException></xref:System.UnauthorizedAccessException>       </td><td> 現在のプロセスには、ディレクトリを開きへのアクセスはありません。       </td></tr><tr><td> <xref:System.IO.IOException></xref:System.IO.IOException>       </td><td> ディレクトリを開くときに I/O エラーが発生しました。       </td></tr><tr><td> <xref:System.PlatformNotSupportedException></xref:System.PlatformNotSupportedException>       </td><td> 現在のオペレーティング システムは Microsoft Windows 2000 以降ではありません。       </td></tr><tr><td> <xref:System.UnauthorizedAccessException></xref:System.UnauthorizedAccessException>       </td><td> ディレクトリは、読み取り専用です。       または、この操作は現在のプラットフォームでサポートされていません。       または、呼び出し元に必要なアクセス許可がありません。       </td></tr></tbody></table>"
  overload: System.IO.DirectoryInfo.GetAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories
  id: GetDirectories
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories()
  nameWithType: DirectoryInfo.GetDirectories()
  fullName: System.IO.DirectoryInfo.GetDirectories()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のディレクトリのサブディレクトリを返します。"
  remarks: "サブディレクトリが存在しない場合、このメソッドは空の配列を返します。 このメソッドは、再帰的ではありません。       このメソッドは、次の値を事前に入力<xref:System.IO.DirectoryInfo>プロパティ:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.DirectoryInfo>"
  example:
  - "The following example retrieves all the directories in the root directory and displays the directory names.  \n  \n [!code-cs[directoryinfogetdirectories#1](~/add/codesnippet/csharp/m-system.io.directoryinf_6_1.cs)]\n [!code-cpp[directoryinfogetdirectories#1](~/add/codesnippet/cpp/m-system.io.directoryinf_6_1.cpp)]\n [!code-vb[directoryinfogetdirectories#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_6_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories ();
    parameters: []
    return:
      type: System.IO.DirectoryInfo[]
      description: "配列<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>オブジェクト。"
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化されたパス、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>オブジェクトはマップされていないドライブにあるなど、無効です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories(String)
  nameWithType: DirectoryInfo.GetDirectories(String)
  fullName: System.IO.DirectoryInfo.GetDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のディレクトリの配列を返します<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>指定した検索条件に一致します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example counts the directories in a path that contain the specified letter.  \n  \n [!code-cpp[DirInfo GetDirs2#1](~/add/codesnippet/cpp/m-system.io.directoryinf_10_1.cpp)]\n [!code-cs[DirInfo GetDirs2#1](~/add/codesnippet/csharp/m-system.io.directoryinf_10_1.cs)]\n [!code-vb[DirInfo GetDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_10_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ディレクトリの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    return:
      type: System.IO.DirectoryInfo[]
      description: "型の配列<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>照合<code> searchPattern</code>です。"
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>によって定義された&1; つまたは複数の無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化された、パス、 <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref>オブジェクトが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  id: GetDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.GetDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetDirectories(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のディレクトリの配列を返します<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>指定した検索条件に一致して、サブディレクトリを検索するかどうかを決定する値を使用します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n If there are no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example lists all of the directories and files that begin with the letter \"c\" in \"c:\\\\\".  \n  \n [!code-cpp[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/cpp/m-system.io.directoryinf_0_1.cpp)]\n [!code-cs[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/csharp/m-system.io.directoryinf_0_1.cs)]\n [!code-vb[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/visualbasic/m-system.io.directoryinf_0_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ディレクトリの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作が現在のディレクトリのみまたはすべてのサブディレクトリを含めるかどうかを指定する列挙値の&1; つ。"
    return:
      type: System.IO.DirectoryInfo[]
      description: "型の配列<xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;></xref>照合<code> searchPattern</code>です。"
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>によって定義された&1; つまたは複数の無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "カプセル化された、パス、 <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref>オブジェクトが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles
  id: GetFiles
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles()
  nameWithType: DirectoryInfo.GetFiles()
  fullName: System.IO.DirectoryInfo.GetFiles()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のディレクトリからファイル一覧を返します。"
  remarks: "<xref:System.IO.DirectoryInfo.EnumerateFiles%2A>、GetFiles メソッドに次のように変わります: - 使用する場合<xref:System.IO.DirectoryInfo.EnumerateFiles%2A>のコレクションの列挙を開始する<xref:System.IO.FileInfo>オブジェクトのコレクション全体が返される前にします</xref:System.IO.FileInfo></xref:System.IO.DirectoryInfo.EnumerateFiles%2A></xref:System.IO.DirectoryInfo.EnumerateFiles%2A>。      -配列全体を待つ必要があります GetFiles を使用するときに<xref:System.IO.FileInfo>配列にアクセスする前に返されるオブジェクト</xref:System.IO.FileInfo>。       そのためとを扱う多くのファイルとディレクトリ、<xref:System.IO.DirectoryInfo.EnumerateFiles%2A>効率的であることができます</xref:System.IO.DirectoryInfo.EnumerateFiles%2A>。       内のファイルがない場合、 <xref:System.IO.DirectoryInfo>、このメソッドは、空の配列を返します</xref:System.IO.DirectoryInfo>。       返されるファイル名の順序は保証されません。使用して、<xref:System.Array.Sort%2A>メソッドの特定の並べ替え順序が必要な場合</xref:System.Array.Sort%2A>。       このメソッドは、次の値を事前に入力<xref:System.IO.FileInfo>プロパティ:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>- <xref:System.IO.FileInfo.Length%2A></xref:System.IO.FileInfo.Length%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileInfo>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_5_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_5_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles ();
    parameters: []
    return:
      type: System.IO.FileInfo[]
      description: "型の配列<xref href=&quot;System.IO.FileInfo&quot;></xref>です。"
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "パスがマップされていないドライブにあるなど、有効ではありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles(String)
  nameWithType: DirectoryInfo.GetFiles(String)
  fullName: System.IO.DirectoryInfo.GetFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定した検索パターンに一致する現在のディレクトリからファイル一覧を返します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The following wildcard specifiers are permitted in the `searchPattern` parameter.  \n  \n|Wildcard character|Description|  \n|------------------------|-----------------|  \n|*|Zero or more characters.|  \n|?|Exactly zero or one character.|  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n> [!NOTE]\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_12_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_12_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ファイルの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    return:
      type: System.IO.FileInfo[]
      description: "型の配列<xref href=&quot;System.IO.FileInfo&quot;></xref>です。"
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>によって定義された&1; つまたは複数の無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "パスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  id: GetFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles(String,SearchOption)
  nameWithType: DirectoryInfo.GetFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFiles(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定した検索パターンに一致して、サブディレクトリを検索するかどうかを決定する値を使用して現在のディレクトリからファイル一覧を返します。"
  remarks: "The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard character|Description|  \n|------------------------|-----------------|  \n|* (asterisk)|Zero or more characters.|  \n|? (question mark)|Exactly zero or one character.|  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n> [!NOTE]\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.  \n  \n The following list shows the behavior of different lengths for the `searchPattern` parameter:  \n  \n-   \"*.abc\" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.  \n  \n-   \"*.abcd\" returns only files having an extension of.abcd.  \n  \n-   \"*.abcde\" returns only files having an extension of.abcde.  \n  \n-   \"*.abcdef\" returns only files having an extension of.abcdef.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n1.  <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n2.  <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n3.  <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n4.  <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n5.  <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n6.  <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n7.  <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n8.  <xref:System.IO.FileInfo.Length%2A>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_13_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_13_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ファイルの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作が現在のディレクトリのみまたはすべてのサブディレクトリを含めるかどうかを指定する列挙値の&1; つ。"
    return:
      type: System.IO.FileInfo[]
      description: "型の配列<xref href=&quot;System.IO.FileInfo&quot;></xref>です。"
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>によって定義された&1; つまたは複数の無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "パスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos
  id: GetFileSystemInfos
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos()
  nameWithType: DirectoryInfo.GetFileSystemInfos()
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "厳密に型指定の配列を返します<xref href=&quot;System.IO.FileSystemInfo&quot;></xref>すべてのファイルとディレクトリのサブディレクトリを表すエントリです。"
  remarks: "ファイルまたはディレクトリがない場合、 <xref:System.IO.DirectoryInfo>、このメソッドは、空の配列を返します</xref:System.IO.DirectoryInfo>。 このメソッドは、再帰的ではありません。       <xref:System.IO.FileSystemInfo>このメソッドによって返されるオブジェクトは、派生クラス<xref:System.IO.DirectoryInfo>。</xref:System.IO.DirectoryInfo>にキャストできる</xref:System.IO.FileSystemInfo>サブディレクトリに対する 使用して、<xref:System.IO.FileAttributes>によって返される値、<xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName>プロパティを決定するかどうか、<xref:System.IO.FileSystemInfo>ファイルまたはディレクトリを表します</xref:System.IO.FileSystemInfo></xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName></xref:System.IO.FileAttributes>。       このメソッドは、次の値を事前に入力<xref:System.IO.FileSystemInfo>プロパティ:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileSystemInfo>"
  example:
  - "The following example counts the files and directories under the specified directory.  \n  \n [!code-vb[FSizeSort#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_3_1.vb)]\n [!code-cs[FSizeSort#1](~/add/codesnippet/csharp/m-system.io.directoryinf_3_1.cs)]"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos ();
    parameters: []
    return:
      type: System.IO.FileSystemInfo[]
      description: "配列が厳密に型指定<xref href=&quot;System.IO.FileSystemInfo&quot;></xref>エントリです。"
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "パスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  id: GetFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos(String)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "厳密に型指定の配列を取得<xref href=&quot;System.IO.FileSystemInfo&quot;></xref>ファイルおよび指定した検索条件に一致するサブディレクトリを表すオブジェクト。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n This method is not recursive.  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n Wild cards are permitted. For example, the `searchPattern` string \"*t\" searches for all directory names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all directory names in `path` beginning with the letter \"s\".  \n  \n The string \"..\" can only be used in `searchPattern` if it is specified as a part of a valid directory name, such as in the directory name \"a..b\". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example counts the files and directories that match the specified search pattern.  \n  \n [!code-cs[DirInfo GetFileSysInfos2#1](~/add/codesnippet/csharp/m-system.io.directoryinf_15_1.cs)]\n [!code-vb[DirInfo GetFileSysInfos2#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_15_1.vb)]"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ディレクトリおよびファイルの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    return:
      type: System.IO.FileSystemInfo[]
      description: "配列が厳密に型指定<xref uid=&quot;langword_csharp_FileSystemInfo&quot; name=&quot;FileSystemInfo&quot; href=&quot;&quot;></xref>検索条件に一致するオブジェクト。"
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>によって定義された&1; つまたは複数の無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  id: GetFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "配列を取得<xref href=&quot;System.IO.FileSystemInfo&quot;></xref>ファイルおよび指定した検索条件に一致するサブディレクトリを表すオブジェクト。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "ディレクトリおよびファイルの名前と照合する検索文字列。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。 既定のパターンは&quot;\\*&quot;、すべてのファイルが返されます。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作が現在のディレクトリのみまたはすべてのサブディレクトリを含めるかどうかを指定する列挙値の&1; つ。 既定値は<xref href=&quot;System.IO.SearchOption&quot;></xref>です。"
    return:
      type: System.IO.FileSystemInfo[]
      description: "検索条件に一致するファイル システム エントリの配列。"
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>によって定義された&1; つまたは複数の無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.MoveTo(System.String)
  id: MoveTo(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: MoveTo(String)
  nameWithType: DirectoryInfo.MoveTo(String)
  fullName: System.IO.DirectoryInfo.MoveTo(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "移動、 <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>インスタンスとその内容を新しいパスにします。"
  remarks: "This method throws an <xref:System.IO.IOException> if, for example, you try to move c:\\mydir to c:\\public, and c:\\public already exists. You must specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, or specify a new directory name such as \"c:\\\\\\newdir\".  \n  \n This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates moving a directory.  \n  \n [!code-cs[directoryinfomoveto#1](~/add/codesnippet/csharp/m-system.io.directoryinf_17_1.cs)]\n [!code-cpp[directoryinfomoveto#1](~/add/codesnippet/cpp/m-system.io.directoryinf_17_1.cpp)]\n [!code-vb[directoryinfomoveto#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_17_1.vb)]"
  syntax:
    content: public void MoveTo (string destDirName);
    parameters:
    - id: destDirName
      type: System.String
      description: "パスと名前にすると、このディレクトリに移動します。 変換先は、別のディスク ボリュームまたは同じ名前のディレクトリにすることはできません。 このディレクトリをサブディレクトリとして追加する既存のディレクトリがあります。"
  overload: System.IO.DirectoryInfo.MoveTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destDirName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destDirName</code>空の文字列 (&quot;&quot;) です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "別のボリュームにディレクトリを移動しようとしました。       - または - <code> destDirName </code>既に存在します。       または、このパスにアクセスする権限がありません。       または、移動するディレクトリおよびコピー先ディレクトリは、同じ名前を持ちます。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "コピー先ディレクトリが見つかりません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Name
  id: Name
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Name
  nameWithType: DirectoryInfo.Name
  fullName: System.IO.DirectoryInfo.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "この名前を取得<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>インスタンス。"
  remarks: "This Name property returns only the name of the directory, such as \"Bin\". To get the full path, such as \"c:\\public\\Bin\", use the <xref:System.IO.FileSystemInfo.FullName%2A> property.  \n  \n The Name property of a <xref:System.IO.DirectoryInfo> requires no permission (beyond the read permission to the directory necessary to construct the <xref:System.IO.DirectoryInfo.Exists%2A>) but can give out the directory name. If it is necessary to hand out a <xref:System.IO.DirectoryInfo> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example displays the name of the current `DirectoryInfo` instance only.  \n  \n [!code-cs[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/csharp/p-system.io.directoryinf_3_1.cs)]\n [!code-vb[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_3_1.vb)]\n [!code-cpp[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/cpp/p-system.io.directoryinf_3_1.cpp)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "ディレクトリ名。"
  overload: System.IO.DirectoryInfo.Name*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Parent
  id: Parent
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Parent
  nameWithType: DirectoryInfo.Parent
  fullName: System.IO.DirectoryInfo.Parent
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたサブディレクトリの親ディレクトリを取得します。"
  remarks: "共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates referring to the parent directory of a specified directory.  \n  \n [!code-cs[directoryinfoparent#1](~/add/codesnippet/csharp/p-system.io.directoryinf_1_1.cs)]\n [!code-vb[directoryinfoparent#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_1_1.vb)]\n [!code-cpp[directoryinfoparent#1](~/add/codesnippet/cpp/p-system.io.directoryinf_1_1.cpp)]"
  syntax:
    content: public System.IO.DirectoryInfo Parent { get; }
    return:
      type: System.IO.DirectoryInfo
      description: "親ディレクトリ。 または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>パスが null の場合、またはファイル パスがルートを表す場合 (など&quot;\\&quot;、&quot;c:&quot;、または *&quot;\\\\\\server\\share&quot;) です。"
  overload: System.IO.DirectoryInfo.Parent*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Root
  id: Root
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Root
  nameWithType: DirectoryInfo.Root
  fullName: System.IO.DirectoryInfo.Root
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ディレクトリのルート部分を取得します。"
  remarks: ''
  example:
  - "The following example displays root locations for specified directories.  \n  \n [!code-cs[directoryinforoot#2](~/add/codesnippet/csharp/p-system.io.directoryinf_2_1.cs)]\n [!code-vb[directoryinforoot#2](~/add/codesnippet/visualbasic/p-system.io.directoryinf_2_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo Root { get; }
    return:
      type: System.IO.DirectoryInfo
      description: "ディレクトリのルートを表すオブジェクト。"
  overload: System.IO.DirectoryInfo.Root*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  id: SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: SetAccessControl(DirectorySecurity)
  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.SetAccessControl(DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "示すアクセス制御リスト (ACL) エントリを適用する<xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref>現在によって記述されるディレクトリ オブジェクト<xref href=&quot;System.IO.DirectoryInfo&quot;></xref>オブジェクト。"
  remarks: "アクセス制御リスト (ACL) には、個人、グループ、または権限がない、指定したファイルまたはディレクトリの特定のアクションをユーザーがについて説明します。 詳細については、次を参照してください。[する方法: アクセス制御リスト エントリを追加または](~/add/includes/ajax-current-ext-md.md)です。       SetAccessControl メソッドでは、ACL エントリを継承されない ACL リストを表すファイルに適用されます。      > [!CAUTION] >、ACL に指定された`directorySecurity`ディレクトリの既存の ACL を置き換えます。 新しいユーザーのアクセス許可を追加するには、<xref:System.IO.DirectoryInfo.GetAccessControl%2A>既存の ACL を取得し、それを変更する方法</xref:System.IO.DirectoryInfo.GetAccessControl%2A>を使用します。       SetAccessControl メソッドにのみが引き続き発生する<xref:System.Security.AccessControl.DirectorySecurity>オブジェクトがオブジェクトの作成後に変更されました</xref:System.Security.AccessControl.DirectorySecurity>。  場合、<xref:System.Security.AccessControl.DirectorySecurity>オブジェクトが変更されていない、ファイルに永続化はできません</xref:System.Security.AccessControl.DirectorySecurity>。  したがって、取得することはありません、 <xref:System.Security.AccessControl.DirectorySecurity>1 つのファイルからオブジェクトを別のファイルを同じオブジェクトを再適用します</xref:System.Security.AccessControl.DirectorySecurity>。       ACL の情報を別の 1 つのファイルにコピーする: 1。  使用して、<xref:System.IO.DirectoryInfo.GetAccessControl%2A>を取得する方法、<xref:System.Security.AccessControl.DirectorySecurity>ソース ファイルからのオブジェクト</xref:System.Security.AccessControl.DirectorySecurity></xref:System.IO.DirectoryInfo.GetAccessControl%2A>。      2.  新しい<xref:System.Security.AccessControl.DirectorySecurity>先のファイル オブジェクト</xref:System.Security.AccessControl.DirectorySecurity>。      3.  使用して、<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>または<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>メソッドのソースの<xref:System.Security.AccessControl.DirectorySecurity>ACL 情報を取得するオブジェクト</xref:System.Security.AccessControl.DirectorySecurity></xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A></xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>。      4.  使用して、<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>または<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>、情報をコピーするメソッドが変換先には、手順 3. で取得<xref:System.Security.AccessControl.DirectorySecurity>オブジェクト</xref:System.Security.AccessControl.DirectorySecurity></xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A></xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>。      5.  出力先を設定<xref:System.Security.AccessControl.DirectorySecurity>SetAccessControl メソッドを使用して変換先ファイルへのオブジェクト</xref:System.Security.AccessControl.DirectorySecurity>。"
  example:
  - "The following example uses the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> and SetAccessControl methods to add and then remove an access control list (ACL) entry from a directory.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/d8d660a0-50f5-42be-9101-_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/d8d660a0-50f5-42be-9101-_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/d8d660a0-50f5-42be-9101-_1.vb)]"
  syntax:
    content: public void SetAccessControl (System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "によって記述されるディレクトリに適用する ACL エントリを記述するオブジェクト、`path`パラメーター。"
  overload: System.IO.DirectoryInfo.SetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>directorySecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "ファイルが見つからないか、変更します。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "現在のプロセスには、ファイルを開くアクセスはありません。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムは Microsoft Windows 2000 以降ではありません。"
  platform:
  - net462
- uid: System.IO.DirectoryInfo.ToString
  id: ToString
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: DirectoryInfo.ToString()
  fullName: System.IO.DirectoryInfo.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ユーザーによって渡された元のパスを返します。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "ユーザーによって渡された元のパスを返します。"
  overload: System.IO.DirectoryInfo.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IO.FileSystemInfo
  isExternal: false
  name: System.IO.FileSystemInfo
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.DirectoryInfo.#ctor(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: DirectoryInfo(String)
  nameWithType: DirectoryInfo.DirectoryInfo(String)
  fullName: System.IO.DirectoryInfo.DirectoryInfo(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.DirectoryInfo.Create
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create()
  nameWithType: DirectoryInfo.Create()
  fullName: System.IO.DirectoryInfo.Create()
- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create(DirectorySecurity)
  nameWithType: DirectoryInfo.Create(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.Create(DirectorySecurity)
- uid: System.Security.AccessControl.DirectorySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory(String)
  nameWithType: DirectoryInfo.CreateSubdirectory(String)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String)
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory(String,DirectorySecurity)
  nameWithType: DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
- uid: System.IO.DirectoryInfo.Delete
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete()
  nameWithType: DirectoryInfo.Delete()
  fullName: System.IO.DirectoryInfo.Delete()
- uid: System.IO.DirectoryInfo.Delete(System.Boolean)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete(Boolean)
  nameWithType: DirectoryInfo.Delete(Boolean)
  fullName: System.IO.DirectoryInfo.Delete(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.DirectoryInfo.EnumerateDirectories
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories()
  nameWithType: DirectoryInfo.EnumerateDirectories()
  fullName: System.IO.DirectoryInfo.EnumerateDirectories()
- uid: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<DirectoryInfo>
  nameWithType: IEnumerable<DirectoryInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.DirectoryInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    nameWithType: DirectoryInfo
    fullName: DirectoryInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories(String)
  nameWithType: DirectoryInfo.EnumerateDirectories(String)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String)
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String,SearchOption)
- uid: System.IO.SearchOption
  parent: System.IO
  isExternal: false
  name: SearchOption
  nameWithType: SearchOption
  fullName: System.IO.SearchOption
- uid: System.IO.DirectoryInfo.EnumerateFiles
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles()
  nameWithType: DirectoryInfo.EnumerateFiles()
  fullName: System.IO.DirectoryInfo.EnumerateFiles()
- uid: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<FileInfo>
  nameWithType: IEnumerable<FileInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.FileInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: FileInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles(String)
  nameWithType: DirectoryInfo.EnumerateFiles(String)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String)
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String,SearchOption)
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos()
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()
- uid: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<FileSystemInfo>
  nameWithType: IEnumerable<FileSystemInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.FileSystemInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    nameWithType: FileSystemInfo
    fullName: FileSystemInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos(String)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String)
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
- uid: System.IO.DirectoryInfo.Exists
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Exists
  nameWithType: DirectoryInfo.Exists
  fullName: System.IO.DirectoryInfo.Exists
- uid: System.IO.DirectoryInfo.GetAccessControl
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl()
  nameWithType: DirectoryInfo.GetAccessControl()
  fullName: System.IO.DirectoryInfo.GetAccessControl()
- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl(AccessControlSections)
  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)
  fullName: System.IO.DirectoryInfo.GetAccessControl(AccessControlSections)
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.IO.DirectoryInfo.GetDirectories
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories()
  nameWithType: DirectoryInfo.GetDirectories()
  fullName: System.IO.DirectoryInfo.GetDirectories()
- uid: System.IO.DirectoryInfo[]
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo[]
  spec.csharp:
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    nameWithType: DirectoryInfo
    fullName: DirectoryInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetDirectories(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories(String)
  nameWithType: DirectoryInfo.GetDirectories(String)
  fullName: System.IO.DirectoryInfo.GetDirectories(String)
- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.GetDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetDirectories(String,SearchOption)
- uid: System.IO.DirectoryInfo.GetFiles
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles()
  nameWithType: DirectoryInfo.GetFiles()
  fullName: System.IO.DirectoryInfo.GetFiles()
- uid: System.IO.FileInfo[]
  parent: System.IO
  isExternal: false
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo[]
  spec.csharp:
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: FileInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetFiles(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles(String)
  nameWithType: DirectoryInfo.GetFiles(String)
  fullName: System.IO.DirectoryInfo.GetFiles(String)
- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles(String,SearchOption)
  nameWithType: DirectoryInfo.GetFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFiles(String,SearchOption)
- uid: System.IO.DirectoryInfo.GetFileSystemInfos
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos()
  nameWithType: DirectoryInfo.GetFileSystemInfos()
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()
- uid: System.IO.FileSystemInfo[]
  parent: System.IO
  isExternal: false
  name: FileSystemInfo
  nameWithType: FileSystemInfo
  fullName: System.IO.FileSystemInfo[]
  spec.csharp:
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    nameWithType: FileSystemInfo
    fullName: FileSystemInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos(String)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String)
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String,SearchOption)
- uid: System.IO.DirectoryInfo.MoveTo(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: MoveTo(String)
  nameWithType: DirectoryInfo.MoveTo(String)
  fullName: System.IO.DirectoryInfo.MoveTo(String)
- uid: System.IO.DirectoryInfo.Name
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Name
  nameWithType: DirectoryInfo.Name
  fullName: System.IO.DirectoryInfo.Name
- uid: System.IO.DirectoryInfo.Parent
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Parent
  nameWithType: DirectoryInfo.Parent
  fullName: System.IO.DirectoryInfo.Parent
- uid: System.IO.DirectoryInfo.Root
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Root
  nameWithType: DirectoryInfo.Root
  fullName: System.IO.DirectoryInfo.Root
- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: SetAccessControl(DirectorySecurity)
  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.SetAccessControl(DirectorySecurity)
- uid: System.IO.DirectoryInfo.ToString
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: ToString()
  nameWithType: DirectoryInfo.ToString()
  fullName: System.IO.DirectoryInfo.ToString()
- uid: System.IO.DirectoryInfo.#ctor*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo.DirectoryInfo
- uid: System.IO.DirectoryInfo.Create*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create
  nameWithType: DirectoryInfo.Create
- uid: System.IO.DirectoryInfo.CreateSubdirectory*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory
  nameWithType: DirectoryInfo.CreateSubdirectory
- uid: System.IO.DirectoryInfo.Delete*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete
  nameWithType: DirectoryInfo.Delete
- uid: System.IO.DirectoryInfo.EnumerateDirectories*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories
  nameWithType: DirectoryInfo.EnumerateDirectories
- uid: System.IO.DirectoryInfo.EnumerateFiles*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles
  nameWithType: DirectoryInfo.EnumerateFiles
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos
- uid: System.IO.DirectoryInfo.Exists*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Exists
  nameWithType: DirectoryInfo.Exists
- uid: System.IO.DirectoryInfo.GetAccessControl*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl
  nameWithType: DirectoryInfo.GetAccessControl
- uid: System.IO.DirectoryInfo.GetDirectories*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories
  nameWithType: DirectoryInfo.GetDirectories
- uid: System.IO.DirectoryInfo.GetFiles*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles
  nameWithType: DirectoryInfo.GetFiles
- uid: System.IO.DirectoryInfo.GetFileSystemInfos*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos
  nameWithType: DirectoryInfo.GetFileSystemInfos
- uid: System.IO.DirectoryInfo.MoveTo*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: MoveTo
  nameWithType: DirectoryInfo.MoveTo
- uid: System.IO.DirectoryInfo.Name*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Name
  nameWithType: DirectoryInfo.Name
- uid: System.IO.DirectoryInfo.Parent*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Parent
  nameWithType: DirectoryInfo.Parent
- uid: System.IO.DirectoryInfo.Root*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Root
  nameWithType: DirectoryInfo.Root
- uid: System.IO.DirectoryInfo.SetAccessControl*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: SetAccessControl
  nameWithType: DirectoryInfo.SetAccessControl
- uid: System.IO.DirectoryInfo.ToString*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: ToString
  nameWithType: DirectoryInfo.ToString
