### YamlMime:ManagedReference
items:
- uid: System.Activities.Presentation.Hosting.ReadOnlyState
  id: ReadOnlyState
  children:
  - System.Activities.Presentation.Hosting.ReadOnlyState.#ctor
  - System.Activities.Presentation.Hosting.ReadOnlyState.IsReadOnly
  - System.Activities.Presentation.Hosting.ReadOnlyState.ItemType
  langs:
  - csharp
  name: ReadOnlyState
  nameWithType: ReadOnlyState
  fullName: System.Activities.Presentation.Hosting.ReadOnlyState
  type: Class
  summary: "表す、 <xref href=&quot;System.Activities.Presentation.ContextItem&quot;> </xref>編集コンテキストに発行してを示すかどうか、[!INCLUDE[wf2](~/add/includes/wf2-md.md)]デザイナーが読み取り専用の状態。"
  remarks: "ビジュアル要素が読み取り専用状態で異なる動作を提供するためにこのプロパティにバインドできます (など、<xref:System.Activities.Presentation.View.ExpressionTextBox>編集を禁止し、状態を&quot;Disabled&quot;に設定).</xref:System.Activities.Presentation.View.ExpressionTextBox> 場合、ホスト アプリケーションは、デザイナーを読み取り専用の状態に設定するこの<xref:System.Activities.Presentation.ContextItem>取得できるに設定することができます`false`</xref:System.Activities.Presentation.ContextItem>。"
  syntax:
    content: 'public sealed class ReadOnlyState : System.Activities.Presentation.ContextItem'
  inheritance:
  - System.Object
  - System.Activities.Presentation.ContextItem
  implements: []
  inheritedMembers:
  - System.Activities.Presentation.ContextItem.OnItemChanged(System.Activities.Presentation.EditingContext,System.Activities.Presentation.ContextItem)
  platform:
  - net462
- uid: System.Activities.Presentation.Hosting.ReadOnlyState.#ctor
  id: '#ctor'
  parent: System.Activities.Presentation.Hosting.ReadOnlyState
  langs:
  - csharp
  name: ReadOnlyState()
  nameWithType: ReadOnlyState.ReadOnlyState()
  fullName: System.Activities.Presentation.Hosting.ReadOnlyState.ReadOnlyState()
  type: Constructor
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Hosting
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Activities.Presentation.Hosting.ReadOnlyState&quot;> </xref>クラスです。"
  syntax:
    content: public ReadOnlyState ();
    parameters: []
  overload: System.Activities.Presentation.Hosting.ReadOnlyState.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Hosting.ReadOnlyState.IsReadOnly
  id: IsReadOnly
  parent: System.Activities.Presentation.Hosting.ReadOnlyState
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ReadOnlyState.IsReadOnly
  fullName: System.Activities.Presentation.Hosting.ReadOnlyState.IsReadOnly
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Hosting
  summary: "オブジェクトは読み取り専用であるかどうかを示す値を取得します。"
  syntax:
    content: public bool IsReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>オブジェクトが読み取り専用である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Activities.Presentation.Hosting.ReadOnlyState.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Hosting.ReadOnlyState.ItemType
  id: ItemType
  parent: System.Activities.Presentation.Hosting.ReadOnlyState
  langs:
  - csharp
  name: ItemType
  nameWithType: ReadOnlyState.ItemType
  fullName: System.Activities.Presentation.Hosting.ReadOnlyState.ItemType
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Hosting
  summary: "現在のオブジェクトの種類を取得します。"
  syntax:
    content: public override Type ItemType { get; }
    return:
      type: System.Type
      description: "返します<xref:System.Type>。</xref:System.Type>"
  overload: System.Activities.Presentation.Hosting.ReadOnlyState.ItemType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.Presentation.ContextItem
  isExternal: false
  name: System.Activities.Presentation.ContextItem
- uid: System.Activities.Presentation.Hosting.ReadOnlyState.#ctor
  parent: System.Activities.Presentation.Hosting.ReadOnlyState
  isExternal: false
  name: ReadOnlyState()
  nameWithType: ReadOnlyState.ReadOnlyState()
  fullName: System.Activities.Presentation.Hosting.ReadOnlyState.ReadOnlyState()
- uid: System.Activities.Presentation.Hosting.ReadOnlyState.IsReadOnly
  parent: System.Activities.Presentation.Hosting.ReadOnlyState
  isExternal: false
  name: IsReadOnly
  nameWithType: ReadOnlyState.IsReadOnly
  fullName: System.Activities.Presentation.Hosting.ReadOnlyState.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.Presentation.Hosting.ReadOnlyState.ItemType
  parent: System.Activities.Presentation.Hosting.ReadOnlyState
  isExternal: false
  name: ItemType
  nameWithType: ReadOnlyState.ItemType
  fullName: System.Activities.Presentation.Hosting.ReadOnlyState.ItemType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Activities.Presentation.Hosting.ReadOnlyState.#ctor*
  parent: System.Activities.Presentation.Hosting.ReadOnlyState
  isExternal: false
  name: ReadOnlyState
  nameWithType: ReadOnlyState.ReadOnlyState
- uid: System.Activities.Presentation.Hosting.ReadOnlyState.IsReadOnly*
  parent: System.Activities.Presentation.Hosting.ReadOnlyState
  isExternal: false
  name: IsReadOnly
  nameWithType: ReadOnlyState.IsReadOnly
- uid: System.Activities.Presentation.Hosting.ReadOnlyState.ItemType*
  parent: System.Activities.Presentation.Hosting.ReadOnlyState
  isExternal: false
  name: ItemType
  nameWithType: ReadOnlyState.ItemType
