### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.PackageStore
  id: PackageStore
  children:
  - System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)
  - System.IO.Packaging.PackageStore.GetPackage(System.Uri)
  - System.IO.Packaging.PackageStore.RemovePackage(System.Uri)
  langs:
  - csharp
  name: PackageStore
  nameWithType: PackageStore
  fullName: System.IO.Packaging.PackageStore
  type: Class
  summary: "アプリケーション固有のコレクションを表します<xref href=&quot;System.IO.Packaging.Package&quot;></xref>と組み合わせて使用されるインスタンス<xref href=&quot;System.IO.Packaging.PackWebRequest&quot;></xref>です。"
  remarks: "PackageStore では、開いていると、アプリケーションでアクティブであるパッケージの参照のコレクションを定義します。  PackageStore に追加されたパッケージ アクセスは、キーの URI 値です。  次の 3 つの一般的な使用をサポートする、PackageStore: 1。  <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackWebRequest>。</xref:System.IO.Packaging.PackWebRequest>を介してデータ</xref:System.IO.Packaging.PackagePart>にアクセスします。      2.  インスタンスを取得するアプリケーション、<xref:System.IO.Packaging.Package>パッケージの URI を指定します</xref:System.IO.Packaging.Package>。      3.  作成および<xref:System.IO.MemoryStream>。</xref:System.IO.MemoryStream>に格納されるパッケージにアクセスします。       パフォーマンスが向上し、繰り返されるファイルを開く/閉じる操作のオーバーヘッドを最小限に抑える、PackageStore を使用してアクセスするパッケージのインスタンスを管理<xref:System.IO.Packaging.PackWebRequest>とアプリケーションによって直接</xref:System.IO.Packaging.PackWebRequest>。  パッケージでは、データにアクセスするときに、 <xref:System.IO.Packaging.Package>、要求されたアドレス<xref:System.IO.Packaging.PackagePart><xref:System.IO.Packaging.PackagePart.Uri%2A>が最初にチェックするかどうか、パッケージは既に定義されていると、PackageStore で開いているを参照してください</xref:System.IO.Packaging.PackagePart.Uri%2A></xref:System.IO.Packaging.PackagePart></xref:System.IO.Packaging.Package>。  パッケージが、PackageStore で開いてとして定義されている場合、要求された部分は繰り返しタグと終了要求ごとに、パッケージに直接アクセスできます。       アプリケーションが使用してパッケージを開いた場合<xref:System.IO.Packaging.Package.Open%2A?displayProperty=fullName>、 <xref:System.IO.Packaging.PackageStore.AddPackage%2A>、PackageStore にパッケージを追加するに呼び出せることができます</xref:System.IO.Packaging.PackageStore.AddPackage%2A></xref:System.IO.Packaging.Package.Open%2A?displayProperty=fullName>。  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>後でからを削除するパッケージ PackageStore <xref:System.IO.Packaging.Package.Close%2A?displayProperty=fullName>。</xref:System.IO.Packaging.Package.Close%2A?displayProperty=fullName>を呼び出す前に呼び出す必要があります。</xref:System.IO.Packaging.PackageStore.RemovePackage%2A>       XPS パッケージを開くと、<xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>コンス トラクターが自動的に追加され、ドキュメントの作成し、破棄されるときに、PackageStore から削除します</xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>。  (を呼び出す必要はありません<xref:System.IO.Packaging.PackageStore.AddPackage%2A>または<xref:System.IO.Packaging.PackageStore.RemovePackage%2A>で XPS パッケージが開かれたのとは別に<xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>コンス トラクターです)</xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> </xref:System.IO.Packaging.PackageStore.RemovePackage%2A> </xref:System.IO.Packaging.PackageStore.AddPackage%2A> 。     PackageStore を通じてアクセス パッケージのファイル I/O アクセス許可は、開かれたときに、パッケージに設定する I/O のアクセス許可と同じになります。  のみ、PackageStore は、ストアに追加されているパッケージへの参照を提供します。  アプリケーションを正しく開く、更新、および各パッケージの終了の責任です。       組み合わせて使用している場合、PackageStore に追加されたパッケージは、マルチ スレッド環境でアクセスできる、 [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>.</xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>などパーサー  マルチ スレッド環境で使用する場合、アプリケーションがアクセスする前に、パッケージをロックする必要があります。"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public static class PackageStore
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)
  id: AddPackage(System.Uri,System.IO.Packaging.Package)
  parent: System.IO.Packaging.PackageStore
  langs:
  - csharp
  name: AddPackage(Uri,Package)
  nameWithType: PackageStore.AddPackage(Uri,Package)
  fullName: System.IO.Packaging.PackageStore.AddPackage(Uri,Package)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.IO.Packaging
  summary: "追加、 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref>ストアにします。"
  remarks: "`packageUri`パッケージのキー <xref:System.IO.Packaging.PackWebRequest>。</xref:System.IO.Packaging.PackWebRequest>を呼び出す場合と比較される URI を定義します。       場合、 `packageUri` <xref:System.IO.Packaging.PackagePart.Uri%2A><xref:System.IO.Packaging.PackagePart><xref:System.IO.Packaging.PackWebRequest>呼び出し、<xref:System.IO.Packaging.PackageStore>要求されたパーツにアクセスするために使用</xref:System.IO.Packaging.PackageStore>で定義されているパッケージ</xref:System.IO.Packaging.PackWebRequest>で</xref:System.IO.Packaging.PackagePart></xref:System.IO.Packaging.PackagePart.Uri%2A>一致します。       場合、 `packageUri` <xref:System.IO.Packaging.PackagePart.Uri%2A><xref:System.IO.Packaging.PackagePart>で<xref:System.IO.Packaging.PackWebRequest>要求されたパーツにアクセスする呼び出し、指定した URI を使用してパッケージが開かれる</xref:System.IO.Packaging.PackWebRequest></xref:System.IO.Packaging.PackagePart></xref:System.IO.Packaging.PackagePart.Uri%2A>と一致しません       **セキュリティに関する注意**このメソッドが要求<xref:System.Security.Permissions.EnvironmentPermission>すべてカスタム<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 型です</xref:System.IO.Packaging.ZipPackage></xref:System.IO.Packaging.Package></xref:System.Security.Permissions.EnvironmentPermission>。"
  example:
  - "The following example shows how to use the AddPackage method.  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewdecrypt)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewDecrypt](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewdecrypt)]"
  syntax:
    content: public static void AddPackage (Uri uri, System.IO.Packaging.Package package);
    parameters:
    - id: uri
      type: System.Uri
      description: "キー[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]の`package`で比較する、 <xref href=&quot;System.IO.Packaging.PackWebRequest&quot;></xref>です。"
    - id: package
      type: System.IO.Packaging.Package
      description: "ストアに追加するパッケージ。"
  overload: System.IO.Packaging.PackageStore.AddPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>package</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>packageUri</code>無効なパッケージ[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定したパッケージ<code> packageUri </code>は既にストアにします。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageStore.GetPackage(System.Uri)
  id: GetPackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  langs:
  - csharp
  name: GetPackage(Uri)
  nameWithType: PackageStore.GetPackage(Uri)
  fullName: System.IO.Packaging.PackageStore.GetPackage(Uri)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.IO.Packaging
  summary: "返します、 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref>と指定した[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]ストアからです。"
  remarks: "`packageUri`Uri が一致の指定した、<xref:System.IO.Packaging.PackageStore.AddPackage%2A>メソッドの呼び出し</xref:System.IO.Packaging.PackageStore.AddPackage%2A>。       **セキュリティに関する注意**このメソッドが要求<xref:System.Security.Permissions.EnvironmentPermission>すべてカスタム<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 型です</xref:System.IO.Packaging.ZipPackage></xref:System.IO.Packaging.Package></xref:System.Security.Permissions.EnvironmentPermission>。"
  example:
  - "The following example shows how to use the GetPackage method.  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewopendoc)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewopendoc)]"
  syntax:
    content: public static System.IO.Packaging.Package GetPackage (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]を返すパッケージのです。"
    return:
      type: System.IO.Packaging.Package
      description: "指定したパッケージ<code> packageUri </code>; または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>場合に、指定したパッケージは、 <code> packageUri </code>は、ストアにありません。"
  overload: System.IO.Packaging.PackageStore.GetPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>packageUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>packageUri</code>無効なパッケージ[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]です。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageStore.RemovePackage(System.Uri)
  id: RemovePackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  langs:
  - csharp
  name: RemovePackage(Uri)
  nameWithType: PackageStore.RemovePackage(Uri)
  fullName: System.IO.Packaging.PackageStore.RemovePackage(Uri)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.IO.Packaging
  summary: "削除、 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref>と指定した[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]ストアからです。"
  remarks: "`packageUri`Uri が一致の指定した、<xref:System.IO.Packaging.PackageStore.AddPackage%2A>メソッドの呼び出し</xref:System.IO.Packaging.PackageStore.AddPackage%2A>。       **セキュリティに関する注意**このメソッドが要求<xref:System.Security.Permissions.EnvironmentPermission>すべてカスタム<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 型です</xref:System.IO.Packaging.ZipPackage></xref:System.IO.Packaging.Package></xref:System.Security.Permissions.EnvironmentPermission>。"
  example:
  - "The following example shows how to use the RemovePackage method.  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewclosedoc)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewclosedoc)]"
  syntax:
    content: public static void RemovePackage (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]のパッケージを削除します。"
  overload: System.IO.Packaging.PackageStore.RemovePackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>packageUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>packageUri</code>無効なパッケージ[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: AddPackage(Uri,Package)
  nameWithType: PackageStore.AddPackage(Uri,Package)
  fullName: System.IO.Packaging.PackageStore.AddPackage(Uri,Package)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.PackageStore.GetPackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: GetPackage(Uri)
  nameWithType: PackageStore.GetPackage(Uri)
  fullName: System.IO.Packaging.PackageStore.GetPackage(Uri)
- uid: System.IO.Packaging.PackageStore.RemovePackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: RemovePackage(Uri)
  nameWithType: PackageStore.RemovePackage(Uri)
  fullName: System.IO.Packaging.PackageStore.RemovePackage(Uri)
- uid: System.IO.Packaging.PackageStore.AddPackage*
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: AddPackage
  nameWithType: PackageStore.AddPackage
- uid: System.IO.Packaging.PackageStore.GetPackage*
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: GetPackage
  nameWithType: PackageStore.GetPackage
- uid: System.IO.Packaging.PackageStore.RemovePackage*
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: RemovePackage
  nameWithType: PackageStore.RemovePackage
