### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Scope
  id: Scope
  children:
  - System.IdentityModel.Scope.#ctor
  - System.IdentityModel.Scope.#ctor(System.String)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  - System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  - System.IdentityModel.Scope.AppliesToAddress
  - System.IdentityModel.Scope.EncryptingCredentials
  - System.IdentityModel.Scope.Properties
  - System.IdentityModel.Scope.ReplyToAddress
  - System.IdentityModel.Scope.SigningCredentials
  - System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  - System.IdentityModel.Scope.TokenEncryptionRequired
  langs:
  - csharp
  name: Scope
  nameWithType: Scope
  fullName: System.IdentityModel.Scope
  type: Class
  summary: "トークン発行要求の構成を表します。"
  remarks: "スコープのクラスは、証明書利用者 (RP) セキュリティ トークン要求 (RST) に関連付けられているに関する情報をカプセル化します。 実装でこの情報を使用、<xref:System.IdentityModel.SecurityTokenService>セキュリティ トークン要求 (RST) を応答 (RSTR) を返すために、トークンの発行パイプライン内のクラス (STS).</xref:System.IdentityModel.SecurityTokenService>       オブジェクト スコープにはには、RP、暗号化および署名資格情報を使って発行されたセキュリティ トークンのアドレスに関する情報が含まれてし、トークンを暗号化するかによって発行されたトークン自体または対称キーかどうか。 既定では、トークンと対称キーの両方が暗号化されます。 トークンの種類、RP によって受け入れられる既定のトークンの有効期間、最大のトークンの有効期間、RP、およびな; によって使用されるアルゴリズム スイートなどの要求に関する追加情報を伝達するスコープのクラスを拡張することができます。ただし、このクラスにカプセル化された情報は、個々 の要求の必要があります変わりません。       トークンの発行パイプラインの実装、<xref:System.IdentityModel.SecurityTokenService.Issue%2A>このメソッドを呼び出す、 <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>RST の構成を取得するメソッド</xref:System.IdentityModel.SecurityTokenService.GetScope%2A></xref:System.IdentityModel.SecurityTokenService.Issue%2A>。 実装する必要があります、<xref:System.IdentityModel.SecurityTokenService.GetScope%2A>メソッドで、カスタム STS と RP と STS の実装に適したスコープ オブジェクトを返します</xref:System.IdentityModel.SecurityTokenService.GetScope%2A>。"
  syntax:
    content: public class Scope
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope()
  nameWithType: Scope.Scope()
  fullName: System.IdentityModel.Scope.Scope()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref>クラスです。"
  remarks: "次の表は、新しい初期プロパティ値を示します<xref:System.IdentityModel.Scope>インスタンス</xref:System.IdentityModel.Scope>。      |プロパティ |値 |。  |--------------|------------|  |<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|`null` .|  |<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|  |<xref:System.IdentityModel.Scope.Properties%2A>|空のディクショナリ |。  |<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|  |<xref:System.IdentityModel.Scope.SigningCredentials%2A>|`null`.|  |<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|  |<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope ();
    parameters: []
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String)
  nameWithType: Scope.Scope(String)
  fullName: System.IdentityModel.Scope.Scope(String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref>指定された appliesTo アドレスを持つクラス。"
  remarks: "次の表は、新しい初期プロパティ値を示します<xref:System.IdentityModel.Scope>インスタンス</xref:System.IdentityModel.Scope>。      |プロパティ |値 |。  |--------------|------------|  |<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|値、`appliesToAddress`パラメーターです |。  |<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|  |<xref:System.IdentityModel.Scope.Properties%2A>|空のディクショナリ |。  |<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|  |<xref:System.IdentityModel.Scope.SigningCredentials%2A>|`null`.|  |<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|  |<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "証明書利用者の appliesTo アドレスです。 通常は URI です。"
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,EncryptingCredentials)
  nameWithType: Scope.Scope(String,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref>クラスの指定された appliesTo アドレスを使用し、資格情報を暗号化します。"
  remarks: "次の表は、新しい初期プロパティ値を示します<xref:System.IdentityModel.Scope>インスタンス</xref:System.IdentityModel.Scope>。      |プロパティ |値 |。  |--------------|------------|  |<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|値、`appliesToAddress`パラメーターです |。  |<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|  |<xref:System.IdentityModel.Scope.Properties%2A>|空のディクショナリ |。  |<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|  |<xref:System.IdentityModel.Scope.SigningCredentials%2A>|値、`signingCredentials`パラメーターです |。  |<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|  |<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "証明書利用者の appliesTo アドレスです。 通常は URI です。"
    - id: encryptingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "暗号化に証明書利用者の資格情報。"
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,SigningCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref>指定された appliesTo アドレスを持つクラスし、資格情報に署名します。"
  remarks: "次の表は、新しい初期プロパティ値を示します<xref:System.IdentityModel.Scope>インスタンス</xref:System.IdentityModel.Scope>。      |プロパティ |値 |。  |--------------|------------|  |<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|値、`appliesToAddress`パラメーターです |。  |<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|`null`.|  |<xref:System.IdentityModel.Scope.Properties%2A>|空のディクショナリ |。  |<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|  |<xref:System.IdentityModel.Scope.SigningCredentials%2A>|値、`signingCredentials`パラメーターです |。  |<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|  |<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.SigningCredentials signingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "証明書利用者の appliesTo アドレスです。 通常は URI です。"
    - id: signingCredentials
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "証明書利用者の署名資格情報。"
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  id: '#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)'
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Scope(String,SigningCredentials,EncryptingCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> 、資格情報の署名と資格情報の暗号化、指定された appliesTo アドレスを持つクラス。"
  remarks: "次の表は、新しい初期プロパティ値を示します<xref:System.IdentityModel.Scope>インスタンス</xref:System.IdentityModel.Scope>。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.IdentityModel.Scope.AppliesToAddress%2A>|値、`appliesToAddress`パラメーターです |。  |<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>|値、`encryptingCredentials`パラメーターです |。  |<xref:System.IdentityModel.Scope.Properties%2A>|空のディクショナリ |。  |<xref:System.IdentityModel.Scope.ReplyToAddress%2A>|`null`.|  |<xref:System.IdentityModel.Scope.SigningCredentials%2A>|値、`signingCredentials`パラメーターです |。  |<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>|`true`.|  |<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>|`true`.|</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.SigningCredentials%2A></xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.Properties%2A></xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  syntax:
    content: public Scope (string appliesToAddress, System.IdentityModel.Tokens.SigningCredentials signingCredentials, System.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);
    parameters:
    - id: appliesToAddress
      type: System.String
      description: "証明書利用者の appliesTo アドレスです。 通常は URI です。"
    - id: signingCredentials
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "証明書利用者の署名資格情報。"
    - id: encryptingCredentials
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "暗号化に証明書利用者の資格情報。"
  overload: System.IdentityModel.Scope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.AppliesToAddress
  id: AppliesToAddress
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
  fullName: System.IdentityModel.Scope.AppliesToAddress
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得または証明書利用者の appliesTo アドレスを設定します。"
  syntax:
    content: public virtual string AppliesToAddress { get; set; }
    return:
      type: System.String
      description: "証明書利用者の appliesTo アドレスです。 通常は URI です。"
  overload: System.IdentityModel.Scope.AppliesToAddress*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.EncryptingCredentials
  id: EncryptingCredentials
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
  fullName: System.IdentityModel.Scope.EncryptingCredentials
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得または証明書利用者の暗号化の資格情報を設定します。"
  remarks: "場合、<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>プロパティは`true`、資格情報が発行されたセキュリティ トークンの暗号化に使用されます</xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>。 場合、<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>プロパティは`true`、資格情報は、セキュリティ トークンで発行された対称キーの暗号化に使用されます</xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>。"
  syntax:
    content: public virtual System.IdentityModel.Tokens.EncryptingCredentials EncryptingCredentials { get; set; }
    return:
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "暗号化に証明書利用者に使用する資格情報です。"
  overload: System.IdentityModel.Scope.EncryptingCredentials*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.Properties
  id: Properties
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: Properties
  nameWithType: Scope.Properties
  fullName: System.IdentityModel.Scope.Properties
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "オブジェクトを拡張するプロパティ バッグを取得します。"
  syntax:
    content: public virtual System.Collections.Generic.Dictionary<string,object> Properties { get; }
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: "プロパティ バッグ。"
  overload: System.IdentityModel.Scope.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.ReplyToAddress
  id: ReplyToAddress
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
  fullName: System.IdentityModel.Scope.ReplyToAddress
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得または証明書利用者の replyTo アドレスを設定します。"
  syntax:
    content: public virtual string ReplyToAddress { get; set; }
    return:
      type: System.String
      description: "証明書利用者の replyTo アドレス。 通常は URI です。"
  overload: System.IdentityModel.Scope.ReplyToAddress*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.SigningCredentials
  id: SigningCredentials
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
  fullName: System.IdentityModel.Scope.SigningCredentials
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得または証明書利用者の署名の資格情報を設定します。"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SigningCredentials SigningCredentials { get; set; }
    return:
      type: System.IdentityModel.Tokens.SigningCredentials
      description: "証明書利用者に使用する署名資格情報です。"
  overload: System.IdentityModel.Scope.SigningCredentials*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  id: SymmetricKeyEncryptionRequired
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
  fullName: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得または発行された対称キーを暗号化する必要があるかどうかを示す値を設定します。"
  remarks: "SymmetricKeyEncryptionRequired プロパティが場合`true`、内の資格情報を使用して対称キーが暗号化されて、<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>プロパティ</xref:System.IdentityModel.Scope.EncryptingCredentials%2A>。"
  syntax:
    content: public virtual bool SymmetricKeyEncryptionRequired { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>対称キーを暗号化する必要があります場合。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Scope.TokenEncryptionRequired
  id: TokenEncryptionRequired
  parent: System.IdentityModel.Scope
  langs:
  - csharp
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
  fullName: System.IdentityModel.Scope.TokenEncryptionRequired
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得または発行されたセキュリティ トークンを暗号化する必要があるかどうかを示す値を設定します。"
  remarks: "TokenEncryptionRequired プロパティが場合`true`、セキュリティ トークンは内の資格情報を使用して暗号化、<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>プロパティ</xref:System.IdentityModel.Scope.EncryptingCredentials%2A>。"
  syntax:
    content: public virtual bool TokenEncryptionRequired { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>セキュリティ トークンを暗号化する必要があります場合。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.IdentityModel.Scope.TokenEncryptionRequired*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Scope.#ctor
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope()
  nameWithType: Scope.Scope()
  fullName: System.IdentityModel.Scope.Scope()
- uid: System.IdentityModel.Scope.#ctor(System.String)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String)
  nameWithType: Scope.Scope(String)
  fullName: System.IdentityModel.Scope.Scope(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,EncryptingCredentials)
  nameWithType: Scope.Scope(String,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,EncryptingCredentials)
- uid: System.IdentityModel.Tokens.EncryptingCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: EncryptingCredentials
  nameWithType: EncryptingCredentials
  fullName: System.IdentityModel.Tokens.EncryptingCredentials
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,SigningCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials)
- uid: System.IdentityModel.Tokens.SigningCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SigningCredentials
  nameWithType: SigningCredentials
  fullName: System.IdentityModel.Tokens.SigningCredentials
- uid: System.IdentityModel.Scope.#ctor(System.String,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.EncryptingCredentials)
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope(String,SigningCredentials,EncryptingCredentials)
  nameWithType: Scope.Scope(String,SigningCredentials,EncryptingCredentials)
  fullName: System.IdentityModel.Scope.Scope(String,SigningCredentials,EncryptingCredentials)
- uid: System.IdentityModel.Scope.AppliesToAddress
  parent: System.IdentityModel.Scope
  isExternal: false
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
  fullName: System.IdentityModel.Scope.AppliesToAddress
- uid: System.IdentityModel.Scope.EncryptingCredentials
  parent: System.IdentityModel.Scope
  isExternal: false
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
  fullName: System.IdentityModel.Scope.EncryptingCredentials
- uid: System.IdentityModel.Scope.Properties
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Properties
  nameWithType: Scope.Properties
  fullName: System.IdentityModel.Scope.Properties
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<String,Object>
  nameWithType: Dictionary<String,Object>
  fullName: System.Collections.Generic.Dictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Scope.ReplyToAddress
  parent: System.IdentityModel.Scope
  isExternal: false
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
  fullName: System.IdentityModel.Scope.ReplyToAddress
- uid: System.IdentityModel.Scope.SigningCredentials
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
  fullName: System.IdentityModel.Scope.SigningCredentials
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
  fullName: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Scope.TokenEncryptionRequired
  parent: System.IdentityModel.Scope
  isExternal: false
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
  fullName: System.IdentityModel.Scope.TokenEncryptionRequired
- uid: System.IdentityModel.Scope.#ctor*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Scope
  nameWithType: Scope.Scope
- uid: System.IdentityModel.Scope.AppliesToAddress*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: AppliesToAddress
  nameWithType: Scope.AppliesToAddress
- uid: System.IdentityModel.Scope.EncryptingCredentials*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: EncryptingCredentials
  nameWithType: Scope.EncryptingCredentials
- uid: System.IdentityModel.Scope.Properties*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: Properties
  nameWithType: Scope.Properties
- uid: System.IdentityModel.Scope.ReplyToAddress*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: ReplyToAddress
  nameWithType: Scope.ReplyToAddress
- uid: System.IdentityModel.Scope.SigningCredentials*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SigningCredentials
  nameWithType: Scope.SigningCredentials
- uid: System.IdentityModel.Scope.SymmetricKeyEncryptionRequired*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: SymmetricKeyEncryptionRequired
  nameWithType: Scope.SymmetricKeyEncryptionRequired
- uid: System.IdentityModel.Scope.TokenEncryptionRequired*
  parent: System.IdentityModel.Scope
  isExternal: false
  name: TokenEncryptionRequired
  nameWithType: Scope.TokenEncryptionRequired
