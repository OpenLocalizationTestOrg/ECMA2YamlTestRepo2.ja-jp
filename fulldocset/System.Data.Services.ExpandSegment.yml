### YamlMime:ManagedReference
items:
- uid: System.Data.Services.ExpandSegment
  id: ExpandSegment
  children:
  - System.Data.Services.ExpandSegment.#ctor(System.String,System.Linq.Expressions.Expression)
  - System.Data.Services.ExpandSegment.ExpandedProperty
  - System.Data.Services.ExpandSegment.Filter
  - System.Data.Services.ExpandSegment.HasFilter
  - System.Data.Services.ExpandSegment.MaxResultsExpected
  - System.Data.Services.ExpandSegment.Name
  - System.Data.Services.ExpandSegment.PathHasFilter(System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment})
  langs:
  - csharp
  name: ExpandSegment
  nameWithType: ExpandSegment
  fullName: System.Data.Services.ExpandSegment
  type: Class
  summary: "遅延コンテンツとしてではなく、インラインをデータに返されるかどうかを示すクエリのセグメント。"
  remarks: "`$expand`句をそれぞれ示します`$expand`項目を完全に展開する必要があります。 たとえば、値`OrderLines.Product.Image`で`$expand`により`OrderLines`、`Product`内の各要素の`OrderLines`、および`Image`の`Product`内の各要素の`OrderLines`が展開されます。       内の一番左にあるプロパティ、`$expand`句は、要求 URI の最後のパス セグメントで識別されるエンティティ セット内のエンティティ型のプロパティである必要があります。       重複する展開句の規則は許容されますが、無視されます。"
  example:
  - "The following URI expands the `OrderLines` associated with each `Order` returned by the query.  \n  \n```  \nhttp://host/service.svc/Orders?$expand=OrderLines  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("ExpandSegment ({name},Filter={filter})]")]

      public class ExpandSegment
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.#ctor(System.String,System.Linq.Expressions.Expression)
  id: '#ctor(System.String,System.Linq.Expressions.Expression)'
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: ExpandSegment(String,Expression)
  nameWithType: ExpandSegment.ExpandSegment(String,Expression)
  fullName: System.Data.Services.ExpandSegment.ExpandSegment(String,Expression)
  type: Constructor
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "初期化、 <xref href=&quot;System.Data.Services.ExpandSegment&quot;> </xref>のオブジェクト指定したプロパティ名とフィルター式では、場合によっては null です。"
  syntax:
    content: public ExpandSegment (string name, System.Linq.Expressions.Expression filter);
    parameters:
    - id: name
      type: System.String
      description: "展開するプロパティの名前。"
    - id: filter
      type: System.Linq.Expressions.Expression
      description: "展開セグメントの適用対象とするクエリのフィルター オプション。"
  overload: System.Data.Services.ExpandSegment.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.ExpandedProperty
  id: ExpandedProperty
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: ExpandedProperty
  nameWithType: ExpandSegment.ExpandedProperty
  fullName: System.Data.Services.ExpandSegment.ExpandedProperty
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "展開するプロパティを取得します。"
  syntax:
    content: public System.Data.Services.Providers.ResourceProperty ExpandedProperty { get; }
    return:
      type: System.Data.Services.Providers.ResourceProperty
      description: "展開するプロパティ。"
  overload: System.Data.Services.ExpandSegment.ExpandedProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.Filter
  id: Filter
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: Filter
  nameWithType: ExpandSegment.Filter
  fullName: System.Data.Services.ExpandSegment.Filter
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "展開セグメントの適用対象とするクエリのフィルター オプション。"
  syntax:
    content: public System.Linq.Expressions.Expression Filter { get; }
    return:
      type: System.Linq.Expressions.Expression
      description: "対象のデータに対するフィルターを指定する式。"
  overload: System.Data.Services.ExpandSegment.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.HasFilter
  id: HasFilter
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: HasFilter
  nameWithType: ExpandSegment.HasFilter
  fullName: System.Data.Services.ExpandSegment.HasFilter
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "フィルター式を持つ展開ステートメントを使用するかどうかを示すブール値。"
  syntax:
    content: public bool HasFilter { get; }
    return:
      type: System.Boolean
      description: "True または false。"
  overload: System.Data.Services.ExpandSegment.HasFilter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.MaxResultsExpected
  id: MaxResultsExpected
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: MaxResultsExpected
  nameWithType: ExpandSegment.MaxResultsExpected
  fullName: System.Data.Services.ExpandSegment.MaxResultsExpected
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "期待どおりの結果の最大数を取得します。"
  remarks: "この制約を満たしている、展開プロバイダー エラーを検出するためにデータ サービスを有効にする必要がありますを返すよりも MaxResultsExpected + 1 個の要素。"
  syntax:
    content: public int MaxResultsExpected { get; }
    return:
      type: System.Int32
      description: "結果の最大数を示す整数値。"
  overload: System.Data.Services.ExpandSegment.MaxResultsExpected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.Name
  id: Name
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: Name
  nameWithType: ExpandSegment.Name
  fullName: System.Data.Services.ExpandSegment.Name
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "展開するプロパティの名前。"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "プロパティの名前を含む文字列値。"
  overload: System.Data.Services.ExpandSegment.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.PathHasFilter(System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment})
  id: PathHasFilter(System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment})
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: PathHasFilter(IEnumerable<ExpandSegment>)
  nameWithType: ExpandSegment.PathHasFilter(IEnumerable<ExpandSegment>)
  fullName: System.Data.Services.ExpandSegment.PathHasFilter(IEnumerable<ExpandSegment>)
  type: Method
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "パスにターゲット データに対するフィルター オプションが含まれているかどうかを示すブール値。"
  syntax:
    content: public static bool PathHasFilter (System.Collections.Generic.IEnumerable<System.Data.Services.ExpandSegment> path);
    parameters:
    - id: path
      type: System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment}
      description: "フィルターをチェックするセグメントの列挙です。"
    return:
      type: System.Boolean
      description: "True の場合、パスのセグメントのいずれかのフィルターです。false それ以外の場合。"
  overload: System.Data.Services.ExpandSegment.PathHasFilter*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Services.ExpandSegment.#ctor(System.String,System.Linq.Expressions.Expression)
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: ExpandSegment(String,Expression)
  nameWithType: ExpandSegment.ExpandSegment(String,Expression)
  fullName: System.Data.Services.ExpandSegment.ExpandSegment(String,Expression)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Data.Services.ExpandSegment.ExpandedProperty
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: ExpandedProperty
  nameWithType: ExpandSegment.ExpandedProperty
  fullName: System.Data.Services.ExpandSegment.ExpandedProperty
- uid: System.Data.Services.Providers.ResourceProperty
  parent: System.Data.Services.Providers
  isExternal: false
  name: ResourceProperty
  nameWithType: ResourceProperty
  fullName: System.Data.Services.Providers.ResourceProperty
- uid: System.Data.Services.ExpandSegment.Filter
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: Filter
  nameWithType: ExpandSegment.Filter
  fullName: System.Data.Services.ExpandSegment.Filter
- uid: System.Data.Services.ExpandSegment.HasFilter
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: HasFilter
  nameWithType: ExpandSegment.HasFilter
  fullName: System.Data.Services.ExpandSegment.HasFilter
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Services.ExpandSegment.MaxResultsExpected
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: MaxResultsExpected
  nameWithType: ExpandSegment.MaxResultsExpected
  fullName: System.Data.Services.ExpandSegment.MaxResultsExpected
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Services.ExpandSegment.Name
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: Name
  nameWithType: ExpandSegment.Name
  fullName: System.Data.Services.ExpandSegment.Name
- uid: System.Data.Services.ExpandSegment.PathHasFilter(System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment})
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: PathHasFilter(IEnumerable<ExpandSegment>)
  nameWithType: ExpandSegment.PathHasFilter(IEnumerable<ExpandSegment>)
  fullName: System.Data.Services.ExpandSegment.PathHasFilter(IEnumerable<ExpandSegment>)
- uid: System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ExpandSegment>
  nameWithType: IEnumerable<ExpandSegment>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Services.ExpandSegment>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.Services.ExpandSegment>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Services.ExpandSegment
    name: ExpandSegment
    nameWithType: ExpandSegment
    fullName: ExpandSegment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Services.ExpandSegment.#ctor*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: ExpandSegment
  nameWithType: ExpandSegment.ExpandSegment
- uid: System.Data.Services.ExpandSegment.ExpandedProperty*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: ExpandedProperty
  nameWithType: ExpandSegment.ExpandedProperty
- uid: System.Data.Services.ExpandSegment.Filter*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: Filter
  nameWithType: ExpandSegment.Filter
- uid: System.Data.Services.ExpandSegment.HasFilter*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: HasFilter
  nameWithType: ExpandSegment.HasFilter
- uid: System.Data.Services.ExpandSegment.MaxResultsExpected*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: MaxResultsExpected
  nameWithType: ExpandSegment.MaxResultsExpected
- uid: System.Data.Services.ExpandSegment.Name*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: Name
  nameWithType: ExpandSegment.Name
- uid: System.Data.Services.ExpandSegment.PathHasFilter*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: PathHasFilter
  nameWithType: ExpandSegment.PathHasFilter
