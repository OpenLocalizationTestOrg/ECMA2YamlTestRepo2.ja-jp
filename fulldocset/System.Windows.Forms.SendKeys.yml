### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.SendKeys
  id: SendKeys
  children:
  - System.Windows.Forms.SendKeys.Flush
  - System.Windows.Forms.SendKeys.Send(System.String)
  - System.Windows.Forms.SendKeys.SendWait(System.String)
  langs:
  - csharp
  name: SendKeys
  nameWithType: SendKeys
  fullName: System.Windows.Forms.SendKeys
  type: Class
  summary: "アプリケーションにキーストロークを送信するためのメソッドを提供します。"
  remarks: "SendKeys を使用して、キーストロークを送信し、そのアクティブなアプリケーションの組み合わせ。 このクラスをインスタンス化することはできません。 クラスにキーストロークを送信し、すぐに、プログラムのフローを続行するには、 <xref:System.Windows.Forms.SendKeys.Send%2A>。</xref:System.Windows.Forms.SendKeys.Send%2A>を使用します。 キー操作によって開始されたすべてのプロセスを待つ<xref:System.Windows.Forms.SendKeys.SendWait%2A>。</xref:System.Windows.Forms.SendKeys.SendWait%2A>を使用します。       各キーは、1 つ以上の文字で表されます。 1 つのキーボード文字を指定するには、文字そのものを使用します。 たとえば、文字 A を表す、文字列&quot;A&quot;でメソッドに渡します。 1 つ以上の文字を表現するには、前に、1 つを&1; 文字増えるたびを追加します。 A、B、および C の文字を表現するには、&quot;ABC&quot;としてパラメーターを指定します。       プラス記号 (+)、キャレット (^)、パーセント記号 (%)、チルダ (~)、およびかっこ () は、SendKeys に特別な意味を持ちます。 これらの文字のいずれかを指定するには、かっこ ({}) で囲みます。 たとえば、プラス記号を指定するには、「{+}」を使用します。 中かっこ文字、「{{}」を使用して、「{}}」を指定します。 角かっこ () には、SendKeys にとって特別な意味はありませんが、中かっこで囲む必要があります。 他のアプリケーションで、角かっこは、可能性のある重要なダイナミック データ エクス (チェンジ DDE) が発生したときに特別な意味を持つ操作を行います。      > [!CAUTION] > 場合は、アプリケーションが、さまざまなキーボードの使用の国際化の使用を意図して<xref:System.Windows.Forms.SendKeys.Send%2A>予期しない結果になる可能性があるし、避ける必要があります</xref:System.Windows.Forms.SendKeys.Send%2A>。       ENTER またはタブで、文字ではなく、操作を表すキーなど、キーを押すと表示されていない文字を指定するには、次の表に、コードを使用します。      |キー |コード |  |---------|----------|  |BACKSPACE |{BACKSPACE} {BS} または {BKSP} |  |中断 |{中断} |  |CAPS LOCK |{CAPSLOCK} |  |DEL、または DELETE |{削除} または {DEL} |  |下向きの矢印 |{ダウン} |  |終了 |{終了} |  |入力してください |{に入力} または ~ |  |ESC |{ESC} |  |ヘルプ |{ヘルプ} |  |ホーム |{ホーム} |  |アドイン、または INSERT |{挿入} または {INS} |  |左矢印 |{LEFT} が |  |NUM LOCK |{NUMLOCK} |  |1 ページ下 |{した} |  |ページ上に |{PGUP} |  |PRINTSCREEN |{PRTSC}(将来使用するために予約されています) |  |右矢印 |{右} |  |SCROLL LOCK |{SCROLLLOCK} |  |タブ |{タブ} |  |上向き矢印 |{最大} |  |F1 |{F1} |  |F2 |{F2} |  |F3 |{F3} |  |F4 |{F4} |  |F5 キーを押して |{F5} |  |F6 キーを押して |{F6} |  |F7 |{F7} |  |F8 |{F8} |  |F9 |{F9} |  |F10 キーを押して |{F10} |  |F11 |{F11} |  |F12 |{F12} |  |F13 |{F13} |  |F14 |{F14} |  |F15 |{F15} |  |F16 |{F16} |  |キーパッド追加 |{追加} |  |テンキーの減算 |{減算} |  |テンキーの乗算 |{乗算} |  |テンキーの除算 |{分割} |      Shift キーを押し、CTRL、ALT の各キーの任意の組み合わせと組み合わせて使用するキーを指定するには、と次のコードの&1; つ以上のキーのコードの前にします。      |キー |コード |  |---------|----------|  |SHIFT キーを押し | + |  |CTRL キーを押し | ^ |  |ALT キーを押し | %|      Shift キーを押し、CTRL、および ALT の任意の組み合わせを他のいくつかのキーが押されている間従う必要があることを指定するには、かっこ内にこれらのキー コードを記述します。 たとえばを指定すると、電子メールと C が押されている間は、shift キーを押し、次のように使用します。&quot;+ (EC)&quot;です。 Shift キーを押し、せず、C での後に、電子メールが押されたときに、shift キーを保持するために指定する「+ EC」です。       繰り返しのキーを指定するには、フォーム {キー番号} を使用します。 キーと値の間に空白を挿入する必要があります。 たとえば、{左 42} は、42 時間; 左方向キーを押します{h 10} は、キーを押して H 10 回を意味します。      > [!NOTE] > 別のアプリケーションをアクティブ化するマネージ メソッドがないため、現在のアプリケーション内でこのクラスを使用するかなどのネイティブ Windows メソッドを使用して`FindWindow`と`SetForegroundWindow`、他のアプリケーションにフォーカスを設定します。      > [!NOTE] >、SendKeys クラスが、.NET Framework 3.0 の Windows Vista で実行するアプリケーションで使用できるように更新されました。 Windows Vista (ユーザー アカウント制御または UAC と呼ばれます) の強化されたセキュリティは、期待どおりに作業から以前の実装を防ぎます。   >> SendKeys クラスは、タイミングの問題は、一部の開発者が回避する必要がありますを受けやすくなります。 更新された実装は引き続きタイミングの問題を受けやすくなりますですが多少高速と回避策に変更が必要かもしれません。 SendKeys クラスは、最初に、以前の実装を使用しようとしてが失敗した場合は、新しい実装を使用します。 その結果、SendKeys クラスは、さまざまなオペレーティング システムの異なる方法で動作があります。 さらに、SendKeys クラスが、新しい実装を使用する場合、<xref:System.Windows.Forms.SendKeys.SendWait%2A>メソッドは別のプロセスに送信されたときに処理されるメッセージを待機しません</xref:System.Windows.Forms.SendKeys.SendWait%2A>。   >> 場合は、アプリケーションは、オペレーティング システムに関係なく一貫した動作に依存している、app.config ファイルに次のアプリケーション設定を追加することで、新しい実装を使用する SendKeys クラスを強制することができます。   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> SendKeys クラスが前の実装を使用するには、値を使用して`&quot;JournalHook&quot;`代わりにします。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.SendKeys.Send%2A> method. To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/t-system.windows.forms.s_16_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/t-system.windows.forms.s_16_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/t-system.windows.forms.s_16_1.vb)]"
  syntax:
    content: public class SendKeys
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Flush
  id: Flush
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "メッセージ キューの現在のすべての Windows メッセージを処理します。"
  remarks: "フラッシュを使用して、キーストロークやメッセージ キューに入っている他のオペレーティング システムのメッセージを処理するアプリケーションを待機します。 これは、呼び出すことと同じ<xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>いないキーが複数あるを処理するまで</xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>。      > [!NOTE] > 別のアプリケーションをアクティブ化するマネージ メソッドがないため、現在のアプリケーション内でこのクラスを使用するかなどのネイティブ Windows メソッドを使用して`FindWindow`と`SetForegroundWindow`、他のアプリケーションにフォーカスを設定します。"
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Windows.Forms.SendKeys.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  id: Send(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "アクティブなアプリケーションにキーストロークを送信します。"
  remarks: "各キーは、1 つ以上の文字で表されます。 1 つのキーボード文字を指定するには、文字そのものを使用します。 たとえば、文字 A を表す、文字列&quot;A&quot;でメソッドに渡します。 1 つ以上の文字を表現するには、前に、1 つを&1; 文字増えるたびを追加します。 A、B、および C の文字を表現するには、&quot;ABC&quot;としてパラメーターを指定します。       プラス記号 (+)、キャレット (^)、パーセント記号 (%)、チルダ (~)、およびかっこ () は、 <xref:System.Windows.Forms.SendKeys>。</xref:System.Windows.Forms.SendKeys>特別な意味を持っています。 これらの文字のいずれかを指定するには、かっこ ({}) で囲みます。 たとえば、プラス記号を指定するには、「{+}」を使用します。 中かっこ文字、「{{}」を使用して、「{}}」を指定します。 角かっこ () には特別な意味を持つありません<xref:System.Windows.Forms.SendKeys>、中かっこで囲む必要がありますが、</xref:System.Windows.Forms.SendKeys> 。 他のアプリケーションで、角かっこは、可能性のある重要なダイナミック データ エクス (チェンジ DDE) が発生したときに特別な意味を持つ操作を行います。      > [!CAUTION] > 場合は、アプリケーションは、さまざまなキーボードの国際化の使用、送信を使用するが予期しない結果になる可能性があるし、避ける必要があります。       ENTER またはタブで、文字ではなく、操作を表すキーなど、キーを押すと表示されていない文字を指定するには、次の表に、コードを使用します。      |キー |コード |  |---------|----------|  |BACKSPACE |{BACKSPACE} {BS} または {BKSP} |  |中断 |{中断} |  |CAPS LOCK |{CAPSLOCK} |  |DEL、または DELETE |{削除} または {DEL} |  |下向きの矢印 |{ダウン} |  |終了 |{終了} |  |入力してください |{に入力} または ~ |  |ESC |{ESC} |  |ヘルプ |{ヘルプ} |  |ホーム |{ホーム} |  |アドイン、または INSERT |{挿入} または {INS} |  |左矢印 |{LEFT} が |  |NUM LOCK |{NUMLOCK} |  |1 ページ下 |{した} |  |ページ上に |{PGUP} |  |PRINTSCREEN |{PRTSC}(将来使用するために予約されています) |  |右矢印 |{右} |  |SCROLL LOCK |{SCROLLLOCK} |  |タブ |{タブ} |  |上向き矢印 |{最大} |  |F1 |{F1} |  |F2 |{F2} |  |F3 |{F3} |  |F4 |{F4} |  |F5 キーを押して |{F5} |  |F6 キーを押して |{F6} |  |F7 |{F7} |  |F8 |{F8} |  |F9 |{F9} |  |F10 キーを押して |{F10} |  |F11 |{F11} |  |F12 |{F12} |  |F13 |{F13} |  |F14 |{F14} |  |F15 |{F15} |  |F16 |{F16} |  |キーパッド追加 |{追加} |  |テンキーの減算 |{減算} |  |テンキーの乗算 |{乗算} |  |テンキーの除算 |{分割} |      Shift キーを押し、CTRL、ALT の各キーの任意の組み合わせと組み合わせて使用するキーを指定するには、と次のコードの&1; つ以上のキーのコードの前にします。      |キー |コード |  |---------|----------|  |SHIFT キーを押し | + |  |CTRL キーを押し | ^ |  |ALT キーを押し | %|      Shift キーを押し、CTRL、および ALT の任意の組み合わせを他のいくつかのキーが押されている間従う必要があることを指定するには、かっこ内にこれらのキー コードを記述します。 たとえばを指定すると、電子メールと C が押されている間は、shift キーを押し、次のように使用します。&quot;+ (EC)&quot;です。 Shift キーを押し、せず、C での後に、電子メールが押されたときに、shift キーを保持するために指定する「+ EC」です。       繰り返しのキーを指定するには、フォーム {キー番号} を使用します。 キーと値の間に空白を挿入する必要があります。 たとえば、{左 42} は、42 時間; 左方向キーを押します{h 10} は、キーを押して H 10 回を意味します。      > [!NOTE] > 別のアプリケーションをアクティブ化するマネージ メソッドがないため、現在のアプリケーション内でこのクラスを使用するかなどのネイティブ Windows メソッドを使用して`FindWindow`と`SetForegroundWindow`、他のアプリケーションにフォーカスを設定します。      > [!NOTE] >、<xref:System.Windows.Forms.SendKeys>クラスが、.NET Framework 3.0 の Windows Vista で実行するアプリケーションで使用できるように更新されました</xref:System.Windows.Forms.SendKeys>。 Windows Vista (ユーザー アカウント制御または UAC と呼ばれます) の強化されたセキュリティは、期待どおりに作業から以前の実装を防ぎます。   >>、<xref:System.Windows.Forms.SendKeys>クラスはタイミングの問題は、一部の開発者が回避する必要がありますを受けやすくなります</xref:System.Windows.Forms.SendKeys>。 更新された実装は引き続きタイミングの問題を受けやすくなりますですが多少高速と回避策に変更が必要かもしれません。 <xref:System.Windows.Forms.SendKeys>クラス最初に、以前の実装を使用しようとし、失敗した場合は、新しい実装を使用します</xref:System.Windows.Forms.SendKeys>。 その結果、<xref:System.Windows.Forms.SendKeys>クラスの動作が異なるオペレーティング システムで異なります</xref:System.Windows.Forms.SendKeys>。 また、ときに、<xref:System.Windows.Forms.SendKeys>クラスは、新しい実装を使用して、<xref:System.Windows.Forms.SendKeys.SendWait%2A>メソッドは別のプロセスに送信されたときに処理されるメッセージを待機しません</xref:System.Windows.Forms.SendKeys.SendWait%2A></xref:System.Windows.Forms.SendKeys>。   >> 場合、アプリケーションは、オペレーティング システムに関係なく一貫した動作に依存している、強制できます、 <xref:System.Windows.Forms.SendKeys>、app.config ファイルに次のアプリケーション設定を追加することで、新しい実装を使用するクラス</xref:System.Windows.Forms.SendKeys>。   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> を強制的に、<xref:System.Windows.Forms.SendKeys>が前の実装を使用して、値を使用するクラス`&quot;JournalHook&quot;`代わりにします</xref:System.Windows.Forms.SendKeys>。"
  example:
  - "The following code example demonstrates how to use the Send method.To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/m-system.windows.forms.s_9_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/m-system.windows.forms.s_9_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/m-system.windows.forms.s_9_1.vb)]"
  syntax:
    content: public static void Send (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "送信するキーストロークの文字列です。"
  overload: System.Windows.Forms.SendKeys.Send*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "アクティブなアプリケーションにキーストロークを送信することはありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keys</code>有効なキーストロークを表していません"
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  id: SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "作業中のアプリケーションに指定されたキーを送信し、処理されるメッセージを待機します。"
  remarks: "SendWait を使用して、アクティブなアプリケーションにキーストロークやキーストロークの組み合わせを送信し、処理するキーを入力メッセージを待機します。 このメソッドは、アプリケーションにキーストロークを送信し、完了するためのキーで開始されるすべてのプロセスの待機を使用することができます。 これは、アプリケーションを続行する前に、他のアプリケーションが終了した場合に重要です。      > [!NOTE] > 別のアプリケーションをアクティブ化するマネージ メソッドがないため、現在のアプリケーション内でこのクラスを使用するかなどのネイティブ Windows メソッドを使用して`FindWindow`と`SetForegroundWindow`、他のアプリケーションにフォーカスを設定します。      > [!NOTE] >、<xref:System.Windows.Forms.SendKeys>クラスが、.NET Framework 3.0 の Windows Vista で実行するアプリケーションで使用できるように更新されました</xref:System.Windows.Forms.SendKeys>。 Windows Vista (ユーザー アカウント制御または UAC と呼ばれます) の強化されたセキュリティは、期待どおりに作業から以前の実装を防ぎます。   >>、<xref:System.Windows.Forms.SendKeys>クラスはタイミングの問題は、一部の開発者が回避する必要がありますを受けやすくなります</xref:System.Windows.Forms.SendKeys>。 更新された実装は引き続きタイミングの問題を受けやすくなりますですが多少高速と回避策に変更が必要かもしれません。 <xref:System.Windows.Forms.SendKeys>クラス最初に、以前の実装を使用しようとし、失敗した場合は、新しい実装を使用します</xref:System.Windows.Forms.SendKeys>。 その結果、<xref:System.Windows.Forms.SendKeys>クラスの動作が異なるオペレーティング システムで異なります</xref:System.Windows.Forms.SendKeys>。 また、ときに、<xref:System.Windows.Forms.SendKeys>クラスは、新しい実装を使用して、別のプロセスに送信されたときに処理されるメッセージの SendWait メソッドは待機しません</xref:System.Windows.Forms.SendKeys>。   >> 場合、アプリケーションは、オペレーティング システムに関係なく一貫した動作に依存している、強制できます、 <xref:System.Windows.Forms.SendKeys>、app.config ファイルに次のアプリケーション設定を追加することで、新しい実装を使用するクラス</xref:System.Windows.Forms.SendKeys>。   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> を強制的に、<xref:System.Windows.Forms.SendKeys>が前の実装を使用して、値を使用するクラス`&quot;JournalHook&quot;`代わりにします</xref:System.Windows.Forms.SendKeys>。"
  syntax:
    content: public static void SendWait (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "送信するキーストロークの文字列です。"
  overload: System.Windows.Forms.SendKeys.SendWait*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.SendKeys.Flush
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
- uid: System.Windows.Forms.SendKeys.Flush*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush
  nameWithType: SendKeys.Flush
- uid: System.Windows.Forms.SendKeys.Send*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send
  nameWithType: SendKeys.Send
- uid: System.Windows.Forms.SendKeys.SendWait*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait
  nameWithType: SendKeys.SendWait
