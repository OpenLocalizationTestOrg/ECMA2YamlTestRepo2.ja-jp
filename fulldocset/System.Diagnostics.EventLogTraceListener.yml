### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogTraceListener
  id: EventLogTraceListener
  children:
  - System.Diagnostics.EventLogTraceListener.#ctor
  - System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  - System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  - System.Diagnostics.EventLogTraceListener.Close
  - System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  - System.Diagnostics.EventLogTraceListener.EventLog
  - System.Diagnostics.EventLogTraceListener.Name
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.EventLogTraceListener.Write(System.String)
  - System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener
  fullName: System.Diagnostics.EventLogTraceListener
  type: Class
  summary: "トレース出力またはデバッグ出力を転送する単純なリスナーを提供する<xref href=&quot;System.Diagnostics.EventLog&quot;></xref>です。"
  remarks: "この EventLogTraceListener のインスタンスを追加することができます、 <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>、 <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>、または<xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName>トレースまたはデバッグ<xref:System.Diagnostics.EventLog></xref:System.Diagnostics.EventLog>からの出力を送信するコレクション</xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName></xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName></xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>。 コードでインスタンスを追加したり、アプリケーション構成ファイルで指定することができます。 アプリケーション構成ファイルを使用して、EventLogTraceListener を追加するアプリケーションの名前に対応するファイルまたは app.config ファイルを編集、[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]プロジェクト。 このファイルには、EventLogTraceListener 型の要素を挿入します。       次の例では、という名前の EventLogTraceListener オブジェクト`myListener`を<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>コレクションです</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>。 `initializeData`パラメーターに渡されるイベント ログのソースの名前を指定する、<xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>コンス トラクター</xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29> 。      ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;4&quot;>         <listeners>           <add name=&quot;myListener&quot;             type=&quot;System.Diagnostics.EventLogTraceListener&quot;             initializeData=&quot;TraceListenerLog&quot; />         </listeners>       </trace>     </system.diagnostics>   </configuration>   ```アプリケーション構成ファイルにトレース リスナーを追加する方法の詳細については、次を参照してください。 またはします。      > [!NOTE] > 場合、<xref:System.Diagnostics.EventLog.Source%2A>新しいイベント ソースが作成された EventLogTraceListener インスタンスに関連付けられているイベント ログが存在していません</xref:System.Diagnostics.EventLog.Source%2A>。 Windows Vista、Windows XP Professional、または Windows Server 2003 でイベント ソースを作成するには、管理者特権が必要です。   >> ため、この要件では、セキュリティを含む、すべてのイベント ログを検索して、イベント ソースが一意かどうかを確認する必要があります。 Windows Vista でのユーザー権限がありません、セキュリティ ログにアクセスするにはしたがって、<xref:System.Security.SecurityException>がスローされます</xref:System.Security.SecurityException>。   >> Windows Vista では、ユーザー アカウント制御 (UAC) は、ユーザーの権限を決定します。 2 つのランタイム アクセス トークンが割り当てられている場合は、組み込みの Administrators グループのメンバーでは、: 標準ユーザー アクセス トークンおよび管理者アクセス トークン。 既定では、標準ユーザー ロールにしています。 セキュリティ ログにアクセスするコードを実行するには、最初に、ユーザーの権限を標準ユーザーから管理者に昇格させる必要があります。 アプリケーション アイコンを右クリックし、管理者として実行することを示すアプリケーションを起動するときに、これを行うことができます。       クラスを提供、<xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>プロパティを取得または設定、イベント ログ、トレース出力またはデバッグ出力を受信して、 <xref:System.Diagnostics.EventLogTraceListener.Name%2A>、EventLogTraceListener の名前を保持するプロパティ</xref:System.Diagnostics.EventLogTraceListener.Name%2A></xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>。       <xref:System.Diagnostics.EventLogTraceListener.Close%2A>トレース出力またはデバッグ出力を受信しないように、メソッドは、イベント ログを閉じます</xref:System.Diagnostics.EventLogTraceListener.Close%2A>。 <xref:System.Diagnostics.EventLogTraceListener.Write%2A>および<xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A>メソッドをイベント ログにメッセージの書き込み</xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A></xref:System.Diagnostics.EventLogTraceListener.Write%2A>      > [!NOTE] > のイベント ログに大量のデータを書き込む可能性を回避するのには EventLogTraceListener 出力しませんで指定された、省略可能なトレース データ、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティ</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。"
  example:
  - "The following example creates a trace listener that sends output to an event log. First, the code creates a new EventLogTraceListener that uses the source `myEventLogSource`. Next, `myTraceListener` is added to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. Finally, the example sends a line of output to the <xref:System.Diagnostics.Trace.Listeners%2A> object.  \n  \n [!code-cs[Classic EventLogTraceListener Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLogTraceListener Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_3_1.vb)]\n [!code-cpp[Classic EventLogTraceListener Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_3_1.cpp)]"
  syntax:
    content: 'public sealed class EventLogTraceListener : System.Diagnostics.TraceListener'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref>クラス トレース リスナーがない場合。"
  syntax:
    content: public EventLogTraceListener ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  id: '#ctor(System.Diagnostics.EventLog)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref>クラスの指定されたイベント ログを使用します。"
  syntax:
    content: public EventLogTraceListener (System.Diagnostics.EventLog eventLog);
    parameters:
    - id: eventLog
      type: System.Diagnostics.EventLog
      description: "書き込み先のイベント ログです。"
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref>クラス、指定したソースを使用します。"
  syntax:
    content: public EventLogTraceListener (string source);
    parameters:
    - id: source
      type: System.String
      description: "既存のイベント ログ ソースの名前。"
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Close
  id: Close
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "イベント ログを終了して、トレース出力またはデバッグ出力を受信しないようにします。"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.Diagnostics.EventLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  id: EventLog
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得または設定、イベント ログに書き込めません。"
  syntax:
    content: public System.Diagnostics.EventLog EventLog { get; set; }
    return:
      type: System.Diagnostics.EventLog
      description: "書き込み先のイベント ログです。"
  overload: System.Diagnostics.EventLogTraceListener.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Name
  id: Name
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "これの名前を取得または<xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;></xref>です。"
  remarks: "このプロパティの既定値は、イベント ログのソース名です。"
  syntax:
    content: public override string Name { get; set; }
    return:
      type: System.String
      description: "このトレース リスナーの名前。"
  overload: System.Diagnostics.EventLogTraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース情報、データ オブジェクト、およびイベント情報をイベント ログに書き込みます。"
  remarks: "> [!IMPORTANT]>、<xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>メソッドは、アプリケーション コードによって呼び出されるものではありません</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>。 メソッドによって呼び出される、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>トレース データを出力するクラスします</xref:System.Diagnostics.TraceSource></xref:System.Diagnostics.Trace></xref:System.Diagnostics.Debug>。       <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>メソッドと同様、<xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>メソッドは、自動化されたツールが、トレースに、例外インスタンスなど、追加のオブジェクトのアタッチすることもできます</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A></xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>。       `eventCache`と`source`かどうか、イベントをトレースするかを決定するパラメーターが使用されます。 `id`作成に使用される、<xref:System.Diagnostics.EventInstance>オブジェクトおよび<xref:System.Diagnostics.TraceEventType>するパフォーマンスは、<xref:System.Diagnostics.EventLogEntryType>の<xref:System.Diagnostics.EventInstance.EntryType%2A>プロパティ</xref:System.Diagnostics.EventInstance.EntryType%2A></xref:System.Diagnostics.EventLogEntryType></xref:System.Diagnostics.TraceEventType></xref:System.Diagnostics.EventInstance>。 <xref:System.Diagnostics.EventInstance>でイベント ログに書き込まれる、`data`オブジェクト、文字列として書式設定を使用して、<xref:System.Diagnostics.EventLog.WriteEvent%2A>メソッド</xref:System.Diagnostics.EventLog.WriteEvent%2A></xref:System.Diagnostics.EventInstance>。      > [!NOTE] > の最大値、`id`パラメーターは、65,535 です。 場合、`id`指定された値が 65,535 を超える場合、最大値を使用します。"
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "出力を識別するための名前通常のトレース イベントを生成したアプリケーションの名前です。"
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "トレースを発生させたイベントの種類を指定する列挙値の&1; つ。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。 組み合わせ`source`と`id`イベントを一意に識別します。"
    - id: data
      type: System.Object
      description: "出力ファイルまたはストリームに書き込むデータ オブジェクト。"
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>指定されていません。       または、ログ エントリの文字列が 32,766 文字を超えています。"
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース情報、データ オブジェクト、およびイベント情報をイベント ログの配列に書き込みます。"
  remarks: "> [!IMPORTANT]>、<xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>メソッドは、アプリケーション コードによって呼び出されるものではありません</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>。 メソッドによって呼び出される、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>トレース データを出力するクラスします</xref:System.Diagnostics.TraceSource></xref:System.Diagnostics.Trace></xref:System.Diagnostics.Debug>。       <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>メソッドと同様、<xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>メソッドは、自動化されたツールが、トレースに、例外インスタンスなど、追加のオブジェクトのアタッチすることもできます</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A></xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>。       `severity`と`id`パラメーター データを使用して、作成、<xref:System.Diagnostics.EventInstance>オブジェクトで、データ オブジェクトの配列からデータをイベント ログに書き込まれます</xref:System.Diagnostics.EventInstance>。       `eventCache`と`source`かどうか、イベントをトレースするかを決定するパラメーターが使用されます。 `id`作成に使用される、<xref:System.Diagnostics.EventInstance>オブジェクトおよび<xref:System.Diagnostics.TraceEventType>するパフォーマンスは、<xref:System.Diagnostics.EventLogEntryType>の<xref:System.Diagnostics.EventInstance.EntryType%2A>プロパティ</xref:System.Diagnostics.EventInstance.EntryType%2A></xref:System.Diagnostics.EventLogEntryType></xref:System.Diagnostics.TraceEventType></xref:System.Diagnostics.EventInstance>。 <xref:System.Diagnostics.EventInstance>でイベント ログに書き込まれる、`data`オブジェクトの配列を文字列の配列として書式設定を使用して、<xref:System.Diagnostics.EventLog.WriteEvent%2A>メソッド</xref:System.Diagnostics.EventLog.WriteEvent%2A></xref:System.Diagnostics.EventInstance>。      > [!NOTE] > の最大値、`id`パラメーターは、65,535 です。 場合、`id`指定された値が 65,535 を超える場合、最大値を使用します。"
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "出力を識別するための名前通常のトレース イベントを生成したアプリケーションの名前です。"
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "トレースを発生させたイベントの種類を指定する列挙値の&1; つ。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。 組み合わせ`source`と`id`イベントを一意に識別します。"
    - id: data
      type: System.Object[]
      description: "データ オブジェクトの配列。"
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>指定されていません。       または、ログ エントリの文字列が 32,766 文字を超えています。"
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース情報、メッセージ、およびイベント情報をイベント ログに書き込みます。"
  remarks: "> [!IMPORTANT]>、<xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>メソッドは、アプリケーション コードによって呼び出されるものではありません</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>。 メソッドによってこれらのメソッドが呼び出される、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>トレース データを書き込む</xref:System.Diagnostics.TraceSource></xref:System.Diagnostics.Trace></xref:System.Diagnostics.Debug>。       <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>ツールによって自動的に処理できるイベントをトレースするメソッドです</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>。 たとえば特定のソースから特定のイベントがトレースされる場合、監視ツールは管理者に通知できます。       `eventCache`と`source`かどうか、イベントをトレースするかを決定するパラメーターが使用されます。 `id`作成に使用される、<xref:System.Diagnostics.EventInstance>オブジェクトおよび<xref:System.Diagnostics.TraceEventType>するパフォーマンスは、<xref:System.Diagnostics.EventLogEntryType>の<xref:System.Diagnostics.EventInstance.EntryType%2A>プロパティ</xref:System.Diagnostics.EventInstance.EntryType%2A></xref:System.Diagnostics.EventLogEntryType></xref:System.Diagnostics.TraceEventType></xref:System.Diagnostics.EventInstance>。 <xref:System.Diagnostics.EventInstance>でイベント ログに書き込まれる、`message`データを使用して、<xref:System.Diagnostics.EventLog.WriteEvent%2A>メソッドです</xref:System.Diagnostics.EventLog.WriteEvent%2A></xref:System.Diagnostics.EventInstance>。      > [!NOTE] > の最大値、`id`パラメーターは、65,535 です。 場合、`id`指定された値が 65,535 を超える場合、最大値を使用します。"
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "出力を識別するための名前通常のトレース イベントを生成したアプリケーションの名前です。"
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "トレースを発生させたイベントの種類を指定する列挙値の&1; つ。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。 組み合わせ`source`と`id`イベントを一意に識別します。"
    - id: message
      type: System.String
      description: "トレース メッセージ。"
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>指定されていません。       または、ログ エントリの文字列が 32,766 文字を超えています。"
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース情報、書式付き配列、オブジェクト、およびイベント情報をイベント ログに書き込みます。"
  remarks: "> [!IMPORTANT]>、<xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>メソッドは、アプリケーション コードによって呼び出されるものではありません</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>。 メソッドによってこれらのメソッドが呼び出される、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>トレース データを書き込む</xref:System.Diagnostics.TraceSource></xref:System.Diagnostics.Trace></xref:System.Diagnostics.Debug>。       <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>ツールによって自動的に処理できるイベントをトレースするメソッドです</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>。 たとえば特定のソースから特定のイベントがトレースされる場合、監視ツールは管理者に通知できます。       `eventCache`と`source`かどうか、イベントをトレースするかを決定するパラメーターが使用されます。 `id`作成に使用される、<xref:System.Diagnostics.EventInstance>オブジェクトおよび<xref:System.Diagnostics.TraceEventType>するパフォーマンスは、<xref:System.Diagnostics.EventLogEntryType>の<xref:System.Diagnostics.EventInstance.EntryType%2A>プロパティ</xref:System.Diagnostics.EventInstance.EntryType%2A></xref:System.Diagnostics.EventLogEntryType></xref:System.Diagnostics.TraceEventType></xref:System.Diagnostics.EventInstance>。 <xref:System.Diagnostics.EventInstance>イベント ログに書き込まれるを使用して、<xref:System.Diagnostics.EventLog.WriteEvent%2A>から取得したメッセージと、メソッド、`format`と`args`パラメーター</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> 。 `args`オブジェクト配列を使用して文字列に変換されます、<xref:System.String.Format%2A>渡して、メソッド、`format`文字列と`args`イベント ログのメッセージとして文字列を書式設定する配列</xref:System.String.Format%2A>      > [!NOTE] > の最大値、`id`パラメーターは、65,535 です。 場合、`id`指定された値が 65,535 を超える場合、最大値を使用します。"
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "出力を識別するための名前通常のトレース イベントを生成したアプリケーションの名前です。"
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "トレースを発生させたイベントの種類を指定する列挙値の&1; つ。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。 組み合わせ`source`と`id`イベントを一意に識別します。"
    - id: format
      type: System.String
      description: "書式指定文字列内のオブジェクトに対応する&0; 個以上の書式項目を含む、`args`配列。"
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref>書式指定する&0; 個以上のオブジェクトを含む配列。"
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>指定されていません。       または、ログ エントリの文字列が 32,766 文字を超えています。"
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "このインスタンスのイベント ログにメッセージを書き込みます。"
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
  overload: System.Diagnostics.EventLogTraceListener.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>32,766 文字を超えています。"
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "このインスタンスのイベント ログにメッセージを書き込みます。"
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
  overload: System.Diagnostics.EventLogTraceListener.WriteLine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>32,766 文字を超えています。"
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogTraceListener.Close
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
- uid: System.Diagnostics.EventLogTraceListener.#ctor*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener.EventLogTraceListener
- uid: System.Diagnostics.EventLogTraceListener.Close*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close
  nameWithType: EventLogTraceListener.Close
- uid: System.Diagnostics.EventLogTraceListener.Dispose*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: EventLogTraceListener.Dispose
- uid: System.Diagnostics.EventLogTraceListener.EventLog*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: EventLogTraceListener.TraceData
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: EventLogTraceListener.TraceEvent
- uid: System.Diagnostics.EventLogTraceListener.Write*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write
  nameWithType: EventLogTraceListener.Write
- uid: System.Diagnostics.EventLogTraceListener.WriteLine*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: EventLogTraceListener.WriteLine
