### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.SecurityTokenService
  id: SecurityTokenService
  children:
  - System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)
  - System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  - System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.GetIssuerName
  - System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  - System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  - System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)
  - System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)
  - System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)
  - System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.Principal
  - System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.Request
  - System.IdentityModel.SecurityTokenService.Scope
  - System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor
  - System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration
  - System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  langs:
  - csharp
  name: SecurityTokenService
  nameWithType: SecurityTokenService
  fullName: System.IdentityModel.SecurityTokenService
  type: Class
  summary: "プロパティおよびセキュリティ トークン サービス (STS) のメソッドを定義する抽象基本クラス。"
  remarks: "STS を作成するには、SecurityTokenService クラスから派生する必要があります。 カスタム クラスで上書きする必要ありますには、少なくとも、<xref:System.IdentityModel.SecurityTokenService.GetScope%2A>と<xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A></xref:System.IdentityModel.SecurityTokenService.GetScope%2A>。 これらのオーバーライドでは、クラスで定義されているその他のすべてのメソッドの既定の実装を使用して作成された STS がトークン要求 (RST) のセキュリティへの応答のセキュリティ トークンを発行できます。 つまり、Ws-trust 仕様で定義されている問題バインドが実装されます。 このバインディングでの実装、<xref:System.IdentityModel.SecurityTokenService.Issue%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.Issue%2A>。 既定では、他の Ws-trust のバインディング (更新、キャンセル、および検証) のいずれもは実装され、これらのバインディングのいずれかに対応する RST が発生した場合、呼び出し元に適切なエラーが返されます。 もちろん、適切なメソッドをオーバーライドすることができます (<xref:System.IdentityModel.SecurityTokenService.Renew%2A>、 <xref:System.IdentityModel.SecurityTokenService.Cancel%2A>、および<xref:System.IdentityModel.SecurityTokenService.Validate%2A>)、STS. にこれらのバインディングを実装する</xref:System.IdentityModel.SecurityTokenService.Validate%2A></xref:System.IdentityModel.SecurityTokenService.Cancel%2A></xref:System.IdentityModel.SecurityTokenService.Renew%2A>      > [!IMPORTANT] > 運用環境で実装する STS だけで、慎重に計画し、このようなサービスを公開する固有の潜在的なセキュリティ リスクを軽減するために大量のリソース。 Windows Identity Foundation (WIF) を使用しているほとんどの開発者がする id 管理を STS に外部委託するアプリケーションの開発ではなく自体の STS を開発します。 WIF では、Identity and Access Tool for Visual Studio 2012、開発者が開発環境でソリューションのテストに役立つ、Visual Studio 拡張機能を提供します。 このツールは、STS を含む`LocalSTS`、開発しているアプリケーションへの特定のクレームが機能するように構成できます。 Id およびアクセス ツールの詳細については、次を参照してください。 [Identity and Access Tool for Visual Studio 2012](~/add/includes/ajax-current-ext-md.md)です。 一部のシナリオで`LocalSTS`などを行うシナリオでアプリケーションで使用するカスタム トークン ハンドラーの開発以外のアプリケーションを十分にテストするために必要な機能が提供されない場合があります。 このような場合は、開発環境でを展開することができ、アプリケーションでこのような機能をテストに使用できる&1; つまたは複数の単純な Sts を作成する SecurityTokenService から派生できます。 このセクションの残りの部分を使用すると、単純な STS を実装し、トークンの発行パイプラインを拡張する SecurityTokenService クラスによって公開されるメソッドについて説明します。       次の一覧は、テストまたは開発環境で使用するため、開発者に最優先の方法の簡単な概要を提供します。      -<xref:System.IdentityModel.SecurityTokenService.GetScope%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.GetScope%2A>。 このメソッドが戻る、 <xref:System.IdentityModel.Scope>RP に関する情報を含むオブジェクト</xref:System.IdentityModel.Scope>。 このオブジェクトは、トークンの発行パイプラインの残りの部分で使用し、応答に使用する、署名と資格情報を暗号化に関する情報だけでなく`AppliesTo`と`ReplyTo`(必要な場合) のアドレス。 このメソッドをオーバーライドする必要があります。      -<xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>。 このメソッドが戻る、 <xref:System.Security.Claims.ClaimsIdentity>RP に戻るにはクレームを格納するオブジェクト</xref:System.Security.Claims.ClaimsIdentity>。 このメソッドをオーバーライドする必要があります。      -<xref:System.IdentityModel.SecurityTokenService.Issue%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.Issue%2A>。 このメソッドでは、受信セキュリティ トークン要求 (RST) を処理し、RP での認証に使用できるトークンを含む呼び出し元に応答 (RSTR) を返しますが、トークン要求パイプラインを実装します。 このメソッドから呼び出される多くの SecurityTokenService クラスで定義されているその他のメソッドを含む、<xref:System.IdentityModel.SecurityTokenService.GetScope%2A>と<xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A></xref:System.IdentityModel.SecurityTokenService.GetScope%2A>。 このメソッドをオーバーライドする必要はありませんが、実装するトークン要求パイプラインの理解が役に立ちます。       <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration>クラス</xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration>を使用して STS 構成します。"
  example:
  - "The code examples that are used in the SecurityTokenService topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT) and it includes an implementation of a passive STS that is capable of serving an SWT token. For an example of how to implement an active STS, you can see the `Federation Metadata` sample. For information about these samples and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the implementation of a passive STS using the SecurityTokenService class.  \n  \n [!code-cs[WIFCustomTokenSTS#3](~/add/codesnippet/csharp/passivests/customsecuritytokenservice.cs#3)]  \n  \n The following code shows how to invoke a custom passive STS to process a WS-Federation request by calling the <xref:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessRequest%28System.Web.HttpRequest%2CSystem.Security.Claims.ClaimsPrincipal%2CSystem.IdentityModel.SecurityTokenService%2CSystem.Web.HttpResponse%29?displayProperty=fullName> method from the code behind in the `default.aspx.cs` file.  \n  \n [!code-cs[WIFCustomTokenSTS#1](~/add/codesnippet/csharp/passivests/default.aspx.cs#1)]"
  syntax:
    content: public abstract class SecurityTokenService
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)
  id: '#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)'
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: SecurityTokenService(SecurityTokenServiceConfiguration)
  nameWithType: SecurityTokenService.SecurityTokenService(SecurityTokenServiceConfiguration)
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenService(SecurityTokenServiceConfiguration)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "初期化するために派生クラスから呼び出される、 <xref href=&quot;System.IdentityModel.SecurityTokenService&quot;> </xref>クラスの指定された構成設定を使用します。"
  remarks: "このコンス トラクターを使用して、スコープ プロバイダーとトークン発行者の証明書を初期化します。"
  syntax:
    content: protected SecurityTokenService (System.IdentityModel.Configuration.SecurityTokenServiceConfiguration securityTokenServiceConfiguration);
    parameters:
    - id: securityTokenServiceConfiguration
      type: System.IdentityModel.Configuration.SecurityTokenServiceConfiguration
      description: "A <xref href=&quot;System.IdentityModel.Configuration.SecurityTokenServiceConfiguration&quot;> </xref> STS の設定を格納しています。"
  overload: System.IdentityModel.SecurityTokenService.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>securityTokenServiceConfiguration</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  id: BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、非同期 Ws-trust キャンセル要求を開始します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual IAsyncResult BeginCancel (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>非同期の取り消し操作の完了の通知を受信するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "非同期の取り消し操作に関連付けられている状態情報を格納するオブジェクト。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期取り消し操作を参照する</xref:System.IAsyncResult>。"
  overload: System.IdentityModel.SecurityTokenService.BeginCancel*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)
  id: BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされるへの非同期呼び出しを開始、<xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity*>メソッド</xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity*>。"
  remarks: "このメソッドの既定の実装が<xref:System.NotImplementedException>。</xref:System.NotImplementedException>がスローされます。"
  syntax:
    content: protected virtual IAsyncResult BeginGetOutputClaimsIdentity (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    - id: scope
      type: System.IdentityModel.Scope
      description: "<xref href=&quot;System.IdentityModel.Scope&quot;> </xref>要求に関連付けられている証明書利用者に関する情報を格納します。"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>非同期操作の完了の通知を受信するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "非同期操作に関連付けられている状態情報を格納するオブジェクト。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期操作を参照する</xref:System.IAsyncResult>。"
  overload: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  id: BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされるの非同期呼び出しを開始、<xref:System.IdentityModel.SecurityTokenService.GetScope*>メソッド</xref:System.IdentityModel.SecurityTokenService.GetScope*>。"
  remarks: "このメソッドの既定の実装が<xref:System.NotImplementedException>。</xref:System.NotImplementedException>がスローされます。"
  syntax:
    content: protected virtual IAsyncResult BeginGetScope (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>非同期操作の完了の通知を受信するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "非同期操作に関連付けられている状態情報を格納するオブジェクト。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期取り消し操作を参照する</xref:System.IAsyncResult>。"
  overload: System.IdentityModel.SecurityTokenService.BeginGetScope*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  id: BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、Ws-trust の問題の非同期要求を開始します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual IAsyncResult BeginIssue (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>、問題の非同期操作の完了の通知を受信するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "問題の非同期操作に関連付けられている状態情報を格納するオブジェクト。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>問題の非同期操作を参照する</xref:System.IAsyncResult>。"
  overload: System.IdentityModel.SecurityTokenService.BeginIssue*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  id: BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、非同期 Ws-trust 更新要求を開始します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual IAsyncResult BeginRenew (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>、非同期の完了の通知を受信するデリゲートが操作を更新します</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "非同期の関連付けられている状態情報を格納しているオブジェクトは、操作を更新します。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期参照更新操作であること</xref:System.IAsyncResult>。"
  overload: System.IdentityModel.SecurityTokenService.BeginRenew*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  id: BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、非同期 Ws-trust 検証要求を開始します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual IAsyncResult BeginValidate (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>、非同期の完了の通知を受信するデリゲートが操作を検証します</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "非同期の関連付けられている状態情報を格納しているオブジェクトは、操作を検証します。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>、非同期の参照が、操作を検証します</xref:System.IAsyncResult>。"
  overload: System.IdentityModel.SecurityTokenService.BeginValidate*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Cancel(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Cancel(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Cancel(ClaimsPrincipal,RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、要求の Ws-trust のキャンセルを処理します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Cancel (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref>を表す RSTR を呼び出し元に戻ります。"
  overload: System.IdentityModel.SecurityTokenService.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  id: CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "<xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*>。</xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*>のインスタンスを作成します。"
  remarks: "<xref:System.IdentityModel.SecurityTokenService.GetScope%2A>。</xref:System.IdentityModel.SecurityTokenService.GetScope%2A>後のトークンの発行中に呼び出されます"
  syntax:
    content: protected virtual System.IdentityModel.Tokens.SecurityTokenDescriptor CreateSecurityTokenDescriptor (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);
    parameters:
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "受信したトークンの要求。"
    - id: scope
      type: System.IdentityModel.Scope
      description: "<> </> *> から返されたオブジェクト<> *> です。"
    return:
      type: System.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "<xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*>。</xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*>"
  overload: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>request</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>scope</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)
  id: EndCancel(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndCancel(IAsyncResult)
  nameWithType: SecurityTokenService.EndCancel(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndCancel(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、ときに、非同期要求の Ws-trust でキャンセルを完了します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndCancel (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返される、<xref:System.IdentityModel.SecurityTokenService.BeginCancel*>メソッド</xref:System.IdentityModel.SecurityTokenService.BeginCancel*></xref:System.IAsyncResult>。"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref>を表す RSTR を呼び出し元に戻ります。"
  overload: System.IdentityModel.SecurityTokenService.EndCancel*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)
  id: EndGetOutputClaimsIdentity(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndGetOutputClaimsIdentity(IAsyncResult)
  nameWithType: SecurityTokenService.EndGetOutputClaimsIdentity(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされるへの非同期呼び出しが完了したとき、<xref:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*>メソッド</xref:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*>。"
  remarks: "このメソッドの既定の実装が<xref:System.NotImplementedException>。</xref:System.NotImplementedException>がスローされます。"
  syntax:
    content: protected virtual System.Security.Claims.ClaimsIdentity EndGetOutputClaimsIdentity (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返される、<xref:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*>メソッド</xref:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*></xref:System.IAsyncResult>。"
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "A <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>が発行されたセキュリティ トークンに配置されるクレームのコレクションを格納します。"
  overload: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)
  id: EndGetScope(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndGetScope(IAsyncResult)
  nameWithType: SecurityTokenService.EndGetScope(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndGetScope(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされるへの非同期呼び出しが完了したとき、<xref:System.IdentityModel.SecurityTokenService.BeginGetScope*>メソッド</xref:System.IdentityModel.SecurityTokenService.BeginGetScope*>。"
  remarks: "このメソッドの既定の実装が<xref:System.NotImplementedException>。</xref:System.NotImplementedException>がスローされます。"
  syntax:
    content: protected virtual System.IdentityModel.Scope EndGetScope (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返される、<xref:System.IdentityModel.SecurityTokenService.BeginGetScope*>メソッド</xref:System.IdentityModel.SecurityTokenService.BeginGetScope*></xref:System.IAsyncResult>。"
    return:
      type: System.IdentityModel.Scope
      description: "A <xref href=&quot;System.IdentityModel.Scope&quot;> </xref>への呼び出しで指定された要求 (RST) に関連付けられている証明書利用者 (rp) 情報をカプセル化する、<xref:System.IdentityModel.SecurityTokenService.BeginGetScope*>メソッド</xref:System.IdentityModel.SecurityTokenService.BeginGetScope*>。"
  overload: System.IdentityModel.SecurityTokenService.EndGetScope*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)
  id: EndIssue(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndIssue(IAsyncResult)
  nameWithType: SecurityTokenService.EndIssue(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndIssue(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、非同期の Ws-trust 発行要求を完了します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndIssue (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返される、<xref:System.IdentityModel.SecurityTokenService.BeginIssue*>メソッド</xref:System.IdentityModel.SecurityTokenService.BeginIssue*></xref:System.IAsyncResult>。"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref>を表す RSTR を呼び出し元に戻ります。"
  overload: System.IdentityModel.SecurityTokenService.EndIssue*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)
  id: EndRenew(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndRenew(IAsyncResult)
  nameWithType: SecurityTokenService.EndRenew(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndRenew(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、非同期の Ws-trust 更新要求を完了します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndRenew (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返される、<xref:System.IdentityModel.SecurityTokenService.BeginRenew*>メソッド</xref:System.IdentityModel.SecurityTokenService.BeginRenew*></xref:System.IAsyncResult>。"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref>を表す RSTR を呼び出し元に戻ります。"
  overload: System.IdentityModel.SecurityTokenService.EndRenew*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)
  id: EndValidate(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndValidate(IAsyncResult)
  nameWithType: SecurityTokenService.EndValidate(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndValidate(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、非同期の Ws-trust 検証要求を完了します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndValidate (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返される、<xref:System.IdentityModel.SecurityTokenService.BeginValidate*>メソッド</xref:System.IdentityModel.SecurityTokenService.BeginValidate*></xref:System.IAsyncResult>。"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref>を表す RSTR を呼び出し元に戻ります。"
  overload: System.IdentityModel.SecurityTokenService.EndValidate*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetIssuerName
  id: GetIssuerName
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetIssuerName()
  nameWithType: SecurityTokenService.GetIssuerName()
  fullName: System.IdentityModel.SecurityTokenService.GetIssuerName()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "セキュリティ トークン サービス (STS) の名前を取得します。"
  remarks: "トークンの発行パイプラインとして実装された既定値からこのメソッドは、<xref:System.IdentityModel.SecurityTokenService.Issue%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.Issue%2A>。       既定の実装を返します、<xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName%2A>プロパティを通じてアクセスの構成から、<xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A>プロパティ</xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A></xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName%2A>。"
  syntax:
    content: protected virtual string GetIssuerName ();
    parameters: []
    return:
      type: System.String
      description: "発行者の名前。"
  overload: System.IdentityModel.SecurityTokenService.GetIssuerName*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  id: GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、このメソッドは、発行されたトークンに含まれる出力対象者のコレクションを返します。"
  remarks: "GetOutputClaimsIdentity メソッドによって実装されるトークンの発行パイプラインから、<xref:System.IdentityModel.SecurityTokenService.Issue%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.Issue%2A>。 返します、<xref:System.Security.Claims.ClaimsIdentity>トークンの要求元に基づいて発行されたセキュリティ トークンに含めるクレームを格納している (、`principal`パラメーター)、受信 RST (、`request`パラメーター) を証明書利用者のトークンが対象とのパーティと (、`scope`パラメーター).</xref:System.Security.Claims.ClaimsIdentity> このメソッドのロジックは主に次の質問に答えること:-**ものでは、RP に基づいて、応答にする要求の種類を含める必要がありますか。** 通常これは次の決定各 RP に必要なクレームの種類の一覧から RP あたりごとに、または要求ごとに確認するには、<xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Claims%2A>要求のプロパティ</xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Claims%2A>。 ただし、ロジックと、応答に含めるクレームを決定するための詳細は完全に実装までです。      -**する要求の値が、応答内のクレームを割り当てる必要がありますか。** Id プロバイダー (IP STS) の通常つまりで、要求元の&1; つまたは複数の要求を使用して<xref:System.Security.Claims.ClaimsPrincipal>(によって提供される、`principal`パラメーター) に必要なクレームの種類の値を返すストア (またはその他のエンティティ) にアクセスする</xref:System.Security.Claims.ClaimsPrincipal>。 フェデレーション プロバイダー (R STS) 通常は要求を満たすために、要求元の入力方向の要求にいくつかの種類の処理を実行します。おそらくを他のユーザーを変更されていないに渡す際に、要求元によって提示されるクレームにいくつかのフィルター処理または変換を実行します。 もちろん、応答に含める要求を決定する場合は、これらのクレームの値を決定する方法のロジックと詳細については、実装までです。"
  example:
  - "The code example that is used in this topic is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT) and it includes an implementation of a passive STS that is capable of serving an SWT token. For an example of how to implement an active STS, you can see the `Federation Metadata` sample. For information about these samples and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows how to override the GetOutputClaimsIdentity method to return claims for your STS. In this example, the Request Security Token (RST) message is ignored and a collection of claims based on the user as authenticated at the STS is returned.  \n  \n [!code-cs[WIFCustomTokenSTS#6](~/add/codesnippet/csharp/passivests/customsecuritytokenservice.cs#6)]"
  syntax:
    content: protected abstract System.Security.Claims.ClaimsIdentity GetOutputClaimsIdentity (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    - id: scope
      type: System.IdentityModel.Scope
      description: "<xref href=&quot;System.IdentityModel.Scope&quot;> </xref>要求に関連付けられている証明書利用者に関する情報を格納します。 これは、 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref>によって返されたオブジェクト、<xref:System.IdentityModel.SecurityTokenService.GetScope*>メソッド</xref:System.IdentityModel.SecurityTokenService.GetScope*>。"
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "A <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>が発行されたセキュリティ トークンに配置されるクレームのコレクションを格納します。"
  overload: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  id: GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetProofToken(RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.GetProofToken(RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.GetProofToken(RequestSecurityToken,Scope)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "応答 (RSTR) に含まれる証明トークンを取得します。"
  remarks: "トークンの発行パイプラインとして実装された既定値からこのメソッドは、<xref:System.IdentityModel.SecurityTokenService.Issue%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.Issue%2A>。       既定の実装では、実証記述子を返します。 または、適切な例外をスローします。"
  syntax:
    content: protected virtual System.IdentityModel.Tokens.ProofDescriptor GetProofToken (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);
    parameters:
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>着信トークン要求 (RST) を表すです。"
    - id: scope
      type: System.IdentityModel.Scope
      description: "<xref href=&quot;System.IdentityModel.Scope&quot;> </xref>証明書利用者に関する情報をカプセル化するインスタンス。"
    return:
      type: System.IdentityModel.Tokens.ProofDescriptor
      description: "A <xref href=&quot;System.IdentityModel.Tokens.ProofDescriptor&quot;> </xref>新しく作成された校正記述子を表すです。 校正記述子は、非対称の校正記述子、対称の校正記述子または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>に備えて、ベアラー トークン。"
  overload: System.IdentityModel.SecurityTokenService.GetProofToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>request</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>scope</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetRequestorProofEncryptingCredentials(RequestSecurityToken)
  nameWithType: SecurityTokenService.GetRequestorProofEncryptingCredentials(RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "資格情報を暗号化、要求元の証拠を取得します。"
  remarks: "このメソッドは、<xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A>。       既定の実装は、次のことです。 返します`null`要求で指定された暗号化トークンがないかどうか (、<xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ProofEncryption%2A?displayProperty=fullName>プロパティは`null`).</xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ProofEncryption%2A?displayProperty=fullName> それ以外の場合、としてトークンを取得する場合、 <xref:System.IdentityModel.Tokens.X509SecurityToken>、そのトークンに基づく資格情報を返します</xref:System.IdentityModel.Tokens.X509SecurityToken>。 としてトークンを解決できない場合、 <xref:System.IdentityModel.Tokens.X509SecurityToken>、<xref:System.IdentityModel.RequestFailedException>がスローされます</xref:System.IdentityModel.RequestFailedException></xref:System.IdentityModel.Tokens.X509SecurityToken>。"
  syntax:
    content: protected virtual System.IdentityModel.Tokens.EncryptingCredentials GetRequestorProofEncryptingCredentials (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>着信トークン要求 (RST) を表すです。"
    return:
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "<xref href=&quot;System.IdentityModel.Tokens.EncryptingCredentials&quot;> </xref>要求元を表すオブジェクトの資格情報を暗号化します。"
  overload: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>request</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)
  id: GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
  nameWithType: SecurityTokenService.GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
  fullName: System.IdentityModel.SecurityTokenService.GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "指定された要求 (RST) とトークンのセキュリティ記述子を使用して、発行されたトークンを含む応答 (RSTR) を作成します。"
  remarks: "によって実装されるトークンの発行パイプラインから最後の手順として、GetResponse メソッドが呼び出される、<xref:System.IdentityModel.SecurityTokenService.Issue%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.Issue%2A>。 作成し、元の受信要求 (RST) とトークンの発行パイプラインの前の手順で作成されたトークンの記述子を使用して、応答 (RSTR) を返します。       既定の実装は、トークンの記述子に<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A>プロパティを使用して、最後に次の表に従って RSTR の<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A>プロパティを設定して RSTR の<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AppliesTo%2A>プロパティを設定、新しく作成された RSTR にそのプロパティを適用する GetResponse に渡されたトークンの記述子の<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.ApplyTo%2A?displayProperty=fullName>メソッドを呼び出して<xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.%23ctor%28System.IdentityModel.Protocols.WSTrust.WSTrustMessage%29?displayProperty=fullName>コンス トラクターに、要求のパラメーターで指定された RST を渡すことによって、RSTR を作成します。:      |`RST.ReplyTo`プロパティ |<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=fullName>プロパティです |。`RSTR.ReplyTo`プロパティ |  |----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------|  |設定 |設定されていない |設定されていない |  |設定 |設定 |<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=fullName>|  |設定されていない |設定 |設定されていない |  |設定されていない |設定されていない |Not Set|</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=fullName></xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=fullName></xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.%23ctor%28System.IdentityModel.Protocols.WSTrust.WSTrustMessage%29?displayProperty=fullName></xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.ApplyTo%2A?displayProperty=fullName></xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AppliesTo%2A></xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A></xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A>"
  syntax:
    content: protected virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse GetResponse (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);
    parameters:
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "トークンの要求を含む RST です。"
    - id: tokenDescriptor
      type: System.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "発行されたトークンを使用する情報を含むトークン記述子。"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "応答 (RSTR) または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>トークン記述子と指定された要求から応答を作成できない場合。 既定の実装を返します<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>場合、 <code> tokenDescriptor </code>パラメーターは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.IdentityModel.SecurityTokenService.GetResponse*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetScope(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.GetScope(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.GetScope(ClaimsPrincipal,RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得、 <xref href=&quot;System.IdentityModel.Scope&quot;> </xref>証明書利用者 (RP)、指定された要求 (RST) に関連付けられているに関する情報を含むオブジェクト。 実装でこのメソッドをオーバーライドする必要があります、 <xref href=&quot;System.IdentityModel.SecurityTokenService&quot;> </xref>クラスです。"
  remarks: "GetScope メソッドは、トークンの発行パイプラインの後から、<xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>メソッド返す必要があります、<xref:System.IdentityModel.Scope>受信要求用に構成されたオブジェクト</xref:System.IdentityModel.Scope></xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>。 (でトークンの発行パイプラインの実装、<xref:System.IdentityModel.SecurityTokenService.Issue%2A>メソッドです)</xref:System.IdentityModel.SecurityTokenService.Issue%2A> 。<xref:System.IdentityModel.Scope>オブジェクトは、セキュリティ トークン要求 (RST) に関連付けられている RP に関する情報をカプセル化します</xref:System.IdentityModel.Scope>。 これには、暗号化と署名に、RP とれた発行されたトークンと、応答内の対称キーを暗号化するかどうかを使用する資格情報に関する情報が含まれます。 GetScope メソッドで実行されるいくつかの一般的なタスクは、: トークンの対象となる、RP が認識されている RP であるかどうかを確認します。 これを実現する方法は、実装によって異なります。 目的の RP がこの STS の有効な RP でない場合は、し、必要がありますスロー <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>      -応答 (RSTR) で使用して設定する署名資格情報を決定する、<xref:System.IdentityModel.Scope.SigningCredentials%2A>プロパティに応じて</xref:System.IdentityModel.Scope.SigningCredentials%2A>。      -応答または含まれる対称キーを暗号化する必要があるかどうかと暗号化に使用する資格情報を決定します。 設定、 <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>、 <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>、および<xref:System.IdentityModel.Scope.EncryptingCredentials%2A>プロパティに応じて</xref:System.IdentityModel.Scope.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>。          > [!IMPORTANT] > 既定では、<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>と<xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>プロパティが設定されて`true`STS がセキュリティで保護されていないトークンを発行するを防ぐためです</xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A></xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>。 これらのプロパティを設定しないことをお勧め`false`実稼働環境でします。      -応答の返された先アドレスを決定します。 設定するか、<xref:System.IdentityModel.Scope.AppliesToAddress%2A>または<xref:System.IdentityModel.Scope.ReplyToAddress%2A>プロパティに応じて</xref:System.IdentityModel.Scope.ReplyToAddress%2A></xref:System.IdentityModel.Scope.AppliesToAddress%2A>。"
  example:
  - "The code example that is used in this topic is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT) and it includes an implementation of a passive STS that is capable of serving an SWT token. For an example of how to implement an active STS, you can see the `Federation Metadata` sample. For information about these samples and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example shows an implementation of the GetScope method. This implementation verifies that the RP is recognized by the STS, validates the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A> address in the request and sets the <xref:System.IdentityModel.Scope.ReplyToAddress%2A?displayProperty=fullName> property accordingly, and sets the signing and encrypting credentials to use with the RP based on certificates that are hard-coded in the file.  \n  \n [!code-cs[WIFCustomTokenSTS#4](~/add/codesnippet/csharp/passivests/customsecuritytokenservice.cs#4)]  \n[!code-cs[WIFCustomTokenSTS#5](~/add/codesnippet/csharp/passivests/customsecuritytokenservice.cs#5)]  \n[!code-cs[WIFCustomTokenSTS#7](~/add/codesnippet/csharp/passivests/customsecuritytokenservice.cs#7)]"
  syntax:
    content: protected abstract System.IdentityModel.Scope GetScope (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>要求を行っているクライアントを表すです。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>受信要求 (RST) を表すです。"
    return:
      type: System.IdentityModel.Scope
      description: "A <xref href=&quot;System.IdentityModel.Scope&quot;> </xref>要求に関連付けられている RP 情報をカプセル化します。"
  overload: System.IdentityModel.SecurityTokenService.GetScope*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)
  id: GetSecurityTokenHandler(System.String)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetSecurityTokenHandler(String)
  nameWithType: SecurityTokenService.GetSecurityTokenHandler(String)
  fullName: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "指定した型のセキュリティ トークンを発行するための適切なセキュリティ トークン ハンドラーを取得します。"
  remarks: "既定の実装で場合`requestedTokenType`は`null`または空の文字列は、既定の構成からのトークンの型を使用します。 これを指定して、<xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenType%2A>を介してアクセスする STS 構成オブジェクトのプロパティ、<xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A>プロパティ</xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A></xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenType%2A>。       トークンの発行パイプラインとして実装された既定値からこのメソッドは、<xref:System.IdentityModel.SecurityTokenService.Issue%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.Issue%2A>。"
  syntax:
    content: protected virtual System.IdentityModel.Tokens.SecurityTokenHandler GetSecurityTokenHandler (string requestedTokenType);
    parameters:
    - id: requestedTokenType
      type: System.String
      description: "要求されたトークンの種類の URI を含む文字列です。"
    return:
      type: System.IdentityModel.Tokens.SecurityTokenHandler
      description: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandler&quot;> </xref>を表すトークン ハンドラーは、発行されたセキュリティ トークンを作成するために使用されます。 返します<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>要求されたトークンの種類がサポートされていない場合 (指定されたトークンの種類用に構成されたハンドラーはありません)。"
  overload: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)
  id: GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetTokenLifetime(Lifetime)
  nameWithType: SecurityTokenService.GetTokenLifetime(Lifetime)
  fullName: System.IdentityModel.SecurityTokenService.GetTokenLifetime(Lifetime)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "発行済みトークンの有効期間を取得します。"
  remarks: "RST で受信した有効期間には、通常このメソッドが呼び出されます。 既定の実装では、トークンの有効期間は、次の表に従って計算されます。      |作成 (in) |有効期限 () |作成 (in) |(Out) 有効期限が切れる |  |--------------------|--------------------|--------------------|---------------------|  |`null`|`null`|<xref:System.DateTime.UtcNow%2A?displayProperty=fullName>|<xref:System.DateTime.UtcNow%2A?displayProperty=fullName> + <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=fullName>|  |C |`null`|C |C + <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=fullName>|  |`null`|E |<xref:System.DateTime.UtcNow%2A?displayProperty=fullName>|E |  |C |E |C |E |      トークンの発行パイプラインとして実装された既定値からこのメソッドは、<xref:System.IdentityModel.SecurityTokenService.Issue%2A>メソッド</xref:System.IdentityModel.SecurityTokenService.Issue%2A></xref:System.DateTime.UtcNow%2A?displayProperty=fullName></xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=fullName></xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=fullName></xref:System.DateTime.UtcNow%2A?displayProperty=fullName></xref:System.DateTime.UtcNow%2A?displayProperty=fullName>。"
  syntax:
    content: protected virtual System.IdentityModel.Protocols.WSTrust.Lifetime GetTokenLifetime (System.IdentityModel.Protocols.WSTrust.Lifetime requestLifetime);
    parameters:
    - id: requestLifetime
      type: System.IdentityModel.Protocols.WSTrust.Lifetime
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.Lifetime&quot;> </xref>要求の有効期間を表すです。"
    return:
      type: System.IdentityModel.Protocols.WSTrust.Lifetime
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.Lifetime&quot;> </xref>許可の有効期間を表すです。"
  overload: System.IdentityModel.SecurityTokenService.GetTokenLifetime*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Issue(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Issue(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Issue(ClaimsPrincipal,RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "セキュリティ トークンを発行します。"
  remarks: "このメソッドは、Ws-trust 仕様で定義されている問題のバインディングを実装します。 問題メソッドの既定の実装では、トークンの発行 (要求の発行) パイプラインを介して受信要求 (RST) を処理し、RP に要求元の認証に適切な要求を含むセキュリティ トークンを含む応答 (RSTR) または、適切な例外を返します。 次のメソッドへの呼び出しの既定の実装で、トークンの発行パイプラインで構成されます (の<xref:System.IdentityModel.SecurityTokenService>クラス).</xref:System.IdentityModel.SecurityTokenService>      1.  <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>要求 (RST) を検証するメソッド</xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>。      2.  <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>取得するメソッド、<xref:System.IdentityModel.Scope>証明書利用者 (RP) 要求に関連付けられているに関する情報を含むオブジェクト</xref:System.IdentityModel.Scope></xref:System.IdentityModel.SecurityTokenService.GetScope%2A>。 このメソッドをオーバーライドする必要があります。 場合<xref:System.IdentityModel.SecurityTokenService.GetScope%2A>返します`null`、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.IdentityModel.SecurityTokenService.GetScope%2A>。      3.  <xref:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor%2A>RST に基づくセキュリティ トークンの記述子を返すメソッド、および<xref:System.IdentityModel.Scope>前の手順でオブジェクトが返されます</xref:System.IdentityModel.Scope></xref:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor%2A>。 トークンのセキュリティ記述子 (<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor>) トークン ハンドラーによって使用できる形式で要求に関する情報が含まれています</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor>。 <xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor%2A?displayProperty=fullName>プロパティの呼び出しによって返される記述子に設定されています</xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor%2A?displayProperty=fullName>。 場合`null`が返される場合、または、<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials%2A>記述子のプロパティは`null`、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials%2A>。 場合にも、例外がスローされます、<xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A?displayProperty=fullName>プロパティは`true`ですが、<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials%2A>返される記述子プロパティは`null`</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials%2A></xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A?displayProperty=fullName>。      4.  <xref:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler%2A>要求されたトークンの種類に基づいて、適切なトークン ハンドラーを取得するメソッド</xref:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler%2A>。 場合`null`が返されます、<xref:System.NotImplementedException>がスローされます</xref:System.NotImplementedException>。      5.  <xref:System.IdentityModel.SecurityTokenService.GetIssuerName%2A>トークンの発行者名を取得するメソッド</xref:System.IdentityModel.SecurityTokenService.GetIssuerName%2A>。 スロー、<xref:System.InvalidOperationException>名が場合`null`または空の場合、それ以外の場合設定、<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenIssuerName%2A>プロパティ記述子を</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenIssuerName%2A></xref:System.InvalidOperationException>。      6.  <xref:System.IdentityModel.SecurityTokenService.GetTokenLifetime%2A>トークンとセットの有効期間を取得するメソッド、<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A>記述子のプロパティ</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A></xref:System.IdentityModel.SecurityTokenService.GetTokenLifetime%2A>。      7.  <xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A>、発行されたトークンとセットに含める証明トークンを取得するメソッド、<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Proof%2A>記述子のプロパティ</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Proof%2A></xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A>。      8.  <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>、発行されたトークンとセットに含めるに対するクレームを取得するメソッド、<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A>記述子のプロパティ</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A></xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>。 このメソッドをオーバーライドする必要があります。      9. <xref:System.IdentityModel.SecurityTokenService.GetResponse%2A>、発行済みトークンを含む応答 (RSTR) を作成するメソッド</xref:System.IdentityModel.SecurityTokenService.GetResponse%2A>。       カスタム トークンの発行パイプライン; を実装する問題のメソッドをオーバーライドすることができます。ただしこれは通常、開発およびテスト環境の実装の大部分のユーザー設定するために必要な<xref:System.IdentityModel.SecurityTokenService>クラスが目的としています</xref:System.IdentityModel.SecurityTokenService>。 オーバーライドするには、多くの場合、<xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>と<xref:System.IdentityModel.SecurityTokenService.GetScope%2A>メソッドし、必要に応じてオーバーライドして、<xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>環境に処理できる STS を提供するメソッドを</xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A></xref:System.IdentityModel.SecurityTokenService.GetScope%2A></xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>。 さらにカスタマイズが必要な場合は、既定のトークン発行パイプラインが上記の各ステージを実装するメソッドをオーバーライドすることで多くの場合、指定できます。"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Issue (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref>発行されたセキュリティ トークンを格納しています。"
  overload: System.IdentityModel.SecurityTokenService.Issue*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Principal
  id: Principal
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Principal
  nameWithType: SecurityTokenService.Principal
  fullName: System.IdentityModel.SecurityTokenService.Principal
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得または現在のインスタンスに関連付けられているプリンシパルを設定します。"
  syntax:
    content: public System.Security.Claims.ClaimsPrincipal Principal { get; set; }
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>現在のプリンシパルを表します。"
  overload: System.IdentityModel.SecurityTokenService.Principal*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Renew(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Renew(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Renew(ClaimsPrincipal,RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、Ws-trust 更新要求を処理します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Renew (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref>を表す RSTR を呼び出し元に戻ります。"
  overload: System.IdentityModel.SecurityTokenService.Renew*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Request
  id: Request
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Request
  nameWithType: SecurityTokenService.Request
  fullName: System.IdentityModel.SecurityTokenService.Request
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得または現在のインスタンスに関連付けられているセキュリティ トークン要求 (RST) を設定します。"
  syntax:
    content: public System.IdentityModel.Protocols.WSTrust.RequestSecurityToken Request { get; set; }
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>要求を含むです。"
  overload: System.IdentityModel.SecurityTokenService.Request*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Scope
  id: Scope
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Scope
  nameWithType: SecurityTokenService.Scope
  fullName: System.IdentityModel.SecurityTokenService.Scope
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得または現在のインスタンスに関連付けられたスコープを設定します。"
  syntax:
    content: public System.IdentityModel.Scope Scope { get; set; }
    return:
      type: System.IdentityModel.Scope
      description: "A <xref href=&quot;System.IdentityModel.Scope&quot;> </xref>を表すトークンの発行要求を構成します。"
  overload: System.IdentityModel.SecurityTokenService.Scope*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor
  id: SecurityTokenDescriptor
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenService.SecurityTokenDescriptor
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "取得または設定、 <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenDescriptor&quot;> </xref>現在のインスタンスに関連付けられています。"
  syntax:
    content: protected System.IdentityModel.Tokens.SecurityTokenDescriptor SecurityTokenDescriptor { get; set; }
    return:
      type: System.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "現在のインスタンスに関連付けられているセキュリティ トークン記述子。"
  overload: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "プロパティを設定しようとすると、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>に発生します。"
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration
  id: SecurityTokenServiceConfiguration
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: SecurityTokenServiceConfiguration
  nameWithType: SecurityTokenService.SecurityTokenServiceConfiguration
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "構成のインスタンス所有者を取得します。"
  syntax:
    content: public System.IdentityModel.Configuration.SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration { get; }
    return:
      type: System.IdentityModel.Configuration.SecurityTokenServiceConfiguration
      description: "A <xref href=&quot;System.IdentityModel.Configuration.SecurityTokenServiceConfiguration&quot;> </xref>現在のインスタンスの構成を格納しています。"
  overload: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Validate(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Validate(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Validate(ClaimsPrincipal,RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "派生クラスでオーバーライドされると、Ws-trust 検証要求を処理します。"
  remarks: "このメソッドの既定の実装が<xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>。</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>がスローされます。"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Validate (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "A <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>を表すトークンの要求者の id。"
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>セキュリティ トークンの要求を表すです。 これにより、要求が含まれます。 メッセージだけでなく他のクライアントが承認コンテキストなどの情報を関連します。"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref>を表す RSTR を呼び出し元に戻ります。"
  overload: System.IdentityModel.SecurityTokenService.Validate*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: ValidateRequest(RequestSecurityToken)
  nameWithType: SecurityTokenService.ValidateRequest(RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.ValidateRequest(RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "このインスタンスによってカプセル化されたセキュリティ トークン要求 (RST) を検証します。"
  remarks: "クロス メソッドは、トークンの発行パイプラインから (、<xref:System.IdentityModel.SecurityTokenService.Issue%2A>メソッド) を受信 RST を検証します</xref:System.IdentityModel.SecurityTokenService.Issue%2A>。 RST が STS の要件 (ポリシー) に対して検証され、有効でない場合、適切な例外がスローされます。       既定の実装、<xref:System.IdentityModel.SecurityTokenService>クラス RST、RSTR のパターンにのみと Ws-trust 仕様の問題のバインドのみをサポートしています (、<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType%2A>要求のプロパティに設定する必要があります<xref:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue?displayProperty=fullName>).</xref:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue?displayProperty=fullName> </xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType%2A> </xref:System.IdentityModel.SecurityTokenService> このメソッドの既定の実装はこれらの要件を強制 (および [例外] セクションに記載されている他のユーザー)。 カスタム STS の別の検証の要件を適用する必要がありますとは、このメソッドをオーバーライドすることができます。"
  syntax:
    content: protected virtual void ValidateRequest (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "A <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref>要求を表すです。"
  overload: System.IdentityModel.SecurityTokenService.ValidateRequest*
  exceptions:
  - type: System.IdentityModel.Protocols.WSTrust.InvalidRequestException
    commentId: T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException
    description: "<code>request</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -、<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType*>要求のプロパティに設定されていない<xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue&quot;></xref>です。       - または -、<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType*>要求のプロパティは使用されません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>で定義されている定数のいずれか、または、 <xref href=&quot;System.IdentityModel.Protocols.WSTrust.KeyTypes&quot;> </xref>クラスです。       - または -、<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType*>が要求の<xref href=&quot;System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer&quot;></xref>と<xref uid=&quot;langword_csharp_KeySize&quot; name=&quot;KeySize&quot; href=&quot;&quot;></xref>要素が含まれているが、その値が&0; と等しくないです。"
  - type: System.IdentityModel.UnsupportedTokenTypeBadRequestException
    commentId: T:System.IdentityModel.UnsupportedTokenTypeBadRequestException
    description: "STS がトークン要求の種類をサポートしていません (の値に基づいて、<xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType*>要求のプロパティ).</xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType*>"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IdentityModel.Protocols.WSTrust.InvalidRequestException
  parent: System.IdentityModel.Protocols.WSTrust
  isExternal: false
  name: InvalidRequestException
  nameWithType: InvalidRequestException
  fullName: System.IdentityModel.Protocols.WSTrust.InvalidRequestException
- uid: System.IdentityModel.UnsupportedTokenTypeBadRequestException
  parent: System.IdentityModel
  isExternal: false
  name: UnsupportedTokenTypeBadRequestException
  nameWithType: UnsupportedTokenTypeBadRequestException
  fullName: System.IdentityModel.UnsupportedTokenTypeBadRequestException
- uid: System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenService(SecurityTokenServiceConfiguration)
  nameWithType: SecurityTokenService.SecurityTokenService(SecurityTokenServiceConfiguration)
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenService(SecurityTokenServiceConfiguration)
- uid: System.IdentityModel.Configuration.SecurityTokenServiceConfiguration
  parent: System.IdentityModel.Configuration
  isExternal: false
  name: SecurityTokenServiceConfiguration
  nameWithType: SecurityTokenServiceConfiguration
  fullName: System.IdentityModel.Configuration.SecurityTokenServiceConfiguration
- uid: System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
  parent: System.IdentityModel.Protocols.WSTrust
  isExternal: false
  name: RequestSecurityToken
  nameWithType: RequestSecurityToken
  fullName: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
- uid: System.IdentityModel.Scope
  parent: System.IdentityModel
  isExternal: false
  name: Scope
  nameWithType: Scope
  fullName: System.IdentityModel.Scope
- uid: System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
- uid: System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
- uid: System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
- uid: System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
- uid: System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Cancel(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Cancel(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Cancel(ClaimsPrincipal,RequestSecurityToken)
- uid: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
  parent: System.IdentityModel.Protocols.WSTrust
  isExternal: false
  name: RequestSecurityTokenResponse
  nameWithType: RequestSecurityTokenResponse
  fullName: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
- uid: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
- uid: System.IdentityModel.Tokens.SecurityTokenDescriptor
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenDescriptor
  fullName: System.IdentityModel.Tokens.SecurityTokenDescriptor
- uid: System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndCancel(IAsyncResult)
  nameWithType: SecurityTokenService.EndCancel(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndCancel(IAsyncResult)
- uid: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndGetOutputClaimsIdentity(IAsyncResult)
  nameWithType: SecurityTokenService.EndGetOutputClaimsIdentity(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(IAsyncResult)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndGetScope(IAsyncResult)
  nameWithType: SecurityTokenService.EndGetScope(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndGetScope(IAsyncResult)
- uid: System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndIssue(IAsyncResult)
  nameWithType: SecurityTokenService.EndIssue(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndIssue(IAsyncResult)
- uid: System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndRenew(IAsyncResult)
  nameWithType: SecurityTokenService.EndRenew(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndRenew(IAsyncResult)
- uid: System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndValidate(IAsyncResult)
  nameWithType: SecurityTokenService.EndValidate(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndValidate(IAsyncResult)
- uid: System.IdentityModel.SecurityTokenService.GetIssuerName
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetIssuerName()
  nameWithType: SecurityTokenService.GetIssuerName()
  fullName: System.IdentityModel.SecurityTokenService.GetIssuerName()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
- uid: System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetProofToken(RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.GetProofToken(RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.GetProofToken(RequestSecurityToken,Scope)
- uid: System.IdentityModel.Tokens.ProofDescriptor
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: ProofDescriptor
  nameWithType: ProofDescriptor
  fullName: System.IdentityModel.Tokens.ProofDescriptor
- uid: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetRequestorProofEncryptingCredentials(RequestSecurityToken)
  nameWithType: SecurityTokenService.GetRequestorProofEncryptingCredentials(RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(RequestSecurityToken)
- uid: System.IdentityModel.Tokens.EncryptingCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: EncryptingCredentials
  nameWithType: EncryptingCredentials
  fullName: System.IdentityModel.Tokens.EncryptingCredentials
- uid: System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
  nameWithType: SecurityTokenService.GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
  fullName: System.IdentityModel.SecurityTokenService.GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
- uid: System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetScope(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.GetScope(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.GetScope(ClaimsPrincipal,RequestSecurityToken)
- uid: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetSecurityTokenHandler(String)
  nameWithType: SecurityTokenService.GetSecurityTokenHandler(String)
  fullName: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(String)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenHandler
  nameWithType: SecurityTokenHandler
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler
- uid: System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetTokenLifetime(Lifetime)
  nameWithType: SecurityTokenService.GetTokenLifetime(Lifetime)
  fullName: System.IdentityModel.SecurityTokenService.GetTokenLifetime(Lifetime)
- uid: System.IdentityModel.Protocols.WSTrust.Lifetime
  parent: System.IdentityModel.Protocols.WSTrust
  isExternal: false
  name: Lifetime
  nameWithType: Lifetime
  fullName: System.IdentityModel.Protocols.WSTrust.Lifetime
- uid: System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Issue(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Issue(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Issue(ClaimsPrincipal,RequestSecurityToken)
- uid: System.IdentityModel.SecurityTokenService.Principal
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Principal
  nameWithType: SecurityTokenService.Principal
  fullName: System.IdentityModel.SecurityTokenService.Principal
- uid: System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Renew(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Renew(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Renew(ClaimsPrincipal,RequestSecurityToken)
- uid: System.IdentityModel.SecurityTokenService.Request
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Request
  nameWithType: SecurityTokenService.Request
  fullName: System.IdentityModel.SecurityTokenService.Request
- uid: System.IdentityModel.SecurityTokenService.Scope
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Scope
  nameWithType: SecurityTokenService.Scope
  fullName: System.IdentityModel.SecurityTokenService.Scope
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenService.SecurityTokenDescriptor
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenServiceConfiguration
  nameWithType: SecurityTokenService.SecurityTokenServiceConfiguration
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration
- uid: System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Validate(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Validate(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Validate(ClaimsPrincipal,RequestSecurityToken)
- uid: System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: ValidateRequest(RequestSecurityToken)
  nameWithType: SecurityTokenService.ValidateRequest(RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.ValidateRequest(RequestSecurityToken)
- uid: System.IdentityModel.SecurityTokenService.#ctor*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenService
  nameWithType: SecurityTokenService.SecurityTokenService
- uid: System.IdentityModel.SecurityTokenService.BeginCancel*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginCancel
  nameWithType: SecurityTokenService.BeginCancel
- uid: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginGetOutputClaimsIdentity
  nameWithType: SecurityTokenService.BeginGetOutputClaimsIdentity
- uid: System.IdentityModel.SecurityTokenService.BeginGetScope*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginGetScope
  nameWithType: SecurityTokenService.BeginGetScope
- uid: System.IdentityModel.SecurityTokenService.BeginIssue*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginIssue
  nameWithType: SecurityTokenService.BeginIssue
- uid: System.IdentityModel.SecurityTokenService.BeginRenew*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginRenew
  nameWithType: SecurityTokenService.BeginRenew
- uid: System.IdentityModel.SecurityTokenService.BeginValidate*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginValidate
  nameWithType: SecurityTokenService.BeginValidate
- uid: System.IdentityModel.SecurityTokenService.Cancel*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Cancel
  nameWithType: SecurityTokenService.Cancel
- uid: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: CreateSecurityTokenDescriptor
  nameWithType: SecurityTokenService.CreateSecurityTokenDescriptor
- uid: System.IdentityModel.SecurityTokenService.EndCancel*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndCancel
  nameWithType: SecurityTokenService.EndCancel
- uid: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndGetOutputClaimsIdentity
  nameWithType: SecurityTokenService.EndGetOutputClaimsIdentity
- uid: System.IdentityModel.SecurityTokenService.EndGetScope*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndGetScope
  nameWithType: SecurityTokenService.EndGetScope
- uid: System.IdentityModel.SecurityTokenService.EndIssue*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndIssue
  nameWithType: SecurityTokenService.EndIssue
- uid: System.IdentityModel.SecurityTokenService.EndRenew*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndRenew
  nameWithType: SecurityTokenService.EndRenew
- uid: System.IdentityModel.SecurityTokenService.EndValidate*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndValidate
  nameWithType: SecurityTokenService.EndValidate
- uid: System.IdentityModel.SecurityTokenService.GetIssuerName*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetIssuerName
  nameWithType: SecurityTokenService.GetIssuerName
- uid: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetOutputClaimsIdentity
  nameWithType: SecurityTokenService.GetOutputClaimsIdentity
- uid: System.IdentityModel.SecurityTokenService.GetProofToken*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetProofToken
  nameWithType: SecurityTokenService.GetProofToken
- uid: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetRequestorProofEncryptingCredentials
  nameWithType: SecurityTokenService.GetRequestorProofEncryptingCredentials
- uid: System.IdentityModel.SecurityTokenService.GetResponse*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetResponse
  nameWithType: SecurityTokenService.GetResponse
- uid: System.IdentityModel.SecurityTokenService.GetScope*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetScope
  nameWithType: SecurityTokenService.GetScope
- uid: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetSecurityTokenHandler
  nameWithType: SecurityTokenService.GetSecurityTokenHandler
- uid: System.IdentityModel.SecurityTokenService.GetTokenLifetime*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetTokenLifetime
  nameWithType: SecurityTokenService.GetTokenLifetime
- uid: System.IdentityModel.SecurityTokenService.Issue*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Issue
  nameWithType: SecurityTokenService.Issue
- uid: System.IdentityModel.SecurityTokenService.Principal*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Principal
  nameWithType: SecurityTokenService.Principal
- uid: System.IdentityModel.SecurityTokenService.Renew*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Renew
  nameWithType: SecurityTokenService.Renew
- uid: System.IdentityModel.SecurityTokenService.Request*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Request
  nameWithType: SecurityTokenService.Request
- uid: System.IdentityModel.SecurityTokenService.Scope*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Scope
  nameWithType: SecurityTokenService.Scope
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenService.SecurityTokenDescriptor
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenServiceConfiguration
  nameWithType: SecurityTokenService.SecurityTokenServiceConfiguration
- uid: System.IdentityModel.SecurityTokenService.Validate*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Validate
  nameWithType: SecurityTokenService.Validate
- uid: System.IdentityModel.SecurityTokenService.ValidateRequest*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: ValidateRequest
  nameWithType: SecurityTokenService.ValidateRequest
