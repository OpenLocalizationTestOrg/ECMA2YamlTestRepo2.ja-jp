### YamlMime:ManagedReference
items:
- uid: System.Data.EntityClient.EntityConnection
  id: EntityConnection
  children:
  - System.Data.EntityClient.EntityConnection.#ctor
  - System.Data.EntityClient.EntityConnection.#ctor(System.String)
  - System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  - System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.EntityClient.EntityConnection.BeginTransaction
  - System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  - System.Data.EntityClient.EntityConnection.Close
  - System.Data.EntityClient.EntityConnection.ConnectionString
  - System.Data.EntityClient.EntityConnection.ConnectionTimeout
  - System.Data.EntityClient.EntityConnection.CreateCommand
  - System.Data.EntityClient.EntityConnection.CreateDbCommand
  - System.Data.EntityClient.EntityConnection.Database
  - System.Data.EntityClient.EntityConnection.DataSource
  - System.Data.EntityClient.EntityConnection.DbProviderFactory
  - System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  - System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  - System.Data.EntityClient.EntityConnection.Open
  - System.Data.EntityClient.EntityConnection.ServerVersion
  - System.Data.EntityClient.EntityConnection.State
  - System.Data.EntityClient.EntityConnection.StoreConnection
  langs:
  - csharp
  name: EntityConnection
  nameWithType: EntityConnection
  fullName: System.Data.EntityClient.EntityConnection
  type: Class
  summary: "概念モデルおよびデータ ソース接続への参照が含まれています。 このクラスは継承できません。"
  remarks: "回避するなど、オブジェクトが不注意に<xref:System.Data.Common.CommandTrees>と<xref:System.Data.Objects.ObjectContext>EntityConnection でメタデータと同期は、そのメタデータをロックする必要があります</xref:System.Data.Objects.ObjectContext></xref:System.Data.Common.CommandTrees>。 メタデータがロックされた後接続文字列への変更は許可されません。 メタデータがロックされている&2; つのシナリオを次に示します:-既定のコンス トラクターまたは、EntityConnection インスタンスを構築、<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>コンス トラクターは、接続文字列を使用できます</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>。 どちらの場合、接続が開かれる前に、接続文字列が複数回変更される可能性があります。 呼び出す<xref:System.Data.EntityClient.EntityConnection.Open%2A>または<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>、メタデータがロックされます</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A></xref:System.Data.EntityClient.EntityConnection.Open%2A>。      <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29><xref:System.Data.Metadata.Edm.MetadataWorkspace>および<xref:System.Data.Common.DbConnection>。</xref:System.Data.Common.DbConnection></xref:System.Data.Metadata.Edm.MetadataWorkspace>を受け入れるコンス トラクター</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>を使用-EntityConnection インスタンスを構築します。 ここでは、メタデータは構築時にロックされています。 接続文字列を変更ことはできません。       メタデータが読み込まれるときに、EntityConnection では、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。       コード例については、次を参照してください。 [EntityClient 扱う](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)です。"
  syntax:
    content: 'public sealed class EntityConnection : System.Data.Common.DbConnection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.GetSchema
  - System.Data.Common.DbConnection.GetSchema(System.String)
  - System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor
  id: '#ctor'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection()
  nameWithType: EntityConnection.EntityConnection()
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>クラスです。"
  remarks: "回避するなど、オブジェクトが不注意に<xref:System.Data.Common.CommandTrees>と<xref:System.Data.Objects.ObjectContext>で、メタデータと同期<xref:System.Data.EntityClient.EntityConnection>そのメタデータをロックする必要があります</xref:System.Data.EntityClient.EntityConnection></xref:System.Data.Objects.ObjectContext></xref:System.Data.Common.CommandTrees>。 メタデータがロックされた後接続文字列への変更は許可されません。 メタデータがロックされている&2; つのシナリオを次に示します: -<xref:System.Data.EntityClient.EntityConnection>既定のコンス トラクターまたはインスタンスが構築された、<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>コンス トラクターは、接続文字列を使用できます</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29></xref:System.Data.EntityClient.EntityConnection>。 どちらの場合、接続が開かれる前に、接続文字列が複数回変更される可能性があります。 呼び出す<xref:System.Data.EntityClient.EntityConnection.Open%2A>または<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>、メタデータがロックされます</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A></xref:System.Data.EntityClient.EntityConnection.Open%2A>。      - <xref:System.Data.EntityClient.EntityConnection>、インスタンスの生成<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29><xref:System.Data.Metadata.Edm.MetadataWorkspace>および<xref:System.Data.Common.DbConnection>。</xref:System.Data.Common.DbConnection></xref:System.Data.Metadata.Edm.MetadataWorkspace>を受け入れるコンス トラクター</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>を使用</xref:System.Data.EntityClient.EntityConnection> ここでは、メタデータは構築時にロックします。 接続文字列を変更ことはできません。       メタデータが読み込まれるときに、 <xref:System.Data.EntityClient.EntityConnection>、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します</xref:System.Data.EntityClient.EntityConnection>。       コード例については、次を参照してください。 [EntityClient 扱う](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)です。"
  syntax:
    content: public EntityConnection ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection(String)
  nameWithType: EntityConnection.EntityConnection(String)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(String)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>クラス、接続文字列に基づいています。"
  remarks: "アプリケーションの構成ファイルに格納されている名前付き接続文字列を作成します。 代わりにこの名前付き接続文字列を指定することができます、`connectionString`パラメーター<xref:System.Data.EntityClient.EntityConnection>クラス</xref:System.Data.EntityClient.EntityConnection>をインスタンス化するとき       オブジェクトが不注意を回避する<xref:System.Data.Common.CommandTrees>と<xref:System.Data.Objects.ObjectContext>で、メタデータと同期<xref:System.Data.EntityClient.EntityConnection>そのメタデータをロックする必要があります</xref:System.Data.EntityClient.EntityConnection></xref:System.Data.Objects.ObjectContext></xref:System.Data.Common.CommandTrees>。 メタデータがロックされた後接続文字列への変更は許可されません。 メタデータがロックされている&2; つのシナリオを次に示します: -<xref:System.Data.EntityClient.EntityConnection>既定のコンス トラクター、または接続文字列を受け入れるこのコンス トラクター (EntityConnection) を通じてインスタンスを構築します</xref:System.Data.EntityClient.EntityConnection>。 どちらの場合、接続が開かれる前に、接続文字列が複数回変更される可能性があります。 呼び出す<xref:System.Data.EntityClient.EntityConnection.Open%2A>または<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>、メタデータがロックされます</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A></xref:System.Data.EntityClient.EntityConnection.Open%2A>。      - <xref:System.Data.EntityClient.EntityConnection>、インスタンスの生成<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29><xref:System.Data.Metadata.Edm.MetadataWorkspace>および<xref:System.Data.Common.DbConnection>。</xref:System.Data.Common.DbConnection></xref:System.Data.Metadata.Edm.MetadataWorkspace>を受け入れるコンス トラクター</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>を使用</xref:System.Data.EntityClient.EntityConnection> ここでは、メタデータは構築時にロックします。 接続文字列を変更ことはできません。       メタデータが読み込まれるときに、 <xref:System.Data.EntityClient.EntityConnection>、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します</xref:System.Data.EntityClient.EntityConnection>。       コード例については、次を参照してください。 [EntityClient 扱う](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)です。"
  syntax:
    content: public EntityConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "プロバイダー固有の接続文字列。"
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無効な接続文字列キーワードが指定されて、または、必要な接続文字列キーワードが指定されていません。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  id: '#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection(MetadataWorkspace,DbConnection)
  nameWithType: EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>と指定したクラス<xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;></xref>と<xref href=&quot;System.Data.Common.DbConnection&quot;></xref>です。"
  remarks: "このコンス トラクターでは、作成することができます、<xref:System.Data.EntityClient.EntityConnection>がディスク上のファイルからではなく、またはアセンブリ内の埋め込みリソースからのメタデータから</xref:System.Data.EntityClient.EntityConnection>。       回避するなど、オブジェクトが不注意に<xref:System.Data.Common.CommandTrees>と<xref:System.Data.Objects.ObjectContext>で、メタデータと同期、<xref:System.Data.EntityClient.EntityConnection>そのメタデータをロックする必要があります</xref:System.Data.EntityClient.EntityConnection></xref:System.Data.Objects.ObjectContext></xref:System.Data.Common.CommandTrees>。 メタデータがロックされた後接続文字列への変更は許可されません。 メタデータがロックされている&2; つのシナリオを次に示します: -<xref:System.Data.EntityClient.EntityConnection>既定のコンス トラクターまたはインスタンスが構築された、<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>コンス トラクターは、接続文字列を使用できます</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29></xref:System.Data.EntityClient.EntityConnection>。 どちらの場合、接続が開かれる前に、接続文字列が複数回変更される可能性があります。 呼び出す<xref:System.Data.EntityClient.EntityConnection.Open%2A>または<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>、メタデータがロックされます</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A></xref:System.Data.EntityClient.EntityConnection.Open%2A>。      <xref:System.Data.EntityClient.EntityConnection>このコンス トラクター (EntityConnection)<xref:System.Data.Metadata.Edm.MetadataWorkspace>および<xref:System.Data.Common.DbConnection>。</xref:System.Data.Common.DbConnection></xref:System.Data.Metadata.Edm.MetadataWorkspace>を受け入れるインスタンスが構築された</xref:System.Data.EntityClient.EntityConnection>- ここでは、メタデータは構築時にロックします。 接続文字列を変更ことはできません。       メタデータが読み込まれるときに、 <xref:System.Data.EntityClient.EntityConnection>、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します</xref:System.Data.EntityClient.EntityConnection>。"
  syntax:
    content: public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);
    parameters:
    - id: workspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "A <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref>にこれを関連付けられる<xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>です。"
    - id: connection
      type: System.Data.Common.DbConnection
      description: "基になるデータ ソース接続をこの<xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>オブジェクト。"
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>workspace</code> or <code>connection</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "概念モデルがワークスペースから見つかりません。       - または - ワークスペースから、マッピング ファイルが見つかりません。       または、ストレージ モデルがワークスペースから見つかりません。       - または -、 <code> connection </code>閉じた状態ではありません。"
  - type: System.Data.ProviderIncompatibleException
    commentId: T:System.Data.ProviderIncompatibleException
    description: "<code> connection </code> ADO.NET Entity Framework と互換性のあるプロバイダーではありません。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "追加します。"
    return:
      type: System.Data.Common.DbTransaction
      description: "追加します。"
  overload: System.Data.EntityClient.EntityConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: EntityConnection.BeginTransaction()
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "基になるプロバイダーを使用してトランザクションを開始します。"
  remarks: "BeginTransaction メソッドを使用して、<xref:System.Data.IsolationLevel>トランザクション分離レベル</xref:System.Data.IsolationLevel>。 別の分離レベルを指定するには、 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>。</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>を呼び出します この値は、別の基になるプロバイダーによって異なる方法で解釈可能性があります。 複数のプロバイダーの間で移植できるアプリケーションを実行する場合に、 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>。</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>を呼び出すことによってトランザクションの分離レベルを指定する必要があります明示的に、       特定の時点で、BeginTransaction を通じて作成された&2; つ以上のアクティブなトランザクションがあります。 上の<xref:System.Data.EntityClient.EntityConnection>既にある現在のトランザクションの結果<xref:System.InvalidOperationException>。</xref:System.InvalidOperationException> </xref:System.Data.EntityClient.EntityConnection> BeginTransaction オーバー ロードのいずれかを呼び出そうとしました。"
  syntax:
    content: public System.Data.EntityClient.EntityTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.EntityClient.EntityTransaction
      description: "A new <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref>. 返された<xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref>インスタンスが後で関連付けられる、 <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref>そのトランザクション内でコマンドを実行します。"
  overload: System.Data.EntityClient.EntityConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "基になるプロバイダーが不明です。       - または - で BeginTransaction への呼び出しが行われた、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>を既に現在のトランザクションを持ちます。       - または - の状態、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>は<xref href=&quot;System.Data.ConnectionState&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "基になるプロバイダーを使用して、指定された分離レベルでトランザクションを開始します。"
  remarks: "特定の時点であります<xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>。</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>で作成された&2; つ以上のアクティブなトランザクション <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A><xref:System.Data.EntityClient.EntityConnection>既にある現在のトランザクションの結果<xref:System.InvalidOperationException>。</xref:System.InvalidOperationException></xref:System.Data.EntityClient.EntityConnection>でオーバー ロード</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>のいずれかを呼び出そうとしました。"
  syntax:
    content: public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "トランザクションの分離レベル。"
    return:
      type: System.Data.EntityClient.EntityTransaction
      description: "A new <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref>. 返された<xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref>インスタンスが後で関連付けられる、 <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref>そのトランザクション内でコマンドを実行します。"
  overload: System.Data.EntityClient.EntityConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "基になるプロバイダーが不明です。       - または - への呼び出し<xref:System.Data.EntityClient.EntityConnection.BeginTransaction*>に対して行われました、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>を既に現在のトランザクションを持つ</xref:System.Data.EntityClient.EntityConnection.BeginTransaction*>。       - または - の状態、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>は<xref href=&quot;System.Data.ConnectionState&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: EntityConnection.ChangeDatabase(String)
  fullName: System.Data.EntityClient.EntityConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "サポートされていません。"
  remarks: "<xref:System.Data.Common.DbConnection>。</xref:System.Data.Common.DbConnection>から派生している場合は必須 ChangeDatabase メソッドです。 このメソッドはサポートされておらず、 <xref:System.NotSupportedException>。</xref:System.NotSupportedException>が生成されます。"
  syntax:
    content: public override void ChangeDatabase (string databaseName);
    parameters:
    - id: databaseName
      type: System.String
      description: "サポートされていません。"
  overload: System.Data.EntityClient.EntityConnection.ChangeDatabase*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "メソッドが呼び出されたとき。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Close
  id: Close
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Close()
  nameWithType: EntityConnection.Close()
  fullName: System.Data.EntityClient.EntityConnection.Close()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "データベースへの接続を閉じます。"
  remarks: "基になるデータ プロバイダーが不明の場合、何も行いません Close の呼び出し。"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.Close*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続を閉じるときにエラーが発生しました。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
  fullName: System.Data.EntityClient.EntityConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "取得または設定、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>接続文字列。"
  remarks: "An `EntityClient` connection string consists of a sequence of keyword/value parameter pairs separated by semicolons. The equals sign (=) connects each keyword and its value. The following table lists the valid names for keyword values in the ConnectionString.  \n  \n|Keyword|Description|  \n|-------------|-----------------|  \n|`Provider`|Required if the `Name` keyword is not specified. The provider name, which is used to retrieve the <xref:System.Data.Common.DbProviderFactory> object for the underlying provider. This value is constant.<br /><br /> When the `Name` keyword is not included in the connection string, a non-empty value for the `Provider` keyword is required. This keyword is mutually exclusive with the `Name` keyword.|  \n|`Provider Connection String`|Optional. Specifies the provider-specific connection string that is passed to the underlying data source. This connection string is expressed by using valid keyword/value pairs for the data provider. An invalid `Provider Connection String` will cause a run-time error when it is evaluated by the data source.<br /><br /> This keyword is mutually exclusive with the `Name` keyword.<br /><br /> The value of the `Provider Connection String` must be surrounded by quotes. The following is an example:<br /><br /> `Provider Connection String =\"Server=serverName; User ID = userID\";`<br /><br /> The following example is not going to work:<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|  \n|`Metadata`|Required if the `Name` keyword is not specified. A pipe-delimited list of directories, files, and resource locations in which to look for model and mapping information. The following is an example:<br /><br /> `Metadata=`<br /><br /> `c:\\model &#124; c:\\model\\sql\\mapping.msl;`<br /><br /> Blank spaces on each side of the pipe separator are ignored.<br /><br /> This keyword is mutually exclusive with the `Name` keyword.|  \n|`Name`|The application can optionally specify the connection name in an application configuration file that provides the required keyword/value connection string values. In this case, you cannot supply them directly in the connection string. The `Name` keyword is not allowed in a configuration file.<br /><br /> When the `Name` keyword is not included in the connection string, a non-empty values for Provider keyword is required.<br /><br /> This keyword is mutually exclusive with all the other connection string keywords.|  \n  \n The application can supply the keyword/values directly in the ConnectionString property, or it can specify a value for the `Name` keyword. If the `Name` keyword is specified, the connection string keyword/values are retrieved from an application configuration file, as follows:  \n  \n `Name=AdventureWorksEntities;`  \n  \n If the `Name` keyword is used in the ConnectionString property, other keywords are not allowed. The `Name` keyword refers to a named connection string that is stored in the `connectionStrings` section in an application configuration file, as shown in the following example. The `Provider`, `Metadata`, and `Provider Connection String` values are retrieved from the configuration file at run time.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The keyword/value pairs can also be supplied directly in the ConnectionString property, as shown in the following example. In this case, the `Name` keyword is not used.  \n  \n```  \n\"Provider=System.Data.SqlClient;  \nMetadata=c:\\metadata|c:\\Metadata\\Sql;  \nProvider Connection String= 'Data Source=localhost;  \n    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' \"  \n```  \n  \n To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:  \n  \n-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.  \n  \n-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.  \n  \n When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present."
  example:
  - "The following example demonstrates how to use the <xref:System.Data.EntityClient.EntityConnectionStringBuilder> in conjunction with a <xref:System.Data.SqlClient.SqlConnectionStringBuilder>. The code sets properties of a `SqlConnectionStringBuilder` to create a <xref:System.Data.SqlClient.SqlConnection> string that supplies part of the underlying provider connection string. Note that the `Provider` name cannot be set by using the `SqlConnectionStringBuilder`, because it does not use valid `SqlConnection` syntax. The code creates the <xref:System.Data.EntityClient.EntityConnection> string by setting `EntityConnectionStringBuilder` properties.  \n  \n [!code-vb[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/add/codesnippet/visualbasic/eSQLExamplesVB/Program.vb#buildingconnectionstringwithentitycommand)]\n [!code-cs[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/add/codesnippet/csharp/eSQLExamplesCS/Program.cs#buildingconnectionstringwithentitycommand)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "データ ソースへの初期接続を確立するために必要な接続文字列。 既定値は、空の文字列です。 閉じている接続では、現在設定されている値が返されます。 値が設定されていない場合は、空の文字列が返されます。"
  overload: System.Data.EntityClient.EntityConnection.ConnectionString*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "後の ConnectionString プロパティを設定しようとしましたが、 [EntityConnection](~/add/includes/ajax-current-ext-md.md)の<xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;></xref>初期化されました。 [MetadataWorkspace](~/add/includes/ajax-current-ext-md.md)は初期化のいずれかの場合、 <xref href=&quot;System.Data.Odbc.OdbcError&quot;> </xref>を受け取るオーバー ロードを通じてインスタンスが構築された、 <xref href=&quot;System.Data.Odbc.OdbcError&quot;> </xref>をパラメーターとして場合や、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>インスタンスが開かれました。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "無効な接続文字列キーワードが指定されたか、必要な接続文字列キーワードが指定されていません。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
  fullName: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "試行を終了してエラーが発生する前に接続を確立しようとするときに待機する秒数を取得します。"
  remarks: "基になるデータ プロバイダーが不明の場合は、0 を返します。"
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "時間 (秒単位) を開くには接続の待機にできます。 既定値は、基になるデータ プロバイダーの既定のタイムアウトです。"
  overload: System.Data.EntityClient.EntityConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "設定されている値が 0 未満です。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: EntityConnection.CreateCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "新しいインスタンスを作成、 <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;></xref>で、<xref:System.Data.EntityClient.EntityCommand.Connection*>設定に<xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref></xref:System.Data.EntityClient.EntityCommand.Connection*> 。"
  syntax:
    content: public System.Data.EntityClient.EntityCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.EntityClient.EntityCommand
      description: "<xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref>オブジェクト。"
  overload: System.Data.EntityClient.EntityConnection.CreateCommand*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "基になるデータ プロバイダーの名前が不明です。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: EntityConnection.CreateDbCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "追加します。"
  overload: System.Data.EntityClient.EntityConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Database
  id: Database
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Database
  nameWithType: EntityConnection.Database
  fullName: System.Data.EntityClient.EntityConnection.Database
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "現在のデータベースまたは接続が開かれた後に使用されるデータベースの名前を取得します。"
  remarks: "特定のキーワード値など`Database`データベースのプロパティにマップされる、基になるデータ プロバイダーのマニュアルを参照してください。 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]と同等のキーワードがドキュメントを参照して、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティ</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>。"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "値、 <xref uid=&quot;langword_csharp_Database&quot; name=&quot;Database&quot; href=&quot;&quot;> </xref>基になるデータ プロバイダーのプロパティです。"
  overload: System.Data.EntityClient.EntityConnection.Database*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "基になるデータ プロバイダーが不明です。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.DataSource
  id: DataSource
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: EntityConnection.DataSource
  fullName: System.Data.EntityClient.EntityConnection.DataSource
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "接続するデータ ソースの名前またはネットワーク アドレスを取得します。"
  remarks: "特定のキーワード値など`DataSource`、データ ソースのプロパティにマップされる、基になるデータ プロバイダーのマニュアルを参照してください。 [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]と同等のキーワードがドキュメントを参照して、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>プロパティ</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>。"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "データ ソースの名前。 既定値は、空の文字列です。"
  overload: System.Data.EntityClient.EntityConnection.DataSource*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "基になるデータ プロバイダーが不明です。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
  fullName: System.Data.EntityClient.EntityConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "追加します。"
  overload: System.Data.EntityClient.EntityConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EntityConnection.Dispose(Boolean)
  fullName: System.Data.EntityClient.EntityConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "追加します。"
  overload: System.Data.EntityClient.EntityConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: EntityConnection.EnlistTransaction(Transaction)
  fullName: System.Data.EntityClient.EntityConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "この参加<xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>指定されたトランザクションにします。"
  remarks: "このメソッドは、渡された<xref:System.Transactions.Transaction>。</xref:System.Transactions.Transaction>で明示的に参加させることは、データ ソース接続への呼び出しを転送します。"
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "登録先のトランザクション オブジェクトです。"
  overload: System.Data.EntityClient.EntityConnection.EnlistTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "状態、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>は<xref href=&quot;System.Data.ConnectionState&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  id: GetMetadataWorkspace
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: GetMetadataWorkspace()
  nameWithType: EntityConnection.GetMetadataWorkspace()
  fullName: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "返します、 <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref>これに関連付けられている<xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>です。"
  remarks: "A<xref:System.Data.Metadata.Edm.MetadataWorkspace>ときに自動的に作成された、<xref:System.Data.EntityClient.EntityConnection>クラスを作成します</xref:System.Data.EntityClient.EntityConnection></xref:System.Data.Metadata.Edm.MetadataWorkspace>。 作成プロセスでは、メタデータ固有の例外をスローがあります。 メタデータがメモリに読み込まれ、Entity Data Model (EDM) アプリケーションが、基になるデータ ソースに関する情報にアクセスするには、そのメタデータを使用します。 詳細については、次を参照してください。 [ADO.NET メタデータ](http://msdn.microsoft.com/en-us/196097a5-a791-4ac4-9e6a-805685d481d5)です。       回避するなど、オブジェクトが不注意に<xref:System.Data.Common.CommandTrees>と<xref:System.Data.Objects.ObjectContext>で、メタデータと同期<xref:System.Data.EntityClient.EntityConnection>そのメタデータをロックする必要があります</xref:System.Data.EntityClient.EntityConnection></xref:System.Data.Objects.ObjectContext></xref:System.Data.Common.CommandTrees>。 メタデータがロックされた後接続文字列への変更は許可されません。 メタデータがロックされている&2; つのシナリオを次に示します: -<xref:System.Data.EntityClient.EntityConnection>既定のコンス トラクターまたはインスタンスが構築された、<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>コンス トラクターは、接続文字列を使用できます</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29></xref:System.Data.EntityClient.EntityConnection>。 どちらの場合、接続が開かれる前に、接続文字列が複数回変更される可能性があります。 <xref:System.Data.EntityClient.EntityConnection.Open%2A>または<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>、メタデータがロックされます</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>。</xref:System.Data.EntityClient.EntityConnection.Open%2A>      - <xref:System.Data.EntityClient.EntityConnection>、インスタンスの生成<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29><xref:System.Data.Metadata.Edm.MetadataWorkspace>および<xref:System.Data.Common.DbConnection>。</xref:System.Data.Common.DbConnection></xref:System.Data.Metadata.Edm.MetadataWorkspace>を受け入れるコンス トラクター</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>を使用</xref:System.Data.EntityClient.EntityConnection> ここでは、メタデータは構築時にロックします。 接続文字列を変更ことはできません。       メタデータが読み込まれるときに、 <xref:System.Data.EntityClient.EntityConnection>、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します</xref:System.Data.EntityClient.EntityConnection>。"
  syntax:
    content: public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();
    parameters: []
    return:
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "<xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref>これに関連付けられている<xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>です。"
  overload: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace*
  exceptions:
  - type: System.Data.MetadataException
    commentId: T:System.Data.MetadataException
    description: "インラインの接続文字列には、無効なが含まれています。 <xref uid=&quot;langword_csharp_Metadata&quot; name=&quot;Metadata&quot; href=&quot;&quot;> </xref>キーワード値。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Open
  id: Open
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Open()
  nameWithType: EntityConnection.Open()
  fullName: System.Data.EntityClient.EntityConnection.Open()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "呼び出して、基になるデータ プロバイダーのデータ ソースへの接続を確立<xref uid=&quot;langword_csharp_ Open&quot; name=&quot; Open&quot; href=&quot;&quot;></xref>メソッドです。"
  remarks: "回避するなど、オブジェクトが不注意に<xref:System.Data.Common.CommandTrees>と<xref:System.Data.Objects.ObjectContext>で、メタデータと同期<xref:System.Data.EntityClient.EntityConnection>そのメタデータをロックする必要があります</xref:System.Data.EntityClient.EntityConnection></xref:System.Data.Objects.ObjectContext></xref:System.Data.Common.CommandTrees>。 メタデータがロックされた後接続文字列への変更は許可されません。 メタデータがロックされている&2; つのシナリオを次に示します: -<xref:System.Data.EntityClient.EntityConnection>既定のコンス トラクターまたはインスタンスが構築された、<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>コンス トラクターは、接続文字列を使用できます</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29></xref:System.Data.EntityClient.EntityConnection>。 どちらの場合、接続が開かれる前に、接続文字列が複数回変更される可能性があります。 呼び出す<xref:System.Data.EntityClient.EntityConnection.Open%2A>または<xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>、メタデータがロックされます</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A></xref:System.Data.EntityClient.EntityConnection.Open%2A>。      -<xref:System.Data.EntityClient.EntityConnection>を通じてインスタンスが構築された、<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>を受け入れるコンス トラクター<xref:System.Data.Metadata.Edm.MetadataWorkspace>および<xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> </xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> </xref:System.Data.EntityClient.EntityConnection> ここでは、メタデータは構築時にロックします。 接続文字列を変更ことはできません。       メタデータが読み込まれるときに、 <xref:System.Data.EntityClient.EntityConnection>、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します</xref:System.Data.EntityClient.EntityConnection>。"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "エラーが発生する、接続を開くか、基になるデータ プロバイダーの名前が不明です。"
  - type: System.Data.MetadataException
    commentId: T:System.Data.MetadataException
    description: "インラインの接続文字列には、無効なが含まれています。 <xref uid=&quot;langword_csharp_Metadata&quot; name=&quot;Metadata&quot; href=&quot;&quot;> </xref>キーワード値。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
  fullName: System.Data.EntityClient.EntityConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "クライアントが接続されているデータ ソースのバージョンを表す文字列を取得します。"
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "プロバイダー接続文字列に含まれているデータ ソースのバージョン。"
  overload: System.Data.EntityClient.EntityConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続は閉じられます。"
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.State
  id: State
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: State
  nameWithType: EntityConnection.State
  fullName: System.Data.EntityClient.EntityConnection.State
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "取得、 <xref href=&quot;System.Data.ConnectionState&quot;> </xref>プロパティを基になるプロバイダーの場合、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>が開いています。 返しますそれ以外の場合、 <xref href=&quot;System.Data.ConnectionState&quot;></xref>です。"
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "<xref href=&quot;System.Data.ConnectionState&quot;></xref>、場合にのみ、両方の<xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>の内部状態と、基になるプロバイダーの<xref href=&quot;System.Data.ConnectionState&quot;></xref>が開いています。 場合、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref>の状態が開いていてもプロバイダーの<xref href=&quot;System.Data.ConnectionState&quot;></xref>を閉じると、このプロパティを返します<xref href=&quot;System.Data.ConnectionState&quot;></xref>です。 返しますそれ以外の場合、 <xref href=&quot;System.Data.ConnectionState&quot;></xref>です。"
  overload: System.Data.EntityClient.EntityConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.StoreConnection
  id: StoreConnection
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
  fullName: System.Data.EntityClient.EntityConnection.StoreConnection
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "によって使用される基になるデータ ソース接続へのアクセスを提供、 <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>オブジェクト。"
  remarks: "場合、<xref:System.Data.EntityClient.EntityConnection>オブジェクトが閉じられて、返されたデータ ソース接続は閉じられます</xref:System.Data.EntityClient.EntityConnection>。 開いている場合は、開いているデータ ソース接続が返されます。 データ ソース接続情報が設定されている場合、返される値は常に null にします。 (たとえば、既定のコンス トラクターが使用され、接続文字列が後で設定されなかった場合) のデータ ソース接続情報はありません、null 参照が返されます。       Entity Framework によって使用される同じデータ ソース接続は、アプリケーションの他の部分と共有できます。 データ ソース接続として返されます、<xref:System.Data.Common.DbConnection>オブジェクトから、<xref:System.Data.Objects.ObjectContext.Connection%2A>プロパティの<xref:System.Data.Objects.ObjectContext>、あるいは<xref:System.Data.EntityClient.EntityConnection></xref:System.Data.EntityClient.EntityConnection>StoreConnection プロパティから</xref:System.Data.Objects.ObjectContext></xref:System.Data.Objects.ObjectContext.Connection%2A></xref:System.Data.Common.DbConnection>。"
  syntax:
    content: public System.Data.Common.DbConnection StoreConnection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "<xref href=&quot;System.Data.Common.DbConnection&quot;> </xref>データ ソースの接続にします。"
  overload: System.Data.EntityClient.EntityConnection.StoreConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.ProviderIncompatibleException
  parent: System.Data
  isExternal: false
  name: ProviderIncompatibleException
  nameWithType: ProviderIncompatibleException
  fullName: System.Data.ProviderIncompatibleException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Data.MetadataException
  parent: System.Data
  isExternal: false
  name: MetadataException
  nameWithType: MetadataException
  fullName: System.Data.MetadataException
- uid: System.Data.EntityClient.EntityConnection.#ctor
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection()
  nameWithType: EntityConnection.EntityConnection()
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection()
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.String)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection(String)
  nameWithType: EntityConnection.EntityConnection(String)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection(MetadataWorkspace,DbConnection)
  nameWithType: EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: EntityConnection.BeginTransaction()
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction()
- uid: System.Data.EntityClient.EntityTransaction
  parent: System.Data.EntityClient
  isExternal: false
  name: EntityTransaction
  nameWithType: EntityTransaction
  fullName: System.Data.EntityClient.EntityTransaction
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: EntityConnection.ChangeDatabase(String)
  fullName: System.Data.EntityClient.EntityConnection.ChangeDatabase(String)
- uid: System.Data.EntityClient.EntityConnection.Close
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Close()
  nameWithType: EntityConnection.Close()
  fullName: System.Data.EntityClient.EntityConnection.Close()
- uid: System.Data.EntityClient.EntityConnection.ConnectionString
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
  fullName: System.Data.EntityClient.EntityConnection.ConnectionString
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
  fullName: System.Data.EntityClient.EntityConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityClient.EntityConnection.CreateCommand
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: EntityConnection.CreateCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateCommand()
- uid: System.Data.EntityClient.EntityCommand
  parent: System.Data.EntityClient
  isExternal: false
  name: EntityCommand
  nameWithType: EntityCommand
  fullName: System.Data.EntityClient.EntityCommand
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: EntityConnection.CreateDbCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.EntityClient.EntityConnection.Database
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Database
  nameWithType: EntityConnection.Database
  fullName: System.Data.EntityClient.EntityConnection.Database
- uid: System.Data.EntityClient.EntityConnection.DataSource
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DataSource
  nameWithType: EntityConnection.DataSource
  fullName: System.Data.EntityClient.EntityConnection.DataSource
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
  fullName: System.Data.EntityClient.EntityConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EntityConnection.Dispose(Boolean)
  fullName: System.Data.EntityClient.EntityConnection.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: EntityConnection.EnlistTransaction(Transaction)
  fullName: System.Data.EntityClient.EntityConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: GetMetadataWorkspace()
  nameWithType: EntityConnection.GetMetadataWorkspace()
  fullName: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace()
- uid: System.Data.EntityClient.EntityConnection.Open
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Open()
  nameWithType: EntityConnection.Open()
  fullName: System.Data.EntityClient.EntityConnection.Open()
- uid: System.Data.EntityClient.EntityConnection.ServerVersion
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
  fullName: System.Data.EntityClient.EntityConnection.ServerVersion
- uid: System.Data.EntityClient.EntityConnection.State
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: State
  nameWithType: EntityConnection.State
  fullName: System.Data.EntityClient.EntityConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.EntityClient.EntityConnection.StoreConnection
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
  fullName: System.Data.EntityClient.EntityConnection.StoreConnection
- uid: System.Data.EntityClient.EntityConnection.#ctor*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection
  nameWithType: EntityConnection.EntityConnection
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: EntityConnection.BeginDbTransaction
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: EntityConnection.BeginTransaction
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: EntityConnection.ChangeDatabase
- uid: System.Data.EntityClient.EntityConnection.Close*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Close
  nameWithType: EntityConnection.Close
- uid: System.Data.EntityClient.EntityConnection.ConnectionString*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
- uid: System.Data.EntityClient.EntityConnection.CreateCommand*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateCommand
  nameWithType: EntityConnection.CreateCommand
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: EntityConnection.CreateDbCommand
- uid: System.Data.EntityClient.EntityConnection.Database*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Database
  nameWithType: EntityConnection.Database
- uid: System.Data.EntityClient.EntityConnection.DataSource*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DataSource
  nameWithType: EntityConnection.DataSource
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
- uid: System.Data.EntityClient.EntityConnection.Dispose*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Dispose
  nameWithType: EntityConnection.Dispose
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: EntityConnection.EnlistTransaction
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: GetMetadataWorkspace
  nameWithType: EntityConnection.GetMetadataWorkspace
- uid: System.Data.EntityClient.EntityConnection.Open*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Open
  nameWithType: EntityConnection.Open
- uid: System.Data.EntityClient.EntityConnection.ServerVersion*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
- uid: System.Data.EntityClient.EntityConnection.State*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: State
  nameWithType: EntityConnection.State
- uid: System.Data.EntityClient.EntityConnection.StoreConnection*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
