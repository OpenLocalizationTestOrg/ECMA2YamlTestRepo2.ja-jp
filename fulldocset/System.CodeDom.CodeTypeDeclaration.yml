### YamlMime:ManagedReference
items:
- uid: System.CodeDom.CodeTypeDeclaration
  id: CodeTypeDeclaration
  children:
  - System.CodeDom.CodeTypeDeclaration.#ctor
  - System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  - System.CodeDom.CodeTypeDeclaration.BaseTypes
  - System.CodeDom.CodeTypeDeclaration.IsClass
  - System.CodeDom.CodeTypeDeclaration.IsEnum
  - System.CodeDom.CodeTypeDeclaration.IsInterface
  - System.CodeDom.CodeTypeDeclaration.IsPartial
  - System.CodeDom.CodeTypeDeclaration.IsStruct
  - System.CodeDom.CodeTypeDeclaration.Members
  - System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  - System.CodeDom.CodeTypeDeclaration.PopulateMembers
  - System.CodeDom.CodeTypeDeclaration.TypeAttributes
  - System.CodeDom.CodeTypeDeclaration.TypeParameters
  langs:
  - csharp
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration
  fullName: System.CodeDom.CodeTypeDeclaration
  type: Class
  summary: "クラス、構造体、インターフェイス、または列挙型の型宣言を表します。"
  remarks: "クラス、構造体、インターフェイス、または列挙型を宣言するコードを表すため、CodeTypeDeclaration を使用できます。 別の型の中で入れ子になっている型を宣言する CodeTypeDeclaration を使用できます。       <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A>プロパティは、基本データ型または宣言された型の基本型を指定します</xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A>。 <xref:System.CodeDom.CodeTypeDeclaration.Members%2A>プロパティを含む型のメンバーでは、メソッド、フィールド、プロパティ、コメント、およびその他の種類に含めることができます</xref:System.CodeDom.CodeTypeDeclaration.Members%2A>。 <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A>プロパティを示します、<xref:System.Reflection.TypeAttributes>型の宣言の型の型のカテゴリを示す値</xref:System.Reflection.TypeAttributes></xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A>。 <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>、 <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>、 <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>、および<xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A>メソッドを示すかどうか、型はクラス、構造体、列挙型、またはインターフェイス型は、それぞれ</xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A></xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A></xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A></xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>。      > [!NOTE] > プログラミング言語によっては、参照型またはクラスの宣言のみをサポートします。 インターフェイス、列挙型、または値の型を宣言するためのサポートの言語固有の CodeDOM コード ジェネレーターを確認するには、呼び出し、<xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>を適切なテスト メソッド<xref:System.CodeDom.Compiler.GeneratorSupport>フラグ</xref:System.CodeDom.Compiler.GeneratorSupport></xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>。 <xref:System.CodeDom.Compiler.GeneratorSupport>インターフェイスのサポートを示す<xref:System.CodeDom.Compiler.GeneratorSupport>、列挙型のサポートを示すと<xref:System.CodeDom.Compiler.GeneratorSupport>構造体などの値の型のサポートを指定します</xref:System.CodeDom.Compiler.GeneratorSupport></xref:System.CodeDom.Compiler.GeneratorSupport>。</xref:System.CodeDom.Compiler.GeneratorSupport>       クラスまたは構造体の実装、1 つの完全な宣言を構築または実装では、複数の宣言に分散できます。 <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>プロパティは、型宣言が完全または部分的なかどうかを示します</xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>。 すべてのコード ジェネレーターがため<xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>フラグ<xref:System.CodeDom.Compiler.GeneratorSupport>。</xref:System.CodeDom.Compiler.GeneratorSupport>でメソッド</xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>を呼び出すことによって、このサポートをテストする必要があります、部分的な型宣言をサポートします。"
  example:
  - "This example demonstrates using a CodeTypeDeclaration to declare a type.  \n  \n [!code-cs[CodeTypeDeclarationExample#2](~/add/codesnippet/csharp/t-system.codedom.codetyp_7_1.cs)]\n [!code-vb[CodeTypeDeclarationExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codetyp_7_1.vb)]\n [!code-cpp[CodeTypeDeclarationExample#2](~/add/codesnippet/cpp/t-system.codedom.codetyp_7_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember
  inheritance:
  - System.Object
  - System.CodeDom.CodeObject
  - System.CodeDom.CodeTypeMember
  implements: []
  inheritedMembers:
  - System.CodeDom.CodeObject.UserData
  - System.CodeDom.CodeTypeMember.Attributes
  - System.CodeDom.CodeTypeMember.Comments
  - System.CodeDom.CodeTypeMember.CustomAttributes
  - System.CodeDom.CodeTypeMember.EndDirectives
  - System.CodeDom.CodeTypeMember.LinePragma
  - System.CodeDom.CodeTypeMember.Name
  - System.CodeDom.CodeTypeMember.StartDirectives
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.#ctor
  id: '#ctor'
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: CodeTypeDeclaration()
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration()
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration()
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;> </xref>クラスです。"
  syntax:
    content: public CodeTypeDeclaration ();
    parameters: []
  overload: System.CodeDom.CodeTypeDeclaration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: CodeTypeDeclaration(String)
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration(String)
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;> </xref>指定した名前のクラスです。"
  syntax:
    content: public CodeTypeDeclaration (string name);
    parameters:
    - id: name
      type: System.String
      description: "新しい型の名前です。"
  overload: System.CodeDom.CodeTypeDeclaration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes
  id: BaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.BaseTypes
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "型の基本型を取得します。"
  remarks: "基本型から継承しないが、1 つまたは複数のインターフェイスを実装しているが、Visual Basic では、クラスを生成する必要があります<xref:System.Object>BaseTypes コレクションの最初の項目として</xref:System.Object>。      > [!NOTE] > で .NET Framework version 2.0 が必要としない、<xref:System.CodeDom.CodeTypeReference>用<xref:System.Object>既にを実装するインターフェイスが存在するかどうかと、型で参照することです</xref:System.Object></xref:System.CodeDom.CodeTypeReference>。 たとえば、実装している場合、<xref:System.Collections.ICollection>インターフェイスし、このステートメントを使用してコレクションに追加する`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`、前述の必要はありません`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`ステートメント</xref:System.Collections.ICollection>。       次のコード<xref:System.CodeDom.CodeTypeReference>を参照する<xref:System.Object>。</xref:System.Object>コレクションへ</xref:System.CodeDom.CodeTypeReference>の追加       [Visual Basic]     ```   Dim ctd As New CodeTypeDeclaration(&quot;Class1&quot;)   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference(&quot;Interface1&quot;))   ``` [C#]```   CodeTypeDeclaration ctd = new CodeTypeDeclaration(&quot;Class1&quot;);   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference(&quot;Interface1&quot;));   ```上記のコードは、該当するショートカットは、次の Visual Basic コードを生成します。      ```   Public Class Class1   Implements Interface1   ```ただし、実際に生成された Visual Basic のコードは次です。      ```   Public Class Class1   Inherits Object   Implements Interface1   ```"
  syntax:
    content: public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }
    return:
      type: System.CodeDom.CodeTypeReferenceCollection
      description: "A <xref href=&quot;System.CodeDom.CodeTypeReferenceCollection&quot;> </xref>型の基本型を示すオブジェクト。"
  overload: System.CodeDom.CodeTypeDeclaration.BaseTypes*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsClass
  id: IsClass
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
  fullName: System.CodeDom.CodeTypeDeclaration.IsClass
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "取得または型がクラスまたは参照型であるかどうかを示す値を設定します。"
  syntax:
    content: public bool IsClass { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>型がクラスまたは参照型である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.CodeDom.CodeTypeDeclaration.IsClass*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum
  id: IsEnum
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
  fullName: System.CodeDom.CodeTypeDeclaration.IsEnum
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "取得または型が列挙型であるかどうかを示す値を設定します。"
  syntax:
    content: public bool IsEnum { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>型が列挙体の場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.CodeDom.CodeTypeDeclaration.IsEnum*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface
  id: IsInterface
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
  fullName: System.CodeDom.CodeTypeDeclaration.IsInterface
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "取得または型がインターフェイスであるかどうかを示す値を設定します。"
  syntax:
    content: public bool IsInterface { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>型がインターフェイスである場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.CodeDom.CodeTypeDeclaration.IsInterface*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial
  id: IsPartial
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
  fullName: System.CodeDom.CodeTypeDeclaration.IsPartial
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "取得または型の宣言が完全または部分的なかどうかを示す値を設定します。"
  remarks: "1 つの完全な宣言でクラスまたは構造体の実装を構築または実装では、複数の宣言に分散できます。 実装は、通常、1 つの完全な型の宣言で提供されます。 ここでは、型宣言 IsPartial プロパティを設定`false`、型宣言がクラスまたは構造体の実装の詳細情報を表すことを示します。       部分型の宣言では、アプリケーションの異なるモジュールでクラスまたは構造体の実装の異なる部分を構築するやすくなります。 部分型の宣言は、1 つのソース ファイルに格納されているまたは統合型の実装を形成する一緒にコンパイル最終的には、複数のソース ファイルに分散できます。       C# 言語のクラスの部分型の宣言をサポートしているし、を通じて構造体、`partial`キーワード。 Visual Basic のクラスの部分型の宣言をサポートしていると構造体、`Partial`キーワード。 すべてのコード ジェネレーターがため<xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>フラグ<xref:System.CodeDom.Compiler.GeneratorSupport>。</xref:System.CodeDom.Compiler.GeneratorSupport>でメソッド</xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>を呼び出すことによって、このサポートをテストする必要があります、部分的な型宣言をサポートします。      > [!NOTE] > クラスと構造体の部分型の宣言はサポートされています。 列挙型またはインターフェイスの部分的な型宣言を指定すると、生成されたコードはコンパイラのエラーを生成します。       クラスまたは構造体の実装を指定する、複数の宣言にわたってときに、IsPartial プロパティを設定`true`最初の宣言とすべての補足的な宣言です。 最初の宣言は、型を完全に指定する必要がありますアクセス修飾子を含むシグネチャが継承された型、およびインターフェイスを実装します。 補足の宣言は、型シグネチャを再指定する必要はありません。 コンパイラ エラーは、補足宣言で型のシグネチャを再定義する場合に通常発生します。       Visual Studio 2005 では、デザイナーのコードからユーザーが生成されたコードを分離するのに部分的な型を使用します。 Visual Basic Windows アプリケーション プロジェクトで、ユーザー コードはで修飾されていない部分クラスに配置、`Partial`キーワード以外の場合は、デザイナーによって提供されたコードを持つ部分クラスに表示されます、`Partial`キーワード。 C# の場合、ユーザー コードとデザイナーのコードの両方に表示で識別される部分クラス、`partial`キーワード。"
  example:
  - "This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations. The example builds the initial class declaration statement and sets the IsPartial property to `true`.  \n  \n [!code-cpp[CodeDomPartialTypeExample#3](~/add/codesnippet/cpp/p-system.codedom.codetyp_2_1.cpp)]\n [!code-cs[CodeDomPartialTypeExample#3](~/add/codesnippet/csharp/p-system.codedom.codetyp_2_1.cs)]\n [!code-vb[CodeDomPartialTypeExample#3](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_2_1.vb)]  \n  \n A different method in the example extends the class implementation. This method builds a new type declaration statement for the existing class and sets the IsPartial property to `true`. The compiler combines the two partial type declarations together for the complete class implementation.  \n  \n [!code-cpp[CodeDomPartialTypeExample#7](~/add/codesnippet/cpp/p-system.codedom.codetyp_2_2.cpp)]\n [!code-cs[CodeDomPartialTypeExample#7](~/add/codesnippet/csharp/p-system.codedom.codetyp_2_2.cs)]\n [!code-vb[CodeDomPartialTypeExample#7](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_2_2.vb)]"
  syntax:
    content: public bool IsPartial { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>クラスまたは構造体の宣言が、実装の部分的な表現の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>宣言がクラスまたは構造体の完全な実装である場合。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.CodeDom.CodeTypeDeclaration.IsPartial*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct
  id: IsStruct
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
  fullName: System.CodeDom.CodeTypeDeclaration.IsStruct
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "取得または型は、値型 (構造体) であるかどうかを示す値を設定します。"
  syntax:
    content: public bool IsStruct { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>型が値型である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.CodeDom.CodeTypeDeclaration.IsStruct*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.Members
  id: Members
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: Members
  nameWithType: CodeTypeDeclaration.Members
  fullName: System.CodeDom.CodeTypeDeclaration.Members
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "表される型のクラス メンバーのコレクションを取得します。"
  syntax:
    content: public System.CodeDom.CodeTypeMemberCollection Members { get; }
    return:
      type: System.CodeDom.CodeTypeMemberCollection
      description: "A <xref href=&quot;System.CodeDom.CodeTypeMemberCollection&quot;> </xref>クラス メンバーを示すオブジェクト。"
  overload: System.CodeDom.CodeTypeDeclaration.Members*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  id: PopulateBaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: PopulateBaseTypes
  nameWithType: CodeTypeDeclaration.PopulateBaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  type: Event
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "発生したときに、<xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*>コレクションには、最初にアクセスします</xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*>。"
  syntax:
    content: public event EventHandler PopulateBaseTypes;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  id: PopulateMembers
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: PopulateMembers
  nameWithType: CodeTypeDeclaration.PopulateMembers
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  type: Event
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "発生したときに、<xref:System.CodeDom.CodeTypeDeclaration.Members*>コレクションには、最初にアクセスします</xref:System.CodeDom.CodeTypeDeclaration.Members*>。"
  syntax:
    content: public event EventHandler PopulateMembers;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  id: TypeAttributes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
  fullName: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "取得または型の属性を設定します。"
  remarks: "<xref:System.Reflection.TypeAttributes>プロパティには、同じによって使用される値の型が含まれています<xref:System.Reflection>実行時に、型を調査する場合にします。</xref:System.Reflection> </xref:System.Reflection.TypeAttributes> 。 これらのフラグの多くは、一部の言語の型宣言の構文に対応していません。 その結果、次のフラグのみに有効<xref:System.CodeDom.CodeTypeDeclaration>: <xref:System.Reflection.TypeAttributes>、 <xref:System.Reflection.TypeAttributes>、 <xref:System.Reflection.TypeAttributes>、 <xref:System.Reflection.TypeAttributes>、 <xref:System.Reflection.TypeAttributes>、 <xref:System.Reflection.TypeAttributes>、 <xref:System.Reflection.TypeAttributes>、 <xref:System.Reflection.TypeAttributes></xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.CodeDom.CodeTypeDeclaration> 。      > [!NOTE] > <xref:System.Reflection.TypeAttributes> <xref:System.CodeDom.CodeTypeMember.Attributes%2A> <xref:System.CodeDom.CodeTypeDeclaration> <xref:System.CodeDom.CodeTypeMember>.</xref:System.CodeDom.CodeTypeMember>から継承されている</xref:System.CodeDom.CodeTypeDeclaration>プロパティ</xref:System.CodeDom.CodeTypeMember.Attributes%2A>のフラグの意味と重複している</xref:System.Reflection.TypeAttributes>などのフラグの一部 <xref:System.CodeDom.CodeTypeMember.Attributes%2A>プロパティは、副作用として、<xref:System.CodeDom.CodeTypeDeclaration>から継承するクラス<xref:System.CodeDom.CodeTypeMember>クラスが入れ子にすることができるようにします</xref:System.CodeDom.CodeTypeMember></xref:System.CodeDom.CodeTypeDeclaration></xref:System.CodeDom.CodeTypeMember.Attributes%2A>。 内のフラグではなく TypeAttributes プロパティのフラグを使用する必要があります、<xref:System.CodeDom.CodeTypeMember.Attributes%2A>プロパティ</xref:System.CodeDom.CodeTypeMember.Attributes%2A>。      > [!NOTE] > 参照範囲フラグを設定するためのパターン (単語を含むフラグ`Public`または`Nested`) には、すべての可視性をマスク フラグを使用して、<xref:System.Reflection.TypeAttributes>し、目的の参照範囲フラグを設定します</xref:System.Reflection.TypeAttributes>。 たとえば、c# コード ステートメントを識別する、 <xref:System.CodeDom.CodeTypeDeclaration>(という名前`cd`) は、内部クラスとして`cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</xref:System.CodeDom.CodeTypeDeclaration>。  Visual Basic では、同じ値を設定するコードは`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`します。 参照範囲フラグに直接 TypeAttributes プロパティを設定 (`cd.TypeAttributes = TypeAttributes.NotPublic;`) 設定されているその他のすべてのフラグが消去されます。"
  syntax:
    content: public System.Reflection.TypeAttributes TypeAttributes { get; set; }
    return:
      type: System.Reflection.TypeAttributes
      description: "A<xref:System.Reflection.TypeAttributes>型の属性を示すオブジェクト</xref:System.Reflection.TypeAttributes>。"
  overload: System.CodeDom.CodeTypeDeclaration.TypeAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters
  id: TypeParameters
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
  fullName: System.CodeDom.CodeTypeDeclaration.TypeParameters
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "型宣言の型パラメーターを取得します。"
  remarks: "ジェネリック型宣言を&1; つまたは型パラメーターと呼ばれる型指定されていません。 型パラメーター名は、ジェネリック宣言の本体の種類を表します。 ジェネリック宣言など、<xref:System.Collections.Generic.List%601>クラスには、型パラメーターが含まれています`T`。</xref:System.Collections.Generic.List%601> 。       ジェネリックの詳細については、次を参照してください。 [、.NET Framework クラス ライブラリのジェネリック](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }
    return:
      type: System.CodeDom.CodeTypeParameterCollection
      description: "A <xref href=&quot;System.CodeDom.CodeTypeParameterCollection&quot;> </xref>型の宣言の型パラメーターを格納しています。"
  overload: System.CodeDom.CodeTypeDeclaration.TypeParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.CodeDom.CodeTypeMember
  isExternal: false
  name: System.CodeDom.CodeTypeMember
- uid: System.CodeDom.CodeTypeDeclaration.#ctor
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration()
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration()
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration()
- uid: System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration(String)
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration(String)
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.BaseTypes
- uid: System.CodeDom.CodeTypeReferenceCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeReferenceCollection
  nameWithType: CodeTypeReferenceCollection
  fullName: System.CodeDom.CodeTypeReferenceCollection
- uid: System.CodeDom.CodeTypeDeclaration.IsClass
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
  fullName: System.CodeDom.CodeTypeDeclaration.IsClass
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
  fullName: System.CodeDom.CodeTypeDeclaration.IsEnum
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
  fullName: System.CodeDom.CodeTypeDeclaration.IsInterface
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
  fullName: System.CodeDom.CodeTypeDeclaration.IsPartial
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
  fullName: System.CodeDom.CodeTypeDeclaration.IsStruct
- uid: System.CodeDom.CodeTypeDeclaration.Members
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: Members
  nameWithType: CodeTypeDeclaration.Members
  fullName: System.CodeDom.CodeTypeDeclaration.Members
- uid: System.CodeDom.CodeTypeMemberCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeMemberCollection
  nameWithType: CodeTypeMemberCollection
  fullName: System.CodeDom.CodeTypeMemberCollection
- uid: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: PopulateBaseTypes
  nameWithType: CodeTypeDeclaration.PopulateBaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: PopulateMembers
  nameWithType: CodeTypeDeclaration.PopulateMembers
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateMembers
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
  fullName: System.CodeDom.CodeTypeDeclaration.TypeAttributes
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: true
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
  fullName: System.CodeDom.CodeTypeDeclaration.TypeParameters
- uid: System.CodeDom.CodeTypeParameterCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeParameterCollection
  nameWithType: CodeTypeParameterCollection
  fullName: System.CodeDom.CodeTypeParameterCollection
- uid: System.CodeDom.CodeTypeDeclaration.#ctor*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
- uid: System.CodeDom.CodeTypeDeclaration.IsClass*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
- uid: System.CodeDom.CodeTypeDeclaration.Members*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: Members
  nameWithType: CodeTypeDeclaration.Members
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
