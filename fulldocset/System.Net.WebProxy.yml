### YamlMime:ManagedReference
items:
- uid: System.Net.WebProxy
  id: WebProxy
  children:
  - System.Net.WebProxy.#ctor
  - System.Net.WebProxy.#ctor(System.String)
  - System.Net.WebProxy.#ctor(System.Uri)
  - System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.WebProxy.#ctor(System.String,System.Boolean)
  - System.Net.WebProxy.#ctor(System.String,System.Int32)
  - System.Net.WebProxy.#ctor(System.Uri,System.Boolean)
  - System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])
  - System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])
  - System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)
  - System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)
  - System.Net.WebProxy.Address
  - System.Net.WebProxy.BypassArrayList
  - System.Net.WebProxy.BypassList
  - System.Net.WebProxy.BypassProxyOnLocal
  - System.Net.WebProxy.Credentials
  - System.Net.WebProxy.GetDefaultProxy
  - System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.WebProxy.GetProxy(System.Uri)
  - System.Net.WebProxy.IsBypassed(System.Uri)
  - System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.WebProxy.UseDefaultCredentials
  langs:
  - csharp
  name: WebProxy
  nameWithType: WebProxy
  fullName: System.Net.WebProxy
  type: Class
  summary: "<xref:System.Net.WebRequest>クラス</xref:System.Net.WebRequest>の HTTP プロキシの設定が含まれています"
  remarks: "WebProxy クラスには、プロキシ設定が含まれていますを<xref:System.Net.WebRequest>Web プロキシが要求を送信するために使用するかどうかを決定するインスタンスを使用します</xref:System.Net.WebRequest>。 グローバルな Web プロキシ設定をコンピューターおよびアプリケーション構成ファイル、およびアプリケーションで指定できますでは、Web プロキシの使用方法をカスタマイズするのにため、WebProxy クラスのインスタンスを使用できます。 WebProxy クラスは、の基本の実装、<xref:System.Net.IWebProxy>インターフェイス</xref:System.Net.IWebProxy>。       Web プロキシ クラスのインスタンスを取得する、次の方法のいずれかを使用できます: -<xref:System.Net.WebProxy.%23ctor%2A>コンス トラクター</xref:System.Net.WebProxy.%23ctor%2A> 。      -<xref:System.Net.WebProxy.GetDefaultProxy%2A>メソッド</xref:System.Net.WebProxy.GetDefaultProxy%2A>。      -<xref:System.Net.GlobalProxySelection.Select%2A>メソッド</xref:System.Net.GlobalProxySelection.Select%2A>。       これらの各メソッドを指定します。 さらにカスタマイズできるため、WebProxy インスタンスこれらの違いは、アプリケーションに返される前に、インスタンスを初期化する方法です。 <xref:System.Net.WebProxy.%23ctor%2A>コンス トラクターを持つため、WebProxy クラスのインスタンスを返します、<xref:System.Net.WebProxy.Address%2A>プロパティに設定`null`</xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebProxy.%23ctor%2A>。 要求は、この状態で、WebProxy インスタンスを使用する場合、要求を送信するプロキシは使用されません。       <xref:System.Net.WebProxy.GetDefaultProxy%2A>メソッドを持つため、WebProxy クラスのインスタンスを返します、 <xref:System.Net.WebProxy.Address%2A>、 <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>、および<xref:System.Net.WebProxy.BypassList%2A>プロパティが Internet Explorer 5.5 以降を使用する値に設定します</xref:System.Net.WebProxy.BypassList%2A></xref:System.Net.WebProxy.BypassProxyOnLocal%2A></xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebProxy.GetDefaultProxy%2A>。       <xref:System.Net.GlobalProxySelection.Select%2A>メソッドは Internet Explorer および構成ファイルの設定の組み合わせに従って設定されているプロパティに WebProxy クラスのインスタンスを返します</xref:System.Net.GlobalProxySelection.Select%2A>。       WebProxy クラスは、自動検出と自動プロキシ構成スクリプトの実行をサポートします。 この機能は、Web プロキシ自動検出 (WPAD) とも呼ばれます。 自動プロキシ構成を使用する場合、構成スクリプトは、通常 wpad.dat 必要がありますにある、ダウンロード、コンパイル、および実行します。 これらの操作が成功した場合は、スクリプトは、要求に対して使用できるプロキシを返します。"
  example:
  - "The following code example assigns a WebProxy instance to a <xref:System.Net.WebRequest> instance. The <xref:System.Net.WebRequest> instance uses the proxy to connect to external Internet resources. (For an example that demonstrates using the WPAD feature, see the documentation for the <xref:System.Net.IWebProxyScript> class.)  \n  \n [!code-cpp[Classic WebProxy Example#1](~/add/codesnippet/cpp/t-system.net.webproxy_1.cpp)]\n [!code-vb[Classic WebProxy Example#1](~/add/codesnippet/visualbasic/t-system.net.webproxy_1.vb)]\n [!code-cs[Classic WebProxy Example#1](~/add/codesnippet/csharp/t-system.net.webproxy_1.cs)]"
  syntax:
    content: 'public class WebProxy : System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor
  id: '#ctor'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy()
  nameWithType: WebProxy.WebProxy()
  fullName: System.Net.WebProxy.WebProxy()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "空のインスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref>クラスです。"
  remarks: "既定のコンス トラクターの空のインスタンスを初期化します、<xref:System.Net.WebProxy>クラス、<xref:System.Net.WebProxy.Address%2A>プロパティに設定`null`</xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebProxy>。       ときに、<xref:System.Net.WebProxy.Address%2A>プロパティは`null`、<xref:System.Net.WebProxy.IsBypassed%2A>メソッドを返します`true`と<xref:System.Net.WebProxy.GetProxy%2A>宛先アドレスを返します。</xref:System.Net.WebProxy.GetProxy%2A> </xref:System.Net.WebProxy.IsBypassed%2A> </xref:System.Net.WebProxy.Address%2A> 。"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#1](~/add/codesnippet/cpp/m-system.net.webproxy.sh_3_1.cpp)]\n [!code-cs[NCLWebProxy#1](~/add/codesnippet/csharp/m-system.net.webproxy.sh_3_1.cs)]"
  syntax:
    content: public WebProxy ();
    parameters: []
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String)
  nameWithType: WebProxy.WebProxy(String)
  fullName: System.Net.WebProxy.WebProxy(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref>指定した URI を使用します。"
  remarks: "<xref:System.Net.WebProxy>でインスタンスを初期化、<xref:System.Net.WebProxy.Address%2A>プロパティに設定、<xref:System.Uri>インスタンスを含む`Address`</xref:System.Uri></xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebProxy>。"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#6](~/add/codesnippet/cpp/m-system.net.webproxy.sh_1_1.cpp)]\n [!code-cs[NCLWebProxy#6](~/add/codesnippet/csharp/m-system.net.webproxy.sh_1_1.cs)]"
  syntax:
    content: public WebProxy (string Address);
    parameters:
    - id: Address
      type: System.String
      description: "プロキシ サーバーの URI。"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> 無効な URI です。"
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri)
  id: '#ctor(System.Uri)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri)
  nameWithType: WebProxy.WebProxy(Uri)
  fullName: System.Net.WebProxy.WebProxy(Uri)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref>から、指定したクラス<xref:System.Uri>インスタンス</xref:System.Uri>。"
  remarks: "<xref:System.Net.WebProxy>でインスタンスを初期化、<xref:System.Net.WebProxy.Address%2A>プロパティに設定、`Address`パラメーター</xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy> 。"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#2](~/add/codesnippet/cpp/m-system.net.webproxy.sh_0_1.cpp)]\n [!code-cs[NCLWebProxy#2](~/add/codesnippet/csharp/m-system.net.webproxy.sh_0_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address);
    parameters:
    - id: Address
      type: System.Uri
      description: "A<xref:System.Uri>プロキシ サーバーのアドレスを格納するインスタンス</xref:System.Uri>。"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.WebProxy(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.WebProxy(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "インスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref>クラスのシリアル化されたコンテンツを使用します。"
  remarks: "このメソッドが、<xref:System.Net.WebProxy>それを呼び出さないインスタンス; アプリケーション</xref:System.Net.WebProxy>を逆シリアル化する、システムによって呼び出されます"
  syntax:
    content: protected WebProxy (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "シリアル化データです。"
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: "シリアル化されたデータのコンテキスト。"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Boolean)
  nameWithType: WebProxy.WebProxy(String,Boolean)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref>クラスの指定した URI と設定をバイパスします。"
  remarks: "<xref:System.Net.WebProxy>でインスタンスを初期化、<xref:System.Net.WebProxy.Address%2A>プロパティに設定、<xref:System.Uri>インスタンスを含む`Address`と<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>プロパティに設定`BypassOnLocal`</xref:System.Net.WebProxy.BypassProxyOnLocal%2A></xref:System.Uri></xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebProxy>。"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#7](~/add/codesnippet/cpp/m-system.net.webproxy.sh_4_1.cpp)]\n [!code-cs[NCLWebProxy#7](~/add/codesnippet/csharp/m-system.net.webproxy.sh_4_1.cs)]"
  syntax:
    content: public WebProxy (string Address, bool BypassOnLocal);
    parameters:
    - id: Address
      type: System.String
      description: "プロキシ サーバーの URI。"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ローカル アドレスに対してプロキシをバイパスするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> 無効な URI です。"
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Int32)
  nameWithType: WebProxy.WebProxy(String,Int32)
  fullName: System.Net.WebProxy.WebProxy(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref>指定されたホストとポート番号を持つクラス。"
  remarks: '<xref:System.Net.WebProxy>でインスタンスを初期化、<xref:System.Net.WebProxy.Address%2A>プロパティに設定、<xref:System.Uri>フォーム http:// のインスタンス`Host` `Port`。</xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy> 。'
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#5](~/add/codesnippet/cpp/m-system.net.webproxy.sh_6_1.cpp)]\n [!code-cs[NCLWebProxy#5](~/add/codesnippet/csharp/m-system.net.webproxy.sh_6_1.cs)]"
  syntax:
    content: public WebProxy (string Host, int Port);
    parameters:
    - id: Host
      type: System.String
      description: "プロキシ ホストの名前です。"
    - id: Port
      type: System.Int32
      description: "上のポート番号`Host`を使用します。"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "結合して形成された URI <code> Host </code>と<code> Port </code>は有効な URI ではありません。"
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean)
  id: '#ctor(System.Uri,System.Boolean)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri,Boolean)
  nameWithType: WebProxy.WebProxy(Uri,Boolean)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref>クラス、<xref:System.Uri>をインスタンス化し、設定をバイパスします</xref:System.Uri>。"
  remarks: "<xref:System.Net.WebProxy>でインスタンスを初期化、<xref:System.Net.WebProxy.Address%2A>プロパティに設定`Address`を使用して、<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>プロパティに設定`BypassOnLocal`</xref:System.Net.WebProxy.BypassProxyOnLocal%2A></xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebProxy>。"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#3](~/add/codesnippet/cpp/m-system.net.webproxy.sh_7_1.cpp)]\n [!code-cs[NCLWebProxy#3](~/add/codesnippet/csharp/m-system.net.webproxy.sh_7_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address, bool BypassOnLocal);
    parameters:
    - id: Address
      type: System.Uri
      description: "A<xref:System.Uri>プロキシ サーバーのアドレスを格納するインスタンス</xref:System.Uri>。"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ローカル アドレスに対してプロキシをバイパスするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])
  id: '#ctor(System.String,System.Boolean,System.String[])'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Boolean,String[])
  nameWithType: WebProxy.WebProxy(String,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref>した指定した URI、設定すると、バイパスをバイパスする Uri の一覧です。"
  remarks: "<xref:System.Net.WebProxy>でインスタンスを初期化、<xref:System.Net.WebProxy.Address%2A>プロパティに設定、<xref:System.Uri>インスタンスを含む`Address`、<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>プロパティに設定`BypassOnLocal`、および<xref:System.Net.WebProxy.BypassList%2A>プロパティに設定`BypassList`</xref:System.Net.WebProxy.BypassList%2A></xref:System.Net.WebProxy.BypassProxyOnLocal%2A></xref:System.Uri></xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebProxy>。"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#8](~/add/codesnippet/cpp/m-system.net.webproxy.sh_2_1.cpp)]\n [!code-cs[NCLWebProxy#8](~/add/codesnippet/csharp/m-system.net.webproxy.sh_2_1.cs)]"
  syntax:
    content: public WebProxy (string Address, bool BypassOnLocal, string[] BypassList);
    parameters:
    - id: Address
      type: System.String
      description: "プロキシ サーバーの URI。"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ローカル アドレスに対してプロキシをバイパスするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: BypassList
      type: System.String[]
      description: "バイパスするサーバーの Uri を含む正規表現文字列の配列。"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> 無効な URI です。"
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])
  id: '#ctor(System.Uri,System.Boolean,System.String[])'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri,Boolean,String[])
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref> 、指定したクラス<xref:System.Uri>インスタンス、バイパスを設定してバイパスする Uri の一覧</xref:System.Uri>。"
  remarks: "<xref:System.Net.WebProxy>でインスタンスを初期化、<xref:System.Net.WebProxy.Address%2A>プロパティに設定`Address`、<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>プロパティに設定`BypassOnLocal`、および<xref:System.Net.WebProxy.BypassList%2A>プロパティに設定`BypassList`</xref:System.Net.WebProxy.BypassList%2A></xref:System.Net.WebProxy.BypassProxyOnLocal%2A></xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebProxy>。"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#4](~/add/codesnippet/cpp/m-system.net.webproxy.sh_5_1.cpp)]\n [!code-cs[NCLWebProxy#4](~/add/codesnippet/csharp/m-system.net.webproxy.sh_5_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList);
    parameters:
    - id: Address
      type: System.Uri
      description: "A<xref:System.Uri>プロキシ サーバーのアドレスを格納するインスタンス</xref:System.Uri>。"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ローカル アドレスに対してプロキシをバイパスするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: BypassList
      type: System.String[]
      description: "バイパスするサーバーの Uri を含む正規表現文字列の配列。"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)
  id: '#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(String,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[],ICredentials)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref>クラスの指定した URI、設定をバイパスするには Uri と資格情報の一覧をバイパスします。"
  remarks: "<xref:System.Net.WebProxy>でインスタンスを初期化、<xref:System.Net.WebProxy.Address%2A>プロパティに設定、<xref:System.Uri>インスタンスを含む`Address`、<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>プロパティに設定`BypassOnLocal`、<xref:System.Net.WebProxy.BypassList%2A>プロパティに設定`BypassList`、および<xref:System.Net.WebProxy.Credentials%2A>プロパティに設定`Credentials`</xref:System.Net.WebProxy.Credentials%2A></xref:System.Net.WebProxy.BypassList%2A></xref:System.Net.WebProxy.BypassProxyOnLocal%2A></xref:System.Uri></xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebProxy>。"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#9](~/add/codesnippet/cpp/25929c39-89a2-4ac3-bf8d-_1.cpp)]\n [!code-cs[NCLWebProxy#9](~/add/codesnippet/csharp/25929c39-89a2-4ac3-bf8d-_1.cs)]"
  syntax:
    content: public WebProxy (string Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);
    parameters:
    - id: Address
      type: System.String
      description: "プロキシ サーバーの URI。"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ローカル アドレスに対してプロキシをバイパスするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: BypassList
      type: System.String[]
      description: "バイパスするサーバーの Uri を含む正規表現文字列の配列。"
    - id: Credentials
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>認証用のプロキシ サーバーに送信するインスタンス</xref:System.Net.ICredentials>。"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> 無効な URI です。"
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)
  id: '#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.WebProxy&quot;> </xref> 、指定したクラス<xref:System.Uri>インスタンス、バイパスするには Uri と資格情報の一覧の設定をバイパスします</xref:System.Uri>。"
  remarks: "<xref:System.Net.WebProxy>でインスタンスを初期化、<xref:System.Net.WebProxy.Address%2A>プロパティに設定`Address`、<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>プロパティに設定`BypassOnLocal`、<xref:System.Net.WebProxy.BypassList%2A>プロパティに設定`BypassList`、および<xref:System.Net.WebProxy.Credentials%2A>プロパティに設定`Credentials`</xref:System.Net.WebProxy.Credentials%2A></xref:System.Net.WebProxy.BypassList%2A></xref:System.Net.WebProxy.BypassProxyOnLocal%2A></xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebProxy>。"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#13](~/add/codesnippet/cpp/35b6ace3-e60e-4d11-a417-_1.cpp)]\n [!code-cs[NCLWebProxy#13](~/add/codesnippet/csharp/35b6ace3-e60e-4d11-a417-_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);
    parameters:
    - id: Address
      type: System.Uri
      description: "A<xref:System.Uri>プロキシ サーバーのアドレスを格納するインスタンス</xref:System.Uri>。"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ローカル アドレスに対してプロキシをバイパスするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: BypassList
      type: System.String[]
      description: "バイパスするサーバーの Uri を含む正規表現文字列の配列。"
    - id: Credentials
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>認証用のプロキシ サーバーに送信するインスタンス</xref:System.Net.ICredentials>。"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.Address
  id: Address
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: Address
  nameWithType: WebProxy.Address
  fullName: System.Net.WebProxy.Address
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得またはプロキシ サーバーのアドレスを設定します。"
  remarks: "Address プロパティには、プロキシ サーバーのアドレスが含まれています。 自動プロキシ検出が有効でないと、自動構成スクリプトが指定されていない場合、アドレスのプロパティと<xref:System.Net.WebProxy.BypassList%2A>要求に使用するプロキシを決定します</xref:System.Net.WebProxy.BypassList%2A>。       アドレス プロパティが`null`要求がプロキシをバイパスし、宛先ホストに直接接続します。"
  example:
  - "The following code example displays the properties of a <xref:System.Net.WebProxy> object, including its Address.  \n  \n [!code-cs[NCLAutoProxy#1](~/add/codesnippet/csharp/p-system.net.webproxy.ad_1.cs)]\n [!code-cpp[NCLAutoProxy#1](~/add/codesnippet/cpp/p-system.net.webproxy.ad_1.cpp)]"
  syntax:
    content: public Uri Address { get; set; }
    return:
      type: System.Uri
      description: "A<xref:System.Uri>プロキシ サーバーのアドレスを格納するインスタンス</xref:System.Uri>。"
  overload: System.Net.WebProxy.Address*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.BypassArrayList
  id: BypassArrayList
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: BypassArrayList
  nameWithType: WebProxy.BypassArrayList
  fullName: System.Net.WebProxy.BypassArrayList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "プロキシ サーバーを使用しないアドレスの一覧を取得します。"
  remarks: "<xref:System.Net.WebProxy.BypassList%2A>は Uri を記述する正規表現文字列の配列のリストを<xref:System.Net.WebRequest>インスタンスに直接の代わりにプロキシ サーバーを介してアクセスします</xref:System.Net.WebRequest></xref:System.Net.WebProxy.BypassList%2A>。"
  syntax:
    content: public System.Collections.ArrayList BypassArrayList { get; }
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>の一覧を格納している<xref:System.Net.WebProxy.BypassList*>アクセス時にプロキシ サーバーを使用して Uri を表す配列</xref:System.Net.WebProxy.BypassList*>。"
  overload: System.Net.WebProxy.BypassArrayList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.BypassList
  id: BypassList
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: BypassList
  nameWithType: WebProxy.BypassList
  fullName: System.Net.WebProxy.BypassList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得またはプロキシ サーバーを使用しないアドレスの配列を設定します。"
  remarks: "BypassList プロパティを含む Uri を表す正規表現の配列を<xref:System.Net.WebRequest>、プロキシ サーバーを直接の代わりにインスタンスにアクセスする</xref:System.Net.WebRequest>。"
  example:
  - "The following code example displays the properties of a <xref:System.Net.WebProxy> object, including its BypassList property.  \n  \n [!code-cs[NCLAutoProxy#1](~/add/codesnippet/csharp/p-system.net.webproxy.by_0_1.cs)]\n [!code-cpp[NCLAutoProxy#1](~/add/codesnippet/cpp/p-system.net.webproxy.by_0_1.cpp)]"
  syntax:
    content: public string[] BypassList { get; set; }
    return:
      type: System.String[]
      description: "記述する正規表現の Uri をアクセスするときにプロキシ サーバーを使用しないの一覧を格納する配列。"
  overload: System.Net.WebProxy.BypassList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.BypassProxyOnLocal
  id: BypassProxyOnLocal
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: BypassProxyOnLocal
  nameWithType: WebProxy.BypassProxyOnLocal
  fullName: System.Net.WebProxy.BypassProxyOnLocal
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得またはローカル アドレスに対してプロキシ サーバーをバイパスするかどうかを示す値を設定します。"
  remarks: "BypassProxyOnLocal プロパティの設定を決定するかどうか<xref:System.Net.WebRequest>インスタンスは、ローカル インターネット リソースにアクセスするときにプロキシ サーバーを使用します</xref:System.Net.WebRequest>。       BypassProxyOnLocal 場合`true`、ローカル インターネット リソースへの要求はプロキシ サーバーを使用しないでください。 ローカルの要求は http://webserver/と同様に、URI でピリオド (.) の不足によって識別されるまたは http://localhost、http://loopback、http://127.0.0.1 など、ローカル サーバーにアクセスします。 BypassProxyOnLocal が場合`false`、すべてのインターネット要求はプロキシ サーバーを通じて行われます。      > [!NOTE] > にピリオドを使用する URI を持つローカル ホストに要求がプロキシを使用します。 このような場合、プロキシを使用してを避けるため、 <xref:System.Net.WebProxy.BypassList%2A>。</xref:System.Net.WebProxy.BypassList%2A>にホストのエントリを作成します。"
  example:
  - "The following code example demonstrates calling a constructor that sets this property and getting the value of this property.  \n  \n [!code-cpp[NCLWebProxy#7](~/add/codesnippet/cpp/p-system.net.webproxy.by_1_1.cpp)]\n [!code-cs[NCLWebProxy#7](~/add/codesnippet/csharp/p-system.net.webproxy.by_1_1.cs)]"
  syntax:
    content: public bool BypassProxyOnLocal { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ローカル アドレスでプロキシ サーバーをバイパスするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.WebProxy.BypassProxyOnLocal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.Credentials
  id: Credentials
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: Credentials
  nameWithType: WebProxy.Credentials
  fullName: System.Net.WebProxy.Credentials
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または認証用のプロキシ サーバーに送信するための資格情報を設定します。"
  remarks: "資格情報のプロパティには、HTTP 407 (プロキシ認証) の状態コードへの応答でプロキシ サーバーに送信する認証の資格情報が含まれています。 クライアントのほとんどのシナリオで使用する必要があります、 <xref:System.Net.CredentialCache.DefaultCredentials%2A>、これは、現在ログオンしているユーザーの資格情報</xref:System.Net.CredentialCache.DefaultCredentials%2A>。 これを行うには、設定、<xref:System.Net.WebProxy.UseDefaultCredentials%2A>プロパティを`true`このプロパティを設定する代わりにします</xref:System.Net.WebProxy.UseDefaultCredentials%2A>。      > [!NOTE] > 以外の資格情報を資格情報のプロパティを設定した場合、 <xref:System.Net.CredentialCache.DefaultCredentials%2A>、設定、<xref:System.Net.WebProxy.UseDefaultCredentials%2A>プロパティを`true`により<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Net.WebProxy.UseDefaultCredentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> これを防ぐため資格情報プロパティを設定する必要があります`null`設定する前に、<xref:System.Net.WebProxy.UseDefaultCredentials%2A>プロパティを`true`</xref:System.Net.WebProxy.UseDefaultCredentials%2A>。 同様に、いずれかにこのプロパティを設定することはできないときの値<xref:System.Net.WebProxy.UseDefaultCredentials%2A>は`true`</xref:System.Net.WebProxy.UseDefaultCredentials%2A>。"
  syntax:
    content: public System.Net.ICredentials Credentials { get; set; }
    return:
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>認証用のプロキシ サーバーに送信するための資格情報を格納しているインスタンス</xref:System.Net.ICredentials>。"
  overload: System.Net.WebProxy.Credentials*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このプロパティを設定しようとしたときに、<xref:System.Net.WebProxy.UseDefaultCredentials*>プロパティに設定された<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref></xref:System.Net.WebProxy.UseDefaultCredentials*> 。"
  platform:
  - net462
- uid: System.Net.WebProxy.GetDefaultProxy
  id: GetDefaultProxy
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: GetDefaultProxy()
  nameWithType: WebProxy.GetDefaultProxy()
  fullName: System.Net.WebProxy.GetDefaultProxy()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Internet Explorer の非動的のプロキシ設定を読み取ります。"
  remarks: "GetDefaultProxy をで Internet Explorer 5.5 以降では、格納されている非動的のプロキシ設定を読み取ってを作成、<xref:System.Net.WebProxy>これらの設定のインスタンス</xref:System.Net.WebProxy>。       Internet Explorer で実行するスクリプト、自動構成エントリ、または DHCP または DNS の検索から生成されるすべての動的な設定 GetDefaultProxy メソッドは選択されません。       アプリケーションを使用する必要があります、<xref:System.Net.WebRequest.DefaultWebProxy%2A?displayProperty=fullName>プロパティおよび<xref:System.Net.WebRequest.GetSystemWebProxy%2A?displayProperty=fullName>GetDefaultProxy メソッドではなくメソッド</xref:System.Net.WebRequest.GetSystemWebProxy%2A?displayProperty=fullName></xref:System.Net.WebRequest.DefaultWebProxy%2A?displayProperty=fullName>。"
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cpp[NCLWebProxy#11](~/add/codesnippet/cpp/m-system.net.webproxy.ge_0_1.cpp)]\n [!code-cs[NCLWebProxy#11](~/add/codesnippet/csharp/m-system.net.webproxy.ge_0_1.cs)]"
  syntax:
    content: public static System.Net.WebProxy GetDefaultProxy ();
    parameters: []
    return:
      type: System.Net.WebProxy
      description: "A <xref href=&quot;System.Net.WebProxy&quot;> </xref>から Internet Explorer 5.5 以降、動的ではないプロキシ設定を格納しているインスタンス。"
  overload: System.Net.WebProxy.GetDefaultProxy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "追加、 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>ターゲット オブジェクトをシリアル化するために必要なデータを使用します。"
  remarks: "含まれる任意のオブジェクト、<xref:System.Runtime.Serialization.SerializationInfo>自動的に追跡され、フォーマッタによってシリアル化します</xref:System.Runtime.Serialization.SerializationInfo>。"
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>にデータを設定します。"
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: "A<xref:System.Runtime.Serialization.StreamingContext>このシリアル化のシリアル化先を指定します</xref:System.Runtime.Serialization.StreamingContext>。"
  overload: System.Net.WebProxy.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.GetProxy(System.Uri)
  id: GetProxy(System.Uri)
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: GetProxy(Uri)
  nameWithType: WebProxy.GetProxy(Uri)
  fullName: System.Net.WebProxy.GetProxy(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "要求のプロキシの URI を返します。"
  remarks: "GetProxy メソッドの取得、URI、<xref:System.Net.WebRequest>インターネット リソースにアクセスするインスタンスを使用します</xref:System.Net.WebRequest>。       GetProxy 比較`destination`の内容で<xref:System.Net.WebProxy.BypassList%2A>を使用して、<xref:System.Net.WebProxy.IsBypassed%2A>メソッド</xref:System.Net.WebProxy.IsBypassed%2A></xref:System.Net.WebProxy.BypassList%2A>。 場合<xref:System.Net.WebProxy.IsBypassed%2A>を返します`true`、GetProxy 返します`destination`と<xref:System.Net.WebRequest>インスタンスは、プロキシ サーバーを使用しません</xref:System.Net.WebRequest></xref:System.Net.WebProxy.IsBypassed%2A>。       場合`destination`に含まれていない<xref:System.Net.WebProxy.BypassList%2A>、<xref:System.Net.WebRequest>インスタンスがプロキシ サーバーを使用し、<xref:System.Net.WebProxy.Address%2A>プロパティが返されます</xref:System.Net.WebProxy.Address%2A></xref:System.Net.WebRequest></xref:System.Net.WebProxy.BypassList%2A>。"
  example:
  - "The following code example creates a <xref:System.Net.WebProxy> object and calls this method to get the proxy that is selected for a resource.  \n  \n [!code-cs[NCLAutoProxy#2](~/add/codesnippet/csharp/m-system.net.webproxy.ge_1_1.cs)]\n [!code-cpp[NCLAutoProxy#2](~/add/codesnippet/cpp/m-system.net.webproxy.ge_1_1.cpp)]"
  syntax:
    content: public Uri GetProxy (Uri destination);
    parameters:
    - id: destination
      type: System.Uri
      description: "<xref:System.Uri>要求のインターネット リソースのインスタンス</xref:System.Uri>。"
    return:
      type: System.Uri
      description: "<xref:System.Uri>リソースがバイパス リストにある場合、インターネット リソースのインスタンス、それ以外の場合、<xref:System.Uri>プロキシのインスタンス</xref:System.Uri></xref:System.Uri>。"
  overload: System.Net.WebProxy.GetProxy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destination</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.WebProxy.IsBypassed(System.Uri)
  id: IsBypassed(System.Uri)
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: IsBypassed(Uri)
  nameWithType: WebProxy.IsBypassed(Uri)
  fullName: System.Net.WebProxy.IsBypassed(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "指定したホストにプロキシ サーバーを使用するかどうかを示します。"
  remarks: "IsBypassed メソッドを使用して、インターネット リソースにアクセスするときにプロキシ サーバーをバイパスするかどうかを判断します。       <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>と<xref:System.Net.WebProxy.BypassList%2A>IsBypassed メソッドの戻り値を制御するプロパティ</xref:System.Net.WebProxy.BypassList%2A></xref:System.Net.WebProxy.BypassProxyOnLocal%2A>。       IsBypassed を返します`true`、次の条件のいずれか: 場合 -<xref:System.Net.WebProxy.BypassProxyOnLocal%2A>は`true`と`host`ローカルの URI です</xref:System.Net.WebProxy.BypassProxyOnLocal%2A>。 ローカルの要求は、http://webserver/&quot;のように、URI でピリオド (.) の不足により識別されます。      If `host` <xref:System.Net.WebProxy.BypassList%2A></xref:System.Net.WebProxy.BypassList%2A>正規表現と一致。      -   If <xref:System.Net.WebProxy.Address%2A> is `null`.</xref:System.Net.WebProxy.Address%2A>       その他のすべての条件を返す`false`です。"
  example:
  - "The following code example creates a <xref:System.Net.WebProxy> object and calls this method to check whether the bypass list is properly set.  \n  \n [!code-cpp[NCLWebProxy#12](~/add/codesnippet/cpp/m-system.net.webproxy.is_1.cpp)]\n [!code-cs[NCLWebProxy#12](~/add/codesnippet/csharp/m-system.net.webproxy.is_1.cs)]"
  syntax:
    content: public bool IsBypassed (Uri host);
    parameters:
    - id: host
      type: System.Uri
      description: "<xref:System.Uri>プロキシの使用方法を確認するホストのインスタンス</xref:System.Uri>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プロキシ サーバーを使用しない必要がある場合<code> host </code>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.WebProxy.IsBypassed*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>host</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "シリアル化データとシリアル化する、システムで使用されるコンテキストを作成、 <xref href=&quot;System.Net.WebProxy&quot;> </xref>オブジェクト。"
  remarks: "システムは、オブジェクトをシリアル化するには、このメソッドを呼び出しますアプリケーションは、直接呼び出しません。"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>データを読み込む先のオブジェクト。"
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: "A<xref:System.Runtime.Serialization.StreamingContext>構造を示すこのシリアル化のシリアル化先</xref:System.Runtime.Serialization.StreamingContext>。"
  overload: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: UseDefaultCredentials
  nameWithType: WebProxy.UseDefaultCredentials
  fullName: System.Net.WebProxy.UseDefaultCredentials
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または設定、<xref:System.Boolean>値を制御するのかどうか、<xref:System.Net.CredentialCache.DefaultCredentials*>要求と共に送信されます</xref:System.Net.CredentialCache.DefaultCredentials*></xref:System.Boolean>。"
  remarks: "このプロパティを設定`true`この要求が行われるときに<xref:System.Net.WebProxy>オブジェクト認証が必要、サーバーによって要求された場合、現在ログオンしているユーザーの資格情報を使用します</xref:System.Net.WebProxy>。 クライアント アプリケーションでは、これはほとんどのシナリオでは、目的の動作です。 中間層アプリケーションの場合、このプロパティを使用する代わりに、ASP.NET アプリケーションなど、通常、設定、<xref:System.Net.WebProxy.Credentials%2A>プロパティが代わりに、要求が行われるクライアントの資格情報を</xref:System.Net.WebProxy.Credentials%2A>。       次の表の値に基づいて、偽造している値の設定の効果を示しています、<xref:System.Net.WebProxy.Credentials%2A>プロパティ</xref:System.Net.WebProxy.Credentials%2A>。      |<xref:System.Net.WebProxy.Credentials%2A>値 |偽造している値 |効果 |  |----------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|  |<xref:System.Net.CredentialCache.DefaultCredentials%2A>|`true`|効果なし |。  |<xref:System.Net.CredentialCache.DefaultCredentials%2A>|`false`|設定されている<xref:System.Net.WebProxy.Credentials%2A>`null`|。  |`null`|`true`|<xref:System.Net.WebProxy.Credentials%2A> is set to <xref:System.Net.CredentialCache.DefaultCredentials%2A>.|  |<xref:System.Net.CredentialCache.DefaultCredentials%2A>以外の値または`null` | `true`または`false`|偽造している設定は例外をスローします |。      偽造している場合`false`、変更することができます、<xref:System.Net.WebProxy.Credentials%2A>プロパティを任意の資格情報</xref:System.Net.WebProxy.Credentials%2A></xref:System.Net.CredentialCache.DefaultCredentials%2A></xref:System.Net.CredentialCache.DefaultCredentials%2A></xref:System.Net.WebProxy.Credentials%2A></xref:System.Net.WebProxy.Credentials%2A></xref:System.Net.CredentialCache.DefaultCredentials%2A></xref:System.Net.CredentialCache.DefaultCredentials%2A></xref:System.Net.WebProxy.Credentials%2A>。 偽造している場合`true`、変更、<xref:System.Net.WebProxy.Credentials%2A>プロパティから<xref:System.Net.CredentialCache.DefaultCredentials%2A>(偽造しているプロパティ設定されている値`true`) 例外がスローされます</xref:System.Net.CredentialCache.DefaultCredentials%2A></xref:System.Net.WebProxy.Credentials%2A>。"
  syntax:
    content: public bool UseDefaultCredentials { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は既定の資格情報が使用されます。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.WebProxy.UseDefaultCredentials*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このプロパティを設定しようとしたときに、<xref:System.Net.WebProxy.Credentials*>プロパティには、既定の資格情報以外の資格情報が含まれています</xref:System.Net.WebProxy.Credentials*>。 詳細については、「解説」セクションを参照してください。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.WebProxy.#ctor
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy()
  nameWithType: WebProxy.WebProxy()
  fullName: System.Net.WebProxy.WebProxy()
- uid: System.Net.WebProxy.#ctor(System.String)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String)
  nameWithType: WebProxy.WebProxy(String)
  fullName: System.Net.WebProxy.WebProxy(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.WebProxy.#ctor(System.Uri)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri)
  nameWithType: WebProxy.WebProxy(Uri)
  fullName: System.Net.WebProxy.WebProxy(Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.WebProxy(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.WebProxy(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Boolean)
  nameWithType: WebProxy.WebProxy(String,Boolean)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebProxy.#ctor(System.String,System.Int32)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Int32)
  nameWithType: WebProxy.WebProxy(String,Int32)
  fullName: System.Net.WebProxy.WebProxy(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri,Boolean)
  nameWithType: WebProxy.WebProxy(Uri,Boolean)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean)
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Boolean,String[])
  nameWithType: WebProxy.WebProxy(String,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri,Boolean,String[])
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[])
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(String,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[],ICredentials)
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
- uid: System.Net.WebProxy.Address
  parent: System.Net.WebProxy
  isExternal: false
  name: Address
  nameWithType: WebProxy.Address
  fullName: System.Net.WebProxy.Address
- uid: System.Net.WebProxy.BypassArrayList
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassArrayList
  nameWithType: WebProxy.BypassArrayList
  fullName: System.Net.WebProxy.BypassArrayList
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Net.WebProxy.BypassList
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassList
  nameWithType: WebProxy.BypassList
  fullName: System.Net.WebProxy.BypassList
- uid: System.Net.WebProxy.BypassProxyOnLocal
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WebProxy.BypassProxyOnLocal
  fullName: System.Net.WebProxy.BypassProxyOnLocal
- uid: System.Net.WebProxy.Credentials
  parent: System.Net.WebProxy
  isExternal: false
  name: Credentials
  nameWithType: WebProxy.Credentials
  fullName: System.Net.WebProxy.Credentials
- uid: System.Net.WebProxy.GetDefaultProxy
  parent: System.Net.WebProxy
  isExternal: false
  name: GetDefaultProxy()
  nameWithType: WebProxy.GetDefaultProxy()
  fullName: System.Net.WebProxy.GetDefaultProxy()
- uid: System.Net.WebProxy
  parent: System.Net
  isExternal: false
  name: WebProxy
  nameWithType: WebProxy
  fullName: System.Net.WebProxy
- uid: System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.WebProxy.GetProxy(System.Uri)
  parent: System.Net.WebProxy
  isExternal: false
  name: GetProxy(Uri)
  nameWithType: WebProxy.GetProxy(Uri)
  fullName: System.Net.WebProxy.GetProxy(Uri)
- uid: System.Net.WebProxy.IsBypassed(System.Uri)
  parent: System.Net.WebProxy
  isExternal: false
  name: IsBypassed(Uri)
  nameWithType: WebProxy.IsBypassed(Uri)
  fullName: System.Net.WebProxy.IsBypassed(Uri)
- uid: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.WebProxy.UseDefaultCredentials
  parent: System.Net.WebProxy
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebProxy.UseDefaultCredentials
  fullName: System.Net.WebProxy.UseDefaultCredentials
- uid: System.Net.WebProxy.#ctor*
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy
  nameWithType: WebProxy.WebProxy
- uid: System.Net.WebProxy.Address*
  parent: System.Net.WebProxy
  isExternal: false
  name: Address
  nameWithType: WebProxy.Address
- uid: System.Net.WebProxy.BypassArrayList*
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassArrayList
  nameWithType: WebProxy.BypassArrayList
- uid: System.Net.WebProxy.BypassList*
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassList
  nameWithType: WebProxy.BypassList
- uid: System.Net.WebProxy.BypassProxyOnLocal*
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WebProxy.BypassProxyOnLocal
- uid: System.Net.WebProxy.Credentials*
  parent: System.Net.WebProxy
  isExternal: false
  name: Credentials
  nameWithType: WebProxy.Credentials
- uid: System.Net.WebProxy.GetDefaultProxy*
  parent: System.Net.WebProxy
  isExternal: false
  name: GetDefaultProxy
  nameWithType: WebProxy.GetDefaultProxy
- uid: System.Net.WebProxy.GetObjectData*
  parent: System.Net.WebProxy
  isExternal: false
  name: GetObjectData
  nameWithType: WebProxy.GetObjectData
- uid: System.Net.WebProxy.GetProxy*
  parent: System.Net.WebProxy
  isExternal: false
  name: GetProxy
  nameWithType: WebProxy.GetProxy
- uid: System.Net.WebProxy.IsBypassed*
  parent: System.Net.WebProxy
  isExternal: false
  name: IsBypassed
  nameWithType: WebProxy.IsBypassed
- uid: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Net.WebProxy
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Net.WebProxy.UseDefaultCredentials*
  parent: System.Net.WebProxy
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebProxy.UseDefaultCredentials
