### YamlMime:ManagedReference
items:
- uid: System.IO.File
  id: File
  children:
  - System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  - System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  - System.IO.File.AppendAllText(System.String,System.String)
  - System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)
  - System.IO.File.AppendText(System.String)
  - System.IO.File.Copy(System.String,System.String)
  - System.IO.File.Copy(System.String,System.String,System.Boolean)
  - System.IO.File.Create(System.String)
  - System.IO.File.Create(System.String,System.Int32)
  - System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)
  - System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  - System.IO.File.CreateText(System.String)
  - System.IO.File.Decrypt(System.String)
  - System.IO.File.Delete(System.String)
  - System.IO.File.Encrypt(System.String)
  - System.IO.File.Exists(System.String)
  - System.IO.File.GetAccessControl(System.String)
  - System.IO.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  - System.IO.File.GetAttributes(System.String)
  - System.IO.File.GetCreationTime(System.String)
  - System.IO.File.GetCreationTimeUtc(System.String)
  - System.IO.File.GetLastAccessTime(System.String)
  - System.IO.File.GetLastAccessTimeUtc(System.String)
  - System.IO.File.GetLastWriteTime(System.String)
  - System.IO.File.GetLastWriteTimeUtc(System.String)
  - System.IO.File.Move(System.String,System.String)
  - System.IO.File.Open(System.String,System.IO.FileMode)
  - System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.File.OpenRead(System.String)
  - System.IO.File.OpenText(System.String)
  - System.IO.File.OpenWrite(System.String)
  - System.IO.File.ReadAllBytes(System.String)
  - System.IO.File.ReadAllLines(System.String)
  - System.IO.File.ReadAllLines(System.String,System.Text.Encoding)
  - System.IO.File.ReadAllText(System.String)
  - System.IO.File.ReadAllText(System.String,System.Text.Encoding)
  - System.IO.File.ReadLines(System.String)
  - System.IO.File.ReadLines(System.String,System.Text.Encoding)
  - System.IO.File.Replace(System.String,System.String,System.String)
  - System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)
  - System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)
  - System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)
  - System.IO.File.SetCreationTime(System.String,System.DateTime)
  - System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)
  - System.IO.File.SetLastAccessTime(System.String,System.DateTime)
  - System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)
  - System.IO.File.SetLastWriteTime(System.String,System.DateTime)
  - System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)
  - System.IO.File.WriteAllBytes(System.String,System.Byte[])
  - System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  - System.IO.File.WriteAllLines(System.String,System.String[])
  - System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  - System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  - System.IO.File.WriteAllText(System.String,System.String)
  - System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)
  langs:
  - csharp
  name: File
  nameWithType: File
  fullName: System.IO.File
  type: Class
  summary: "作成、コピー、削除、移動、およびの単一のファイルを開くための静的メソッドを提供し、作成できるように<xref href=&quot;System.IO.FileStream&quot;></xref>オブジェクト。       この型の .NET Framework ソース コードを参照するを参照してください。、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/io/file.cs#1c7421e464f67b7e)です。"
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/file.cs#1c7421e464f67b7e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the File class for typical operations such as copying, moving, renaming, creating, opening, deleting, and appending to a single file at a time. You can also use the File class to get and set file attributes or <xref:System.DateTime> information related to the creation, access, and writing of a file. If you want to perform operations on multiple files, see <xref:System.IO.Directory.GetFiles%2A?displayProperty=fullName> or <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=fullName>.  \n  \n Many of the File methods return other I/O types when you create or open files. You can use these other types to further manipulate a file. For more information, see specific File members such as <xref:System.IO.File.OpenText%2A>, <xref:System.IO.File.CreateText%2A>, or <xref:System.IO.File.Create%2A>.  \n  \n Because all File methods are static, it might be more efficient to use a File method rather than a corresponding <xref:System.IO.FileInfo> instance method if you want to perform only one action. All File methods require the path to the file that you are manipulating.  \n  \n The static methods of the File class perform security checks on all methods. If you are going to reuse an object several times, consider using the corresponding instance method of <xref:System.IO.FileInfo> instead, because the security check will not always be necessary.  \n  \n By default, full read/write access to new files is granted to all users.  \n  \n The following table describes the enumerations that are used to customize the behavior of various File methods.  \n  \n|Enumeration|Description|  \n|-----------------|-----------------|  \n|<xref:System.IO.FileAccess>|Specifies read and write access to a file.|  \n|<xref:System.IO.FileShare>|Specifies the level of access permitted for a file that is already in use.|  \n|<xref:System.IO.FileMode>|Specifies whether the contents of an existing file are preserved or overwritten, and whether requests to create an existing file cause an exception.|  \n  \n> [!NOTE]\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \n  \n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the File class to check whether a file exists, and depending on the result, either create a new file and write to it, or open the existing file and read from it. Before running the code, create a `c:\\temp` folder.  \n  \n [!code-cpp[File Class Example#1](~/add/codesnippet/cpp/t-system.io.file_1.cpp)]\n [!code-cs[File Class Example#1](~/add/codesnippet/csharp/t-system.io.file_1.cs)]\n [!code-vb[File Class Example#1](~/add/codesnippet/visualbasic/t-system.io.file_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class File
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.IO.File
  langs:
  - csharp
  name: AppendAllLines(String,IEnumerable<String>)
  nameWithType: File.AppendAllLines(String,IEnumerable<String>)
  fullName: System.IO.File.AppendAllLines(String,IEnumerable<String>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイルに行を追加して、ファイルを閉じます。 指定したファイルが存在しない場合このメソッドは、ファイルを作成、ファイルに指定した行を書き込みます、ファイルを閉じます。"
  remarks: "存在しないが、新しいディレクトリを作成しない場合、メソッドは、ファイルを作成します。 そのための値、`path`パラメーターは、既存のディレクトリを含める必要があります。"
  example:
  - "The following example writes selected lines from a sample data file to a file, and then appends more lines. The directory named `temp` on drive C must exist for the example to complete successfully.  \n  \n [!code-cs[System.IO.File.WriteAllAppendAll#1](~/add/codesnippet/csharp/d3653703-4b0a-4cbe-b582-_1.cs)]\n [!code-vb[System.IO.File.WriteAllAppendAll#1](~/add/codesnippet/visualbasic/d3653703-4b0a-4cbe-b582-_1.vb)]"
  syntax:
    content: public static void AppendAllLines (string path, System.Collections.Generic.IEnumerable<string> contents);
    parameters:
    - id: path
      type: System.String
      description: "行を追加するファイル。 存在しない場合は、ファイルが作成されます。"
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "ファイルに追加する行。"
  overload: System.IO.File.AppendAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかによって定義された、1 つ以上無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either<code> path </code>or <code>contents</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>正しくありません (たとえば、ディレクトリが存在しないまたはマップされていないドライブ上にある)。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "によって指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、ファイルに書き込むアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>ディレクトリです。"
  platform:
  - net462
- uid: System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  id: AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: AppendAllLines(String,IEnumerable<String>,Encoding)
  nameWithType: File.AppendAllLines(String,IEnumerable<String>,Encoding)
  fullName: System.IO.File.AppendAllLines(String,IEnumerable<String>,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたエンコーディングを使用してファイルに行を追加して、ファイルを閉じます。 指定したファイルが存在しない場合このメソッドは、ファイルを作成、ファイルに指定した行を書き込みます、ファイルを閉じます。"
  remarks: "存在しないが、新しいディレクトリを作成しない場合、メソッドは、ファイルを作成します。 そのための値、`path`パラメーターは、既存のディレクトリを含める必要があります。       このメソッドを使用して以下を含むファイルを作成することができます:-の結果、 [LINQ to Objects](~/add/includes/ajax-current-ext-md.md) 、ファイルの行にクエリを実行を使用して取得した、<xref:System.IO.File.ReadLines%2A>メソッド</xref:System.IO.File.ReadLines%2A>。      -を実装するコレクションの内容、<xref:System.Collections.Generic.IEnumerable%601>文字列の</xref:System.Collections.Generic.IEnumerable%601>。"
  syntax:
    content: public static void AppendAllLines (string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "行を追加するファイル。 存在しない場合は、ファイルが作成されます。"
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "ファイルに追加する行。"
    - id: encoding
      type: System.Text.Encoding
      description: "文字を使用するエンコーディングします。"
  overload: System.IO.File.AppendAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかによって定義された、1 つ以上無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either<code> path</code>, <code>contents</code>, or <code>encoding</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>正しくありません (たとえば、ディレクトリが存在しないまたはマップされていないドライブ上にある)。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "によって指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>ディレクトリです。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.AppendAllText(System.String,System.String)
  id: AppendAllText(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: AppendAllText(String,String)
  nameWithType: File.AppendAllText(String,String)
  fullName: System.IO.File.AppendAllText(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイルを開き、ファイルを指定した文字列を追加し、そのファイルを閉じます。 ファイルが存在しない場合このメソッドは、ファイルを作成、ファイルに指定した文字列を書き込んだ後、ファイルを閉じます。"
  remarks: "文字列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、ファイルの末尾に文字列を付加し、ファイルを閉じます。 例外が発生した場合でも、このメソッドにより、終了するファイル ハンドルが保証されます。       存在しないが、新しいディレクトリを作成しない場合、メソッドは、ファイルを作成します。 そのための値、`path`パラメーターは、既存のディレクトリを含める必要があります。"
  example:
  - "The following code example demonstrates the use of the AppendAllText method to add extra text to the end of a file. In this example, a file is created if it doesn't already exist, and text is added to it. However, the directory named `temp` on drive C must exist for the example to complete successfully.  \n  \n [!code-vb[System.IO.File.AllText#00](~/add/codesnippet/visualbasic/m-system.io.file.appenda_0_1.vb)]\n [!code-cs[System.IO.File.AllText#00](~/add/codesnippet/csharp/m-system.io.file.appenda_0_1.cs)]"
  syntax:
    content: public static void AppendAllText (string path, string contents);
    parameters:
    - id: path
      type: System.String
      description: "指定した文字列を追加するファイル。"
    - id: contents
      type: System.String
      description: "ファイルに追加する文字列。"
  overload: System.IO.File.AppendAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、ディレクトリが存在しないまたはマップされていないドライブ上にある)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)
  id: AppendAllText(System.String,System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: AppendAllText(String,String,Encoding)
  nameWithType: File.AppendAllText(String,String,Encoding)
  fullName: System.IO.File.AppendAllText(String,String,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイルが既に存在しない場合は、ファイルを作成するのには、指定した文字列を追加します。"
  remarks: "文字列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、文字列を指定したエンコーディングを使用してファイルの末尾に追加し、ファイルを閉じます。 例外が発生した場合でも、このメソッドにより、終了するファイル ハンドルが保証されます。       存在しないが、新しいディレクトリを作成しない場合、メソッドは、ファイルを作成します。 そのための値、`path`パラメーターは、既存のディレクトリを含める必要があります。"
  example:
  - "The following code example demonstrates the use of the AppendAllText method to add extra text to the end of a file. In this example, a file is created if it doesn't already exist, and text is added to it. However, the directory named `temp` on drive C must exist for the example to complete successfully.  \n  \n [!code-cs[System.IO.File.AllText_Encoding#00](~/add/codesnippet/csharp/m-system.io.file.appenda_1_1.cs)]\n [!code-vb[System.IO.File.AllText_Encoding#00](~/add/codesnippet/visualbasic/m-system.io.file.appenda_1_1.vb)]"
  syntax:
    content: public static void AppendAllText (string path, string contents, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "指定した文字列を追加するファイル。"
    - id: contents
      type: System.String
      description: "ファイルに追加する文字列。"
    - id: encoding
      type: System.Text.Encoding
      description: "文字を使用するエンコーディングします。"
  overload: System.IO.File.AppendAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、ディレクトリが存在しないまたはマップされていないドライブ上にある)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.AppendText(System.String)
  id: AppendText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: AppendText(String)
  nameWithType: File.AppendText(String)
  fullName: System.IO.File.AppendText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "作成、<xref:System.IO.StreamWriter>を utf-8 でエンコードされたテキスト、既存のファイルまたは追加を新しいファイルに指定されたファイルが存在しない場合</xref:System.IO.StreamWriter>。"
  remarks: "このメソッドは、<xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%29>コンス トラクター オーバー ロード</xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%29>。 ファイルが指定された場合`path`が存在しない作成されます。 ファイルが存在する場合、書き込み操作、<xref:System.IO.StreamWriter>ファイルにテキストを追加します</xref:System.IO.StreamWriter>。 追加のスレッドは、開いているとき、ファイルの読み取りが許可されます。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーターは、大文字小文字を区別することはありません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example appends text to a file. The method creates a new file if the file doesn’t exist. However, the directory named `temp` on drive C must exist for the example to complete successfully.  \n  \n [!code-cpp[File_AppendText#1](~/add/codesnippet/cpp/m-system.io.file.appendt_1.cpp)]\n [!code-cs[File_AppendText#1](~/add/codesnippet/csharp/m-system.io.file.appendt_1.cs)]\n [!code-vb[File_AppendText#1](~/add/codesnippet/visualbasic/m-system.io.file.appendt_1.vb)]"
  syntax:
    content: public static System.IO.StreamWriter AppendText (string path);
    parameters:
    - id: path
      type: System.String
      description: "追加先のファイルへのパス。"
    return:
      type: System.IO.StreamWriter
      description: "Utf-8 を追加するストリーム ライターは、指定したファイルまたは新しいファイルにテキストがエンコードされます。"
  overload: System.IO.File.AppendText*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、ディレクトリが存在しないまたはマップされていないドライブ上にある)。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.Copy(System.String,System.String)
  id: Copy(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Copy(String,String)
  nameWithType: File.Copy(String,String)
  fullName: System.IO.File.Copy(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいファイルには、既存のファイルをコピーします。 同じ名前のファイルを上書きすることはできません。"
  remarks: "このメソッドは、<xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29>メソッドのオーバー ロードで、`overwrite`パラメーターに設定`false`</xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29>。       `sourceFileName`と`destFileName`パラメーターは、相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するを参照してください、<xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName>メソッド。</xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName> 。 このメソッドは、パラメーターにワイルドカード文字をサポートしていません。       元のファイルの属性は、コピーされたファイルに保持されます。"
  example:
  - "The following example copies files to the C:\\archives\\2008 backup folder. It uses the two overloads of the <xref:System.IO.File.Copy%2A> method as follows:  \n  \n-   It first uses the Copymethod overload to copy text (.txt) files. The code demonstrates that this overload does not allow overwriting files that were already copied.  \n  \n-   It then uses the <xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=fullName> method overload to copy pictures (.jpg files). The code demonstrates that this overload does allow overwriting files that were already copied.  \n  \n [!code-cs[FileCopyDelete#1](~/add/codesnippet/csharp/m-system.io.file.copy-sy_0_1.cs)]\n [!code-vb[FileCopyDelete#1](~/add/codesnippet/visualbasic/m-system.io.file.copy-sy_0_1.vb)]"
  syntax:
    content: public static void Copy (string sourceFileName, string destFileName);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "コピーするファイル。"
    - id: destFileName
      type: System.String
      description: "コピー先ファイルの名前。 これは、ディレクトリや既存のファイルにすることはできません。"
  overload: System.IO.File.Copy*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceFileName</code>または<code>destFileName</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。       - または -<code>sourceFileName</code>または<code>destFileName</code>ディレクトリを指定します。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceFileName</code>or <code>destFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパス<code> sourceFileName </code>または<code> destFileName </code>が正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>sourceFileName</code>検出されませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>destFileName</code>存在しています。       または、I/O エラーが発生しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>sourceFileName</code>または<code>destFileName</code>形式が無効です。"
  platform:
  - net462
- uid: System.IO.File.Copy(System.String,System.String,System.Boolean)
  id: Copy(System.String,System.String,System.Boolean)
  parent: System.IO.File
  langs:
  - csharp
  name: Copy(String,String,Boolean)
  nameWithType: File.Copy(String,String,Boolean)
  fullName: System.IO.File.Copy(String,String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいファイルには、既存のファイルをコピーします。 同じ名前のファイルの上書きが許可されます。"
  remarks: "`sourceFileName`と`destFileName`パラメーターは、相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 このメソッドは、パラメーターにワイルドカード文字をサポートしていません。       元のファイルの属性は、コピーされたファイルに保持されます。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example copies files to the C:\\archives\\2008 backup folder. It uses the two overloads of the <xref:System.IO.File.Copy%2A> method as follows:  \n  \n-   It first uses the <xref:System.IO.File.Copy%28System.String%2CSystem.String%29?displayProperty=fullName> method overload to copy text (.txt) files. The code demonstrates that this overload does not allow overwriting files that were already copied.  \n  \n It then uses the Copy method overload to copy pictures (.jpg files). The code demonstrates that this overload does allow overwriting files that were already copied.  \n  \n [!code-cs[FileCopyDelete#1](~/add/codesnippet/csharp/m-system.io.file.copy-sy_1_1.cs)]\n [!code-vb[FileCopyDelete#1](~/add/codesnippet/visualbasic/m-system.io.file.copy-sy_1_1.vb)]"
  syntax:
    content: public static void Copy (string sourceFileName, string destFileName, bool overwrite);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "コピーするファイル。"
    - id: destFileName
      type: System.String
      description: "コピー先ファイルの名前。 ディレクトリは指定できません。"
    - id: overwrite
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>コピー先ファイルを上書きする場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.File.Copy*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。       -or-       <code>destFileName</code> is read-only."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceFileName</code>または<code>destFileName</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。       - または -<code>sourceFileName</code>または<code>destFileName</code>ディレクトリを指定します。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceFileName</code>or <code>destFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパス<code> sourceFileName </code>または<code> destFileName </code>が正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>sourceFileName</code>検出されませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>destFileName</code>exists and <code>overwrite</code> is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>.       または、I/O エラーが発生しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>sourceFileName</code>または<code>destFileName</code>形式が無効です。"
  platform:
  - net462
- uid: System.IO.File.Create(System.String)
  id: Create(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Create(String)
  nameWithType: File.Create(String)
  fullName: System.IO.File.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "作成または指定されたパス内のファイルを上書きします。"
  remarks: "<xref:System.IO.FileStream>このメソッドによって作成されたオブジェクトは、既定値を持つ<xref:System.IO.FileShare>値<xref:System.IO.FileShare>; 他のプロセスまたはコード ファイルにアクセスできるなしに作成された元のファイル ハンドルが閉じられるまで</xref:System.IO.FileShare></xref:System.IO.FileShare></xref:System.IO.FileStream>。       このメソッドは、<xref:System.IO.File.Create%28System.String%2CSystem.Int32%29>既定のバッファー サイズを使用してメソッド オーバー ロード</xref:System.IO.File.Create%28System.String%2CSystem.Int32%29>。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       指定したファイルが存在しない場合は作成します。存在し、読み取り専用ではない場合は、その内容が上書きされます。       既定では、新しいファイルへの完全な読み取り/書き込みアクセスは、すべてのユーザーに与えられます。 ファイルは、読み取り/書き込みアクセスで開かれ、別のアプリケーションで開くことが前に閉じる必要があります。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example creates a file in the specified path, writes some information to the file, and reads from the file.  \n  \n [!code-cs[File Create1#1](~/add/codesnippet/csharp/m-system.io.file.create-_0_1.cs)]\n [!code-cpp[File Create1#1](~/add/codesnippet/cpp/m-system.io.file.create-_0_1.cpp)]\n [!code-vb[File Create1#1](~/add/codesnippet/visualbasic/m-system.io.file.create-_0_1.vb)]"
  syntax:
    content: public static System.IO.FileStream Create (string path);
    parameters:
    - id: path
      type: System.String
      description: "パスと作成するファイルの名前。"
    return:
      type: System.IO.FileStream
      description: "A <xref href=&quot;System.IO.FileStream&quot;> </xref>で指定されたファイルへの読み取り/書き込みアクセスを提供する<code> path</code>です。"
  overload: System.IO.File.Create*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。       - または - <code> path </code>読み取り専用であるファイルを指定します。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルの作成中に I/O エラーが発生しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.Create(System.String,System.Int32)
  id: Create(System.String,System.Int32)
  parent: System.IO.File
  langs:
  - csharp
  name: Create(String,Int32)
  nameWithType: File.Create(String,Int32)
  fullName: System.IO.File.Create(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "作成または指定されたファイルを上書きします。"
  remarks: "<xref:System.IO.FileStream>このメソッドによって作成されたオブジェクトは、既定値を持つ<xref:System.IO.FileShare>値<xref:System.IO.FileShare>; 他のプロセスまたはコード ファイルにアクセスできるなしに作成された元のファイル ハンドルが閉じられるまで</xref:System.IO.FileShare></xref:System.IO.FileShare></xref:System.IO.FileStream>。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       このメソッドは、<xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29>コンス トラクター オーバー ロード</xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29>。 指定したファイルが存在しない場合は作成します。存在し、読み取り専用ではない場合は、その内容が上書きされます。       既定では、新しいファイルへの完全な読み取り/書き込みアクセスは、すべてのユーザーに与えられます。 ファイルは、読み取り/書き込みアクセスで開かれ、別のアプリケーションで開くことが前に閉じる必要があります。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example creates a file with the specified buffer size.  \n  \n [!code-cs[File Create2#1](~/add/codesnippet/csharp/m-system.io.file.create-_1_1.cs)]\n [!code-vb[File Create2#1](~/add/codesnippet/visualbasic/m-system.io.file.create-_1_1.vb)]\n [!code-cpp[File Create2#1](~/add/codesnippet/cpp/m-system.io.file.create-_1_1.cpp)]"
  syntax:
    content: public static System.IO.FileStream Create (string path, int bufferSize);
    parameters:
    - id: path
      type: System.String
      description: "ファイルの名前。"
    - id: bufferSize
      type: System.Int32
      description: "ためにバッファリングされるバイト数では、読み取り、ファイルに書き込みます。"
    return:
      type: System.IO.FileStream
      description: "A <xref href=&quot;System.IO.FileStream&quot;> </xref>で指定されたファイルへの読み取り/書き込みアクセスを提供する指定されたバッファー サイズで<code> path</code>です。"
  overload: System.IO.File.Create*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。       - または - <code> path </code>読み取り専用であるファイルを指定します。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルの作成中に I/O エラーが発生しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)
  id: Create(System.String,System.Int32,System.IO.FileOptions)
  parent: System.IO.File
  langs:
  - csharp
  name: Create(String,Int32,FileOptions)
  nameWithType: File.Create(String,Int32,FileOptions)
  fullName: System.IO.File.Create(String,Int32,FileOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "作成または上書きバッファー サイズを指定して、指定されたファイルと<xref href=&quot;System.IO.FileOptions&quot;></xref>作成またはファイルを上書きする方法を記述する値。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       このメソッドは、<xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29>コンス トラクター オーバー ロード</xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29>。 指定したファイルが存在しない場合は作成します。存在し、読み取り専用ではない場合は、その内容が上書きされます。       既定では、新しいファイルへの完全な読み取り/書き込みアクセスは、すべてのユーザーに与えられます。 ファイルは、読み取り/書き込みアクセスで開かれ、別のアプリケーションで開くことが前に閉じる必要があります。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options);
    parameters:
    - id: path
      type: System.String
      description: "ファイルの名前。"
    - id: bufferSize
      type: System.Int32
      description: "ためにバッファリングされるバイト数では、読み取り、ファイルに書き込みます。"
    - id: options
      type: System.IO.FileOptions
      description: "1 つ、 <xref href=&quot;System.IO.FileOptions&quot;> </xref>値を作成またはファイルを上書きする方法について説明します。"
    return:
      type: System.IO.FileStream
      description: "指定したバッファー サイズで新しいファイル。"
  overload: System.IO.File.Create*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。       - または - <code> path </code>読み取り専用であるファイルを指定します。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブです。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルの作成中に I/O エラーが発生しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  id: Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  parent: System.IO.File
  langs:
  - csharp
  name: Create(String,Int32,FileOptions,FileSecurity)
  nameWithType: File.Create(String,Int32,FileOptions,FileSecurity)
  fullName: System.IO.File.Create(String,Int32,FileOptions,FileSecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "作成または指定したバッファー サイズ、ファイル オプション、ファイルのセキュリティと、指定したファイルを上書きします。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       このメソッドは、<xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29>コンス トラクター オーバー ロード</xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29>。 指定したファイルが存在しない場合は作成します。存在し、読み取り専用ではない場合は、その内容が上書きされます。       既定では、新しいファイルへの完全な読み取り/書き込みアクセスは、すべてのユーザーに与えられます。 ファイルは、読み取り/書き込みアクセスで開かれ、別のアプリケーションで開くことが前に閉じる必要があります。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);
    parameters:
    - id: path
      type: System.String
      description: "ファイルの名前。"
    - id: bufferSize
      type: System.Int32
      description: "ためにバッファリングされるバイト数では、読み取り、ファイルに書き込みます。"
    - id: options
      type: System.IO.FileOptions
      description: "1 つ、 <xref href=&quot;System.IO.FileOptions&quot;> </xref>値を作成またはファイルを上書きする方法について説明します。"
    - id: fileSecurity
      type: System.Security.AccessControl.FileSecurity
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref>アクセス制御を決定する値、および監査ファイルのセキュリティ。"
    return:
      type: System.IO.FileStream
      description: "指定したバッファー サイズ、ファイル オプション、ファイルのセキュリティと新しいファイル。"
  overload: System.IO.File.Create*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。       - または - <code> path </code>読み取り専用であるファイルを指定します。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルの作成中に I/O エラーが発生しました。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.CreateText(System.String)
  id: CreateText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: CreateText(String)
  nameWithType: File.CreateText(String)
  fullName: System.IO.File.CreateText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "作成するか、utf-8 でエンコードされたテキストを書き込み用にファイルを開きます。"
  remarks: "このメソッドは、<xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%29>コンス トラクターのオーバー ロードで、`append`パラメーターに設定`false`</xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%29>。 ファイルが指定された場合`path`が存在しない作成されます。 ファイルが存在すると、その内容が上書きされます。 追加のスレッドは、開いているとき、ファイルの読み取りが許可されます。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example creates a file for text writing and reading.  \n  \n [!code-cs[File CreateText#1](~/add/codesnippet/csharp/m-system.io.file.createt_1.cs)]\n [!code-vb[File CreateText#1](~/add/codesnippet/visualbasic/m-system.io.file.createt_1.vb)]\n [!code-cpp[File CreateText#1](~/add/codesnippet/cpp/m-system.io.file.createt_1.cpp)]"
  syntax:
    content: public static System.IO.StreamWriter CreateText (string path);
    parameters:
    - id: path
      type: System.String
      description: "書き込み用に開かれるファイルです。"
    return:
      type: System.IO.StreamWriter
      description: "A <xref:System.IO.StreamWriter>utf-8 エンコーディングを使用して指定されたファイルに書き込まれる</xref:System.IO.StreamWriter>。"
  overload: System.IO.File.CreateText*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.Decrypt(System.String)
  id: Decrypt(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Decrypt(String)
  nameWithType: File.Decrypt(String)
  fullName: System.IO.File.Decrypt(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "現在のアカウントを使用して暗号化されたファイルを復号化、<xref:System.IO.File.Encrypt*>メソッド</xref:System.IO.File.Encrypt*>。"
  remarks: "復号化メソッドを使用して暗号化されたファイルを復号化することができます、<xref:System.IO.File.Encrypt%2A>メソッド</xref:System.IO.File.Encrypt%2A>。  復号化メソッドは、現在のユーザー アカウントを使用して暗号化されたファイルのみを暗号化解除できます。       復号化メソッドは、暗号化が解除されて、ファイルへの排他アクセスを必要とし、別のプロセスで、ファイルが使用されている場合、例外が発生します。 ファイルが暗号化されていない場合、暗号化解除は成功を示し、0 以外の値を返します。       両方の<xref:System.IO.File.Encrypt%2A>方法と暗号解除の方法は、コンピューターと、メソッドを呼び出すと、プロセスのファイルの暗号化キーでインストールされている暗号化サービス プロバイダー (CSP) を使用します</xref:System.IO.File.Encrypt%2A>。       現在のファイル システムは、Windows NT である必要があります NTFS および現在のオペレーティング システムとしてフォーマットされているまたはそれ以降にする必要があります。"
  example:
  - "The following code example uses the <xref:System.IO.File.Encrypt%2A> method and the Decrypt method to encrypt and then decrypt a file. The file must exist for the example to work.  \n  \n [!code-cs[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/csharp/m-system.io.file.decrypt_1.cs)]\n [!code-cpp[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/cpp/m-system.io.file.decrypt_1.cpp)]\n [!code-vb[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/visualbasic/m-system.io.file.decrypt_1.vb)]"
  syntax:
    content: public static void Decrypt (string path);
    parameters:
    - id: path
      type: System.String
      description: "暗号化を解除するファイルを記述するパス。"
  overload: System.IO.File.Decrypt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code>パラメーターは長さ&0; の文字列、空白しか含んでいないまたは<xref:System.IO.Path.InvalidPathChars>.</xref:System.IO.Path.InvalidPathChars>で定義されている&1; つまたは複数の無効な文字が含まれています"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "無効なドライブが指定されました。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "によって記述されるファイル、 <code> path </code>パラメーターが見つかりませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。 たとえば、暗号化されたファイルに既に開いています。       または、この操作は現在のプラットフォームでサポートされていません。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムが Windows NT 以降です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ファイル システムは NTFS ではないです。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code> path </code>パラメーターは読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -、 <code> path </code>パラメーターは、ディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.Delete(System.String)
  id: Delete(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Delete(String)
  nameWithType: File.Delete(String)
  fullName: System.IO.File.Delete(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルを削除します。"
  remarks: "ファイル名の相対パスまたは絶対パス情報を指定、`path`パラメーター。 ワイルドカード文字を含めることはできません。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       削除するファイルが存在しない場合、例外はスローされません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example copies groups of files to the C:\\archives\\2008 backup folder and then deletes them from the source folder.  \n  \n [!code-cs[FileCopyDelete#1](~/add/codesnippet/csharp/m-system.io.file.delete-_1.cs)]\n [!code-vb[FileCopyDelete#1](~/add/codesnippet/visualbasic/m-system.io.file.delete-_1.vb)]"
  syntax:
    content: public static void Delete (string path);
    parameters:
    - id: path
      type: System.String
      description: "削除するファイルの名前。 ワイルドカード文字はサポートされていません。"
  overload: System.IO.File.Delete*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "指定したファイルは、使用中です。       - または - には、開いているハンドルがあるし、オペレーティング システムが Windows XP 以前のバージョン。 このハンドルを開いてディレクトリとファイルを列挙することがあります。 詳細については、次を参照してください。[する方法: ディレクトリと列挙ファイル](~/add/includes/ajax-current-ext-md.md)です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。       または、ファイルが使用されている実行可能ファイル。       - または - <code> path </code>ディレクトリです。       - または - <code> path </code>読み取り専用ファイルを指定します。"
  platform:
  - net462
- uid: System.IO.File.Encrypt(System.String)
  id: Encrypt(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Encrypt(String)
  nameWithType: File.Encrypt(String)
  fullName: System.IO.File.Encrypt(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイルの暗号化に使用したアカウントだけが復号化できるように、ファイルを暗号化します。"
  remarks: "Encrypt メソッドでは、このメソッドの呼び出しに使用するアカウントだけが復号化できるように、ファイルを暗号化することができます。 使用して、<xref:System.IO.File.Decrypt%2A>暗号化メソッドによって暗号化されたファイルを復号化します</xref:System.IO.File.Decrypt%2A>。       暗号化メソッドは、暗号化されているファイルへの排他アクセスが必要ですし、別のプロセスで、ファイルが使用されている場合は失敗します。       Encrypt メソッドおよび<xref:System.IO.File.Decrypt%2A>メソッドは、コンピューターと、メソッドを呼び出すと、プロセスのファイルの暗号化キーでインストールされている暗号化サービス プロバイダー (CSP) を使用します</xref:System.IO.File.Decrypt%2A>。       このメソッドでは、すべてのバージョンの Windows で使用できません。 たとえば、ホーム エディションで利用できますはありません。       現在のファイル システムは、NTFS としてフォーマットする必要があります。"
  example:
  - "The following code example uses the Encrypt method and the <xref:System.IO.File.Decrypt%2A> method to encrypt and then decrypt a file. The file must exist for the example to work.  \n  \n [!code-cs[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/csharp/m-system.io.file.encrypt_1.cs)]\n [!code-cpp[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/cpp/m-system.io.file.encrypt_1.cpp)]\n [!code-vb[IO.File.Encrypt-Decrypt#1](~/add/codesnippet/visualbasic/m-system.io.file.encrypt_1.vb)]"
  syntax:
    content: public static void Encrypt (string path);
    parameters:
    - id: path
      type: System.String
      description: "暗号化するファイルを示すパス。"
  overload: System.IO.File.Encrypt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code>パラメーターは長さ&0; の文字列、空白しか含んでいないまたは<xref:System.IO.Path.InvalidPathChars>.</xref:System.IO.Path.InvalidPathChars>で定義されている&1; つまたは複数の無効な文字が含まれています"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "無効なドライブが指定されました。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "によって記述されるファイル、 <code> path </code>パラメーターが見つかりませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。       または、この操作は現在のプラットフォームでサポートされていません。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムが Windows NT 以降です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "ファイル システムは NTFS ではないです。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code> path </code>パラメーターは読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -、 <code> path </code>パラメーターは、ディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.Exists(System.String)
  id: Exists(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Exists(String)
  nameWithType: File.Exists(String)
  fullName: System.IO.File.Exists(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルが存在するかどうかを判断します。"
  remarks: "Exists メソッドは、パスの検証には使用できません、このメソッドが単に指定されたファイルをチェック`path`が存在します。 返す Exists に無効なパスを渡す`false`です。 パスに無効な文字が含まれるかどうかを確認するに呼び出せる、<xref:System.IO.Path.GetInvalidPathChars%2A>ファイル システムの無効な文字を取得するメソッド</xref:System.IO.Path.GetInvalidPathChars%2A>。 かどうかをテストする正規表現を作成することもできます。 パスが、環境に有効です。 有効なパスの例については、 <xref:System.IO.File>。</xref:System.IO.File>を参照してください。       ディレクトリの存在を確認、 <xref:System.IO.Directory.Exists%2A?displayProperty=fullName>。</xref:System.IO.Directory.Exists%2A?displayProperty=fullName>を参照してください。       あるので注意して別のプロセスできます可能性のあるものまでの間にファイルのあるメソッドを呼び出し、Exists と<xref:System.IO.File.Delete%2A>.</xref:System.IO.File.Delete%2A>など、ファイルで別の操作を実行します。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       場合`path`ディレクトリである、このメソッドが戻るについて説明します`false`です。 末尾のスペースは、`path`ファイルが存在する場合を判断する前にパラメーター。       Exists メソッドを返します`false`指定したファイルが存在するかどうかを判断するときにエラーが発生した場合。 これは無効な文字または文字が多すぎます、失敗、または見つからないディスクでは、ファイル名を渡すなどの例外が発生する状況で発生する、呼び出し元がファイルの読み取りアクセス許可を持たない場合またはします。"
  example:
  - "The following example determines if a file exists.  \n  \n [!code-vb[File Exists#1](~/add/codesnippet/visualbasic/m-system.io.file.exists-_1.vb)]\n [!code-cs[File Exists#1](~/add/codesnippet/csharp/m-system.io.file.exists-_1.cs)]"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "確認するファイル。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>呼び出し元が必要なアクセス許可と<code> path </code>既存のファイルの名前を含む、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 このメソッドも返します<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>場合<code> path </code>は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、無効なパス、または長さ&0; の文字列。 例外がスローされないと、メソッドを返します、呼び出し元が指定のファイルを読み取るための十分なアクセス許可を持たない場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>の有無にかかわらず<code> path</code>です。"
  overload: System.IO.File.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.File.GetAccessControl(System.String)
  id: GetAccessControl(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetAccessControl(String)
  nameWithType: File.GetAccessControl(String)
  fullName: System.IO.File.GetAccessControl(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得、 <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref>指定されたファイルのアクセス制御リスト (ACL) エントリをカプセル化するオブジェクト。"
  remarks: "GetAccessControl メソッドを使用すると、ファイルのアクセス制御リスト (ACL) エントリを取得できます。       ACL には、個人、グループ、または権限がない、指定されたファイルの特定のアクションをユーザーがについて説明します。 詳細については、次を参照してください。[する方法: アクセス制御リスト エントリを追加または](~/add/includes/ajax-current-ext-md.md)です。       環境では NTFS、<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>場合は、ユーザーがあるユーザーに付与されます<xref:System.Security.AccessControl.FileSystemRights>親フォルダーに対する権限</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。 拒否する<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>、拒否<xref:System.Security.AccessControl.FileSystemRights>親ディレクトリにします</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。"
  example:
  - "The following code example uses the <xref:System.IO.File.GetAccessControl%2A> and the <xref:System.IO.File.SetAccessControl%2A> methods to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.  \n  \n [!code-cs[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.file.getacce_1.cs)]\n [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.file.getacce_1.vb)]\n [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.file.getacce_1.cpp)]"
  syntax:
    content: public static System.Security.AccessControl.FileSecurity GetAccessControl (string path);
    parameters:
    - id: path
      type: System.String
      description: "格納するファイルへのパス、 <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref>ファイルのアクセス制御リスト (ACL) 情報を記述するオブジェクト。"
    return:
      type: System.Security.AccessControl.FileSecurity
      description: "A <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref>によって記述されるファイルの規則、アクセス制御をカプセル化するオブジェクト、 <code> path </code>パラメーター。"
  overload: System.IO.File.GetAccessControl*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.Runtime.InteropServices.SEHException
    commentId: T:System.Runtime.InteropServices.SEHException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "ファイルが見つかりませんでした。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code> path </code>パラメーターは読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -、 <code> path </code>パラメーターは、ディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  id: GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.File
  langs:
  - csharp
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: File.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.File.GetAccessControl(String,AccessControlSections)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得、 <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref>指定した型の特定のファイルのアクセス制御リスト (ACL) エントリをカプセル化するオブジェクト。"
  remarks: "GetAccessControl メソッドを使用すると、ファイルのアクセス制御リスト (ACL) エントリを取得できます。       ACL には、個人、グループ、または権限がない、指定されたファイルの特定のアクションをユーザーがについて説明します。 詳細については、次を参照してください。[する方法: アクセス制御リスト エントリを追加または](~/add/includes/ajax-current-ext-md.md)です。       環境では NTFS、<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>場合は、ユーザーがあるユーザーに付与されます<xref:System.Security.AccessControl.FileSystemRights>親フォルダーに対する権限</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。 拒否する<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>、拒否<xref:System.Security.AccessControl.FileSystemRights>親ディレクトリにします</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。"
  syntax:
    content: public static System.Security.AccessControl.FileSecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: path
      type: System.String
      description: "格納するファイルへのパス、 <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref>ファイルのアクセス制御リスト (ACL) 情報を記述するオブジェクト。"
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref>アクセスの種類を指定する値を受け取るリスト (ACL) 情報を制御します。"
    return:
      type: System.Security.AccessControl.FileSecurity
      description: "A <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref>によって記述されるファイルの規則、アクセス制御をカプセル化するオブジェクト、 <code> path </code>パラメーター。"
  overload: System.IO.File.GetAccessControl*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.Runtime.InteropServices.SEHException
    commentId: T:System.Runtime.InteropServices.SEHException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "ファイルが見つかりませんでした。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code> path </code>パラメーターは読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -、 <code> path </code>パラメーターは、ディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.GetAttributes(System.String)
  id: GetAttributes(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetAttributes(String)
  nameWithType: File.GetAttributes(String)
  fullName: System.IO.File.GetAttributes(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得、 <xref href=&quot;System.IO.FileAttributes&quot;> </xref>パス上のファイルのです。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates the `GetAttributes` and `SetAttributes` methods by applying the `Archive` and `Hidden` attributes to a file.  \n  \n [!code-cs[File GetAttributes#1](~/add/codesnippet/csharp/m-system.io.file.getattr_1.cs)]\n [!code-cpp[File GetAttributes#1](~/add/codesnippet/cpp/m-system.io.file.getattr_1.cpp)]\n [!code-vb[File GetAttributes#1](~/add/codesnippet/visualbasic/m-system.io.file.getattr_1.vb)]"
  syntax:
    content: public static System.IO.FileAttributes GetAttributes (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルへのパス。"
    return:
      type: System.IO.FileAttributes
      description: "<xref href=&quot;System.IO.FileAttributes&quot;> </xref>パス上のファイルのです。"
  overload: System.IO.File.GetAttributes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>空、空白しか含んでいないか無効な文字が含まれています。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>path</code>ファイルを表しが正しくないなどが、マップされていないドライブまたはファイル上にあるものが見つかりません。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>ディレクトリを表しが正しくないなどが、マップされていないドライブまたはディレクトリ上にあるものが見つかりません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "このファイルは、別のプロセスによって使用されています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.GetCreationTime(System.String)
  id: GetCreationTime(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetCreationTime(String)
  nameWithType: File.GetCreationTime(String)
  fullName: System.IO.File.GetCreationTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルまたはディレクトリの作成日時を返します。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       ファイルが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC) では、現地時刻に調整されます。       NTFS でフォーマットされたドライブは、短時間に、ファイルの作成日時などのファイルに関する情報をキャッシュすることができます。 その結果、上書きするか、既存のファイルを置き換えている場合、ファイルの作成時刻を明示的に設定する必要があります。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates `GetCreationTime`.  \n  \n [!code-vb[System.IO.File.GetCreationTime#1](~/add/codesnippet/visualbasic/m-system.io.file.getcrea_0_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたは作成の日付と時刻の情報を取得する対象のディレクトリ。"
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>構造は、指定したファイルまたはディレクトリの作成日時に設定します</xref:System.DateTime>。 この値は現地時刻で表示します。"
  overload: System.IO.File.GetCreationTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.GetCreationTimeUtc(System.String)
  id: GetCreationTimeUtc(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetCreationTimeUtc(String)
  nameWithType: File.GetCreationTimeUtc(String)
  fullName: System.IO.File.GetCreationTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルまたはディレクトリの作成の日付と時刻、世界協定時刻 (UTC) を返します。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。       ファイルが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC)。       NTFS でフォーマットされたドライブは、短時間に、ファイルの作成日時などのファイルに関する情報をキャッシュすることができます。 その結果、上書きするか、既存のファイルを置き換えている場合、ファイルの作成時刻を明示的に設定する必要があります。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates the GetCreationTimeUtc method.  \n  \n [!code-vb[System.IO.File.GetCreationTime#2](~/add/codesnippet/visualbasic/m-system.io.file.getcrea_1_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたは作成の日付と時刻の情報を取得する対象のディレクトリ。"
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>構造は、指定したファイルまたはディレクトリの作成日時に設定します</xref:System.DateTime>。 この値は UTC 時刻で表現します。"
  overload: System.IO.File.GetCreationTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.GetLastAccessTime(System.String)
  id: GetLastAccessTime(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetLastAccessTime(String)
  nameWithType: File.GetLastAccessTime(String)
  fullName: System.IO.File.GetLastAccessTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "日付と時刻を返します、指定したファイルまたはディレクトリに最後にアクセスします。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。       ファイルが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC) では、現地時刻に調整されます。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates `GetLastAccessTime`.  \n  \n [!code-vb[File GetLastAccess#1](~/add/codesnippet/visualbasic/m-system.io.file.getlast_1_1.vb)]\n [!code-cs[File GetLastAccess#1](~/add/codesnippet/csharp/m-system.io.file.getlast_1_1.cs)]\n [!code-cpp[File GetLastAccess#1](~/add/codesnippet/cpp/m-system.io.file.getlast_1_1.cpp)]"
  syntax:
    content: public static DateTime GetLastAccessTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたはアクセス日時情報を取得する対象のディレクトリ。"
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>と時刻の指定したファイルまたはディレクトリに最後にアクセスした日付に設定します</xref:System.DateTime>。 この値は現地時刻で表示します。"
  overload: System.IO.File.GetLastAccessTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.GetLastAccessTimeUtc(System.String)
  id: GetLastAccessTimeUtc(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetLastAccessTimeUtc(String)
  nameWithType: File.GetLastAccessTimeUtc(String)
  fullName: System.IO.File.GetLastAccessTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "世界協定時刻 (UTC) で指定したファイルまたはディレクトリに最後にアクセスした日付と時刻を返します。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。       ファイルが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC)。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static DateTime GetLastAccessTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたはアクセス日時情報を取得する対象のディレクトリ。"
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>と時刻の指定したファイルまたはディレクトリに最後にアクセスした日付に設定します</xref:System.DateTime>。 この値は UTC 時刻で表現します。"
  overload: System.IO.File.GetLastAccessTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.GetLastWriteTime(System.String)
  id: GetLastWriteTime(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetLastWriteTime(String)
  nameWithType: File.GetLastWriteTime(String)
  fullName: System.IO.File.GetLastWriteTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "日付と時刻を返します、指定したファイルまたはディレクトリに最後に書き込んだです。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。 各オペレーティング システムでは、独自の規則に従って、最終書き込み時刻を管理します。 パフォーマンスを向上させるには、オペレーティング システム可能性があります、最後の書き込み操作の正確な時刻に最終書き込み時刻の値を設定していない可能性があります設定は近似値を代わりに。       ファイルが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC) では、現地時刻に調整されます。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates `GetLastWriteTime`.  \n  \n [!code-cpp[File GetLastWrite#1](~/add/codesnippet/cpp/m-system.io.file.getlast_0_1.cpp)]\n [!code-vb[File GetLastWrite#1](~/add/codesnippet/visualbasic/m-system.io.file.getlast_0_1.vb)]\n [!code-cs[File GetLastWrite#1](~/add/codesnippet/csharp/m-system.io.file.getlast_0_1.cs)]"
  syntax:
    content: public static DateTime GetLastWriteTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたは書き込みの日付と時刻の情報を取得する対象のディレクトリ。"
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>構造は、指定したファイルまたはディレクトリに最後に書き込んだ日時に設定します</xref:System.DateTime>。 この値は現地時刻で表示します。"
  overload: System.IO.File.GetLastWriteTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.GetLastWriteTimeUtc(System.String)
  id: GetLastWriteTimeUtc(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: GetLastWriteTimeUtc(String)
  nameWithType: File.GetLastWriteTimeUtc(String)
  fullName: System.IO.File.GetLastWriteTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "世界協定時刻 (UTC) で指定したファイルまたはディレクトリに最後に書き込んだ日付と時刻を返します。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。 各オペレーティング システムでは、独自の規則に従って、最終書き込み時刻を管理します。 パフォーマンスを向上させるには、オペレーティング システム可能性があります、最後の書き込み操作の正確な時刻に最終書き込み時刻の値を設定していない可能性があります設定は近似値を代わりに。       ファイルが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC)。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static DateTime GetLastWriteTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたは書き込みの日付と時刻の情報を取得する対象のディレクトリ。"
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>構造は、指定したファイルまたはディレクトリに最後に書き込んだ日時に設定します</xref:System.DateTime>。 この値は UTC 時刻で表現します。"
  overload: System.IO.File.GetLastWriteTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.Move(System.String,System.String)
  id: Move(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Move(String,String)
  nameWithType: File.Move(String,String)
  fullName: System.IO.File.Move(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルを新しいファイル名を指定するオプションを提供する、新しい場所に移動します。"
  remarks: "ディスク ボリューム全体でこのメソッドは機能し、ソースと宛先が同じである場合、例外はスローしません。 そのディレクトリに同じ名前のファイルを移動することによって、ファイルを交換しようとする場合、 <xref:System.IO.IOException>。</xref:System.IO.IOException>を取得することに注意してください。 Move メソッドを使用して、既存のファイルを上書きすることはできません。       `sourceFileName`と`destFileName`引数は、相対パスまたは絶対パス情報を含めることができます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       ディスク ボリューム間でファイルを移動しようとすると、そのファイルが使用されて、ファイルは、先にコピーしますが、ソースからは削除されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example moves a file.  \n  \n [!code-cpp[File Move#1](~/add/codesnippet/cpp/m-system.io.file.move-sy_1.cpp)]\n [!code-cs[File Move#1](~/add/codesnippet/csharp/m-system.io.file.move-sy_1.cs)]\n [!code-vb[File Move#1](~/add/codesnippet/visualbasic/m-system.io.file.move-sy_1.vb)]"
  syntax:
    content: public static void Move (string sourceFileName, string destFileName);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "移動するファイルの名前。 相対パスまたは絶対パスを含めることができます。"
    - id: destFileName
      type: System.String
      description: "新しいパスおよびファイルの名前。"
  overload: System.IO.File.Move*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "コピー先ファイルが既に存在します。       -or-       <code>sourceFileName</code> was not found."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceFileName</code>or <code>destFileName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceFileName</code>または<code>destFileName</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパス<code> sourceFileName </code>または<code> destFileName </code>が正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>sourceFileName</code>または<code>destFileName</code>形式が無効です。"
  platform:
  - net462
- uid: System.IO.File.Open(System.String,System.IO.FileMode)
  id: Open(System.String,System.IO.FileMode)
  parent: System.IO.File
  langs:
  - csharp
  name: Open(String,FileMode)
  nameWithType: File.Open(String,FileMode)
  fullName: System.IO.File.Open(String,FileMode)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "開く、 <xref href=&quot;System.IO.FileStream&quot;> </xref>読み取り/書き込みアクセス権を持つ指定したパスにします。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example creates a temporary file and writes some text to it. The example then opens the file, using T:System.IO.FileMode.Open; that is, if the file did not already exist, it would not be created.  \n  \n [!code-cpp[File Open1#1](~/add/codesnippet/cpp/m-system.io.file.open-sy_0_1.cpp)]\n [!code-cs[File Open1#1](~/add/codesnippet/csharp/m-system.io.file.open-sy_0_1.cs)]\n [!code-vb[File Open1#1](~/add/codesnippet/visualbasic/m-system.io.file.open-sy_0_1.vb)]"
  syntax:
    content: public static System.IO.FileStream Open (string path, System.IO.FileMode mode);
    parameters:
    - id: path
      type: System.String
      description: "開くファイル。"
    - id: mode
      type: System.IO.FileMode
      description: "A <xref href=&quot;System.IO.FileMode&quot;> </xref>場合に、ファイルを作成するかどうかを指定する値が存在しないと、既存のファイルの内容を保持するか上書きするかどうかを決定します。"
    return:
      type: System.IO.FileStream
      description: "A <xref href=&quot;System.IO.FileStream&quot;> </xref>読み取り/書き込みアクセスでのパスと指定したモードで開かれているし、は共有されません。"
  overload: System.IO.File.Open*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが無効、(たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。       - または -<code>mode</code>は<xref href=&quot;System.IO.FileMode&quot;></xref>し、指定したファイルは隠しファイルです。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>無効な値を指定します。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.File
  langs:
  - csharp
  name: Open(String,FileMode,FileAccess)
  nameWithType: File.Open(String,FileMode,FileAccess)
  fullName: System.IO.File.Open(String,FileMode,FileAccess)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "開く、 <xref href=&quot;System.IO.FileStream&quot;> </xref>指定モードとアクセスで、指定したパスにします。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。"
  example:
  - "The following example opens a file with read-only access.  \n  \n [!code-cs[file open2#1](~/add/codesnippet/csharp/m-system.io.file.open-sy_1_1.cs)]\n [!code-cpp[file open2#1](~/add/codesnippet/cpp/m-system.io.file.open-sy_1_1.cpp)]\n [!code-vb[file open2#1](~/add/codesnippet/visualbasic/m-system.io.file.open-sy_1_1.vb)]"
  syntax:
    content: public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access);
    parameters:
    - id: path
      type: System.String
      description: "開くファイル。"
    - id: mode
      type: System.IO.FileMode
      description: "A <xref href=&quot;System.IO.FileMode&quot;> </xref>場合に、ファイルを作成するかどうかを指定する値が存在しないと、既存のファイルの内容を保持するか上書きするかどうかを決定します。"
    - id: access
      type: System.IO.FileAccess
      description: "A <xref href=&quot;System.IO.FileAccess&quot;> </xref>ファイルで実行できる操作を指定する値。"
    return:
      type: System.IO.FileStream
      description: "非共有<xref href=&quot;System.IO.FileStream&quot;></xref>指定モードとアクセスで、指定されたファイルへのアクセスを提供します。"
  overload: System.IO.File.Open*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。       -or-       <code>access</code> specified <xref uid=&quot;langword_csharp_Read&quot; name=&quot;Read&quot; href=&quot;&quot;></xref> and <code>mode</code> specified <xref uid=&quot;langword_csharp_Create&quot; name=&quot;Create&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CreateNew&quot; name=&quot;CreateNew&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Truncate&quot; name=&quot;Truncate&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Append&quot; name=&quot;Append&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが無効、(たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定し、<code>access</code>は<xref uid=&quot;langword_csharp_Read&quot; name=&quot;Read&quot; href=&quot;&quot;></xref>です。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。       - または -<code>mode</code>は<xref href=&quot;System.IO.FileMode&quot;></xref>し、指定したファイルは隠しファイルです。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>または<code>access</code>に無効な値を指定します。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.File
  langs:
  - csharp
  name: Open(String,FileMode,FileAccess,FileShare)
  nameWithType: File.Open(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.File.Open(String,FileMode,FileAccess,FileShare)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "開く、 <xref href=&quot;System.IO.FileStream&quot;> </xref>読み取りを持つ指定モードを指定したパスに書き込み、または読み取り/書き込みアクセスと、指定した共有オプション。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example opens a file with read-only access and with file sharing disallowed.  \n  \n [!code-cs[file open3#1](~/add/codesnippet/csharp/da5a0cfa-1b45-4d75-942d-_1.cs)]\n [!code-cpp[file open3#1](~/add/codesnippet/cpp/da5a0cfa-1b45-4d75-942d-_1.cpp)]\n [!code-vb[file open3#1](~/add/codesnippet/visualbasic/da5a0cfa-1b45-4d75-942d-_1.vb)]"
  syntax:
    content: public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
    parameters:
    - id: path
      type: System.String
      description: "開くファイル。"
    - id: mode
      type: System.IO.FileMode
      description: "A <xref href=&quot;System.IO.FileMode&quot;> </xref>場合に、ファイルを作成するかどうかを指定する値が存在しないと、既存のファイルの内容を保持するか上書きするかどうかを決定します。"
    - id: access
      type: System.IO.FileAccess
      description: "A <xref href=&quot;System.IO.FileAccess&quot;> </xref>ファイルで実行できる操作を指定する値。"
    - id: share
      type: System.IO.FileShare
      description: "A <xref href=&quot;System.IO.FileShare&quot;> </xref>他のスレッドがファイルに対して持つアクセスの種類を指定する値。"
    return:
      type: System.IO.FileStream
      description: "A <xref href=&quot;System.IO.FileStream&quot;> </xref>読み取りを持つ指定モードを指定したパスに書き込み、または読み取り/書き込みアクセスと、指定した共有オプション。"
  overload: System.IO.File.Open*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。       -or-       <code>access</code> specified <xref uid=&quot;langword_csharp_Read&quot; name=&quot;Read&quot; href=&quot;&quot;></xref> and <code>mode</code> specified <xref uid=&quot;langword_csharp_Create&quot; name=&quot;Create&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_CreateNew&quot; name=&quot;CreateNew&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Truncate&quot; name=&quot;Truncate&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Append&quot; name=&quot;Append&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが無効、(たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定し、<code>access</code>は<xref uid=&quot;langword_csharp_Read&quot; name=&quot;Read&quot; href=&quot;&quot;></xref>です。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。       - または -<code>mode</code>は<xref href=&quot;System.IO.FileMode&quot;></xref>し、指定したファイルは隠しファイルです。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>、 <code>access</code>、または<code>share</code>に無効な値を指定します。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.OpenRead(System.String)
  id: OpenRead(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: OpenRead(String)
  nameWithType: File.OpenRead(String)
  fullName: System.IO.File.OpenRead(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "読み取り用の既存のファイルを開きます。"
  remarks: "このメソッドは<xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%29><xref:System.IO.FileMode><xref:System.IO.FileMode><xref:System.IO.FileAccess>値</xref:System.IO.FileAccess><xref:System.IO.FileAccess>と<xref:System.IO.FileShare><xref:System.IO.FileShare>。</xref:System.IO.FileShare>の値</xref:System.IO.FileShare></xref:System.IO.FileAccess>の属性</xref:System.IO.FileMode>の値</xref:System.IO.FileMode>を持つオーバー ロード コンス トラクター</xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%29>       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example opens a file for reading.  \n  \n [!code-cs[file openread#1](~/add/codesnippet/csharp/m-system.io.file.openrea_1.cs)]\n [!code-vb[file openread#1](~/add/codesnippet/visualbasic/m-system.io.file.openrea_1.vb)]\n [!code-cpp[file openread#1](~/add/codesnippet/cpp/m-system.io.file.openrea_1.cpp)]"
  syntax:
    content: public static System.IO.FileStream OpenRead (string path);
    parameters:
    - id: path
      type: System.String
      description: "読み取り用に開かれるファイルです。"
    return:
      type: System.IO.FileStream
      description: "読み取り専用<xref href=&quot;System.IO.FileStream&quot;></xref>指定したパスにします。"
  overload: System.IO.File.OpenRead*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが無効、(たとえば、上にある、マップされていないドライブ)。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>ディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  platform:
  - net462
- uid: System.IO.File.OpenText(System.String)
  id: OpenText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: OpenText(String)
  nameWithType: File.OpenText(String)
  fullName: System.IO.File.OpenText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "読み取り用の既存の utf-8 エンコードされたテキスト ファイルを開きます。"
  remarks: "このメソッドは、<xref:System.IO.StreamReader.%23ctor%28System.String%29>コンス トラクター オーバー ロード</xref:System.IO.StreamReader.%23ctor%28System.String%29>。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example opens a text file for reading.  \n  \n [!code-vb[file opentext#1](~/add/codesnippet/visualbasic/m-system.io.file.opentex_1.vb)]\n [!code-cs[file opentext#1](~/add/codesnippet/csharp/m-system.io.file.opentex_1.cs)]\n [!code-cpp[file opentext#1](~/add/codesnippet/cpp/m-system.io.file.opentex_1.cpp)]"
  syntax:
    content: public static System.IO.StreamReader OpenText (string path);
    parameters:
    - id: path
      type: System.String
      description: "読み取り用に開かれるファイルです。"
    return:
      type: System.IO.StreamReader
      description: "<xref:System.IO.StreamReader>指定されたパスに</xref:System.IO.StreamReader>"
  overload: System.IO.File.OpenText*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが無効、(たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.OpenWrite(System.String)
  id: OpenWrite(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: OpenWrite(String)
  nameWithType: File.OpenWrite(String)
  fullName: System.IO.File.OpenWrite(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "既存のファイルを開くか、書き込み用に新しいファイルを作成します。"
  remarks: "このメソッドは、<xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%29>ファイル モードを設定コンス トラクターのオーバー ロード<xref:System.IO.FileMode>、アクセス設定<xref:System.IO.FileAccess>、<xref:System.IO.FileShare></xref:System.IO.FileShare>設定、共有モードと</xref:System.IO.FileAccess></xref:System.IO.FileMode></xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%29>。       OpenWrite メソッドは、既にファイル パスが存在するかが存在しない場合は、新しいファイルを作成する場合に、ファイルを開きます。 既存のファイルには追加しません新しいテキスト既存のテキストにします。 代わりに、新しい文字で既存の文字を上書きします。 を上書きした場合より長い文字列 (&quot;This is OpenWrite メソッドのテストです)&quot;など、短い文字列 (「2 つ目の実行」) などのファイルは混在の文字列 (&quot;2 つ目 runtest OpenWrite メソッドの&quot;) です。       `path`パラメーターは相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するを使用して、<xref:System.IO.Directory.GetCurrentDirectory%2A>メソッド</xref:System.IO.Directory.GetCurrentDirectory%2A>。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example opens a file for reading and writing.  \n  \n [!code-cpp[file openwrite#1](~/add/codesnippet/cpp/m-system.io.file.openwri_1.cpp)]\n [!code-cs[file openwrite#1](~/add/codesnippet/csharp/m-system.io.file.openwri_1.cs)]\n [!code-vb[file openwrite#1](~/add/codesnippet/visualbasic/m-system.io.file.openwri_1.vb)]"
  syntax:
    content: public static System.IO.FileStream OpenWrite (string path);
    parameters:
    - id: path
      type: System.String
      description: "書き込み用に開かれるファイルです。"
    return:
      type: System.IO.FileStream
      description: "非共有<xref href=&quot;System.IO.FileStream&quot;></xref>オブジェクトで指定したパスに<xref href=&quot;System.IO.FileAccess&quot;></xref>アクセスします。"
  overload: System.IO.File.OpenWrite*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。       - または - <code> path </code>読み取り専用ファイルまたはディレクトリを指定します。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが無効、(たとえば、上にある、マップされていないドライブ)。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.ReadAllBytes(System.String)
  id: ReadAllBytes(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadAllBytes(String)
  nameWithType: File.ReadAllBytes(String)
  fullName: System.IO.File.ReadAllBytes(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "バイナリ ファイルを開き、ファイルの内容をバイト配列に読み取った、およびファイルを閉じます。"
  remarks: "ファイル パスを指定するには、このメソッドは、ファイルを開き、ファイルの内容、バイト配列に読み取ったと後、ファイルを閉じます。"
  syntax:
    content: public static byte[] ReadAllBytes (string path);
    parameters:
    - id: path
      type: System.String
      description: "読み取り用に開かファイルです。"
    return:
      type: System.Byte[]
      description: "ファイルの内容を含むバイト配列。"
  overload: System.IO.File.ReadAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "この操作は現在のプラットフォームでサポートされていません。       - または - <code> path </code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.ReadAllLines(System.String)
  id: ReadAllLines(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadAllLines(String)
  nameWithType: File.ReadAllLines(String)
  fullName: System.IO.File.ReadAllLines(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "テキスト ファイルを開き、ファイルのすべての行を読み取った後、ファイルを閉じます。"
  remarks: "This method opens a file, reads each line of the file, then adds each line as an element of a string array. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  \n  \n This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected."
  example:
  - "The following code example demonstrates the use of the ReadAllLines method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllLines#00](~/add/codesnippet/visualbasic/m-system.io.file.readall_1_1.vb)]\n [!code-cs[System.IO.File.AllLines#00](~/add/codesnippet/csharp/m-system.io.file.readall_1_1.cs)]"
  syntax:
    content: public static string[] ReadAllLines (string path);
    parameters:
    - id: path
      type: System.String
      description: "読み取り用に開かファイルです。"
    return:
      type: System.String[]
      description: "ファイルのすべての行を格納している文字列配列。"
  overload: System.IO.File.ReadAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.ReadAllLines(System.String,System.Text.Encoding)
  id: ReadAllLines(System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadAllLines(String,Encoding)
  nameWithType: File.ReadAllLines(String,Encoding)
  fullName: System.IO.File.ReadAllLines(String,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイルを開き、指定したエンコーディングを使用してファイルのすべての行を読み取った後、ファイルを閉じます。"
  remarks: "This method opens a file, reads each line of the file, and then adds each line as an element of a string array. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  \n  \n This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected."
  example:
  - "The following code example demonstrates the use of the ReadAllLines method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllLines_Encoding#00](~/add/codesnippet/visualbasic/m-system.io.file.readall_0_1.vb)]\n [!code-cs[System.IO.File.AllLines_Encoding#00](~/add/codesnippet/csharp/m-system.io.file.readall_0_1.cs)]"
  syntax:
    content: public static string[] ReadAllLines (string path, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "読み取り用に開かファイルです。"
    - id: encoding
      type: System.Text.Encoding
      description: "ファイルの内容に適用されるエンコーディング。"
    return:
      type: System.String[]
      description: "ファイルのすべての行を格納している文字列配列。"
  overload: System.IO.File.ReadAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.ReadAllText(System.String)
  id: ReadAllText(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadAllText(String)
  nameWithType: File.ReadAllText(String)
  fullName: System.IO.File.ReadAllText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "テキスト ファイルを開き、ファイルのすべての行を読み取った後、ファイルを閉じます。"
  remarks: "This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  \n  \n This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.  \n  \n Use the <xref:System.IO.File.ReadAllText%28System.String%2CSystem.Text.Encoding%29> method overload when reading files that might contain imported text, because unrecognized characters may not be read correctly.  \n  \n The file handle is guaranteed to be closed by this method, even if exceptions are raised."
  example:
  - "The following code example demonstrates the use of the ReadAllText method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllText#00](~/add/codesnippet/visualbasic/m-system.io.file.readall_3_1.vb)]\n [!code-cs[System.IO.File.AllText#00](~/add/codesnippet/csharp/m-system.io.file.readall_3_1.cs)]"
  syntax:
    content: public static string ReadAllText (string path);
    parameters:
    - id: path
      type: System.String
      description: "読み取り用に開かファイルです。"
    return:
      type: System.String
      description: "ファイルのすべての行を含む文字列。"
  overload: System.IO.File.ReadAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.ReadAllText(System.String,System.Text.Encoding)
  id: ReadAllText(System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadAllText(String,Encoding)
  nameWithType: File.ReadAllText(String,Encoding)
  fullName: System.IO.File.ReadAllText(String,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイルを開き、指定したエンコーディングを使用してファイルのすべての行を読み取った後、ファイルを閉じます。"
  remarks: "This method opens a file, reads each line of the file, and then adds each line as an element of a string. It then closes the file. A line is defined as a sequence of characters followed by a carriage return ('\\r'), a line feed ('\\n'), or a carriage return immediately followed by a line feed. The resulting string does not contain the terminating carriage return and/or line feed.  \n  \n This method attempts to automatically detect the encoding of a file based on the presence of byte order marks. Encoding formats UTF-8 and UTF-32 (both big-endian and little-endian) can be detected.  \n  \n The file handle is guaranteed to be closed by this method, even if exceptions are raised.  \n  \n To use the encoding settings as configured for your operating system, specify the <xref:System.Text.Encoding.Default%2A?displayProperty=fullName> property for the `encoding` parameter."
  example:
  - "The following code example demonstrates the use of the ReadAllText method to display the contents of a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-cs[System.IO.File.AllText_Encoding#00](~/add/codesnippet/csharp/m-system.io.file.readall_2_1.cs)]\n [!code-vb[System.IO.File.AllText_Encoding#00](~/add/codesnippet/visualbasic/m-system.io.file.readall_2_1.vb)]"
  syntax:
    content: public static string ReadAllText (string path, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "読み取り用に開かファイルです。"
    - id: encoding
      type: System.Text.Encoding
      description: "ファイルの内容に適用されるエンコーディング。"
    return:
      type: System.String
      description: "ファイルのすべての行を含む文字列。"
  overload: System.IO.File.ReadAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.ReadLines(System.String)
  id: ReadLines(System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadLines(String)
  nameWithType: File.ReadLines(String)
  fullName: System.IO.File.ReadLines(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイルの行を読み取ります。"
  remarks: "ReadLines と<xref:System.IO.File.ReadAllLines%2A>メソッドが次のように異なります ReadLines を使用して、コレクション全体が返される前に、文字列のコレクションの列挙を開始することができます。 を使用する場合<xref:System.IO.File.ReadAllLines%2A>、配列にアクセスする前に、文字列の配列全体は返されるのを待機する必要があります。</xref:System.IO.File.ReadAllLines%2A> </xref:System.IO.File.ReadAllLines%2A> 。 そのため、非常に大きなファイルを扱うときに ReadLines はより効率的なのようにできます。       ReadLines メソッドを次の操作を使用することができます:-実行[LINQ to Objects](~/add/includes/ajax-current-ext-md.md)クエリ ファイルをその行のフィルター処理されたセットを取得します。      -返される行のコレクションを持つファイルに書き込み、<xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29?displayProperty=fullName>メソッド、または既存のファイルを追加する際、<xref:System.IO.File.AppendAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29?displayProperty=fullName>メソッド</xref:System.IO.File.AppendAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29?displayProperty=fullName></xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29?displayProperty=fullName>。      -、 <xref:System.Collections.Generic.IEnumerable%601>、 <xref:System.Collections.Generic.IList%601>、または<xref:System.Collections.Generic.Queue%601>.</xref:System.Collections.Generic.Queue%601></xref:System.Collections.Generic.IList%601>など、そのコンス トラクターの文字列のコレクション</xref:System.Collections.Generic.IEnumerable%601>を受け取って、コレクションの直後に設定されているインスタンスを作成します。       このメソッドを使用して<xref:System.Text.Encoding.UTF8%2A>エンコーディング値</xref:System.Text.Encoding.UTF8%2A>。"
  example:
  - "The following example reads the lines of a file to find lines that contain specified strings.  \n  \n [!code-vb[System.IO.File.ReadLines#1](~/add/codesnippet/visualbasic/m-system.io.file.readlin_1.vb)]\n [!code-cs[System.IO.File.ReadLines#1](~/add/codesnippet/csharp/m-system.io.file.readlin_1.cs)]  \n  \n The following example uses the ReadLines method in a LINQ query that enumerates all directories for files that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Microsoft\".  \n  \n [!code-cs[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/csharp/m-system.io.file.readlin_2.cs)]\n [!code-vb[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/visualbasic/m-system.io.file.readlin_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> ReadLines (string path);
    parameters:
    - id: path
      type: System.String
      description: "読み取るファイル。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "ファイルのすべての行またはクエリの結果の行。"
  overload: System.IO.File.ReadLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかによって定義された&1; つまたは複数の無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "によって指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>ディレクトリです。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.ReadLines(System.String,System.Text.Encoding)
  id: ReadLines(System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: ReadLines(String,Encoding)
  nameWithType: File.ReadLines(String,Encoding)
  fullName: System.IO.File.ReadLines(String,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたエンコーディングを持つファイルの行を読み取ります。"
  remarks: "このメソッドを使用すると、ファイルの読み取りを使用するのにエンコーディングを指定できます。       ReadLines と<xref:System.IO.File.ReadAllLines%2A>メソッドが次のように異なります ReadLines を使用して、コレクション全体が返される前に、文字列のコレクションの列挙を開始することができます。</xref:System.IO.File.ReadAllLines%2A> 。 使用すると<xref:System.IO.File.ReadAllLines%2A>、配列にアクセスする前に、文字列の配列全体は返されるを待機する必要があります</xref:System.IO.File.ReadAllLines%2A>。 そのため、非常に大きなファイルを扱うときに ReadLines はより効率的なのようにできます。       ReadLines メソッドを次の操作を使用することができます:-実行[LINQ to Objects](~/add/includes/ajax-current-ext-md.md)クエリ ファイルをその行のフィルター処理されたセットを取得します。      -返される行のコレクションを持つファイルに書き込み、<xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29?displayProperty=fullName>メソッド、または既存のファイルを追加する際、<xref:System.IO.File.AppendAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29?displayProperty=fullName>メソッド</xref:System.IO.File.AppendAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29?displayProperty=fullName></xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29?displayProperty=fullName>。      -、 <xref:System.Collections.Generic.IEnumerable%601>、 <xref:System.Collections.Generic.IList%601>、または<xref:System.Collections.Generic.Queue%601>.</xref:System.Collections.Generic.Queue%601></xref:System.Collections.Generic.IList%601>など、そのコンス トラクターの文字列のコレクション</xref:System.Collections.Generic.IEnumerable%601>を受け取って、コレクションの直後に設定されているインスタンスを作成します。"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> ReadLines (string path, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "読み取るファイル。"
    - id: encoding
      type: System.Text.Encoding
      description: "ファイルの内容に適用されるエンコーディングします。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "ファイルのすべての行またはクエリの結果の行。"
  overload: System.IO.File.ReadLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "によって指定されたファイル<code> path </code>が見つかりませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>ディレクトリです。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.Replace(System.String,System.String,System.String)
  id: Replace(System.String,System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: Replace(String,String,String)
  nameWithType: File.Replace(String,String,String)
  fullName: System.IO.File.Replace(String,String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルの内容を元のファイルは削除され、置き換えられたファイルのバックアップを作成する別のファイルの内容に置き換えます。"
  remarks: "Replace メソッドは、指定されたファイルの内容を別のファイルの内容に置き換えます。  また、置き換えられたファイルのバックアップを作成します。       場合、`sourceFileName`と`destinationFileName`は別のボリュームのこのメソッドで例外が発生します。 場合、`destinationBackupFileName`はソース ファイルから別のボリュームをバックアップ ファイルが削除できません。       渡す`null`を`destinationBackupFileName`パラメーターが置き換えられるファイルのバックアップを作成したくない場合。"
  example:
  - "The following code example uses the <xref:System.IO.File.Replace%2A> method to replace a file with another file and create a backup of the replaced file.  \n  \n [!code-vb[IO.File.Replace#1](~/add/codesnippet/visualbasic/m-system.io.file.replace_1.vb)]\n [!code-cs[IO.File.Replace#1](~/add/codesnippet/csharp/m-system.io.file.replace_1.cs)]\n [!code-cpp[IO.File.Replace#1](~/add/codesnippet/cpp/m-system.io.file.replace_1.cpp)]"
  syntax:
    content: public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "指定されたファイルを置き換えるファイルの名前`destinationFileName`です。"
    - id: destinationFileName
      type: System.String
      description: "置き換えられるファイルの名前。"
    - id: destinationBackupFileName
      type: System.String
      description: "バックアップ ファイルの名前。"
  overload: System.IO.File.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "により記述されたパス、 <code> destinationFileName </code>パラメーターは、正しい書式ではありませんでした。       - または - で記述されるパス、 <code> destinationBackupFileName </code>パラメーターは、正しい書式ではありませんでした。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destinationFileName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "無効なドライブが指定されました。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "現在の記述ファイル<xref href=&quot;System.IO.FileInfo&quot;></xref>オブジェクトが見つかりませんでした。       - または - によって記述されるファイル、 <code> destinationBackupFileName </code>パラメーターが見つかりませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file.  \n  \n \\- or -  \n  \n The <code>sourceFileName</code> and <code>destinationFileName</code> parameters specify the same file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "オペレーティング システムが Windows 98 Second Edition 以前のバージョンと、ファイル システムは NTFS ではありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code> sourceFileName </code>または<code> destinationFileName </code>パラメーターは読み取り専用ファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       または、ソースまたはターゲットのパラメーターは、ファイルではなくディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)
  id: Replace(System.String,System.String,System.String,System.Boolean)
  parent: System.IO.File
  langs:
  - csharp
  name: Replace(String,String,String,Boolean)
  nameWithType: File.Replace(String,String,String,Boolean)
  fullName: System.IO.File.Replace(String,String,String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルの内容を元のファイルは削除され、置き換えられたファイルのバックアップを作成する別のファイルの内容に置き換え、必要に応じてマージ エラーを無視します。"
  remarks: "Replace メソッドは、指定されたファイルの内容を別のファイルの内容に置き換えます。  また、置き換えられたファイルのバックアップを作成します。       場合、`sourceFileName`と`destinationFileName`は別のボリュームのこのメソッドで例外が発生します。 場合、`destinationBackupFileName`はソース ファイルから別のボリュームをバックアップ ファイルが削除できません。       渡す`null`を`destinationBackupFileName`パラメーターが置き換えられるファイルのバックアップを作成したくない場合。"
  example:
  - "The following code example uses the Replace method to replace a file with another file and create a backup of the replaced file.  \n  \n [!code-vb[IO.File.Replace#1](~/add/codesnippet/visualbasic/be01e0a6-2a02-46ff-8d10-_1.vb)]\n [!code-cs[IO.File.Replace#1](~/add/codesnippet/csharp/be01e0a6-2a02-46ff-8d10-_1.cs)]\n [!code-cpp[IO.File.Replace#1](~/add/codesnippet/cpp/be01e0a6-2a02-46ff-8d10-_1.cpp)]"
  syntax:
    content: public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    parameters:
    - id: sourceFileName
      type: System.String
      description: "指定されたファイルを置き換えるファイルの名前`destinationFileName`です。"
    - id: destinationFileName
      type: System.String
      description: "置き換えられるファイルの名前。"
    - id: destinationBackupFileName
      type: System.String
      description: "バックアップ ファイルの名前。"
    - id: ignoreMetadataErrors
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マージ エラー (属性やアクセス制御リスト (Acl)) など、置き換えられたファイルから置換ファイルを無視するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.File.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "により記述されたパス、 <code> destinationFileName </code>パラメーターは、正しい書式ではありませんでした。       - または - で記述されるパス、 <code> destinationBackupFileName </code>パラメーターは、正しい書式ではありませんでした。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destinationFileName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "無効なドライブが指定されました。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "現在の記述ファイル<xref href=&quot;System.IO.FileInfo&quot;></xref>オブジェクトが見つかりませんでした。       - または - によって記述されるファイル、 <code> destinationBackupFileName </code>パラメーターが見つかりませんでした。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred while opening the file.  \n  \n \\- or -  \n  \n The <code>sourceFileName</code> and <code>destinationFileName</code> parameters specify the same file."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "オペレーティング システムが Windows 98 Second Edition 以前のバージョンと、ファイル システムは NTFS ではありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code> sourceFileName </code>または<code> destinationFileName </code>パラメーターは読み取り専用ファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       または、ソースまたはターゲットのパラメーターは、ファイルではなくディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)
  id: SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)
  parent: System.IO.File
  langs:
  - csharp
  name: SetAccessControl(String,FileSecurity)
  nameWithType: File.SetAccessControl(String,FileSecurity)
  fullName: System.IO.File.SetAccessControl(String,FileSecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "示すアクセス制御リスト (ACL) エントリを適用、 <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref>指定されたファイル オブジェクト。"
  remarks: "SetAccessControl メソッドは、継承されない ACL リストを表すファイルへのアクセス制御リスト (ACL) エントリを適用します。      > [!CAUTION] >、ACL に指定された、`fileSecurity`パラメーターは、ファイルの既存の ACL を置き換えます。 新しいユーザーのアクセス許可を追加するには、使用、<xref:System.IO.File.GetAccessControl%2A>され、既存の ACL を取得して、変更、適用することを SetAccessControl を使用するメソッドが、ファイルをバックアップします</xref:System.IO.File.GetAccessControl%2A>。       ACL には、個人、グループ、または権限がない、指定されたファイルの特定のアクションをユーザーがについて説明します。 詳細については、次を参照してください。[する方法: アクセス制御リスト エントリを追加または](~/add/includes/ajax-current-ext-md.md)です。       SetAccessControl メソッドにのみが引き続き発生する<xref:System.Security.AccessControl.FileSecurity>オブジェクトがオブジェクトの作成後に変更されました</xref:System.Security.AccessControl.FileSecurity>。  場合、<xref:System.Security.AccessControl.FileSecurity>オブジェクトが変更されていない、ファイルに永続化はできません</xref:System.Security.AccessControl.FileSecurity>。  したがって、取得することはありません、 <xref:System.Security.AccessControl.FileSecurity>1 つのファイルからオブジェクトを別のファイルを同じオブジェクトを再適用します</xref:System.Security.AccessControl.FileSecurity>。       ACL の情報を別の 1 つのファイルにコピーする: 1。  使用して、<xref:System.IO.File.GetAccessControl%2A>を取得する方法、<xref:System.Security.AccessControl.FileSecurity>ソース ファイルからのオブジェクト</xref:System.Security.AccessControl.FileSecurity></xref:System.IO.File.GetAccessControl%2A>。      2.  新しい<xref:System.Security.AccessControl.FileSecurity>先のファイル オブジェクト</xref:System.Security.AccessControl.FileSecurity>。      3.  使用して、<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>または<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>メソッドのソースの<xref:System.Security.AccessControl.FileSecurity>ACL 情報を取得するオブジェクト</xref:System.Security.AccessControl.FileSecurity></xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A></xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>。      4.  使用して、<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>または<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>に情報をコピーする方法は、先には、手順 3. で取得<xref:System.Security.AccessControl.FileSecurity>オブジェクト</xref:System.Security.AccessControl.FileSecurity></xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A></xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>。      5.  出力先を設定<xref:System.Security.AccessControl.FileSecurity>SetAccessControl メソッドを使用して変換先ファイルへのオブジェクト</xref:System.Security.AccessControl.FileSecurity>。       環境では NTFS、<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>場合は、ユーザーがあるユーザーに付与されます<xref:System.Security.AccessControl.FileSystemRights>親フォルダーに対する権限</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。 拒否する<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>、拒否<xref:System.Security.AccessControl.FileSystemRights>親ディレクトリにします</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。"
  example:
  - "The following code example uses the <xref:System.IO.File.GetAccessControl%2A> and SetAccessControl methods to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.  \n  \n [!code-cs[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/4f792c56-f52f-4b2d-89e4-_1.cs)]\n [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/4f792c56-f52f-4b2d-89e4-_1.vb)]\n [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/4f792c56-f52f-4b2d-89e4-_1.cpp)]"
  syntax:
    content: public static void SetAccessControl (string path, System.Security.AccessControl.FileSecurity fileSecurity);
    parameters:
    - id: path
      type: System.String
      description: "追加またはからのアクセス制御リスト (ACL) エントリを削除するファイルです。"
    - id: fileSecurity
      type: System.Security.AccessControl.FileSecurity
      description: "A <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref>によって記述されるファイルに適用する ACL エントリを記述するオブジェクト、`path`パラメーター。"
  overload: System.IO.File.SetAccessControl*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.Runtime.InteropServices.SEHException
    commentId: T:System.Runtime.InteropServices.SEHException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "ファイルが見つかりませんでした。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code> path </code>パラメーターは読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -、 <code> path </code>パラメーターは、ディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>fileSecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)
  id: SetAttributes(System.String,System.IO.FileAttributes)
  parent: System.IO.File
  langs:
  - csharp
  name: SetAttributes(String,FileAttributes)
  nameWithType: File.SetAttributes(String,FileAttributes)
  fullName: System.IO.File.SetAttributes(String,FileAttributes)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定した設定<xref href=&quot;System.IO.FileAttributes&quot;></xref>指定されたパス上のファイルのです。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       など、特定のファイル属性、<xref:System.IO.FileAttributes>と<xref:System.IO.FileAttributes>を組み合わせることができます</xref:System.IO.FileAttributes></xref:System.IO.FileAttributes>。 など、他の属性<xref:System.IO.FileAttributes>、単独で使用する必要があります</xref:System.IO.FileAttributes>。       圧縮状態を変更することはできません、<xref:System.IO.File>オブジェクト SetAttributes メソッドを使用しています</xref:System.IO.File>。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates the `GetAttributes` and `SetAttributes` methods by applying the `Archive` and `Hidden` attributes to a file.  \n  \n [!code-cs[File GetAttributes#1](~/add/codesnippet/csharp/m-system.io.file.setattr_1.cs)]\n [!code-cpp[File GetAttributes#1](~/add/codesnippet/cpp/m-system.io.file.setattr_1.cpp)]\n [!code-vb[File GetAttributes#1](~/add/codesnippet/visualbasic/m-system.io.file.setattr_1.vb)]"
  syntax:
    content: public static void SetAttributes (string path, System.IO.FileAttributes fileAttributes);
    parameters:
    - id: path
      type: System.String
      description: "ファイルへのパス。"
    - id: fileAttributes
      type: System.IO.FileAttributes
      description: "列挙値のビットごとの組み合わせ。"
  overload: System.IO.File.SetAttributes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>空、空白文字だけが含まれていますが、無効な文字が含まれていますか、ファイル属性は無効です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが無効、(たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "ファイルが見つかりません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.SetCreationTime(System.String,System.DateTime)
  id: SetCreationTime(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetCreationTime(String,DateTime)
  nameWithType: File.SetCreationTime(String,DateTime)
  fullName: System.IO.File.SetCreationTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイルが作成された日時を設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       NTFS でフォーマットされたドライブは、ファイルのメタ情報、短時間に、ファイルの作成日時などをキャッシュ可能性があります。 その結果、上書きするか、既存のファイルを置き換えている場合、ファイルの作成時刻を明示的に設定する必要があります。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static void SetCreationTime (string path, DateTime creationTime);
    parameters:
    - id: path
      type: System.String
      description: "作成日時情報を設定する対象のファイルです。"
    - id: creationTime
      type: System.DateTime
      description: "A<xref:System.DateTime>の作成日時に設定する値を含む`path`</xref:System.DateTime>。 この値は現地時刻で表示します。"
  overload: System.IO.File.SetCreationTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "操作の実行中に I/O エラーが発生しました。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code>日付、時刻、またはこの操作に許可される両方の範囲外の値を指定します。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)
  id: SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: File.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.File.SetCreationTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "世界協定時刻 (UTC) で、ファイルが作成された日付と時刻を設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       NTFS でフォーマットされたドライブは、ファイルのメタ情報、短時間に、ファイルの作成日時などをキャッシュ可能性があります。 その結果、上書きするか、既存のファイルを置き換えている場合、ファイルの作成時刻を明示的に設定する必要があります。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "作成日時情報を設定する対象のファイルです。"
    - id: creationTimeUtc
      type: System.DateTime
      description: "A<xref:System.DateTime>の作成日時に設定する値を含む`path`</xref:System.DateTime>。 この値は UTC 時刻で表現します。"
  overload: System.IO.File.SetCreationTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "操作の実行中に I/O エラーが発生しました。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code>日付、時刻、またはこの操作に許可される両方の範囲外の値を指定します。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  platform:
  - net462
- uid: System.IO.File.SetLastAccessTime(System.String,System.DateTime)
  id: SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetLastAccessTime(String,DateTime)
  nameWithType: File.SetLastAccessTime(String,DateTime)
  fullName: System.IO.File.SetLastAccessTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルの最終アクセス日時を設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example checks the file system for the specified file, creating it if necessary, and then sets and gets the last access time.  \n  \n [!code-cpp[file setlastaccess#1](~/add/codesnippet/cpp/m-system.io.file.setlast_0_1.cpp)]\n [!code-vb[file setlastaccess#1](~/add/codesnippet/visualbasic/m-system.io.file.setlast_0_1.vb)]\n [!code-cs[file setlastaccess#1](~/add/codesnippet/csharp/m-system.io.file.setlast_0_1.cs)]"
  syntax:
    content: public static void SetLastAccessTime (string path, DateTime lastAccessTime);
    parameters:
    - id: path
      type: System.String
      description: "アクセス日時情報を設定する対象のファイルです。"
    - id: lastAccessTime
      type: System.DateTime
      description: "A<xref:System.DateTime>に前回アクセスした日付と時刻の設定値を含む`path`</xref:System.DateTime>。 この値は現地時刻で表示します。"
  overload: System.IO.File.SetLastAccessTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTime</code>日付またはこの操作に許可される時刻の範囲外の値を指定します。"
  platform:
  - net462
- uid: System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)
  id: SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: File.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.File.SetLastAccessTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "世界協定時刻 (UTC) で指定されたファイルに最後にアクセスするには、日付と時刻を設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "アクセス日時情報を設定する対象のファイルです。"
    - id: lastAccessTimeUtc
      type: System.DateTime
      description: "A<xref:System.DateTime>に前回アクセスした日付と時刻の設定値を含む`path`</xref:System.DateTime>。 この値は UTC 時刻で表現します。"
  overload: System.IO.File.SetLastAccessTimeUtc*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTimeUtc</code>日付またはこの操作に許可される時刻の範囲外の値を指定します。"
  platform:
  - net462
- uid: System.IO.File.SetLastWriteTime(System.String,System.DateTime)
  id: SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetLastWriteTime(String,DateTime)
  nameWithType: File.SetLastWriteTime(String,DateTime)
  fullName: System.IO.File.SetLastWriteTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルに最後に書き込んだ日時に設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example checks the file system for the specified file, creating the file if necessary, and then sets and gets the last write time of the file.  \n  \n [!code-cs[file setlastwrite#1](~/add/codesnippet/csharp/m-system.io.file.setlast_1_1.cs)]\n [!code-vb[file setlastwrite#1](~/add/codesnippet/visualbasic/m-system.io.file.setlast_1_1.vb)]\n [!code-cpp[file setlastwrite#1](~/add/codesnippet/cpp/m-system.io.file.setlast_1_1.cpp)]"
  syntax:
    content: public static void SetLastWriteTime (string path, DateTime lastWriteTime);
    parameters:
    - id: path
      type: System.String
      description: "日付と時刻の情報を設定する対象のファイルです。"
    - id: lastWriteTime
      type: System.DateTime
      description: "A<xref:System.DateTime>に最後に書き込んだ日付と時刻を設定する値を含む`path`</xref:System.DateTime>。 この値は現地時刻で表示します。"
  overload: System.IO.File.SetLastWriteTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTime</code>日付またはこの操作に許可される時刻の範囲外の値を指定します。"
  platform:
  - net462
- uid: System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)
  id: SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  langs:
  - csharp
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: File.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.File.SetLastWriteTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "世界協定時刻 (UTC) で指定されたファイルが最後に書き込んだ日付と時刻を設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "日付と時刻の情報を設定する対象のファイルです。"
    - id: lastWriteTimeUtc
      type: System.DateTime
      description: "A<xref:System.DateTime>に最後に書き込んだ日付と時刻を設定する値を含む`path`</xref:System.DateTime>。 この値は UTC 時刻で表現します。"
  overload: System.IO.File.SetLastWriteTimeUtc*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTimeUtc</code>日付またはこの操作に許可される時刻の範囲外の値を指定します。"
  platform:
  - net462
- uid: System.IO.File.WriteAllBytes(System.String,System.Byte[])
  id: WriteAllBytes(System.String,System.Byte[])
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllBytes(String,Byte[])
  nameWithType: File.WriteAllBytes(String,Byte[])
  fullName: System.IO.File.WriteAllBytes(String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいファイルを作成し、ファイルに指定したバイト配列を書き込みます後、ファイルを閉じます。 ターゲット ファイルが既に存在する場合は上書きされます。"
  remarks: "バイト配列と、ファイルのパスを指定するには、このメソッドは、指定したファイルを開き、バイト配列の内容をファイルに書き込み、ファイルを閉じます。"
  syntax:
    content: public static void WriteAllBytes (string path, byte[] bytes);
    parameters:
    - id: path
      type: System.String
      description: "書き込み先のファイルです。"
    - id: bytes
      type: System.Byte[]
      description: "ファイルに書き込むバイト。"
  overload: System.IO.File.WriteAllBytes*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>またはバイト配列が空です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllLines(String,IEnumerable<String>)
  nameWithType: File.WriteAllLines(String,IEnumerable<String>)
  fullName: System.IO.File.WriteAllLines(String,IEnumerable<String>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいファイルを作成し、文字列のコレクションをファイルに書き込みます後、ファイルを閉じます。"
  remarks: "WriteAllLines メソッドの既定の動作では、バイト順マーク (BOM) なしの utf-8 エンコーディングを使用してデータを書き込みます。 ファイルの先頭のバイト順マークなどの utf-8 識別子を含める必要がある場合を使用して、<xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29>とメソッドのオーバー ロード<xref:System.Text.Encoding.UTF8%2A>エンコードします</xref:System.Text.Encoding.UTF8%2A></xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29>。       ターゲット ファイルが既に存在する場合は上書きされます。       このメソッドを使用するには、内容を受け取るコレクション クラスを作成する、 <xref:System.Collections.Generic.IEnumerable%601>、コンス トラクターなど、 <xref:System.Collections.Generic.List%601.%23ctor%2A>、 <xref:System.Collections.Generic.HashSet%601.%23ctor%2A>、または<xref:System.Collections.Generic.SortedSet%601.%23ctor%2A>クラス</xref:System.Collections.Generic.SortedSet%601.%23ctor%2A></xref:System.Collections.Generic.HashSet%601.%23ctor%2A></xref:System.Collections.Generic.List%601.%23ctor%2A></xref:System.Collections.Generic.IEnumerable%601>"
  example:
  - "The following example writes selected lines from a sample data file to a file.  \n  \n [!code-cs[System.IO.File.WriteAllAppendAll#1](~/add/codesnippet/csharp/f09e9593-445c-47ad-bb1b-_1.cs)]\n [!code-vb[System.IO.File.WriteAllAppendAll#1](~/add/codesnippet/visualbasic/f09e9593-445c-47ad-bb1b-_1.vb)]"
  syntax:
    content: public static void WriteAllLines (string path, System.Collections.Generic.IEnumerable<string> contents);
    parameters:
    - id: path
      type: System.String
      description: "書き込み先のファイルです。"
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "ファイルに書き込む行。"
  overload: System.IO.File.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかによって定義された&1; つまたは複数の無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either<code> path </code>or <code>contents</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>ディレクトリです。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.WriteAllLines(System.String,System.String[])
  id: WriteAllLines(System.String,System.String[])
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllLines(String,String[])
  nameWithType: File.WriteAllLines(String,String[])
  fullName: System.IO.File.WriteAllLines(String,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいファイルを作成、ファイルに指定した文字列配列を書き込み、およびファイルを閉じます。"
  remarks: "If the target file already exists, it is overwritten.  \n  \n The default behavior of the WriteAllLines method is to write out data using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the [WriteAllLines(String, String\\[\\], Encoding)](assetId:///M:System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)?qualifyHint=False&autoUpgrade=False) method overload with <xref:System.Text.Encoding.UTF8%2A> encoding.  \n  \n Given a string array and a file path, this method opens the specified file, writes the string array to the file, and then closes the file."
  example:
  - "The following code example demonstrates the use of the WriteAllLines method to write text to a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllLines#00](~/add/codesnippet/visualbasic/m-system.io.file.writeal_1_1.vb)]\n [!code-cs[System.IO.File.AllLines#00](~/add/codesnippet/csharp/m-system.io.file.writeal_1_1.cs)]"
  syntax:
    content: public static void WriteAllLines (string path, string[] contents);
    parameters:
    - id: path
      type: System.String
      description: "書き込み先のファイルです。"
    - id: contents
      type: System.String[]
      description: "ファイルに書き込む文字列配列。"
  overload: System.IO.File.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either <code>path</code> or <code>contents</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  id: WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllLines(String,IEnumerable<String>,Encoding)
  nameWithType: File.WriteAllLines(String,IEnumerable<String>,Encoding)
  fullName: System.IO.File.WriteAllLines(String,IEnumerable<String>,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたエンコーディングを使用して、新しいファイルを作成、文字列のコレクションをファイルに書き込みますし、そのファイルを閉じます。"
  remarks: "ターゲット ファイルが既に存在する場合は上書きされます。       このメソッドを使用して以下を含むファイルを作成することができます:-の結果、 [LINQ to Objects](~/add/includes/ajax-current-ext-md.md) 、ファイルの行にクエリを実行を使用して取得した、<xref:System.IO.File.ReadLines%2A>メソッド</xref:System.IO.File.ReadLines%2A>。      -を実装するコレクションの内容、<xref:System.Collections.Generic.IEnumerable%601>文字列の</xref:System.Collections.Generic.IEnumerable%601>。"
  syntax:
    content: public static void WriteAllLines (string path, System.Collections.Generic.IEnumerable<string> contents, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "書き込み先のファイルです。"
    - id: contents
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "ファイルに書き込む行。"
    - id: encoding
      type: System.Text.Encoding
      description: "文字を使用するエンコーディングします。"
  overload: System.IO.File.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかによって定義された&1; つまたは複数の無効な文字が含まれています、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either<code> path</code>,<code> contents</code>, or <code>encoding</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>ディレクトリです。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  id: WriteAllLines(System.String,System.String[],System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllLines(String,String[],Encoding)
  nameWithType: File.WriteAllLines(String,String[],Encoding)
  fullName: System.IO.File.WriteAllLines(String,String[],Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいファイルを作成し、指定されたエンコーディングを使用して、指定した文字列配列をファイルに書き込みます後、ファイルを閉じます。"
  remarks: "ターゲット ファイルが既に存在する場合は上書きされます。       文字列配列と、ファイルのパスを指定するには、このメソッドは、指定したファイルを開き、文字列の配列を指定したエンコーディングを使用してファイルに書き込みます、ファイルを閉じます。"
  example:
  - "The following code example demonstrates the use of the WriteAllLines method to write text to a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllLines_Encoding#00](~/add/codesnippet/visualbasic/3d8070ff-3246-4c2d-a728-_1.vb)]\n [!code-cs[System.IO.File.AllLines_Encoding#00](~/add/codesnippet/csharp/3d8070ff-3246-4c2d-a728-_1.cs)]"
  syntax:
    content: public static void WriteAllLines (string path, string[] contents, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "書き込み先のファイルです。"
    - id: contents
      type: System.String[]
      description: "ファイルに書き込む文字列配列。"
    - id: encoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>文字列配列に適用される文字エンコーディングを表すオブジェクト</xref:System.Text.Encoding>。"
  overload: System.IO.File.WriteAllLines*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Either <code>path</code> or <code>contents</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.WriteAllText(System.String,System.String)
  id: WriteAllText(System.String,System.String)
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllText(String,String)
  nameWithType: File.WriteAllText(String,String)
  fullName: System.IO.File.WriteAllText(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいファイルを作成し、ファイルに指定された文字列を書き込みます後、ファイルを閉じます。 ターゲット ファイルが既に存在する場合は上書きされます。"
  remarks: "このメソッドは、utf-8 エンコーディングのバイト順マーク (BOM) なしを使用して、使用して、<xref:System.Text.Encoding.GetPreamble%2A>メソッドは空のバイト配列を返します</xref:System.Text.Encoding.GetPreamble%2A>。 ファイルの先頭のバイト順マークなどの utf-8 識別子を含める必要がある場合を使用して、<xref:System.IO.File.WriteAllText%28System.String%2CSystem.String%2CSystem.Text.Encoding%29>とメソッドのオーバー ロード<xref:System.Text.Encoding.UTF8%2A>エンコードします</xref:System.Text.Encoding.UTF8%2A></xref:System.IO.File.WriteAllText%28System.String%2CSystem.String%2CSystem.Text.Encoding%29>。       文字列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、文字列、ファイルを書き込みます、ファイルを閉じます。"
  example:
  - "The following code example demonstrates the use of the WriteAllText method to write text to a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-vb[System.IO.File.AllText#00](~/add/codesnippet/visualbasic/m-system.io.file.writeal_0_1.vb)]\n [!code-cs[System.IO.File.AllText#00](~/add/codesnippet/csharp/m-system.io.file.writeal_0_1.cs)]"
  syntax:
    content: public static void WriteAllText (string path, string contents);
    parameters:
    - id: path
      type: System.String
      description: "書き込み先のファイルです。"
    - id: contents
      type: System.String
      description: "ファイルに書き込む文字列。"
  overload: System.IO.File.WriteAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or <code>contents</code> is empty."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)
  id: WriteAllText(System.String,System.String,System.Text.Encoding)
  parent: System.IO.File
  langs:
  - csharp
  name: WriteAllText(String,String,Encoding)
  nameWithType: File.WriteAllText(String,String,Encoding)
  fullName: System.IO.File.WriteAllText(String,String,Encoding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "新しいファイルを作成し、指定されたエンコーディングを使用してファイルに指定された文字列を書き込みます後、ファイルを閉じます。 ターゲット ファイルが既に存在する場合は上書きされます。"
  remarks: "文字列とファイルのパスを指定するには、このメソッドは、指定したファイルを開き、文字列を指定したエンコーディングを使用してファイルに書き込みます、ファイルを閉じます。 例外が発生した場合でも、このメソッドにより、終了するファイル ハンドルが保証されます。"
  example:
  - "The following code example demonstrates the use of the WriteAllText method to write text to a file. In this example a file is created, if it doesn't already exist, and text is added to it.  \n  \n [!code-cs[System.IO.File.AllText_Encoding#00](~/add/codesnippet/csharp/m-system.io.file.writeal_2_1.cs)]\n [!code-vb[System.IO.File.AllText_Encoding#00](~/add/codesnippet/visualbasic/m-system.io.file.writeal_2_1.vb)]"
  syntax:
    content: public static void WriteAllText (string path, string contents, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "書き込み先のファイルです。"
    - id: contents
      type: System.String
      description: "ファイルに書き込む文字列。"
    - id: encoding
      type: System.Text.Encoding
      description: "文字列に適用するエンコーディング。"
  overload: System.IO.File.WriteAllText*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列は、空白しか含んでいないかで定義されている&1; つまたは複数の無効な文字が含まれています<xref:System.IO.Path.InvalidPathChars>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or <code>contents</code> is empty."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルを開くときに I/O エラーが発生しました。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>path</code>読み取り専用であるファイルを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       - または -<code>path</code>はディレクトリを指定します。       または、呼び出し元に必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>無効な形式です。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.DriveNotFoundException
  parent: System.IO
  isExternal: false
  name: DriveNotFoundException
  nameWithType: DriveNotFoundException
  fullName: System.IO.DriveNotFoundException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Runtime.InteropServices.SEHException
  isExternal: true
  name: System.Runtime.InteropServices.SEHException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.IO.File
  isExternal: false
  name: AppendAllLines(String,IEnumerable<String>)
  nameWithType: File.AppendAllLines(String,IEnumerable<String>)
  fullName: System.IO.File.AppendAllLines(String,IEnumerable<String>)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: AppendAllLines(String,IEnumerable<String>,Encoding)
  nameWithType: File.AppendAllLines(String,IEnumerable<String>,Encoding)
  fullName: System.IO.File.AppendAllLines(String,IEnumerable<String>,Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.IO.File.AppendAllText(System.String,System.String)
  parent: System.IO.File
  isExternal: false
  name: AppendAllText(String,String)
  nameWithType: File.AppendAllText(String,String)
  fullName: System.IO.File.AppendAllText(String,String)
- uid: System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: AppendAllText(String,String,Encoding)
  nameWithType: File.AppendAllText(String,String,Encoding)
  fullName: System.IO.File.AppendAllText(String,String,Encoding)
- uid: System.IO.File.AppendText(System.String)
  parent: System.IO.File
  isExternal: false
  name: AppendText(String)
  nameWithType: File.AppendText(String)
  fullName: System.IO.File.AppendText(String)
- uid: System.IO.StreamWriter
  parent: System.IO
  isExternal: true
  name: StreamWriter
  nameWithType: StreamWriter
  fullName: System.IO.StreamWriter
- uid: System.IO.File.Copy(System.String,System.String)
  parent: System.IO.File
  isExternal: false
  name: Copy(String,String)
  nameWithType: File.Copy(String,String)
  fullName: System.IO.File.Copy(String,String)
- uid: System.IO.File.Copy(System.String,System.String,System.Boolean)
  parent: System.IO.File
  isExternal: false
  name: Copy(String,String,Boolean)
  nameWithType: File.Copy(String,String,Boolean)
  fullName: System.IO.File.Copy(String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.File.Create(System.String)
  parent: System.IO.File
  isExternal: false
  name: Create(String)
  nameWithType: File.Create(String)
  fullName: System.IO.File.Create(String)
- uid: System.IO.FileStream
  parent: System.IO
  isExternal: false
  name: FileStream
  nameWithType: FileStream
  fullName: System.IO.FileStream
- uid: System.IO.File.Create(System.String,System.Int32)
  parent: System.IO.File
  isExternal: false
  name: Create(String,Int32)
  nameWithType: File.Create(String,Int32)
  fullName: System.IO.File.Create(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)
  parent: System.IO.File
  isExternal: false
  name: Create(String,Int32,FileOptions)
  nameWithType: File.Create(String,Int32,FileOptions)
  fullName: System.IO.File.Create(String,Int32,FileOptions)
- uid: System.IO.FileOptions
  parent: System.IO
  isExternal: false
  name: FileOptions
  nameWithType: FileOptions
  fullName: System.IO.FileOptions
- uid: System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  parent: System.IO.File
  isExternal: false
  name: Create(String,Int32,FileOptions,FileSecurity)
  nameWithType: File.Create(String,Int32,FileOptions,FileSecurity)
  fullName: System.IO.File.Create(String,Int32,FileOptions,FileSecurity)
- uid: System.Security.AccessControl.FileSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: FileSecurity
  nameWithType: FileSecurity
  fullName: System.Security.AccessControl.FileSecurity
- uid: System.IO.File.CreateText(System.String)
  parent: System.IO.File
  isExternal: false
  name: CreateText(String)
  nameWithType: File.CreateText(String)
  fullName: System.IO.File.CreateText(String)
- uid: System.IO.File.Decrypt(System.String)
  parent: System.IO.File
  isExternal: false
  name: Decrypt(String)
  nameWithType: File.Decrypt(String)
  fullName: System.IO.File.Decrypt(String)
- uid: System.IO.File.Delete(System.String)
  parent: System.IO.File
  isExternal: false
  name: Delete(String)
  nameWithType: File.Delete(String)
  fullName: System.IO.File.Delete(String)
- uid: System.IO.File.Encrypt(System.String)
  parent: System.IO.File
  isExternal: false
  name: Encrypt(String)
  nameWithType: File.Encrypt(String)
  fullName: System.IO.File.Encrypt(String)
- uid: System.IO.File.Exists(System.String)
  parent: System.IO.File
  isExternal: false
  name: Exists(String)
  nameWithType: File.Exists(String)
  fullName: System.IO.File.Exists(String)
- uid: System.IO.File.GetAccessControl(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetAccessControl(String)
  nameWithType: File.GetAccessControl(String)
  fullName: System.IO.File.GetAccessControl(String)
- uid: System.IO.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.File
  isExternal: false
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: File.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.File.GetAccessControl(String,AccessControlSections)
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.IO.File.GetAttributes(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetAttributes(String)
  nameWithType: File.GetAttributes(String)
  fullName: System.IO.File.GetAttributes(String)
- uid: System.IO.FileAttributes
  parent: System.IO
  isExternal: false
  name: FileAttributes
  nameWithType: FileAttributes
  fullName: System.IO.FileAttributes
- uid: System.IO.File.GetCreationTime(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetCreationTime(String)
  nameWithType: File.GetCreationTime(String)
  fullName: System.IO.File.GetCreationTime(String)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.File.GetCreationTimeUtc(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetCreationTimeUtc(String)
  nameWithType: File.GetCreationTimeUtc(String)
  fullName: System.IO.File.GetCreationTimeUtc(String)
- uid: System.IO.File.GetLastAccessTime(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetLastAccessTime(String)
  nameWithType: File.GetLastAccessTime(String)
  fullName: System.IO.File.GetLastAccessTime(String)
- uid: System.IO.File.GetLastAccessTimeUtc(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetLastAccessTimeUtc(String)
  nameWithType: File.GetLastAccessTimeUtc(String)
  fullName: System.IO.File.GetLastAccessTimeUtc(String)
- uid: System.IO.File.GetLastWriteTime(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetLastWriteTime(String)
  nameWithType: File.GetLastWriteTime(String)
  fullName: System.IO.File.GetLastWriteTime(String)
- uid: System.IO.File.GetLastWriteTimeUtc(System.String)
  parent: System.IO.File
  isExternal: false
  name: GetLastWriteTimeUtc(String)
  nameWithType: File.GetLastWriteTimeUtc(String)
  fullName: System.IO.File.GetLastWriteTimeUtc(String)
- uid: System.IO.File.Move(System.String,System.String)
  parent: System.IO.File
  isExternal: false
  name: Move(String,String)
  nameWithType: File.Move(String,String)
  fullName: System.IO.File.Move(String,String)
- uid: System.IO.File.Open(System.String,System.IO.FileMode)
  parent: System.IO.File
  isExternal: false
  name: Open(String,FileMode)
  nameWithType: File.Open(String,FileMode)
  fullName: System.IO.File.Open(String,FileMode)
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.File
  isExternal: false
  name: Open(String,FileMode,FileAccess)
  nameWithType: File.Open(String,FileMode,FileAccess)
  fullName: System.IO.File.Open(String,FileMode,FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.File
  isExternal: false
  name: Open(String,FileMode,FileAccess,FileShare)
  nameWithType: File.Open(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.File.Open(String,FileMode,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.File.OpenRead(System.String)
  parent: System.IO.File
  isExternal: false
  name: OpenRead(String)
  nameWithType: File.OpenRead(String)
  fullName: System.IO.File.OpenRead(String)
- uid: System.IO.File.OpenText(System.String)
  parent: System.IO.File
  isExternal: false
  name: OpenText(String)
  nameWithType: File.OpenText(String)
  fullName: System.IO.File.OpenText(String)
- uid: System.IO.StreamReader
  parent: System.IO
  isExternal: true
  name: StreamReader
  nameWithType: StreamReader
  fullName: System.IO.StreamReader
- uid: System.IO.File.OpenWrite(System.String)
  parent: System.IO.File
  isExternal: false
  name: OpenWrite(String)
  nameWithType: File.OpenWrite(String)
  fullName: System.IO.File.OpenWrite(String)
- uid: System.IO.File.ReadAllBytes(System.String)
  parent: System.IO.File
  isExternal: false
  name: ReadAllBytes(String)
  nameWithType: File.ReadAllBytes(String)
  fullName: System.IO.File.ReadAllBytes(String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.File.ReadAllLines(System.String)
  parent: System.IO.File
  isExternal: false
  name: ReadAllLines(String)
  nameWithType: File.ReadAllLines(String)
  fullName: System.IO.File.ReadAllLines(String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.File.ReadAllLines(System.String,System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: ReadAllLines(String,Encoding)
  nameWithType: File.ReadAllLines(String,Encoding)
  fullName: System.IO.File.ReadAllLines(String,Encoding)
- uid: System.IO.File.ReadAllText(System.String)
  parent: System.IO.File
  isExternal: false
  name: ReadAllText(String)
  nameWithType: File.ReadAllText(String)
  fullName: System.IO.File.ReadAllText(String)
- uid: System.IO.File.ReadAllText(System.String,System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: ReadAllText(String,Encoding)
  nameWithType: File.ReadAllText(String,Encoding)
  fullName: System.IO.File.ReadAllText(String,Encoding)
- uid: System.IO.File.ReadLines(System.String)
  parent: System.IO.File
  isExternal: false
  name: ReadLines(String)
  nameWithType: File.ReadLines(String)
  fullName: System.IO.File.ReadLines(String)
- uid: System.IO.File.ReadLines(System.String,System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: ReadLines(String,Encoding)
  nameWithType: File.ReadLines(String,Encoding)
  fullName: System.IO.File.ReadLines(String,Encoding)
- uid: System.IO.File.Replace(System.String,System.String,System.String)
  parent: System.IO.File
  isExternal: false
  name: Replace(String,String,String)
  nameWithType: File.Replace(String,String,String)
  fullName: System.IO.File.Replace(String,String,String)
- uid: System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)
  parent: System.IO.File
  isExternal: false
  name: Replace(String,String,String,Boolean)
  nameWithType: File.Replace(String,String,String,Boolean)
  fullName: System.IO.File.Replace(String,String,String,Boolean)
- uid: System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)
  parent: System.IO.File
  isExternal: false
  name: SetAccessControl(String,FileSecurity)
  nameWithType: File.SetAccessControl(String,FileSecurity)
  fullName: System.IO.File.SetAccessControl(String,FileSecurity)
- uid: System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)
  parent: System.IO.File
  isExternal: false
  name: SetAttributes(String,FileAttributes)
  nameWithType: File.SetAttributes(String,FileAttributes)
  fullName: System.IO.File.SetAttributes(String,FileAttributes)
- uid: System.IO.File.SetCreationTime(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetCreationTime(String,DateTime)
  nameWithType: File.SetCreationTime(String,DateTime)
  fullName: System.IO.File.SetCreationTime(String,DateTime)
- uid: System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: File.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.File.SetCreationTimeUtc(String,DateTime)
- uid: System.IO.File.SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetLastAccessTime(String,DateTime)
  nameWithType: File.SetLastAccessTime(String,DateTime)
  fullName: System.IO.File.SetLastAccessTime(String,DateTime)
- uid: System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: File.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.File.SetLastAccessTimeUtc(String,DateTime)
- uid: System.IO.File.SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetLastWriteTime(String,DateTime)
  nameWithType: File.SetLastWriteTime(String,DateTime)
  fullName: System.IO.File.SetLastWriteTime(String,DateTime)
- uid: System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.File
  isExternal: false
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: File.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.File.SetLastWriteTimeUtc(String,DateTime)
- uid: System.IO.File.WriteAllBytes(System.String,System.Byte[])
  parent: System.IO.File
  isExternal: false
  name: WriteAllBytes(String,Byte[])
  nameWithType: File.WriteAllBytes(String,Byte[])
  fullName: System.IO.File.WriteAllBytes(String,Byte[])
- uid: System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.IO.File
  isExternal: false
  name: WriteAllLines(String,IEnumerable<String>)
  nameWithType: File.WriteAllLines(String,IEnumerable<String>)
  fullName: System.IO.File.WriteAllLines(String,IEnumerable<String>)
- uid: System.IO.File.WriteAllLines(System.String,System.String[])
  parent: System.IO.File
  isExternal: false
  name: WriteAllLines(String,String[])
  nameWithType: File.WriteAllLines(String,String[])
  fullName: System.IO.File.WriteAllLines(String,String[])
- uid: System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: WriteAllLines(String,IEnumerable<String>,Encoding)
  nameWithType: File.WriteAllLines(String,IEnumerable<String>,Encoding)
  fullName: System.IO.File.WriteAllLines(String,IEnumerable<String>,Encoding)
- uid: System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: WriteAllLines(String,String[],Encoding)
  nameWithType: File.WriteAllLines(String,String[],Encoding)
  fullName: System.IO.File.WriteAllLines(String,String[],Encoding)
- uid: System.IO.File.WriteAllText(System.String,System.String)
  parent: System.IO.File
  isExternal: false
  name: WriteAllText(String,String)
  nameWithType: File.WriteAllText(String,String)
  fullName: System.IO.File.WriteAllText(String,String)
- uid: System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)
  parent: System.IO.File
  isExternal: false
  name: WriteAllText(String,String,Encoding)
  nameWithType: File.WriteAllText(String,String,Encoding)
  fullName: System.IO.File.WriteAllText(String,String,Encoding)
- uid: System.IO.File.AppendAllLines*
  parent: System.IO.File
  isExternal: false
  name: AppendAllLines
  nameWithType: File.AppendAllLines
- uid: System.IO.File.AppendAllText*
  parent: System.IO.File
  isExternal: false
  name: AppendAllText
  nameWithType: File.AppendAllText
- uid: System.IO.File.AppendText*
  parent: System.IO.File
  isExternal: false
  name: AppendText
  nameWithType: File.AppendText
- uid: System.IO.File.Copy*
  parent: System.IO.File
  isExternal: false
  name: Copy
  nameWithType: File.Copy
- uid: System.IO.File.Create*
  parent: System.IO.File
  isExternal: false
  name: Create
  nameWithType: File.Create
- uid: System.IO.File.CreateText*
  parent: System.IO.File
  isExternal: false
  name: CreateText
  nameWithType: File.CreateText
- uid: System.IO.File.Decrypt*
  parent: System.IO.File
  isExternal: false
  name: Decrypt
  nameWithType: File.Decrypt
- uid: System.IO.File.Delete*
  parent: System.IO.File
  isExternal: false
  name: Delete
  nameWithType: File.Delete
- uid: System.IO.File.Encrypt*
  parent: System.IO.File
  isExternal: false
  name: Encrypt
  nameWithType: File.Encrypt
- uid: System.IO.File.Exists*
  parent: System.IO.File
  isExternal: false
  name: Exists
  nameWithType: File.Exists
- uid: System.IO.File.GetAccessControl*
  parent: System.IO.File
  isExternal: false
  name: GetAccessControl
  nameWithType: File.GetAccessControl
- uid: System.IO.File.GetAttributes*
  parent: System.IO.File
  isExternal: false
  name: GetAttributes
  nameWithType: File.GetAttributes
- uid: System.IO.File.GetCreationTime*
  parent: System.IO.File
  isExternal: false
  name: GetCreationTime
  nameWithType: File.GetCreationTime
- uid: System.IO.File.GetCreationTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: GetCreationTimeUtc
  nameWithType: File.GetCreationTimeUtc
- uid: System.IO.File.GetLastAccessTime*
  parent: System.IO.File
  isExternal: false
  name: GetLastAccessTime
  nameWithType: File.GetLastAccessTime
- uid: System.IO.File.GetLastAccessTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: GetLastAccessTimeUtc
  nameWithType: File.GetLastAccessTimeUtc
- uid: System.IO.File.GetLastWriteTime*
  parent: System.IO.File
  isExternal: false
  name: GetLastWriteTime
  nameWithType: File.GetLastWriteTime
- uid: System.IO.File.GetLastWriteTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: GetLastWriteTimeUtc
  nameWithType: File.GetLastWriteTimeUtc
- uid: System.IO.File.Move*
  parent: System.IO.File
  isExternal: false
  name: Move
  nameWithType: File.Move
- uid: System.IO.File.Open*
  parent: System.IO.File
  isExternal: false
  name: Open
  nameWithType: File.Open
- uid: System.IO.File.OpenRead*
  parent: System.IO.File
  isExternal: false
  name: OpenRead
  nameWithType: File.OpenRead
- uid: System.IO.File.OpenText*
  parent: System.IO.File
  isExternal: false
  name: OpenText
  nameWithType: File.OpenText
- uid: System.IO.File.OpenWrite*
  parent: System.IO.File
  isExternal: false
  name: OpenWrite
  nameWithType: File.OpenWrite
- uid: System.IO.File.ReadAllBytes*
  parent: System.IO.File
  isExternal: false
  name: ReadAllBytes
  nameWithType: File.ReadAllBytes
- uid: System.IO.File.ReadAllLines*
  parent: System.IO.File
  isExternal: false
  name: ReadAllLines
  nameWithType: File.ReadAllLines
- uid: System.IO.File.ReadAllText*
  parent: System.IO.File
  isExternal: false
  name: ReadAllText
  nameWithType: File.ReadAllText
- uid: System.IO.File.ReadLines*
  parent: System.IO.File
  isExternal: false
  name: ReadLines
  nameWithType: File.ReadLines
- uid: System.IO.File.Replace*
  parent: System.IO.File
  isExternal: false
  name: Replace
  nameWithType: File.Replace
- uid: System.IO.File.SetAccessControl*
  parent: System.IO.File
  isExternal: false
  name: SetAccessControl
  nameWithType: File.SetAccessControl
- uid: System.IO.File.SetAttributes*
  parent: System.IO.File
  isExternal: false
  name: SetAttributes
  nameWithType: File.SetAttributes
- uid: System.IO.File.SetCreationTime*
  parent: System.IO.File
  isExternal: false
  name: SetCreationTime
  nameWithType: File.SetCreationTime
- uid: System.IO.File.SetCreationTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: SetCreationTimeUtc
  nameWithType: File.SetCreationTimeUtc
- uid: System.IO.File.SetLastAccessTime*
  parent: System.IO.File
  isExternal: false
  name: SetLastAccessTime
  nameWithType: File.SetLastAccessTime
- uid: System.IO.File.SetLastAccessTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: SetLastAccessTimeUtc
  nameWithType: File.SetLastAccessTimeUtc
- uid: System.IO.File.SetLastWriteTime*
  parent: System.IO.File
  isExternal: false
  name: SetLastWriteTime
  nameWithType: File.SetLastWriteTime
- uid: System.IO.File.SetLastWriteTimeUtc*
  parent: System.IO.File
  isExternal: false
  name: SetLastWriteTimeUtc
  nameWithType: File.SetLastWriteTimeUtc
- uid: System.IO.File.WriteAllBytes*
  parent: System.IO.File
  isExternal: false
  name: WriteAllBytes
  nameWithType: File.WriteAllBytes
- uid: System.IO.File.WriteAllLines*
  parent: System.IO.File
  isExternal: false
  name: WriteAllLines
  nameWithType: File.WriteAllLines
- uid: System.IO.File.WriteAllText*
  parent: System.IO.File
  isExternal: false
  name: WriteAllText
  nameWithType: File.WriteAllText
