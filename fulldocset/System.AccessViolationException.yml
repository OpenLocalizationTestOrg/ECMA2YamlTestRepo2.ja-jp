### YamlMime:ManagedReference
items:
- uid: System.AccessViolationException
  id: AccessViolationException
  children:
  - System.AccessViolationException.#ctor
  - System.AccessViolationException.#ctor(System.String)
  - System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.AccessViolationException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  name: AccessViolationException
  nameWithType: AccessViolationException
  fullName: System.AccessViolationException
  type: Class
  summary: "保護されたメモリの読み取りまたは書き込みを試みるとスローされる例外。"
  remarks: "An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access. This usually occurs because a pointer has a bad value. Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted. Thus, access violations almost always indicate serious programming errors. An AccessViolationException clearly identifies these serious errors.  \n  \n In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible. Any operation that attempts to reference a null reference in verifiable code throws a <xref:System.NullReferenceException> exception. An AccessViolationException occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.  \n  \n## Troubleshooting AccessViolationException exceptions  \n An AccessViolationException exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:  \n  \n-   An access violation that occurs in unsafe managed code can be expressed as either a <xref:System.NullReferenceException> exception or an AccessViolationException exception, depending on the platform.  \n  \n-   An access violation in unmanaged code that bubbles up to managed code is always wrapped in an AccessViolationException exception.  \n  \n In either case, you can identify and correct the cause of the AccessViolationException exception as follows:  \n  \n Make sure that the memory that you are attempting to access has been allocated.  \n An AccessViolationException exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.  \n  \n Automatic memory management is one of the services that the common language runtime provides. If managed code provides the same functionality as your unmanagede code, you may wish to move to managed code to take advantage of this functionality. For more information, see [Automatic Memory Management](~/add/includes/ajax-current-ext-md.md).  \n  \n Make sure that the memory that you are attempting to access has not been corrupted.  \n If several read or write operations have occurred through bad pointers, memory may be corrupted. This typically occurs when reading or writing to addresses outside of a predefined buffer.  \n  \n## AccessViolationException and try/catch blocks  \n Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], AccessViolationException exceptions thrown by the common language runtime are not handled by the `catch` statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime. To handle such an AccessViolationException exception, you should apply the  <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to the method in which the exception is thrown. This change does not affect AccessViolationException exceptions thrown by user code, which can continue to be caught by a `catch` statement. For code written for previous versions of the .NET Framework that you want to recompile and run without modification on the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you can add the [\\<legacyCorruptedStateExceptionsPolicy>](../Topic/%3ClegacyCorruptedStateExceptionsPolicy%3E%20Element.md) element to your app's configuration file. Note that you can also receive notification of the exceptions if you have defined a handler for the <xref:System.AppDomain.FirstChanceException?displayProperty=fullName> or <xref:System.AppDomain.UnhandledException?displayProperty=fullName> event.  \n  \n## Version Information  \n This exception is thrown in the .NET Framework 2.0 and later versions. In earlier versions of the .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <xref:System.NullReferenceException> in managed code. A <xref:System.NullReferenceException> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.  \n  \n Administrators can allow selected applications to revert to the behavior of the .NET Framework version 1.1. Place the following line in the [\\&lt;runtime\\&gt; Element](../Topic/%3Cruntime%3E%20Element.md) section of the configuration file for the application:  \n  \n```  \n<legacyNullReferenceExceptionPolicy enabled = \"1\"/>  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AccessViolationException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor
  id: '#ctor'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException()
  nameWithType: AccessViolationException.AccessViolationException()
  fullName: System.AccessViolationException.AccessViolationException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.AccessViolationException&quot;> </xref>エラーを説明するシステム提供のメッセージを持つクラス。"
  remarks: "このコンス トラクター、<xref:System.Exception.Message%2A>など、エラーを説明するシステム提供のメッセージの新しいインスタンスのプロパティ&quot;の読み取りまたは書き込み保護されているメモリをしようとしました</xref:System.Exception.Message%2A>。 これは多くの場合、その他のメモリが破損していることを示す値です。&quot; このメッセージでは、現在のシステム カルチャが考慮されます。       次の表は、 <xref:System.AccessViolationException>。</xref:System.AccessViolationException>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|`null`.|  |<xref:System.Exception.Message%2A>|ローカライズされたエラー メッセージ文字列 |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A> 。"
  syntax:
    content: public AccessViolationException ();
    parameters: []
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException(String)
  nameWithType: AccessViolationException.AccessViolationException(String)
  fullName: System.AccessViolationException.AccessViolationException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.AccessViolationException&quot;> </xref>エラーを説明するメッセージが指定されたクラスです。"
  remarks: "次の表は、 <xref:System.AccessViolationException>。</xref:System.AccessViolationException>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|`null`.|  |<xref:System.Exception.Message%2A>|指定されたエラー メッセージ文字列`message`|</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A> 。"
  syntax:
    content: public AccessViolationException (string message);
    parameters:
    - id: message
      type: System.String
      description: "例外を説明するメッセージ。 このコンス トラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認するために必要です。"
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException(SerializationInfo,StreamingContext)
  nameWithType: AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
  fullName: System.AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.AccessViolationException&quot;> </xref>シリアル化されたデータを持つクラス。"
  remarks: "このコンス トラクターは、ストリームで送信された例外オブジェクトを再構成する逆シリアル化中に呼び出されます。 詳細については、次を参照してください。 [XML および SOAP シリアル化](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>シリアル化されたオブジェクト データを保持します。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>ソースまたは転送先に関するコンテキスト情報を含む</xref:System.Runtime.Serialization.StreamingContext>。"
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AccessViolationException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.AccessViolationException
  langs:
  - csharp
  name: AccessViolationException(String,Exception)
  nameWithType: AccessViolationException.AccessViolationException(String,Exception)
  fullName: System.AccessViolationException.AccessViolationException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.AccessViolationException&quot;> </xref>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を持つクラス。"
  remarks: "前の例外への参照を含める必要があります前の例外の直接の結果としてスローされる例外、<xref:System.Exception.InnerException%2A>プロパティ</xref:System.Exception.InnerException%2A>。 <xref:System.Exception.InnerException%2A>プロパティは、コンス トラクターに渡されたものと同じ値を返しますまたは`null`場合、<xref:System.Exception.InnerException%2A>プロパティがコンス トラクターには、内部例外値を指定していません</xref:System.Exception.InnerException%2A></xref:System.Exception.InnerException%2A>。       次の表は、 <xref:System.AccessViolationException>。</xref:System.AccessViolationException>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|`null`.|  |<xref:System.Exception.Message%2A>|指定されたエラー メッセージ文字列`message`|</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A> 。"
  syntax:
    content: public AccessViolationException (string message, Exception innerException);
    parameters:
    - id: message
      type: System.String
      description: "例外を説明するメッセージ。 このコンス トラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認するために必要です。"
    - id: innerException
      type: System.Exception
      description: "現在の例外の原因となった例外。 場合、`innerException`パラメーターではありません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>で現在の例外が発生、 <xref uid=&quot;langword_csharp_catch&quot; name=&quot;catch&quot; href=&quot;&quot;> </xref>ブロックは、内部例外を処理します。"
  overload: System.AccessViolationException.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.AccessViolationException.#ctor
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException()
  nameWithType: AccessViolationException.AccessViolationException()
  fullName: System.AccessViolationException.AccessViolationException()
- uid: System.AccessViolationException.#ctor(System.String)
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException(String)
  nameWithType: AccessViolationException.AccessViolationException(String)
  fullName: System.AccessViolationException.AccessViolationException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException(SerializationInfo,StreamingContext)
  nameWithType: AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
  fullName: System.AccessViolationException.AccessViolationException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.AccessViolationException.#ctor(System.String,System.Exception)
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException(String,Exception)
  nameWithType: AccessViolationException.AccessViolationException(String,Exception)
  fullName: System.AccessViolationException.AccessViolationException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.AccessViolationException.#ctor*
  parent: System.AccessViolationException
  isExternal: false
  name: AccessViolationException
  nameWithType: AccessViolationException.AccessViolationException
