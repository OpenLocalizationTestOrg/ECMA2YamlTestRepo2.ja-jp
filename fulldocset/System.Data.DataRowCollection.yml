### YamlMime:ManagedReference
items:
- uid: System.Data.DataRowCollection
  id: DataRowCollection
  children:
  - System.Data.DataRowCollection.Add(System.Data.DataRow)
  - System.Data.DataRowCollection.Add(System.Object[])
  - System.Data.DataRowCollection.Clear
  - System.Data.DataRowCollection.Contains(System.Object)
  - System.Data.DataRowCollection.Contains(System.Object[])
  - System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  - System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  - System.Data.DataRowCollection.Count
  - System.Data.DataRowCollection.Find(System.Object)
  - System.Data.DataRowCollection.Find(System.Object[])
  - System.Data.DataRowCollection.GetEnumerator
  - System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  - System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  - System.Data.DataRowCollection.Item(System.Int32)
  - System.Data.DataRowCollection.Remove(System.Data.DataRow)
  - System.Data.DataRowCollection.RemoveAt(System.Int32)
  langs:
  - csharp
  name: DataRowCollection
  nameWithType: DataRowCollection
  fullName: System.Data.DataRowCollection
  type: Class
  summary: "行のコレクションを表します、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。"
  remarks: "DataRowCollection <xref:System.Data.DataTable>。</xref:System.Data.DataTable>の主要なコンポーネントであります。 中に、<xref:System.Data.DataColumnCollection>スキーマを定義、DataRowCollection が、テーブルの実際のデータを含むテーブルの各<xref:System.Data.DataRow>、DataRowCollection では、1 つの行を表します</xref:System.Data.DataRow></xref:System.Data.DataColumnCollection>。       呼び出すことができます、<xref:System.Data.DataRowCollection.Add%2A>と<xref:System.Data.DataRowCollection.Remove%2A>を挿入および削除メソッド<xref:System.Data.DataRow>、DataRowCollection からのオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataRowCollection.Remove%2A></xref:System.Data.DataRowCollection.Add%2A>。 呼び出すこともできます、<xref:System.Data.DataRowCollection.Find%2A>を検索する方法<xref:System.Data.DataRow>、主キー列に特定の値を格納するオブジェクト、および<xref:System.Data.DataRowCollection.Contains%2A>文字ベースのデータの&1; つの単語や語句を検索するメソッド</xref:System.Data.DataRowCollection.Contains%2A></xref:System.Data.DataRow></xref:System.Data.DataRowCollection.Find%2A>。       他の操作、並べ替えまたはフィルター処理、DataRowCollection など。 DataRowCollection の関連付けられているに対してメソッドを使用します。"
  example:
  - "The first example in this section prints the value of column 1 for every row in a DataRowCollection. The second example adds a new row created by using the <xref:System.Data.DataTable.NewRow%2A> method to the DataRowCollection.  \n  \n [!code-cs[Classic WebData DataRowCollection Example#1](~/add/codesnippet/csharp/t-system.data.datarowcol_1.cs)]\n [!code-vb[Classic WebData DataRowCollection Example#1](~/add/codesnippet/visualbasic/t-system.data.datarowcol_1.vb)]"
  syntax:
    content: 'public sealed class DataRowCollection : System.Data.InternalDataCollectionBase'
  inheritance:
  - System.Object
  - System.Data.InternalDataCollectionBase
  implements: []
  inheritedMembers:
  - System.Data.InternalDataCollectionBase.IsReadOnly
  - System.Data.InternalDataCollectionBase.IsSynchronized
  - System.Data.InternalDataCollectionBase.List
  - System.Data.InternalDataCollectionBase.SyncRoot
  platform:
  - net462
- uid: System.Data.DataRowCollection.Add(System.Data.DataRow)
  id: Add(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Add(DataRow)
  nameWithType: DataRowCollection.Add(DataRow)
  fullName: System.Data.DataRowCollection.Add(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定した追加<xref href=&quot;System.Data.DataRow&quot;></xref>を<xref href=&quot;System.Data.DataRowCollection&quot;></xref>オブジェクト。"
  remarks: "作成し、新しい<xref:System.Data.DataRow><xref:System.Data.DataTable.NewRow%2A><xref:System.Data.DataTable>クラス</xref:System.Data.DataTable>のメソッド</xref:System.Data.DataTable.NewRow%2A>を使用する必要があります、</xref:System.Data.DataRow> この<xref:System.Data.DataTable.NewRow%2A>メソッドは、<xref:System.Data.DataRow>親<xref:System.Data.DataTable>。</xref:System.Data.DataTable>のスキーマを使用してオブジェクトが返される</xref:System.Data.DataRow>の新しい</xref:System.Data.DataTable.NewRow%2A>を使用する場合 作成した後、<xref:System.Data.DataRow>オブジェクトしその列のそれぞれの値を設定、およびオブジェクトをコレクションに追加する Add メソッドを使用します</xref:System.Data.DataRow>。       ユーザーが内の例外を生成する場合、例外を生成、<xref:System.Data.DataTable.RowChanging>イベント</xref:System.Data.DataTable.RowChanging>。 例外が発生する場合、テーブルに行は追加されません。"
  example:
  - "The following example uses the Add method to add a new <xref:System.Data.DataRow> to a <xref:System.Data.DataRowCollection> object.  \n  \n [!code-cs[Classic WebData DataRowCollection.Add Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_2_1.cs)]\n [!code-vb[Classic WebData DataRowCollection.Add Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_2_1.vb)]"
  syntax:
    content: public void Add (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "The <xref href=&quot;System.Data.DataRow&quot;></xref> to add."
  overload: System.Data.DataRowCollection.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "行は null です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "行は、別のテーブルに属しているか、またはこのテーブルに既に属しています。"
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "追加は、制約を無効にします。"
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "Null 値を配置しようとする、追加、 <xref href=&quot;System.Data.DataColumn&quot;> </xref>場所<xref:System.Data.DataColumn.AllowDBNull*>は false</xref:System.Data.DataColumn.AllowDBNull*> 。"
  platform:
  - net462
- uid: System.Data.DataRowCollection.Add(System.Object[])
  id: Add(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Add(Object[])
  nameWithType: DataRowCollection.Add(Object[])
  fullName: System.Data.DataRowCollection.Add(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定した値を使用して行を作成し、それを追加、 <xref href=&quot;System.Data.DataRowCollection&quot;></xref>です。"
  remarks: "場合、<xref:System.Data.DataColumn>オブジェクトがその<xref:System.Data.DataColumn.AutoIncrement%2A>を True に設定すると、null 渡す必要があるその列の既定値を取得します</xref:System.Data.DataColumn.AutoIncrement%2A></xref:System.Data.DataColumn>。       例外は、いずれかの中に例外を生成する場合にも発生することができます、<xref:System.Data.DataTable.ColumnChanging>または<xref:System.Data.DataTable.RowChanging>イベント</xref:System.Data.DataTable.RowChanging></xref:System.Data.DataTable.ColumnChanging>。 例外が発生する場合、テーブルに行は追加されません。"
  example:
  - "The following example uses the <xref:System.Data.DataRowCollection.Add%2A> method to create and add a new <xref:System.Data.DataRow> object to a <xref:System.Data.DataRowCollection>.  \n  \n [!code-cs[Classic WebData DataRowCollection.Add1 Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_5_1.cs)]\n [!code-vb[Classic WebData DataRowCollection.Add1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_5_1.vb)]"
  syntax:
    content: public System.Data.DataRow Add (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "新しい行の作成に使用される値の配列。"
    return:
      type: System.Data.DataRow
      description: "ありません。"
  overload: System.Data.DataRowCollection.Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "配列は、テーブル内の列の数を超えています。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "値では、各列の型は一致しません。"
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "行を追加するには、制約が無効にします。"
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "列に null 値を格納しようとしていますここで<xref:System.Data.DataColumn.AllowDBNull*>は false。</xref:System.Data.DataColumn.AllowDBNull*> 。"
  platform:
  - net462
- uid: System.Data.DataRowCollection.Clear
  id: Clear
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: DataRowCollection.Clear()
  fullName: System.Data.DataRowCollection.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "すべての行のコレクションをクリアします。"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataRowCollection.Clear*
  exceptions:
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "A <xref href=&quot;System.Data.ForeignKeyConstraint&quot;> </xref>で強制されて、 <xref href=&quot;System.Data.DataRowCollection&quot;></xref>です。"
  platform:
  - net462
- uid: System.Data.DataRowCollection.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: DataRowCollection.Contains(Object)
  fullName: System.Data.DataRowCollection.Contains(Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "コレクション内の任意の行の主キーが指定された値を含むかどうかを示す値を取得します。"
  remarks: "Contains メソッドを使用して、<xref:System.Data.DataTable>オブジェクトを<xref:System.Data.DataRowCollection>オブジェクトが属する必要があります主キー列として指定された少なくとも&1; つの列がある</xref:System.Data.DataRowCollection></xref:System.Data.DataTable>。 参照してください、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティで主キー列を作成する方法の詳細</xref:System.Data.DataTable.PrimaryKey%2A>。       行に指定された値が含まれているを確認したら、すぐとして使用して、 <xref:System.Data.DataRowCollection.Find%2A>、固有の仕様を返すメソッドを<xref:System.Data.DataRow>、値を持つオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataRowCollection.Find%2A>。"
  example:
  - "The following Visual Basic example uses the Contains method to determine whether a <xref:System.Data.DataRowCollection> object contains a specific value.  \n  \n [!code-vb[Classic WebData DataRowCollection.Contains Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_7_1.vb)]"
  syntax:
    content: public bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "テストするための主キーの値。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>コレクションが含まれている場合、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定したプライマリ キーの値です。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataRowCollection.Contains*
  exceptions:
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "テーブルには、主キーがありません。"
  platform:
  - net462
- uid: System.Data.DataRowCollection.Contains(System.Object[])
  id: Contains(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Contains(Object[])
  nameWithType: DataRowCollection.Contains(Object[])
  fullName: System.Data.DataRowCollection.Contains(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "コレクション内の行の主キー列が、オブジェクト配列の指定した値を含めるかどうかを示す値を取得します。"
  remarks: "使用する、 <xref:System.Data.DataRowCollection.Contains%2A>、値の配列をメソッド、<xref:System.Data.DataTable>オブジェクトを<xref:System.Data.DataRowCollection>オブジェクトに属している必要がありますの主キーとして指定された列の配列がある</xref:System.Data.DataRowCollection></xref:System.Data.DataTable></xref:System.Data.DataRowCollection.Contains%2A>。 参照してください、<xref:System.Data.DataTable.PrimaryKey%2A>主キー列の配列を作成する方法についての詳細プロパティです</xref:System.Data.DataTable.PrimaryKey%2A>。 配列要素の数が<xref:System.Data.DataTable>。</xref:System.Data.DataTable>の主キー列の数に対応する必要があります。       行に指定された値が含まれているを確認したら、すぐ使用して、 <xref:System.Data.DataRowCollection.Find%2A>、固有の仕様を返すメソッドを<xref:System.Data.DataRow>、値を持つオブジェクト</xref:System.Data.DataRow></xref:System.Data.DataRowCollection.Find%2A>。"
  example:
  - "The following Visual Basic example uses the <xref:System.Data.DataRowCollection.Contains%2A> method to find a particular row in a <xref:System.Data.DataRowCollection> object. The example creates an array of values, one element for each primary key in the table, and then passes the array to the method to return a `true` or `false`.  \n  \n [!code-vb[Classic WebData DataRowCollection.Contains1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_4_1.vb)]"
  syntax:
    content: public bool Contains (object[] keys);
    parameters:
    - id: keys
      type: System.Object[]
      description: "テストするための主キー値の配列。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Data.DataRowCollection&quot;> </xref>が含まれています、 <xref href=&quot;System.Data.DataRow&quot;> </xref>指定したキー値とそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataRowCollection.Contains*
  exceptions:
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "テーブルには、主キーがありません。"
  platform:
  - net462
- uid: System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: DataRowCollection.CopyTo(Array,Int32)
  fullName: System.Data.DataRowCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "すべてをコピー、 <xref href=&quot;System.Data.DataRow&quot;> </xref>特定のコピー先配列インデックスから始まる、指定した配列にコレクションからオブジェクト。"
  syntax:
    content: public override void CopyTo (Array ar, int index);
    parameters:
    - id: ar
      type: System.Array
      description: "コピーされた要素のコピー先である&1; 次元の配列、 <xref uid=&quot;langword_csharp_DataRowCollection&quot; name=&quot;DataRowCollection&quot; href=&quot;&quot;></xref>です。 配列は、0 から始まるインデックスが必要です。"
    - id: index
      type: System.Int32
      description: "開始するコピー配列の&0; から始まるインデックス。"
  overload: System.Data.DataRowCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  id: CopyTo(System.Data.DataRow[],System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: CopyTo(DataRow[],Int32)
  nameWithType: DataRowCollection.CopyTo(DataRow[],Int32)
  fullName: System.Data.DataRowCollection.CopyTo(DataRow[],Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "すべてをコピー、 <xref href=&quot;System.Data.DataRow&quot;> </xref>特定のコピー先配列インデックスから始まる、指定した配列にコレクションからオブジェクト。"
  syntax:
    content: public void CopyTo (System.Data.DataRow[] array, int index);
    parameters:
    - id: array
      type: System.Data.DataRow[]
      description: "コピーされた要素のコピー先である&1; 次元の配列、 <xref uid=&quot;langword_csharp_DataRowCollection&quot; name=&quot;DataRowCollection&quot; href=&quot;&quot;></xref>です。 配列は、0 から始まるインデックスが必要です。"
    - id: index
      type: System.Int32
      description: "開始するコピー配列の&0; から始まるインデックス。"
  overload: System.Data.DataRowCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.Count
  id: Count
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Count
  nameWithType: DataRowCollection.Count
  fullName: System.Data.DataRowCollection.Count
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "合計数を取得<xref href=&quot;System.Data.DataRow&quot;></xref>このコレクション内のオブジェクト。"
  syntax:
    content: public override int Count { get; }
    return:
      type: System.Int32
      description: "合計数<xref href=&quot;System.Data.DataRow&quot;></xref>このコレクション内のオブジェクト。"
  overload: System.Data.DataRowCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.Find(System.Object)
  id: Find(System.Object)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Find(Object)
  nameWithType: DataRowCollection.Find(Object)
  fullName: System.Data.DataRowCollection.Find(Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "主キーの値で指定される行を取得します。"
  remarks: "使用する、 `Find` 、メソッド、<xref:System.Data.DataTable>オブジェクトを<xref:System.Data.DataRowCollection>オブジェクトに属している必要があります主キー列として指定された少なくとも&1; つの列がある</xref:System.Data.DataRowCollection></xref:System.Data.DataTable>。 参照してください、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティで主キー列を作成する方法の詳細</xref:System.Data.DataTable.PrimaryKey%2A>。"
  example:
  - "The following example uses the Find method to find the primary key value \"2\" in a collection of <xref:System.Data.DataRow> objects. The method returns the specific <xref:System.Data.DataRow> object letting you change its values, as needed.  \n  \n [!code-vb[Classic WebData DataRowCollection.Find Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_0_1.vb)]\n [!code-cs[Classic WebData DataRowCollection.Find Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_0_1.cs)]"
  syntax:
    content: public System.Data.DataRow Find (object key);
    parameters:
    - id: key
      type: System.Object
      description: "主キーの値、 <xref href=&quot;System.Data.DataRow&quot;> </xref>を検索します。"
    return:
      type: System.Data.DataRow
      description: "A <xref href=&quot;System.Data.DataRow&quot;> </xref>指定された主キーの値を格納している以外の場合は、null 値では主キーの値が存在しない場合のそれ以外の場合、 <xref href=&quot;System.Data.DataRowCollection&quot;></xref>です。"
  overload: System.Data.DataRowCollection.Find*
  exceptions:
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "テーブルには、主キーがありません。"
  platform:
  - net462
- uid: System.Data.DataRowCollection.Find(System.Object[])
  id: Find(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Find(Object[])
  nameWithType: DataRowCollection.Find(Object[])
  fullName: System.Data.DataRowCollection.Find(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定された主キーの値が含まれる行を取得します。"
  remarks: "使用する、 <xref:System.Data.DataRowCollection.Find%2A>、メソッド、<xref:System.Data.DataTable>オブジェクトを<xref:System.Data.DataRowCollection>オブジェクトに属している必要があります主キー列として指定された少なくとも&1; つの列がある</xref:System.Data.DataRowCollection></xref:System.Data.DataTable></xref:System.Data.DataRowCollection.Find%2A>。 2 つ以上の行には、同じ主キーの値がある、最初に見つかった行が返されます。 これが発生したときに<xref:System.Data.DataSet.EnforceConstraints%2A>が false に設定します</xref:System.Data.DataSet.EnforceConstraints%2A>。 参照してください、<xref:System.Data.DataTable.PrimaryKey%2A>を作成する方法に関する詳細については、プロパティ、<xref:System.Data.DataTable.PrimaryKey%2A>列、または配列の<xref:System.Data.DataColumn>オブジェクトをテーブルに&1; つ以上の主キーがある場合</xref:System.Data.DataColumn></xref:System.Data.DataTable.PrimaryKey%2A></xref:System.Data.DataTable.PrimaryKey%2A>。"
  example:
  - "The following example uses the values of an array to find a specific row in a collection of <xref:System.Data.DataRow> objects. The method assumes that a <xref:System.Data.DataTable> exists with three primary key columns. After creating an array of the values, the code uses the <xref:System.Data.DataRowCollection.Find%2A> method with the array to get the particular object that you want.  \n  \n [!code-cs[Classic WebData DataRowCollection.Find1 Example#1](~/add/codesnippet/csharp/m-system.data.datarowcol_6_1.cs)]\n [!code-vb[Classic WebData DataRowCollection.Find1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_6_1.vb)]"
  syntax:
    content: public System.Data.DataRow Find (object[] keys);
    parameters:
    - id: keys
      type: System.Object[]
      description: "検索する主キー値の配列。 配列の型は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Data.DataRow
      description: "A <xref href=&quot;System.Data.DataRow&quot;> </xref>主キーの値を格納しているオブジェクトの指定以外の場合は、null 値では主キーの値が存在しない場合のそれ以外の場合、 <xref href=&quot;System.Data.DataRowCollection&quot;></xref>です。"
  overload: System.Data.DataRowCollection.Find*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "インデックス値に対応する行がありません。"
  - type: System.Data.MissingPrimaryKeyException
    commentId: T:System.Data.MissingPrimaryKeyException
    description: "テーブルには、主キーがありません。"
  platform:
  - net462
- uid: System.Data.DataRowCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: DataRowCollection.GetEnumerator()
  fullName: System.Data.DataRowCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得、<xref:System.Collections.IEnumerator>このコレクションの</xref:System.Collections.IEnumerator>。"
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>このコレクションの</xref:System.Collections.IEnumerator>。"
  overload: System.Data.DataRowCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  id: IndexOf(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: IndexOf(DataRow)
  nameWithType: DataRowCollection.IndexOf(DataRow)
  fullName: System.Data.DataRowCollection.IndexOf(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定したインデックスを取得<xref href=&quot;System.Data.DataRow&quot;></xref>オブジェクト。"
  syntax:
    content: public int IndexOf (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "<xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref>を検索します。"
    return:
      type: System.Int32
      description: "行、またはコレクション内の行が見つからない場合は-1 の&0; から始まるインデックス。"
  overload: System.Data.DataRowCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  id: InsertAt(System.Data.DataRow,System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: InsertAt(DataRow,Int32)
  nameWithType: DataRowCollection.InsertAt(DataRow,Int32)
  fullName: System.Data.DataRowCollection.InsertAt(DataRow,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "コレクションの指定した位置に新しい行を挿入します。"
  remarks: "内の行の順序によって InsertAt で指定された場所が反映される、<xref:System.Data.DataRowCollection>のみ</xref:System.Data.DataRowCollection>。 複数の行が返される場合、 <xref:System.Data.DataRow>、配列、挿入された行可能性がありますで返されません InsertAt で指定された場所。</xref:System.Data.DataRow> 。 たとえば、<xref:System.Data.DataTable.Rows%2A>プロパティが指定された挿入位置の行を返します</xref:System.Data.DataTable.Rows%2A>。 <xref:System.Data.DataTable.Select%2A>および<xref:System.Data.DataRow.GetChildRows%2A>ことはできません</xref:System.Data.DataRow.GetChildRows%2A>。</xref:System.Data.DataTable.Select%2A> <xref:System.Data.DataRowCollection>XML、 <xref:System.Data.DataSet.WriteXml%2A> <xref:System.Data.DataRowCollection>。</xref:System.Data.DataRowCollection>で指定された順序に従って、行が書き込まれる</xref:System.Data.DataSet.WriteXml%2A>たとえば、として</xref:System.Data.DataRowCollection>の内容を記述する場合       値が指定されている場合、`pos`パラメーターは、コレクション内の行の数より大きい値は、新しい行が末尾に追加します。"
  syntax:
    content: public void InsertAt (System.Data.DataRow row, int pos);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "The <xref href=&quot;System.Data.DataRow&quot;></xref> to add."
    - id: pos
      type: System.Int32
      description: "追加する、コレクション内の (0 から始まる) の場所、 <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.DataRowCollection.InsertAt*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: DataRowCollection.Item(Int32)
  fullName: System.Data.DataRowCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定したインデックス位置の行を取得します。"
  remarks: "使用して、<xref:System.Data.DataRowCollection.Contains%2A>のキー列の行の特定の値が存在するかどうかを調べます</xref:System.Data.DataRowCollection.Contains%2A>。"
  example:
  - "The following example prints the value of column 1 of each row in a <xref:System.Data.DataRowCollection>.  \n  \n [!code-vb[Classic WebData DataRowCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.data.datarowcol_1.vb)]\n [!code-cs[Classic WebData DataRowCollection.this Example#1](~/add/codesnippet/csharp/p-system.data.datarowcol_1.cs)]"
  syntax:
    content: public System.Data.DataRow this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "返される行の&0; から始まるインデックス。"
    return:
      type: System.Data.DataRow
      description: "指定した<xref href=&quot;System.Data.DataRow&quot;></xref>です。"
  overload: System.Data.DataRowCollection.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "インデックス値は、コレクション内の項目の数を超えています。"
  platform:
  - net462
- uid: System.Data.DataRowCollection.Remove(System.Data.DataRow)
  id: Remove(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Remove(DataRow)
  nameWithType: DataRowCollection.Remove(DataRow)
  fullName: System.Data.DataRowCollection.Remove(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定された削除<xref href=&quot;System.Data.DataRow&quot;></xref>コレクションからです。"
  remarks: "行を削除すると、その行のすべてのデータが失われます。 呼び出すことも、<xref:System.Data.DataRow.Delete%2A>のメソッド、<xref:System.Data.DataRow>だけにクラスで、行の削除とマークします</xref:System.Data.DataRow></xref:System.Data.DataRow.Delete%2A>。 呼び出す`Remove` <xref:System.Data.DataRow.Delete%2A> <xref:System.Data.DataRow.AcceptChanges%2A>.</xref:System.Data.DataRow.AcceptChanges%2A>を呼び出すと</xref:System.Data.DataRow.Delete%2A>呼び出し元と同じです       反復処理するときに、削除、foreach ループでの呼び出すことはできません、<xref:System.Data.DataRowCollection>オブジェクト</xref:System.Data.DataRowCollection>。 削除では、コレクションの状態を変更します。       使用することも、<xref:System.Data.DataRowCollection.Clear%2A>コレクションを一度に&1; つのすべてのメンバーを削除する方法</xref:System.Data.DataRowCollection.Clear%2A>。"
  example:
  - "The following example uses the Remove method to delete a found row in a <xref:System.Data.DataRowCollection> object. The example first uses the <xref:System.Data.DataRowCollection.Contains%2A> method to determine whether the rows collection contains a row. If it does, the <xref:System.Data.DataRowCollection.Find%2A> method is used to find the specific row, and the Remove method is then used to remove the row.  \n  \n [!code-vb[Classic WebData DataRowCollection.Remove Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_1_1.vb)]"
  syntax:
    content: public void Remove (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "<xref href=&quot;System.Data.DataRow&quot;> </xref>を削除します。"
  overload: System.Data.DataRowCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRowCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: DataRowCollection.RemoveAt(Int32)
  fullName: System.Data.DataRowCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "コレクションから指定したインデックス位置の行を削除します。"
  remarks: "行を削除すると、その行のすべてのデータが失われます。 呼び出すことも、<xref:System.Data.DataRow.Delete%2A>のメソッド、<xref:System.Data.DataRow>だけにクラスで、行の削除とマークします</xref:System.Data.DataRow></xref:System.Data.DataRow.Delete%2A>。 呼び出す`RemoveAt` <xref:System.Data.DataRow.Delete%2A> <xref:System.Data.DataRow.AcceptChanges%2A>.</xref:System.Data.DataRow.AcceptChanges%2A>を呼び出すと</xref:System.Data.DataRow.Delete%2A>呼び出し元と同じです       使用することができます、<xref:System.Data.DataRowCollection.Clear%2A>コレクションを一度に&1; つのすべてのメンバーを削除する方法</xref:System.Data.DataRowCollection.Clear%2A>。"
  example:
  - "The following example removes the last row in a <xref:System.Data.DataRowCollection> by calling the RemoveAt method.  \n  \n [!code-vb[Classic WebData DataRowCollection.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.data.datarowcol_3_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "削除する行のインデックス。"
  overload: System.Data.DataRowCollection.RemoveAt*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.InternalDataCollectionBase
  isExternal: false
  name: System.Data.InternalDataCollectionBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.Data.NoNullAllowedException
  parent: System.Data
  isExternal: false
  name: NoNullAllowedException
  nameWithType: NoNullAllowedException
  fullName: System.Data.NoNullAllowedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.InvalidConstraintException
  parent: System.Data
  isExternal: false
  name: InvalidConstraintException
  nameWithType: InvalidConstraintException
  fullName: System.Data.InvalidConstraintException
- uid: System.Data.MissingPrimaryKeyException
  parent: System.Data
  isExternal: false
  name: MissingPrimaryKeyException
  nameWithType: MissingPrimaryKeyException
  fullName: System.Data.MissingPrimaryKeyException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.DataRowCollection.Add(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add(DataRow)
  nameWithType: DataRowCollection.Add(DataRow)
  fullName: System.Data.DataRowCollection.Add(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataRowCollection.Add(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add(Object[])
  nameWithType: DataRowCollection.Add(Object[])
  fullName: System.Data.DataRowCollection.Add(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRowCollection.Clear
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Clear()
  nameWithType: DataRowCollection.Clear()
  fullName: System.Data.DataRowCollection.Clear()
- uid: System.Data.DataRowCollection.Contains(System.Object)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains(Object)
  nameWithType: DataRowCollection.Contains(Object)
  fullName: System.Data.DataRowCollection.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataRowCollection.Contains(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains(Object[])
  nameWithType: DataRowCollection.Contains(Object[])
  fullName: System.Data.DataRowCollection.Contains(Object[])
- uid: System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: DataRowCollection.CopyTo(Array,Int32)
  fullName: System.Data.DataRowCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo(DataRow[],Int32)
  nameWithType: DataRowCollection.CopyTo(DataRow[],Int32)
  fullName: System.Data.DataRowCollection.CopyTo(DataRow[],Int32)
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRowCollection.Count
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Count
  nameWithType: DataRowCollection.Count
  fullName: System.Data.DataRowCollection.Count
- uid: System.Data.DataRowCollection.Find(System.Object)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find(Object)
  nameWithType: DataRowCollection.Find(Object)
  fullName: System.Data.DataRowCollection.Find(Object)
- uid: System.Data.DataRowCollection.Find(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find(Object[])
  nameWithType: DataRowCollection.Find(Object[])
  fullName: System.Data.DataRowCollection.Find(Object[])
- uid: System.Data.DataRowCollection.GetEnumerator
  parent: System.Data.DataRowCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: DataRowCollection.GetEnumerator()
  fullName: System.Data.DataRowCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: IndexOf(DataRow)
  nameWithType: DataRowCollection.IndexOf(DataRow)
  fullName: System.Data.DataRowCollection.IndexOf(DataRow)
- uid: System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: InsertAt(DataRow,Int32)
  nameWithType: DataRowCollection.InsertAt(DataRow,Int32)
  fullName: System.Data.DataRowCollection.InsertAt(DataRow,Int32)
- uid: System.Data.DataRowCollection.Item(System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: DataRowCollection.Item(Int32)
  fullName: System.Data.DataRowCollection.Item(Int32)
- uid: System.Data.DataRowCollection.Remove(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Remove(DataRow)
  nameWithType: DataRowCollection.Remove(DataRow)
  fullName: System.Data.DataRowCollection.Remove(DataRow)
- uid: System.Data.DataRowCollection.RemoveAt(System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: DataRowCollection.RemoveAt(Int32)
  fullName: System.Data.DataRowCollection.RemoveAt(Int32)
- uid: System.Data.DataRowCollection.Add*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add
  nameWithType: DataRowCollection.Add
- uid: System.Data.DataRowCollection.Clear*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Clear
  nameWithType: DataRowCollection.Clear
- uid: System.Data.DataRowCollection.Contains*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains
  nameWithType: DataRowCollection.Contains
- uid: System.Data.DataRowCollection.CopyTo*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo
  nameWithType: DataRowCollection.CopyTo
- uid: System.Data.DataRowCollection.Count*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Count
  nameWithType: DataRowCollection.Count
- uid: System.Data.DataRowCollection.Find*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find
  nameWithType: DataRowCollection.Find
- uid: System.Data.DataRowCollection.GetEnumerator*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: DataRowCollection.GetEnumerator
- uid: System.Data.DataRowCollection.IndexOf*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: IndexOf
  nameWithType: DataRowCollection.IndexOf
- uid: System.Data.DataRowCollection.InsertAt*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: InsertAt
  nameWithType: DataRowCollection.InsertAt
- uid: System.Data.DataRowCollection.Item*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Item
  nameWithType: DataRowCollection.Item
- uid: System.Data.DataRowCollection.Remove*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Remove
  nameWithType: DataRowCollection.Remove
- uid: System.Data.DataRowCollection.RemoveAt*
  parent: System.Data.DataRowCollection
  isExternal: false
  name: RemoveAt
  nameWithType: DataRowCollection.RemoveAt
