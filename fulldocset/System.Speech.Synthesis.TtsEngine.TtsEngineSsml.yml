### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  id: TtsEngineSsml
  children:
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  - System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  langs:
  - csharp
  name: TtsEngineSsml
  nameWithType: TtsEngineSsml
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  type: Class
  summary: "すべてのテキストを音声合成エンジンによって実装される抽象基本クラスです。"
  remarks: "カスタム テキスト読み上げエンジンを構築するために、アプリケーションは常に TtsEngineSsml の抽象基本クラスから派生するクラスを実装する必要があります。       TtsEngineSsml の登録を適切な実装として使用できます、`Synthesizer``Voice`によって<xref:System.Speech.Synthesis>ベースのアプリケーションの名前空間</xref:System.Speech.Synthesis>。       オブジェクトを次のメンバーをオーバーライド TtsEngineSsml から継承する必要があります<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>および<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>。</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A> 。       実装される TtsEngineSsml クラスの最も重要なメンバーは、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>メソッド</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>。       <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>メソッドは受信インフラストラクチャ テキスト パーサーによって呼び出されます 1。</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> 。  参照、<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>もキューやオーディオ出力の書き込みなどのシステム サービスへのアクセスを提供するインターフェイス</xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>。      2.  配列<xref:System.Speech.Synthesis.TtsEngine.TextFragment>音声合成マークアップ言語 (SSML) 入力からのインスタンス生成します</xref:System.Speech.Synthesis.TtsEngine.TextFragment>。 音声として表示するテキスト、だけでなく SSML の解析での音声の要求された属性に関する情報を格納、<xref:System.Speech.Synthesis.TtsEngine.FragmentState>各受信に関連付けられたインスタンス<xref:System.Speech.Synthesis.TtsEngine.TextFragment>オブジェクト</xref:System.Speech.Synthesis.TtsEngine.TextFragment></xref:System.Speech.Synthesis.TtsEngine.FragmentState>。       音声シンセサイザー アプリケーションで、実装することでの指定した出力形式の要求を行うことが必要に応じてできます<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>正しいオーディオ出力を提供するときに、プラットフォームによって呼び出される</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A>。       実装者ものサポートを提供<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>および<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>。</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A></xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>の実装によって発音、またはの辞書の外部の定義を管理します。"
  syntax:
    content: public abstract class TtsEngineSsml
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: TtsEngineSsml(String)
  nameWithType: TtsEngineSsml.TtsEngineSsml(String)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.TtsEngineSsml(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "新しいインスタンスを構築<xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;></xref>適切な音声トークン レジストリ キーに基づいています。"
  remarks: "Calls to this constructor are typically generated by <xref:System.Speech.Synthesis> based applications selecting a `Synthesizer``Voice` to be used by an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer>.  \n  \n A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> must be register under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens."
  syntax:
    content: protected TtsEngineSsml (string registryKey);
    parameters:
    - id: registryKey
      type: System.String
      description: "完全な名前のレジストリ キーの音声トークンに関連付けられたの<xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;></xref>実装します。 エンジン。"
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  id: AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: AddLexicon(Uri,String,ITtsEngineSite)
  nameWithType: TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "辞書を追加、 <xref uid=&quot;langword_csharp_Synthesizer&quot; name=&quot;Synthesizer&quot; href=&quot;&quot;> </xref> <xref uid=&quot;langword_csharp_Voice&quot; name=&quot;Voice&quot; href=&quot;&quot;> </xref>現在によって実装される<xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;></xref>インスタンス。"
  remarks: "発音辞書は、単語または語句とその発音の適切な発音アルファベットを使用して指定のコレクションです。       このメソッドと通常呼ばれるプラットフォーム インフラストラクチャに応答して、<xref:System.Speech.Synthesis>ベースのアプリケーション AddLexicon を呼び出すを使用して、`Synthesizer``Voice`現在によって実装される<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>インスタンス</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml></xref:System.Speech.Synthesis>。       値`mediaType`は、通常、MIME 仕様 SSML の仕様で MIME のメディアの仕様の使用として。"
  example:
  - "The implementation of AddLexicon uses the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interface passed in to load a lexicon from a resource. It then stores a `System.IO.Stream` to the lexicon in a `System.Collections.Generic.Dictionary` instance, indexed by the lexicon URI.  \n  \n```  \npublic static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  \n  \n public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  \n    Stream stream = site.LoadResource(uri, mediaType);  \n    _aLexicons.Add(uri, stream);  \n}  \n  \n public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  \n     Stream stream;  \n     if (_aLexicons.TryGetValue(uri, out stream)) {  \n         stream.Close();  \n         _aLexicons.Remove(uri);  \n     }  \n}  \n  \n```"
  syntax:
    content: public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);
    parameters:
    - id: uri
      type: System.Uri
      description: "有効なインスタンス<xref uid=&quot;langword_csharp_System.Uri&quot; name=&quot;System.Uri&quot; href=&quot;&quot;></xref>辞書情報の場所を示すです。"
    - id: mediaType
      type: System.String
      description: "辞書のメディアの種類を含む文字列。 メディアの種類は大文字小文字を区別します。"
    - id: site
      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
      description: "参照、 <xref href=&quot;System.Speech.Synthesis.TtsEngine.ITtsEngineSite&quot;> </xref>プラットフォームのインフラストラクチャと対話するためのインターフェイスです。"
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  id: GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: GetOutputFormat(SpeakOutputFormat,IntPtr)
  nameWithType: TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "最も一致する特定の出力形式のサポートについては、シンセサイザー エンジンへの要求に指定された synthesize エンジン応答でサポートされているオーディオ出力を返します。"
  remarks: "として使用される構造`targetWaveFormat`によって返されるとメソッドと互換性のある、 `WAVEFORMATEX` SAPI で使用可能な戻り値を使用して割り当てる必要があると`CoTaskMemAlloc`です。       `struct`に相当する機能を提供する必要があります。```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```"
  example:
  - "The sample implementation below validates selected inputs, using them if they are within tolerances, otherwise using default values.  \n  \n```  \npublic IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  \n    WaveFormat waveFormat = new WaveFormat();  \n    WaveFormat rq=new WaveFormat();  \n    Marshal.PtrToStructure(targetWaveFormat,rq);  \n  \n    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  \n    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  \n    waveFormat.BlockAlign = 2;  \n    waveFormat.Channels = 1;  \n    waveFormat.FormatTag = 1;  \n    waveFormat.SamplesPerSec = 16000;  \n    waveFormat.Size = 0;  \n  \n    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  \n    Marshal.StructureToPtr(waveFormat, wfx, false);  \n  \n    //Console.WriteLine (\"GetOutputFormat called\");  \n    return wfx;  \n}  \ninternal struct WaveFormat {  \n    public Int16 FormatTag;  \n    public Int16 Channels;  \n    public int SamplesPerSec;  \n    public int AvgBytesPerSec;  \n    public Int16 BlockAlign;  \n    public Int16 BitsPerSample;  \n    public Int16 Size;  \n}  \n```"
  syntax:
    content: public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);
    parameters:
    - id: speakOutputFormat
      type: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat
      description: "有効なメンバー、 <xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeakOutputFormat&quot;> </xref>要求されたオーディオ出力形式の種類を示す列挙値。"
    - id: targetWaveFormat
      type: System.IntPtr
      description: "ポインター、 <xref uid=&quot;langword_csharp_struct&quot; name=&quot;struct&quot; href=&quot;&quot;> </xref>によって要求されたオーディオ形式の種類の詳細設定を含む、`speakOutputFormat`引数。"
    return:
      type: System.IntPtr
      description: "有効なを返します<xref uid=&quot;langword_csharp_IntPtr&quot; name=&quot;IntPtr&quot; href=&quot;&quot;></xref>インスタンスを参照する、 <xref uid=&quot;langword_csharp_struct&quot; name=&quot;struct&quot; href=&quot;&quot;> </xref>出力形式に関する詳細な情報を格納します。"
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  id: RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: RemoveLexicon(Uri,ITtsEngineSite)
  nameWithType: TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "によって現在読み込まれている辞書の削除、 <xref uid=&quot;langword_csharp_Synthesizer&quot; name=&quot;Synthesizer&quot; href=&quot;&quot;> </xref> <xref uid=&quot;langword_csharp_Voice&quot; name=&quot;Voice&quot; href=&quot;&quot;> </xref>現在によって実装される<xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEngineSsml&quot;></xref>インスタンス。"
  remarks: "発音辞書は、単語または語句とその発音の適切な発音アルファベットを使用して指定のコレクションです。       このメソッドは通常への応答と呼ばれる、<xref:System.Speech.Synthesis>ベースのアプリケーションを呼び出す<xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A>を使用して、`Synthesizer``Voice`現在によって実装される<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>インスタンス</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml></xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A></xref:System.Speech.Synthesis>。"
  example:
  - "The implementation of RemoveLexicon uses the lexicon URI to query an instance `System.Collections.Generic.Dictionary` for the `System.IO.Stream`, closes the stream and removes the uri referring to the lexicon.  \n  \n```  \npublic static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  \n  \n public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  \n    Stream stream = site.LoadResource(uri, mediaType);  \n    _aLexicons.Add(uri, stream);  \n}  \n  \n public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  \n     Stream stream;  \n     if (_aLexicons.TryGetValue(uri, out stream)) {  \n         stream.Close();  \n         _aLexicons.Remove(uri);  \n     }  \n}  \n```"
  syntax:
    content: public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);
    parameters:
    - id: uri
      type: System.Uri
      description: "有効なインスタンス<xref uid=&quot;langword_csharp_System.Uri&quot; name=&quot;System.Uri&quot; href=&quot;&quot;></xref>辞書情報の場所を示すです。"
    - id: site
      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
      description: "参照、 <xref href=&quot;System.Speech.Synthesis.TtsEngine.ITtsEngineSite&quot;> </xref>インフラストラクチャ リソースへのアクセスを許可するプラットフォームのインフラストラクチャによって渡されるインターフェイスです。"
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  id: Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  langs:
  - csharp
  name: Speak(TextFragment[],IntPtr,ITtsEngineSite)
  nameWithType: TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "指定されたレンダリング<xref href=&quot;System.Speech.Synthesis.TtsEngine.TextFragment&quot;></xref>指定した出力形式の配列。"
  remarks: "として使用される構造`waveHeader`によって返されるとメソッドと互換性のある、 `WAVEFORMATEX` SAPI で使用できます。       `struct`に相当する機能を提供する必要があります。```   internal struct WaveFormat   {       public Int16 FormatTag;       public Int16 Channels;       public int SamplesPerSec;       public int AvgBytesPerSec;       public Int16 BlockAlign;       public Int16 BitsPerSample;       public Int16 Size;   }   ```"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \n  \n The implementation of Speak  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n    _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);
    parameters:
    - id: fragment
      type: System.Speech.Synthesis.TtsEngine.TextFragment[]
      description: "配列<xref href=&quot;System.Speech.Synthesis.TtsEngine.TextFragment&quot;></xref>音声に表示するテキストを含むインスタンス。"
    - id: waveHeader
      type: System.IntPtr
      description: "<xref uid=&quot;langword_csharp_IntPtr&quot; name=&quot;IntPtr&quot; href=&quot;&quot;> </xref>オーディオ出力形式を含む構造体をポイントします。"
    - id: site
      type: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
      description: "参照、 <xref href=&quot;System.Speech.Synthesis.TtsEngine.ITtsEngineSite&quot;> </xref>インフラストラクチャ リソースへのアクセスを許可するプラットフォームのインフラストラクチャによって渡されるインターフェイスです。"
  overload: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: TtsEngineSsml(String)
  nameWithType: TtsEngineSsml.TtsEngineSsml(String)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.TtsEngineSsml(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: AddLexicon(Uri,String,ITtsEngineSite)
  nameWithType: TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(Uri,String,ITtsEngineSite)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: ITtsEngineSite
  nameWithType: ITtsEngineSite
  fullName: System.Speech.Synthesis.TtsEngine.ITtsEngineSite
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: GetOutputFormat(SpeakOutputFormat,IntPtr)
  nameWithType: TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(SpeakOutputFormat,IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: SpeakOutputFormat
  nameWithType: SpeakOutputFormat
  fullName: System.Speech.Synthesis.TtsEngine.SpeakOutputFormat
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: RemoveLexicon(Uri,ITtsEngineSite)
  nameWithType: TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(Uri,ITtsEngineSite)
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: Speak(TextFragment[],IntPtr,ITtsEngineSite)
  nameWithType: TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
  fullName: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(TextFragment[],IntPtr,ITtsEngineSite)
- uid: System.Speech.Synthesis.TtsEngine.TextFragment[]
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: TextFragment
  nameWithType: TextFragment
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment[]
  spec.csharp:
  - uid: System.Speech.Synthesis.TtsEngine.TextFragment
    name: TextFragment
    nameWithType: TextFragment
    fullName: TextFragment[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: TtsEngineSsml
  nameWithType: TtsEngineSsml.TtsEngineSsml
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: AddLexicon
  nameWithType: TtsEngineSsml.AddLexicon
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: GetOutputFormat
  nameWithType: TtsEngineSsml.GetOutputFormat
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: RemoveLexicon
  nameWithType: TtsEngineSsml.RemoveLexicon
- uid: System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak*
  parent: System.Speech.Synthesis.TtsEngine.TtsEngineSsml
  isExternal: false
  name: Speak
  nameWithType: TtsEngineSsml.Speak
