### YamlMime:ManagedReference
items:
- uid: System.Transactions.IEnlistmentNotification
  id: IEnlistmentNotification
  children:
  - System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)
  - System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)
  - System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)
  - System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)
  langs:
  - csharp
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
  type: Interface
  summary: "リソース マネージャーが参加の登録時にトランザクション マネージャーに対して&2; フェーズ コミットの通知コールバックを提供するために実装する必要がありますインターフェイスについて説明します。"
  remarks: "リソース マネージャーをトランザクションに参加するためには、トランザクション マネージャーを通じてトランザクションに参加にする必要があります。 <xref:System.Transactions.Transaction>クラスを定義する一連のメソッドの名前が始まる`Enlist`この機能を提供します</xref:System.Transactions.Transaction>。 さまざまな`Enlist`メソッドは、さまざまな種類のリソース マネージャーが持つされた参加リストに対応します。       このクラスでは、リソース マネージャーが参加の登録時にトランザクション マネージャーに対して&2; フェーズ コミットの通知コールバックを提供するために実装する必要がありますインターフェイスについて説明します。 IEnlistmentNotification インターフェイスの各リソース マネージャーの実装を使用して登録する必要があります、<xref:System.Transactions.Transaction.EnlistVolatile%2A>メソッドまたは<xref:System.Transactions.Transaction.EnlistDurable%2A>のメソッド、<xref:System.Transactions.Transaction>クラス、リソースは、揮発性または持続性のあるかどうかによって異なります</xref:System.Transactions.Transaction></xref:System.Transactions.Transaction.EnlistDurable%2A></xref:System.Transactions.Transaction.EnlistVolatile%2A>。 参加し、2 pc の詳細については、次を参照してください。[リソースをトランザクションの参加者として参加](~/add/includes/ajax-current-ext-md.md)と[単一フェーズと複数のフェーズでトランザクションをコミットする](~/add/includes/ajax-current-ext-md.md)それぞれします。       トランザクション マネージャーは、次の方法で、2 フェーズ コミット プロトコルのさまざまな段階に参加しているオブジェクトを通知します。      |メソッド |説明 |  |------------|-----------------|  |<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|参加しているオブジェクトのこのメソッドがコールバックとして使用、トランザクション マネージャーによって、トランザクションの最初のフェーズ中に、トランザクション マネージャーは、トランザクションをコミットできるかどうかの参加者を問い合わせるときにします |。  |<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|参加しているオブジェクトのこのメソッドがコールバックとして使用、トランザクション マネージャーによってトランザクションの&2; 番目のフェーズ中に、トランザクションがコミットされた場合です |。  |<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|参加しているオブジェクトのこのメソッドがコールバックとして使用、トランザクション マネージャーによってトランザクションの&2; 番目のフェーズ中に (つまり、ロールバックされます)、トランザクションが中止された場合です |。  |<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|参加しているオブジェクトのこのメソッドがコールバックとして使用、トランザクション マネージャーによってトランザクションの&2; 番目のフェーズ中に、トランザクションが不明の場合です |。     > [!NOTE] > 順番、または特定の順序では通知を送信されない可能性がありますに注意してください</xref:System.Transactions.IEnlistmentNotification.InDoubt%2A></xref:System.Transactions.IEnlistmentNotification.Rollback%2A></xref:System.Transactions.IEnlistmentNotification.Commit%2A></xref:System.Transactions.IEnlistmentNotification.Prepare%2A>。"
  example:
  - "The following example shows an implementation of this interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.  \n  \n [!code-cs[Tx_Enlist#1](~/add/codesnippet/csharp/t-system.transactions.ie_1.cs)]\n [!code-vb[Tx_Enlist#1](~/add/codesnippet/visualbasic/t-system.transactions.ie_1.vb)]"
  syntax:
    content: public interface IEnlistmentNotification
  implements: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)
  id: Commit(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: Commit(Enlistment)
  nameWithType: IEnlistmentNotification.Commit(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Commit(Enlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "参加していることを通知オブジェクトのトランザクションがコミットされていること。"
  remarks: "トランザクション マネージャーでは、トランザクションをコミットするすべての参加者を指示するときに、中、コミットの&2; 番目のフェーズに参加しているオブジェクトのこのメソッドを呼び出します。       リソース マネージャーがトランザクションを終了し、TM を呼び出すことによって完了したことを通知するために必要な作業を実行する必要があります、<xref:System.Transactions.Enlistment.Done%2A>メソッドを`enlistment`パラメーター</xref:System.Transactions.Enlistment.Done%2A> 。       リソース マネージャーが永続的に、参加しているが、呼び出すことによって応答しないかどうかは<xref:System.Transactions.Enlistment.Done%2A>メソッド、トランザクション マネージャーは、リソース マネージャーが、コミットの呼び出しを受信したことを確認します</xref:System.Transactions.Enlistment.Done%2A>。 そのため、トランザクション マネージャーでは、応答を待機中は保持し、このトランザクションに関連する情報を保持します。  場合<xref:System.Transactions.Enlistment.Done%2A>は決して呼び出されると、この特定の情報はの周囲は無期限に保持メモリやシステム全体のリソースにします</xref:System.Transactions.Enlistment.Done%2A>。 これは、結果、リソースの再利用することはできません。 分散トランザクションの場合このでした MSDTC プロセスが中断される MSDTC のログをいっぱいになってしまいます。 によって管理されるトランザクションの場合<xref:System.Transactions>、この結果、リソース マネージャーのプロセスのメモリの消費量が段階的なと継続的な増加します</xref:System.Transactions>。 したがって、非常に重要に呼び出すことは、<xref:System.Transactions.Enlistment.Done%2A>メソッドで、リソース マネージャーが完了したら、作業を準備します</xref:System.Transactions.Enlistment.Done%2A>。"
  syntax:
    content: public void Commit (System.Transactions.Enlistment enlistment);
    parameters:
    - id: enlistment
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref>トランザクション マネージャーへの応答を送信するために使用します。"
  overload: System.Transactions.IEnlistmentNotification.Commit*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)
  id: InDoubt(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: InDoubt(Enlistment)
  nameWithType: IEnlistmentNotification.InDoubt(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.InDoubt(Enlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションの状態は不明に参加しているオブジェクトに通知します。"
  remarks: "トランザクション マネージャーが&1; つの持続性のあるリソースを&1; つのフェーズのコミット操作を呼び出すし、持続性のあるリソースへの接続がトランザクションの結果を取得する前に失われたときに、変動の多いリソースこのメソッドが呼び出されます。 その時点では、トランザクションの結果に安全に特定できません。       イン ダウト トランザクションの最終的な状態と見なされます、として呼び出す必要はありません<xref:System.Transactions.IEnlistmentNotification.Commit%2A>または<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>イン ダウトを呼び出した後</xref:System.Transactions.IEnlistmentNotification.Rollback%2A></xref:System.Transactions.IEnlistmentNotification.Commit%2A>。      > [!NOTE] > 揮発性リソースに対して、このメソッドの実装は、影響を受けるデータに対するを認識するどのような復旧または包含操作を実行する必要があります。  呼び出す必要があります、<xref:System.Transactions.Enlistment.Done%2A>メソッドを上、`enlistment`パラメーターの処理が完了します</xref:System.Transactions.Enlistment.Done%2A>。       リソース マネージャーが永続的に、参加しているが、呼び出すことによって応答しないかどうかは<xref:System.Transactions.Enlistment.Done%2A>メソッド、トランザクション マネージャーは、リソース マネージャーが、イン ダウト呼び出しを受信したことを確認します</xref:System.Transactions.Enlistment.Done%2A>。 そのため、トランザクション マネージャーでは、応答を待機中は保持し、このトランザクションに関連する情報を保持します。  場合<xref:System.Transactions.Enlistment.Done%2A>は決して呼び出されると、この特定の情報はの周囲は無期限に保持メモリやシステム全体のリソースにします</xref:System.Transactions.Enlistment.Done%2A>。 これは、結果、リソースの再利用することはできません。 分散トランザクションの場合このでした MSDTC プロセスが中断される MSDTC のログをいっぱいになってしまいます。 によって管理されるトランザクションの場合<xref:System.Transactions>、この結果、リソース マネージャーのプロセスのメモリの消費量が段階的なと継続的な増加します</xref:System.Transactions>。 したがって、非常に重要に呼び出すことは、<xref:System.Transactions.Enlistment.Done%2A>メソッドで、リソース マネージャーが完了したら、作業を準備します</xref:System.Transactions.Enlistment.Done%2A>。"
  syntax:
    content: public void InDoubt (System.Transactions.Enlistment enlistment);
    parameters:
    - id: enlistment
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref>トランザクション マネージャーへの応答を送信するために使用します。"
  overload: System.Transactions.IEnlistmentNotification.InDoubt*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)
  id: Prepare(System.Transactions.PreparingEnlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: Prepare(PreparingEnlistment)
  nameWithType: IEnlistmentNotification.Prepare(PreparingEnlistment)
  fullName: System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "参加しているトランザクションがコミットの準備しているオブジェクトに通知します。"
  remarks: "トランザクション マネージャーこのメソッドを呼び出します参加しているリソースのマネージャー、コミットのフェーズ 1 の間、トランザクションをコミットできるかどうかの参加者に問い合わせる際します。       ログインする必要があります、持続性のあるリソース マネージャーを実装しているときに、このフェーズ中にレコードを準備します。 レコードは、回復を実行するために必要なすべての情報を含める必要があります。 これが含まれています、<xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A>プロパティは、トランザクション マネージャーに渡される、<xref:System.Transactions.TransactionManager.Reenlist%2A>復旧中にメソッド</xref:System.Transactions.TransactionManager.Reenlist%2A></xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A>。 回復の詳細については、次を参照してください。[を実行する回復](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)です。       リソース マネージャーは、呼び出す前に完了する必要のあるすべての作業を完了する必要があります、<xref:System.Transactions.PreparingEnlistment.Prepared%2A>のメソッド、`preparingEnlistment`コミットメントにその投票を表すためのパラメーターです</xref:System.Transactions.PreparingEnlistment.Prepared%2A>。 コミット、ロールバック、または状態が不明で、このようなフェーズ 2 通知を受信する前にこれを行うことを確認する必要があります。 これは、フェーズ 2 の通知を呼び出した同じスレッドでのインラインを実行できないため、<xref:System.Transactions.PreparingEnlistment.Prepared%2A>フェーズ 1 のメソッド</xref:System.Transactions.PreparingEnlistment.Prepared%2A>。 後のすべての作業を実行するよう、必要があります、<xref:System.Transactions.PreparingEnlistment.Prepared%2A>フェーズ 2 の通知を受信する前に完了しているが期待する呼び出し (たとえば、ロックの解除) します</xref:System.Transactions.PreparingEnlistment.Prepared%2A>。       メソッドを呼び出すこともできます、`preparingEnlistment`ロールバックの投票を表すためのパラメーターです。       場合は、オブジェクトだけを確認し、トランザクションの進行状況に対応するために呼び出す必要がありますが、このメソッドの実装に参加することがなく、<xref:System.Transactions.Enlistment.Done%2A>のメソッド、`preparingEnlistment`パラメーターの処理が完了します</xref:System.Transactions.Enlistment.Done%2A>。 これにより、リソース マネージャーではフェーズ 2 の通知は表示されません。"
  syntax:
    content: public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);
    parameters:
    - id: preparingEnlistment
      type: System.Transactions.PreparingEnlistment
      description: "A <xref href=&quot;System.Transactions.PreparingEnlistment&quot;> </xref>トランザクション マネージャーへの応答を送信するために使用します。"
  overload: System.Transactions.IEnlistmentNotification.Prepare*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)
  id: Rollback(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  langs:
  - csharp
  name: Rollback(Enlistment)
  nameWithType: IEnlistmentNotification.Rollback(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Rollback(Enlistment)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "参加しているオブジェクトに、トランザクションのロールバック通知 (中断)。"
  remarks: "トランザクション マネージャーは、トランザクションはロールバック対象の機能を利用できない&1; つまたは複数のトランザクション参加要素のトランザクションをコミットするためには、(中断) ときに、参加しているオブジェクトのこのメソッドを呼び出します。       リソース マネージャーがトランザクションを終了し、TM を呼び出すことによって完了したことを通知するために必要な作業を実行する必要があります、<xref:System.Transactions.Enlistment.Done%2A>メソッドを`enlistment`パラメーター</xref:System.Transactions.Enlistment.Done%2A> 。       リソース マネージャーが永続的に、参加しているが、呼び出すことによって応答しないかどうかは<xref:System.Transactions.Enlistment.Done%2A>メソッド、トランザクション マネージャーは、リソース マネージャーが、ロールバックの呼び出しを受信したことを確認します</xref:System.Transactions.Enlistment.Done%2A>。 そのため、トランザクション マネージャーでは、応答を待機中は保持し、このトランザクションに関連する情報を保持します。  場合<xref:System.Transactions.Enlistment.Done%2A>は決して呼び出されると、この特定の情報はの周囲は無期限に保持メモリやシステム全体のリソースにします</xref:System.Transactions.Enlistment.Done%2A>。 これは、結果、リソースの再利用することはできません。 分散トランザクションの場合このでした MSDTC プロセスが中断される MSDTC のログをいっぱいになってしまいます。 によって管理されるトランザクションの場合<xref:System.Transactions>、この結果、リソース マネージャーのプロセスのメモリの消費量が段階的なと継続的な増加します</xref:System.Transactions>。 したがって、非常に重要に呼び出すことは、<xref:System.Transactions.Enlistment.Done%2A>メソッドで、リソース マネージャーが完了したら、作業を準備します</xref:System.Transactions.Enlistment.Done%2A>。"
  syntax:
    content: public void Rollback (System.Transactions.Enlistment enlistment);
    parameters:
    - id: enlistment
      type: System.Transactions.Enlistment
      description: "A <xref href=&quot;System.Transactions.Enlistment&quot;> </xref>トランザクション マネージャーへの応答を送信するために使用します。"
  overload: System.Transactions.IEnlistmentNotification.Rollback*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Commit(Enlistment)
  nameWithType: IEnlistmentNotification.Commit(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Commit(Enlistment)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: InDoubt(Enlistment)
  nameWithType: IEnlistmentNotification.InDoubt(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.InDoubt(Enlistment)
- uid: System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Prepare(PreparingEnlistment)
  nameWithType: IEnlistmentNotification.Prepare(PreparingEnlistment)
  fullName: System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment)
- uid: System.Transactions.PreparingEnlistment
  parent: System.Transactions
  isExternal: false
  name: PreparingEnlistment
  nameWithType: PreparingEnlistment
  fullName: System.Transactions.PreparingEnlistment
- uid: System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Rollback(Enlistment)
  nameWithType: IEnlistmentNotification.Rollback(Enlistment)
  fullName: System.Transactions.IEnlistmentNotification.Rollback(Enlistment)
- uid: System.Transactions.IEnlistmentNotification.Commit*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Commit
  nameWithType: IEnlistmentNotification.Commit
- uid: System.Transactions.IEnlistmentNotification.InDoubt*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: InDoubt
  nameWithType: IEnlistmentNotification.InDoubt
- uid: System.Transactions.IEnlistmentNotification.Prepare*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Prepare
  nameWithType: IEnlistmentNotification.Prepare
- uid: System.Transactions.IEnlistmentNotification.Rollback*
  parent: System.Transactions.IEnlistmentNotification
  isExternal: false
  name: Rollback
  nameWithType: IEnlistmentNotification.Rollback
