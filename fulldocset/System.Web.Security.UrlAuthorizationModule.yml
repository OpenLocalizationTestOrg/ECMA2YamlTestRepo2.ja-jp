### YamlMime:ManagedReference
items:
- uid: System.Web.Security.UrlAuthorizationModule
  id: UrlAuthorizationModule
  children:
  - System.Web.Security.UrlAuthorizationModule.#ctor
  - System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  - System.Web.Security.UrlAuthorizationModule.Dispose
  - System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  langs:
  - csharp
  name: UrlAuthorizationModule
  nameWithType: UrlAuthorizationModule
  fullName: System.Web.Security.UrlAuthorizationModule
  type: Class
  summary: "ユーザーが要求された URL にアクセスする権限を持っていることを確認します。 このクラスは継承できません。"
  remarks: "UrlAuthorizationModule では、現在のユーザーがユーザーに基づく、要求された URL にアクセスを許可されているかどうかを判断<xref:System.Security.Principal.IIdentity.Name%2A>またはのメンバーであるユーザー ロールの一覧</xref:System.Security.Principal.IIdentity.Name%2A>。 ユーザー名を決定する方法については、次を参照してください。 [ASP.NET 認証](~/add/includes/ajax-current-ext-md.md)です。 ユーザー ロールを管理する方法については、次を参照してください。[承認を使用してロールの管理](~/add/includes/ajax-current-ext-md.md)です。       ユーザーまたはロールの承認は、構成要素を使用して管理されます。 許可するか、ユーザーまたはロールを使用して、拒否、`allow`または`deny`サブ要素では、それぞれします。 `allow`と`deny`サブ要素は、構成の順序で解釈されます。 要素で指定のアクセスが許可または拒否される後、UrlAuthorizationModule は、承認チェックを完了します。 たとえば、Web.config ファイルから次のセクションでは (拒否することによって匿名ユーザー)、ログオンする必要があり、管理者ロールにアクセスするユーザーにのみを許可します。 管理者ロールに属していないユーザーが拒否されました。      ```   <authorization>     <deny users=&quot;?&quot; />     <allow roles=&quot;Administrators&quot; />     <deny users=&quot;*&quot; />   </authorization>   ```ユーザーまたはロールは、URL にユーザーまたはロールのアクセスを拒否するのには具体的に拒否する必要があります。 つまり、前の例が指定されていない場合、`<deny users=&quot;*&quot; />`し、要素を認証されたすべてのユーザーが許可されているのメンバーがどのような役割に関係なく、要求された URL にアクセスします。"
  example:
  - "The following code example grants access to Kim and members of the Admins role, while denying it to John and all anonymous users.  \n  \n```  \n<authorization>  \n  <allow users=\"Kim\"/>  \n  <allow roles=\"Admins\"/>  \n  <deny users=\"John\"/>  \n  <deny users=\"?\"/>  \n</authorization>  \n```"
  syntax:
    content: 'public sealed class UrlAuthorizationModule : System.Web.IHttpModule'
  inheritance:
  - System.Object
  implements:
  - System.Web.IHttpModule
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.#ctor
  id: '#ctor'
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: UrlAuthorizationModule()
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule()
  fullName: System.Web.Security.UrlAuthorizationModule.UrlAuthorizationModule()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "インスタンスを作成、 <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターは、アプリケーション コードから呼び出されるものではありません。       ASP.NET は、<xref:System.Web.Security.UrlAuthorizationModule>クラス</xref:System.Web.Security.UrlAuthorizationModule>のインスタンスを作成するこのコンス トラクターを呼び出します コンス トラクターを呼び出す、<xref:System.Web.Security.UrlAuthorizationModule.Init%2A>新しい初期化するメソッドを<xref:System.Web.Security.UrlAuthorizationModule>オブジェクト</xref:System.Web.Security.UrlAuthorizationModule></xref:System.Web.Security.UrlAuthorizationModule.Init%2A>。"
  syntax:
    content: public UrlAuthorizationModule ();
    parameters: []
  overload: System.Web.Security.UrlAuthorizationModule.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  id: CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: CheckUrlAccessForPrincipal(String,IPrincipal,String)
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  fullName: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "ユーザーが要求されたファイルへのアクセスを持つかどうかを判断します。"
  remarks: "CheckUrlAccessForPrincipal メソッドは、現在のユーザーがアプリケーションの Web.config ファイルで要求されたファイルへのアクセスを付与するかどうかを確認します。       かどうか、要求に使用される HTTP 動詞は`GET`、 `POST`、または`HEAD`、CheckUrlAccessForPrincipal メソッドは、ファイルへの読み取りアクセスを確認します。 その他の動詞を使用する場合、CheckUrlAccessForPrincipal ファイルへの読み取り/書き込みアクセスを確認します。       詳細については、Web.config ファイルの例を参照してください、<xref:System.Web.Security.UrlAuthorizationModule>クラスのドキュメント</xref:System.Web.Security.UrlAuthorizationModule>。"
  syntax:
    content: public static bool CheckUrlAccessForPrincipal (string virtualPath, System.Security.Principal.IPrincipal user, string verb);
    parameters:
    - id: virtualPath
      type: System.String
      description: "ファイルへの仮想パス。"
    - id: user
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>、現在のユーザーを表すオブジェクト</xref:System.Security.Principal.IPrincipal>。"
    - id: verb
      type: System.String
      description: "HTTP 動詞の要求を行うために使用します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>現在のユーザーがファイルにアクセスできる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>virtualPath</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>user</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>verb</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>virtualPath</code>アプリケーション ルートのパスがありません。"
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.Dispose
  id: Dispose
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: Dispose()
  nameWithType: UrlAuthorizationModule.Dispose()
  fullName: System.Web.Security.UrlAuthorizationModule.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "によって使用されるメモリ以外のすべてのリソースを解放、 <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;></xref>です。"
  remarks: "このメソッドは、アプリケーション コードから呼び出されるものではありません。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Web.Security.UrlAuthorizationModule.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  id: Init(System.Web.HttpApplication)
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: Init(HttpApplication)
  nameWithType: UrlAuthorizationModule.Init(HttpApplication)
  fullName: System.Web.Security.UrlAuthorizationModule.Init(HttpApplication)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "初期化、 <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;> </xref>オブジェクト。"
  remarks: "このメソッドは、アプリケーション コードから呼び出されるものではありません。       Init メソッドにより、<xref:System.Web.Security.UrlAuthorizationModule>の処理に含まれる、<xref:System.Web.HttpApplication.AuthorizeRequest>イベント</xref:System.Web.HttpApplication.AuthorizeRequest></xref:System.Web.Security.UrlAuthorizationModule>。"
  syntax:
    content: public void Init (System.Web.HttpApplication app);
    parameters:
    - id: app
      type: System.Web.HttpApplication
      description: "現在<xref href=&quot;System.Web.HttpApplication&quot;></xref>インスタンス。"
  overload: System.Web.Security.UrlAuthorizationModule.Init*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Security.UrlAuthorizationModule.#ctor
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: UrlAuthorizationModule()
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule()
  fullName: System.Web.Security.UrlAuthorizationModule.UrlAuthorizationModule()
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: CheckUrlAccessForPrincipal(String,IPrincipal,String)
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  fullName: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.Security.UrlAuthorizationModule.Dispose
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Dispose()
  nameWithType: UrlAuthorizationModule.Dispose()
  fullName: System.Web.Security.UrlAuthorizationModule.Dispose()
- uid: System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Init(HttpApplication)
  nameWithType: UrlAuthorizationModule.Init(HttpApplication)
  fullName: System.Web.Security.UrlAuthorizationModule.Init(HttpApplication)
- uid: System.Web.HttpApplication
  parent: System.Web
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
- uid: System.Web.Security.UrlAuthorizationModule.#ctor*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: UrlAuthorizationModule
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: CheckUrlAccessForPrincipal
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal
- uid: System.Web.Security.UrlAuthorizationModule.Dispose*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Dispose
  nameWithType: UrlAuthorizationModule.Dispose
- uid: System.Web.Security.UrlAuthorizationModule.Init*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Init
  nameWithType: UrlAuthorizationModule.Init
