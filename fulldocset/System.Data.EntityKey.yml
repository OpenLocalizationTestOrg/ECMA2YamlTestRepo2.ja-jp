### YamlMime:ManagedReference
items:
- uid: System.Data.EntityKey
  id: EntityKey
  children:
  - System.Data.EntityKey.#ctor
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  - System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  - System.Data.EntityKey.EntityContainerName
  - System.Data.EntityKey.EntityKeyValues
  - System.Data.EntityKey.EntityNotValidKey
  - System.Data.EntityKey.EntitySetName
  - System.Data.EntityKey.Equals(System.Data.EntityKey)
  - System.Data.EntityKey.Equals(System.Object)
  - System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  - System.Data.EntityKey.GetHashCode
  - System.Data.EntityKey.IsTemporary
  - System.Data.EntityKey.NoEntitySetKey
  - System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  - System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  langs:
  - csharp
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
  type: Class
  summary: "エンティティ型のインスタンスであるオブジェクトへの永続的な参照を提供します。"
  remarks: "EntityKey オブジェクトは変更できません。つまり、構築後それらを変更できません。       詳細については、次を参照してください。[エンティティ キーの使用](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)です。"
  example:
  - "These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The examples show you how to create and use an EntityKey.  \n  \n [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#entitykeyclass_trygetobjectbykey)]\n [!code-cs[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#entitykeyclass_trygetobjectbykey)]  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{ConcatKeyValue()}")]

      [System.Runtime.Serialization.DataContract(IsReference=true)]

      public sealed class EntityKey : IEquatable<System.Data.EntityKey>
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Data.EntityKey>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor
  id: '#ctor'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.EntityKey&quot;> </xref>クラスです。"
  syntax:
    content: public EntityKey ();
    parameters: []
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.EntityKey&quot;> </xref>エンティティ セット名およびジェネリック型を持つクラス<xref:System.Collections.Generic.KeyValuePair>コレクションです</xref:System.Collections.Generic.KeyValuePair>。"
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A<xref:System.String>エンティティ コンテナー名で修飾されたエンティティ セットの名前です</xref:System.String>。"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
      description: "汎用的な<xref:System.Collections.Generic.KeyValuePair>コレクションです</xref:System.Collections.Generic.KeyValuePair>。       キー/値の各ペアは、キーと値としてそのプロパティの値としてプロパティ名を持ちます。 1 組の各プロパティの一部である必要があります、 <xref href=&quot;System.Data.EntityKey&quot;></xref>です。 キー/値ペアの順序は重要ではありませんが、各キー プロパティを含める必要があります。 プロパティ名は、エンティティ型の名前またはスキーマ名で修飾されていない単純な名前です。"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.EntityKey&quot;> </xref>エンティティ セット名を持つクラスと&lt;xref:System.Collections.Generic.IEnumerable%601&gt;のコレクション<xref href=&quot;System.Data.EntityKeyMember&quot;></xref>オブジェクト。"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A<xref:System.String>エンティティ コンテナー名で修飾されたエンティティ セットの名前です</xref:System.String>。"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
      description: "&lt;Xref:System.Collections.Generic.IEnumerable%601&gt;のコレクション<xref href=&quot;System.Data.EntityKeyMember&quot;></xref>キーの初期化に使用するオブジェクト。"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  id: '#ctor(System.String,System.String,System.Object)'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.EntityKey&quot;> </xref>エンティティ セット名および特定のエンティティ キーのペアを持つクラス。"
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A<xref:System.String>エンティティ コンテナー名で修飾されたエンティティ セットの名前です</xref:System.String>。"
    - id: keyName
      type: System.String
      description: "A<xref:System.String>のキーの名前</xref:System.String>。"
    - id: keyValue
      type: System.Object
      description: "<xref:System.Object>キー値である</xref:System.Object>。"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityContainerName
  id: EntityContainerName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "取得またはエンティティ コンテナーの名前を設定します。"
  syntax:
    content: public string EntityContainerName { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>するエンティティのエンティティ コンテナーの名前を指定する値、 <xref href=&quot;System.Data.EntityKey&quot;> </xref>が属している</xref:System.String>。"
  overload: System.Data.EntityKey.EntityContainerName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityKeyValues
  id: EntityKeyValues
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "これに関連付けられているキーの値の設定を取得または<xref href=&quot;System.Data.EntityKey&quot;></xref>です。"
  remarks: "<xref:System.Data.EntityKey>クラスには、この種類のエンティティが指定されている論理キーを構成する値のコピーが含まれています</xref:System.Data.EntityKey>。       メンバー、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>プロパティの名前と値がある各、<xref:System.Collections.Generic.KeyValuePair%602>キーは、プロパティ名、値がそのオブジェクトのプロパティの実際の値</xref:System.Collections.Generic.KeyValuePair%602></xref:System.Collections.ObjectModel.ReadOnlyCollection%601>。"
  syntax:
    content: public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }
    return:
      type: System.Data.EntityKeyMember[]
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;キーの値の<xref href=&quot;System.Data.EntityKey&quot;></xref>です。"
  overload: System.Data.EntityKey.EntityKeyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityNotValidKey
  id: EntityNotValidKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "単純な<xref href=&quot;System.Data.EntityKey&quot;></xref>失敗した原因となったエンティティを識別する[扱う](~/add/includes/ajax-current-ext-md.md)操作します。"
  remarks: "無効なエンティティを取得するさまざまな方法はあります。 最も一般的なシナリオは、ときに、[!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)]のクエリは、[扱う](../Topic/TREAT%20\\(Entity%20SQL\\).md)を特定の型としてポリモーフィックな型のインスタンスと対象のインスタンスを解釈する演算子と一致しません。 ([扱う](../Topic/TREAT%20\\(Entity%20SQL\\).md)c# のような`as`演算子)。 この場合、クエリが無効な場合は、エンティティを返す EntityNotValidKey に結果として得られるエンティティのエンティティ キーが設定されています。"
  syntax:
    content: public static readonly System.Data.EntityKey EntityNotValidKey;
    return:
      type: System.Data.EntityKey
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntitySetName
  id: EntitySetName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "取得またはエンティティ セットの名前を設定します。"
  syntax:
    content: public string EntitySetName { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>するエンティティのエンティティの名前を指定する値を設定、 <xref href=&quot;System.Data.EntityKey&quot;> </xref>が属している</xref:System.String>。"
  overload: System.Data.EntityKey.EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  id: Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "このインスタンスが、指定したのと同じかどうかを示す値を返します<xref href=&quot;System.Data.EntityKey&quot;></xref>です。"
  remarks: "一時キーは、永久キー別々 の比較セマンティクスを持つ:-一時キーは、参照の等価性を使用します。 つまり、2 つの参照、正確に同じ一時<xref:System.Data.EntityKey>インスタンスが同一の他の<xref:System.Data.EntityKey>インスタンスが等しい</xref:System.Data.EntityKey></xref:System.Data.EntityKey>。      -永続的なキーが含まれているキー プロパティと<xref:System.Data.Metadata.Edm.EntitySet>。</xref:System.Data.Metadata.Edm.EntitySet>の値に基づく等しいかどうかを決定します。 つまり、2 つを持つことができます<xref:System.Data.EntityKey>そのエンティティ セットが同じで、キーの値が等しい場合は、インスタンスが等しい</xref:System.Data.EntityKey>。       さらに、一時キーがあるいない<xref:System.Data.Metadata.Edm.EntitySet>か、キーの値が永久キーか</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public bool Equals (System.Data.EntityKey other);
    parameters:
    - id: other
      type: System.Data.EntityKey
      description: "<xref href=&quot;System.Data.EntityKey&quot;> </xref>このインスタンスと比較するオブジェクト。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合はこのインスタンスと<code> other </code>同じ値を持つ、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "このインスタンスが指定したオブジェクトと等しいかどうかを示す値を返します。"
  remarks: "一時キーは、永久キー別々 の比較セマンティクスを持つ:-一時キーは、参照の等価性を使用します。 つまり、2 つの参照、正確に同じ一時<xref:System.Data.EntityKey>インスタンスが同一の他の<xref:System.Data.EntityKey>インスタンスが等しい</xref:System.Data.EntityKey></xref:System.Data.EntityKey>。      -永続的なキーが含まれているキー プロパティと<xref:System.Data.Metadata.Edm.EntitySet>。</xref:System.Data.Metadata.Edm.EntitySet>の値に基づく等しいかどうかを決定します。 つまり、2 つの異なるを持つことができます<xref:System.Data.EntityKey>場合は、インスタンスが等しく、<xref:System.Data.Metadata.Edm.EntitySet>オブジェクトが同一で、キーの値が等しい</xref:System.Data.Metadata.Edm.EntitySet></xref:System.Data.EntityKey>。       さらに、一時キーがあるいない<xref:System.Data.Metadata.Edm.EntitySet>か、キーの値が永久キーか</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref:System.Object>このインスタンスと比較する</xref:System.Object>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合はこのインスタンスと<code> obj </code>同じ値を持つ、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  id: GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "指定されたメタデータ ワークスペースからこのエンティティ キーの設定、エンティティを取得します。"
  remarks: "エンティティ コンテナー名に基づいてエンティティ セットにアクセスし、エンティティが、キーの名前を設定します。"
  syntax:
    content: public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);
    parameters:
    - id: metadataWorkspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "このエンティティを含むメタデータ ワークスペース。"
    return:
      type: System.Data.Metadata.Edm.EntitySet
      description: "<xref href=&quot;System.Data.Metadata.Edm.EntitySet&quot;> </xref>エンティティ キーにします。"
  overload: System.Data.EntityKey.GetEntitySet*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "エンティティ セットが指定されたメタデータ ワークスペースで見つかりませんでした。"
  platform:
  - net462
- uid: System.Data.EntityKey.GetHashCode
  id: GetHashCode
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "現在のハッシュ関数として機能<xref href=&quot;System.Data.EntityKey&quot;></xref>オブジェクト。 GetHashCode は、ハッシュ アルゴリズムやハッシュ テーブルなどのデータ構造に適しています。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "現在のハッシュ コード<xref href=&quot;System.Data.EntityKey&quot;></xref>です。"
  overload: System.Data.EntityKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.IsTemporary
  id: IsTemporary
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Data.EntityKey&quot;> </xref>は一時的なものです。"
  remarks: "新しいエンティティを作成するときに、[!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)]一時キーが定義され、IsTemporary プロパティを設定`true`です。 呼び出すと、 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>、メソッド、[!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)]永続的なキーの割り当てし、IsTemporary プロパティを設定`false`</xref:System.Data.Objects.ObjectContext.SaveChanges%2A>。      > [!NOTE] > 一時キーは、フレームワークによって自動的に構築されている以外の場合は、ユーザーが直接を構築できません。       一時キーは、永久キー別々 の比較セマンティクスを持つ:-一時キーは、参照の等価性を使用します。 つまり、2 つの参照、正確に同じ一時<xref:System.Data.EntityKey>インスタンスが同一の他の<xref:System.Data.EntityKey>インスタンスが等しい</xref:System.Data.EntityKey></xref:System.Data.EntityKey>。      -永続的なキーが含まれているキー プロパティと<xref:System.Data.Metadata.Edm.EntitySet>。</xref:System.Data.Metadata.Edm.EntitySet>の値に基づく等しいかどうかを決定します。 つまり、2 つを持つことができます<xref:System.Data.EntityKey>そのエンティティ セットが同じで、キーの値が等しい場合は、インスタンスが等しい</xref:System.Data.EntityKey>。       さらに、一時キーがあるいない<xref:System.Data.Metadata.Edm.EntitySet>か、キーの値が永久キーか</xref:System.Data.Metadata.Edm.EntitySet>       ときに、<xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>メソッドは、エンティティの<xref:System.Data.Objects.ObjectStateEntry>からエンティティの遷移と、<xref:System.Data.EntityState>状態<xref:System.Data.EntityState>状態、[!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)]自動的に、新しい永続的なエンティティのキーを計算し、一時キーのすべての参照を同期します</xref:System.Data.EntityState></xref:System.Data.EntityState></xref:System.Data.Objects.ObjectStateEntry></xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>。"
  syntax:
    content: public bool IsTemporary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Data.EntityKey&quot;> </xref> 、それ以外の一時的な<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.EntityKey.IsTemporary*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.NoEntitySetKey
  id: NoEntitySetKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "シングルトン<xref href=&quot;System.Data.EntityKey&quot;></xref>で読み取り専用エンティティが識別されます。"
  remarks: "読み取り専用エンティティでは、実際のエンティティ セットに関連付けられていないする点を除いて、すべての方法で有効なエンティティを識別します。 これは、結果の一部として発生する、[!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)]クエリを構築し、(データベース テーブルから取得されたエンティティ) ではなく、クエリのテキスト内で指定されたエンティティ インスタンスを返します。 エンティティ セットがないエンティティは、いくつかのエンティティ セットに関連付けられるまで、データベースに保存できません。 オブジェクト materializer がこの種類のエンティティを処理するため、として、<xref:System.Data.Objects.MergeOption>が指定されている実際のマージ オプションに関係なく、マージ オプションが指定されました</xref:System.Data.Objects.MergeOption>。 、エンティティ オブジェクトを作成、その id は解決されず、には追加されません、状態マネージャーに実体化プロセスの一部として。"
  syntax:
    content: public static readonly System.Data.EntityKey NoEntitySetKey;
    return:
      type: System.Data.EntityKey
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  id: OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "逆シリアル化に使用されるヘルパー メソッド、 <xref href=&quot;System.Data.EntityKey&quot;></xref>です。"
  remarks: "OnDeserialized は<xref:System.Data.EntityKey>。</xref:System.Data.EntityKey>を逆シリアル化時に、Object Services によって使用します。 詳細については、次を参照してください。[オブジェクトのシリアル化](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)です。"
  syntax:
    content: public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "ソースと指定したシリアル化されたストリームの転送先について説明し、追加の呼び出し元が定義のコンテキストを提供します。"
  overload: System.Data.EntityKey.OnDeserialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  id: OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "逆シリアル化に使用されるヘルパー メソッド、 <xref href=&quot;System.Data.EntityKey&quot;></xref>です。"
  remarks: "OnDeserializing は<xref:System.Data.EntityKey>。</xref:System.Data.EntityKey>を逆シリアル化時に、Object Services によって使用します。 詳細については、次を参照してください。[オブジェクトのシリアル化](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)です。"
  syntax:
    content: public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "ソースと、指定したシリアル化ストリームの宛先を記述し、追加の呼び出し元が定義のコンテキストを提供します。"
  overload: System.Data.EntityKey.OnDeserializing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "比較する&2; つ<xref href=&quot;System.Data.EntityKey&quot;></xref>オブジェクト。"
  remarks: "一時キーは、永久キー別々 の比較セマンティクスを持つ:-一時キーは、参照の等価性を使用します。 つまり、2 つの参照、正確に同じ一時<xref:System.Data.EntityKey>インスタンスが同一の他の<xref:System.Data.EntityKey>インスタンスが等しい</xref:System.Data.EntityKey></xref:System.Data.EntityKey>。      -永続的なキーが含まれているキー プロパティと<xref:System.Data.Metadata.Edm.EntitySet>。</xref:System.Data.Metadata.Edm.EntitySet>の値に基づく等しいかどうかを決定します。 つまり、2 つを持つことができます<xref:System.Data.EntityKey>そのエンティティ セットが同じで、キーの値が等しい場合は、インスタンスが等しい</xref:System.Data.EntityKey>。       さらに、一時キーがあるいない<xref:System.Data.Metadata.Edm.EntitySet>か、キーの値が永久キーか</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Equality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref>と比較します。"
    - id: key2
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref>と比較します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "比較する&2; つ<xref href=&quot;System.Data.EntityKey&quot;></xref>オブジェクト。"
  remarks: "一時キーは、永久キー別々 の比較セマンティクスを持つ:-一時キーは、参照の等価性を使用します。 つまり、2 つの参照、正確に同じ一時<xref:System.Data.EntityKey>インスタンスが同一の他の<xref:System.Data.EntityKey>インスタンスが等しい</xref:System.Data.EntityKey></xref:System.Data.EntityKey>。      -永続的なキーが含まれているキー プロパティと<xref:System.Data.Metadata.Edm.EntitySet>。</xref:System.Data.Metadata.Edm.EntitySet>の値に基づく等しいかどうかを決定します。 つまり、2 つを持つことができます<xref:System.Data.EntityKey>そのエンティティ セットが同じで、キーの値が等しい場合は、インスタンスが等しい</xref:System.Data.EntityKey>。       さらに、一時キーがあるいない<xref:System.Data.Metadata.Edm.EntitySet>か、キーの値が通常のキー操作</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref>と比較します。"
    - id: key2
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref>と比較します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.EntityKey.#ctor
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,Object>>
  nameWithType: IEnumerable<KeyValuePair<String,Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
- uid: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<EntityKeyMember>
  nameWithType: IEnumerable<EntityKeyMember>
  fullName: System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.EntityKeyMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
- uid: System.Data.EntityKey.EntityContainerName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
- uid: System.Data.EntityKeyMember[]
  parent: System.Data
  isExternal: false
  name: EntityKeyMember
  nameWithType: EntityKeyMember
  fullName: System.Data.EntityKeyMember[]
  spec.csharp:
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.EntityKey.EntityNotValidKey
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
- uid: System.Data.EntityKey
  parent: System.Data
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
- uid: System.Data.EntityKey.EntitySetName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityKey.Equals(System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
- uid: System.Data.Metadata.Edm.EntitySet
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EntitySet
  nameWithType: EntitySet
  fullName: System.Data.Metadata.Edm.EntitySet
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityKey.GetHashCode
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityKey.IsTemporary
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
- uid: System.Data.EntityKey.NoEntitySetKey
  parent: System.Data.EntityKey
  isExternal: false
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.#ctor*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey.EntityKey
- uid: System.Data.EntityKey.EntityContainerName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
- uid: System.Data.EntityKey.EntitySetName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals*
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals
  nameWithType: EntityKey.Equals
- uid: System.Data.EntityKey.GetEntitySet*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet
  nameWithType: EntityKey.GetEntitySet
- uid: System.Data.EntityKey.GetHashCode*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode
  nameWithType: EntityKey.GetHashCode
- uid: System.Data.EntityKey.IsTemporary*
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
- uid: System.Data.EntityKey.OnDeserialized*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized
  nameWithType: EntityKey.OnDeserialized
- uid: System.Data.EntityKey.OnDeserializing*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing
  nameWithType: EntityKey.OnDeserializing
- uid: System.Data.EntityKey.op_Equality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality
  nameWithType: EntityKey.op_Equality
- uid: System.Data.EntityKey.op_Inequality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality
  nameWithType: EntityKey.op_Inequality
