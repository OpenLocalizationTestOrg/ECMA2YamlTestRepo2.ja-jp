### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  type: Class
  summary: "プロバイダーとの接続を形成するコンシューマーとして機能するサーバー コントロールを有効にする接続ポイント オブジェクトを定義します。"
  remarks: "すべての Web パーツには、2 つのサーバー コントロールの間の接続が、各コントロールは、その他のコントロールへの接続および指定するか、コントロールがプロバイダーまたは接続のコンシューマーとして指定されているかどうかに応じて、データを使用することを有効にするに関連付けられた接続ポイント オブジェクト (その他の要件) が必要です。 A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>オブジェクトには一般に、コントロールが別のコントロールおよびと共有できるデータの種類に接続できる方法の詳細が含まれています</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>。 接続でコンシューマーとして機能するコントロール、その接続ポイントは ConsumerConnectionPoint オブジェクトである必要があります。 Web パーツの接続および接続ポイントの詳細については、「参照」セクションのトピックを参照してください。       ConsumerConnectionPoint オブジェクトを作成するにはいくつかの手順が必要: 1。  インターフェイス インスタンスを参照するコンシューマー コントロールを有効にします。 A<xref:System.Web.UI.WebControls.WebParts.WebPart>またはその他のサーバー コントロール (任意の型に追加するサーバー コントロールの<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンを使用できます)、特定のインターフェイスのインスタンスからデータを使用できる必要があります</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase></xref:System.Web.UI.WebControls.WebParts.WebPart>。 コントロール必要があるインターフェイスを実装していませんプロバイダーのみには、これを実装する必要があります。 コンシューマーがプロバイダーによって提供される、正確なインターフェイスの型で使用するか、または、していない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>コンシューマーによって認識される型に、プロバイダーのインターフェイス型からデータを変換するオブジェクトを使用できます</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。 コンシューマーを有効にする一般的な方法は、目的のインターフェイス型への参照を格納するプライベート フィールドを宣言します。      2.  コールバック メソッドを識別します。 コンシューマーのメソッドは、プロバイダーとの接続を確立するために、コールバック メソッドとして識別される必要があります。 このメソッドは、プロバイダーを実装し、割り当てるプライベート フィールド (たとえば) に作成されたことの最初の手順で、インターフェイスのインスタンスを取得します。 コンシューマーのコールバック メソッドを識別するための Web パーツ方法は、追加する、`ConnectionConsumer`メタデータの属性 (によって定義された、<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>クラス) インターフェイスのインスタンスを受信するメソッドにします</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>。 属性が追加されたときにのみ必要なパラメーター、コンシューマー接続ポイントを使用する表示名です。 ID など、省略可能なパラメーターも追加できます。      3.  プロセスとインターフェイスのインスタンスからデータを出力します。 必要に応じて、データでは、内部処理を実行し、通常コンシューマー コントロールは表示ページにデータ。 これを行う一般的な方法は、コントロールのオーバーライドする<xref:System.Web.UI.Control.OnPreRender%2A>メソッド</xref:System.Web.UI.Control.OnPreRender%2A>。          > [!NOTE] > 同期の要求時にコンシューマー要求する必要がありますデータ プロバイダーから直接中または直後後、<xref:System.Web.UI.Control.PreRender>イベント</xref:System.Web.UI.Control.PreRender>。 非同期の要求時にレンダリング中に、任意の時点で、プロバイダーのコールバック メソッドが呼び出されない場合、開発者と仮定できますコンシューマーにデータが送信されなかったこと。       コンシューマーとして機能するコントロールを備えたされましたが、後に、コントロールは、接続 (装備され使用可能なプロバイダーのコントロールがまたがあると仮定) に参加できます。 Web ページのマークアップで、宣言型の静的な接続を作成する開発者が使用して、`<asp:webpartconnection>`要素。 場合、`ConnectionConsumer`コールバック メソッドを識別するコンシューマー ソース コード内の属性は、接続ポイントの ID を指定し、その値を割り当てる必要があります、`ConsumerConnectionPointID`属性、`<asp:webpartconnection>`ページの要素。 開発者がコンシューマー接続ポイントの ID を指定する理由は、コンシューマー コントロールで定義されている複数の接続ポイントがあるかどうかです。 割り当てられる値がないコンシューマー コントロールのコンシューマー接続ポイントの ID が指定されていない場合、`ConsumerConnectionPointID`から取得した既定値を使用して、接続が作成するため、ページで、属性、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>フィールド</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>。       コードで接続を作成する開発者は、呼び出すことによって新しい ConsumerConnectionPoint オブジェクトを作成する必要があります、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>メソッドと ID またはコンシューマー コントロールに ConsumerConnectionPoint オブジェクトの定義のインデックスと、コンシューマー コントロールの ID を渡すします</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>。 ConsumerConnectionPoint の返されたオブジェクトのコンシューマー コントロールへの参照を対応するプロバイダー コントロールへの参照と<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクトでは、すべてに渡される、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドを作成、新しい<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト</xref:System.Web.UI.WebControls.WebParts.WebPartConnection></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>。       開発者は、宣言またはプログラムによって、接続を確立するための一部として、コンシューマー接続ポイントを使用できますが、ユーザーも、ユーザー インターフェイス (UI) 経由の接続を確立するためにコンシューマー接続ポイントと対話できます。 開発者は、宣言する場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール、Web ページ上ユーザー接続を作成するためのランタイムの UI を提供します</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>。 ユーザーをクリックして接続を確立するための出発点としてプロバイダーのコントロールを選択する場合、動詞を接続 (コンシューマーを選択する可能性があります以外の場合は、結果として得られる接続に違いはありません)、使用可能なコンシューマー接続ポイント (またはポイントが複数の場合) の表示名でのドロップダウン リスト コントロールが UI に表示されます、プロバイダーがデータを送信できます。 ユーザーは、接続を確立するコンシューマー接続ポイントを選択する必要があります。       ConsumerConnectionPoint オブジェクトは、特定のコンシューマーのコントロールを直接関連付けます、基本<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラス</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>から継承プロパティでは、接続の詳細を格納 たとえばでは、継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>プロパティを使用してインターフェイスの型を保持するコンシューマー接続ポイント</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>。 プロバイダーとの接続でコンシューマー両方インターフェイスの種類を理解して場合、コントロールは互換性のあるおよび直接接続を形成することです。 互換性がありませんし、使用する必要があります、プロバイダーとコンシューマーは、同じインターフェイス型を扱うことはできない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>プロバイダー接続ポイントの翻訳をオブジェクト<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>、コンシューマーが使用できる型にプロパティ</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A></xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。 他の重要な継承されたプロパティは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>をコンシューマー接続を選択するユーザーの UI に表示するフレンドリ名を提供するプロパティが接続を作成するときにポイントします</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>。 開発者を追加するときに、表示名は必須のパラメーター、`ConnectionConsumer`属性コンシューマー コントロールのコールバック メソッドにします。 継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>プロパティは上に示されて、コンシューマーは、複数の接続ポイントを持つことのコンシューマー接続ポイントの一意識別子を提供するために便利です</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>。 コンシューマーとに定義された、この場合は、開発者は、追加時に複数の ConsumerConnectionPoint オブジェクトを持つことができます、`ConnectionConsumer`属性、メソッドに各接続ポイントを区別するために ID 値を指定する必要があります。 その他の注目すべき継承されたプロパティは&1; つは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>プロパティで、コンシューマー接続ポイントが複数のプロバイダーに同時に接続できるかどうかを示します</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>。 このプロパティの値が`false`コンシューマー接続ポイントの既定 (既定値は一方`true`プロバイダー接続ポイントの)。       ConsumerConnectionPoint クラス固有のいくつかのメソッドを追加する<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラス</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>から継承してメンバーに <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>メソッドは、プロバイダーからインターフェイスのインスタンスを取得するコンシューマーの独自定義されたコールバック メソッドを呼び出します</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>メソッド接続ポイントが関連付けられているコンシューマー コントロールの現在の状態に基づいて、接続を確立できないかどうかを示すブール値を返します</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>。"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ConsumerConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \n  \n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ConsumerConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>クラスです。"
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>クラスは、基底コンス トラクター、さまざまなパラメーターを渡すと、基本クラスの初期化を呼び出すだけ</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>の ConsumerConnectionPoint コンス トラクター       基本クラス コンス トラクターでは、接続ポイントのパラメーターの数を確認し、いくつかの例外をスローすることができます。 可能性のある例外の一覧は、例外を参照してください。       <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>クラス</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>のインスタンスを作成する、ConsumerConnectionPoint コンス トラクターを呼び出すことができます。 ただし、しているだけで接続を確立して、クラスを拡張しない場合を呼び出す必要があります、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>プロバイダーからの接続ポイント オブジェクトを返すメソッド</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>。"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "インターフェイス インスタンスが接続を確立するコンシューマーに返されますコンシューマー コントロールのメソッドです。"
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>のコンシューマーをプロバイダーから受信するインターフェイス</xref:System.Type>。"
    - id: controlType
      type: System.Type
      description: "<xref:System.Type>のコンシューマー接続ポイントが関連付けられているコンシューマー コントロール</xref:System.Type>。"
    - id: displayName
      type: System.String
      description: "接続のユーザー インターフェイス (UI) のユーザーに表示されるコンシューマー接続ポイントの表示名。"
    - id: id
      type: System.String
      description: "コンシューマー接続ポイントの一意の識別子。"
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "コンシューマー接続ポイントに同時に複数のプロバイダーに接続できるかどうかを示すブール値。"
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>コンシューマー コントロールと同じ型ではありません (または、有効なクラスがそこから派生)。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  id: SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "コンシューマー コントロールのコールバック メソッドを呼び出すし、プロバイダーのコントロールからインターフェイスのインスタンスを取得します。"
  remarks: "このメソッドは、コンシューマーのコントロールのデータを格納するプロバイダーからインターフェイスのインスタンスを受け取ります。       SetObject メソッドによって呼び出されます<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトの接続をアクティブ化時にします</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>。 これは、接続を開始して、データを共有する&2; つのコントロールを有効化の一部である重要な手順です。       接続のコンシューマー コントロールは、プロバイダーと同じ型のインターフェイスを使用できる必要があります。 コントロールとの互換性がない場合は、および<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトは、接続を確立するために使用する必要があります</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。"
  syntax:
    content: public virtual void SetObject (System.Web.UI.Control control, object data);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "コンシューマー接続ポイントに関連付けられているコンシューマー コントロール。"
    - id: data
      type: System.Object
      description: "プロバイダーのコントロールからインターフェイスのインスタンスが返されます。"
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "コンシューマー接続ポイントが現在の接続を確立できるかどうかを判断します。"
  remarks: "SupportsConnection メソッド実装を返しますでは常に`true`<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>クラス</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>のすべての場合 このメソッドの目的は、の状態を確認する`control`と`secondaryInterfaces`を決定する特定の重要な時点でかどうか、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトが現在の接続を作成できません</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>。       シナリオがある場所`control`が不可能になること、接続を構成できる状態では、または where`secondaryInterfaces`接続を確立できる前に存在する必要があります。 このような場合、開発者、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>クラス、および接続ポイントが接続に対応している場合を決定するカスタムの実装を提供する、SupportsConnection メソッドをオーバーライドします</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>。"
  syntax:
    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "コンシューマー コントロールに関連付けられている、 <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;></xref>です。"
    - id: secondaryInterfaces
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref>接続に参加しているセカンダリ インターフェイスです。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、接続ポイントの現在接続を確立できます。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject
  nameWithType: ConsumerConnectionPoint.SetObject
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection
  nameWithType: ConsumerConnectionPoint.SupportsConnection
