### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.TrustManagerContext
  id: TrustManagerContext
  children:
  - System.Security.Policy.TrustManagerContext.#ctor
  - System.Security.Policy.TrustManagerContext.#ctor(System.Security.Policy.TrustManagerUIContext)
  - System.Security.Policy.TrustManagerContext.IgnorePersistedDecision
  - System.Security.Policy.TrustManagerContext.KeepAlive
  - System.Security.Policy.TrustManagerContext.NoPrompt
  - System.Security.Policy.TrustManagerContext.Persist
  - System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity
  - System.Security.Policy.TrustManagerContext.UIContext
  langs:
  - csharp
  name: TrustManagerContext
  nameWithType: TrustManagerContext
  fullName: System.Security.Policy.TrustManagerContext
  type: Class
  summary: "上の新しいセキュリティを設定して、アプリケーションを実行する決定を行うときに考慮する、信頼マネージャーのコンテキストを表します<xref href=&quot;System.AppDomain&quot;></xref>先となるアプリケーションを実行します。"
  remarks: "TrustManagerContext クラスのインスタンスの初期プロパティ値の一覧は、次を参照してください、<xref:System.Security.Policy.TrustManagerContext.%23ctor>コンス トラクター。</xref:System.Security.Policy.TrustManagerContext.%23ctor> 。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class TrustManagerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.#ctor
  id: '#ctor'
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: TrustManagerContext()
  nameWithType: TrustManagerContext.TrustManagerContext()
  fullName: System.Security.Policy.TrustManagerContext.TrustManagerContext()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Policy.TrustManagerContext&quot;> </xref>クラスです。"
  remarks: "次の表は、<xref:System.Security.Policy.TrustManagerContext>クラス</xref:System.Security.Policy.TrustManagerContext>の新しいインスタンスの初期プロパティ値を示しています。      |プロパティ |初期値 |  |--------------|-------------------|  |<xref:System.Security.Policy.TrustManagerContext.IgnorePersistedDecision%2A>|`false`|  |<xref:System.Security.Policy.TrustManagerContext.KeepAlive%2A>|`false`|  |<xref:System.Security.Policy.TrustManagerContext.NoPrompt%2A>|`false`|  |<xref:System.Security.Policy.TrustManagerContext.Persist%2A>|`true`|  |<xref:System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity%2A>|`null`|  |<xref:System.Security.Policy.TrustManagerContext.UIContext%2A>|<xref:System.Security.Policy.TrustManagerUIContext>|</xref:System.Security.Policy.TrustManagerUIContext></xref:System.Security.Policy.TrustManagerContext.UIContext%2A></xref:System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity%2A></xref:System.Security.Policy.TrustManagerContext.Persist%2A></xref:System.Security.Policy.TrustManagerContext.NoPrompt%2A></xref:System.Security.Policy.TrustManagerContext.KeepAlive%2A></xref:System.Security.Policy.TrustManagerContext.IgnorePersistedDecision%2A>"
  syntax:
    content: public TrustManagerContext ();
    parameters: []
  overload: System.Security.Policy.TrustManagerContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.#ctor(System.Security.Policy.TrustManagerUIContext)
  id: '#ctor(System.Security.Policy.TrustManagerUIContext)'
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: TrustManagerContext(TrustManagerUIContext)
  nameWithType: TrustManagerContext.TrustManagerContext(TrustManagerUIContext)
  fullName: System.Security.Policy.TrustManagerContext.TrustManagerContext(TrustManagerUIContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Policy.TrustManagerContext&quot;> </xref>クラス<xref href=&quot;System.Security.Policy.TrustManagerUIContext&quot;></xref>オブジェクト。"
  remarks: "このコンス トラクターは、<xref:System.Security.Policy.TrustManagerContext.UIContext%2A>インチ渡される値に設定されるプロパティ</xref:System.Security.Policy.TrustManagerContext.UIContext%2A>を除き、既定のコンス トラクターと同じ設定にプロパティを初期化します"
  syntax:
    content: public TrustManagerContext (System.Security.Policy.TrustManagerUIContext uiContext);
    parameters:
    - id: uiContext
      type: System.Security.Policy.TrustManagerUIContext
      description: "1 つ、 <xref href=&quot;System.Security.Policy.TrustManagerUIContext&quot;> </xref>を使用する信頼マネージャーのユーザー インターフェイスの種類を指定する値。"
  overload: System.Security.Policy.TrustManagerContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision
  id: IgnorePersistedDecision
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: IgnorePersistedDecision
  nameWithType: TrustManagerContext.IgnorePersistedDecision
  fullName: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "取得またはアプリケーションのセキュリティ マネージャーが永続化の決定事項を無視する、信頼マネージャーを呼び出すかどうかを示す値を設定します。"
  remarks: "場合`true`、<xref:System.Security.Policy.ApplicationSecurityManager>アプリケーションの永続化された決定を無視し、信頼マネージャーを呼び出し</xref:System.Security.Policy.ApplicationSecurityManager>。 場合`false`、<xref:System.Security.Policy.ApplicationSecurityManager>ではは、使用可能な場合に、意思決定をキャッシュします</xref:System.Security.Policy.ApplicationSecurityManager>。"
  syntax:
    content: public virtual bool IgnorePersistedDecision { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>信頼マネージャーを呼び出すそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.KeepAlive
  id: KeepAlive
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: KeepAlive
  nameWithType: TrustManagerContext.KeepAlive
  fullName: System.Security.Policy.TrustManagerContext.KeepAlive
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "取得または、信頼マネージャーがアプリケーションの信頼を決定する今後の要求を容易にするために、このアプリケーションの状態をキャッシュするかどうかを示す値を設定します。"
  remarks: "このフラグに設定されている`true`かどうか、ホストを呼び出すことの信頼マネージャー何回も、このアプリケーションの信頼の決定します。 場合`true`、信頼マネージャーは、将来の呼び出しの速度を向上する可能性がありますいずれかの状態をキャッシュする、<xref:System.Security.Policy.IApplicationTrustManager.DetermineApplicationTrust%2A>メソッド</xref:System.Security.Policy.IApplicationTrustManager.DetermineApplicationTrust%2A>。 このプロパティに設定`false`ホストは現在<xref:System.AppDomain>.</xref:System.AppDomain>の信頼のマネージャーを再度呼び出すを想定していないかどうか"
  syntax:
    content: public virtual bool KeepAlive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>状態データをキャッシュするそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Policy.TrustManagerContext.KeepAlive*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.NoPrompt
  id: NoPrompt
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: NoPrompt
  nameWithType: TrustManagerContext.NoPrompt
  fullName: System.Security.Policy.TrustManagerContext.NoPrompt
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "取得または、信頼マネージャーが信頼の決定、ユーザーの入力を求める必要があるかどうかを示す値を設定します。"
  remarks: "場合`false`、信頼マネージャーは、適切なユーザー ダイアログ ボックス、信頼の決定を取得するを決定します。"
  syntax:
    content: public virtual bool NoPrompt { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザー プロンプトを表示しません。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>ユーザー入力を求めます。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Policy.TrustManagerContext.NoPrompt*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.Persist
  id: Persist
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: Persist
  nameWithType: TrustManagerContext.Persist
  fullName: System.Security.Policy.TrustManagerContext.Persist
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "取得または同意 ダイアログ ボックスに、ユーザーの応答を永続化すべきかどうかを示す値を設定します。"
  remarks: "このプロパティは`true`同意 ダイアログ ボックスに、ユーザーの応答をさらに新しいアクティブ化要求のたびにユーザー入力を求めないようにする永続化する場合。 このプロパティは`false`ユーザーの応答を永続化しない場合。"
  syntax:
    content: public virtual bool Persist { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>状態データをキャッシュするそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Policy.TrustManagerContext.Persist*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity
  id: PreviousApplicationIdentity
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: PreviousApplicationIdentity
  nameWithType: TrustManagerContext.PreviousApplicationIdentity
  fullName: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "取得または以前のアプリケーション id の id を設定します。"
  syntax:
    content: public virtual ApplicationIdentity PreviousApplicationIdentity { get; set; }
    return:
      type: System.ApplicationIdentity
      description: "<xref href=&quot;System.ApplicationIdentity&quot;> </xref>前を表すオブジェクト<xref href=&quot;System.ApplicationIdentity&quot;></xref>です。"
  overload: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.UIContext
  id: UIContext
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: UIContext
  nameWithType: TrustManagerContext.UIContext
  fullName: System.Security.Policy.TrustManagerContext.UIContext
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "取得または、信頼マネージャーを表示する必要がありますユーザー インターフェイスの型を設定します。"
  remarks: "プロパティのためのものをユーザー インターフェイスを推奨するには、信頼マネージャー UIContext は、信頼の決定の入力が必要です。 信頼マネージャーは、別のインターフェイスを使用して決定できます。"
  syntax:
    content: public virtual System.Security.Policy.TrustManagerUIContext UIContext { get; set; }
    return:
      type: System.Security.Policy.TrustManagerUIContext
      description: "1 つ、 <xref href=&quot;System.Security.Policy.TrustManagerUIContext&quot;> </xref>値。 既定値は<xref href=&quot;System.Security.Policy.TrustManagerUIContext&quot;></xref>です。"
  overload: System.Security.Policy.TrustManagerContext.UIContext*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Policy.TrustManagerContext.#ctor
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: TrustManagerContext()
  nameWithType: TrustManagerContext.TrustManagerContext()
  fullName: System.Security.Policy.TrustManagerContext.TrustManagerContext()
- uid: System.Security.Policy.TrustManagerContext.#ctor(System.Security.Policy.TrustManagerUIContext)
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: TrustManagerContext(TrustManagerUIContext)
  nameWithType: TrustManagerContext.TrustManagerContext(TrustManagerUIContext)
  fullName: System.Security.Policy.TrustManagerContext.TrustManagerContext(TrustManagerUIContext)
- uid: System.Security.Policy.TrustManagerUIContext
  parent: System.Security.Policy
  isExternal: false
  name: TrustManagerUIContext
  nameWithType: TrustManagerUIContext
  fullName: System.Security.Policy.TrustManagerUIContext
- uid: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: IgnorePersistedDecision
  nameWithType: TrustManagerContext.IgnorePersistedDecision
  fullName: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Policy.TrustManagerContext.KeepAlive
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: KeepAlive
  nameWithType: TrustManagerContext.KeepAlive
  fullName: System.Security.Policy.TrustManagerContext.KeepAlive
- uid: System.Security.Policy.TrustManagerContext.NoPrompt
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: NoPrompt
  nameWithType: TrustManagerContext.NoPrompt
  fullName: System.Security.Policy.TrustManagerContext.NoPrompt
- uid: System.Security.Policy.TrustManagerContext.Persist
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: Persist
  nameWithType: TrustManagerContext.Persist
  fullName: System.Security.Policy.TrustManagerContext.Persist
- uid: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: PreviousApplicationIdentity
  nameWithType: TrustManagerContext.PreviousApplicationIdentity
  fullName: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity
- uid: System.ApplicationIdentity
  parent: System
  isExternal: false
  name: ApplicationIdentity
  nameWithType: ApplicationIdentity
  fullName: System.ApplicationIdentity
- uid: System.Security.Policy.TrustManagerContext.UIContext
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: UIContext
  nameWithType: TrustManagerContext.UIContext
  fullName: System.Security.Policy.TrustManagerContext.UIContext
- uid: System.Security.Policy.TrustManagerContext.#ctor*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: TrustManagerContext
  nameWithType: TrustManagerContext.TrustManagerContext
- uid: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: IgnorePersistedDecision
  nameWithType: TrustManagerContext.IgnorePersistedDecision
- uid: System.Security.Policy.TrustManagerContext.KeepAlive*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: KeepAlive
  nameWithType: TrustManagerContext.KeepAlive
- uid: System.Security.Policy.TrustManagerContext.NoPrompt*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: NoPrompt
  nameWithType: TrustManagerContext.NoPrompt
- uid: System.Security.Policy.TrustManagerContext.Persist*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: Persist
  nameWithType: TrustManagerContext.Persist
- uid: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: PreviousApplicationIdentity
  nameWithType: TrustManagerContext.PreviousApplicationIdentity
- uid: System.Security.Policy.TrustManagerContext.UIContext*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: UIContext
  nameWithType: TrustManagerContext.UIContext
