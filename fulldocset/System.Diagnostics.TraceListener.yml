### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.TraceListener
  id: TraceListener
  children:
  - System.Diagnostics.TraceListener.#ctor
  - System.Diagnostics.TraceListener.#ctor(System.String)
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Close
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Dispose(System.Boolean)
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.String)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  langs:
  - csharp
  name: TraceListener
  nameWithType: TraceListener
  fullName: System.Diagnostics.TraceListener
  type: Class
  summary: "提供、 <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref>トレースを監視およびデバッグ出力をリスナーの基本クラスです。"
  remarks: "For examples of how to implement a TraceListener, see the <xref:System.Diagnostics.DefaultTraceListener>, <xref:System.Diagnostics.TextWriterTraceListener> and the <xref:System.Diagnostics.EventLogTraceListener> classes.  \n  \n You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \n  \n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.  \n  \n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.  \n  \n To add a trace listener, edit the configuration file that corresponds to the name of your application. Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted similar to the following example.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"false\" indentsize=\"4\">  \n      <listeners>  \n        <add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"TextWriterOutput.log\" />  \n        <remove name=\"Default\" />  \n      </listeners>  \n    </trace>  \n  </system.diagnostics>  \n</configuration>  \n```  \n  \n For more information on using configuration files for tracing, see [\\&lt;system.diagnostics\\&gt;](../Topic/%3Csystem.diagnostics%3E%20Element.md)."
  syntax:
    content: 'public abstract class TraceListener : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceListener()
  nameWithType: TraceListener.TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>クラスです。"
  remarks: "次の表は、 <xref:System.Diagnostics.TraceListener>。</xref:System.Diagnostics.TraceListener>のインスタンスの初期プロパティ値を示しています。      |プロパティ |既定値 |  |--------------|-------------------|  |名 |空の文字列 (&quot;&quot;). | |インデント |ゼロ |。  |IndentSize |4 つのスペースです |。"
  syntax:
    content: protected TraceListener ();
    parameters: []
  overload: System.Diagnostics.TraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceListener(String)
  nameWithType: TraceListener.TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>クラス リスナーとして指定した名前を使用します。"
  syntax:
    content: protected TraceListener (string name);
    parameters:
    - id: name
      type: System.String
      description: "名前、 <xref href=&quot;System.Diagnostics.TraceListener&quot;></xref>です。"
  overload: System.Diagnostics.TraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Attributes
  id: Attributes
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Attributes
  nameWithType: TraceListener.Attributes
  fullName: System.Diagnostics.TraceListener.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "アプリケーション構成ファイルで定義されているカスタム トレース リスナーの属性を取得します。"
  remarks: "継承するクラス、<xref:System.Diagnostics.TraceListener>クラスがオーバーライドすることでカスタム属性を追加できる、<xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>メソッドをカスタム属性の名前の文字列配列を返します</xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A></xref:System.Diagnostics.TraceListener>。 属性のプロパティは、アプリケーションの構成ファイルで参照されているカスタム属性を識別します。 たとえば、次の構成ファイルの抜粋で、<xref:System.Diagnostics.DelimitedListTraceListener>カスタム属性「区切り記号」が参照されている</xref:System.Diagnostics.DelimitedListTraceListener>。 この場合、属性プロパティを返します、<xref:System.Collections.Specialized.StringDictionary>文字列「区切り記号」を含むします</xref:System.Collections.Specialized.StringDictionary>。      ```   <listeners>     <add name=&quot;delimitedListener&quot;        type=&quot;System.Diagnostics.DelimitedListTraceListener&quot;        delimiter=&quot;:&quot;        initializeData=&quot;delimitedOutput.txt&quot;        traceOutputOptions=&quot;ProcessId, DateTime&quot; />     <remove name=&quot;Default&quot; />   </listeners>   ```参照されていないカスタム属性は列挙されません。  詳細については、次を参照してください、<xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>メソッド。</xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> 。"
  syntax:
    content: public System.Collections.Specialized.StringDictionary Attributes { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "A <xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>トレース リスナーのカスタム属性を格納します。"
  overload: System.Diagnostics.TraceListener.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Close
  id: Close
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: TraceListener.Close()
  fullName: System.Diagnostics.TraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "派生クラスでオーバーライドされると、トレース出力またはデバッグ出力を受信しないように、出力ストリームを閉じます。"
  remarks: "このメソッドを使用して、出力するとき、ファイルなど、 <xref:System.Diagnostics.TextWriterTraceListener>。</xref:System.Diagnostics.TextWriterTraceListener> このメソッドを呼び出し、オブジェクトを再初期化する必要があります。"
  syntax:
    content: public virtual void Close ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Dispose
  id: Dispose
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Dispose()
  nameWithType: TraceListener.Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Diagnostics.TraceListener&quot;></xref>です。"
  remarks: "Dispose を呼び出すことによりで使用されるリソース、<xref:System.Diagnostics.TraceListener>を他の目的に再割り当てされます</xref:System.Diagnostics.TraceListener>。 Dispose の詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: TraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック<xref:System.Diagnostics.TraceListener.Dispose%2A>メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A></xref:System.Diagnostics.TraceListener.Dispose%2A>。 `Dispose`プロテクト呼び出します<xref:System.Diagnostics.TraceListener.Dispose%2A>メソッドを`disposing`パラメーターに設定`true`</xref:System.Diagnostics.TraceListener.Dispose%2A>。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Diagnostics.TraceListener>参照。</xref:System.Diagnostics.TraceListener> 。 このメソッドを呼び出して、`Dispose`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Diagnostics.TraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Fail(String)
  nameWithType: TraceListener.Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "エラー メッセージを出力するリスナーを作成を実装する場合、 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>クラスです。"
  remarks: "既定の動作がモードでは、ユーザー インターフェイス、およびアプリケーションが実行されているときに、メッセージ ボックスに、指定したメッセージを表示するには、<xref:System.Diagnostics.TraceListener>のインスタンスにある、<xref:System.Diagnostics.TraceListenerCollection>コレクションです</xref:System.Diagnostics.TraceListenerCollection></xref:System.Diagnostics.TraceListener>。 既定<xref:System.Diagnostics.TraceListenerCollection>コレクションには<xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンス</xref:System.Diagnostics.TraceListenerCollection> 追加することでこの動作をカスタマイズすることができます、<xref:System.Diagnostics.TraceListener>にまたは、コレクションから削除します</xref:System.Diagnostics.TraceListener>。"
  syntax:
    content: public virtual void Fail (string message);
    parameters:
    - id: message
      type: System.String
      description: "出力するメッセージ。"
  overload: System.Diagnostics.TraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Fail(String,String)
  nameWithType: TraceListener.Fail(String,String)
  fullName: System.Diagnostics.TraceListener.Fail(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "エラー出力を実装するときに作成するメッセージと詳細なエラー メッセージ、リスナーを<xref href=&quot;System.Diagnostics.TraceListener&quot;></xref>クラスです。"
  remarks: "既定の動作がモードでは、ユーザー インターフェイス、およびアプリケーションが実行されているときに、メッセージ ボックスに、メッセージと詳細なメッセージを表示するには、<xref:System.Diagnostics.TraceListener>のインスタンスにある、<xref:System.Diagnostics.TraceListenerCollection>コレクションです</xref:System.Diagnostics.TraceListenerCollection></xref:System.Diagnostics.TraceListener>。 既定<xref:System.Diagnostics.TraceListenerCollection>コレクションには<xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンス</xref:System.Diagnostics.TraceListenerCollection> 追加することでこの動作をカスタマイズすることができます、<xref:System.Diagnostics.TraceListener>にまたは、コレクションから削除します</xref:System.Diagnostics.TraceListener>。"
  syntax:
    content: public virtual void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: "出力するメッセージ。"
    - id: detailMessage
      type: System.String
      description: "出力する詳細なメッセージ。"
  overload: System.Diagnostics.TraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Filter
  id: Filter
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Filter
  nameWithType: TraceListener.Filter
  fullName: System.Diagnostics.TraceListener.Filter
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得し、トレース リスナーのトレース フィルターを設定します。"
  remarks: "トレース リスナーをトレース ソース スイッチで提供される範囲を超えてスクリーン処理のレイヤーを提供するには、トレース フィルターを追加できます。 たとえば、<xref:System.Diagnostics.EventTypeFilter>リスナーによって出力されるイベントの種類を制御するトレース リスナーに追加することができます</xref:System.Diagnostics.EventTypeFilter>。  トレースが出力に送信するかを判断、存在する場合、スイッチの条件が満たされるために呼び出されたリスナーは、フィルターをクエリできます。"
  example:
  - "The following code example shows how to use the Filter property to add a source filter to a console trace listener. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \n  \n [!code-cs[System.Diagnostics.TraceSource2#28](~/add/codesnippet/csharp/p-system.diagnostics.tra_6_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource2#28](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_6_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceFilter Filter { get; set; }
    return:
      type: System.Diagnostics.TraceFilter
      description: "派生したオブジェクト、 <xref href=&quot;System.Diagnostics.TraceFilter&quot;> </xref>基本クラスです。"
  overload: System.Diagnostics.TraceListener.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Flush
  id: Flush
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Flush()
  nameWithType: TraceListener.Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "派生クラスでオーバーライドされると、出力バッファーをフラッシュします。"
  syntax:
    content: public virtual void Flush ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes
  id: GetSupportedAttributes
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: GetSupportedAttributes()
  nameWithType: TraceListener.GetSupportedAttributes()
  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース リスナーによってサポートされるカスタム属性を取得します。"
  remarks: "GetSupportedAttributes の既定の実装を返します`null`です。"
  example:
  - "The following code sample shows an override of the GetSupportedAttributes method for a custom trace listener.  \n  \n [!code-cs[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_22_1.cs)]\n [!code-vb[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_22_1.vb)]"
  syntax:
    content: protected virtual string[] GetSupportedAttributes ();
    parameters: []
    return:
      type: System.String[]
      description: "トレース リスナーによってサポートされるカスタム属性の名前を付ける文字列配列または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>カスタム属性がない場合。"
  overload: System.Diagnostics.TraceListener.GetSupportedAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得またはインデント レベルを設定します。"
  remarks: "IndentLevel プロパティがインデントがで指定された回数を表す、<xref:System.Diagnostics.TraceListener.IndentSize%2A>プロパティを適用します</xref:System.Diagnostics.TraceListener.IndentSize%2A>。 このプロパティは、スレッド/あたりの要求ごとに格納されます。"
  syntax:
    content: public int IndentLevel { get; set; }
    return:
      type: System.Int32
      description: "インデント レベル。 既定値は&0; です。"
  overload: System.Diagnostics.TraceListener.IndentLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IndentSize
  id: IndentSize
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IndentSize
  nameWithType: TraceListener.IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得または空白の数を&1; つのインデントに設定します。"
  remarks: "プロパティは、スレッド/あたりの要求ごとに格納されます。"
  syntax:
    content: public int IndentSize { get; set; }
    return:
      type: System.Int32
      description: "1 つのインデントに含まれるスペースの数。 既定値は&4; スペースです。"
  overload: System.Diagnostics.TraceListener.IndentSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定操作では、値が&0; より小さいために失敗しました。"
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  id: IsThreadSafe
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "安全なトレース リスナーがスレッドであるかどうかを示す値を取得します。"
  remarks: "IsThreadSafe の値を使用してをリスナーに書き込む際に、グローバル ロックを使用するかどうかを判断します。 IsThreadSafe の値が場合`false`、 <xref:System.Diagnostics.Trace.UseGlobalLock%2A>.</xref:System.Diagnostics.Trace.UseGlobalLock%2A>の値に関係なくグローバル ロックを使用 IsThreadSafe の値が場合にのみ、グローバルのロックは使用されません`true`の値と<xref:System.Diagnostics.Trace.UseGlobalLock%2A>は`false`</xref:System.Diagnostics.Trace.UseGlobalLock%2A>。 既定の動作がグローバルを使用するには、リスナーに書き込むときにロックします。"
  syntax:
    content: public virtual bool IsThreadSafe { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>トレース リスナーがスレッド セーフである場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Diagnostics.TraceListener.IsThreadSafe*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Name
  id: Name
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Name
  nameWithType: TraceListener.Name
  fullName: System.Diagnostics.TraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "この名前を取得または<xref href=&quot;System.Diagnostics.TraceListener&quot;></xref>です。"
  remarks: "名前を整理し、内のリスナーのアクセスを使用できます、<xref:System.Diagnostics.TraceListenerCollection>コレクションです</xref:System.Diagnostics.TraceListenerCollection>。"
  syntax:
    content: public virtual string Name { get; set; }
    return:
      type: System.String
      description: "この名前<xref href=&quot;System.Diagnostics.TraceListener&quot;></xref>です。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Diagnostics.TraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.NeedIndent
  id: NeedIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得または出力にインデントを設定するかどうかを示す値を設定します。"
  remarks: '**注**、<xref:System.Diagnostics.TraceListener.WriteIndent%2A>によって呼び出されたメソッド、<xref:System.Diagnostics.DefaultTraceListener>と<xref:System.Diagnostics.TextWriterTraceListener>クラス、NeedIndent プロパティ値を設定`false`を後で、不要なインデントを防ぐためです</xref:System.Diagnostics.TextWriterTraceListener></xref:System.Diagnostics.DefaultTraceListener></xref:System.Diagnostics.TraceListener.WriteIndent%2A>。 NeedIndent プロパティを設定する必要があります`true`たびにトレース出力をインデントする場合します。'
  syntax:
    content: protected bool NeedIndent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>出力することはできません。 インデント場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Diagnostics.TraceListener.NeedIndent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "書き込むトレース情報、データ オブジェクト、およびイベント情報をリスナー固有の出力。"
  remarks: "> [!IMPORTANT]> このメソッドは、アプリケーション コードで直接のメンバーによっても呼び出されるものではありません、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>を出力するトレース データを書き込む</xref:System.Diagnostics.TraceSource></xref:System.Diagnostics.Trace></xref:System.Diagnostics.Debug>。       既定の実装の書き込み、 `eventCache`、 `source`、`eventType`と`id`ヘッダーとトレースのフッター内のパラメーターです。 `data`パラメーターは、トレース メッセージの本文として書き込まれます。 `ToString` <xref:System.String></xref:System.String>オブジェクトに変換するデータ オブジェクトのメソッドを使用。"
  syntax:
    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "通常は、トレース イベントを生成したアプリケーションの名前、出力を識別するために使用する名前です。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "1 つ、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>トレースを発生させたイベントの種類を指定する値。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。"
    - id: data
      type: System.Object
      description: "出力するトレース データ。"
  overload: System.Diagnostics.TraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース情報、データ オブジェクトおよびイベント情報をリスナー固有の出力の配列に書き込みます。"
  remarks: "> [!IMPORTANT]> このメソッドは、アプリケーション コードで直接のメンバーによっても呼び出されるものではありません、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>を出力するトレース データを書き込む</xref:System.Diagnostics.TraceSource></xref:System.Diagnostics.Trace></xref:System.Diagnostics.Debug>。       既定の実装がの値を書き込みます、 `source`、`eventType`と`id`ヘッダーとして使用されるパラメーター。 データ オブジェクトを使用して文字列に変換されます、`ToString`各オブジェクトのメソッドです。 `eventCache`フッターの値に依存している出力データの性質としてデータが書き込まれる、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティ</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。"
  syntax:
    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "通常は、トレース イベントを生成したアプリケーションの名前、出力を識別するために使用する名前です。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "1 つ、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>トレースを発生させたイベントの種類を指定する値。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。"
    - id: data
      type: System.Object[]
      description: "データとして出力するオブジェクトの配列。"
  overload: System.Diagnostics.TraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "書き込みトレース情報およびイベント情報をリスナー固有の出力。"
  remarks: "> [!IMPORTANT]> このメソッドは、アプリケーション コードで直接のメンバーによっても呼び出されるものではありません、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>を出力するトレース データを書き込む</xref:System.Diagnostics.TraceSource></xref:System.Diagnostics.Trace></xref:System.Diagnostics.Debug>。       既定の実装がの値を書き込みます、 `source`、`eventType`と`id`ヘッダーとして使用されるパラメーター。 `eventCache`フッターの値に依存している出力データの性質としてデータが書き込まれる、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティ</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "通常は、トレース イベントを生成したアプリケーションの名前、出力を識別するために使用する名前です。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "1 つ、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>トレースを発生させたイベントの種類を指定する値。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。"
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース情報、メッセージ、およびイベント情報をリスナー固有の出力に書き込みます。"
  remarks: "> [!IMPORTANT]> このメソッドは、アプリケーション コードで直接のメンバーによっても呼び出されるものではありません、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>を出力するトレース データを書き込む</xref:System.Diagnostics.TraceSource></xref:System.Diagnostics.Trace></xref:System.Diagnostics.Debug>。       既定の実装がの値を書き込みます、 `source`、`eventType`と`id`、ヘッダーとして使用されるパラメーターが続く、`message`データ。 `eventCache`フッターの値に依存している出力データの性質としてデータが書き込まれる、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティ</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "通常は、トレース イベントを生成したアプリケーションの名前、出力を識別するために使用する名前です。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "1 つ、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>トレースを発生させたイベントの種類を指定する値。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。"
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース情報、オブジェクトおよびイベント情報をリスナー固有の出力の書式付き配列に書き込みます。"
  remarks: "> [!IMPORTANT]> このメソッドは、アプリケーション コードで直接のメンバーによっても呼び出されるものではありません、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>を出力するトレース データを書き込む</xref:System.Diagnostics.TraceSource></xref:System.Diagnostics.Trace></xref:System.Diagnostics.Debug>。       既定の実装がの値を書き込みます、 `source`、`eventType`と`id`ヘッダーとして使用されるパラメーター。 `args`オブジェクトの配列を使用して文字列に変換、<xref:System.String.Format%2A>渡して、メソッド、`format`文字列と`args`トレースのメッセージ部分として文字列を書式設定する配列</xref:System.String.Format%2A>。 `eventCache`フッターの値に依存している出力データの性質としてデータが書き込まれる、<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティ</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "通常は、トレース イベントを生成したアプリケーションの名前、出力を識別するために使用する名前です。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "1 つ、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>トレースを発生させたイベントの種類を指定する値。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。"
    - id: format
      type: System.String
      description: "書式指定文字列内のオブジェクトに対応する、0 個以上の書式項目を含む、`args`配列。"
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref>書式指定する&0; 個以上のオブジェクトを含む配列。"
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  id: TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得またはトレース出力オプションを設定します。"
  remarks: "TraceOutputOptions プロパティでは、トレース出力の省略可能な内容を判断します。 プロパティは、コードのセクションを具体的には追加のデータを含む構成ファイルまたはプログラムで実行中に設定できます。 たとえば、コンソール トレース リスナーの TraceOutputOptions プロパティを設定できます<xref:System.Diagnostics.TraceOptions?displayProperty=fullName>トレース出力にコール スタック情報を追加する</xref:System.Diagnostics.TraceOptions?displayProperty=fullName>。       <xref:System.Diagnostics.TraceOptions>列挙体は、次のクラスやメソッドでは使用されません-<xref:System.Diagnostics.EventLogTraceListener>大量のログに書き込まれるデータを引き起こす可能性があるため、クラス</xref:System.Diagnostics.EventLogTraceListener></xref:System.Diagnostics.TraceOptions>。      -`Write`と`WriteLine`のメソッド、 <xref:System.Diagnostics.ConsoleTraceListener>、 <xref:System.Diagnostics.DefaultTraceListener>、および<xref:System.Diagnostics.TextWriterTraceListener>クラス</xref:System.Diagnostics.TextWriterTraceListener></xref:System.Diagnostics.DefaultTraceListener></xref:System.Diagnostics.ConsoleTraceListener>。      -<xref:System.Diagnostics.TraceListener.Write%2A>と<xref:System.Diagnostics.TraceListener.WriteLine%2A><xref:System.Diagnostics.TraceListener>派生クラスでオーバーライドされないときにクラス</xref:System.Diagnostics.TraceListener>のメソッド</xref:System.Diagnostics.TraceListener.WriteLine%2A></xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example shows the setting of the TraceOutputOptions property for a console trace listener. The console trace listener is one of the listeners enumerated in the <xref:System.Diagnostics.TraceSource.Listeners%2A> property of a trace source. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \n  \n [!code-cs[System.Diagnostics.TraceSource2#16](~/add/codesnippet/csharp/p-system.diagnostics.tra_9_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource2#16](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_9_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceOptions TraceOutputOptions { get; set; }
    return:
      type: System.Diagnostics.TraceOptions
      description: "列挙値のビットごとの組み合わせ。 既定値は<xref href=&quot;System.Diagnostics.TraceOptions&quot;></xref>です。"
  overload: System.Diagnostics.TraceListener.TraceOutputOptions*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定操作では、値が有効ではないために失敗しました。"
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  id: TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース情報、メッセージ、関連するアクティビティ id、およびイベント情報をリスナー固有の出力に書き込みます。"
  remarks: "> [!IMPORTANT]> このメソッドは、アプリケーション コードで直接のメンバーによっても呼び出されるものではありません、 <xref:System.Diagnostics.Debug>、 <xref:System.Diagnostics.Trace>、および<xref:System.Diagnostics.TraceSource>を出力するトレース データを書き込む</xref:System.Diagnostics.TraceSource></xref:System.Diagnostics.Trace></xref:System.Diagnostics.Debug>。       <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>メソッドは、関連するトレースの相関関係を使用します</xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>。 TraceTransfer メソッドの呼び出し、 <xref:System.Diagnostics.TraceListener.TraceEvent%2A>eventType レベル設定されている呼び出しを処理するメソッド<xref:System.Diagnostics.TraceEventType>と`relatedActivityId`<xref:System.Guid>としてメッセージに追加される文字列</xref:System.Guid></xref:System.Diagnostics.TraceEventType></xref:System.Diagnostics.TraceListener.TraceEvent%2A>。"
  syntax:
    content: public virtual void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "通常は、トレース イベントを生成したアプリケーションの名前、出力を識別するために使用する名前です。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。"
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
    - id: relatedActivityId
      type: System.Guid
      description: "A<xref:System.Guid>関連アクティビティを識別するオブジェクト</xref:System.Guid>。"
  overload: System.Diagnostics.TraceListener.TraceTransfer*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(Object)
  nameWithType: TraceListener.Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "オブジェクトの値を書き込みます<xref:System.Object.ToString*>を実装する場合、作成したリスナーにメソッド、 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>クラス</xref:System.Object.ToString*>"
  syntax:
    content: public virtual void Write (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>を記述する完全修飾クラス名をもつ</xref:System.Object>。"
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: TraceListener.Write(String)
  fullName: System.Diagnostics.TraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "派生クラスでオーバーライドされると、指定したメッセージを書き込み、派生クラスで作成したリスナーにします。"
  syntax:
    content: public abstract void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(Object,String)
  nameWithType: TraceListener.Write(Object,String)
  fullName: System.Diagnostics.TraceListener.Write(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カテゴリ名とオブジェクトの値を書き込みます<xref:System.Object.ToString*>を実装する場合、作成したリスナーにメソッド、 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>クラス</xref:System.Object.ToString*>"
  syntax:
    content: public virtual void Write (object o, string category);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>を記述する完全修飾クラス名をもつ</xref:System.Object>。"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: TraceListener.Write(String,String)
  fullName: System.Diagnostics.TraceListener.Write(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カテゴリ名とメッセージを書き込みます、リスナーを実装するときに作成する、 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>クラスです。"
  syntax:
    content: public virtual void Write (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteIndent
  id: WriteIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteIndent()
  nameWithType: TraceListener.WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "このクラスを実装するときに作成するリスナーにインデントを書き込み、リセット、<xref:System.Diagnostics.TraceListener.NeedIndent*>プロパティを<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Diagnostics.TraceListener.NeedIndent*> 。"
  remarks: "このメソッドを選択し、インデントを書き込み、リセット、<xref:System.Diagnostics.TraceListener.NeedIndent%2A>プロパティを`false`</xref:System.Diagnostics.TraceListener.NeedIndent%2A>。 場合、このメソッドを呼び出す<xref:System.Diagnostics.TraceListener.NeedIndent%2A>は`true`オーバーライドして、<xref:System.Diagnostics.TraceListener.Write%2A>と<xref:System.Diagnostics.TraceListener.WriteLine%2A>メソッド</xref:System.Diagnostics.TraceListener.WriteLine%2A></xref:System.Diagnostics.TraceListener.Write%2A></xref:System.Diagnostics.TraceListener.NeedIndent%2A>。 既定は、このメソッドは、インデントに含まれている空白を使用します。 インデントのサイズの値によって決まります、<xref:System.Diagnostics.TraceListener.IndentSize%2A>と<xref:System.Diagnostics.TraceListener.IndentLevel%2A>プロパティ</xref:System.Diagnostics.TraceListener.IndentLevel%2A></xref:System.Diagnostics.TraceListener.IndentSize%2A>。 <xref:System.Diagnostics.TraceListener.IndentLevel%2A>プロパティを表す回数が指定したサイズのインデント、<xref:System.Diagnostics.TraceListener.IndentSize%2A>プロパティを適用します</xref:System.Diagnostics.TraceListener.IndentSize%2A></xref:System.Diagnostics.TraceListener.IndentLevel%2A>。 このメソッドは、<xref:System.Diagnostics.DefaultTraceListener>と<xref:System.Diagnostics.TextWriterTraceListener>クラス</xref:System.Diagnostics.TextWriterTraceListener></xref:System.Diagnostics.DefaultTraceListener>。"
  syntax:
    content: protected virtual void WriteIndent ();
    parameters: []
  overload: System.Diagnostics.TraceListener.WriteIndent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: TraceListener.WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "オブジェクトの値を書き込みます<xref:System.Object.ToString*>を実装する場合、作成したリスナーにメソッド、 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>クラス、続けて行終端記号</xref:System.Object.ToString*>。"
  remarks: "実装することが通常の行終端記号は、キャリッジ リターンとライン フィード (\\r) です。"
  syntax:
    content: public virtual void WriteLine (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>を記述する完全修飾クラス名をもつ</xref:System.Object>。"
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: TraceListener.WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "派生クラスでオーバーライドされると、リスナーにメッセージの書き込みする、派生クラスで作成、続けて行終端記号です。"
  remarks: "実装することが通常の行終端記号は、キャリッジ リターンとライン フィード (\\r) です。"
  syntax:
    content: public abstract void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(Object,String)
  nameWithType: TraceListener.WriteLine(Object,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カテゴリ名とオブジェクトの値を書き込みます<xref:System.Object.ToString*>を実装する場合、作成したリスナーにメソッド、 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>クラス、続けて行終端記号</xref:System.Object.ToString*>。"
  remarks: "実装することが通常の行終端記号は、キャリッジ リターンとライン フィード (\\r) です。"
  syntax:
    content: public virtual void WriteLine (object o, string category);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>を記述する完全修飾クラス名をもつ</xref:System.Object>。"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(String,String)
  nameWithType: TraceListener.WriteLine(String,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カテゴリ名とメッセージを書き込みます、リスナーを実装するときに作成する、 <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>クラス、続けて行終端記号です。"
  remarks: "実装することが通常の行終端記号は、キャリッジ リターンとライン フィード (\\r) です。"
  syntax:
    content: public virtual void WriteLine (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Diagnostics.TraceListener.#ctor
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener()
  nameWithType: TraceListener.TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener(String)
  nameWithType: TraceListener.TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.TraceListener.Attributes
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Attributes
  nameWithType: TraceListener.Attributes
  fullName: System.Diagnostics.TraceListener.Attributes
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Diagnostics.TraceListener.Close
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Close()
  nameWithType: TraceListener.Close()
  fullName: System.Diagnostics.TraceListener.Close()
- uid: System.Diagnostics.TraceListener.Dispose
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose()
  nameWithType: TraceListener.Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail(String)
  nameWithType: TraceListener.Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(String)
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail(String,String)
  nameWithType: TraceListener.Fail(String,String)
  fullName: System.Diagnostics.TraceListener.Fail(String,String)
- uid: System.Diagnostics.TraceListener.Filter
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Filter
  nameWithType: TraceListener.Filter
  fullName: System.Diagnostics.TraceListener.Filter
- uid: System.Diagnostics.TraceFilter
  parent: System.Diagnostics
  isExternal: false
  name: TraceFilter
  nameWithType: TraceFilter
  fullName: System.Diagnostics.TraceFilter
- uid: System.Diagnostics.TraceListener.Flush
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Flush()
  nameWithType: TraceListener.Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: GetSupportedAttributes()
  nameWithType: TraceListener.GetSupportedAttributes()
  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.TraceListener.IndentLevel
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.TraceListener.IndentSize
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentSize
  nameWithType: TraceListener.IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
- uid: System.Diagnostics.TraceListener.Name
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Name
  nameWithType: TraceListener.Name
  fullName: System.Diagnostics.TraceListener.Name
- uid: System.Diagnostics.TraceListener.NeedIndent
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
- uid: System.Diagnostics.TraceOptions
  parent: System.Diagnostics
  isExternal: false
  name: TraceOptions
  nameWithType: TraceOptions
  fullName: System.Diagnostics.TraceOptions
- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(Object)
  nameWithType: TraceListener.Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(Object)
- uid: System.Diagnostics.TraceListener.Write(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(String)
  nameWithType: TraceListener.Write(String)
  fullName: System.Diagnostics.TraceListener.Write(String)
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(Object,String)
  nameWithType: TraceListener.Write(Object,String)
  fullName: System.Diagnostics.TraceListener.Write(Object,String)
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(String,String)
  nameWithType: TraceListener.Write(String,String)
  fullName: System.Diagnostics.TraceListener.Write(String,String)
- uid: System.Diagnostics.TraceListener.WriteIndent
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteIndent()
  nameWithType: TraceListener.WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(Object)
  nameWithType: TraceListener.WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object)
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: TraceListener.WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String)
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(Object,String)
  nameWithType: TraceListener.WriteLine(Object,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(String,String)
  nameWithType: TraceListener.WriteLine(String,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)
- uid: System.Diagnostics.TraceListener.#ctor*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener
  nameWithType: TraceListener.TraceListener
- uid: System.Diagnostics.TraceListener.Attributes*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Attributes
  nameWithType: TraceListener.Attributes
- uid: System.Diagnostics.TraceListener.Close*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Close
  nameWithType: TraceListener.Close
- uid: System.Diagnostics.TraceListener.Dispose*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose
  nameWithType: TraceListener.Dispose
- uid: System.Diagnostics.TraceListener.Fail*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail
  nameWithType: TraceListener.Fail
- uid: System.Diagnostics.TraceListener.Filter*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Filter
  nameWithType: TraceListener.Filter
- uid: System.Diagnostics.TraceListener.Flush*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Flush
  nameWithType: TraceListener.Flush
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: GetSupportedAttributes
  nameWithType: TraceListener.GetSupportedAttributes
- uid: System.Diagnostics.TraceListener.IndentLevel*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
- uid: System.Diagnostics.TraceListener.IndentSize*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentSize
  nameWithType: TraceListener.IndentSize
- uid: System.Diagnostics.TraceListener.IsThreadSafe*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
- uid: System.Diagnostics.TraceListener.Name*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Name
  nameWithType: TraceListener.Name
- uid: System.Diagnostics.TraceListener.NeedIndent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
- uid: System.Diagnostics.TraceListener.TraceData*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData
  nameWithType: TraceListener.TraceData
- uid: System.Diagnostics.TraceListener.TraceEvent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: TraceListener.TraceEvent
- uid: System.Diagnostics.TraceListener.TraceOutputOptions*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
- uid: System.Diagnostics.TraceListener.TraceTransfer*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceTransfer
  nameWithType: TraceListener.TraceTransfer
- uid: System.Diagnostics.TraceListener.Write*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write
  nameWithType: TraceListener.Write
- uid: System.Diagnostics.TraceListener.WriteIndent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteIndent
  nameWithType: TraceListener.WriteIndent
- uid: System.Diagnostics.TraceListener.WriteLine*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine
  nameWithType: TraceListener.WriteLine
