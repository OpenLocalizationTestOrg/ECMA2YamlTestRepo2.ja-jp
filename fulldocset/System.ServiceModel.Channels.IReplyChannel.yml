### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Channels.IReplyChannel
  id: IReplyChannel
  children:
  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  - System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  - System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  - System.ServiceModel.Channels.IReplyChannel.LocalAddress
  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  - System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  - System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  langs:
  - csharp
  name: IReplyChannel
  nameWithType: IReplyChannel
  fullName: System.ServiceModel.Channels.IReplyChannel
  type: Interface
  summary: "チャネルがメッセージング エンドポイント間の要求/応答通信の受信側になるために実装する必要があります、インターフェイスを定義します。"
  remarks: "IReplyChannel インターフェイスには、同期および非同期のバリエーションが含まれています、<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>メソッドの戻り値、<xref:System.ServiceModel.Channels.RequestContext>受信した要求に対する応答を構築するために使用できる</xref:System.ServiceModel.Channels.RequestContext></xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>。       コントラクトには、受信、受信 try およびメッセージ用の待機の機能の同期および非同期のバリエーションが含まれています。       必ずしも、IReplyChannel は、単一の送信者にはバインドされません。 その他のチャネルおよびチャネル インターフェイスは、送信側と応答チャネル間の相関関係を提供しますが、基本コントラクトにはこのような制限はありません。       プル モデルは、メッセージを受信する、IReplyChannel で使用されます。 このモデルは、呼び出し元の<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>(またはそのバリエーションの&1; つ)、メッセージが到着するを待機しています</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>。"
  syntax:
    content: 'public interface IReplyChannel : System.ServiceModel.Channels.IChannel'
  implements:
  - System.ServiceModel.Channels.IChannel
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  id: BeginReceiveRequest(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginReceiveRequest(AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "既定のタイムアウトで使用可能な要求を受信する非同期操作を開始します。"
  remarks: "BeginReceiveRequest メソッドを呼び出すための標準パターンを実装する<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest>非同期的にします</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest>。 既定のタイムアウトは、1 分です。 接続を構成するために使用するバインディングで受信タイムアウトを設定すると、その値が使用されます。 使用して<xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>これら他の値をオーバーライドする呼び出しで明示的なタイムアウトを指定するかどうか</xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>。       受信要求メッセージ、最大メッセージ サイズが使用されるバインドで許可されているを超える場合は、<xref:System.ServiceModel.QuotaExceededException>がスローされます</xref:System.ServiceModel.QuotaExceededException>。 メッセージの最大サイズを設定、<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>プロパティ</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>。 既定値は 65536 バイトです。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#1](~/add/codesnippet/csharp/b714b94c-13fc-4c03-a779-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>非同期の通知を受信するデリゲートは、要求操作が完了したことを受信します</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "要求操作の非同期受信に関連付けられている状態情報を格納する、アプリケーションで指定されたオブジェクト。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>要求の非同期受信を参照する</xref:System.IAsyncResult>。"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "タイムアウトを指定して使用可能な要求を受信する非同期操作を開始します。"
  remarks: "BeginReceiveRequest メソッドを呼び出すための標準パターンを実装する<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>非同期的にします</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>。 このメソッドで設定するタイムアウトは、受信タイムアウトの接続を構成するために使用されるバインディングの設定を上書きします。       受信要求メッセージ、最大メッセージ サイズが使用されるバインドで許可されているを超える場合は、<xref:System.ServiceModel.QuotaExceededException>がスローされます</xref:System.ServiceModel.QuotaExceededException>。 メッセージの最大サイズを設定、<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>プロパティ</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>。 既定値は 65536 バイトです。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#2](~/add/codesnippet/csharp/6f48cd8d-c63c-4708-86c4-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>使用可能な要求の受信を待機する時間の間隔を指定します</xref:System.TimeSpan>。"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>非同期の通知を受信するデリゲートは、要求操作が完了したことを受信します</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "要求操作の非同期受信に関連付けられている状態情報を格納する、アプリケーションで指定されたオブジェクト。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>要求の非同期受信を参照する</xref:System.IAsyncResult>。"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "指定したタイムアウトと状態オブジェクトが関連付けられている要求メッセージを受信する非同期操作を開始します。"
  remarks: "アプリケーションの処理を待機せずに続行する必要がある場合は、非同期の BeginTryReceiveRequest メソッドを使用します。 1 つの同期を使用して<xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>メソッドが、現在のスレッドが要求メッセージに、またはタイムアウト間隔が経過するまでに応答している間にブロックされてもかまわない場合</xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>。       このメソッドは、通知をコールバックを通じて操作のイベント ハンドラーの id を受け取ります。 操作は、メッセージがチャネルで使用できるようになるか、タイムアウトが発生するまでは完了しません。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#5](~/add/codesnippet/csharp/cdb71277-0f0f-4e22-85af-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>がタイムアウトして返す前に完了する要求の受信操作の時間を指定する<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.TimeSpan> 。"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>非同期の通知を受信するデリゲートは、要求操作が完了したことを受信します</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "要求操作の非同期受信に関連付けられている状態情報を格納する、アプリケーションで指定されたオブジェクト。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>要求の非同期受信操作を参照する</xref:System.IAsyncResult>。"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "指定したタイムアウトと状態オブジェクトが関連付けられている要求の非同期操作を開始します。"
  remarks: "同期を使用して<xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>メソッドが、現在のスレッドがキューに到着する要求メッセージを待機している間にブロックされてもかまわない場合</xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>。 指定したスレッドがブロックを`timeout`です。       このメソッドは、通知をコールバックを通じて操作のイベント ハンドラーの id を受け取ります。 要求メッセージがチャネルで使用できるようになるとしているか、タイムアウトが発生するまで、操作は完了しません。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#10](~/add/codesnippet/csharp/80573a5a-f5c0-4be0-a875-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>使用可能な要求の受信を待機する時間の間隔を指定します</xref:System.TimeSpan>。"
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>非同期の通知を受信するデリゲートは、要求操作が完了したことを受信します</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "要求操作の非同期受信に関連付けられている状態情報を格納する、アプリケーションで指定されたオブジェクト。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>要求メッセージが到着するまで待機する非同期操作を参照する</xref:System.IAsyncResult>。"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  id: EndReceiveRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndReceiveRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "使用可能な要求を受信する非同期操作を完了します。"
  remarks: "受信要求メッセージ、最大メッセージ サイズが使用されるバインドで許可されているを超える場合は、<xref:System.ServiceModel.QuotaExceededException>がスローされます</xref:System.ServiceModel.QuotaExceededException>。 メッセージの最大サイズを設定、<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>プロパティ</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>。 既定値は 65536 バイトです。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#3](~/add/codesnippet/csharp/c3561a14-d2f1-46f1-99c2-_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返される、<xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*>メソッド</xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*></xref:System.IAsyncResult>。"
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>要求に対する応答を構築するために使用します</xref:System.ServiceModel.Channels.RequestContext>。"
  overload: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  id: EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndTryReceiveRequest(IAsyncResult,RequestContext)
  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "要求メッセージを受信する指定した非同期操作を完了します。"
  remarks: ''
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#6](~/add/codesnippet/csharp/2c432ec9-bfc6-46e4-8a1c-_1.cs)]"
  syntax:
    content: public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返される、 &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;メソッド</xref:System.IAsyncResult>。"
    - id: context
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>受け取りました</xref:System.ServiceModel.Channels.RequestContext>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定した期間が経過; の前に要求メッセージを受信する場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  id: EndWaitForRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndWaitForRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "指定した非同期の要求用の待機メッセージの処理を完了します。"
  remarks: ''
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#11](~/add/codesnippet/csharp/fc7d466d-2acc-417f-aa1b-_1.cs)]"
  syntax:
    content: public bool EndWaitForRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>を識別する、 &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;操作が終了して、最終的な結果を取得する</xref:System.IAsyncResult>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定した期間が経過; の前に、要求を受け取った場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  id: LocalAddress
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "この応答チャネルがメッセージを受信するアドレスを取得します。"
  remarks: ''
  example:
  - "The following code illustrates how to implement this property:  \n  \n [!code-cs[S_UE_MessageInterceptor#0](~/add/codesnippet/csharp/p-system.servicemodel.ch_2_1.cs)]"
  syntax:
    content: public System.ServiceModel.EndpointAddress LocalAddress { get; }
    return:
      type: System.ServiceModel.EndpointAddress
      description: "<xref:System.ServiceModel.EndpointAddress>この応答チャネルがメッセージを受信する</xref:System.ServiceModel.EndpointAddress>。"
  overload: System.ServiceModel.Channels.IReplyChannel.LocalAddress*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  id: ReceiveRequest
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: ReceiveRequest()
  nameWithType: IReplyChannel.ReceiveRequest()
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "1 つが利用可能な場合は、受信した要求のコンテキストを返します。 コンテキストが使用できない場合ができるまで待機します。"
  remarks: "<xref:System.ServiceModel.Channels.RequestContext>要求メッセージとそのメッセージに返信するためのメカニズムをカプセル化します。</xref:System.ServiceModel.Channels.RequestContext>       ReceiveRequest を呼び出すことが複数回または同時に行います。 受信した要求ごとに&1; つだけの ReceiveRequest 呼び出しが完了しました。       受信要求メッセージ、最大メッセージ サイズが使用されるバインドで許可されているを超える場合は、<xref:System.ServiceModel.QuotaExceededException>がスローされます</xref:System.ServiceModel.QuotaExceededException>。 メッセージの最大サイズを設定、<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>プロパティ</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>。 既定値は 65536 バイトです。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#7](~/add/codesnippet/csharp/m-system.servicemodel.ch_9_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest ();
    parameters: []
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>応答の作成に使用します</xref:System.ServiceModel.Channels.RequestContext>。"
  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  id: ReceiveRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: ReceiveRequest(TimeSpan)
  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "1 つが利用可能な場合は、受信した要求のコンテキストを返します。 コンテキストが使用できない場合ができるまで待機します。"
  remarks: "<xref:System.ServiceModel.Channels.RequestContext>要求メッセージとそのメッセージに返信するためのメカニズムをカプセル化します。</xref:System.ServiceModel.Channels.RequestContext>       <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>複数回呼び出すことができます、または同時にします。</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 1 つだけ<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>受信した要求ごとに呼び出しが完了する</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>。       受信要求メッセージ、最大メッセージ サイズが使用されるバインドで許可されているを超える場合は、<xref:System.ServiceModel.QuotaExceededException>がスローされます</xref:System.ServiceModel.QuotaExceededException>。 メッセージの最大サイズを設定、<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>プロパティ</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>。 既定値は 65536 バイトです。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#8](~/add/codesnippet/csharp/m-system.servicemodel.ch_3_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>要求操作の受信がタイムアウトして返す前に完了する必要がある期間を指定する<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.TimeSpan> 。"
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>応答の作成に使用します</xref:System.ServiceModel.Channels.RequestContext>。"
  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  id: TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: TryReceiveRequest(TimeSpan,RequestContext)
  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "指定した期間が経過する前に、要求を受け取ったかどうかを示す値を返します。"
  remarks: "現在のスレッドがキューに到着する要求メッセージを待機している間にブロックされてもかまわない場合は、TryReceiveRequest を使用します。 指定したスレッドがブロックを`timeout`です。 アプリケーションの処理を待機せずに続行する場合を使用して、非同期<xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>メソッド</xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#4](~/add/codesnippet/csharp/78581c5e-1028-4e54-ba3b-_1.cs)]"
  syntax:
    content: public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>要求操作の受信がタイムアウトして返す前に完了する必要がある期間を指定する<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.TimeSpan> 。"
    - id: context
      type: System.ServiceModel.Channels.RequestContext
      description: "<xref:System.ServiceModel.Channels.RequestContext>受け取りました</xref:System.ServiceModel.Channels.RequestContext>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定した期間が経過; の前に要求メッセージを受信する場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  id: WaitForRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: WaitForRequest(TimeSpan)
  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "指定した期間が経過する前に要求メッセージを受信するかどうかを示す値を返します。"
  remarks: "WaitForRequest を呼び出していない結果が受信または任意の方法で処理される要求メッセージ。       <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>メソッドは、主に、トランザクション処理のシナリオでユーザーがトランザクションを使用してメッセージを受信するが存在しています</xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>。 だけを使用する場合<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>これには、通常のユーザー必要があります、トランザクションを作成して、呼び出す<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>し、トランザクションがタイムアウトするまで、できない可能性がありますメッセージが到着することを期待します</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A></xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>。       代わりに、ユーザーことができます WaitForRequest を呼び出してタイムアウト (無限も可能) を指定し、トランザクションを開くことができます、メッセージが到着したときに呼び出す<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>し、トランザクションの有効期限が切れる前に、メッセージを入手できることが保証されます</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>。       現在のスレッドがキューに到着するメッセージを待機している間にブロックされてもかまわない場合は、WaitForRequest を使用します。 指定したスレッドがブロックを`timeout`です。 アプリケーションの処理を待機せずに続行する場合を使用して、非同期<xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>メソッド</xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>。"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#9](~/add/codesnippet/csharp/m-system.servicemodel.ch_6_1.cs)]"
  syntax:
    content: public bool WaitForRequest (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>要求時間を指定する操作がタイムアウトして返す前に完了する必要がある<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.TimeSpan> 。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定した期間が経過; の前に、要求を受け取った場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest(AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndReceiveRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(IAsyncResult)
- uid: System.ServiceModel.Channels.RequestContext
  parent: System.ServiceModel.Channels
  isExternal: true
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.ServiceModel.Channels.RequestContext
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndTryReceiveRequest(IAsyncResult,RequestContext)
  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndWaitForRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(IAsyncResult)
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: System.ServiceModel.Channels.IReplyChannel.LocalAddress
- uid: System.ServiceModel.EndpointAddress
  parent: System.ServiceModel
  isExternal: true
  name: EndpointAddress
  nameWithType: EndpointAddress
  fullName: System.ServiceModel.EndpointAddress
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest()
  nameWithType: IReplyChannel.ReceiveRequest()
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest()
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest(TimeSpan)
  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(TimeSpan)
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: TryReceiveRequest(TimeSpan,RequestContext)
  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: WaitForRequest(TimeSpan)
  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(TimeSpan)
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest
  nameWithType: IReplyChannel.BeginReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginTryReceiveRequest
  nameWithType: IReplyChannel.BeginTryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginWaitForRequest
  nameWithType: IReplyChannel.BeginWaitForRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndReceiveRequest
  nameWithType: IReplyChannel.EndReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndTryReceiveRequest
  nameWithType: IReplyChannel.EndTryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndWaitForRequest
  nameWithType: IReplyChannel.EndWaitForRequest
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest
  nameWithType: IReplyChannel.ReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: TryReceiveRequest
  nameWithType: IReplyChannel.TryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: WaitForRequest
  nameWithType: IReplyChannel.WaitForRequest
