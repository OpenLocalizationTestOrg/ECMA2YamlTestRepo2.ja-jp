### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.TtsEngine.TextFragment
  id: TextFragment
  children:
  - System.Speech.Synthesis.TtsEngine.TextFragment.#ctor
  - System.Speech.Synthesis.TtsEngine.TextFragment.State
  - System.Speech.Synthesis.TtsEngine.TextFragment.TextLength
  - System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset
  - System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak
  langs:
  - csharp
  name: TextFragment
  nameWithType: TextFragment
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment
  type: Class
  summary: "音声 synthsizer エンジンによって消費量のテキストと音声の属性情報が含まれています。"
  remarks: "音声プラットフォームのインフラストラクチャでは、入力 SSML の XML ベースの構造をアンパックして、TextFragment オブジェクトを構築します。       音声コンテンツがを介して使用できる、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>、および<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>TextFragment インスタンスのプロパティ</xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A></xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A></xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>。       音声の属性については、重点を置いて、ピッチ、およびレートがから取得したなど、 <xref:System.Speech.Synthesis.TtsEngine.FragmentState>、TextFragment によって返されるオブジェクト<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>プロパティ</xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A></xref:System.Speech.Synthesis.TtsEngine.FragmentState>。"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of TextFragment, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of TextFragment instances and creates a new array of TextFragment instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n     Particular care is used to respect the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> on the original TextFragment when creating the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> on the new TextFragment instances.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each TextFragment instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified TextFragment array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public class TextFragment
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor
  id: '#ctor'
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  langs:
  - csharp
  name: TextFragment()
  nameWithType: TextFragment.TextFragment()
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextFragment()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "新しいインスタンスを構築<xref uid=&quot;langword_csharp_TextFragment&quot; name=&quot;TextFragment&quot; href=&quot;&quot;></xref>です。"
  remarks: "<xref:System.Speech.Synthesis.TtsEngine.TextFragment>。</xref:System.Speech.Synthesis.TtsEngine.TextFragment>の既定のコンス トラクター"
  syntax:
    content: public TextFragment ();
    parameters: []
  overload: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.State
  id: State
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  langs:
  - csharp
  name: State
  nameWithType: TextFragment.State
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.State
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "音声属性情報を取得または設定、 <xref uid=&quot;langword_csharp_TextFragment&quot; name=&quot;TextFragment&quot; href=&quot;&quot;></xref>です。"
  remarks: "このプロパティの既定値は`null`します。       インスタンスから prosody 情報を取得できます<xref:System.Speech.Synthesis.TtsEngine.Prosody>によって返される、<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A>のインスタンスのプロパティに<xref:System.Speech.Synthesis.TtsEngine.FragmentState>状態によって返される</xref:System.Speech.Synthesis.TtsEngine.FragmentState></xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A></xref:System.Speech.Synthesis.TtsEngine.Prosody>。"
  syntax:
    content: public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }
    return:
      type: System.Speech.Synthesis.TtsEngine.FragmentState
      description: "A <xref href=&quot;System.Speech.Synthesis.TtsEngine.FragmentState&quot;> </xref>インスタンスが返される、または音声の属性情報を設定するために使用する<xref href=&quot;System.Speech.Synthesis.TtsEngine.TextFragment&quot;></xref>です。"
  overload: System.Speech.Synthesis.TtsEngine.TextFragment.State*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength
  id: TextLength
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  langs:
  - csharp
  name: TextLength
  nameWithType: TextFragment.TextLength
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "取得またはフラグメントで音声テキストの長さを設定します。"
  remarks: "このプロパティの既定値は 0 です。"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n     Particular care is used to respect the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, TextLength on the original <xref:System.Speech.Synthesis.TtsEngine.TextFragment> when creating the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> on the new <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public int TextLength { get; set; }
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;> </xref>が返されるか、文字、読み上げるには、このフラグメントに関連付けられているテキスト文字列の長さを設定するために使用できます。"
  overload: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset
  id: TextOffset
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  langs:
  - csharp
  name: TextOffset
  nameWithType: TextFragment.TextOffset
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "取得またはフラグメント内のテキストの開始位置を設定します。"
  remarks: "このプロパティの既定値は 0 です。"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n     Particular care is used to respect the TextOffset, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> on the original <xref:System.Speech.Synthesis.TtsEngine.TextFragment> when creating the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> on the new <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public int TextOffset { get; set; }
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;> </xref>が返されるか、文字、読み上げるには、このフラグメントに関連付けられているテキスト文字列の一部の開始位置を設定するために使用できます。"
  overload: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak
  id: TextToSpeak
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  langs:
  - csharp
  name: TextToSpeak
  nameWithType: TextFragment.TextToSpeak
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "設定またはフラグメントの音声のテキストを取得します。"
  remarks: "このプロパティの既定値は`System.String.Empty`します。       アプリケーションでは完全に TextToSpeak の値を変更します。       TextToSpeak の値をリセットしても<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>と<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>。</xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A></xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>の値は変更されません。"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n     Particular care is used to respect the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> on the original <xref:System.Speech.Synthesis.TtsEngine.TextFragment> when creating the TextToSpeak on the new <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public string TextToSpeak { get; set; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_System.String&quot; name=&quot;System.String&quot; href=&quot;&quot;> </xref>が返されるか、オーディオ出力を生成する音声複合エンジンで使用する音声のテキストを設定するために使用できます。"
  overload: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextFragment()
  nameWithType: TextFragment.TextFragment()
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextFragment()
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.State
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: State
  nameWithType: TextFragment.State
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.State
- uid: System.Speech.Synthesis.TtsEngine.FragmentState
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: FragmentState
  nameWithType: FragmentState
  fullName: System.Speech.Synthesis.TtsEngine.FragmentState
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextLength
  nameWithType: TextFragment.TextLength
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextOffset
  nameWithType: TextFragment.TextOffset
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextToSpeak
  nameWithType: TextFragment.TextToSpeak
  fullName: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.#ctor*
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextFragment
  nameWithType: TextFragment.TextFragment
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.State*
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: State
  nameWithType: TextFragment.State
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextLength*
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextLength
  nameWithType: TextFragment.TextLength
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset*
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextOffset
  nameWithType: TextFragment.TextOffset
- uid: System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak*
  parent: System.Speech.Synthesis.TtsEngine.TextFragment
  isExternal: false
  name: TextToSpeak
  nameWithType: TextFragment.TextToSpeak
