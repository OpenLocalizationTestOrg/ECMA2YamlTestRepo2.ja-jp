### YamlMime:ManagedReference
items:
- uid: System.Globalization.SortKey
  id: SortKey
  children:
  - System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  - System.Globalization.SortKey.Equals(System.Object)
  - System.Globalization.SortKey.GetHashCode
  - System.Globalization.SortKey.KeyData
  - System.Globalization.SortKey.OriginalString
  - System.Globalization.SortKey.ToString
  langs:
  - csharp
  name: SortKey
  nameWithType: SortKey
  fullName: System.Globalization.SortKey
  type: Class
  summary: "マッピングとその並べ替えキーの文字列の結果を表します。"
  remarks: "2 つの文字列のカルチャに依存した比較は、ここと発音の区別の重みをいくつかのカテゴリの並べ替えウェイト、スクリプト、アルファベットを持つ文字列内の各文字に依存します。 並べ替えキーは、特定の文字列をこれらの規則のリポジトリとして機能します。       <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>メソッドは、指定した文字列の文字のカルチャに依存したマッピングを反映する SortKey クラスのインスタンスを返します</xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>。 SortKey オブジェクトの値がキーのデータ、によって返される、<xref:System.Globalization.SortKey.KeyData%2A>プロパティ</xref:System.Globalization.SortKey.KeyData%2A>。 このキーのデータは、一連の文字列、カルチャに固有の並べ替え規則、およびユーザーが指定した比較オプションをエンコードするバイトで構成されます。 並べ替えキーを使用して、比較は、それぞれの並べ替えキーに対応するキーのデータのビットごとの比較で構成されます。  たとえば、呼び出すことにより、並べ替えキーを作成する場合、<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>の値を持つメソッド<xref:System.Globalization.CompareOptions?displayProperty=fullName>、並べ替えキーを使用する文字列比較操作が区別されません</xref:System.Globalization.CompareOptions?displayProperty=fullName></xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>。       静的なを呼び出すことによって、並べ替えキーを比較する文字列の並べ替えキーを作成したら、<xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName>メソッド</xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName>。 このメソッドには、単純なバイトで比較が実行するよりもはるかに高速であるため、<xref:System.String.Compare%2A?displayProperty=fullName>または<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>メソッド</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName></xref:System.String.Compare%2A?displayProperty=fullName>。      ## 文字列の比較を実行するときのパフォーマンスに関する考慮事項、<xref:System.Globalization.SortKey.Compare%2A>と<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>メソッドによって、同じ結果が生成が、ターゲットとさまざまなシナリオです</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName></xref:System.Globalization.SortKey.Compare%2A>。       大まかに言えば、<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>メソッド各文字列の並べ替えキーを生成、比較の実行し並べ替えキーを破棄し、比較の結果を返します</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>。 ただし、<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>メソッドは実際には、比較を実行する全体の並べ替えキーを生成しません</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>。 代わりに、メソッドは、それぞれの文字列 (つまり、基本文字、サロゲート ペア、または組み合わせ文字シーケンス) の各テキスト要素のキー データを生成します。 メソッドは、対応するテキスト要素のキー データを比較します。 操作は、比較の最終的な結果を特定するとすぐに終了します。 並べ替えキーの情報は計算が SortKey オブジェクトは作成されません。 この戦略は両方の文字列が&1; 回、比較する場合は、パフォーマンスの観点から経済的ですが、同じ文字列が複数回を比較する場合に負荷が高くなります。       <xref:System.Globalization.SortKey.Compare%2A>メソッド比較を実行する前に各文字列の SortKey オブジェクトの生成が必要です</xref:System.Globalization.SortKey.Compare%2A>。 この方法は、時間とメモリの方に割り当てて SortKey オブジェクトを生成するため、最初に比較のパフォーマンスが低下します。 ただし、同じ並べ替えキーが複数回を比較する場合、パフォーマンスが向上します。       たとえば、文字列ベースのインデックス列に指定した検索文字列が一致する行をデータベース テーブルを検索するアプリケーションを記述するとします。 テーブルには、数千行が含まれています。 し、時間がかかるは各の行にインデックスを検索文字列を比較します。 そのため、アプリケーションは、そのインデックス列と行を格納するときもを生成し、検索のパフォーマンスを向上させるために専用の列にインデックスの並べ替えキーを格納します。 アプリケーションは、対象の行を検索する場合は、文字列の並べ替えキー、インデックス、インデックス文字列に検索文字列を比較するのではなくする検索文字列の並べ替えキーを比較します。      ## セキュリティに関する考慮事項、<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>メソッドは、指定した文字列に基づいて値を持つ SortKey オブジェクトを返しますと<xref:System.Globalization.CompareOptions>値、および基になるに関連付けられているカルチャ<xref:System.Globalization.CompareInfo>オブジェクト</xref:System.Globalization.CompareInfo></xref:System.Globalization.CompareOptions></xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>。 使用する必要があります、セキュリティ上の決定は、文字列の比較またはケース変更に依存する場合、<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>操作の動作が、オペレーティング システムのカルチャ設定に関係なく、一貫性のあることを確認するインバリアント カルチャのメソッド</xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>。       次の手順を使用して並べ替えキーを取得します。 1。  インバリアント カルチャを取得、<xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName>プロパティ</xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName>。      2.  取得、<xref:System.Globalization.CompareInfo>からインバリアント カルチャ オブジェクト、<xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName>プロパティ</xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName></xref:System.Globalization.CompareInfo>。      3.  呼び出す、<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>メソッド</xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>。       並べ替えの値を扱うオブジェクトは、Windows `LCMapString` LCMAP_SORTKEY に指定された値を持つメソッドです。 ただし、英語の文字の並べ替えキー SortKey オブジェクトでは、韓国語の文字の並べ替えキーの前にします。       SortKey オブジェクトをシリアル化されたのみすることができますに交差していないように<xref:System.AppDomain>オブジェクト</xref:System.AppDomain>。 場合は、アプリケーションは、SortKey オブジェクトをシリアル化、アプリケーションする必要がありますを再生成のすべての並べ替えキー、.NET Framework の新しいバージョンがある場合。       並べ替えキーの詳細についてで Unicode 技術標準 10、「Unicode 照合アルゴリズム」を参照して、 [Unicode コンソーシアムの web サイト](http://go.microsoft.com/fwlink/?linkid=37123)です。"
  example:
  - "The following example compares the string \"llama\" using the \"en-US\" and \"es-ES\" cultures, and the \"en-US\" and \"es-ES\" traditional cultures.  \n  \n [!code-cpp[System.Globalization.SortKey.Compare#1](~/add/codesnippet/cpp/t-system.globalization.s_1_1.cpp)]\n [!code-cs[System.Globalization.SortKey.Compare#1](~/add/codesnippet/csharp/t-system.globalization.s_1_1.cs)]\n [!code-vb[System.Globalization.SortKey.Compare#1](~/add/codesnippet/visualbasic/t-system.globalization.s_1_1.vb)]  \n  \n The following example shows how you can use the SortKey class to improve performance in an application that relies extensively on sorting and searching a large array. The example creates an unordered array of names, which in this case has 13 elements. It then stores the sort key of each name in a parallel array, which it passes to the <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=fullName> method. The result is a sorted array. The example then searches the array for three strings. For each search string, it calls the <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> method to retrieve the string's sort key, and then calls the <xref:System.Array.FindIndex%2A?displayProperty=fullName> method to retrieve the index of that sort key in the array of sort keys. Because the name and sort key arrays are parallel, the returned index is also the index of the name in the `names` array.  \n  \n [!code-vb[System.Globalization.SortKey.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.s_1_2.vb)]\n [!code-cs[System.Globalization.SortKey.Class#1](~/add/codesnippet/csharp/t-system.globalization.s_1_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  id: Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: Compare(SortKey,SortKey)
  nameWithType: SortKey.Compare(SortKey,SortKey)
  fullName: System.Globalization.SortKey.Compare(SortKey,SortKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "2 つの並べ替えキーを比較します。"
  remarks: "Compare メソッドを比較して、<xref:System.Globalization.SortKey.KeyData%2A>のプロパティ、`sortkey1`と`sortkey2`パラメーター</xref:System.Globalization.SortKey.KeyData%2A> 。 メソッドと同じ結果が得られます、<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>メソッド</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>。       Compare メソッドと並べ替えキーの比較に関する詳細については、次を参照してください、<xref:System.Globalization.SortKey>クラスに関するトピック。</xref:System.Globalization.SortKey> 。"
  example:
  - "The following code example compares two strings using the Compare method and the equivalent <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> method.  \n  \n [!code-cs[sys.glob.sortkey.compare#1](~/add/codesnippet/csharp/4647647d-ce80-4fb7-82b7-_1.cs)]\n [!code-vb[sys.glob.sortkey.compare#1](~/add/codesnippet/visualbasic/4647647d-ce80-4fb7-82b7-_1.vb)]"
  syntax:
    content: public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);
    parameters:
    - id: sortkey1
      type: System.Globalization.SortKey
      description: "比較する最初の並べ替えキー。"
    - id: sortkey2
      type: System.Globalization.SortKey
      description: "比較する&2; 番目の並べ替えキー。"
    return:
      type: System.Int32
      description: "間のリレーションシップを示す符号付き整数<code> sortkey1 </code>と<code> sortkey2</code>です。       <table><thead><tr><th> 値       </th><th> 条件       </th></tr></thead><tbody><tr><td> 0 より小さい値       </td><td><code>sortkey1</code>is less than <code>sortkey2</code>.       </td></tr><tr><td> 0       </td><td><code>sortkey1</code>is equal to <code>sortkey2</code>.       </td></tr><tr><td> 0 より大きい値       </td><td><code>sortkey1</code>大きい<code> sortkey2</code>です。       </td></tr></tbody></table>"
  overload: System.Globalization.SortKey.Compare*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sortkey1</code>or <code>sortkey2</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.SortKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SortKey.Equals(Object)
  fullName: System.Globalization.SortKey.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指定したオブジェクトが現在と等しいかどうかを判断<xref href=&quot;System.Globalization.SortKey&quot;></xref>オブジェクト。"
  remarks: "2 つ<xref:System.Globalization.SortKey>場合、オブジェクトが等しいかどうかと見なされます、<xref:System.Globalization.SortKey.KeyData%2A>プロパティが等しい</xref:System.Globalization.SortKey.KeyData%2A></xref:System.Globalization.SortKey>。       このメソッドは<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>"
  example:
  - "The following code example shows the results of Equals when compared with different <xref:System.Globalization.SortKey> objects.  \n  \n [!code-vb[System.Globalization.SortKey.Equals#1](~/add/codesnippet/visualbasic/m-system.globalization.s_0_1.vb)]\n [!code-cpp[System.Globalization.SortKey.Equals#1](~/add/codesnippet/cpp/m-system.globalization.s_0_1.cpp)]\n [!code-cs[System.Globalization.SortKey.Equals#1](~/add/codesnippet/csharp/m-system.globalization.s_0_1.cs)]"
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: "現在と比較するオブジェクト<xref href=&quot;System.Globalization.SortKey&quot;></xref>オブジェクト。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <code> value </code>パラメーターが現在に等しい<xref href=&quot;System.Globalization.SortKey&quot;></xref>オブジェクト。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Globalization.SortKey.Equals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.SortKey.GetHashCode
  id: GetHashCode
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SortKey.GetHashCode()
  fullName: System.Globalization.SortKey.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "現在のハッシュ関数として機能<xref href=&quot;System.Globalization.SortKey&quot;></xref>ハッシュ アルゴリズムやデータの構造をハッシュ テーブルなどに適したオブジェクト。"
  remarks: "このメソッドによると等しい&2; つのオブジェクトに対して同じハッシュ コードを生成する、<xref:System.Globalization.SortKey.Equals%2A>メソッド</xref:System.Globalization.SortKey.Equals%2A>。       このメソッドは<xref:System.Object.GetHashCode%2A?displayProperty=fullName>。</xref:System.Object.GetHashCode%2A?displayProperty=fullName>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "現在のハッシュ コード<xref href=&quot;System.Globalization.SortKey&quot;></xref>オブジェクト。"
  overload: System.Globalization.SortKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.KeyData
  id: KeyData
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: KeyData
  nameWithType: SortKey.KeyData
  fullName: System.Globalization.SortKey.KeyData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "現在を表すバイト配列を取得<xref href=&quot;System.Globalization.SortKey&quot;></xref>オブジェクト。"
  remarks: "文字列を比較するキーのデータ プロパティによって返されるデータの使用に関する詳細については、次を参照してください、<xref:System.Globalization.SortKey>クラスに関するトピック。</xref:System.Globalization.SortKey> 。"
  example:
  - "The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/p-system.globalization.s_0_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/p-system.globalization.s_0_1.cs)]"
  syntax:
    content: public virtual byte[] KeyData { get; }
    return:
      type: System.Byte[]
      description: "現在を表すバイト配列<xref href=&quot;System.Globalization.SortKey&quot;></xref>オブジェクト。"
  overload: System.Globalization.SortKey.KeyData*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.OriginalString
  id: OriginalString
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: OriginalString
  nameWithType: SortKey.OriginalString
  fullName: System.Globalization.SortKey.OriginalString
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "現在の作成に使用する元の文字列を取得<xref href=&quot;System.Globalization.SortKey&quot;></xref>オブジェクト。"
  remarks: ''
  example:
  - "The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/p-system.globalization.s_1_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/p-system.globalization.s_1_1.cs)]"
  syntax:
    content: public virtual string OriginalString { get; }
    return:
      type: System.String
      description: "現在の作成に使用する元の文字列<xref href=&quot;System.Globalization.SortKey&quot;></xref>オブジェクト。"
  overload: System.Globalization.SortKey.OriginalString*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.ToString
  id: ToString
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: ToString()
  nameWithType: SortKey.ToString()
  fullName: System.Globalization.SortKey.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "現在を表す文字列を返します<xref href=&quot;System.Globalization.SortKey&quot;></xref>オブジェクト。"
  remarks: "戻り値は&quot;SortKey -&quot;、文字列の連結、カルチャ識別子と、現在の比較オプション<xref:System.Globalization.SortKey>オブジェクト、およびの値、<xref:System.Globalization.SortKey.OriginalString%2A>プロパティ</xref:System.Globalization.SortKey.OriginalString%2A></xref:System.Globalization.SortKey>。       このメソッドは<xref:System.Object.ToString%2A?displayProperty=fullName>。</xref:System.Object.ToString%2A?displayProperty=fullName>"
  example:
  - "The following code example displays an original string, the strings yielded by the ToString method for case-sensitive and case-insensitive sort keys, and the key data for case-sensitive and case-insensitive sort keys.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/m-system.globalization.s_1_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/m-system.globalization.s_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "現在を表す文字列<xref href=&quot;System.Globalization.SortKey&quot;></xref>オブジェクト。"
  overload: System.Globalization.SortKey.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  parent: System.Globalization.SortKey
  isExternal: false
  name: Compare(SortKey,SortKey)
  nameWithType: SortKey.Compare(SortKey,SortKey)
  fullName: System.Globalization.SortKey.Compare(SortKey,SortKey)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.SortKey
  parent: System.Globalization
  isExternal: false
  name: SortKey
  nameWithType: SortKey
  fullName: System.Globalization.SortKey
- uid: System.Globalization.SortKey.Equals(System.Object)
  parent: System.Globalization.SortKey
  isExternal: false
  name: Equals(Object)
  nameWithType: SortKey.Equals(Object)
  fullName: System.Globalization.SortKey.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.SortKey.GetHashCode
  parent: System.Globalization.SortKey
  isExternal: false
  name: GetHashCode()
  nameWithType: SortKey.GetHashCode()
  fullName: System.Globalization.SortKey.GetHashCode()
- uid: System.Globalization.SortKey.KeyData
  parent: System.Globalization.SortKey
  isExternal: false
  name: KeyData
  nameWithType: SortKey.KeyData
  fullName: System.Globalization.SortKey.KeyData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.SortKey.OriginalString
  parent: System.Globalization.SortKey
  isExternal: false
  name: OriginalString
  nameWithType: SortKey.OriginalString
  fullName: System.Globalization.SortKey.OriginalString
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.SortKey.ToString
  parent: System.Globalization.SortKey
  isExternal: false
  name: ToString()
  nameWithType: SortKey.ToString()
  fullName: System.Globalization.SortKey.ToString()
- uid: System.Globalization.SortKey.Compare*
  parent: System.Globalization.SortKey
  isExternal: false
  name: Compare
  nameWithType: SortKey.Compare
- uid: System.Globalization.SortKey.Equals*
  parent: System.Globalization.SortKey
  isExternal: false
  name: Equals
  nameWithType: SortKey.Equals
- uid: System.Globalization.SortKey.GetHashCode*
  parent: System.Globalization.SortKey
  isExternal: false
  name: GetHashCode
  nameWithType: SortKey.GetHashCode
- uid: System.Globalization.SortKey.KeyData*
  parent: System.Globalization.SortKey
  isExternal: false
  name: KeyData
  nameWithType: SortKey.KeyData
- uid: System.Globalization.SortKey.OriginalString*
  parent: System.Globalization.SortKey
  isExternal: false
  name: OriginalString
  nameWithType: SortKey.OriginalString
- uid: System.Globalization.SortKey.ToString*
  parent: System.Globalization.SortKey
  isExternal: false
  name: ToString
  nameWithType: SortKey.ToString
