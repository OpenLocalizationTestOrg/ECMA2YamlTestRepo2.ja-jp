### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePointManager
  id: ServicePointManager
  children:
  - System.Net.ServicePointManager.CertificatePolicy
  - System.Net.ServicePointManager.CheckCertificateRevocationList
  - System.Net.ServicePointManager.DefaultConnectionLimit
  - System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  - System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  - System.Net.ServicePointManager.DnsRefreshTimeout
  - System.Net.ServicePointManager.EnableDnsRoundRobin
  - System.Net.ServicePointManager.EncryptionPolicy
  - System.Net.ServicePointManager.Expect100Continue
  - System.Net.ServicePointManager.FindServicePoint(System.Uri)
  - System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  - System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  - System.Net.ServicePointManager.MaxServicePointIdleTime
  - System.Net.ServicePointManager.MaxServicePoints
  - System.Net.ServicePointManager.ReusePort
  - System.Net.ServicePointManager.SecurityProtocol
  - System.Net.ServicePointManager.ServerCertificateValidationCallback
  - System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePointManager.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePointManager
  nameWithType: ServicePointManager
  fullName: System.Net.ServicePointManager
  type: Class
  summary: "コレクションを管理<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト。"
  remarks: "ServicePointManager は、作成、保守、および<xref:System.Net.ServicePoint>クラス</xref:System.Net.ServicePoint>のインスタンスを削除するための静的クラスです。       ServicePointManager を返します、アプリケーション、ServicePointManager オブジェクトを通じてインターネット リソース (Uniform Resource Identifier) への接続を要求するとき、<xref:System.Net.ServicePoint>スキーム URI で識別される、ホストの接続情報を含むオブジェクトです</xref:System.Net.ServicePoint>。 既に存在する場合<xref:System.Net.ServicePoint>ホストおよびスキームでは、ServicePointManager オブジェクトを返すこと、既存のオブジェクトの<xref:System.Net.ServicePoint>オブジェクトですそれ以外の場合、新たに作成、ServicePointManager オブジェクト<xref:System.Net.ServicePoint>オブジェクト。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> 。       .NET Framework 4.6 には、安全性の低い暗号およびハッシュ アルゴリズムの接続をブロックする新しいセキュリティ機能が含まれています。 HttpClient、HttpWebRequest、FTPClient、SmtpClient、SslStream などの Api を介した TLS と SSL を使用して、.NET Framework 4.6 を対象とするアプリケーションでは、既定では、セキュリティが強化された動作を取得します。       開発者は、既存 SSL3 サービスまたは TLS で RC4 サービスと相互運用性を維持するために、この動作を除外する必要あります。 [この記事](https://support.microsoft.com/kb/3069494)新しい動作を無効にするように、コードを変更する方法について説明します。"
  example:
  - "The following code example creates a <xref:System.Net.ServicePoint> object for connections to the URI www.contoso.com.  \n  \n [!code-cs[Classic ServicePoint Example#1](~/add/codesnippet/csharp/t-system.net.servicepoin_1.cs)]\n [!code-cpp[Classic ServicePoint Example#1](~/add/codesnippet/cpp/t-system.net.servicepoin_1.cpp)]\n [!code-vb[Classic ServicePoint Example#1](~/add/codesnippet/visualbasic/t-system.net.servicepoin_1.vb)]"
  syntax:
    content: public class ServicePointManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CertificatePolicy
  id: CertificatePolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得またはサーバー証明書のポリシーを設定します。"
  remarks: "CertificatePolicy プロパティを設定すると、<xref:System.Net.ICertificatePolicy>インターフェイス オブジェクト、<xref:System.Net.ServicePointManager>オブジェクトは、既定の証明書ポリシーではなく、そのインスタンスで定義されている証明書ポリシーを使用します</xref:System.Net.ServicePointManager></xref:System.Net.ICertificatePolicy>。       既定の証明書ポリシーは、有効な証明書と有効期限が切れた証明書が許可されます。"
  example:
  - "The following code example shows how to catch a certificate policy exception for a custom certificate policy. It assumes that the certificate policy object has been defined, that the Uniform Resource Identifier (URI) for the Web resource is contained in the variable `myUri`, and that there is a method named `ProcessResponse` that performs the work of the application.  \n  \n [!code-cpp[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/cpp/p-system.net.servicepoin_14_1.cpp)]\n [!code-cs[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/csharp/p-system.net.servicepoin_14_1.cs)]\n [!code-vb[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_14_1.vb)]"
  syntax:
    content: public static System.Net.ICertificatePolicy CertificatePolicy { get; set; }
    return:
      type: System.Net.ICertificatePolicy
      description: "実装するオブジェクト、 <xref href=&quot;System.Net.ICertificatePolicy&quot;> </xref>インターフェイスです。"
  overload: System.Net.ServicePointManager.CertificatePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  id: CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または設定、<xref:System.Boolean>証明書は、証明書機関の失効一覧と照合するかどうかを示す値</xref:System.Boolean>。"
  remarks: "ある場合、CheckCertificateRevocationList `true`、証明書が証明書の検証プロセスの一部として、証明書機関の失効一覧照らし合わせてチェックされます。 既定値は`false`します。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_13_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_13_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_13_1.cs)]"
  syntax:
    content: public static bool CheckCertificateRevocationList { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>証明書失効リストがチェックされている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.ServicePointManager.CheckCertificateRevocationList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  id: DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または設定によって許可される同時接続の最大数、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクト。"
  remarks: "DefaultConnectionLimit プロパティの設定の同時接続の既定の最大数、<xref:System.Net.ServicePointManager>オブジェクトに割り当てます、<xref:System.Net.ServicePoint.ConnectionLimit%2A>プロパティの作成時に<xref:System.Net.ServicePoint>オブジェクト</xref:System.Net.ServicePoint></xref:System.Net.ServicePoint.ConnectionLimit%2A></xref:System.Net.ServicePointManager>。       DefaultConnectionLimit プロパティを変更する影響を与えません既存の<xref:System.Net.ServicePoint>; のオブジェクトのみに影響を与えます<xref:System.Net.ServicePoint>、変更後に初期化されるオブジェクト</xref:System.Net.ServicePoint></xref:System.Net.ServicePoint>。 直接または構成のいずれかに、このプロパティの値が設定されていない場合、既定値<xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>。</xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>定数      > [!NOTE] > DefaultConnectionLimit プロパティに対して変更を加えた HTTP 1.0 と HTTP 1.1 の両方の接続に影響します。 HTTP 1.0 と HTTP 1.1 プロトコルの接続の制限を個別に変更することはできません。 使用する場合、サーバー環境 (ASP.NET) DefaultConnectionLimit 既定値は、接続数が多くは 10 です。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_8_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_8_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_8_1.cs)]"
  syntax:
    content: public static int DefaultConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "許可される同時接続の最大数、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクト。 既定値は 2 です。 AutoConfig プロパティ設定されている場合、構成ファイルからこのプロパティの値を変更することはないアプリは、ASP.NET ホストとして実行中は、 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。 ただし、できる値を変更するプログラムで、autoConfig プロパティが<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。 AppDomain の読み込み時に&1; 回、目的の値を設定します。"
  overload: System.Net.ServicePointManager.DefaultConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "DefaultConnectionLimit より小さいか 0 を設定します。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  id: DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "既定で許可される非永続的な接続 (4) の数、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref> http/1.0 以降のサーバーに接続されているオブジェクト。 このフィールドは定数ですが、.NET Framework 2.0 では使用されなくです。"
  syntax:
    content: public const int DefaultNonPersistentConnectionLimit = 4;
    return:
      type: System.Int32
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  id: DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "既定で許可される永続的な接続 (2) の数、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクトは、http/1.1 または以降のサーバーに接続します。 このフィールドは定数と初期化するために使用される、 <> </> *> プロパティ場合の値、 <> </> *> の直接または構成のいずれか、プロパティが設定されていません。"
  remarks: ''
  example:
  - "The following code example sets the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property using this field.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/f-system.net.servicepoin_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/f-system.net.servicepoin_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/f-system.net.servicepoin_1.cs)]"
  syntax:
    content: public const int DefaultPersistentConnectionLimit = 2;
    return:
      type: System.Int32
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  id: DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得またはをどのくらいの時間、ドメイン ネーム サービス (DNS) 解決が有効と見なされるを示す値を設定します。"
  remarks: ''
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_21_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_21_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_21_1.cs)]"
  syntax:
    content: public static int DnsRefreshTimeout { get; set; }
    return:
      type: System.Int32
      description: "タイムアウト値 (ミリ秒単位)。 値-1 は無限のタイムアウト期間を示します。 既定値は、120,000 ミリ秒 (2 分) です。"
  overload: System.Net.ServicePointManager.DnsRefreshTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  id: EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または適用可能なインターネット プロトコル (IP) アドレスでドメイン ネーム サービス (DNS) 解決が順番にあるかどうかを示す値を設定します。"
  remarks: "1 つ以上の IP アドレスがホスト名に関連付けられている場合は、DNS 解決は通常、最初の IP アドレスのみを返します。 このプロパティを設定する場合`true`、後続の DNS 解決が順番に使用できるすべての IP アドレスを特定のホストにし、します。 このオプションは、サービスは、負荷分散サーバーまたはサーバー クラスター間でのメカニズムとして DNS を使用する場合に便利です。"
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_17_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_17_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_17_1.cs)]"
  syntax:
    content: public static bool EnableDnsRoundRobin { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>DNS 解決は常に特定のホストの最初の IP アドレスを返す場合それ以外の場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.ServicePointManager.EnableDnsRoundRobin*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EncryptionPolicy
  id: EncryptionPolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得、 <xref href=&quot;System.Net.Security.EncryptionPolicy&quot;> </xref>この<xref href=&quot;System.Net.ServicePointManager&quot;></xref>インスタンス。"
  remarks: "<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>値が、構成ファイルで指定されていない場合、暗号化ポリシーですプロパティの既定値します。 これで、SSL/TLS セッションに適用されるこの<xref:System.Net.ServicePointManager>インスタンス</xref:System.Net.ServicePointManager>。       <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>暗号化ポリシーが設定されている場合は、Null 暗号の使用が必要"
  syntax:
    content: public static System.Net.Security.EncryptionPolicy EncryptionPolicy { get; }
    return:
      type: System.Net.Security.EncryptionPolicy
      description: "このために使用する暗号化ポリシー <xref href=&quot;System.Net.ServicePointManager&quot;> </xref>インスタンス。"
  overload: System.Net.ServicePointManager.EncryptionPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または設定、 <xref:System.Boolean>100 かどうかを決定する値の動作の使用を続行します</xref:System.Boolean>。"
  remarks: "このプロパティに設定するときに`true`、100-100-continue 動作を使用します。 クライアント要求を使用する、`PUT`と`POST`メソッド Expect100Continue プロパティがある場合は、要求に Expect ヘッダーを追加は`true`と<xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティが&0; より大きい、または<xref:System.Net.HttpWebRequest.SendChunked%2A>プロパティが true です</xref:System.Net.HttpWebRequest.SendChunked%2A></xref:System.Net.HttpWebRequest.ContentLength%2A>。 クライアントが 100 を受信することは、クライアントはポストするデータを送信する必要がありますを示すためにサーバーからの応答を続行します。 このメカニズムにより、クライアント要求ヘッダーに基づき、サーバー要求を拒否する場合は、ネットワーク経由で大量のデータを送信する必要があります。       たとえば、Expect100Continue プロパティは`false`します。 要求がサーバーに送信されると、データが含まれています。 場合は、要求ヘッダーを読み取った後、サーバー認証が必要です、401 応答を送信する必要があります、クライアントは適切な認証ヘッダーを使用してデータを再送信する必要があります。       このプロパティは、する場合`true`、要求ヘッダーは、サーバーに送信されます。 サーバーが要求を拒否されない場合は、100、送信-100-continue 応答データを送信することができます。 上記の例のように、サーバー認証が必要な場合は、401 の応答を送信し、クライアントがデータを不必要に転送されません。       このプロパティの値を変更するには影響しません既存<xref:System.Net.ServicePoint>オブジェクト</xref:System.Net.ServicePoint>。 新しいのみ<xref:System.Net.ServicePoint>、変更後に作成されたオブジェクトが影響を受ける</xref:System.Net.ServicePoint>。       100 の動作は使用されません HTTP 1.0 要求このプロパティが設定されている場合でも続行`true`です。       Expect 100-IETF RFC 2616 10.1.1 で完全に説明している動作を続行します。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_12_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_12_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_12_1.cs)]"
  syntax:
    content: public static bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>100 を有効にする-の動作を続行します。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.ServicePointManager.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  id: FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "既存の検索<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト、または新たに作成<xref href=&quot;System.Net.ServicePoint&quot;> </xref> 、指定された通信を管理するオブジェクト<xref:System.Uri>オブジェクト</xref:System.Uri>。"
  remarks: "FindServicePoint メソッドを返します、 <xref:System.Net.ServicePoint>、指定されたインターネット ホスト名に関連付けられているオブジェクト</xref:System.Net.ServicePoint>。 ない場合は<xref:System.Net.ServicePoint>、そのホスト オブジェクトが存在する、<xref:System.Net.ServicePointManager>オブジェクトは、1 つを作成します</xref:System.Net.ServicePointManager></xref:System.Net.ServicePoint>。"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: "<xref:System.Uri>連絡するインターネット リソースのオブジェクト</xref:System.Uri>。"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>要求の通信を管理するオブジェクト。"
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクトで定義されている<xref:System.Net.ServicePointManager.MaxServicePoints*>達しています</xref:System.Net.ServicePointManager.MaxServicePoints*>。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  id: FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "既存の検索<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト、または新たに作成<xref href=&quot;System.Net.ServicePoint&quot;></xref>通信で、指定された Uniform Resource Identifier () を管理するオブジェクト。"
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>メソッドを返します、 <xref:System.Net.ServicePoint>、指定されたインターネット ホスト名に関連付けられているオブジェクト</xref:System.Net.ServicePoint></xref:System.Net.ServicePointManager.FindServicePoint%2A>。 ない場合は<xref:System.Net.ServicePoint>、そのホスト オブジェクトが存在する、<xref:System.Net.ServicePointManager>オブジェクトは、1 つを作成します</xref:System.Net.ServicePointManager></xref:System.Net.ServicePoint>。"
  example:
  - "The following code example demonstrates calling this method to access a <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#7](~/add/codesnippet/cpp/2fec5056-1106-4a0b-b9b3-_1.cpp)]\n [!code-vb[System.Net.ServicePoint#7](~/add/codesnippet/visualbasic/2fec5056-1106-4a0b-b9b3-_1.vb)]\n [!code-cs[System.Net.ServicePoint#7](~/add/codesnippet/csharp/2fec5056-1106-4a0b-b9b3-_1.cs)]"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (string uriString, System.Net.IWebProxy proxy);
    parameters:
    - id: uriString
      type: System.String
      description: "接続するインターネット リソースの URI。"
    - id: proxy
      type: System.Net.IWebProxy
      description: "この要求のプロキシ データ。"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>要求の通信を管理するオブジェクト。"
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "指定された URI <code> uriString </code>が無効です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクトで定義されている<xref:System.Net.ServicePointManager.MaxServicePoints*>達しています</xref:System.Net.ServicePointManager.MaxServicePoints*>。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  id: FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "既存の検索<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト、または新たに作成<xref href=&quot;System.Net.ServicePoint&quot;> </xref> 、指定された通信を管理するオブジェクト<xref:System.Uri>オブジェクト</xref:System.Uri>。"
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>メソッドを返します、 <xref:System.Net.ServicePoint>、指定されたインターネット ホスト名に関連付けられているオブジェクト</xref:System.Net.ServicePoint></xref:System.Net.ServicePointManager.FindServicePoint%2A>。 ない場合は<xref:System.Net.ServicePoint>、そのホスト オブジェクトが存在する、<xref:System.Net.ServicePointManager>オブジェクトは、1 つを作成します</xref:System.Net.ServicePointManager></xref:System.Net.ServicePoint>。"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address, System.Net.IWebProxy proxy);
    parameters:
    - id: address
      type: System.Uri
      description: "A<xref:System.Uri>に連絡するインターネット リソースのアドレスを含むオブジェクトです</xref:System.Uri>。"
    - id: proxy
      type: System.Net.IWebProxy
      description: "この要求のプロキシ データ。"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>要求の通信を管理するオブジェクト。"
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクトで定義されている<xref:System.Net.ServicePointManager.MaxServicePoints*>達しています</xref:System.Net.ServicePointManager.MaxServicePoints*>。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  id: MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または設定の最大アイドル時間、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクト。"
  remarks: "MaxServicePointIdleTime プロパティの設定、最大アイドル時間、<xref:System.Net.ServicePointManager>オブジェクトに割り当てます、<xref:System.Net.ServicePoint.MaxIdleTime%2A>プロパティの作成時に<xref:System.Net.ServicePoint>オブジェクト</xref:System.Net.ServicePoint></xref:System.Net.ServicePoint.MaxIdleTime%2A></xref:System.Net.ServicePointManager>。 この値を変更に影響を与えるだけ<xref:System.Net.ServicePoint>値が変更された後に初期化されるオブジェクト</xref:System.Net.ServicePoint>。       後に、<xref:System.Net.ServicePoint>で指定された時間アイドル状態オブジェクトになった<xref:System.Net.ServicePoint.MaxIdleTime%2A>、ガベージ コレクションの対象である</xref:System.Net.ServicePoint.MaxIdleTime%2A></xref:System.Net.ServicePoint>。 A<xref:System.Net.ServicePoint>接続の一覧が関連付けられている場合は、オブジェクトがアイドル状態、<xref:System.Net.ServicePoint>オブジェクトが空です</xref:System.Net.ServicePoint></xref:System.Net.ServicePoint>。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_5_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_5_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_5_1.cs)]"
  syntax:
    content: public static int MaxServicePointIdleTime { get; set; }
    return:
      type: System.Int32
      description: "最大アイドル時間 (ミリ秒単位) の<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト。 既定値は、100,000 ミリ秒 (100 秒) です。"
  overload: System.Net.ServicePointManager.MaxServicePointIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePointIdleTime はより小さい&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;以上&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;です。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePoints
  id: MaxServicePoints
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または設定の最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>をいつでも維持するオブジェクト。"
  remarks: "数を下回って MaxServicePoints プロパティを小さくときに<xref:System.Net.ServicePoint>存在、現在のオブジェクト、<xref:System.Net.ServicePointManager>を削除、<xref:System.Net.ServicePoint>アイドル時間が最長の時間を持つオブジェクト</xref:System.Net.ServicePoint></xref:System.Net.ServicePointManager></xref:System.Net.ServicePoint>。 場合の数<xref:System.Net.ServicePoint>アクティブな接続を持つオブジェクトが MaxServicePoints の値より大きい、<xref:System.Net.ServicePointManager>オブジェクトの削除、<xref:System.Net.ServicePoint>アイドル状態になったオブジェクトです</xref:System.Net.ServicePoint></xref:System.Net.ServicePointManager></xref:System.Net.ServicePoint>。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_10_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_10_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_10_1.cs)]"
  syntax:
    content: public static int MaxServicePoints { get; set; }
    return:
      type: System.Int32
      description: "最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>を維持するオブジェクト。 既定値は 0 の数に制限はありません<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト。"
  overload: System.Net.ServicePointManager.MaxServicePoints*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePoints が 0 未満かより大きい&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;です。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.ReusePort
  id: ReusePort
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "このプロパティの値に設定<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ソケットでネイティブ ソケット オプション SO_REUSE_UNICASTPORT を使用すると、HttpWebRequest からすべての発信 TCP 接続をさせます。 これにより、基になる発信ポートが共有されます。 これは、短い形式の時刻とポート不足しているアプリケーションのリスクに多数の発信接続が行われる場所シナリオに便利です。"
  remarks: "既定値は `false` です。"
  syntax:
    content: public static bool ReusePort { get; set; }
    return:
      type: System.Boolean
      description: "<xref:System.Boolean>。</xref:System.Boolean>を返します。"
  overload: System.Net.ServicePointManager.ReusePort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SecurityProtocol
  id: SecurityProtocol
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または設定で使用されるセキュリティ プロトコル、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>によって管理されるオブジェクト、 <xref href=&quot;System.Net.ServicePointManager&quot;> </xref>オブジェクト。"
  remarks: "このプロパティは、セキュリティで保護されたハイパー テキスト転送プロトコル (HTTPS) スキームの場合のみです。 を使用する新しい接続を使用する Secure Sockets Layer (SSL) またはトランスポート層セキュリティ (TLS) プロトコルのバージョンを選択します。既存の接続は変更されません。       既定値が表示されていないこのプロパティの目的で注意してください。 セキュリティの概要は、常に、変更し、既定のプロトコル、保護レベルは、既知の脆弱性を回避するために時間の経過と共に変更されます。 既定値は個別のマシンの構成によって異なります、パッチが適用されている必要のあるソフトウェアがインストールされているとします。       特定の保護レベルを使用して、または特定のセキュリティ レベルが既定で使用されていることを前提として、コードが依存している決して暗黙的にする必要があります。 アプリは、特定のセキュリティ レベルの使用に依存する場合は、そのレベルを明示的に指定し、内にある実際に確立された接続で使用することを確認する、確認する必要があります。 さらに、プロトコルがサポートされている変更発生した場合に強固でコードを設計すること、ような多くの場合、変更されるほとんどの事前通知と新たな脅威を軽減するためにします。       .NET Framework 4.6 には、安全性の低い暗号およびハッシュ アルゴリズムの接続をブロックする新しいセキュリティ機能が含まれています。 HttpClient、HttpWebRequest、FTPClient、SmtpClient、SslStream などの Api を介した TLS と SSL を使用して、.NET Framework 4.6 を対象とするアプリケーションでは、既定では、セキュリティが強化された動作を取得します。       開発者は、既存 SSL3 サービスまたは TLS で RC4 サービスと相互運用性を維持するために、この動作を除外する必要あります。 [この記事](https://support.microsoft.com/kb/3069494)新しい動作を無効にするように、コードを変更する方法について説明します。"
  syntax:
    content: public static System.Net.SecurityProtocolType SecurityProtocol { get; set; }
    return:
      type: System.Net.SecurityProtocolType
      description: "定義されている値のいずれか、 <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref>列挙します。"
  overload: System.Net.ServicePointManager.SecurityProtocol*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "プロパティの設定を指定した値が有効な<xref href=&quot;System.Net.SecurityProtocolType&quot;></xref>列挙値。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得またはサーバー証明書を検証するコールバックを設定します。"
  remarks: "アプリケーションは、カスタム クライアントによって、サーバー証明書の検証に使用する方法に ServerCertificateValidationCallback プロパティを設定できます。 カスタムの検証を実施する際に、`sender`に渡されたパラメーター、<xref:System.Net.Security.RemoteCertificateValidationCallback>から派生したオブジェクトまたはホスト文字列名であることができます<xref:System.Net.WebRequest>(<xref:System.Net.HttpWebRequest>など) に応じて、<xref:System.Net.ServicePointManager.CertificatePolicy%2A>プロパティ</xref:System.Net.ServicePointManager.CertificatePolicy%2A></xref:System.Net.HttpWebRequest></xref:System.Net.WebRequest></xref:System.Net.Security.RemoteCertificateValidationCallback>。       カスタム検証を使用しない場合、証明書の名前は、要求の作成に使用されるホスト名と比較されます。 たとえば場合、<xref:System.Net.WebRequest.Create%28System.String%29>パラメーターが渡されました&quot;https://www.contoso.com/default.hmtl&quot;の既定の動作が、www.contoso.com に対して、証明書を確認するクライアント</xref:System.Net.WebRequest.Create%28System.String%29>。"
  syntax:
    content: public static System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>. 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "有効または TCP 接続での keep-alive オプションを無効にします。"
  remarks: "アプリケーションでは、TCP/IP プロバイダーが TCP 接続での keep-alive パケットの使用を有効にすることを要求できます。 既定では TCP 接続での keep-alive パケットの使用が無効になっています。       TCP ソケットときの既定の設定は、2 時間にセットのキープ アライブ タイムアウトとキープ アライブ間隔を 1 秒に初期化されます。 `keepAliveTime`パラメーターが反応のない最初の keep-alive パケットが送信されるまでのミリ秒単位のタイムアウトを指定します。 `keepAliveInterval`パラメーターを指定、間隔 (ミリ秒単位) 間の受信確認を受信しなかった場合、連続する keep-alive パケットが送信されるときにします。 キープ アライブ プローブの数は変更することはできず、10 に設定されています。       キープアの結果として、TCP 接続が削除された場合、<xref:System.Net.Sockets.SocketError>の<xref:System.Net.Sockets.SocketError>、ソケットで進行中のすべての呼び出しに返されるすべての後続の呼び出しは失敗し<xref:System.Net.Sockets.SocketError><xref:System.Net.Sockets.SocketError></xref:System.Net.Sockets.SocketError></xref:System.Net.Sockets.SocketError></xref:System.Net.Sockets.SocketError></xref:System.Net.Sockets.SocketError>。"
  syntax:
    content: public static void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "指定されたを使用して有効になりますし、TCP 接続で TCP keep-alive オプションを true に設定する場合`keepAliveTime`と`keepAliveInterval`値。       場合は false に設定し、TCP の keep-alive オプションが無効になっているし、残りのパラメーターは無視されます。       既定値は false です。"
    - id: keepAliveTime
      type: System.Int32
      description: "反応のない最初の keep-alive パケットが送信されるまでのミリ秒単位のタイムアウト値を指定します。       値は 0 より大きくする必要があります。  0 未満の値が渡されたかどうか、<xref:System.ArgumentOutOfRangeException>がスローされます</xref:System.ArgumentOutOfRangeException>。"
    - id: keepAliveInterval
      type: System.Int32
      description: "受信確認を受信しなかった場合、連続する keep-alive パケットが送信されるときに、間隔をミリ秒単位での間を指定します。       値は 0 より大きくする必要があります。  0 未満の値が渡されたかどうか、<xref:System.ArgumentOutOfRangeException>がスローされます</xref:System.ArgumentOutOfRangeException>。"
  overload: System.Net.ServicePointManager.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定された値<code> keepAliveTime </code>または<code> keepAliveInterval </code>パラメーターが 0 未満です。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "これで管理するサービス ポイントで Nagle アルゴリズムを使用するかどうかを判断<xref href=&quot;System.Net.ServicePointManager&quot;></xref>オブジェクト。"
  remarks: "Nagle アルゴリズムを使用して、小さなデータ パケットをバッファリングして、1 つのパケットとして送信することによってネットワーク トラフィックが削減されます。 このプロセスも呼びます&quot;nagling&quot;です。送信パケットの数が減るために、広く使用されてし、パケットごとのオーバーヘッドを減らすことができます。       このプロパティの値を変更するには影響しません既存<xref:System.Net.ServicePoint>オブジェクト</xref:System.Net.ServicePoint>。 変更の後に作成された新しいサービス ポイントのみが影響を受けます。       Nagle アルゴリズムは IETF RFC 896 で詳しく説明します。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_20_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_20_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_20_1.cs)]"
  syntax:
    content: public static bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Nagle アルゴリズムを使用するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.ServicePointManager.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.ServicePointManager.CertificatePolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
- uid: System.Net.ICertificatePolicy
  parent: System.Net
  isExternal: false
  name: ICertificatePolicy
  nameWithType: ICertificatePolicy
  fullName: System.Net.ICertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
- uid: System.Net.ServicePoint
  parent: System.Net
  isExternal: false
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
- uid: System.Net.SecurityProtocolType
  parent: System.Net
  isExternal: false
  name: SecurityProtocolType
  nameWithType: SecurityProtocolType
  fullName: System.Net.SecurityProtocolType
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
- uid: System.Net.ServicePointManager.CertificatePolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
- uid: System.Net.ServicePointManager.DefaultConnectionLimit*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint
  nameWithType: ServicePointManager.FindServicePoint
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePointManager.SetTcpKeepAlive
- uid: System.Net.ServicePointManager.UseNagleAlgorithm*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
