### YamlMime:ManagedReference
items:
- uid: System.Transactions.DependentTransaction
  id: DependentTransaction
  children:
  - System.Transactions.DependentTransaction.Complete
  langs:
  - csharp
  name: DependentTransaction
  nameWithType: DependentTransaction
  fullName: System.Transactions.DependentTransaction
  type: Class
  summary: "アプリケーションからトランザクションの作業に関する rest までトランザクションをコミットすることはできませんの保証を提供するトランザクションの複製について説明します。 このクラスは継承できません。"
  remarks: "クローンである、DependentTransaction、<xref:System.Transactions.Transaction>を使用して作成されたオブジェクト、<xref:System.Transactions.Transaction.DependentClone%2A>メソッド</xref:System.Transactions.Transaction.DependentClone%2A></xref:System.Transactions.Transaction>。  その唯一の目的では、アプリケーションを置くし、(たとえば、ワーカー スレッド) 上でトランザクションの作業が実行されているときにトランザクションをコミットできないことを保証するものを使用できるようにします。       使用して、トランザクションの作成者を通知できますが、複製されたトランザクション内で行われる処理を最後に完了してコミットする準備、<xref:System.Transactions.DependentTransaction.Complete%2A>メソッド</xref:System.Transactions.DependentTransaction.Complete%2A>。 したがって、整合性とデータの正確性を保持できます。       <xref:System.Transactions.DependentCloneOption>コミット時に動作を決定する列挙を使用します</xref:System.Transactions.DependentCloneOption>。  この動作の制御には、アプリケーションを停止できるだけでなく、同時実行のサポートができます。 この列挙体の使用方法の詳細については、次を参照してください。 [DependentTransaction で同時実行を管理する](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab)です。"
  example:
  - "The following example shows you how to create a dependent transaction.  \n  \n [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/t-system.transactions.de_0_1.vb)]\n [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/t-system.transactions.de_0_1.cs)]"
  syntax:
    content: 'public sealed class DependentTransaction : System.Transactions.Transaction'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements: []
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.DependentTransaction.Complete
  id: Complete
  parent: System.Transactions.DependentTransaction
  langs:
  - csharp
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "依存するトランザクションを完了しようとしています。"
  remarks: "依存の複製が、作業を完了したことをトランザクションをコミットする場合は、親は準備ができても、トランザクションの作成者を通知する場合は、このメソッドを呼び出します。       この呼び出しを呼び出した後、トランザクションの追加作業がしないでまたは、例外がスローされます。       後に、アプリケーション ドメインがダウンした場合は、このメソッドが呼び出されますとトランザクションを完了する前にトランザクションが中止可能性があります。       **注**このメソッドは、依存するトランザクションの有効期間中に&1; 回だけ呼び出す必要があります。"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.DependentTransaction.Complete*
  exceptions:
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "このメソッドが呼び出された後、トランザクションに追加作業をしようとするとします。 メソッドの呼び出しなどが含まれます<> *>、 <> </> *>、 <> </> *>、 <> </> *>、またはトランザクションで任意のシリアル化操作。"
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.DependentTransaction.Complete
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
- uid: System.Transactions.DependentTransaction.Complete*
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete
  nameWithType: DependentTransaction.Complete
