### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.NestedContainer
  id: NestedContainer
  children:
  - System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)
  - System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.NestedContainer.Dispose(System.Boolean)
  - System.ComponentModel.NestedContainer.GetService(System.Type)
  - System.ComponentModel.NestedContainer.Owner
  - System.ComponentModel.NestedContainer.OwnerName
  langs:
  - csharp
  name: NestedContainer
  nameWithType: NestedContainer
  fullName: System.ComponentModel.NestedContainer
  type: Class
  summary: "基本実装を提供、 <xref href=&quot;System.ComponentModel.INestedContainer&quot;> </xref>インターフェイスは、コンテナーを所有しているコンポーネントを与えることができます。"
  remarks: "NestedContainer クラスは、の単純な実装、<xref:System.ComponentModel.INestedContainer>を論理的に&0; 個以上の他のコンポーネントが含まれており、親コンポーネントによって所有されているコンポーネントを定義するインターフェイス</xref:System.ComponentModel.INestedContainer>。 入れ子になったコンテナーの動作は、標準とは異なる<xref:System.ComponentModel.Container>さまざまな方法で、次を含む:-などの特性をサイト<xref:System.ComponentModel.Component.DesignMode%2A>と<xref:System.ComponentModel.Component.GetService%2A>所有しているコンポーネントのサイトを経由してルーティングされます</xref:System.ComponentModel.Component.GetService%2A></xref:System.ComponentModel.Component.DesignMode%2A></xref:System.ComponentModel.Container>。      -サイトの<xref:System.ComponentModel.ISite.Name%2A>プロパティは、所有しているコンポーネントの名前にピリオド (.) と子コンポーネントの名前を含む修飾名</xref:System.ComponentModel.ISite.Name%2A>。      -<xref:System.ComponentModel.NestedContainer.GetService%2A>のサポートを提供、<xref:System.ComponentModel.INestedContainer>サービスとして</xref:System.ComponentModel.INestedContainer></xref:System.ComponentModel.NestedContainer.GetService%2A>。      場合、所有しているコンポーネントが破棄されると、コンテナーがも破棄されます。       さらに、デザイナーは入れ子になったコンテナー扱いが異なります。 デザイナー ホストが&1; つのコンテナーを興味のみ — ホストに関連付けられています。 そのため、コンポーネントの追加し、イベントを削除するコンポーネントを追加または入れ子になったコンテナーから削除されたときに発生しません。 ただし、サービスが入れ子になったコンテナーを通過するため、入れ子になったコンテナー内のコンポーネントが変更されたときにコンポーネントの変更イベントが発生しました。       イベントの追跡でこのような違いは、元に戻す機能は、シリアル化には、密接にも影響を与えます。 標準の元に戻すエンジンを使用して<xref:System.ComponentModel.Design.IReferenceService>コンポーネントに加えられた変更を追跡します</xref:System.ComponentModel.Design.IReferenceService>。 元に戻すエンジンは、参照サービスを介して、コンポーネントの名前を識別できない、エンジンはそのコンポーネントの変更を無視します。 その所有者のリストに同じ名前のパブリックの読み取り専用プロパティとして公開される場合にのみ、このサービスは自動的に含まれるコンポーネントへの変更を認識します。 それ以外の場合、開発者は、所有者までのコンポーネントの変更イベントを渡す必要があります。 たとえば、入れ子になったコンポーネントの`Text`として、所有しているコンポーネントのプロパティが示される、`Address`プロパティ、`Text`プロパティが変更されたが、対応するため、プロパティの変更をプログラムで行う必要がある`Address`こと、変更は元に戻すによって追跡されないか、またはプロパティ。"
  syntax:
    content: 'public class NestedContainer : System.ComponentModel.Container, IDisposable, System.ComponentModel.INestedContainer'
  inheritance:
  - System.Object
  - System.ComponentModel.Container
  implements:
  - System.ComponentModel.INestedContainer
  - System.IDisposable
  inheritedMembers:
  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.Container.Components
  - System.ComponentModel.Container.Dispose
  - System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)
  id: '#ctor(System.ComponentModel.IComponent)'
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: NestedContainer(IComponent)
  nameWithType: NestedContainer.NestedContainer(IComponent)
  fullName: System.ComponentModel.NestedContainer.NestedContainer(IComponent)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ComponentModel.NestedContainer&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターは、そのオーナーに参加<xref:System.ComponentModel.IComponent.Disposed>イベントを入れ子になったコンテナーの<xref:System.ComponentModel.NestedContainer.Dispose%2A>メソッドは自動的に呼び出されます</xref:System.ComponentModel.NestedContainer.Dispose%2A></xref:System.ComponentModel.IComponent.Disposed>。"
  syntax:
    content: public NestedContainer (System.ComponentModel.IComponent owner);
    parameters:
    - id: owner
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>この入れ子になったコンテナーを所有しています。"
  overload: System.ComponentModel.NestedContainer.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>owner</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)
  id: CreateSite(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: CreateSite(IComponent,String)
  nameWithType: NestedContainer.CreateSite(IComponent,String)
  fullName: System.ComponentModel.NestedContainer.CreateSite(IComponent,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "コンテナー内でコンポーネント用のサイトを作成します。"
  remarks: "場合、`name`パラメーターは`null`、<xref:System.ComponentModel.IComponent>識別名がない場合、入れ子になったコンテナーに追加します</xref:System.ComponentModel.IComponent>。"
  syntax:
    content: protected override System.ComponentModel.ISite CreateSite (System.ComponentModel.IComponent component, string name);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>のサイトを作成します。"
    - id: name
      type: System.String
      description: "割り当てる名前`component`、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>を割り当てられている名前をスキップします。"
    return:
      type: System.ComponentModel.ISite
      description: "新しく作成された<xref href=&quot;System.ComponentModel.ISite&quot;></xref>です。"
  overload: System.ComponentModel.NestedContainer.CreateSite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: NestedContainer.Dispose(Boolean)
  fullName: System.ComponentModel.NestedContainer.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "入れ子になったコンテナーで使用したリソースを解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A>。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.ComponentModel.NestedContainer>参照。</xref:System.ComponentModel.NestedContainer> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.ComponentModel.NestedContainer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: NestedContainer.GetService(Type)
  fullName: System.ComponentModel.NestedContainer.GetService(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "使用可能になる場合は、指定した型のサービス オブジェクトを取得します。"
  remarks: "このメソッドは、<xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName>メソッド</xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName>。 この実装は要求を<xref:System.ComponentModel.INestedContainer>と<xref:System.ComponentModel.IContainer>services</xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.INestedContainer> 。"
  syntax:
    content: protected override object GetService (Type service);
    parameters:
    - id: service
      type: System.Type
      description: "<xref:System.Type>へのサービスを取得します</xref:System.Type>。"
    return:
      type: System.Object
      description: "<xref:System.Object>要求したサービスを実装するか、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>場合は、サービスを解決することはできません</xref:System.Object>。"
  overload: System.ComponentModel.NestedContainer.GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.Owner
  id: Owner
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: Owner
  nameWithType: NestedContainer.Owner
  fullName: System.ComponentModel.NestedContainer.Owner
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "この入れ子になったコンテナーの所有しているコンポーネントを取得します。"
  remarks: "所有しているコンポーネントは、通常のコンテナーの入れ子になったコンテナーを区別する特性です。"
  syntax:
    content: public System.ComponentModel.IComponent Owner { get; }
    return:
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>この入れ子になったコンテナーを所有しています。"
  overload: System.ComponentModel.NestedContainer.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.OwnerName
  id: OwnerName
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: OwnerName
  nameWithType: NestedContainer.OwnerName
  fullName: System.ComponentModel.NestedContainer.OwnerName
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "所有しているコンポーネントの名前を取得します。"
  remarks: "カスタムの所有者名を指定する、このプロパティをオーバーライドする可能性があります。 既定の実装の所有者のサイトを検索する<xref:System.ComponentModel.INestedSite>と呼び出し<xref:System.ComponentModel.INestedSite.FullName%2A>、または<xref:System.ComponentModel.ISite.Name%2A>入れ子になったサイトが存在しない場合</xref:System.ComponentModel.ISite.Name%2A></xref:System.ComponentModel.INestedSite.FullName%2A></xref:System.ComponentModel.INestedSite>。 このプロパティを返しますのどちらがあるか、`null`です。"
  syntax:
    content: protected virtual string OwnerName { get; }
    return:
      type: System.String
      description: "所有しているコンポーネントの名前。"
  overload: System.ComponentModel.NestedContainer.OwnerName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Container
  isExternal: false
  name: System.ComponentModel.Container
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: NestedContainer(IComponent)
  nameWithType: NestedContainer.NestedContainer(IComponent)
  fullName: System.ComponentModel.NestedContainer.NestedContainer(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: CreateSite(IComponent,String)
  nameWithType: NestedContainer.CreateSite(IComponent,String)
  fullName: System.ComponentModel.NestedContainer.CreateSite(IComponent,String)
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.NestedContainer.Dispose(System.Boolean)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: NestedContainer.Dispose(Boolean)
  fullName: System.ComponentModel.NestedContainer.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.NestedContainer.GetService(System.Type)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: GetService(Type)
  nameWithType: NestedContainer.GetService(Type)
  fullName: System.ComponentModel.NestedContainer.GetService(Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.NestedContainer.Owner
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Owner
  nameWithType: NestedContainer.Owner
  fullName: System.ComponentModel.NestedContainer.Owner
- uid: System.ComponentModel.NestedContainer.OwnerName
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: OwnerName
  nameWithType: NestedContainer.OwnerName
  fullName: System.ComponentModel.NestedContainer.OwnerName
- uid: System.ComponentModel.NestedContainer.#ctor*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: NestedContainer
  nameWithType: NestedContainer.NestedContainer
- uid: System.ComponentModel.NestedContainer.CreateSite*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: CreateSite
  nameWithType: NestedContainer.CreateSite
- uid: System.ComponentModel.NestedContainer.Dispose*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Dispose
  nameWithType: NestedContainer.Dispose
- uid: System.ComponentModel.NestedContainer.GetService*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: GetService
  nameWithType: NestedContainer.GetService
- uid: System.ComponentModel.NestedContainer.Owner*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Owner
  nameWithType: NestedContainer.Owner
- uid: System.ComponentModel.NestedContainer.OwnerName*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: OwnerName
  nameWithType: NestedContainer.OwnerName
