### YamlMime:ManagedReference
items:
- uid: System.Security.SecurityContext
  id: SecurityContext
  children:
  - System.Security.SecurityContext.Capture
  - System.Security.SecurityContext.CreateCopy
  - System.Security.SecurityContext.Dispose
  - System.Security.SecurityContext.IsFlowSuppressed
  - System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed
  - System.Security.SecurityContext.RestoreFlow
  - System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)
  - System.Security.SecurityContext.SuppressFlow
  - System.Security.SecurityContext.SuppressFlowWindowsIdentity
  langs:
  - csharp
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Security.SecurityContext
  type: Class
  summary: "カプセル化し、スレッド間で転送される実行コンテキストのすべてのセキュリティに関連するデータを伝達します。 このクラスは継承できません。"
  remarks: "A SecurityContext object captures all security-related information for a logical thread, including the information contained in the <xref:System.Security.Principal.WindowsIdentity> and <xref:System.Threading.CompressedStack> objects.  This configuration allows the Windows identity and the security elements on the stack to be propagated automatically when the SecurityContext is copied and transferred across asynchronous threads.  \n  \n> [!NOTE]\n>  The common language runtime (CLR) is aware of impersonation operations performed using only managed code, not of impersonation performed outside of managed code, such as through platform invoke to unmanaged code or through direct calls to Win32 functions. Only managed <xref:System.Security.Principal.WindowsIdentity> objects can flow across asynchronous points, unless the `alwaysFlowImpersonationPolicy` element has been set to `true` (`<alwaysFlowImpersonationPolicy enabled=\"true\"/>`). Setting the `alwaysFlowImpersonationPolicy` element to `true` specifies that the Windows identity always flows across asynchronous points, regardless of how impersonation was performed. For more information about flowing unmanaged impersonation across asynchronous points, see [\\&lt;alwaysFlowImpersonationPolicy\\&gt; Element](../Topic/%3CalwaysFlowImpersonationPolicy%3E%20Element.md).  \n  \n The SecurityContext is part of the larger <xref:System.Threading.ExecutionContext> and flows or migrates when the <xref:System.Threading.ExecutionContext> flows or migrates.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."
  syntax:
    content: 'public sealed class SecurityContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecurityContext.Capture
  id: Capture
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: Capture()
  nameWithType: SecurityContext.Capture()
  fullName: System.Security.SecurityContext.Capture()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のスレッドのセキュリティ コンテキストをキャプチャします。"
  remarks: "キャプチャされたセキュリティ コンテキストは、別のスレッドに適用できます。 <xref:System.Security.SecurityContext>から成る、<xref:System.Threading.CompressedStack>と<xref:System.Security.Principal.WindowsIdentity>の実行中のスレッド</xref:System.Security.Principal.WindowsIdentity></xref:System.Threading.CompressedStack></xref:System.Security.SecurityContext>。"
  syntax:
    content: public static System.Security.SecurityContext Capture ();
    parameters: []
    return:
      type: System.Security.SecurityContext
      description: "現在のスレッドのセキュリティ コンテキスト。"
  overload: System.Security.SecurityContext.Capture*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityContext.CreateCopy
  id: CreateCopy
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: SecurityContext.CreateCopy()
  fullName: System.Security.SecurityContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のセキュリティ コンテキストのコピーを作成します。"
  remarks: "現在のコンテキストは、キャプチャまたはコピー操作で取得されている必要があります。 このメソッドは、キャプチャしたを適用するために役立ちます<xref:System.Security.SecurityContext>複数のスレッドにします</xref:System.Security.SecurityContext>。"
  syntax:
    content: public System.Security.SecurityContext CreateCopy ();
    parameters: []
    return:
      type: System.Security.SecurityContext
      description: "現在のスレッドのセキュリティ コンテキスト。"
  overload: System.Security.SecurityContext.CreateCopy*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "現在のセキュリティ コンテキストが以前使用されて、アプリケーション ドメイン間でマーシャ リングされたまたはで取得されなかった、<xref:System.Security.SecurityContext.Capture*>メソッド</xref:System.Security.SecurityContext.Capture*>。"
  platform:
  - net462
- uid: System.Security.SecurityContext.Dispose
  id: Dispose
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecurityContext.Dispose()
  fullName: System.Security.SecurityContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のインスタンスによって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.SecurityContext&quot;> </xref>クラスです。"
  remarks: "呼び出す`Dispose` <xref:System.Security.SecurityContext>.</xref:System.Security.SecurityContext>の使用が終了したときに `Dispose`メソッドによって、<xref:System.Security.SecurityContext>使用不可の状態</xref:System.Security.SecurityContext>。 呼び出した後`Dispose`へのすべての参照を解放する必要があります、<xref:System.Security.SecurityContext>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Security.SecurityContext>占有されていた</xref:System.Security.SecurityContext></xref:System.Security.SecurityContext>。       詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 常に呼び出し`Dispose`<xref:System.Security.SecurityContext></xref:System.Security.SecurityContext>の最後の参照を解放する前に。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Security.SecurityContext>オブジェクトの`Finalize`メソッド</xref:System.Security.SecurityContext>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecurityContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityContext.IsFlowSuppressed
  id: IsFlowSuppressed
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: IsFlowSuppressed()
  nameWithType: SecurityContext.IsFlowSuppressed()
  fullName: System.Security.SecurityContext.IsFlowSuppressed()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "セキュリティ コンテキストのフローが中止されたかどうかを判断します。"
  remarks: "転送するかどうかを決定するインフラストラクチャ コンポーネントによって IsFlowSuppressed メソッドが使用される、<xref:System.Security.SecurityContext>非同期操作中に情報</xref:System.Security.SecurityContext>。"
  syntax:
    content: public static bool IsFlowSuppressed ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>フローが中止された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.SecurityContext.IsFlowSuppressed*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed
  id: IsWindowsIdentityFlowSuppressed
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: IsWindowsIdentityFlowSuppressed()
  nameWithType: SecurityContext.IsWindowsIdentityFlowSuppressed()
  fullName: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のセキュリティ コンテキストの Windows id 部分のフローが中止されたかどうかを判断します。"
  remarks: "IsWindowsIdentityFlowSuppressed メソッドは Windows id 情報を転送するかどうかを決定するインフラストラクチャ コンポーネントによって使用時に、<xref:System.Security.SecurityContext>非同期操作中に移行します</xref:System.Security.SecurityContext>。"
  syntax:
    content: public static bool IsWindowsIdentityFlowSuppressed ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>フローが中止された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityContext.RestoreFlow
  id: RestoreFlow
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: RestoreFlow()
  nameWithType: SecurityContext.RestoreFlow()
  fullName: System.Security.SecurityContext.RestoreFlow()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "非同期スレッド間でのセキュリティ コンテキストのフローを復元します。"
  remarks: "RestoreFlow メソッドによって呼び出されます、<xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName>前の効果を反転させるメソッド<xref:System.Security.SecurityContext.SuppressFlow%2A>メソッドの呼び出し</xref:System.Security.SecurityContext.SuppressFlow%2A></xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName>。"
  syntax:
    content: public static void RestoreFlow ();
    parameters: []
  overload: System.Security.SecurityContext.RestoreFlow*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "セキュリティ コンテキストが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>または空の文字列。"
  platform:
  - net462
- uid: System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)
  id: Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: Run(SecurityContext,ContextCallback,Object)
  nameWithType: SecurityContext.Run(SecurityContext,ContextCallback,Object)
  fullName: System.Security.SecurityContext.Run(SecurityContext,ContextCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "指定されたセキュリティ コンテキストで現在のスレッドで、指定したメソッドを実行します。"
  remarks: "メソッドの呼び出しが完了すると、以前の状態を現在のスレッドのセキュリティ コンテキストが返されます。"
  example:
  - "The following code example shows how to use the Run method to execute a method in a specified security context.  \n  \n [!code-cs[System.Security.SecurityContext.Run#1](~/add/codesnippet/csharp/f32751be-87d3-46b4-a1da-_1.cs)]\n [!code-vb[System.Security.SecurityContext.Run#1](~/add/codesnippet/visualbasic/f32751be-87d3-46b4-a1da-_1.vb)]"
  syntax:
    content: public static void Run (System.Security.SecurityContext securityContext, System.Threading.ContextCallback callback, object state);
    parameters:
    - id: securityContext
      type: System.Security.SecurityContext
      description: "設定するセキュリティ コンテキスト。"
    - id: callback
      type: System.Threading.ContextCallback
      description: "指定されたセキュリティ コンテキストで実行するメソッドを表すデリゲート。"
    - id: state
      type: System.Object
      description: "コールバック メソッドに渡されるオブジェクト。"
  overload: System.Security.SecurityContext.Run*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>securityContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または - <code>securityContext</code> capture 操作では取得されませんでした。       - または -<code>securityContext</code>実行メソッドの呼び出しに引数として既に使用されています。"
  platform:
  - net462
- uid: System.Security.SecurityContext.SuppressFlow
  id: SuppressFlow
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: SuppressFlow()
  nameWithType: SecurityContext.SuppressFlow()
  fullName: System.Security.SecurityContext.SuppressFlow()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "非同期スレッド間でのセキュリティ コンテキストのフローを中止します。"
  remarks: "このメソッドを使用して抑制する状況のフロー<xref:System.Security.SecurityContext>非同期操作の現在のスレッドに関する情報</xref:System.Security.SecurityContext>。       共通言語ランタイム (CLR) は、マネージ コードを使用して実行される権限借用の操作の対応はのみです。 プラットフォーム呼び出しまたは Win32 関数を呼び出すことで、偽装するアンマネージ コードになど、CLR は、マネージ コードの外部で実行される偽装の知識がありません。 マネージを使用する必要があります非同期ポイント間のフローの id に<xref:System.Security.Principal.WindowsIdentity>と<xref:System.Security.Principal.WindowsImpersonationContext>メソッド</xref:System.Security.Principal.WindowsImpersonationContext></xref:System.Security.Principal.WindowsIdentity>。       使用して、<xref:System.Threading.AsyncFlowControl.Undo%2A>メソッドで返された<xref:System.Threading.AsyncFlowControl>構造体を返す、<xref:System.Security.SecurityContext>を以前の状態オブジェクト</xref:System.Security.SecurityContext></xref:System.Threading.AsyncFlowControl></xref:System.Threading.AsyncFlowControl.Undo%2A>。       このメソッドで保護された、<xref:System.Security.Permissions.SecurityAction?displayProperty=fullName>の<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>権限</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName></xref:System.Security.Permissions.SecurityAction?displayProperty=fullName>。 完全に信頼されたコンポーネントのフローを抑制するには、このメソッドを呼び出すことができます、<xref:System.Security.SecurityContext>非同期呼び出し中に情報</xref:System.Security.SecurityContext>。 フローが抑制されている場合、<xref:System.Security.SecurityContext.Capture%2A>メソッドを返します`null`。</xref:System.Security.SecurityContext.Capture%2A> 。"
  syntax:
    content: public static System.Threading.AsyncFlowControl SuppressFlow ();
    parameters: []
    return:
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref>フローを復元するための構造体。"
  overload: System.Security.SecurityContext.SuppressFlow*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityContext.SuppressFlowWindowsIdentity
  id: SuppressFlowWindowsIdentity
  parent: System.Security.SecurityContext
  langs:
  - csharp
  name: SuppressFlowWindowsIdentity()
  nameWithType: SecurityContext.SuppressFlowWindowsIdentity()
  fullName: System.Security.SecurityContext.SuppressFlowWindowsIdentity()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "非同期スレッド間で現在のセキュリティ コンテキストの Windows id 部分のフローを中止します。"
  remarks: "Use this method to suppress the flow of the Windows identity when the <xref:System.Security.SecurityContext> migrates across asynchronous threads.  \n  \n Use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to return the <xref:System.Security.SecurityContext> object to its previous state.  \n  \n> [!NOTE]\n>  The common language runtime (CLR) is aware of impersonation operations performed using only managed code, not of impersonation performed outside of managed code, such as through platform invoke to unmanaged code or through direct calls to Win32 functions. Only managed <xref:System.Security.Principal.WindowsIdentity> objects can flow across asynchronous points, unless the `alwaysFlowImpersonationPolicy` element has been set to `true` (`<alwaysFlowImpersonationPolicy enabled=\"true\"/>`). Setting the `alwaysFlowImpersonationPolicy` element to `true` specifies that the Windows identity always flows across asynchronous points, regardless of how impersonation was performed. For more information about flowing unmanaged impersonation across asynchronous points, see [\\<alwaysFlowImpersonationPolicy> Element](../Topic/%3CalwaysFlowImpersonationPolicy%3E%20Element.md)."
  syntax:
    content: public static System.Threading.AsyncFlowControl SuppressFlowWindowsIdentity ();
    parameters: []
    return:
      type: System.Threading.AsyncFlowControl
      description: "フローを復元するための構造体。"
  overload: System.Security.SecurityContext.SuppressFlowWindowsIdentity*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityContext.Capture
  parent: System.Security.SecurityContext
  isExternal: false
  name: Capture()
  nameWithType: SecurityContext.Capture()
  fullName: System.Security.SecurityContext.Capture()
- uid: System.Security.SecurityContext
  parent: System.Security
  isExternal: false
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Security.SecurityContext
- uid: System.Security.SecurityContext.CreateCopy
  parent: System.Security.SecurityContext
  isExternal: false
  name: CreateCopy()
  nameWithType: SecurityContext.CreateCopy()
  fullName: System.Security.SecurityContext.CreateCopy()
- uid: System.Security.SecurityContext.Dispose
  parent: System.Security.SecurityContext
  isExternal: false
  name: Dispose()
  nameWithType: SecurityContext.Dispose()
  fullName: System.Security.SecurityContext.Dispose()
- uid: System.Security.SecurityContext.IsFlowSuppressed
  parent: System.Security.SecurityContext
  isExternal: false
  name: IsFlowSuppressed()
  nameWithType: SecurityContext.IsFlowSuppressed()
  fullName: System.Security.SecurityContext.IsFlowSuppressed()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed
  parent: System.Security.SecurityContext
  isExternal: false
  name: IsWindowsIdentityFlowSuppressed()
  nameWithType: SecurityContext.IsWindowsIdentityFlowSuppressed()
  fullName: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed()
- uid: System.Security.SecurityContext.RestoreFlow
  parent: System.Security.SecurityContext
  isExternal: false
  name: RestoreFlow()
  nameWithType: SecurityContext.RestoreFlow()
  fullName: System.Security.SecurityContext.RestoreFlow()
- uid: System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)
  parent: System.Security.SecurityContext
  isExternal: false
  name: Run(SecurityContext,ContextCallback,Object)
  nameWithType: SecurityContext.Run(SecurityContext,ContextCallback,Object)
  fullName: System.Security.SecurityContext.Run(SecurityContext,ContextCallback,Object)
- uid: System.Threading.ContextCallback
  parent: System.Threading
  isExternal: true
  name: ContextCallback
  nameWithType: ContextCallback
  fullName: System.Threading.ContextCallback
- uid: System.Security.SecurityContext.SuppressFlow
  parent: System.Security.SecurityContext
  isExternal: false
  name: SuppressFlow()
  nameWithType: SecurityContext.SuppressFlow()
  fullName: System.Security.SecurityContext.SuppressFlow()
- uid: System.Threading.AsyncFlowControl
  parent: System.Threading
  isExternal: false
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
- uid: System.Security.SecurityContext.SuppressFlowWindowsIdentity
  parent: System.Security.SecurityContext
  isExternal: false
  name: SuppressFlowWindowsIdentity()
  nameWithType: SecurityContext.SuppressFlowWindowsIdentity()
  fullName: System.Security.SecurityContext.SuppressFlowWindowsIdentity()
- uid: System.Security.SecurityContext.Capture*
  parent: System.Security.SecurityContext
  isExternal: false
  name: Capture
  nameWithType: SecurityContext.Capture
- uid: System.Security.SecurityContext.CreateCopy*
  parent: System.Security.SecurityContext
  isExternal: false
  name: CreateCopy
  nameWithType: SecurityContext.CreateCopy
- uid: System.Security.SecurityContext.Dispose*
  parent: System.Security.SecurityContext
  isExternal: false
  name: Dispose
  nameWithType: SecurityContext.Dispose
- uid: System.Security.SecurityContext.IsFlowSuppressed*
  parent: System.Security.SecurityContext
  isExternal: false
  name: IsFlowSuppressed
  nameWithType: SecurityContext.IsFlowSuppressed
- uid: System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed*
  parent: System.Security.SecurityContext
  isExternal: false
  name: IsWindowsIdentityFlowSuppressed
  nameWithType: SecurityContext.IsWindowsIdentityFlowSuppressed
- uid: System.Security.SecurityContext.RestoreFlow*
  parent: System.Security.SecurityContext
  isExternal: false
  name: RestoreFlow
  nameWithType: SecurityContext.RestoreFlow
- uid: System.Security.SecurityContext.Run*
  parent: System.Security.SecurityContext
  isExternal: false
  name: Run
  nameWithType: SecurityContext.Run
- uid: System.Security.SecurityContext.SuppressFlow*
  parent: System.Security.SecurityContext
  isExternal: false
  name: SuppressFlow
  nameWithType: SecurityContext.SuppressFlow
- uid: System.Security.SecurityContext.SuppressFlowWindowsIdentity*
  parent: System.Security.SecurityContext
  isExternal: false
  name: SuppressFlowWindowsIdentity
  nameWithType: SecurityContext.SuppressFlowWindowsIdentity
