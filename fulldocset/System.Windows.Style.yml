### YamlMime:ManagedReference
items:
- uid: System.Windows.Style
  id: Style
  children:
  - System.Windows.Style.#ctor
  - System.Windows.Style.#ctor(System.Type)
  - System.Windows.Style.#ctor(System.Type,System.Windows.Style)
  - System.Windows.Style.BasedOn
  - System.Windows.Style.GetHashCode
  - System.Windows.Style.IsSealed
  - System.Windows.Style.RegisterName(System.String,System.Object)
  - System.Windows.Style.Resources
  - System.Windows.Style.Seal
  - System.Windows.Style.Setters
  - System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)
  - System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)
  - System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)
  - System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.Style.TargetType
  - System.Windows.Style.Triggers
  - System.Windows.Style.UnregisterName(System.String)
  langs:
  - csharp
  name: Style
  nameWithType: Style
  fullName: System.Windows.Style
  type: Class
  summary: "プロパティ、リソース、およびイベント ハンドラーの型のインスタンス間で共有できるようにします。"
  remarks: "<xref:System.Windows.FrameworkElement>または<xref:System.Windows.FrameworkContentElement>。</xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement>から派生した任意の要素のスタイルを設定することができます。 スタイルが最もよく内にリソースとして宣言されている、<xref:System.Windows.Application.Resources%2A>セクション</xref:System.Windows.Application.Resources%2A>。 スタイルは、リソースであるため、すべてのリソースに適用されるスコープの規則に従いますスタイルを適用できるに影響を宣言する場合は。 アプリケーション定義のルート要素にスタイルを宣言するインスタンスの場合は、[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]ファイル、スタイルは、アプリケーションのどこでも使用できます。 ナビゲーション アプリケーションを作成するし、スタイルのアプリケーションのいずれかで宣言[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]をでのみファイル、スタイルが使用できる[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]ファイル。 リソースのルールのスコープの詳細については、次を参照してください。 [XAML リソース](~/add/includes/ajax-current-ext-md.md)です。       Style 宣言が&1; つまたは複数のコレクションを格納するスタイル オブジェクトから成る<xref:System.Windows.Setter>オブジェクト</xref:System.Windows.Setter>。 各<xref:System.Windows.Setter>の<xref:System.Windows.Setter.Property%2A><xref:System.Windows.Setter.Value%2A>。</xref:System.Windows.Setter.Value%2A></xref:System.Windows.Setter.Property%2A>で構成されています</xref:System.Windows.Setter> プロパティは、要素のスタイルのプロパティの名前に適用します。 スタイルがリソースとして宣言されると、後に、他のリソースと同じように、参照できます。      > [!NOTE] > 同じ set アクセス操作子コレクションの&1; つ以上の set アクセス操作子があるかどうか<xref:System.Windows.Setter.Property%2A>プロパティ値、宣言されている set アクセス操作子が最終が使用されます</xref:System.Windows.Setter.Property%2A>。 同様と設定した場合、同じプロパティ値をスタイルで要素に直接、直接要素で設定された値が優先されます。       [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]スタイルとテンプレートのモデルでは、メンテナンスとプレゼンテーションとロジックの分離を参照して共有します。 スタイルとテンプレートのモデルにはカスタマイズするための機能のセットが含まれています、[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]です。 この機能のスイートには、スタイル クラスだけでなく、次が含まれています:- <xref:System.Windows.Trigger>-<xref:System.Windows.EventTrigger>と<xref:System.Windows.Media.Animation.Storyboard>- <xref:System.Windows.Controls.ControlTemplate>-<xref:System.Windows.DataTemplate>詳細については、次を参照してください[スタイルとテンプレート](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.DataTemplate> </xref:System.Windows.Controls.ControlTemplate> </xref:System.Windows.Media.Animation.Storyboard> </xref:System.Windows.EventTrigger> </xref:System.Windows.Trigger> 。"
  example:
  - "The following example shows a style declaration that will affect the <xref:System.Windows.Controls.Control.Background%2A> property of a <xref:System.Windows.Controls.Control>.  \n  \n [!code-xml[StyleOvw01#StyleSimple](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#stylesimple)]\n [!code-xml[StyleOvw01#StyleSimple](~/add/codesnippet/xaml/t-system.windows.style_1.xaml)]  \n  \n To apply the above style, do the following:  \n  \n [!code-xml[StyleOvw01#StyleSimpleApplied](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#stylesimpleapplied)]\n [!code-xml[StyleOvw01#StyleSimpleApplied](~/add/codesnippet/xaml/t-system.windows.style_2.xaml)]  \n  \n You can also apply styles to all elements of a given type by using the <xref:System.Windows.Style.TargetType%2A> property. Adding the target type to the style means that you no longer have to fully qualify the property you are setting with the `ClassName.PropertyName` syntax. The following example defines a style that will be applied to every <xref:System.Windows.Controls.TextBlock> element.  \n  \n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/photostore/window1.xaml#1)]\n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/t-system.windows.style_3.xaml)]  \n  \n> [!NOTE]\n>  Many [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact. For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBlock> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBlock> controls in the canvas, even if the <xref:System.Windows.Controls.TextBlock> is part of another control, such as a <xref:System.Windows.Controls.ListBox>.  \n  \n For information on how to extend or inherit from a defined style, see the <xref:System.Windows.Style.BasedOn%2A> page."
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)]

      [System.Windows.Markup.ContentProperty("Setters")]

      [System.Windows.Markup.DictionaryKeyProperty("TargetType")]

      public class Style : System.Windows.Threading.DispatcherObject, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope, System.Windows.Markup.IQueryAmbient
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements:
  - System.Windows.Markup.IAddChild
  - System.Windows.Markup.INameScope
  - System.Windows.Markup.IQueryAmbient
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Style.#ctor
  id: '#ctor'
  parent: System.Windows.Style
  langs:
  - csharp
  name: Style()
  nameWithType: Style.Style()
  fullName: System.Windows.Style.Style()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Style&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターの呼び出しがの遅延の検証を要求<xref:System.Windows.Style.TargetType%2A>と<xref:System.Windows.Style.BasedOn%2A>型のスタイルを設定します</xref:System.Windows.Style.BasedOn%2A></xref:System.Windows.Style.TargetType%2A>。 これはパーサーのコンテキスト外に使用する場合の動作は定義されません。"
  syntax:
    content: public Style ();
    parameters: []
  overload: System.Windows.Style.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Windows.Style
  langs:
  - csharp
  name: Style(Type)
  nameWithType: Style.Style(Type)
  fullName: System.Windows.Style.Style(Type)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Style&quot;> </xref>指定<xref:System.Type></xref:System.Type>を使用するクラス。"
  syntax:
    content: public Style (Type targetType);
    parameters:
    - id: targetType
      type: System.Type
      description: "スタイルを適用する型。"
  overload: System.Windows.Style.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.#ctor(System.Type,System.Windows.Style)
  id: '#ctor(System.Type,System.Windows.Style)'
  parent: System.Windows.Style
  langs:
  - csharp
  name: Style(Type,Style)
  nameWithType: Style.Style(Type,Style)
  fullName: System.Windows.Style.Style(Type,Style)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Style&quot;> </xref>指定で使用するクラス<xref:System.Type>に基づいて、指定されたと<xref href=&quot;System.Windows.Style&quot;> </xref></xref:System.Type> 。"
  syntax:
    content: public Style (Type targetType, System.Windows.Style basedOn);
    parameters:
    - id: targetType
      type: System.Type
      description: "スタイルを適用する型。"
    - id: basedOn
      type: System.Windows.Style
      description: "このスタイルの基にスタイルです。"
  overload: System.Windows.Style.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.BasedOn
  id: BasedOn
  parent: System.Windows.Style
  langs:
  - csharp
  name: BasedOn
  nameWithType: Style.BasedOn
  fullName: System.Windows.Style.BasedOn
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または現在のスタイルの基盤となっている定義済みのスタイルを設定します。"
  remarks: "各スタイルは、1 つの BasedOn 値のみをサポートします。      <a name=&quot;xamlAttributeUsage_BasedOn&quot;></a>## XAML 属性の使用```   <object BasedOn=&quot;myStyle&quot; .../>   ``` <a name=&quot;xamlValues_BasedOn&quot;> </a> ## XAML 値*myStyle*既存のスタイル。       通常、使用して、[マークアップ拡張機能と WPF XAML](~/add/includes/ajax-current-ext-md.md)に既存のスタイルを参照してください。"
  example:
  - "There are several ways that styles in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] can be extended or inherited. Styles can be based on other styles through this property. When you use this property, the new style will inherit the values of the original style that are not explicitly redefined in the new style. In the following example, `Style2` inherits the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=fullName>value of `Yellow`, and adds a <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=fullName>value of `Blue`.  \n  \n [!code-xml[StyleOvw01#ExtendingStyle](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#extendingstyle)]\n [!code-xml[StyleOvw01#ExtendingStyle](~/add/codesnippet/xaml/p-system.windows.style.b_1.xaml)]  \n  \n Similarly, styles can be based on the style of an existing [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] element, as in the following example where the new style is based on the style of a <xref:System.Windows.Controls.TextBlock> element.  \n  \n [!code-xml[PhotoStoreDemoStyled#2](~/add/codesnippet/xaml/photostore/window1.xaml#2)]\n [!code-xml[PhotoStoreDemoStyled#2](~/add/codesnippet/xaml/p-system.windows.style.b_2.xaml)]  \n  \n> [!NOTE]\n>  If you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the type of the base style.  \n  \n Styles defined for specific types can also be based on other styles, as in the following example.  \n  \n [!code-xml[StyleOvw01#ExtendingStyleTargetType](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#extendingstyletargettype)]\n [!code-xml[StyleOvw01#ExtendingStyleTargetType](~/add/codesnippet/xaml/p-system.windows.style.b_3.xaml)]"
  syntax:
    content: public System.Windows.Style BasedOn { get; set; }
    return:
      type: System.Windows.Style
      description: "現在のスタイルの基盤となっている定義済みのスタイル。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Style.BasedOn*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.GetHashCode
  id: GetHashCode
  parent: System.Windows.Style
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Style.GetHashCode()
  fullName: System.Windows.Style.GetHashCode()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "このハッシュ コードを返します<xref href=&quot;System.Windows.Style&quot;></xref>です。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "ハッシュ コードをこの<xref href=&quot;System.Windows.Style&quot;></xref>です。"
  overload: System.Windows.Style.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.IsSealed
  id: IsSealed
  parent: System.Windows.Style
  langs:
  - csharp
  name: IsSealed
  nameWithType: Style.IsSealed
  fullName: System.Windows.Style.IsSealed
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "スタイルは読み取り専用と、変更することはできないかどうかを示す値を取得します。"
  remarks: "別のスタイルの基になるとき、または最初に適用された場合に、スタイルはシールされています。"
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、スタイルがシールされています。それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Style.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.RegisterName(System.String,System.Object)
  id: RegisterName(System.String,System.Object)
  parent: System.Windows.Style
  langs:
  - csharp
  name: RegisterName(String,Object)
  nameWithType: Style.RegisterName(String,Object)
  fullName: System.Windows.Style.RegisterName(String,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "現在の名前スコープに新しい名前とオブジェクトのペアを登録します。"
  syntax:
    content: public void RegisterName (string name, object scopedElement);
    parameters:
    - id: name
      type: System.String
      description: "登録する名前。"
    - id: scopedElement
      type: System.Object
      description: "オブジェクトを指定したマップを`name`です。"
  overload: System.Windows.Style.RegisterName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Resources
  id: Resources
  parent: System.Windows.Style
  langs:
  - csharp
  name: Resources
  nameWithType: Style.Resources
  fullName: System.Windows.Style.Resources
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはこのスタイルのスコープ内で使用できるリソースのコレクションを設定します。"
  remarks: "<a name=\"xamlPropertyElementUsage_Resources\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.Resources>  \n    oneOrMoreResourceElements  \n  </object.Resources>  \n</object>  \n- or -   \n<object>  \n  <object.Resources>  \n    <ResourceDictionary Source=\"externalDictionarySource\"/>  \n  </object.Resources>  \n</object>  \n```  \n  \n<a name=\"xamlValues_Resources\"></a>   \n## XAML Values  \n *oneOrMoreResourceElements*  \n One or more resource elements. To be referenced later in either [StaticResource Markup Extension](~/add/includes/ajax-current-ext-md.md) or [DynamicResource Markup Extension](~/add/includes/ajax-current-ext-md.md) syntax in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], a resource element must have an `x:Key` attribute.  \n  \n \\<ResourceDictionary Source=\" *externalDictionarySource*\"/>  \n An external dictionary source. For details, see [Merged Resource Dictionaries](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.ResourceDictionary Resources { get; set; }
    return:
      type: System.Windows.ResourceDictionary
      description: "このスタイルのスコープ内で使用できるリソース。"
  overload: System.Windows.Style.Resources*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Seal
  id: Seal
  parent: System.Windows.Style
  langs:
  - csharp
  name: Seal()
  nameWithType: Style.Seal()
  fullName: System.Windows.Style.Seal()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "変更することはできませんので、このスタイルとファクトリとトリガーをロックします。"
  syntax:
    content: public void Seal ();
    parameters: []
  overload: System.Windows.Style.Seal*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Setters
  id: Setters
  parent: System.Windows.Style
  langs:
  - csharp
  name: Setters
  nameWithType: Style.Setters
  fullName: System.Windows.Style.Setters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "コレクションを取得<xref href=&quot;System.Windows.Setter&quot;></xref>と<xref href=&quot;System.Windows.EventSetter&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Windows.Style>オブジェクトから成ります<xref:System.Windows.SetterBase>。</xref:System.Windows.SetterBase>に割り当て可能なオブジェクト</xref:System.Windows.Style>の Setter プロパティ 追加する、<xref:System.Windows.SetterBase>に子、<xref:System.Windows.Style>オブジェクトが暗黙的に追加して、<xref:System.Windows.SetterBaseCollection>の<xref:System.Windows.Style>オブジェクト</xref:System.Windows.Style></xref:System.Windows.SetterBaseCollection></xref:System.Windows.Style></xref:System.Windows.SetterBase>。       Set アクセス操作子を明示的にプロパティ要素の使用方法は、比較的一般的なもあります。 これは、set アクセス操作子からの区別が役立つ場合がありますマークアップ スタイルの意思決定<xref:System.Windows.Style.Resources%2A>と<xref:System.Windows.Style.Triggers%2A>複雑なスタイル内の項目</xref:System.Windows.Style.Triggers%2A></xref:System.Windows.Style.Resources%2A>。 例: ```   <Style>     <Style.Setters>       <!--one or more SetterBase derived object elements here-->     </Style.Setters>   </Style>   ``` <a name=&quot;xamlPropertyElementUsage_Setters&quot;> </a> ## XAML プロパティ要素の使用```   <object>     oneOrMoreSetters   </object>   ``` <a name=&quot;xamlValues_Setters&quot;> </a> ## XAML 値*oneOrMoreSetters*&1; つまたは複数<xref:System.Windows.Setter>または<xref:System.Windows.EventSetter>オブジェクト</xref:System.Windows.EventSetter></xref:System.Windows.Setter>。            "
  example:
  - "The following example shows how to use this property.  \n  \n [!code-vb[listboxitemstyle#1](~/add/codesnippet/visualbasic/ListBoxItemStyle/Pane1.xaml.vb#1)]\n [!code-cs[listboxitemstyle#1](~/add/codesnippet/csharp/ListBoxItemStyle/Pane1.xaml.cs#1)]  \n  \n Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object. The following <xref:System.Windows.EventSetter> is implicitly added to the <xref:System.Windows.SetterBaseCollection> of the style:  \n  \n [!code-xml[eventovwsupport#XAML2](~/add/codesnippet/xaml/EventOvwSupport/page2.xaml#xaml2)]"
  syntax:
    content: public System.Windows.SetterBaseCollection Setters { get; }
    return:
      type: System.Windows.SetterBaseCollection
      description: "コレクション<xref href=&quot;System.Windows.Setter&quot;></xref>と<xref href=&quot;System.Windows.EventSetter&quot;></xref>オブジェクト。 既定では、空のコレクションです。"
  overload: System.Windows.Style.Setters*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)
  id: System#Windows#Markup#IAddChild#AddChild(System.Object)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.IAddChild.AddChild(Object)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddChild(Object)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddChild(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "子オブジェクトを追加します。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Windows.Style>インスタンスにキャスト、<xref:System.Windows.Markup.IAddChild>インターフェイス</xref:System.Windows.Markup.IAddChild></xref:System.Windows.Style>。"
  syntax:
    content: void IAddChild.AddChild (object value);
    parameters:
    - id: value
      type: System.Object
      description: "追加する子オブジェクト。"
  overload: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)
  id: System#Windows#Markup#IAddChild#AddText(System.String)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.IAddChild.AddText(String)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddText(String)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddText(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ノードのテキストの内容をオブジェクトに追加します。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Windows.Style>インスタンスにキャスト、<xref:System.Windows.Markup.IAddChild>インターフェイス</xref:System.Windows.Markup.IAddChild></xref:System.Windows.Style>。"
  syntax:
    content: void IAddChild.AddText (string text);
    parameters:
    - id: text
      type: System.String
      description: "オブジェクトに追加するテキスト。"
  overload: System.Windows.Style.System#Windows#Markup#IAddChild#AddText*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)
  id: System#Windows#Markup#INameScope#FindName(System.String)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.INameScope.FindName(String)
  nameWithType: Style.System.Windows.Markup.INameScope.FindName(String)
  fullName: System.Windows.Style.System.Windows.Markup.INameScope.FindName(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "指定された識別名を持つオブジェクトを返します。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Windows.Style>インスタンスにキャスト、<xref:System.Windows.Markup.INameScope>インターフェイス</xref:System.Windows.Markup.INameScope></xref:System.Windows.Style>。"
  syntax:
    content: object INameScope.FindName (string name);
    parameters:
    - id: name
      type: System.String
      description: "要求されたオブジェクトの名前の識別子。"
    return:
      type: System.Object
      description: "オブジェクト場合が見つかりました。 返します<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>その名前のオブジェクトが見つからなかった場合です。"
  overload: System.Windows.Style.System#Windows#Markup#INameScope#FindName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  id: System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  nameWithType: Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "指定されたアンビエント プロパティは、現在のスコープで使用するかどうかを照会します。"
  syntax:
    content: bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "要求されたアンビエント プロパティの名前。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要求されたアンビエント プロパティがある場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.TargetType
  id: TargetType
  parent: System.Windows.Style
  langs:
  - csharp
  name: TargetType
  nameWithType: Style.TargetType
  fullName: System.Windows.Style.TargetType
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはこのスタイルの対象となる型を設定します。"
  remarks: "<xref:System.Windows.FrameworkElement>または<xref:System.Windows.FrameworkContentElement>。</xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement>から派生した任意の要素のスタイルを設定することができます。 したがって、対象の型は、それらの要素のいずれかのことはできます。 ただし、TargetType プロパティを使用してスタイルを作成しても TargetType プロパティを定義する別のスタイルを基にした場合、派生したスタイルの対象の型と同じである必要があります。 または基本スタイルの対象の型から派生します。       TargetType を指定しないかどうかは、指定する必要があります、`x:Key`の<xref:System.Windows.Style>しても、スタイルのクラス名のプロパティを修飾します</xref:System.Windows.Style>。      <a name=&quot;xamlAttributeUsage_TargetType&quot;></a>## XAML 属性の使用```   <object  TargetType=&quot;{x:Type typeName}&quot;/>   -or-   <object  TargetType=&quot;typeName&quot;/>   ``` <a name=&quot;xamlValues_TargetType&quot;> </a> ## XAML 値`{x:Type ...}`、 [X:type マークアップ拡張機能](~/add/includes/ajax-current-ext-md.md)マークアップ拡張機能を使用します。             *typeName*クラスの型名。"
  example:
  - "The following example defines a style that will be applied to all instances of the <xref:System.Windows.Controls.TextBlock> element.  \n  \n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/photostore/window1.xaml#1)]\n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/p-system.windows.style.t_0_1.xaml)]  \n  \n Setting the TargetType property to the <xref:System.Windows.Controls.TextBlock> type without setting an `x:Key` implicitly sets the `x:Key` to `{x:Type TextBlock}`. This also means that if you give the above <xref:System.Windows.Style> an `x:Key` value of anything other than `{x:Type TextBlock}`, the <xref:System.Windows.Style> would not be applied to all <xref:System.Windows.Controls.TextBlock> elements automatically. Instead, you need to apply the style to the <xref:System.Windows.Controls.TextBlock> elements explicitly.  \n  \n Many [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact. For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBox> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBox> controls in the canvas, even if the <xref:System.Windows.Controls.TextBox> is part of another control, such as a <xref:System.Windows.Controls.ComboBox>."
  syntax:
    content: public Type TargetType { get; set; }
    return:
      type: System.Type
      description: "このスタイルのターゲットの種類。"
  overload: System.Windows.Style.TargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Triggers
  id: Triggers
  parent: System.Windows.Style
  langs:
  - csharp
  name: Triggers
  nameWithType: Style.Triggers
  fullName: System.Windows.Style.Triggers
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "コレクションを取得<xref href=&quot;System.Windows.TriggerBase&quot;></xref>指定した条件に基づいて、オブジェクト プロパティの値を適用します。"
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]スタイルとテンプレートのモデルでは、 <xref:System.Windows.Style>.</xref:System.Windows.Style>内でトリガーを指定できます。 トリガーを有効にするときに特定の変更を適用するオブジェクトは、基本的には、条件 (特定のプロパティの値に変わったらなど`true`、イベント発生時または) がなければです。      <a name=&quot;xamlPropertyElementUsage_Triggers&quot;></a>## XAML プロパティ要素の使用```   <object>     <object.Triggers>       oneOrMoreTriggers     </object.Triggers>   </object>   ``` <a name=&quot;xamlValues_Triggers&quot;> </a> ## XAML 値*oneOrMoreTriggers* <xref:System.Windows.TriggerBase>.</xref:System.Windows.TriggerBase>から派生するクラスは、0 個以上のオブジェクトの要素      "
  example:
  - "The following example shows a named <xref:System.Windows.Style> available to <xref:System.Windows.Controls.Button> controls. The <xref:System.Windows.Style> defines a <xref:System.Windows.Trigger> element that changes the <xref:System.Windows.Controls.Control.Foreground%2A> property of a button when the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property is `true`.  \n  \n [!code-xml[BtnStyles#2](~/add/codesnippet/xaml/ButtonStyles2/app.xaml#2)]"
  syntax:
    content: public System.Windows.TriggerCollection Triggers { get; }
    return:
      type: System.Windows.TriggerCollection
      description: "コレクション<xref href=&quot;System.Windows.TriggerBase&quot;></xref>オブジェクト。 既定では、空のコレクションです。"
  overload: System.Windows.Style.Triggers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.UnregisterName(System.String)
  id: UnregisterName(System.String)
  parent: System.Windows.Style
  langs:
  - csharp
  name: UnregisterName(String)
  nameWithType: Style.UnregisterName(String)
  fullName: System.Windows.Style.UnregisterName(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "名前スコープから名前とオブジェクトのマッピングを削除します。"
  syntax:
    content: public void UnregisterName (string name);
    parameters:
    - id: name
      type: System.String
      description: "削除するマッピングの名前。"
  overload: System.Windows.Style.UnregisterName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.Windows.Style.#ctor
  parent: System.Windows.Style
  isExternal: false
  name: Style()
  nameWithType: Style.Style()
  fullName: System.Windows.Style.Style()
- uid: System.Windows.Style.#ctor(System.Type)
  parent: System.Windows.Style
  isExternal: false
  name: Style(Type)
  nameWithType: Style.Style(Type)
  fullName: System.Windows.Style.Style(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Style.#ctor(System.Type,System.Windows.Style)
  parent: System.Windows.Style
  isExternal: false
  name: Style(Type,Style)
  nameWithType: Style.Style(Type,Style)
  fullName: System.Windows.Style.Style(Type,Style)
- uid: System.Windows.Style
  parent: System.Windows
  isExternal: false
  name: Style
  nameWithType: Style
  fullName: System.Windows.Style
- uid: System.Windows.Style.BasedOn
  parent: System.Windows.Style
  isExternal: false
  name: BasedOn
  nameWithType: Style.BasedOn
  fullName: System.Windows.Style.BasedOn
- uid: System.Windows.Style.GetHashCode
  parent: System.Windows.Style
  isExternal: false
  name: GetHashCode()
  nameWithType: Style.GetHashCode()
  fullName: System.Windows.Style.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Style.IsSealed
  parent: System.Windows.Style
  isExternal: false
  name: IsSealed
  nameWithType: Style.IsSealed
  fullName: System.Windows.Style.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Style.RegisterName(System.String,System.Object)
  parent: System.Windows.Style
  isExternal: false
  name: RegisterName(String,Object)
  nameWithType: Style.RegisterName(String,Object)
  fullName: System.Windows.Style.RegisterName(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Style.Resources
  parent: System.Windows.Style
  isExternal: false
  name: Resources
  nameWithType: Style.Resources
  fullName: System.Windows.Style.Resources
- uid: System.Windows.ResourceDictionary
  parent: System.Windows
  isExternal: false
  name: ResourceDictionary
  nameWithType: ResourceDictionary
  fullName: System.Windows.ResourceDictionary
- uid: System.Windows.Style.Seal
  parent: System.Windows.Style
  isExternal: false
  name: Seal()
  nameWithType: Style.Seal()
  fullName: System.Windows.Style.Seal()
- uid: System.Windows.Style.Setters
  parent: System.Windows.Style
  isExternal: false
  name: Setters
  nameWithType: Style.Setters
  fullName: System.Windows.Style.Setters
- uid: System.Windows.SetterBaseCollection
  parent: System.Windows
  isExternal: false
  name: SetterBaseCollection
  nameWithType: SetterBaseCollection
  fullName: System.Windows.SetterBaseCollection
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddChild(Object)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddChild(Object)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddChild(Object)
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddText(String)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddText(String)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddText(String)
- uid: System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.INameScope.FindName(String)
  nameWithType: Style.System.Windows.Markup.INameScope.FindName(String)
  fullName: System.Windows.Style.System.Windows.Markup.INameScope.FindName(String)
- uid: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  nameWithType: Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
- uid: System.Windows.Style.TargetType
  parent: System.Windows.Style
  isExternal: false
  name: TargetType
  nameWithType: Style.TargetType
  fullName: System.Windows.Style.TargetType
- uid: System.Windows.Style.Triggers
  parent: System.Windows.Style
  isExternal: false
  name: Triggers
  nameWithType: Style.Triggers
  fullName: System.Windows.Style.Triggers
- uid: System.Windows.TriggerCollection
  parent: System.Windows
  isExternal: false
  name: TriggerCollection
  nameWithType: TriggerCollection
  fullName: System.Windows.TriggerCollection
- uid: System.Windows.Style.UnregisterName(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: UnregisterName(String)
  nameWithType: Style.UnregisterName(String)
  fullName: System.Windows.Style.UnregisterName(String)
- uid: System.Windows.Style.#ctor*
  parent: System.Windows.Style
  isExternal: false
  name: Style
  nameWithType: Style.Style
- uid: System.Windows.Style.BasedOn*
  parent: System.Windows.Style
  isExternal: false
  name: BasedOn
  nameWithType: Style.BasedOn
- uid: System.Windows.Style.GetHashCode*
  parent: System.Windows.Style
  isExternal: false
  name: GetHashCode
  nameWithType: Style.GetHashCode
- uid: System.Windows.Style.IsSealed*
  parent: System.Windows.Style
  isExternal: false
  name: IsSealed
  nameWithType: Style.IsSealed
- uid: System.Windows.Style.RegisterName*
  parent: System.Windows.Style
  isExternal: false
  name: RegisterName
  nameWithType: Style.RegisterName
- uid: System.Windows.Style.Resources*
  parent: System.Windows.Style
  isExternal: false
  name: Resources
  nameWithType: Style.Resources
- uid: System.Windows.Style.Seal*
  parent: System.Windows.Style
  isExternal: false
  name: Seal
  nameWithType: Style.Seal
- uid: System.Windows.Style.Setters*
  parent: System.Windows.Style
  isExternal: false
  name: Setters
  nameWithType: Style.Setters
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddChild
  nameWithType: Style.System.Windows.Markup.IAddChild.AddChild
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddText*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddText
  nameWithType: Style.System.Windows.Markup.IAddChild.AddText
- uid: System.Windows.Style.System#Windows#Markup#INameScope#FindName*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.INameScope.FindName
  nameWithType: Style.System.Windows.Markup.INameScope.FindName
- uid: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable
  nameWithType: Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable
- uid: System.Windows.Style.TargetType*
  parent: System.Windows.Style
  isExternal: false
  name: TargetType
  nameWithType: Style.TargetType
- uid: System.Windows.Style.Triggers*
  parent: System.Windows.Style
  isExternal: false
  name: Triggers
  nameWithType: Style.Triggers
- uid: System.Windows.Style.UnregisterName*
  parent: System.Windows.Style
  isExternal: false
  name: UnregisterName
  nameWithType: Style.UnregisterName
