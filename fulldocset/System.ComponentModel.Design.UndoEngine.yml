### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.UndoEngine
  id: UndoEngine
  children:
  - System.ComponentModel.Design.UndoEngine.#ctor(System.IServiceProvider)
  - System.ComponentModel.Design.UndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  - System.ComponentModel.Design.UndoEngine.CreateUndoUnit(System.String,System.Boolean)
  - System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  - System.ComponentModel.Design.UndoEngine.Dispose
  - System.ComponentModel.Design.UndoEngine.Dispose(System.Boolean)
  - System.ComponentModel.Design.UndoEngine.Enabled
  - System.ComponentModel.Design.UndoEngine.GetRequiredService(System.Type)
  - System.ComponentModel.Design.UndoEngine.GetService(System.Type)
  - System.ComponentModel.Design.UndoEngine.OnUndoing(System.EventArgs)
  - System.ComponentModel.Design.UndoEngine.OnUndone(System.EventArgs)
  - System.ComponentModel.Design.UndoEngine.Undoing
  - System.ComponentModel.Design.UndoEngine.UndoInProgress
  - System.ComponentModel.Design.UndoEngine.Undone
  langs:
  - csharp
  name: UndoEngine
  nameWithType: UndoEngine
  fullName: System.ComponentModel.Design.UndoEngine
  type: Class
  summary: "デザイン時に、汎用の元に戻す/やり直し機能を指定します。"
  remarks: "UndoEngine 抽象クラスでは、デザイン時に元に戻す機能の既定の実装を提供します。 元に戻す単位では、単一の取り消し可能な作業単位を表します。 スタックにこのユニットが追加され、ユーザーは、各アクションを元に戻すスタックをたどってことができます。 元に戻すユニット通常が設計に切り替えるには、その呼び出し元に戻すが&2; 回開始状態にアプリケーションを取得することを意味します。       UndoEngine クラスをデザイナー内で実行されているオブジェクトの次の特性の活用:: すべてのデザイナー ローダーによって、何らかの形式に永続化できるオブジェクトを興味深いです。      -すべてのオブジェクトは、プロパティが変更されたときに、プロパティ変更通知を生成します。      -<xref:System.ComponentModel.Design.IDesignerHost>にまたがる複数の小規模なアクションを元に戻すアクションを作成するために使用するトランザクションの概念を提供しています</xref:System.ComponentModel.Design.IDesignerHost>。       これらの機能では、UndoEngine は自動的に必要なすべての元に戻す単位を作成できます。      > [!NOTE] > プロパティの値を直接変更できません。 UndoEngine クラスでは、適切なを使用する必要があります<xref:System.ComponentModel.TypeDescriptor>プロパティ値を変更します</xref:System.ComponentModel.TypeDescriptor>。       変更通知の作成を UndoEngine モニターがユニットでは元に戻すし、自体ユニットは、シリアル化されたオブジェクトの状態で構成されます。 次の表は、UndoEngine が作成されるときに使用する必要があるサービスを示します。      |サービス |説明 |  |-------------|-----------------|  |<xref:System.ComponentModel.Design.Serialization.ComponentSerializationService>|前に、と変更が加えられた後に、コンポーネントのプロパティとオブジェクトの値を保存します |。  |<xref:System.ComponentModel.Design.IComponentChangeService>|コンポーネントに加えられた変更を元に戻すエンジンに通知します |。  |<xref:System.ComponentModel.Design.IDesignerHost>|トランザクションを追跡するために使用します |。     > [!NOTE] > UndoEngine クラスが必要であるため<xref:System.ComponentModel.Design.Serialization.ComponentSerializationService>と<xref:System.ComponentModel.Design.IComponentChangeService>はデザイン時にのみ使用します</xref:System.ComponentModel.Design.IComponentChangeService></xref:System.ComponentModel.Design.Serialization.ComponentSerializationService></xref:System.ComponentModel.Design.IDesignerHost></xref:System.ComponentModel.Design.IComponentChangeService></xref:System.ComponentModel.Design.Serialization.ComponentSerializationService>。       元に戻すエンジンは、トランザクションを追跡し、トランザクションを含む単一の取り消し単位を作成します。 その結果、元に戻すエンジンは、取り消し可能なアクションの期間にわたってコントロールを持ちます。 また、トランザクションの名前を指定できます、ため取り消し可能なアクションは、現在のトランザクションから名前を継承します。 使用できるトランザクションがないと、変更が報告された、元に戻すエンジンは、元に戻す名 (たとえば、「プロパティの変更 &quot;Text&quot;」) の変更の種類に基づいて作成します。"
  syntax:
    content: 'public abstract class UndoEngine : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: UndoEngine(IServiceProvider)
  nameWithType: UndoEngine.UndoEngine(IServiceProvider)
  fullName: System.ComponentModel.Design.UndoEngine.UndoEngine(IServiceProvider)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;> </xref>クラスです。"
  remarks: "<xref:System.ComponentModel.Design.UndoEngine>からいくつかのサービスが必要です、`provider`パラメーターを有効にします</xref:System.ComponentModel.Design.UndoEngine>。"
  syntax:
    content: protected UndoEngine (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "親サービス プロバイダー。"
  overload: System.ComponentModel.Design.UndoEngine.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>provider</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "必要なサービスが見つかりません。 参照してください<xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;></xref>必要なサービスです。 このサービスを削除した場合は、代わりを指定することを確認します。"
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  id: AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: AddUndoUnit(UndoEngine+UndoUnit)
  nameWithType: UndoEngine.AddUndoUnit(UndoEngine+UndoUnit)
  fullName: System.ComponentModel.Design.UndoEngine.AddUndoUnit(UndoEngine+UndoUnit)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  syntax:
    content: protected abstract void AddUndoUnit (System.ComponentModel.Design.UndoEngine.UndoUnit unit);
    parameters:
    - id: unit
      type: System.ComponentModel.Design.UndoEngine.UndoUnit
      description: "追加します。"
  overload: System.ComponentModel.Design.UndoEngine.AddUndoUnit*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.CreateUndoUnit(System.String,System.Boolean)
  id: CreateUndoUnit(System.String,System.Boolean)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: CreateUndoUnit(String,Boolean)
  nameWithType: UndoEngine.CreateUndoUnit(String,Boolean)
  fullName: System.ComponentModel.Design.UndoEngine.CreateUndoUnit(String,Boolean)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "新しい<xref:System.ComponentModel.Design.UndoEngine.UndoUnit>。</xref:System.ComponentModel.Design.UndoEngine.UndoUnit>の作成します。"
  remarks: "CreateUndoUnit メソッドの既定の実装では、新しい<xref:System.ComponentModel.Design.UndoEngine.UndoUnit>。</xref:System.ComponentModel.Design.UndoEngine.UndoUnit>値を返します       既定では、<xref:System.ComponentModel.Design.UndoEngine>で何も行われません、`primary`パラメーターは、元に戻すなど、COM に関係するの実装によって`Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit`デザイン パターン、一次単位とその子の違いを確認する必要があります</xref:System.ComponentModel.Design.UndoEngine>。"
  syntax:
    content: protected virtual System.ComponentModel.Design.UndoEngine.UndoUnit CreateUndoUnit (string name, bool primary);
    parameters:
    - id: name
      type: System.String
      description: "作成する単位の名前。"
    - id: primary
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>一連の入れ子になったユニットです。 最初に作成するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>後続の入れ子になった単位を作成します。"
    return:
      type: System.ComponentModel.Design.UndoEngine.UndoUnit
      description: "新しい<xref:System.ComponentModel.Design.UndoEngine.UndoUnit>、指定した名前</xref:System.ComponentModel.Design.UndoEngine.UndoUnit>。"
  overload: System.ComponentModel.Design.UndoEngine.CreateUndoUnit*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  id: DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: DiscardUndoUnit(UndoEngine+UndoUnit)
  nameWithType: UndoEngine.DiscardUndoUnit(UndoEngine+UndoUnit)
  fullName: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(UndoEngine+UndoUnit)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  syntax:
    content: protected virtual void DiscardUndoUnit (System.ComponentModel.Design.UndoEngine.UndoUnit unit);
    parameters:
    - id: unit
      type: System.ComponentModel.Design.UndoEngine.UndoUnit
      description: "追加します。"
  overload: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.Dispose
  id: Dispose
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: Dispose()
  nameWithType: UndoEngine.Dispose()
  fullName: System.ComponentModel.Design.UndoEngine.Dispose()
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;></xref>です。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ComponentModel.Design.UndoEngine.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UndoEngine.Dispose(Boolean)
  fullName: System.ComponentModel.Design.UndoEngine.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.ComponentModel.Design.UndoEngine.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.Enabled
  id: Enabled
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: Enabled
  nameWithType: UndoEngine.Enabled
  fullName: System.ComponentModel.Design.UndoEngine.Enabled
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "有効または無効にします<xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;></xref>です。"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.ComponentModel.Design.UndoEngine&quot;> </xref>が有効であるそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.Design.UndoEngine.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.GetRequiredService(System.Type)
  id: GetRequiredService(System.Type)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: GetRequiredService(Type)
  nameWithType: UndoEngine.GetRequiredService(Type)
  fullName: System.ComponentModel.Design.UndoEngine.GetRequiredService(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "要求されたサービスを取得します。"
  syntax:
    content: protected object GetRequiredService (Type serviceType);
    parameters:
    - id: serviceType
      type: System.Type
      description: "取得するサービスの型。"
    return:
      type: System.Object
      description: "要求したサービス場合が見つかりました。"
  overload: System.ComponentModel.Design.UndoEngine.GetRequiredService*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serviceType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>serviceType</code>必要ですが見つかりません。 このサービスを削除した場合は、代わりを指定することを確認します。"
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: UndoEngine.GetService(Type)
  fullName: System.ComponentModel.Design.UndoEngine.GetService(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "要求されたサービスを取得します。"
  syntax:
    content: protected object GetService (Type serviceType);
    parameters:
    - id: serviceType
      type: System.Type
      description: "取得するサービスの型。"
    return:
      type: System.Object
      description: "要求したサービスまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>要求されたサービスが見つからない場合。"
  overload: System.ComponentModel.Design.UndoEngine.GetService*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serviceType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.OnUndoing(System.EventArgs)
  id: OnUndoing(System.EventArgs)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: OnUndoing(EventArgs)
  nameWithType: UndoEngine.OnUndoing(EventArgs)
  fullName: System.ComponentModel.Design.UndoEngine.OnUndoing(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "発生させる、 <xref href=&quot;System.ComponentModel.Design.UndoEngine.Undoing&quot;> </xref>イベント。"
  syntax:
    content: protected virtual void OnUndoing (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.ComponentModel.Design.UndoEngine.OnUndoing*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.OnUndone(System.EventArgs)
  id: OnUndone(System.EventArgs)
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: OnUndone(EventArgs)
  nameWithType: UndoEngine.OnUndone(EventArgs)
  fullName: System.ComponentModel.Design.UndoEngine.OnUndone(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "発生させる、 <xref href=&quot;System.ComponentModel.Design.UndoEngine.Undone&quot;> </xref>イベント。"
  syntax:
    content: protected virtual void OnUndone (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.ComponentModel.Design.UndoEngine.OnUndone*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.Undoing
  id: Undoing
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: Undoing
  nameWithType: UndoEngine.Undoing
  fullName: System.ComponentModel.Design.UndoEngine.Undoing
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "元に戻す操作が実行される直前に発生します。"
  syntax:
    content: public event EventHandler Undoing;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.UndoInProgress
  id: UndoInProgress
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: UndoInProgress
  nameWithType: UndoEngine.UndoInProgress
  fullName: System.ComponentModel.Design.UndoEngine.UndoInProgress
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "元に戻す操作が行われていることを示します。"
  syntax:
    content: public bool UndoInProgress { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、元に戻す操作が進行中です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.Design.UndoEngine.UndoInProgress*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.UndoEngine.Undone
  id: Undone
  parent: System.ComponentModel.Design.UndoEngine
  langs:
  - csharp
  name: Undone
  nameWithType: UndoEngine.Undone
  fullName: System.ComponentModel.Design.UndoEngine.Undone
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "元に戻す操作が実行された直後後に発生します。"
  remarks: "元に戻すイベントは、例外がスローされた場合でも常に発生します。"
  syntax:
    content: public event EventHandler Undone;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ComponentModel.Design.UndoEngine.#ctor(System.IServiceProvider)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: UndoEngine(IServiceProvider)
  nameWithType: UndoEngine.UndoEngine(IServiceProvider)
  fullName: System.ComponentModel.Design.UndoEngine.UndoEngine(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.ComponentModel.Design.UndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: AddUndoUnit(UndoEngine+UndoUnit)
  nameWithType: UndoEngine.AddUndoUnit(UndoEngine+UndoUnit)
  fullName: System.ComponentModel.Design.UndoEngine.AddUndoUnit(UndoEngine+UndoUnit)
- uid: System.ComponentModel.Design.UndoEngine.UndoUnit
  parent: System.ComponentModel.Design
  isExternal: false
  name: UndoEngine+UndoUnit
  nameWithType: UndoEngine+UndoUnit
  fullName: System.ComponentModel.Design.UndoEngine+UndoUnit
- uid: System.ComponentModel.Design.UndoEngine.CreateUndoUnit(System.String,System.Boolean)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: CreateUndoUnit(String,Boolean)
  nameWithType: UndoEngine.CreateUndoUnit(String,Boolean)
  fullName: System.ComponentModel.Design.UndoEngine.CreateUndoUnit(String,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: DiscardUndoUnit(UndoEngine+UndoUnit)
  nameWithType: UndoEngine.DiscardUndoUnit(UndoEngine+UndoUnit)
  fullName: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(UndoEngine+UndoUnit)
- uid: System.ComponentModel.Design.UndoEngine.Dispose
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Dispose()
  nameWithType: UndoEngine.Dispose()
  fullName: System.ComponentModel.Design.UndoEngine.Dispose()
- uid: System.ComponentModel.Design.UndoEngine.Dispose(System.Boolean)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UndoEngine.Dispose(Boolean)
  fullName: System.ComponentModel.Design.UndoEngine.Dispose(Boolean)
- uid: System.ComponentModel.Design.UndoEngine.Enabled
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Enabled
  nameWithType: UndoEngine.Enabled
  fullName: System.ComponentModel.Design.UndoEngine.Enabled
- uid: System.ComponentModel.Design.UndoEngine.GetRequiredService(System.Type)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: GetRequiredService(Type)
  nameWithType: UndoEngine.GetRequiredService(Type)
  fullName: System.ComponentModel.Design.UndoEngine.GetRequiredService(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Design.UndoEngine.GetService(System.Type)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: GetService(Type)
  nameWithType: UndoEngine.GetService(Type)
  fullName: System.ComponentModel.Design.UndoEngine.GetService(Type)
- uid: System.ComponentModel.Design.UndoEngine.OnUndoing(System.EventArgs)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: OnUndoing(EventArgs)
  nameWithType: UndoEngine.OnUndoing(EventArgs)
  fullName: System.ComponentModel.Design.UndoEngine.OnUndoing(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.ComponentModel.Design.UndoEngine.OnUndone(System.EventArgs)
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: OnUndone(EventArgs)
  nameWithType: UndoEngine.OnUndone(EventArgs)
  fullName: System.ComponentModel.Design.UndoEngine.OnUndone(EventArgs)
- uid: System.ComponentModel.Design.UndoEngine.Undoing
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Undoing
  nameWithType: UndoEngine.Undoing
  fullName: System.ComponentModel.Design.UndoEngine.Undoing
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.Design.UndoEngine.UndoInProgress
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: UndoInProgress
  nameWithType: UndoEngine.UndoInProgress
  fullName: System.ComponentModel.Design.UndoEngine.UndoInProgress
- uid: System.ComponentModel.Design.UndoEngine.Undone
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Undone
  nameWithType: UndoEngine.Undone
  fullName: System.ComponentModel.Design.UndoEngine.Undone
- uid: System.ComponentModel.Design.UndoEngine.#ctor*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: UndoEngine
  nameWithType: UndoEngine.UndoEngine
- uid: System.ComponentModel.Design.UndoEngine.AddUndoUnit*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: AddUndoUnit
  nameWithType: UndoEngine.AddUndoUnit
- uid: System.ComponentModel.Design.UndoEngine.CreateUndoUnit*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: CreateUndoUnit
  nameWithType: UndoEngine.CreateUndoUnit
- uid: System.ComponentModel.Design.UndoEngine.DiscardUndoUnit*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: DiscardUndoUnit
  nameWithType: UndoEngine.DiscardUndoUnit
- uid: System.ComponentModel.Design.UndoEngine.Dispose*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Dispose
  nameWithType: UndoEngine.Dispose
- uid: System.ComponentModel.Design.UndoEngine.Enabled*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: Enabled
  nameWithType: UndoEngine.Enabled
- uid: System.ComponentModel.Design.UndoEngine.GetRequiredService*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: GetRequiredService
  nameWithType: UndoEngine.GetRequiredService
- uid: System.ComponentModel.Design.UndoEngine.GetService*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: GetService
  nameWithType: UndoEngine.GetService
- uid: System.ComponentModel.Design.UndoEngine.OnUndoing*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: OnUndoing
  nameWithType: UndoEngine.OnUndoing
- uid: System.ComponentModel.Design.UndoEngine.OnUndone*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: OnUndone
  nameWithType: UndoEngine.OnUndone
- uid: System.ComponentModel.Design.UndoEngine.UndoInProgress*
  parent: System.ComponentModel.Design.UndoEngine
  isExternal: false
  name: UndoInProgress
  nameWithType: UndoEngine.UndoInProgress
