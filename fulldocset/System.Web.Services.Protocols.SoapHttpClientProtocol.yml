### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol
  id: SoapHttpClientProtocol
  children:
  - System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  - System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  - System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  langs:
  - csharp
  name: SoapHttpClientProtocol
  nameWithType: SoapHttpClientProtocol
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol
  type: Class
  summary: "SOAP を使用する場合に、プロキシがから派生するクラスのクライアントを指定します。"
  remarks: "XML Web サービス クライアントを構築する場合、プロキシ クラスから派生した直接または間接的に<xref:System.Web.Services.Protocols.WebClientProtocol>XML Web サービス用に作成する必要があります</xref:System.Web.Services.Protocols.WebClientProtocol>。 プロキシ クラスが<xref:System.Web.Services.Protocols.HttpWebClientProtocol>。</xref:System.Web.Services.Protocols.HttpWebClientProtocol>から派生する SoapHttpClientProtocol から派生する必要があります XML Web サービス クライアントを呼び出すし、SOAP を使用して、 <xref:System.Web.Services.Protocols.HttpWebClientProtocol>、 <xref:System.Web.Services.Protocols.WebClientProtocol>。</xref:System.Web.Services.Protocols.WebClientProtocol>から派生、</xref:System.Web.Services.Protocols.HttpWebClientProtocol>       XML Web サービスと通信するためから直接または間接的に派生するプロキシ クラスを作成<xref:System.Web.Services.Protocols.WebClientProtocol>XML Web サービスを呼び出したいのです</xref:System.Web.Services.Protocols.WebClientProtocol>。 プロキシ クラスを手動で作成するには、代わりに、Web サービス記述言語ツール (Wsdl.exe) を使用して、指定された XML Web サービスのサービスの説明用のプロキシ クラスを作成します。 を介して XML Web サービス メソッドへの同期呼び出しが行われる SOAP プロトコルのプロキシ クラスを生成すると、ときに、<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>メソッドを使用して非同期呼び出しが行われた一方、<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>メソッドおよび<xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A>メソッド</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A></xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A></xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>。"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. The proxy class derives from SoapHttpClientProtocol, which derives from the abstract <xref:System.Web.Services.Protocols.WebClientProtocol> class.  \n  \n [!code-cs[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_15_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_15_1.vb)]\n [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_15_1.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was generated.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Web.Services.Protocols.WebClientProtocol
  - System.Web.Services.Protocols.HttpWebClientProtocol
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect
  - System.Web.Services.Protocols.HttpWebClientProtocol.CancelAsync(System.Object)
  - System.Web.Services.Protocols.HttpWebClientProtocol.ClientCertificates
  - System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer
  - System.Web.Services.Protocols.HttpWebClientProtocol.EnableDecompression
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type,System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type[],System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Web.Services.Protocols.HttpWebClientProtocol.Proxy
  - System.Web.Services.Protocols.HttpWebClientProtocol.UnsafeAuthenticatedConnectionSharing
  - System.Web.Services.Protocols.HttpWebClientProtocol.UserAgent
  - System.Web.Services.Protocols.WebClientProtocol.Abort
  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  - System.Web.Services.Protocols.WebClientProtocol.Credentials
  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  - System.Web.Services.Protocols.WebClientProtocol.Timeout
  - System.Web.Services.Protocols.WebClientProtocol.Url
  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: SoapHttpClientProtocol()
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.Services.Protocols.SoapHttpClientProtocol&quot;> </xref>クラスです。"
  syntax:
    content: public SoapHttpClientProtocol ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  id: BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: BeginInvoke(String,Object[],AsyncCallback,Object)
  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "SOAP を使用して、XML Web サービス メソッドの非同期呼び出しを開始します。"
  remarks: "通常、するは呼び出しません BeginInvoke メソッドを直接 XML Web サービス用の独自のプロキシ クラスを構築する場合を除き、します。       サービスの説明から Web サービス記述言語ツール (Wsdl.exe) によって生成されたプロキシ クラスは、XML Web サービス メソッドを同期的に呼び出すプロキシ クラスから派生する名前として、XML Web サービス メソッドを公開します。 各 XML Web サービス メソッドの&1; つのプロキシ クラスに追加の&2; つのメソッドを追加する XML Web サービス メソッドを非同期に呼び出す、 `Begin` XML Web サービス メソッドと&1; つの名前に追加するプレフィックス、`End`プレフィックスを追加します。       プロキシ クラスは、XML Web サービス メソッドへの非同期呼び出し呼び出しを開始する BeginInvoke メソッドを呼び出します。 たとえば、XML Web サービスは、という名前の XML Web サービス メソッドを公開`Add`、プロキシ クラスには、という名前のメソッドが含まれています。 `BeginAdd`、XML Web への呼び出しを開始するためのサービス メソッドです。 コード内で、 `BeginAdd`BeginInvoke メソッドへの呼び出しが行われた、および予期される戻り値の型に結果を配置している`Add`です。       `methodName` <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>など、メソッドに追加されたカスタム属性を見つけるために使用 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>派生メソッドは SOAP プロトコルに必要なに関する追加情報を提供します。</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>       `asyncState`渡される`callback`に含まれています、 <xref:System.IAsyncResult>BeginInvoke メソッドから返される</xref:System.IAsyncResult>。 `asyncState`で指定して非同期呼び出しのコンテキストに関する情報を渡すパラメーターを使用することができます、`callback`パラメーター、結果を処理するデリゲート。"
  example:
  - "The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service. Within the `BeginAdd` method of the proxy class, the BeginInvoke method is starting an asynchronous invocation to the `Add` XML Web service method.  \n  \n [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/cpp/81aca43b-c3a8-42d4-aae1-_1.cpp)]\n [!code-cs[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/csharp/81aca43b-c3a8-42d4-aae1-_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/visualbasic/81aca43b-c3a8-42d4-aae1-_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);
    parameters:
    - id: methodName
      type: System.String
      description: "BeginInvoke メソッドを呼び出している派生クラスで XML Web サービス メソッドの名前。"
    - id: parameters
      type: System.Object[]
      description: "XML Web サービスに渡すパラメーターを格納するオブジェクトの配列。 配列内の値の順序は、派生クラスの呼び出し元のメソッド パラメーター順序に対応します。"
    - id: callback
      type: System.AsyncCallback
      description: "非同期呼び出しが完了したときに呼び出すデリゲート。 場合`callback`は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートは呼び出されません。"
    - id: asyncState
      type: System.Object
      description: "呼び出し元によって提供される追加情報。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>に渡される、<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*>リモート メソッドの呼び出しからの戻り値を取得します</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*></xref:System.IAsyncResult>。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*
  exceptions:
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "要求は、サーバー コンピューターに到達が正常に処理されませんでした。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "要求は、オブジェクトの現在の状態に対して無効でした。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "ネットワークへのアクセス中にエラーが発生しました。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  id: Discover
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: Discover()
  nameWithType: SoapHttpClientProtocol.Discover()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "<xref:System.Web.Services.Protocols.WebClientProtocol.Url*>。</xref:System.Web.Services.Protocols.WebClientProtocol.Url*>で探索ドキュメントで説明されている XML Web サービスを動的にバインドします。"
  remarks: "XML Web サービス クライアントは、XML Web サービス、Discover メソッドを使用して、プロキシ クラスで参照されているもの以外に動的にバインドできます。 通常、<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>プロパティは、XML Web サービスのベース アドレスを参照します</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>。 ただし、Discover メソッドを呼び出す前に次のように設定します、<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>プロパティを探索ドキュメントの URL。</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> 。 Discover メソッドでは、プロキシ クラスで定義されているバインディングに探索ドキュメントで一致を検索しようとして動的にバインドします。 成功した場合、後続のメソッド呼び出しは、探索ドキュメントで説明されている XML Web サービスに送られます。       プロキシ クラスが<xref:System.Web.Services.WebServiceBindingAttribute>。</xref:System.Web.Services.WebServiceBindingAttribute>を使用してを呼び出す XML Web サービス メソッドによって実装されるバインドを定義する場合は、プロキシ クラスを作成するには、Web サービス記述言語ツール (Wsdl.exe) を使用して、 XML Web サービスには、複数のバインドが実装される場合、Wsdl.exe は各バインドのプロキシ クラスを作成します。 各プロキシ クラスが適用されている、<xref:System.Web.Services.WebServiceBindingAttribute>バインディングとその名前空間の名前を定義する</xref:System.Web.Services.WebServiceBindingAttribute>。 設定した探索ドキュメント、<xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>プロパティには、同じバインディング名と名前空間を実装する XML Web サービスへの参照を含める必要がありますか、例外がスローされます</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>。"
  example:
  - "The following code example is a proxy class generated using the Wsdl.exe utility for the `Math` XML Web service. A <xref:System.Web.Services.WebServiceBindingAttribute> is applied to the `Math` proxy class setting the binding name to `MathSoap` and its namespace to `http://tempuri.org/`.  \n  \n [!code-cs[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_8_1.cs)]\n [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_8_1.cpp)]\n [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_1.vb)]  \n  \n The following code example is a Web Service client using the preceding proxy class. Within the `EnterBtn_Click` event of the Web Form, the XML Web service client calls the Discover method attempting to dynamically bind to the URL supplied by the user.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/csharp/m-system.web.services.pr_8_2.aspx)]\n [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_2.aspx)]"
  syntax:
    content: public void Discover ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "プロキシ クラスには、定義されているバインドがありません。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "SOAP を使用して、XML Web サービス メソッドの非同期呼び出しを終了します。"
  remarks: "通常、するは呼び出しません EndInvoke メソッドを直接 XML Web サービス用の独自のプロキシ クラスを構築する場合を除き、します。       XML Web サービスの Web サービス記述言語ツール (Wsdl.exe) によって生成されたプロキシ クラスは、XML Web サービス メソッドを同期的に呼び出すためのプロキシ クラスの名前として、XML Web サービス メソッドを公開します。 XML Web サービス メソッドの非同期呼び出し、2 つのメソッドが追加で各 XML Web サービス メソッドのプロキシ クラスを`Begin`XML Web サービス メソッドと&1; つの名前に追加するプレフィックス、`End`プレフィックスを追加します。       プロキシ クラスは、XML Web サービス メソッドへの非同期呼び出し呼び出しを完了する EndInvoke メソッドを呼び出します。 たとえば、XML Web サービスは、という名前の XML Web サービス メソッドを公開`Add`、プロキシ クラスには、という名前のメソッドが含まれています。 `EndAdd`、XML Web の非同期呼び出しを完了するためのサービス メソッドです。 コード内で、 `EndAdd` EndInvoke メソッドへの呼び出しが行われ、予期される戻り値の型に結果を配置する、`Add`です。"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `EndAdd` method of the proxy class, the EndInvoke method completes the asynchronous invocation to the `Add` XML Web service method.  \n  \n [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/d0f11dd9-cadb-4640-91aa-_1.vb)]\n [!code-cs[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/d0f11dd9-cadb-4640-91aa-_1.cs)]\n [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/cpp/d0f11dd9-cadb-4640-91aa-_1.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object[] EndInvoke (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>から返される、<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*>メソッド</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*></xref:System.IAsyncResult>。"
    return:
      type: System.Object[]
      description: "戻り値と、参照渡しを含むオブジェクトの配列または<xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;></xref>派生クラスのメソッドのパラメーターです。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>戻り値ではありません、<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*>メソッドです。"
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "要求は、サーバー コンピューターに到達が正常に処理されませんでした。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "要求は、オブジェクトの現在の状態に対して無効でした。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "ネットワークへのアクセス中にエラーが発生しました。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  id: GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetReaderForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "返します、<xref:System.Xml.XmlReader>による初期化を行う、<xref:System.Web.Services.Protocols.SoapMessage.Stream*>のプロパティ、 <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref>パラメーター</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlReader> 。"
  syntax:
    content: protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapClientMessage
      description: "A <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> <xref:System.Web.Services.Protocols.SoapMessage.Stream*> <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>を初期化するために</xref:System.Web.Services.Protocols.SoapMessage.Stream*>提供します。"
    - id: bufferSize
      type: System.Int32
      description: "<xref:System.IO.StreamReader> <xref:System.Xml.XmlReader>。</xref:System.Xml.XmlReader>によって使用される</xref:System.IO.StreamReader>初期のバッファー サイズ"
    return:
      type: System.Xml.XmlReader
      description: "A<xref:System.Xml.XmlReader>による初期化を行う、<xref:System.Web.Services.Protocols.SoapMessage.Stream*>のプロパティ、 <code> message </code>パラメーター</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlReader> 。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  id: GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetWebRequest(Uri)
  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "作成、 <xref:System.Net.WebRequest>、指定された<code> uri </code></xref:System.Net.WebRequest> 。"
  remarks: "このメソッドをオーバーライドして、カスタマイズ、<xref:System.Net.WebRequest>前 XML Web に、サービス要求が行われる</xref:System.Net.WebRequest>。 たとえば、要求にカスタム ヘッダーを追加する可能性があります。"
  syntax:
    content: protected override System.Net.WebRequest GetWebRequest (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "<xref:System.Uri> <xref:System.Net.WebRequest>。</xref:System.Net.WebRequest>を作成するときに使用するには</xref:System.Uri>"
    return:
      type: System.Net.WebRequest
      description: "<xref:System.Net.WebRequest>指定した URI 用</xref:System.Net.WebRequest>。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <code>uri</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  id: GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetWriterForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "返します、<xref:System.Xml.XmlWriter>による初期化を行う、<xref:System.Web.Services.Protocols.SoapMessage.Stream*>のプロパティ、 <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref>のパラメーターです</xref:System.Web.Services.Protocols.SoapMessage.Stream*></xref:System.Xml.XmlWriter>。"
  syntax:
    content: protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapClientMessage
      description: "A <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> <xref:System.Web.Services.Protocols.SoapMessage.Stream*> <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>を初期化するために</xref:System.Web.Services.Protocols.SoapMessage.Stream*>提供します。"
    - id: bufferSize
      type: System.Int32
      description: "<xref:System.IO.StreamWriter> <xref:System.Xml.XmlWriter>。</xref:System.Xml.XmlWriter>によって使用される</xref:System.IO.StreamWriter>初期のバッファー サイズ"
    return:
      type: System.Xml.XmlWriter
      description: "A<xref:System.Xml.XmlWriter>による初期化を行う、<xref:System.Web.Services.Protocols.SoapMessage.Stream*>のプロパティ、 <code> message </code>パラメーター</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlWriter> 。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  id: Invoke(System.String,System.Object[])
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: Invoke(String,Object[])
  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "SOAP を同期的に使用する XML Web サービス メソッドを呼び出します。"
  remarks: "通常、呼び出さない Invoke メソッドを直接 XML Web サービス用の独自のプロキシ クラスを作成する場合を除き、します。       XML Web サービスの Web サービス記述言語ツール (Wsdl.exe) によって生成されたプロキシ クラスは、プロキシ クラスの名前として、XML Web サービス メソッドを公開します。 プロキシ クラスは、XML Web サービス メソッド呼び出しを起動する呼び出しメソッドを呼び出します。 たとえば、XML Web サービスは、という名前の XML Web サービス メソッドを公開`Add`、プロキシ クラスは、という名前のメソッドも含まれています。`Add`です。 コード内で、`Add`プロキシ クラスのメソッドは、Invoke メソッドを通じて XML Web サービス メソッドへの同期呼び出しが行われ、予期される戻り値の型に結果を配置する、`Add`です。       `methodName` <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>など、メソッドに追加されているカスタム属性を検索するパラメーターを使用 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>SOAP プロトコルに必要な派生メソッドの追加情報を提供します。</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `Add` method of the proxy class, the Invoke method is calling the `Add` XML Web service method.  \n  \n [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/cpp/0fe8d4bc-686d-467a-8cdd-_1.cpp)]\n [!code-cs[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/csharp/0fe8d4bc-686d-467a-8cdd-_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/visualbasic/0fe8d4bc-686d-467a-8cdd-_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object[] Invoke (string methodName, object[] parameters);
    parameters:
    - id: methodName
      type: System.String
      description: "XML Web サービス メソッドの名前。"
    - id: parameters
      type: System.Object[]
      description: "XML Web サービスに渡すパラメーターを格納するオブジェクトの配列。 配列内の値の順序は、派生クラスの呼び出し元のメソッド パラメーター順序に対応します。"
    return:
      type: System.Object[]
      description: "オブジェクトの配列を戻り値とを含む<xref uid=&quot;langword_csharp_reference&quot; name=&quot;reference&quot; href=&quot;&quot;></xref>または<xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;></xref>派生クラスのメソッドのパラメーターです。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*
  exceptions:
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "要求は、サーバー コンピューターに到達が正常に処理されませんでした。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "要求は、オブジェクトの現在の状態に対して無効でした。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "ネットワークへのアクセス中にエラーが発生しました。"
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,Object[],SendOrPostCallback)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "指定したメソッドを非同期的に呼び出します。"
  syntax:
    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);
    parameters:
    - id: methodName
      type: System.String
      description: "呼び出すメソッドの名前です。"
    - id: parameters
      type: System.Object[]
      description: "メソッドに渡すパラメーター。"
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "デリゲートは、メソッドの呼び出しが完了したときに呼び出されます。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "指定したメソッドを非同期的に呼び出します。"
  syntax:
    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);
    parameters:
    - id: methodName
      type: System.String
      description: "呼び出すメソッドの名前です。"
    - id: parameters
      type: System.Object[]
      description: "メソッドに渡すパラメーター。"
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "デリゲートは、メソッドの呼び出しが完了したときに呼び出されます。"
    - id: userState
      type: System.Object
      description: "状態情報を渡すために使用されるオブジェクト、`callback`を委任します。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  id: SoapVersion
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得または XML Web サービスに SOAP 要求に使用される SOAP プロトコルのバージョンを設定します。"
  remarks: "Web サービス記述言語ツール (Wsdl.exe) によって生成されたプロキシ クラスに SoapVersion プロパティが設定<xref:System.Web.Services.Protocols.SoapProtocolVersion>既定では、XML Web サービスの WSDL ドキュメントは、SOAP 1.1 をサポートしている場合</xref:System.Web.Services.Protocols.SoapProtocolVersion>。 ただし、XML Web サービスは、SOAP 1.2 のみをサポートするときに Wsdl.exe SoapVersion プロパティを設定する<xref:System.Web.Services.Protocols.SoapProtocolVersion>。</xref:System.Web.Services.Protocols.SoapProtocolVersion> Wsdl.exe とプロキシ クラスを生成するときに、SOAP プロトコルのバージョンを選択するには、使用、`/protocol`に切り替えて、`SOAP`または`SOAP12`SoapVersion プロパティを設定する設定<xref:System.Web.Services.Protocols.SoapProtocolVersion>と<xref:System.Web.Services.Protocols.SoapProtocolVersion>、それぞれ</xref:System.Web.Services.Protocols.SoapProtocolVersion></xref:System.Web.Services.Protocols.SoapProtocolVersion>。"
  example:
  - "The following code example sets the version of the protocol used to communicate with an XML Web service to SOAP 1.2.  \n  \n [!code-cs[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/csharp/p-system.web.services.pr_20_1.aspx)]\n [!code-vb[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_20_1.aspx)]"
  syntax:
    content: public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }
    return:
      type: System.Web.Services.Protocols.SoapProtocolVersion
      description: "1 つ、 <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref>値。 既定値は<xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;></xref>です。"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Services.Protocols.HttpWebClientProtocol
  isExternal: false
  name: System.Web.Services.Protocols.HttpWebClientProtocol
- uid: System.Web.Services.Protocols.SoapException
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapException
  nameWithType: SoapException
  fullName: System.Web.Services.Protocols.SoapException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapHttpClientProtocol()
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: BeginInvoke(String,Object[],AsyncCallback,Object)
  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Discover()
  nameWithType: SoapHttpClientProtocol.Discover()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetReaderForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Web.Services.Protocols.SoapClientMessage
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapClientMessage
  nameWithType: SoapClientMessage
  fullName: System.Web.Services.Protocols.SoapClientMessage
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWebRequest(Uri)
  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: true
  name: WebRequest
  nameWithType: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWriterForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Invoke(String,Object[])
  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync(String,Object[],SendOrPostCallback)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: true
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
- uid: System.Web.Services.Protocols.SoapProtocolVersion
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapProtocolVersion
  nameWithType: SoapProtocolVersion
  fullName: System.Web.Services.Protocols.SoapProtocolVersion
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapHttpClientProtocol
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: BeginInvoke
  nameWithType: SoapHttpClientProtocol.BeginInvoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Discover
  nameWithType: SoapHttpClientProtocol.Discover
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: EndInvoke
  nameWithType: SoapHttpClientProtocol.EndInvoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetReaderForMessage
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWebRequest
  nameWithType: SoapHttpClientProtocol.GetWebRequest
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWriterForMessage
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Invoke
  nameWithType: SoapHttpClientProtocol.Invoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync
  nameWithType: SoapHttpClientProtocol.InvokeAsync
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
