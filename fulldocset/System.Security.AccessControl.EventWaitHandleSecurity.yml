### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.EventWaitHandleSecurity
  id: EventWaitHandleSecurity
  children:
  - System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  - System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  langs:
  - csharp
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity
  fullName: System.Security.AccessControl.EventWaitHandleSecurity
  type: Class
  summary: "名前付きシステム待機ハンドルに適用される Windows アクセス制御セキュリティを表します。 このクラスは継承できません。"
  remarks: "EventWaitHandleSecurity オブジェクトは、名前付きシステム待機ハンドルのアクセス権を指定し、またアクセス試行を監査する方法を指定します。 待機ハンドルへのアクセス権がによって表される各アクセス規則と、規則で表される、<xref:System.Security.AccessControl.EventWaitHandleAccessRule>オブジェクト</xref:System.Security.AccessControl.EventWaitHandleAccessRule>。 によって表される各監査規則、<xref:System.Security.AccessControl.EventWaitHandleAuditRule>オブジェクト</xref:System.Security.AccessControl.EventWaitHandleAuditRule>。       これには、セキュリティ保護可能なオブジェクトごとに最大で&1; つ随意アクセス制御リスト (DACL) に最大で&1; つシステム アクセス制御リスト (SACL) を指定するアクセス試行を監査する、セキュリティで保護されたオブジェクトとのアクセスを制御する、基になる Windows セキュリティ システムがミラー化します。 DACL および SACL は、アクセスおよび監査のユーザーとグループを指定するアクセス制御エントリ (ACE) の一覧を並べ替えられています。 <xref:System.Security.AccessControl.EventWaitHandleAccessRule>または<xref:System.Security.AccessControl.EventWaitHandleAuditRule>オブジェクトは、1 つ以上の ACE を表す場合があります</xref:System.Security.AccessControl.EventWaitHandleAuditRule></xref:System.Security.AccessControl.EventWaitHandleAccessRule>。      > [!NOTE] >、<xref:System.Threading.EventWaitHandle>オブジェクトは、ローカルの待機ハンドルを表すことができる、名前付きシステムがハンドルを待機します</xref:System.Threading.EventWaitHandle>。 Windows アクセス制御セキュリティは、名前付きシステム待機ハンドルに対してのみ有効です。       EventWaitHandleSecurity <xref:System.Security.AccessControl.EventWaitHandleAccessRule>、および<xref:System.Security.AccessControl.EventWaitHandleAuditRule>クラスは、Acl や Ace の実装の詳細を非表示にします</xref:System.Security.AccessControl.EventWaitHandleAuditRule></xref:System.Security.AccessControl.EventWaitHandleAccessRule>。 これらによって、17 個の異なる ACE 型との継承とアクセス権の伝達を正しく維持するための複雑さの制約を無視できます。 これらのオブジェクトは、次の一般的なアクセス制御エラーを防ぐためにも設計:-null DACL のセキュリティ記述子を作成します。 DACL を null 参照では、可能性のあるサービス拒否攻撃を作成する、オブジェクトへのアクセス ルールを追加するすべてのユーザーを許可します。 新しい EventWaitHandleSecurity オブジェクトは、常にすべてのユーザーのすべてのアクセスを拒否する空の DACL を開始します。      -Ace の正規の順序に違反します。 DACL の ACE リストが正規の順序で維持されない場合ユーザー誤ってを付与するアクセス セキュリティで保護されたオブジェクト。 たとえば、拒否されたアクセス権は必要があります許可されるアクセス権の前に常に表示されます。 EventWaitHandleSecurity オブジェクトは、内部的に正しい順序を維持します。      操作に使用するセキュリティ記述子のフラグ、リソース マネージャーの制御だけである必要があります。      -ACE フラグの無効な組み合わせを作成します。      -継承された Ace を操作します。 継承と伝達は、アクセスおよび監査規則に対して行った変更への応答で、リソース マネージャーによって処理されます。      -Acl に無意味な Ace を挿入します。       .NET セキュリティ オブジェクトでサポートされていない唯一の機能は、次のようなアプリケーションの開発者の過半数によって避ける必要がある危険なアクティビティ:-通常、リソース マネージャーで実行される低レベルのタスクです。      追加または正規の順序を保持しない方法でアクセス制御エントリを削除します。       名前付きの待機ハンドルの Windows アクセス制御セキュリティを変更するには、使用、 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>EventWaitHandleSecurity オブジェクトを取得するメソッド</xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>。 追加し、ルールを削除して、セキュリティ オブジェクトを変更し、<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>それを再アタッチする方法</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>      > [!IMPORTANT] > EventWaitHandleSecurity オブジェクトに加えた変更には影響しません、名前付きの待機ハンドルのアクセス レベルが呼び出されるまで、<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>名前付きの待機ハンドルには、変更されたセキュリティ オブジェクトを割り当てる方法</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>。       1 つの待機ハンドルから別のアクセス制御セキュリティをコピーするには、使用、 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>EventWaitHandleSecurity を最初の待機ハンドルのアクセスおよび監査規則を表すオブジェクトを取得し、使用する方法、<xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>メソッド、またはを受け取るコンス トラクターにそれらのルールを&2; つ目の待機に割り当てる、EventWaitHandleSecurity オブジェクトを処理します</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName></xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>。       セキュリティ記述子定義言語 (SDDL) で、初期投資をユーザーが使用できる、 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>、名前付きの待機ハンドルのアクセス規則を設定するメソッドと<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>SDDL 形式でのアクセス規則を表す文字列を取得するメソッド</xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A></xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>。 これは、説明は、新規の開発は推奨されません。"
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates an EventWaitHandleSecurity object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_14_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_14_1.vb)]"
  syntax:
    content: 'public sealed class EventWaitHandleSecurity : System.Security.AccessControl.NativeObjectSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: EventWaitHandleSecurity()
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity()
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref>既定値を持つクラス。"
  remarks: "新しい<xref:System.Security.AccessControl.EventWaitHandleSecurity>オブジェクトは常に空の随意アクセス リスト (DACL)、すべてのユーザーのすべてのアクセスを拒否するで始まります</xref:System.Security.AccessControl.EventWaitHandleSecurity>。"
  syntax:
    content: public EventWaitHandleSecurity ();
    parameters: []
  overload: System.Security.AccessControl.EventWaitHandleSecurity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "このクラスは、Windows 98 または Windows Millennium Edition ではサポートされていません。"
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "列挙型を取得、 <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref>クラスのアクセス権を表現するために使用します。"
  remarks: "派生したクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>プロパティと戻り値のアクセス権を表すために使用する型</xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A></xref:System.Security.AccessControl.ObjectSecurity>。 配列または複数の種類のセキュリティ オブジェクトを格納するコレクションを操作するときは、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な列挙型を判断します。"
  syntax:
    content: public override Type AccessRightType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>オブジェクトを表す、 <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref>列挙体です</xref:System.Type>。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "指定したアクセス権、アクセス制御、およびフラグを指定したユーザーの新しいアクセス制御規則を作成します。"
  remarks: "アクセス制御規則を作成することをお勧めは<xref:System.Security.AccessControl.EventWaitHandleAccessRule>クラス</xref:System.Security.AccessControl.EventWaitHandleAccessRule>のコンス トラクターを使用するには      > [!NOTE] > 継承し、伝達フラグは、名前付きイベントに対しては無効ですはそれらを指定することも可能です。 これは使用しないで、不必要に複雑になる、ルールのメンテナンスたとえばするには互換性のある規則の組み合わせに干渉することであるためです。"
  syntax:
    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "<xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref>ユーザーを識別するまたはにグループのルールを適用します。"
    - id: accessMask
      type: System.Int32
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> 、許可または拒否するアクセス権を指定する値が整数にキャストします。"
    - id: isInherited
      type: System.Boolean
      description: "名前付きの待機ハンドルの無意味な階層がないためです。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "名前付きの待機ハンドルの無意味な階層がないためです。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "名前付きの待機ハンドルの無意味な階層がないためです。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>権限を許可または拒否するかどうかを指定する値。"
    return:
      type: System.Security.AccessControl.AccessRule
      description: "<xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref>を指定したユーザーの指定された権限を表すオブジェクト。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>、 <code>inheritanceFlags</code>、 <code>propagationFlags</code>、または<code>type</code>に無効な値を指定します。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>accessMask</code>ゼロです。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>型のどちらも<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>、やなどの型の<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>型に変換できる<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "型を取得、 <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref>クラスのアクセス規則を表現するために使用します。"
  remarks: "派生したクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>プロパティと戻り値のアクセス規則を表すために使用する型</xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A></xref:System.Security.AccessControl.ObjectSecurity>。 配列または複数の種類のセキュリティ オブジェクトを格納するコレクションを操作するときは、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切なアクセス ルールの種類を決定します。"
  syntax:
    content: public override Type AccessRuleType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>オブジェクトを表す、 <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref>クラス</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AddAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "使用する新しい規則をマージできる一致するアクセス制御規則を検索します。 何も見つからない場合は、新しい規則を追加します。"
  remarks: "AddAccessRule メソッドは、同じユーザーまたはグループと同じ規則を検索<xref:System.Security.AccessControl.AccessControlType>として`rule`</xref:System.Security.AccessControl.AccessControlType>。 見つからない場合は、`rule`を追加します。 照合ルールが見つからないかどうかは、rights in`rule`既存の規則とマージされます。"
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/729692a8-5e98-486a-9864-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/729692a8-5e98-486a-9864-_1.vb)]"
  syntax:
    content: public void AddAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "アクセス制御規則を追加します。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AddAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "使用する新しい規則をマージできる監査規則を検索します。 何も見つからない場合は、新しい規則を追加します。"
  remarks: "AddAuditRule メソッドと同じユーザーまたはグループとして規則を検索`rule`です。 見つからない場合は、`rule`を追加します。 照合ルールが見つからないかどうかでフラグ`rule`既存のルールにマージされます。"
  syntax:
    content: public void AddAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "追加する監査規則。 このルールで指定されたユーザーは、検索を決定します。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "規則、監査へのアクセス権、および監査規則をトリガーする結果を適用するユーザーを指定して、新しい監査規則を作成します。"
  remarks: "監査規則を作成することをお勧めは<xref:System.Security.AccessControl.EventWaitHandleAuditRule>クラス</xref:System.Security.AccessControl.EventWaitHandleAuditRule>のコンス トラクターを使用するには      > [!NOTE] > 継承し、伝達フラグは、名前付きイベントに対しては無効ですはそれらを指定することも可能です。 これは使用しないで、不必要に複雑になる、ルールのメンテナンスたとえばするには互換性のある規則の組み合わせに干渉することであるためです。"
  syntax:
    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "<xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref>ユーザーを識別するまたはにグループのルールを適用します。"
    - id: accessMask
      type: System.Int32
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;></xref>監査へのアクセス権を指定する値が整数にキャストします。"
    - id: isInherited
      type: System.Boolean
      description: "名前付きの待機ハンドルの無意味な階層がないためです。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "名前付きの待機ハンドルの無意味な階層がないためです。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "名前付きの待機ハンドルの無意味な階層がないためです。"
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.AuditFlags&quot;></xref>アクセスが成功した、失敗したアクセス、またはその両方を監査するかどうかを指定する値。"
    return:
      type: System.Security.AccessControl.AuditRule
      description: "<xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref>指定したユーザーの指定された監査規則を表すオブジェクト。 メソッドの戻り値の型は、基本クラス<xref href=&quot;System.Security.AccessControl.AuditRule&quot;> </xref>、派生クラスを戻り値を安全にキャストされることができますが、します。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>、 <code>inheritanceFlags</code>、 <code>propagationFlags</code>、または<code>flags</code>に無効な値を指定します。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>accessMask</code>ゼロです。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>型のどちらも<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>、やなどの型の<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>型に変換できる<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "型を取得、 <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref>監査規則を表すクラスします。"
  remarks: "派生したクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>プロパティと監査権限を表すために使用する型を戻り値</xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A></xref:System.Security.AccessControl.ObjectSecurity>。 配列または複数の種類のセキュリティ オブジェクトを格納するコレクションを操作するときは、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な監査規則の種類を決定します。"
  syntax:
    content: public override Type AuditRuleType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>オブジェクトを表す、 <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref>クラス</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "同じユーザーがアクセス制御規則を検索し、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (許可または拒否) ようなルールが見つかった場合、指定されたアクセス規則に含まれる権限がそのから削除されます互換性のある継承と伝達のフラグです。 使用して、指定されたアクセス規則として。"
  remarks: "現在<xref:System.Security.AccessControl.EventWaitHandleSecurity>は同じユーザーと同じを持つルールの検索は<xref:System.Security.AccessControl.AccessControlType>として値`rule`</xref:System.Security.AccessControl.AccessControlType></xref:System.Security.AccessControl.EventWaitHandleSecurity>。 このような規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`です。 指定されたフラグと互換性のための継承との互換性フラグをチェック照合ルールが見つかった場合、`rule`です。 互換性のある規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`です。 権限がで指定された互換性フラグを含むルールが見つかった場合、 `rule` 、互換性のあるルールから削除されますが返されます`true`です。 場合`rule`互換性のあるルールに含まれていない権限を指定、それらの権利に関するアクションは実行されません。 現在の全体の規則が削除される場合は、すべての権限は、互換性のある規則から削除されます、<xref:System.Security.AccessControl.EventWaitHandleSecurity>オブジェクト</xref:System.Security.AccessControl.EventWaitHandleSecurity>。      > [!IMPORTANT] > でそれらを作成することで、イベントのアクセス ルールの継承と伝達のフラグを指定できますが、<xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A>メソッド、お勧めしません</xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A>。 継承と伝達に、名前付きイベントの意味がなくと複雑アクセス ルールのメンテナンスを行います。"
  example:
  - "The following code example demonstrates the use of the RemoveAccessRule method to remove rights from an <xref:System.Security.AccessControl.AccessControlType> rule in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. It also shows that other rights in `rule` are ignored.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The rights allowed include <xref:System.Security.AccessControl.EventWaitHandleRights>, <xref:System.Security.AccessControl.EventWaitHandleRights>, and <xref:System.Security.AccessControl.EventWaitHandleRights>. The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.EventWaitHandleRights> and <xref:System.Security.AccessControl.EventWaitHandleRights> rights, and uses that rule with the RemoveAccessRule method to remove <xref:System.Security.AccessControl.EventWaitHandleRights> from the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The <xref:System.Security.AccessControl.EventWaitHandleRights> right in `rule` is ignored.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/22dce09a-3e98-48e6-a61f-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/22dce09a-3e98-48e6-a61f-_1.vb)]"
  syntax:
    content: public bool RemoveAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "<xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref>ユーザーを指定し、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>を検索し、ルール、一致する場合の継承と伝達のフラグのセットが見つかりませんと互換性のある必要があります。 場合は、互換性のあるルールから削除する権限を指定します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>互換性のある規則が見つかった場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRuleAll(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "同じユーザーが制御規則をアクセスするすべての検索と<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (許可または拒否)、指定されたルールし、見つかった場合は、削除にします。"
  remarks: "現在<xref:System.Security.AccessControl.EventWaitHandleSecurity>は同じユーザーと同じであるルールの検索は<xref:System.Security.AccessControl.AccessControlType>として値`rule`</xref:System.Security.AccessControl.AccessControlType></xref:System.Security.AccessControl.EventWaitHandleSecurity>。 指定された権限をまったく`rule`この検索を実行する場合は無視されます。 すべての照合ルールが削除されます。 照合ルールが見つからない場合、処理は行われません。"
  example:
  - "The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType> rule from the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/visualbasic/a6ff73cc-4227-4079-abe7-_1.vb)]\n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/csharp/a6ff73cc-4227-4079-abe7-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleAll (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "<xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref>ユーザーを指定し、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>を検索します。 このルールで指定された権限は無視されます。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "完全に一致する、指定したアクセス制御規則を検索し、削除を見つかった場合は、そのです。"
  remarks: "ルールが削除されるは、完全に一致する場合にのみ`rule`フラグを含むすべての詳細。 同じユーザーがその他の規則と<xref:System.Security.AccessControl.AccessControlType>には影響しません</xref:System.Security.AccessControl.AccessControlType>。      > [!IMPORTANT] > ルールが&1; つまたは複数基になるアクセス制御エントリ (ACE) を表し、これらのエントリの分割またはユーザーのアクセスのセキュリティ ルールを変更する場合に、必要に応じて、結合します。 したがって、ルールは、形式が追加されたときに存在しない可能性があります、RemoveAccessRuleSpecific メソッドが削除できない場合。"
  example:
  - "The following code example shows that the RemoveAccessRuleSpecific method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> access rule. The example then passes the original <xref:System.Security.AccessControl.AccessControlType> rule to the RemoveAccessRuleSpecific method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, and successfully uses the RemoveAccessRuleSpecific method to remove the rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/csharp/4b0413fe-85b1-4175-8dfd-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/visualbasic/4b0413fe-85b1-4175-8dfd-_1.vb)]"
  syntax:
    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "<xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref>を削除します。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "指定した規則と同じユーザーと互換性のある継承および伝達フラグは、監査規則の検索互換性のある規則が見つかった場合、指定されたルールに含まれる権限はそこから削除されます。"
  remarks: "現在<xref:System.Security.AccessControl.EventWaitHandleSecurity>を同一のユーザーを持つ監査規則の検索`rule`</xref:System.Security.AccessControl.EventWaitHandleSecurity>。 このような規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`です。 指定されたフラグと互換性のための継承との互換性フラグをチェック照合ルールが見つかった場合、`rule`です。 互換性のある規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`です。 権限がで指定された互換性フラグを含むルールが見つかった場合、 `rule` 、互換性のあるルールから削除されますが返されます`true`です。 場合`rule`互換性のあるルールに含まれていない権限を指定、それらの権利に関するアクションは実行されません。 現在の全体の規則が削除される場合は、すべての権限は、互換性のある規則から削除されます、<xref:System.Security.AccessControl.EventWaitHandleSecurity>オブジェクト</xref:System.Security.AccessControl.EventWaitHandleSecurity>。      > [!IMPORTANT] > でそれらを作成することで、イベントの監査規則の継承と伝達のフラグを指定できますが、<xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A>メソッド、お勧めしません</xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A>。 継承と伝達に、名前付きイベントの意味がなくより複雑な監査規則のメンテナンスを行います。"
  syntax:
    content: public bool RemoveAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "<xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref>を検索するユーザーと一致するルールは、継承と伝達のフラグのセットを指定する場合は、互換性がある必要があります。 場合は、互換性のあるルールから削除する権限を指定します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>互換性のある規則が見つかった場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRuleAll(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "場合とすべての監査規則を指定した規則と同じユーザーの検索を発見し、それらを削除します。"
  remarks: "現在<xref:System.Security.AccessControl.EventWaitHandleSecurity>監査規則を持つと同じユーザーが検索`rule`</xref:System.Security.AccessControl.EventWaitHandleSecurity>。 指定された権限をまったく`rule`この検索を実行する場合は無視されます。 すべての照合ルールが削除されます。 照合ルールが見つからない場合、処理は行われません。"
  syntax:
    content: public void RemoveAuditRuleAll (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "<xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref>を検索するユーザーを指定します。 このルールで指定された権限は無視されます。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "完全に一致する、指定された監査規則の検索と削除、見つかった場合は、そのします。"
  remarks: "ルールが削除されるは、完全に一致する場合にのみ`rule`フラグを含むすべての詳細。 同じユーザーの場合は、その他の監査規則には影響しません。      > [!IMPORTANT] > ルールが&1; つまたは複数基になるアクセス制御エントリ (ACE) を表し、これらのエントリの分割またはユーザーの監査のセキュリティ ルールを変更する場合に、必要に応じて、結合します。 したがって、ルールは、形式が追加されたときに存在しない可能性があります、RemoveAuditRuleSpecific メソッドが削除できない場合。"
  syntax:
    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "<xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref>を削除します。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: ResetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "関係なく、指定した規則と同じユーザーを持つすべてのアクセス制御規則を削除<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>、指定されたルールを追加します。"
  remarks: "ユーザーが、指定されたルールに一致するアクセス規則がない場合`rule`を追加します。"
  example:
  - "The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the ResetAccessRule method to replace both of the existing rules with the new rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1](~/add/codesnippet/csharp/831b1f62-72fc-4f57-bcc7-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1](~/add/codesnippet/visualbasic/831b1f62-72fc-4f57-bcc7-_1.vb)]"
  syntax:
    content: public void ResetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;></xref> to add. このルールで指定されたユーザーは、この規則を追加する前に削除する規則を決定します。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: SetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "同じユーザーを持つすべてのアクセス制御規則を削除し、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (許可または拒否)、指定されたルールとしてし、指定されたルールを追加します。"
  remarks: "場合は、指定されたルール<xref:System.Security.AccessControl.AccessControlType>をすべて削除するのには、このメソッドの効果<xref:System.Security.AccessControl.AccessControlType>、指定されたルールに置き換える、指定したユーザーのルール</xref:System.Security.AccessControl.AccessControlType></xref:System.Security.AccessControl.AccessControlType>。 指定されたルールがある場合<xref:System.Security.AccessControl.AccessControlType>すべて、<xref:System.Security.AccessControl.AccessControlType>指定したユーザーのルールは、指定されたルールに置き換えられます</xref:System.Security.AccessControl.AccessControlType></xref:System.Security.AccessControl.AccessControlType>。       規則がないユーザーの場合と<xref:System.Security.AccessControl.AccessControlType>指定の規則に一致`rule`が追加されます</xref:System.Security.AccessControl.AccessControlType>。"
  example:
  - "The following code example shows how the SetAccessRule method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the SetAccessRule method to replace the existing <xref:System.Security.AccessControl.AccessControlType> rule with the new rule. The rule that denies access is not affected.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1](~/add/codesnippet/visualbasic/2e843fc0-0bf3-426e-ae6b-_1.vb)]\n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1](~/add/codesnippet/csharp/2e843fc0-0bf3-426e-ae6b-_1.cs)]"
  syntax:
    content: public void SetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;></xref> to add. ユーザーと<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref>この規則には、この規則を追加する前に削除の規則を決定します。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: SetAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "関係なくすべての監査規則、指定されたルールと同じユーザーを削除、 <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref>値に設定して、指定されたルールを追加します。"
  remarks: "ユーザーが、指定されたルールに一致する監査規則がない場合`rule`を追加します。"
  syntax:
    content: public void SetAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;></xref> to add. このルールで指定されたユーザーは、この規則を追加する前に削除する規則を決定します。"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.NativeObjectSecurity
  isExternal: false
  name: System.Security.AccessControl.NativeObjectSecurity
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: EventWaitHandleSecurity()
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity()
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity()
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  nameWithType: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleAuditRule
  nameWithType: EventWaitHandleAuditRule
  fullName: System.Security.AccessControl.EventWaitHandleAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  nameWithType: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleAll(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleAll(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: ResetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleFactory
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAccessRule
  nameWithType: EventWaitHandleSecurity.AddAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAuditRule
  nameWithType: EventWaitHandleSecurity.AddAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleFactory
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRule
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleAll
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRule
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleAll
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: ResetAccessRule
  nameWithType: EventWaitHandleSecurity.ResetAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAccessRule
  nameWithType: EventWaitHandleSecurity.SetAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAuditRule
  nameWithType: EventWaitHandleSecurity.SetAuditRule
