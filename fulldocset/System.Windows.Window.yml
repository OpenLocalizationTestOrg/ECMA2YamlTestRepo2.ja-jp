### YamlMime:ManagedReference
items:
- uid: System.Windows.Window
  id: Window
  children:
  - System.Windows.Window.#ctor
  - System.Windows.Window.Activate
  - System.Windows.Window.Activated
  - System.Windows.Window.AllowsTransparency
  - System.Windows.Window.AllowsTransparencyProperty
  - System.Windows.Window.ArrangeOverride(System.Windows.Size)
  - System.Windows.Window.Close
  - System.Windows.Window.Closed
  - System.Windows.Window.Closing
  - System.Windows.Window.ContentRendered
  - System.Windows.Window.Deactivated
  - System.Windows.Window.DialogResult
  - System.Windows.Window.DpiChanged
  - System.Windows.Window.DpiChangedEvent
  - System.Windows.Window.DragMove
  - System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  - System.Windows.Window.Hide
  - System.Windows.Window.Icon
  - System.Windows.Window.IconProperty
  - System.Windows.Window.IsActive
  - System.Windows.Window.IsActiveProperty
  - System.Windows.Window.Left
  - System.Windows.Window.LeftProperty
  - System.Windows.Window.LocationChanged
  - System.Windows.Window.LogicalChildren
  - System.Windows.Window.MeasureOverride(System.Windows.Size)
  - System.Windows.Window.OnActivated(System.EventArgs)
  - System.Windows.Window.OnClosed(System.EventArgs)
  - System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  - System.Windows.Window.OnContentChanged(System.Object,System.Object)
  - System.Windows.Window.OnContentRendered(System.EventArgs)
  - System.Windows.Window.OnCreateAutomationPeer
  - System.Windows.Window.OnDeactivated(System.EventArgs)
  - System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  - System.Windows.Window.OnLocationChanged(System.EventArgs)
  - System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  - System.Windows.Window.OnSourceInitialized(System.EventArgs)
  - System.Windows.Window.OnStateChanged(System.EventArgs)
  - System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.Window.OwnedWindows
  - System.Windows.Window.Owner
  - System.Windows.Window.ResizeMode
  - System.Windows.Window.ResizeModeProperty
  - System.Windows.Window.RestoreBounds
  - System.Windows.Window.Show
  - System.Windows.Window.ShowActivated
  - System.Windows.Window.ShowActivatedProperty
  - System.Windows.Window.ShowDialog
  - System.Windows.Window.ShowInTaskbar
  - System.Windows.Window.ShowInTaskbarProperty
  - System.Windows.Window.SizeToContent
  - System.Windows.Window.SizeToContentProperty
  - System.Windows.Window.SourceInitialized
  - System.Windows.Window.StateChanged
  - System.Windows.Window.TaskbarItemInfo
  - System.Windows.Window.TaskbarItemInfoProperty
  - System.Windows.Window.Title
  - System.Windows.Window.TitleProperty
  - System.Windows.Window.Top
  - System.Windows.Window.Topmost
  - System.Windows.Window.TopmostProperty
  - System.Windows.Window.TopProperty
  - System.Windows.Window.WindowStartupLocation
  - System.Windows.Window.WindowState
  - System.Windows.Window.WindowStateProperty
  - System.Windows.Window.WindowStyle
  - System.Windows.Window.WindowStyleProperty
  langs:
  - csharp
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
  type: Class
  summary: "作成、構成、表示、およびウィンドウとダイアログ ボックスの有効期間を管理する機能を提供します。"
  remarks: "ユーザーとスタンドアロンのアプリケーション間の相互作用のポイントは、ウィンドウです。 A[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]ウィンドウは、2 つの領域で構成されています:-アイコン、タイトル、システム メニュー、windows の表示要素をホストする非クライアント領域の最小化ボタン、ボタン、[復元] ボタン、閉じるボタン、および罫線を最大化します。      は、クライアント領域アプリケーション固有のコンテンツをホストします。       標準のウィンドウが次の図に示すように:![ウィンドウ要素](~/add/media/windowoverviewfigure1.PNG &quot;ウィンドウ要素&quot;)ウィンドウが作成、構成、表示、およびウィンドウおよびダイアログ ボックスの両方の有効期間を管理する機能をカプセル化し、次のキーのサービスを提供:**継続時間管理**: <xref:System.Windows.Window.Activate%2A> <xref:System.Windows.Window.Activated> <xref:System.Windows.Window.Close%2A> <xref:System.Windows.Window.Closed> <xref:System.Windows.Window.Closing> <xref:System.Windows.Window.Deactivated> <xref:System.Windows.Window.Hide%2A> <xref:System.Windows.Window.IsActive%2A> <xref:System.Windows.Window.Show%2A> <xref:System.Windows.Window.SourceInitialized>.</xref:System.Windows.Window.SourceInitialized> </xref:System.Windows.Window.Show%2A> </xref:System.Windows.Window.IsActive%2A> </xref:System.Windows.Window.Hide%2A> </xref:System.Windows.Window.Deactivated> </xref:System.Windows.Window.Closing> </xref:System.Windows.Window.Closed> </xref:System.Windows.Window.Close%2A> </xref:System.Windows.Window.Activated> 、</xref:System.Windows.Window.Activate%2A>       **ウィンドウ管理**: <xref:System.Windows.Window.GetWindow%2A> <xref:System.Windows.Window.OwnedWindows%2A> <xref:System.Windows.Window.Owner%2A></xref:System.Windows.Window.Owner%2A> </xref:System.Windows.Window.OwnedWindows%2A> 、</xref:System.Windows.Window.GetWindow%2A> 。       **Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A>       **Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A></xref:System.Windows.Window.DialogResult%2A></xref:System.Windows.Window.WindowStyle%2A></xref:System.Windows.Window.WindowState%2A></xref:System.Windows.Window.WindowStartupLocation%2A></xref:System.Windows.Window.Topmost%2A></xref:System.Windows.Window.Top%2A></xref:System.Windows.Window.Title%2A></xref:System.Windows.Window.StateChanged></xref:System.Windows.Window.SizeToContent%2A></xref:System.Windows.Window.ShowInTaskbar%2A></xref:System.Windows.Window.ShowActivated%2A></xref:System.Windows.Window.RestoreBounds%2A></xref:System.Windows.Window.ResizeMode%2A></xref:System.Windows.Window.LocationChanged></xref:System.Windows.Window.Left%2A></xref:System.Windows.Window.Icon%2A></xref:System.Windows.Window.DragMove%2A></xref:System.Windows.Window.ContentRendered></xref:System.Windows.Window.AllowsTransparency%2A>       さらに、<xref:System.Windows.Application>のすべてのアプリケーションでウィンドウを管理するための特別なサポートが公開します-アプリケーションがアプリケーションで現在インスタンス化されるすべてのウィンドウの一覧を保持します。</xref:System.Windows.Application> 。 この一覧がによって公開されている、<xref:System.Windows.Application.Windows%2A>プロパティ</xref:System.Windows.Application.Windows%2A>。      -既定では、<xref:System.Windows.Application.MainWindow%2A>アプリケーションでインスタンス化される最初のウィンドウへの参照が自動的に設定します</xref:System.Windows.Application.MainWindow%2A>。 そのため、このウィンドウ アプリケーションのメイン ウィンドウです。       ウィンドウを実装するには、マークアップ、マークアップと分離コード、またはコードを使用します。       ウィンドウは windows およびスタンドアロン アプリケーションのダイアログ ボックスを表示する、主に使用します。 ただし、レベル、ウィンドウ、ウィザードなどのナビゲーションを必要とするアプリケーションのする<xref:System.Windows.Navigation.NavigationWindow>代わりに使用できます。<xref:System.Windows.Navigation.NavigationWindow>ウィンドウから派生し、それをブラウザー スタイルのナビゲーションのサポートを拡張します</xref:System.Windows.Navigation.NavigationWindow></xref:System.Windows.Navigation.NavigationWindow>。      > [!NOTE] > <xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame>を使用して他のコンテンツおよびコンテンツのコンテナーにナビゲート可能なコンテンツの諸島を組み込むことができます       ウィンドウが必要な`UnmanagedCode`インスタンス化するセキュリティのアクセス許可。 これは、次のような影響:- [!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)]-展開されたスタンドアロンのアプリケーションは、インターネットまたはローカル イントラネット ゾーンから起動されたときに、アクセス許可の昇格を要求します。      -[!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]未満の完全なアクセス許可では、ウィンドウやダイアログ ボックスをインスタンス化できませんを要求します。       スタンドアロン アプリケーションの配置とセキュリティの考慮事項については、次を参照してください。 [WPF のセキュリティ方針 - プラットフォーム セキュリティ](~/add/includes/ajax-current-ext-md.md)です。       ウィンドウが、 <xref:System.Windows.Controls.ContentControl>、つまり、任意の型 (文字列、画像、パネルなど) の&1; つのオブジェクトを格納できること</xref:System.Windows.Controls.ContentControl>。 詳細については、<xref:System.Windows.Controls.ContentControl>クラス</xref:System.Windows.Controls.ContentControl>を参照してください。 また、ウィンドウはルート要素と、そのため、別の要素のコンテンツの一部をすることはできません。      > [!NOTE] >、 <xref:System.Windows.FrameworkElement.Height%2A>、 <xref:System.Windows.FrameworkElement.Width%2A>、 <xref:System.Windows.Window.Top%2A>、および<xref:System.Windows.Window.Left%2A>スタイルからウィンドウに設定したプロパティは、実行時に適用されません</xref:System.Windows.Window.Left%2A></xref:System.Windows.Window.Top%2A></xref:System.Windows.FrameworkElement.Width%2A></xref:System.Windows.FrameworkElement.Height%2A>。      ## 使用して、複数のウィンドウ コントロールに同じプロパティ設定を適用するウィンドウ コントロールをカスタマイズする、<xref:System.Windows.FrameworkElement.Style%2A>プロパティ</xref:System.Windows.FrameworkElement.Style%2A>。 既定値を変更することができます<xref:System.Windows.Controls.ControlTemplate>コントロールの外観を一意にします</xref:System.Windows.Controls.ControlTemplate>。 作成の詳細については、<xref:System.Windows.Controls.ControlTemplate>を参照してください[、ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](~/add/includes/ajax-current-ext-md.md)</xref:System.Windows.Controls.ControlTemplate>。  パーツとは、ウィンドウに固有の状態を表示するには、次を参照してください。[ウィンドウ スタイルとテンプレート](~/add/includes/ajax-current-ext-md.md)です。       コントロールの既定のスタイルでは、このコントロールの依存関係プロパティを設定する場合があります。  プロパティが既定のスタイルが設定されている場合は、アプリケーションでコントロールが表示されたら既定値から、プロパティが変更可能性があります。 既定のスタイルは、いるデスクトップ テーマによっては、アプリケーションが実行されている場合は使用が決定されます。  詳細については、次を参照してください。 [WPF テーマの既定の](http://go.microsoft.com/fwlink/?LinkID=158252)します。      > [!NOTE] > Visual プロパティの設定はのみに効果がそのプロパティは、両方のウィンドウ コントロールの既定のテンプレートに存在しを使用して設定されている場合、します。 「を変更する、Visual 構造の制御」 セクションで visual のプロパティの一覧を検索できる[、ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md)です。"
  example:
  - "The following example shows how a standard window is defined using only markup:  \n  \n [!code-xml[WindowSnippets#WindowMARKUPONLY](~/add/codesnippet/xaml/WindowSnippets.CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  \n  \n The following example shows how a standard window is defined using only code:  \n  \n [!code-cs[WindowSnippets#WindowCODEONLY](~/add/codesnippet/csharp/WindowSnippets.CSharp/CodeOnlyWindow.cs#windowcodeonly)]\n [!code-vb[WindowSnippets#WindowCODEONLY](~/add/codesnippet/visualbasic/windowsnippets/codeonlywindow.vb#windowcodeonly)]  \n  \n The following example shows how a standard window is defined using a combination of markup and code-behind.  \n  \n [!code-xml[WindowSnippets#WindowXAML](~/add/codesnippet/xaml/WindowSnippets.CSharp/MainWindow.xaml#windowxaml)]  \n  \n [!code-cs[WindowSnippets#WindowCODEBEHIND](~/add/codesnippet/csharp/WindowSnippets.CSharp/MainWindow.xaml.cs#windowcodebehind)]\n [!code-vb[WindowSnippets#WindowCODEBEHIND](~/add/codesnippet/visualbasic/windowsnippets/mainwindow.xaml.vb#windowcodebehind)]"
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)]

      public class Window : System.Windows.Controls.ContentControl
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Visual
  - System.Windows.UIElement
  - System.Windows.FrameworkElement
  - System.Windows.Controls.Control
  - System.Windows.Controls.ContentControl
  implements: []
  inheritedMembers:
  - System.Windows.Controls.ContentControl.AddChild(System.Object)
  - System.Windows.Controls.ContentControl.AddText(System.String)
  - System.Windows.Controls.ContentControl.Content
  - System.Windows.Controls.ContentControl.ContentProperty
  - System.Windows.Controls.ContentControl.ContentStringFormat
  - System.Windows.Controls.ContentControl.ContentStringFormatProperty
  - System.Windows.Controls.ContentControl.ContentTemplate
  - System.Windows.Controls.ContentControl.ContentTemplateProperty
  - System.Windows.Controls.ContentControl.ContentTemplateSelector
  - System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty
  - System.Windows.Controls.ContentControl.HasContent
  - System.Windows.Controls.ContentControl.HasContentProperty
  - System.Windows.Controls.ContentControl.OnContentStringFormatChanged(System.String,System.String)
  - System.Windows.Controls.ContentControl.OnContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)
  - System.Windows.Controls.ContentControl.OnContentTemplateSelectorChanged(System.Windows.Controls.DataTemplateSelector,System.Windows.Controls.DataTemplateSelector)
  - System.Windows.Controls.ContentControl.ShouldSerializeContent
  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddChild(System.Object)
  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddText(System.String)
  - System.Windows.Controls.Control.Background
  - System.Windows.Controls.Control.BackgroundProperty
  - System.Windows.Controls.Control.BorderBrush
  - System.Windows.Controls.Control.BorderBrushProperty
  - System.Windows.Controls.Control.BorderThickness
  - System.Windows.Controls.Control.BorderThicknessProperty
  - System.Windows.Controls.Control.FontFamily
  - System.Windows.Controls.Control.FontFamilyProperty
  - System.Windows.Controls.Control.FontSize
  - System.Windows.Controls.Control.FontSizeProperty
  - System.Windows.Controls.Control.FontStretch
  - System.Windows.Controls.Control.FontStretchProperty
  - System.Windows.Controls.Control.FontStyle
  - System.Windows.Controls.Control.FontStyleProperty
  - System.Windows.Controls.Control.FontWeight
  - System.Windows.Controls.Control.FontWeightProperty
  - System.Windows.Controls.Control.Foreground
  - System.Windows.Controls.Control.ForegroundProperty
  - System.Windows.Controls.Control.HandlesScrolling
  - System.Windows.Controls.Control.HorizontalContentAlignment
  - System.Windows.Controls.Control.HorizontalContentAlignmentProperty
  - System.Windows.Controls.Control.IsTabStop
  - System.Windows.Controls.Control.IsTabStopProperty
  - System.Windows.Controls.Control.MouseDoubleClick
  - System.Windows.Controls.Control.MouseDoubleClickEvent
  - System.Windows.Controls.Control.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.Controls.Control.OnPreviewMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)
  - System.Windows.Controls.Control.Padding
  - System.Windows.Controls.Control.PaddingProperty
  - System.Windows.Controls.Control.PreviewMouseDoubleClick
  - System.Windows.Controls.Control.PreviewMouseDoubleClickEvent
  - System.Windows.Controls.Control.TabIndex
  - System.Windows.Controls.Control.TabIndexProperty
  - System.Windows.Controls.Control.Template
  - System.Windows.Controls.Control.TemplateProperty
  - System.Windows.Controls.Control.ToString
  - System.Windows.Controls.Control.VerticalContentAlignment
  - System.Windows.Controls.Control.VerticalContentAlignmentProperty
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.ActualHeight
  - System.Windows.FrameworkElement.ActualHeightProperty
  - System.Windows.FrameworkElement.ActualWidth
  - System.Windows.FrameworkElement.ActualWidthProperty
  - System.Windows.FrameworkElement.AddLogicalChild(System.Object)
  - System.Windows.FrameworkElement.ApplyTemplate
  - System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)
  - System.Windows.FrameworkElement.BeginInit
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  - System.Windows.FrameworkElement.BindingGroup
  - System.Windows.FrameworkElement.BindingGroupProperty
  - System.Windows.FrameworkElement.BringIntoView
  - System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)
  - System.Windows.FrameworkElement.ContextMenu
  - System.Windows.FrameworkElement.ContextMenuClosing
  - System.Windows.FrameworkElement.ContextMenuClosingEvent
  - System.Windows.FrameworkElement.ContextMenuOpening
  - System.Windows.FrameworkElement.ContextMenuOpeningEvent
  - System.Windows.FrameworkElement.ContextMenuProperty
  - System.Windows.FrameworkElement.Cursor
  - System.Windows.FrameworkElement.CursorProperty
  - System.Windows.FrameworkElement.DataContext
  - System.Windows.FrameworkElement.DataContextChanged
  - System.Windows.FrameworkElement.DataContextProperty
  - System.Windows.FrameworkElement.DefaultStyleKey
  - System.Windows.FrameworkElement.DefaultStyleKeyProperty
  - System.Windows.FrameworkElement.EndInit
  - System.Windows.FrameworkElement.FindName(System.String)
  - System.Windows.FrameworkElement.FindResource(System.Object)
  - System.Windows.FrameworkElement.FlowDirection
  - System.Windows.FrameworkElement.FlowDirectionProperty
  - System.Windows.FrameworkElement.FocusVisualStyle
  - System.Windows.FrameworkElement.FocusVisualStyleProperty
  - System.Windows.FrameworkElement.ForceCursor
  - System.Windows.FrameworkElement.ForceCursorProperty
  - System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)
  - System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)
  - System.Windows.FrameworkElement.GetTemplateChild(System.String)
  - System.Windows.FrameworkElement.GetUIParentCore
  - System.Windows.FrameworkElement.GetVisualChild(System.Int32)
  - System.Windows.FrameworkElement.Height
  - System.Windows.FrameworkElement.HeightProperty
  - System.Windows.FrameworkElement.HorizontalAlignment
  - System.Windows.FrameworkElement.HorizontalAlignmentProperty
  - System.Windows.FrameworkElement.InheritanceBehavior
  - System.Windows.FrameworkElement.Initialized
  - System.Windows.FrameworkElement.InputScope
  - System.Windows.FrameworkElement.InputScopeProperty
  - System.Windows.FrameworkElement.IsInitialized
  - System.Windows.FrameworkElement.IsLoaded
  - System.Windows.FrameworkElement.Language
  - System.Windows.FrameworkElement.LanguageProperty
  - System.Windows.FrameworkElement.LayoutTransform
  - System.Windows.FrameworkElement.LayoutTransformProperty
  - System.Windows.FrameworkElement.Loaded
  - System.Windows.FrameworkElement.LoadedEvent
  - System.Windows.FrameworkElement.Margin
  - System.Windows.FrameworkElement.MarginProperty
  - System.Windows.FrameworkElement.MaxHeight
  - System.Windows.FrameworkElement.MaxHeightProperty
  - System.Windows.FrameworkElement.MaxWidth
  - System.Windows.FrameworkElement.MaxWidthProperty
  - System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)
  - System.Windows.FrameworkElement.MinHeight
  - System.Windows.FrameworkElement.MinHeightProperty
  - System.Windows.FrameworkElement.MinWidth
  - System.Windows.FrameworkElement.MinWidthProperty
  - System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.FrameworkElement.Name
  - System.Windows.FrameworkElement.NameProperty
  - System.Windows.FrameworkElement.OnApplyTemplate
  - System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.FrameworkElement.OnInitialized(System.EventArgs)
  - System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  - System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)
  - System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OverridesDefaultStyle
  - System.Windows.FrameworkElement.OverridesDefaultStyleProperty
  - System.Windows.FrameworkElement.Parent
  - System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)
  - System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.FrameworkElement.RegisterName(System.String,System.Object)
  - System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)
  - System.Windows.FrameworkElement.RequestBringIntoView
  - System.Windows.FrameworkElement.RequestBringIntoViewEvent
  - System.Windows.FrameworkElement.Resources
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)
  - System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)
  - System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)
  - System.Windows.FrameworkElement.ShouldSerializeResources
  - System.Windows.FrameworkElement.ShouldSerializeStyle
  - System.Windows.FrameworkElement.ShouldSerializeTriggers
  - System.Windows.FrameworkElement.SizeChanged
  - System.Windows.FrameworkElement.SizeChangedEvent
  - System.Windows.FrameworkElement.SourceUpdated
  - System.Windows.FrameworkElement.Style
  - System.Windows.FrameworkElement.StyleProperty
  - System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.FrameworkElement.Tag
  - System.Windows.FrameworkElement.TagProperty
  - System.Windows.FrameworkElement.TargetUpdated
  - System.Windows.FrameworkElement.TemplatedParent
  - System.Windows.FrameworkElement.ToolTip
  - System.Windows.FrameworkElement.ToolTipClosing
  - System.Windows.FrameworkElement.ToolTipClosingEvent
  - System.Windows.FrameworkElement.ToolTipOpening
  - System.Windows.FrameworkElement.ToolTipOpeningEvent
  - System.Windows.FrameworkElement.ToolTipProperty
  - System.Windows.FrameworkElement.Triggers
  - System.Windows.FrameworkElement.TryFindResource(System.Object)
  - System.Windows.FrameworkElement.Unloaded
  - System.Windows.FrameworkElement.UnloadedEvent
  - System.Windows.FrameworkElement.UnregisterName(System.String)
  - System.Windows.FrameworkElement.UpdateDefaultStyle
  - System.Windows.FrameworkElement.UseLayoutRounding
  - System.Windows.FrameworkElement.UseLayoutRoundingProperty
  - System.Windows.FrameworkElement.VerticalAlignment
  - System.Windows.FrameworkElement.VerticalAlignmentProperty
  - System.Windows.FrameworkElement.VisualChildrenCount
  - System.Windows.FrameworkElement.Width
  - System.Windows.FrameworkElement.WidthProperty
  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.VisualBitmapEffect
  - System.Windows.Media.Visual.VisualBitmapEffectInput
  - System.Windows.Media.Visual.VisualBitmapScalingMode
  - System.Windows.Media.Visual.VisualCacheMode
  - System.Windows.Media.Visual.VisualClearTypeHint
  - System.Windows.Media.Visual.VisualClip
  - System.Windows.Media.Visual.VisualEdgeMode
  - System.Windows.Media.Visual.VisualEffect
  - System.Windows.Media.Visual.VisualOffset
  - System.Windows.Media.Visual.VisualOpacity
  - System.Windows.Media.Visual.VisualOpacityMask
  - System.Windows.Media.Visual.VisualParent
  - System.Windows.Media.Visual.VisualScrollableAreaClip
  - System.Windows.Media.Visual.VisualTextHintingMode
  - System.Windows.Media.Visual.VisualTextRenderingMode
  - System.Windows.Media.Visual.VisualTransform
  - System.Windows.Media.Visual.VisualXSnappingGuidelines
  - System.Windows.Media.Visual.VisualYSnappingGuidelines
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.AllowDrop
  - System.Windows.UIElement.AllowDropProperty
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.AreAnyTouchesCaptured
  - System.Windows.UIElement.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement.AreAnyTouchesOver
  - System.Windows.UIElement.AreAnyTouchesOverProperty
  - System.Windows.UIElement.Arrange(System.Windows.Rect)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.BitmapEffect
  - System.Windows.UIElement.BitmapEffectInput
  - System.Windows.UIElement.BitmapEffectInputProperty
  - System.Windows.UIElement.BitmapEffectProperty
  - System.Windows.UIElement.CacheMode
  - System.Windows.UIElement.CacheModeProperty
  - System.Windows.UIElement.CaptureMouse
  - System.Windows.UIElement.CaptureStylus
  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.Clip
  - System.Windows.UIElement.ClipProperty
  - System.Windows.UIElement.ClipToBounds
  - System.Windows.UIElement.ClipToBoundsProperty
  - System.Windows.UIElement.CommandBindings
  - System.Windows.UIElement.DesiredSize
  - System.Windows.UIElement.DragEnter
  - System.Windows.UIElement.DragEnterEvent
  - System.Windows.UIElement.DragLeave
  - System.Windows.UIElement.DragLeaveEvent
  - System.Windows.UIElement.DragOver
  - System.Windows.UIElement.DragOverEvent
  - System.Windows.UIElement.Drop
  - System.Windows.UIElement.DropEvent
  - System.Windows.UIElement.Effect
  - System.Windows.UIElement.EffectProperty
  - System.Windows.UIElement.Focus
  - System.Windows.UIElement.Focusable
  - System.Windows.UIElement.FocusableChanged
  - System.Windows.UIElement.FocusableProperty
  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.UIElement.GiveFeedback
  - System.Windows.UIElement.GiveFeedbackEvent
  - System.Windows.UIElement.GotFocus
  - System.Windows.UIElement.GotFocusEvent
  - System.Windows.UIElement.GotKeyboardFocus
  - System.Windows.UIElement.GotKeyboardFocusEvent
  - System.Windows.UIElement.GotMouseCapture
  - System.Windows.UIElement.GotMouseCaptureEvent
  - System.Windows.UIElement.GotStylusCapture
  - System.Windows.UIElement.GotStylusCaptureEvent
  - System.Windows.UIElement.GotTouchCapture
  - System.Windows.UIElement.GotTouchCaptureEvent
  - System.Windows.UIElement.HasAnimatedProperties
  - System.Windows.UIElement.HasEffectiveKeyboardFocus
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  - System.Windows.UIElement.InputBindings
  - System.Windows.UIElement.InputHitTest(System.Windows.Point)
  - System.Windows.UIElement.InvalidateArrange
  - System.Windows.UIElement.InvalidateMeasure
  - System.Windows.UIElement.InvalidateVisual
  - System.Windows.UIElement.IsArrangeValid
  - System.Windows.UIElement.IsEnabled
  - System.Windows.UIElement.IsEnabledChanged
  - System.Windows.UIElement.IsEnabledCore
  - System.Windows.UIElement.IsEnabledProperty
  - System.Windows.UIElement.IsFocused
  - System.Windows.UIElement.IsFocusedProperty
  - System.Windows.UIElement.IsHitTestVisible
  - System.Windows.UIElement.IsHitTestVisibleChanged
  - System.Windows.UIElement.IsHitTestVisibleProperty
  - System.Windows.UIElement.IsInputMethodEnabled
  - System.Windows.UIElement.IsKeyboardFocused
  - System.Windows.UIElement.IsKeyboardFocusedChanged
  - System.Windows.UIElement.IsKeyboardFocusedProperty
  - System.Windows.UIElement.IsKeyboardFocusWithin
  - System.Windows.UIElement.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement.IsManipulationEnabled
  - System.Windows.UIElement.IsManipulationEnabledProperty
  - System.Windows.UIElement.IsMeasureValid
  - System.Windows.UIElement.IsMouseCaptured
  - System.Windows.UIElement.IsMouseCapturedChanged
  - System.Windows.UIElement.IsMouseCapturedProperty
  - System.Windows.UIElement.IsMouseCaptureWithin
  - System.Windows.UIElement.IsMouseCaptureWithinChanged
  - System.Windows.UIElement.IsMouseCaptureWithinProperty
  - System.Windows.UIElement.IsMouseDirectlyOver
  - System.Windows.UIElement.IsMouseDirectlyOverChanged
  - System.Windows.UIElement.IsMouseDirectlyOverProperty
  - System.Windows.UIElement.IsMouseOver
  - System.Windows.UIElement.IsMouseOverProperty
  - System.Windows.UIElement.IsStylusCaptured
  - System.Windows.UIElement.IsStylusCapturedChanged
  - System.Windows.UIElement.IsStylusCapturedProperty
  - System.Windows.UIElement.IsStylusCaptureWithin
  - System.Windows.UIElement.IsStylusCaptureWithinChanged
  - System.Windows.UIElement.IsStylusCaptureWithinProperty
  - System.Windows.UIElement.IsStylusDirectlyOver
  - System.Windows.UIElement.IsStylusDirectlyOverChanged
  - System.Windows.UIElement.IsStylusDirectlyOverProperty
  - System.Windows.UIElement.IsStylusOver
  - System.Windows.UIElement.IsStylusOverProperty
  - System.Windows.UIElement.IsVisible
  - System.Windows.UIElement.IsVisibleChanged
  - System.Windows.UIElement.IsVisibleProperty
  - System.Windows.UIElement.KeyDown
  - System.Windows.UIElement.KeyDownEvent
  - System.Windows.UIElement.KeyUp
  - System.Windows.UIElement.KeyUpEvent
  - System.Windows.UIElement.LayoutUpdated
  - System.Windows.UIElement.LostFocus
  - System.Windows.UIElement.LostFocusEvent
  - System.Windows.UIElement.LostKeyboardFocus
  - System.Windows.UIElement.LostKeyboardFocusEvent
  - System.Windows.UIElement.LostMouseCapture
  - System.Windows.UIElement.LostMouseCaptureEvent
  - System.Windows.UIElement.LostStylusCapture
  - System.Windows.UIElement.LostStylusCaptureEvent
  - System.Windows.UIElement.LostTouchCapture
  - System.Windows.UIElement.LostTouchCaptureEvent
  - System.Windows.UIElement.ManipulationBoundaryFeedback
  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  - System.Windows.UIElement.ManipulationCompleted
  - System.Windows.UIElement.ManipulationCompletedEvent
  - System.Windows.UIElement.ManipulationDelta
  - System.Windows.UIElement.ManipulationDeltaEvent
  - System.Windows.UIElement.ManipulationInertiaStarting
  - System.Windows.UIElement.ManipulationInertiaStartingEvent
  - System.Windows.UIElement.ManipulationStarted
  - System.Windows.UIElement.ManipulationStartedEvent
  - System.Windows.UIElement.ManipulationStarting
  - System.Windows.UIElement.ManipulationStartingEvent
  - System.Windows.UIElement.Measure(System.Windows.Size)
  - System.Windows.UIElement.MouseDown
  - System.Windows.UIElement.MouseDownEvent
  - System.Windows.UIElement.MouseEnter
  - System.Windows.UIElement.MouseEnterEvent
  - System.Windows.UIElement.MouseLeave
  - System.Windows.UIElement.MouseLeaveEvent
  - System.Windows.UIElement.MouseLeftButtonDown
  - System.Windows.UIElement.MouseLeftButtonDownEvent
  - System.Windows.UIElement.MouseLeftButtonUp
  - System.Windows.UIElement.MouseLeftButtonUpEvent
  - System.Windows.UIElement.MouseMove
  - System.Windows.UIElement.MouseMoveEvent
  - System.Windows.UIElement.MouseRightButtonDown
  - System.Windows.UIElement.MouseRightButtonDownEvent
  - System.Windows.UIElement.MouseRightButtonUp
  - System.Windows.UIElement.MouseRightButtonUpEvent
  - System.Windows.UIElement.MouseUp
  - System.Windows.UIElement.MouseUpEvent
  - System.Windows.UIElement.MouseWheel
  - System.Windows.UIElement.MouseWheelEvent
  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.Opacity
  - System.Windows.UIElement.OpacityMask
  - System.Windows.UIElement.OpacityMaskProperty
  - System.Windows.UIElement.OpacityProperty
  - System.Windows.UIElement.PersistId
  - System.Windows.UIElement.PreviewDragEnter
  - System.Windows.UIElement.PreviewDragEnterEvent
  - System.Windows.UIElement.PreviewDragLeave
  - System.Windows.UIElement.PreviewDragLeaveEvent
  - System.Windows.UIElement.PreviewDragOver
  - System.Windows.UIElement.PreviewDragOverEvent
  - System.Windows.UIElement.PreviewDrop
  - System.Windows.UIElement.PreviewDropEvent
  - System.Windows.UIElement.PreviewGiveFeedback
  - System.Windows.UIElement.PreviewGiveFeedbackEvent
  - System.Windows.UIElement.PreviewGotKeyboardFocus
  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement.PreviewKeyDown
  - System.Windows.UIElement.PreviewKeyDownEvent
  - System.Windows.UIElement.PreviewKeyUp
  - System.Windows.UIElement.PreviewKeyUpEvent
  - System.Windows.UIElement.PreviewLostKeyboardFocus
  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement.PreviewMouseDown
  - System.Windows.UIElement.PreviewMouseDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonDown
  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonUp
  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement.PreviewMouseMove
  - System.Windows.UIElement.PreviewMouseMoveEvent
  - System.Windows.UIElement.PreviewMouseRightButtonDown
  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement.PreviewMouseRightButtonUp
  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement.PreviewMouseUp
  - System.Windows.UIElement.PreviewMouseUpEvent
  - System.Windows.UIElement.PreviewMouseWheel
  - System.Windows.UIElement.PreviewMouseWheelEvent
  - System.Windows.UIElement.PreviewQueryContinueDrag
  - System.Windows.UIElement.PreviewQueryContinueDragEvent
  - System.Windows.UIElement.PreviewStylusButtonDown
  - System.Windows.UIElement.PreviewStylusButtonDownEvent
  - System.Windows.UIElement.PreviewStylusButtonUp
  - System.Windows.UIElement.PreviewStylusButtonUpEvent
  - System.Windows.UIElement.PreviewStylusDown
  - System.Windows.UIElement.PreviewStylusDownEvent
  - System.Windows.UIElement.PreviewStylusInAirMove
  - System.Windows.UIElement.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement.PreviewStylusInRange
  - System.Windows.UIElement.PreviewStylusInRangeEvent
  - System.Windows.UIElement.PreviewStylusMove
  - System.Windows.UIElement.PreviewStylusMoveEvent
  - System.Windows.UIElement.PreviewStylusOutOfRange
  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement.PreviewStylusSystemGesture
  - System.Windows.UIElement.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement.PreviewStylusUp
  - System.Windows.UIElement.PreviewStylusUpEvent
  - System.Windows.UIElement.PreviewTextInput
  - System.Windows.UIElement.PreviewTextInputEvent
  - System.Windows.UIElement.PreviewTouchDown
  - System.Windows.UIElement.PreviewTouchDownEvent
  - System.Windows.UIElement.PreviewTouchMove
  - System.Windows.UIElement.PreviewTouchMoveEvent
  - System.Windows.UIElement.PreviewTouchUp
  - System.Windows.UIElement.PreviewTouchUpEvent
  - System.Windows.UIElement.QueryContinueDrag
  - System.Windows.UIElement.QueryContinueDragEvent
  - System.Windows.UIElement.QueryCursor
  - System.Windows.UIElement.QueryCursorEvent
  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.ReleaseAllTouchCaptures
  - System.Windows.UIElement.ReleaseMouseCapture
  - System.Windows.UIElement.ReleaseStylusCapture
  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.RenderSize
  - System.Windows.UIElement.RenderTransform
  - System.Windows.UIElement.RenderTransformOrigin
  - System.Windows.UIElement.RenderTransformOriginProperty
  - System.Windows.UIElement.RenderTransformProperty
  - System.Windows.UIElement.ShouldSerializeCommandBindings
  - System.Windows.UIElement.ShouldSerializeInputBindings
  - System.Windows.UIElement.SnapsToDevicePixels
  - System.Windows.UIElement.SnapsToDevicePixelsProperty
  - System.Windows.UIElement.StylusButtonDown
  - System.Windows.UIElement.StylusButtonDownEvent
  - System.Windows.UIElement.StylusButtonUp
  - System.Windows.UIElement.StylusButtonUpEvent
  - System.Windows.UIElement.StylusDown
  - System.Windows.UIElement.StylusDownEvent
  - System.Windows.UIElement.StylusEnter
  - System.Windows.UIElement.StylusEnterEvent
  - System.Windows.UIElement.StylusInAirMove
  - System.Windows.UIElement.StylusInAirMoveEvent
  - System.Windows.UIElement.StylusInRange
  - System.Windows.UIElement.StylusInRangeEvent
  - System.Windows.UIElement.StylusLeave
  - System.Windows.UIElement.StylusLeaveEvent
  - System.Windows.UIElement.StylusMove
  - System.Windows.UIElement.StylusMoveEvent
  - System.Windows.UIElement.StylusOutOfRange
  - System.Windows.UIElement.StylusOutOfRangeEvent
  - System.Windows.UIElement.StylusPlugIns
  - System.Windows.UIElement.StylusSystemGesture
  - System.Windows.UIElement.StylusSystemGestureEvent
  - System.Windows.UIElement.StylusUp
  - System.Windows.UIElement.StylusUpEvent
  - System.Windows.UIElement.TextInput
  - System.Windows.UIElement.TextInputEvent
  - System.Windows.UIElement.TouchDown
  - System.Windows.UIElement.TouchDownEvent
  - System.Windows.UIElement.TouchEnter
  - System.Windows.UIElement.TouchEnterEvent
  - System.Windows.UIElement.TouchesCaptured
  - System.Windows.UIElement.TouchesCapturedWithin
  - System.Windows.UIElement.TouchesDirectlyOver
  - System.Windows.UIElement.TouchesOver
  - System.Windows.UIElement.TouchLeave
  - System.Windows.UIElement.TouchLeaveEvent
  - System.Windows.UIElement.TouchMove
  - System.Windows.UIElement.TouchMoveEvent
  - System.Windows.UIElement.TouchUp
  - System.Windows.UIElement.TouchUpEvent
  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  - System.Windows.UIElement.Uid
  - System.Windows.UIElement.UidProperty
  - System.Windows.UIElement.UpdateLayout
  - System.Windows.UIElement.Visibility
  - System.Windows.UIElement.VisibilityProperty
  platform:
  - net462
- uid: System.Windows.Window.#ctor
  id: '#ctor'
  parent: System.Windows.Window
  langs:
  - csharp
  name: Window()
  nameWithType: Window.Window()
  fullName: System.Windows.Window.Window()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Window&quot;> </xref>クラスです。"
  remarks: "コンス トラクターは、 <xref:System.Windows.FrameworkElement.Width%2A>、 <xref:System.Windows.FrameworkElement.Height%2A>、 <xref:System.Windows.Window.Top%2A>、および<xref:System.Windows.Window.Left%2A>プロパティの既定値に<xref:System.Windows.Window>値</xref:System.Windows.Window></xref:System.Windows.Window.Left%2A></xref:System.Windows.Window.Top%2A></xref:System.Windows.FrameworkElement.Height%2A></xref:System.Windows.FrameworkElement.Width%2A>。       内で、ウィンドウを作成する場合、<xref:System.AppDomain>を持つ、<xref:System.Windows.Application>オブジェクトのコンス トラクターを追加、<xref:System.Windows.Window>オブジェクトのセットを<xref:System.Windows.Application>-経由で windows を管理、<xref:System.Windows.Application.Windows%2A>のプロパティ、<xref:System.Windows.Application>オブジェクト</xref:System.Windows.Application></xref:System.Windows.Application.Windows%2A></xref:System.Windows.Application></xref:System.Windows.Window></xref:System.Windows.Application></xref:System.AppDomain>。"
  syntax:
    content: public Window ();
    parameters: []
  overload: System.Windows.Window.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Activate
  id: Activate
  parent: System.Windows.Window
  langs:
  - csharp
  name: Activate()
  nameWithType: Window.Activate()
  fullName: System.Windows.Window.Activate()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "前面に、ウィンドウを移動しようとしてアクティブ化します。"
  remarks: "使用されるものと同じウィンドウがアクティブかどうかを決定するルールは、 [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow`関数 (User32.dll)。       ウィンドウがアクティブ化する場合、[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]ユーザーの前景色のアプリケーションではないアプリケーション<xref:System.Windows.Application.Activated>イベントが発生します</xref:System.Windows.Application.Activated>。      > [!NOTE] > ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことができません。"
  syntax:
    content: public bool Activate ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Windows.Window&quot;> </xref>が正常に有効になっているそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Window.Activate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Activated
  id: Activated
  parent: System.Windows.Window
  langs:
  - csharp
  name: Activated
  nameWithType: Window.Activated
  fullName: System.Windows.Window.Activated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウがフォア グラウンド ウィンドウになったときに発生します。"
  remarks: "ウィンドウがアクティブに (前面のウィンドウになります) と: のウィンドウを最初に開きます。      は、ユーザーは、alt キーを押しながら TAB キーを押す、マウスまたはタスク マネージャーからを選択して、ウィンドウに切り替わります。      は、ユーザーは、ウィンドウのタスク バー ボタンをクリックします。       アクティブ化するになるときを検出するために必要な Windows では、アクティブ化イベントを処理できます。       ウィンドウが初めてアクティブになった後に非アクティブ化し、その有効期間中に何度も再アクティブ化する可能性があります。 <xref:System.Windows.Window.IsActive%2A>インチのどのライセンス認証状態を判断</xref:System.Windows.Window.IsActive%2A>が検査できるアプリケーションの動作または状態のアクティブ化状態に依存する場合       アプリケーションには、 <xref:System.Windows.Application.Activated>。</xref:System.Windows.Application.Activated>ことができます。"
  syntax:
    content: public event EventHandler Activated;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.AllowsTransparency
  id: AllowsTransparency
  parent: System.Windows.Window
  langs:
  - csharp
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
  fullName: System.Windows.Window.AllowsTransparency
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはウィンドウのクライアント領域が透明度をサポートするかどうかを示す値を設定します。"
  remarks: "ときに、<xref:System.Windows.Controls.Control.Background%2A>ウィンドウのプロパティが、透過的に設定を使用したカラー<xref:System.Windows.Media.Brushes.Transparent%2A>たとえば、ウィンドウの不透明なままです</xref:System.Windows.Media.Brushes.Transparent%2A></xref:System.Windows.Controls.Control.Background%2A>。 これは、デスクトップと、実行中のアプリケーション&quot;beneath&quot;、ウィンドウを表示できないことを意味します。 この種類の透過性を有効にするには、AllowsTransparency に設定する必要があります`true`です。       四角形以外の windows の作成を支援する AllowsTransparency が存在して、その結果、AllowsTransparency 設定されている場合`true`、ウィンドウの<xref:System.Windows.Window.WindowStyle%2A><xref:System.Windows.WindowStyle>.</xref:System.Windows.WindowStyle>にプロパティを設定する必要があります</xref:System.Windows.Window.WindowStyle%2A>      <a name=&quot;dependencyPropertyInfo_WindowAllowsTransparency&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.AllowsTransparencyProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.AllowsTransparencyProperty>"
  syntax:
    content: public bool AllowsTransparency { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ウィンドウは、透過性をサポートしている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Window.AllowsTransparency*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "あるウィンドウ、<xref:System.Windows.Window.WindowStyle*>の以外の任意の値<xref href=&quot;System.Windows.WindowStyle&quot;> </xref></xref:System.Windows.Window.WindowStyle*> 。"
  platform:
  - net462
- uid: System.Windows.Window.AllowsTransparencyProperty
  id: AllowsTransparencyProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: AllowsTransparencyProperty
  nameWithType: Window.AllowsTransparencyProperty
  fullName: System.Windows.Window.AllowsTransparencyProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.AllowsTransparency*>依存関係プロパティ</xref:System.Windows.Window.AllowsTransparency*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)
  id: ArrangeOverride(System.Windows.Size)
  parent: System.Windows.Window
  langs:
  - csharp
  name: ArrangeOverride(Size)
  nameWithType: Window.ArrangeOverride(Size)
  fullName: System.Windows.Window.ArrangeOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "配置し、ウィンドウとその子要素のサイズをこのメソッドをオーバーライドします。"
  remarks: "ArrangeOverride ときに呼び出されません<xref:System.Windows.UIElement.Visibility%2A><xref:System.Windows.Visibility>.</xref:System.Windows.Visibility>の値を持つプロパティ</xref:System.Windows.UIElement.Visibility%2A> 場合の値、<xref:System.Windows.UIElement.Visibility%2A>プロパティが、<xref:System.Windows.Visibility>または<xref:System.Windows.Visibility>、ArrangeOverride と呼びます</xref:System.Windows.Visibility></xref:System.Windows.Visibility></xref:System.Windows.UIElement.Visibility%2A>。      > [!NOTE] > ときにいずれか<xref:System.Windows.Window.Show%2A><xref:System.Windows.Window.ShowDialog%2A>が呼び出された<xref:System.Windows.UIElement.Visibility%2A><xref:System.Windows.Window><xref:System.Windows.Visibility>.</xref:System.Windows.Visibility>に設定されている</xref:System.Windows.Window>のプロパティ</xref:System.Windows.UIElement.Visibility%2A></xref:System.Windows.Window.ShowDialog%2A>または</xref:System.Windows.Window.Show%2A>"
  syntax:
    content: protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);
    parameters:
    - id: arrangeBounds
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;> </xref>ウィンドウが自体とその子を配置に使用する最終的なサイズを反映します。"
    return:
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;> </xref>使用された実際のサイズを反映します。"
  overload: System.Windows.Window.ArrangeOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Close
  id: Close
  parent: System.Windows.Window
  langs:
  - csharp
  name: Close()
  nameWithType: Window.Close()
  fullName: System.Windows.Window.Close()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "手動で閉じる、 <xref href=&quot;System.Windows.Window&quot;></xref>です。"
  remarks: "A<xref:System.Windows.Window>のいくつかは、1 つを使用して閉じることができますなど、タイトル バーによく知られている、システム指定のメカニズムがあります-alt キーを押しながら F4。</xref:System.Windows.Window> 。      システム メニュー |**Close**.      -**閉じる**ボタンをクリックします。       など、開発者から提供されているクライアント領域内のいくつかのよく知られたメカニズムのいずれかを使用して、<xref:System.Windows.Window>を閉じることができますも:-**ファイル**|**終了**メイン ウィンドウ</xref:System.Windows.Window>。      -   **File** |**閉じる**または**閉じる**子ウィンドウのボタンをクリックします。      > [!NOTE]  >   **OK**と**キャンセル**] ダイアログ ボックスのボタンのでは、開発者が提供も<xref:System.Windows.Window.DialogResult%2A>が<xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A>を呼び出すことによって開かれているウィンドウを自動的に終了する</xref:System.Windows.Window.DialogResult%2A>は設定可能性があります       これらのメカニズムでは、ウィンドウを閉じる閉じるを明示的に呼び出す必要があります。      > [!NOTE] > を呼び出して、ウィンドウが開かれている場合<xref:System.Windows.Window.ShowDialog%2A>を使用して、<xref:System.Windows.Controls.Button>でその<xref:System.Windows.Controls.Button.IsCancel%2A>ボタンをクリックするか、または esc キーが押されたときにプロパティが true に設定を自動的に閉じます</xref:System.Windows.Controls.Button.IsCancel%2A></xref:System.Windows.Controls.Button></xref:System.Windows.Window.ShowDialog%2A>。 <xref:System.Windows.Window.Show%2A>ただし、閉じる必要があります明示的に呼び出すと、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント ハンドラー</xref:System.Windows.Controls.Primitives.ButtonBase.Click>&2016;/2/14</xref:System.Windows.Window.Show%2A>を使用して、ウィンドウが開かれた場合       ウィンドウを閉じると、<xref:System.Windows.Window.Closing>イベントが発生する</xref:System.Windows.Window.Closing>。 場合、<xref:System.Windows.Window.Closing>次のように、イベントがキャンセルされていない: -<xref:System.Windows.Window>から削除<xref:System.Windows.Application.Windows%2A?displayProperty=fullName>(場合、<xref:System.Windows.Application>オブジェクトが存在する).</xref:System.Windows.Application> </xref:System.Windows.Application.Windows%2A?displayProperty=fullName> </xref:System.Windows.Window> </xref:System.Windows.Window.Closing>      -<xref:System.Windows.Window>所有者から削除されます<xref:System.Windows.Window>/所有した所有者のリレーションシップが確立された場合、所有する前に<xref:System.Windows.Window>が表示されたと所有者後<xref:System.Windows.Window>が開かれた</xref:System.Windows.Window></xref:System.Windows.Window></xref:System.Windows.Window></xref:System.Windows.Window>。      -<xref:System.Windows.Window.Closed>イベントが発生します</xref:System.Windows.Window.Closed>。      アンマネージ リソースによって作成された、<xref:System.Windows.Window>に破棄されます</xref:System.Windows.Window>。      If<xref:System.Windows.Window.ShowDialog%2A>表示に対して呼び出された、 <xref:System.Windows.Window>、<xref:System.Windows.Window.ShowDialog%2A>を返します</xref:System.Windows.Window.ShowDialog%2A></xref:System.Windows.Window></xref:System.Windows.Window.ShowDialog%2A>。       閉じる、<xref:System.Windows.Window>が原因で、終了する所有している任意の windows</xref:System.Windows.Window> 。 さらに、終了、<xref:System.Windows.Window>方法に応じて実行を停止するアプリケーションが発生する可能性があります<xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName>プロパティが設定されています</xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName></xref:System.Windows.Window>。      > [!NOTE] > ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことができません。"
  example:
  - "The following example shows a **File** &#124; **Exit** menu being handled to explicitly call Close.  \n  \n [!code-xml[WindowCloseSnippets#WindowCloseXAML](~/add/codesnippet/xaml/WindowCloseSnippets.CSharp/MainWindow.xaml#windowclosexaml)]  \n  \n [!code-cs[WindowCloseSnippets#WindowCloseCODEBEHIND](~/add/codesnippet/csharp/WindowCloseSnippets.CSharp/MainWindow.xaml.cs#windowclosecodebehind)]\n [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/add/codesnippet/visualbasic/windowclosesnippets/mainwindow.xaml.vb#windowclosecodebehind)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Windows.Window.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Closed
  id: Closed
  parent: System.Windows.Window
  langs:
  - csharp
  name: Closed
  nameWithType: Window.Closed
  fullName: System.Windows.Window.Closed
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウが閉じる直前に発生します。"
  remarks: "このイベントが発生した後、ウィンドウを閉じるを防ぐことはできません。"
  syntax:
    content: public event EventHandler Closed;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<>*> が設定されているまたは<> *>、 <> </> *>、または<> *> ウィンドウを閉じて中に呼び出されます。"
  platform:
  - net462
- uid: System.Windows.Window.Closing
  id: Closing
  parent: System.Windows.Window
  langs:
  - csharp
  name: Closing
  nameWithType: Window.Closing
  fullName: System.Windows.Window.Closing
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "直接の後に発生<xref:System.Windows.Window.Close*>が呼び出され、処理することで、ウィンドウのクロージャをキャンセルします</xref:System.Windows.Window.Close*>。"
  remarks: "ウィンドウが閉じられるときを検出するために終了を処理することができます (ときなど、<xref:System.Windows.Window.Close%2A>と呼びます).</xref:System.Windows.Window.Close%2A> さらに、ウィンドウが終了されないようにする終了を使用できます。 ウィンドウの終了を回避するのに設定することができます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.ComponentModel.CancelEventArgs>引数`true`</xref:System.ComponentModel.CancelEventArgs></xref:System.ComponentModel.CancelEventArgs.Cancel%2A>。       終了イベントが発生したときに<xref:System.Windows.Window.Close%2A>と呼ばれる場合は、ウィンドウの閉じるボタンがクリックされた場合、または alt キーを押しながら f4 キーを押す場合</xref:System.Windows.Window.Close%2A>。       ウィンドウでその所有者によって所有されているウィンドウが開かれたかどうか<xref:System.Windows.Window.Show%2A>、オーナー ウィンドウが閉じられると、所有されているウィンドウの終了イベントは発生しません</xref:System.Windows.Window.Show%2A>。 ウィンドウの所有者が閉じている場合 (を参照してください<xref:System.Windows.Window.Owner%2A>)、所有されているウィンドウの終了は発生しません</xref:System.Windows.Window.Owner%2A>。       場合<xref:System.Windows.Application.Shutdown%2A>を呼び出すときは、終了イベントは、各ウィンドウの発生します</xref:System.Windows.Application.Shutdown%2A>。 ただし、終了が取り消されると、取り消しは無視されます。       ユーザーがログオフまたはシャット ダウンするため、セッションが終了した場合終了は発生しません。処理<xref:System.Windows.Application.SessionEnding>アプリケーションのクロージャをキャンセルするコードを実装します</xref:System.Windows.Application.SessionEnding>。       場合、アプリケーションの有効期間中に複数回ウィンドウを非表示にしたりして、ウィンドウを表示するたびに再インスタンス化したくない、Closing イベントを処理、キャンセルするか、して呼び出し、<xref:System.Windows.Window.Hide%2A>メソッド</xref:System.Windows.Window.Hide%2A>。 次に、<xref:System.Windows.Window.Show%2A>アカウントを再開の同じインスタンスで</xref:System.Windows.Window.Show%2A>呼び出すことができます。"
  example:
  - "The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.  \n  \n [!code-xml[WindowClosingSnippets#WindowClosingXAML1](~/add/codesnippet/xaml/WindowClosingSnippets.CSharp/DataWindow.xaml#windowclosingxaml1)]  \n[!code-xml[WindowClosingSnippets#WindowClosingXAML2](~/add/codesnippet/xaml/WindowClosingSnippets.CSharp/DataWindow.xaml#windowclosingxaml2)]  \n  \n [!code-cs[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/add/codesnippet/csharp/WindowClosingSnippets.CSharp/DataWindow.xaml.cs#windowclosingcodebehind1)]\n [!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/add/codesnippet/visualbasic/windowclosingsnippets/datawindow.xaml.vb#windowclosingcodebehind1)]  \n[!code-cs[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/add/codesnippet/csharp/WindowClosingSnippets.CSharp/DataWindow.xaml.cs#windowclosingcodebehind2)]\n[!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/add/codesnippet/visualbasic/windowclosingsnippets/datawindow.xaml.vb#windowclosingcodebehind2)]"
  syntax:
    content: public event System.ComponentModel.CancelEventHandler Closing;
    return:
      type: System.ComponentModel.CancelEventHandler
      description: "追加します。"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<>*> が設定されているまたは<> *>、 <> </> *>、または<> *> ウィンドウを閉じて中に呼び出されます。"
  platform:
  - net462
- uid: System.Windows.Window.ContentRendered
  id: ContentRendered
  parent: System.Windows.Window
  langs:
  - csharp
  name: ContentRendered
  nameWithType: Window.ContentRendered
  fullName: System.Windows.Window.ContentRendered
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウのコンテンツがレンダリングされた後に発生します。"
  remarks: "コンテンツ ウィンドウがない場合は、このイベントは発生しません。"
  syntax:
    content: public event EventHandler ContentRendered;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Deactivated
  id: Deactivated
  parent: System.Windows.Window
  langs:
  - csharp
  name: Deactivated
  nameWithType: Window.Deactivated
  fullName: System.Windows.Window.Deactivated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウが背景ウィンドウになったときに発生します。"
  remarks: "ウィンドウが非アクティブ化 (バック グラウンド ウィンドウになります) ときに:-ユーザーが、現在のアプリケーションの別のウィンドウに切り替わります。      -ユーザーは、ALT + TAB キーを使用して、またはタスク マネージャーを使用して、別のアプリケーションでのウィンドウに切り替えます。      は、ユーザーは、別のアプリケーションでのウィンドウのタスク バー ボタンをクリックします。       非アクティブ化イベントを処理することによって、非アクティブ化になることを検出する必要がある Windows です。       ウィンドウが非アクティブ化された後最初を再アクティブ化し、その有効期間中に何度も非アクティブ化することがあります。 <xref:System.Windows.Window.IsActive%2A>インチのどのライセンス認証状態を判断</xref:System.Windows.Window.IsActive%2A>が検査できるアプリケーションの動作または状態のアクティブ化状態に依存する場合       アプリケーションには、 <xref:System.Windows.Application.Deactivated>。</xref:System.Windows.Application.Deactivated>ことができます。"
  syntax:
    content: public event EventHandler Deactivated;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DialogResult
  id: DialogResult
  parent: System.Windows.Window
  langs:
  - csharp
  name: DialogResult
  nameWithType: Window.DialogResult
  fullName: System.Windows.Window.DialogResult
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "返される値は、ダイアログの結果の値の設定を取得または、<xref:System.Windows.Window.ShowDialog*>メソッド</xref:System.Windows.Window.ShowDialog*>。"
  remarks: "DialogResult は、ユーザーが同意したかどうかを確認するダイアログ ボックスを表示するコードから使用できます (`true`)、またはキャンセルされた (`false`) ダイアログ ボックス。 ダイアログ ボックスが受け入れられた場合は、ユーザーによって収集されたデータを取得し、それを処理するダイアログ ボックスを開いたコードにこのことを示します。 ダイアログ ボックスが取り消された場合ただし、このことを示しますコードの呼び出しを停止する、さらに処理します。       既定では、ダイアログ ボックスが取り消されるユーザーが、次のいずれかを実行します。-PressesALT ながら f4 キー。      -クリックする、**閉じる**ボタンをクリックします。      -選択**閉じる**システム メニューからです。       DialogResult は、すべてのページでこのような場合の`false`既定です。       ダイアログ ボックスは、通常、ボタンは、ダイアログ ボックスをキャンセルする特殊なボタンを提供しますが<xref:System.Windows.Controls.Button.IsCancel%2A>プロパティがに設定されている`true`。</xref:System.Windows.Controls.Button.IsCancel%2A> 。 このように構成されているボタンが押されたか、または ESC キーが押されたときにウィンドウは自動的に閉じる。 このような場合のいずれかで DialogResult のまま`false`です。       ダイアログ ボックスも通常のボタン、[accept] ボタンを提供しますが<xref:System.Windows.Controls.Button.IsDefault%2A>プロパティに設定されている`true`</xref:System.Windows.Controls.Button.IsDefault%2A>。 このように構成されているボタンを発生させるその<xref:System.Windows.Controls.Primitives.ButtonBase.Click>か、ENTER キーが押されたときにイベント</xref:System.Windows.Controls.Primitives.ButtonBase.Click>。 ただし、ダイアログ ボックスを自動的に閉じることはありません。 また、DialogResult を設定は、`true`です。 このコードは、通常からする必要があります、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>既定のボタンのイベント ハンドラー</xref:System.Windows.Controls.Primitives.ButtonBase.Click> 。       DialogResult は`null` ダイアログ ボックスが表示されている場合、承認済みでも処理が取り消されました。       によって返される値からダイアログの結果を取得するには、ダイアログ ボックスを閉じた後<xref:System.Windows.Window.ShowDialog%2A>メソッド、または DialogResult プロパティを調べることによって</xref:System.Windows.Window.ShowDialog%2A>。       DialogResult するときのみ設定可能、<xref:System.Windows.Window>を呼び出すことによって開くその<xref:System.Windows.Window.ShowDialog%2A>メソッド</xref:System.Windows.Window.ShowDialog%2A></xref:System.Windows.Window>。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。"
  example:
  - "The following example shows how to configure an OK button and a Cancel button to return the appropriate DialogResult.  \n  \n [!code-xml[WindowDialogResultSnippets#WindowDialogResultXAML](~/add/codesnippet/xaml/WindowDialogResultSnippets.CSharp/DialogBox.xaml#windowdialogresultxaml)]  \n  \n [!code-cs[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/add/codesnippet/csharp/WindowDialogResultSnippets.CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]\n [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/add/codesnippet/visualbasic/windowdialogresultsnippets/dialogbox.xaml.vb#windowdialogresultcodebehind)]"
  syntax:
    content: public Nullable<bool> DialogResult { get; set; }
    return:
      type: System.Nullable{System.Boolean}
      description: "A &lt;xref:System.Nullable%601&gt; <xref:System.Boolean>.</xref:System.Boolean>型の値 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Window.DialogResult*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼び出して、ウィンドウが開かれる前に、DialogResult が設定されている<> *> です。      - または - DialogResult が呼び出すことによって開かれたウィンドウで設定されている<> *> です。"
  platform:
  - net462
- uid: System.Windows.Window.DpiChanged
  id: DpiChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: DpiChanged
  nameWithType: Window.DpiChanged
  fullName: System.Windows.Window.DpiChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウを画面の DPI に変更が表示された後に発生します。"
  syntax:
    content: public event System.Windows.DpiChangedEventHandler DpiChanged;
    return:
      type: System.Windows.DpiChangedEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DpiChangedEvent
  id: DpiChangedEvent
  parent: System.Windows.Window
  langs:
  - csharp
  name: DpiChangedEvent
  nameWithType: Window.DpiChangedEvent
  fullName: System.Windows.Window.DpiChangedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "A <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref>がの場合、ウィンドウ画面の DPI に変更します。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DpiChangedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DragMove
  id: DragMove
  parent: System.Windows.Window
  langs:
  - csharp
  name: DragMove()
  nameWithType: Window.DragMove()
  fullName: System.Windows.Window.DragMove()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウのクライアント領域の表示部分の左ボタンをマウスでドラッグされるウィンドウを使用できます。"
  remarks: "DragMove が呼び出されたときに、マウスの左ボタンがダウンしている必要があります。 マウスの左ボタンが押されたときを検出する方法の&1; つは処理する、<xref:System.Windows.UIElement.MouseLeftButtonDown>イベント</xref:System.Windows.UIElement.MouseLeftButtonDown>。       DragMove が呼び出されると、ウィンドウのクライアント領域の表示部分でマウスの左ボタンが押される必要があります。      > [!NOTE] > ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことができません。"
  example:
  - "The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call DragMove.  \n  \n [!code-cs[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/add/codesnippet/csharp/WindowDragMoveSnippets/MainWindow.xaml.cs#callwindowdragmovecodebehind)]\n [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/add/codesnippet/visualbasic/windowdragmovesnippets/mainwindow.xaml.vb#callwindowdragmovecodebehind)]"
  syntax:
    content: public void DragMove ();
    parameters: []
  overload: System.Windows.Window.DragMove*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "マウスの左ボタンが押されていません。"
  platform:
  - net462
- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  id: GetWindow(System.Windows.DependencyObject)
  parent: System.Windows.Window
  langs:
  - csharp
  name: GetWindow(DependencyObject)
  nameWithType: Window.GetWindow(DependencyObject)
  fullName: System.Windows.Window.GetWindow(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "参照を返します、 <xref href=&quot;System.Windows.Window&quot;> </xref>コンテンツに依存関係オブジェクトが存在するツリーをホストするオブジェクト。"
  syntax:
    content: public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: "依存関係オブジェクト。"
    return:
      type: System.Windows.Window
      description: "A <xref href=&quot;System.Windows.Window&quot;> </xref>ホスト ウィンドウへの参照。"
  overload: System.Windows.Window.GetWindow*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dependencyObject</code>null です。"
  platform:
  - net462
- uid: System.Windows.Window.Hide
  id: Hide
  parent: System.Windows.Window
  langs:
  - csharp
  name: Hide()
  nameWithType: Window.Hide()
  fullName: System.Windows.Window.Hide()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウを非表示になります。"
  remarks: "非表示にされて、ときに、ウィンドウが閉じられていませんし、どちらも、<xref:System.Windows.Window.Closing>も<xref:System.Windows.Window.Closed>イベントが発生します</xref:System.Windows.Window.Closed></xref:System.Windows.Window.Closing>。 代わりに、ウィンドウの<xref:System.Windows.UIElement.Visibility%2A><xref:System.Windows.Visibility?displayProperty=fullName>.</xref:System.Windows.Visibility?displayProperty=fullName>にプロパティが設定されています。</xref:System.Windows.UIElement.Visibility%2A>       ウィンドウを場合は、アプリケーションの<xref:System.Windows.Application.MainWindow%2A>およびアプリケーションの<xref:System.Windows.Application.ShutdownMode%2A>は<xref:System.Windows.ShutdownMode>、アプリケーションはシャット ダウンしません</xref:System.Windows.ShutdownMode></xref:System.Windows.Application.ShutdownMode%2A></xref:System.Windows.Application.MainWindow%2A>。 同様に、アプリケーションはシャット ダウンしませんウィンドウのみ ウィンドウで、アプリケーションのシャット ダウン モード<xref:System.Windows.ShutdownMode>。</xref:System.Windows.ShutdownMode>場合       これを表示する、アプリケーションの有効期間中に複数回ウィンドウを非表示にしたりするたびに、ウィンドウの再インスタンス化したくない場合は、処理することができます、<xref:System.Windows.Window.Closing>イベント、キャンセルするか、および非表示にするメソッドを呼び出します</xref:System.Windows.Window.Closing>。 その後<xref:System.Windows.Window.Show%2A>を再度開きます。 同じインスタンスで</xref:System.Windows.Window.Show%2A>呼び出すことができます。"
  syntax:
    content: public void Hide ();
    parameters: []
  overload: System.Windows.Window.Hide*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ウィンドウを閉じている途中で非表示が呼び出されます (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) または閉じられて (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)。"
  platform:
  - net462
- uid: System.Windows.Window.Icon
  id: Icon
  parent: System.Windows.Window
  langs:
  - csharp
  name: Icon
  nameWithType: Window.Icon
  fullName: System.Windows.Window.Icon
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはウィンドウのアイコンを設定します。"
  remarks: "[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]スタンドアロン アプリケーションの&2; 種類のアイコンがある:-1 つのアセンブリのアイコンを使用して指定されている、`<ApplicationIcon>`アプリケーションのプロジェクト内のプロパティは、ファイルをビルドします。 このアイコンは、アセンブリのデスクトップ アイコンとして使用されます。          > [!NOTE] > により、ホスト プロセスを Visual Studio でデバッグする場合、アイコンが表示されません。 実行可能ファイルを実行する場合は、アイコンが表示されます。 詳細については、次を参照してください。[ホスト プロセス (vshost.exe)](~/add/includes/ajax-current-ext-md.md)です。      にアイコンを設定して指定されているウィンドウごと&1; つのアイコン。 各ウィンドウのタイトル バー、タスク バー ボタン、およびその ALT TAB アプリケーション選択リストのエントリにこのアイコンが使用されます。       A[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]ウィンドウには、常にアイコンが表示されます。 アイコンを設定していずれかを指定しない場合[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]次のルールに基づいて表示するアイコンを選択します。 1。  指定した場合は、アセンブリのアイコンを使用します。      2.  アセンブリのアイコンが指定されていない場合は、既定値を使用して[!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)]アイコン。       カスタム ウィンドウ アイコンを指定するアイコンを使用する場合アイコンを設定して既定のアプリケーション アイコンを戻すことができます`null`です。       1 つのアイコンは、さまざまな方法で使用できます[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]ALT + タブが選択リストをファイルなどのウィンドウで、ウィンドウのタスク バーのタイトル バーに表示されています。 これらの各サイズが異なりますを使用してアイコンが表示します。ALT + TAB ファイルの選択リストのサイズは 32 x 32 ピクセルのアイコンが表示されている間、ウィンドウのタイトル バーでは、タスク バーで、16 x 16 ピクセルのアイコンが表示されます。 一部のアプリケーションと同様に[!INCLUDE[TLA#tla_winexpl](~/add/includes/tlasharptla-winexpl-md.md)]、提供、**ビュー**メニューを表示するアイコンのサイズを選択することができます。       さまざまな画面サイズに対応する、アイコン ファイルが&1; つまたは複数の実際アイコンを使用して、それぞれが特定のサイズや色深度を対象とするアイコンのバージョンを表すので構成されます。 たとえば、1 つのアイコンのみがありますの 16 色は、1 つの 16 x 16 ピクセル アイコン、16 x 16 ピクセルと 16 色と 256 色の両方で 32 x 32 ピクセルのアイコンが含まれている可能性。       アイコン ファイル内のすべての使用可能なサイズと色深度を示すアイコンが存在する場合<xref:System.Windows.Window>、該当するアイコンを使用します</xref:System.Windows.Window>。 アイコン ファイルには、すべての可能なアイコンのサブセットのみが含まれている場合<xref:System.Windows.Window>サイズと色深度を減らすの順序で [次へ] の最適なアイコンを使用します</xref:System.Windows.Window>。       結果はアイコンが常にで使用される<xref:System.Windows.Window>に使用されるアイコンが必要なサイズや色深度を対象可能性がありますが、</xref:System.Windows.Window> 。 たとえば、表示の場合、256 色で 32 x 32 ピクセルのアイコンとして 16 色の 16 x 16 ピクセルのアイコンを使用可能性があります。 これは保たれますなどの視覚効果が望ましくない可能性がありますのすべての対象のサイズと色深度を示すアイコンを作成することで回避することがあります。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。      <a name=&quot;dependencyPropertyInfo_WindowIcon&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.IconProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.IconProperty>"
  example:
  - "The following example shows how to set a window icon.  \n  \n [!code-xml[WindowIconSnippets#WindowIconSetXAML](~/add/codesnippet/xaml/WindowIconSnippets.WindowIconSample/MainWindow.xaml#windowiconsetxaml)]  \n  \n [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/add/codesnippet/visualbasic/windowiconsample/mainwindow.xaml.vb#setwindowiconincode)]\n [!code-cs[WindowIconSnippets#SetWindowIconInCode](~/add/codesnippet/csharp/WindowIconSnippets.WindowIconSample/MainWindow.xaml.cs#setwindowiconincode)]"
  syntax:
    content: public System.Windows.Media.ImageSource Icon { get; set; }
    return:
      type: System.Windows.Media.ImageSource
      description: "<xref href=&quot;System.Windows.Media.ImageSource&quot;> </xref>アイコンを表すオブジェクト。"
  overload: System.Windows.Window.Icon*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IconProperty
  id: IconProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: IconProperty
  nameWithType: Window.IconProperty
  fullName: System.Windows.Window.IconProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.Icon*>依存関係プロパティ</xref:System.Windows.Window.Icon*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IconProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IsActive
  id: IsActive
  parent: System.Windows.Window
  langs:
  - csharp
  name: IsActive
  nameWithType: Window.IsActive
  fullName: System.Windows.Window.IsActive
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウがアクティブであるかどうかを示す値を取得します。"
  remarks: "アクティブなウィンドウは、ユーザーの現在の前面のウィンドウで、フォーカスは、タイトル バーのアクティブな外観では表されます。 アクティブなウィンドウは明示的に設定されていないすべてのトップレベル ウィンドウの最上部にもなります、<xref:System.Windows.Window.Topmost%2A>プロパティ</xref:System.Windows.Window.Topmost%2A>。      <a name=&quot;dependencyPropertyInfo_WindowIsActive&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.IsActiveProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.IsActiveProperty>"
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ウィンドウがアクティブである場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Window.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IsActiveProperty
  id: IsActiveProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: IsActiveProperty
  nameWithType: Window.IsActiveProperty
  fullName: System.Windows.Window.IsActiveProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.IsActive*>依存関係プロパティ</xref:System.Windows.Window.IsActive*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsActiveProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Left
  id: Left
  parent: System.Windows.Window
  langs:
  - csharp
  name: Left
  nameWithType: Window.Left
  fullName: System.Windows.Window.Left
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはデスクトップに関連して、ウィンドウの左端の位置を設定します。"
  remarks: "ときに、<xref:System.Windows.Window>最大化または最小化、この値は、復元の左端が<xref:System.Windows.Window></xref:System.Windows.Window>ポイント</xref:System.Windows.Window>。       このプロパティは、スタイルを設定することはできません。       値を指定しない場合は、左がシステムの既定値に設定されます。 <xref:System.Double.NaN>。</xref:System.Double.NaN>左を設定して、システムの既定値を指定することも どちらも<xref:System.Double.NegativeInfinity>も<xref:System.Double.PositiveInfinity>は有効な値は左します</xref:System.Double.PositiveInfinity></xref:System.Double.NegativeInfinity>。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。      <a name=&quot;dependencyPropertyInfo_WindowLeft&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.LeftProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.LeftProperty>"
  syntax:
    content: public double Left { get; set; }
    return:
      type: System.Double
      description: "ウィンドウの位置の左端の論理単位 (1/96 インチ)。"
  overload: System.Windows.Window.Left*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LeftProperty
  id: LeftProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: LeftProperty
  nameWithType: Window.LeftProperty
  fullName: System.Windows.Window.LeftProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.Left*>依存関係プロパティ</xref:System.Windows.Window.Left*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty LeftProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LocationChanged
  id: LocationChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: LocationChanged
  nameWithType: Window.LocationChanged
  fullName: System.Windows.Window.LocationChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウの位置が変更されたときに発生します。"
  remarks: "ウィンドウの場所が変更されたときにします。-ユーザーがウィンドウのタイトル バーをドラッグして、ウィンドウに移動します。      、後にウィンドウを移動<xref:System.Windows.Window.DragMove%2A>と呼びます</xref:System.Windows.Window.DragMove%2A>。      -か、<xref:System.Windows.Window.Left%2A>または<xref:System.Windows.Window.Top%2A>プロパティをプログラムで設定します</xref:System.Windows.Window.Top%2A></xref:System.Windows.Window.Left%2A>。      -**移動**ウィンドウのシステム メニューのメニュー項目を選択します。      -<xref:System.Windows.Window.WindowState%2A>プロパティが変更されました</xref:System.Windows.Window.WindowState%2A>。"
  syntax:
    content: public event EventHandler LocationChanged;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LogicalChildren
  id: LogicalChildren
  parent: System.Windows.Window
  langs:
  - csharp
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
  fullName: System.Windows.Window.LogicalChildren
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウの論理上の子要素の列挙子を取得します。"
  syntax:
    content: protected override System.Collections.IEnumerator LogicalChildren { get; }
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>ウィンドウの論理上の子要素です</xref:System.Collections.IEnumerator>。"
  overload: System.Windows.Window.LogicalChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)
  id: MeasureOverride(System.Windows.Size)
  parent: System.Windows.Window
  langs:
  - csharp
  name: MeasureOverride(Size)
  nameWithType: Window.MeasureOverride(Size)
  fullName: System.Windows.Window.MeasureOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウのサイズを測定するには、このメソッドをオーバーライドします。"
  remarks: "MeasureOverride ときに呼び出されません<xref:System.Windows.UIElement.Visibility%2A><xref:System.Windows.Visibility>.</xref:System.Windows.Visibility>の値を持つプロパティ</xref:System.Windows.UIElement.Visibility%2A> 場合の値、<xref:System.Windows.UIElement.Visibility%2A>プロパティが、<xref:System.Windows.Visibility>または<xref:System.Windows.Visibility>、MeasureOverride と呼びます</xref:System.Windows.Visibility></xref:System.Windows.Visibility></xref:System.Windows.UIElement.Visibility%2A>。      > [!NOTE] > ときにいずれか<xref:System.Windows.Window.Show%2A><xref:System.Windows.Window.ShowDialog%2A>が呼び出された<xref:System.Windows.UIElement.Visibility%2A><xref:System.Windows.Window><xref:System.Windows.Visibility>.</xref:System.Windows.Visibility>に設定されている</xref:System.Windows.Window>のプロパティ</xref:System.Windows.UIElement.Visibility%2A></xref:System.Windows.Window.ShowDialog%2A>または</xref:System.Windows.Window.Show%2A>"
  syntax:
    content: protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;> </xref>このウィンドウは、子を与えることができる利用可能なサイズを反映します。 無限大は、ウィンドウのサイズがどのようなコンテンツを使用することを示すために、値として指定できます。"
    return:
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;> </xref>このウィンドウは、子供のサイズの計算に基づくレイアウト中に必要なを決定するサイズを反映します。"
  overload: System.Windows.Window.MeasureOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnActivated(System.EventArgs)
  id: OnActivated(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnActivated(EventArgs)
  nameWithType: Window.OnActivated(EventArgs)
  fullName: System.Windows.Window.OnActivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Window.Activated&quot;> </xref>イベント。"
  remarks: "OnActivated を発生させる、<xref:System.Windows.Window.Activated>イベント</xref:System.Windows.Window.Activated>。       派生する型<xref:System.Windows.Window>OnActivated を上書きする可能性があります</xref:System.Windows.Window>。 オーバーライドされたメソッドは、場合に、基本クラスでの OnActivated を呼び出す必要があります<xref:System.Windows.Window.Activated>を発生させる必要があります</xref:System.Windows.Window.Activated>。"
  syntax:
    content: protected virtual void OnActivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Windows.Window.OnActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnClosed(System.EventArgs)
  id: OnClosed(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnClosed(EventArgs)
  nameWithType: Window.OnClosed(EventArgs)
  fullName: System.Windows.Window.OnClosed(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Window.Closed&quot;> </xref>イベント。"
  remarks: "OnClosed を発生させる、<xref:System.Windows.Window.Closed>イベント</xref:System.Windows.Window.Closed>。       派生する型<xref:System.Windows.Window>OnClosed を上書きする可能性があります</xref:System.Windows.Window>。 オーバーライドされたメソッドは、場合に、基本クラスでの OnClosed を呼び出す必要があります<xref:System.Windows.Window.Closed>を発生させる必要があります</xref:System.Windows.Window.Closed>。"
  syntax:
    content: protected virtual void OnClosed (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Windows.Window.OnClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  id: OnClosing(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnClosing(CancelEventArgs)
  nameWithType: Window.OnClosing(CancelEventArgs)
  fullName: System.Windows.Window.OnClosing(CancelEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Window.Closing&quot;> </xref>イベント。"
  remarks: "OnClosing を発生させる、<xref:System.Windows.Window.Closing>イベント</xref:System.Windows.Window.Closing>。       派生する型<xref:System.Windows.Window>OnClosing を上書きする可能性があります</xref:System.Windows.Window>。 オーバーライドされたメソッドは、場合に、基本クラスでの OnClosing を呼び出す必要があります<xref:System.Windows.Window.Closing>を発生させる必要があります</xref:System.Windows.Window.Closing>。"
  syntax:
    content: protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.CancelEventArgs
      description: "A<xref:System.ComponentModel.CancelEventArgs>イベント データを格納します</xref:System.ComponentModel.CancelEventArgs>。"
  overload: System.Windows.Window.OnClosing*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)
  id: OnContentChanged(System.Object,System.Object)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnContentChanged(Object,Object)
  nameWithType: Window.OnContentChanged(Object,Object)
  fullName: System.Windows.Window.OnContentChanged(Object,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ときに呼び出されます、<xref:System.Windows.Controls.ContentControl.Content*>プロパティが変更された</xref:System.Windows.Controls.ContentControl.Content*>。"
  syntax:
    content: protected override void OnContentChanged (object oldContent, object newContent);
    parameters:
    - id: oldContent
      type: System.Object
      description: "古いコンテンツ ツリーのルートへの参照。"
    - id: newContent
      type: System.Object
      description: "新しいコンテンツ ツリーのルートへの参照。"
  overload: System.Windows.Window.OnContentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnContentRendered(System.EventArgs)
  id: OnContentRendered(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnContentRendered(EventArgs)
  nameWithType: Window.OnContentRendered(EventArgs)
  fullName: System.Windows.Window.OnContentRendered(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Window.ContentRendered&quot;> </xref>イベント。"
  remarks: "OnContentRendered を発生させる、<xref:System.Windows.Window.ContentRendered>イベント</xref:System.Windows.Window.ContentRendered>。       派生する型<xref:System.Windows.Window>OnContentRendered を上書きする可能性があります</xref:System.Windows.Window>。 オーバーライドされたメソッドは、場合に、基本クラスでの OnContentRendered を呼び出す必要があります<xref:System.Windows.Window.ContentRendered>を発生させる必要があります</xref:System.Windows.Window.ContentRendered>。"
  syntax:
    content: protected virtual void OnContentRendered (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Windows.Window.OnContentRendered*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: Window.OnCreateAutomationPeer()
  fullName: System.Windows.Window.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "作成して返します、 <xref href=&quot;System.Windows.Automation.Peers.WindowAutomationPeer&quot;> </xref>オブジェクトの<xref href=&quot;System.Windows.Window&quot;></xref>です。"
  remarks: "このメソッドは<xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>。</xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>"
  syntax:
    content: protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "A <xref href=&quot;System.Windows.Automation.Peers.WindowAutomationPeer&quot;></xref> object for this <xref href=&quot;System.Windows.Window&quot;></xref>."
  overload: System.Windows.Window.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnDeactivated(System.EventArgs)
  id: OnDeactivated(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnDeactivated(EventArgs)
  nameWithType: Window.OnDeactivated(EventArgs)
  fullName: System.Windows.Window.OnDeactivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Window.Deactivated&quot;> </xref>イベント。"
  remarks: "OnDeactivated を発生させる、<xref:System.Windows.Window.Deactivated>イベント</xref:System.Windows.Window.Deactivated>。       派生する型<xref:System.Windows.Window>OnDeactivated を上書きする可能性があります</xref:System.Windows.Window>。 オーバーライドされたメソッドは、場合に、基本クラスでの OnDeactivated を呼び出す必要があります<xref:System.Windows.Window.Deactivated>を発生させる必要があります</xref:System.Windows.Window.Deactivated>。"
  syntax:
    content: protected virtual void OnDeactivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Windows.Window.OnDeactivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  id: OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Window.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Window.OnDpiChanged(DpiScale,DpiScale)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ときに呼び出されます DPI をこのウィンドウの変更がレンダリングされます。"
  syntax:
    content: protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);
    parameters:
    - id: oldDpi
      type: System.Windows.DpiScale
      description: "設定前の DPI スケールします。"
    - id: newDpi
      type: System.Windows.DpiScale
      description: "新しい DPI スケールを設定します。"
  overload: System.Windows.Window.OnDpiChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)
  id: OnLocationChanged(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnLocationChanged(EventArgs)
  nameWithType: Window.OnLocationChanged(EventArgs)
  fullName: System.Windows.Window.OnLocationChanged(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Window.LocationChanged&quot;> </xref>イベント。"
  remarks: "OnLocationChanged を発生させる、<xref:System.Windows.Window.LocationChanged>イベント</xref:System.Windows.Window.LocationChanged>。       派生する型<xref:System.Windows.Window>OnLocationChanged を上書きする可能性があります</xref:System.Windows.Window>。 オーバーライドされたメソッドは、場合に、基本クラスでの OnLocationChanged を呼び出す必要があります<xref:System.Windows.Window.LocationChanged>を発生させる必要があります</xref:System.Windows.Window.LocationChanged>。"
  syntax:
    content: protected virtual void OnLocationChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Windows.Window.OnLocationChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  id: OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ときに呼び出されます、 <xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;> </xref>イベントが発生します。"
  remarks: "この実装では、処理済みの状態は変更されません (、<xref:System.Windows.RoutedEventArgs.Handled%2A>プロパティ) の<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>イベント データ</xref:System.Windows.UIElement.ManipulationBoundaryFeedback></xref:System.Windows.RoutedEventArgs.Handled%2A>。"
  syntax:
    content: protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
      description: "イベントのデータ。"
  overload: System.Windows.Window.OnManipulationBoundaryFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)
  id: OnSourceInitialized(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnSourceInitialized(EventArgs)
  nameWithType: Window.OnSourceInitialized(EventArgs)
  fullName: System.Windows.Window.OnSourceInitialized(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Window.SourceInitialized&quot;> </xref>イベント。"
  remarks: "OnSourceInitialized を発生させる、<xref:System.Windows.Window.SourceInitialized>イベント</xref:System.Windows.Window.SourceInitialized>。       派生する型<xref:System.Windows.Window>OnSourceInitialized を上書きする可能性があります</xref:System.Windows.Window>。 オーバーライドされたメソッドは、場合に、基本クラスでの OnSourceInitialized を呼び出す必要があります<xref:System.Windows.Window.SourceInitialized>を発生させる必要があります</xref:System.Windows.Window.SourceInitialized>。"
  syntax:
    content: protected virtual void OnSourceInitialized (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Windows.Window.OnSourceInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnStateChanged(System.EventArgs)
  id: OnStateChanged(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnStateChanged(EventArgs)
  nameWithType: Window.OnStateChanged(EventArgs)
  fullName: System.Windows.Window.OnStateChanged(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生させる、 <xref href=&quot;System.Windows.Window.StateChanged&quot;> </xref>イベント。"
  remarks: "OnStateChanged を発生させる、<xref:System.Windows.Window.StateChanged>イベント</xref:System.Windows.Window.StateChanged>。       派生する型<xref:System.Windows.Window>OnStateChanged を上書きする可能性があります</xref:System.Windows.Window>。 オーバーライドされたメソッドは、場合に、基本クラスでの OnStateChanged を呼び出す必要があります<xref:System.Windows.Window.StateChanged>を発生させる必要があります</xref:System.Windows.Window.StateChanged>。"
  syntax:
    content: protected virtual void OnStateChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Windows.Window.OnStateChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Window.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Window.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウの親が変更されたときに呼び出されます。"
  syntax:
    content: protected override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "以前の親です。 場合は null に設定、 <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>以前の親がありませんでした。"
  overload: System.Windows.Window.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OwnedWindows
  id: OwnedWindows
  parent: System.Windows.Window
  langs:
  - csharp
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
  fullName: System.Windows.Window.OwnedWindows
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "このウィンドウは、オーナー ウィンドウのコレクションを取得します。"
  remarks: "所有されているウィンドウは&1; つ持つ<xref:System.Windows.Window.Owner%2A>プロパティは、オーナー ウィンドウと呼ばれる別のウィンドウへの参照</xref:System.Windows.Window.Owner%2A>。 列挙することができますをオーナー ウィンドウが所有するすべてのウィンドウを検索する<xref:System.Windows.WindowCollection>OwnedWindows プロパティによって返される</xref:System.Windows.WindowCollection>。"
  example:
  - "The following example shows how to enumerate OwnedWindows.  \n  \n [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/add/codesnippet/visualbasic/windowownerownedwindowssnippets/mainwindow.xaml.vb#getwindowownedwindowscode)]\n [!code-cs[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/add/codesnippet/csharp/WindowOwnerOwnedWindowsSnippets.CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]"
  syntax:
    content: public System.Windows.WindowCollection OwnedWindows { get; }
    return:
      type: System.Windows.WindowCollection
      description: "A <xref href=&quot;System.Windows.WindowCollection&quot;> </xref>このウィンドウは、オーナー ウィンドウへの参照を格納しています。"
  overload: System.Windows.Window.OwnedWindows*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Owner
  id: Owner
  parent: System.Windows.Window
  langs:
  - csharp
  name: Owner
  nameWithType: Window.Owner
  fullName: System.Windows.Window.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または設定、 <xref href=&quot;System.Windows.Window&quot;> </xref>を所有しているこの<xref href=&quot;System.Windows.Window&quot;></xref>です。"
  remarks: "呼び出して親ウィンドウによって子ウィンドウが開かれたときに<xref:System.Windows.Window.ShowDialog%2A>、親と子の両方のウィンドウ間の暗黙的なリレーションシップが確立します</xref:System.Windows.Window.ShowDialog%2A>。 このリレーションシップは、最小限に抑え、最大限に高めること、および復元するに関してなど、特定の動作を適用します。       呼び出して親ウィンドウによって子ウィンドウが作成されたときに<xref:System.Windows.Window.Show%2A>、ただし、子ウィンドウには、親ウィンドウとの関係はありません</xref:System.Windows.Window.Show%2A>。 つまり、: 子ウィンドウには、親ウィンドウへの参照はありません。      子ウィンドウの動作は、親ウィンドウの動作に依存しません。いずれかのウィンドウは、その他を含めることができます。 または最小限に抑える、最大化し、他方とは無関係に復元します。       子ウィンドウと、親ウィンドウの間のリレーションシップを作成できるようにする<xref:System.Windows.Window>所有権の概念をサポートしています</xref:System.Windows.Window>。 別のウィンドウ (オーナー ウィンドウ) への参照で、ウィンドウ (所有しているウィンドウ) の Owner プロパティが設定されている場合は、所有権が確立されます。       このリレーションシップが確立されると、次の動作が発生します。-オーナー ウィンドウが最小化されている場合、所有されているすべての windows も最小化します。      場合は、所有されているウィンドウを最小化すると、その所有者が最小化されていません。      オーナー ウィンドウを最大表示している場合は、オーナー ウィンドウと、所有されている windows の両方が復元されます。      オーナー ウィンドウでは、所有されているウィンドウをカバーできることはありません。      使用していない開いているウィンドウを所有<xref:System.Windows.Window.ShowDialog%2A>モーダルではありません</xref:System.Windows.Window.ShowDialog%2A>。 ユーザーは、オーナー ウィンドウと対話できることができます。      場合は、オーナー ウィンドウを閉じると、所有されるウィンドウも閉じられます。      - ウィンドウでその所有者によって所有されているウィンドウが開かれた場合<xref:System.Windows.Window.Show%2A>、および所有者は、ウィンドウが閉じられる、所有されているウィンドウの<xref:System.Windows.Window.Closing>イベントは発生しません</xref:System.Windows.Window.Closing></xref:System.Windows.Window.Show%2A>。       呼び出して子ウィンドウを開くと<xref:System.Windows.Window.ShowDialog%2A>、子ウィンドウの Owner プロパティを設定することも必要があります</xref:System.Windows.Window.ShowDialog%2A>。 ない場合は、ユーザーことはできません、タスク バー ボタンを押して子ウィンドウと親ウィンドウの両方を復元します。 タスク バー ボタンを押してして; を選択し、子と親の両方 ウィンドウなど、windows のリストを生成する代わりに、選択した期間のみが復元されます。      > [!IMPORTANT] > 必要がありますもプロパティを設定する所有者ウィンドウ上でを呼び出すことによって開かれている<xref:System.Windows.Window.ShowDialog%2A>と動作が正しいことを確認する</xref:System.Windows.Window.ShowDialog%2A>。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。"
  example:
  - "The following example shows how to establish the owner/owned relationship.  \n  \n [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/add/codesnippet/visualbasic/windowownerownedwindowssnippets/mainwindow.xaml.vb#setwindowownercode)]\n [!code-cs[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/add/codesnippet/csharp/WindowOwnerOwnedWindowsSnippets.CSharp/MainWindow.xaml.cs#setwindowownercode)]"
  syntax:
    content: public System.Windows.Window Owner { get; set; }
    return:
      type: System.Windows.Window
      description: "A <xref href=&quot;System.Windows.Window&quot;> </xref>これの所有者を表すオブジェクト<xref href=&quot;System.Windows.Window&quot;></xref>です。"
  overload: System.Windows.Window.Owner*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ウィンドウが、それ自体を所有しようとしています。 または、互いを所有する&2; つのウィンドウを再試行してください。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "所有者のプロパティが設定を使用して表示ウィンドウとして表示されて<xref:System.Windows.Window.ShowDialog*>- または - を既に表示されていないウィンドウの Owner プロパティを設定します</xref:System.Windows.Window.ShowDialog*>。"
  platform:
  - net462
- uid: System.Windows.Window.ResizeMode
  id: ResizeMode
  parent: System.Windows.Window
  langs:
  - csharp
  name: ResizeMode
  nameWithType: Window.ResizeMode
  fullName: System.Windows.Window.ResizeMode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはサイズ変更モードを設定します。"
  remarks: "次の&4; つのオプションがあります:- **NoResize**です。 ユーザー、ウィンドウ サイズを変更することはできません。 最大化し、最小化ボタンは表示されません。      - **CanMinimize**です。 ユーザーは、ウィンドウを最小化され、タスク バーから復元することができますのみ。 [最小および最大化] ボックスは表示されますが、最小化ボックスのみが有効にします。      - **CanResize**です。 ユーザーは、ウィンドウの周囲の最小と最大化ボタン、およびドラッグ可能なアウトラインを使用して、ウィンドウのサイズを変更する全権限を持ちます。 [最小および最大化] ボックスが表示され、有効になっています。 (既定)。      - **CanResizeWithGrip**です。 このオプションと同じ機能には<xref:System.Windows.ResizeMode>がウィンドウの右下隅に「サイズ変更グリップ」を追加します</xref:System.Windows.ResizeMode>。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。      <a name=&quot;dependencyPropertyInfo_WindowResizeMode&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.ResizeModeProperty>|  |メタデータ プロパティに設定`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.Window.ResizeModeProperty>"
  syntax:
    content: public System.Windows.ResizeMode ResizeMode { get; set; }
    return:
      type: System.Windows.ResizeMode
      description: "A <xref href=&quot;System.Windows.ResizeMode&quot;> </xref>サイズ変更モードを指定する値。"
  overload: System.Windows.Window.ResizeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ResizeModeProperty
  id: ResizeModeProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ResizeModeProperty
  nameWithType: Window.ResizeModeProperty
  fullName: System.Windows.Window.ResizeModeProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.ResizeMode*>依存関係プロパティ</xref:System.Windows.Window.ResizeMode*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ResizeModeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.RestoreBounds
  id: RestoreBounds
  parent: System.Windows.Window
  langs:
  - csharp
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
  fullName: System.Windows.Window.RestoreBounds
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "最小化されているまたは最大化する前に、ウィンドウの位置とサイズを取得します。"
  remarks: "復元の四角形が最小化または最大化する前に、ウィンドウによって占有される領域です。 RestoreBounds を使用してアプリケーションを閉じる前に、最後のサイズとウィンドウの位置を保存し、次回のため、ユーザーの状態にする方法をウィンドウを復元するアプリケーションの起動時にそれらの値を取得できます。       ウィンドウが表示する前に、または閉じられた後、RestoreBounds を照会する場合は<xref:System.Windows.Rect.Empty%2A>が返されます</xref:System.Windows.Rect.Empty%2A>。      > [!NOTE] > ウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。"
  example:
  - "The following example uses RestoreBounds and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.  \n  \n [!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/add/codesnippet/xaml/WindowRestoreBoundsSnippets/MainWindow.xaml#windowrestoreboundsxaml1)]  \n[!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/add/codesnippet/xaml/WindowRestoreBoundsSnippets/MainWindow.xaml#windowrestoreboundsxaml2)]  \n  \n [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/add/codesnippet/visualbasic/windowrestoreboundssnippets/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]\n [!code-cs[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/add/codesnippet/csharp/WindowRestoreBoundsSnippets/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]  \n[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/add/codesnippet/visualbasic/windowrestoreboundssnippets/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]\n[!code-cs[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/add/codesnippet/csharp/WindowRestoreBoundsSnippets/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]"
  syntax:
    content: public System.Windows.Rect RestoreBounds { get; }
    return:
      type: System.Windows.Rect
      description: "A <xref href=&quot;System.Windows.Rect&quot;> </xref>を指定する、ウィンドウの位置とサイズになる前に最小化または最大化します。"
  overload: System.Windows.Window.RestoreBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Show
  id: Show
  parent: System.Windows.Window
  langs:
  - csharp
  name: Show()
  nameWithType: Window.Show()
  fullName: System.Windows.Window.Show()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウを開き、新しく開かれたウィンドウを閉じるを待たずを返します。"
  remarks: "ときに、<xref:System.Windows.Window>クラスをインスタンス化は既定では表示されません</xref:System.Windows.Window>。 表示は、ウィンドウを示していて、終了するウィンドウを待たずにすぐを返します。 その結果、開かれたウィンドウは、アプリケーションの他のウィンドウとの対話ユーザーを妨げません。 この種類のウィンドウと呼ばれる、*モードレス*ウィンドウです。 モードレスの windows の一般的な例は、[プロパティ] ウィンドウ、ツールボックス、およびパレットです。 特定のウィンドウと対話するユーザーを制限するには、 <xref:System.Windows.Window.ShowDialog%2A>。</xref:System.Windows.Window.ShowDialog%2A>を呼び出すことによって、ウィンドウを開く必要があります。       スライド ショーを呼び出すことによって開かれているウィンドウに自動的にそれを開いているウィンドウとのリレーションシップがないです。具体的には、開かれたウィンドウでは、どのウィンドウを開くことがわからない。 使用してこの関係を確立することができます、<xref:System.Windows.Window.Owner%2A>プロパティと管理を使用して、<xref:System.Windows.Window.OwnedWindows%2A>プロパティ</xref:System.Windows.Window.OwnedWindows%2A></xref:System.Windows.Window.Owner%2A>。       <xref:System.Windows.UIElement.Visibility%2A> <xref:System.Windows.Window> <xref:System.Windows.Visibility>。</xref:System.Windows.Visibility>オブジェクト</xref:System.Windows.Window>のプロパティ</xref:System.Windows.UIElement.Visibility%2A>を設定すると同じ結果を達成する番組を呼び出す ただし、タイミングの観点から&2; つの差があります。       した場合のみを返す同期操作は、スライド ショーを呼び出すこと、<xref:System.Windows.FrameworkElement.Loaded>子ウィンドウのイベントが発生しました: [!code-vb [WindowShowTimingSnippets #ShowSync](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showsync)][!code-cs[WindowShowTimingSnippets #ShowSync](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showsync) ]設定<xref:System.Windows.UIElement.Visibility%2A>、ただし、直ちにを返す非同期操作は、: [!code-vb [WindowShowTimingSnippets #ShowASync](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showasync)][!code-cs[WindowShowTimingSnippets #ShowASync](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showasync) ]設定するときに<xref:System.Windows.UIElement.Visibility%2A>、ウィンドウのイベントを設定する前に登録する<xref:System.Windows.UIElement.Visibility%2A>は発生しません設定するメソッドが終了するまで<xref:System.Windows.UIElement.Visibility%2A>実行が完了した。</xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.UIElement.Visibility%2A>   </xref:System.Windows.UIElement.Visibility%2A>   </xref:System.Windows.FrameworkElement.Loaded> 。"
  example:
  - "The following sample demonstrates how to open a modeless window.  \n  \n [!code-vb[WindowShowSnippets#WindowShowCODE](~/add/codesnippet/visualbasic/windowshowsnippets/mainwindow.xaml.vb#windowshowcode)]\n [!code-cs[WindowShowSnippets#WindowShowCODE](~/add/codesnippet/csharp/WindowShowSnippets.CSharp/MainWindow.xaml.cs#windowshowcode)]"
  syntax:
    content: public void Show ();
    parameters: []
  overload: System.Windows.Window.Show*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "終了するウィンドウの表示と呼びます (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) または閉じられて (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)。"
  platform:
  - net462
- uid: System.Windows.Window.ShowActivated
  id: ShowActivated
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowActivated
  nameWithType: Window.ShowActivated
  fullName: System.Windows.Window.ShowActivated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または最初に表示されるときに、ウィンドウがアクティブにするかどうかを示す値を設定します。"
  remarks: "その ShowActivated プロパティを設定して、ウィンドウ`false`が開くと、ウィンドウがアクティブでないとその<xref:System.Windows.Window.Activated>ユーザーは、それを選択して、ウィンドウを手動でアクティブ化されるまで、イベントは発生しません</xref:System.Windows.Window.Activated> ウィンドウを選択すると、後にアクティブにし、通常を非アクティブ化します。       ウィンドウが開いたときにアクティブ化されていることを防ぐためには、ShowActivated プロパティに設定する必要があります`false`ウィンドウが表示される前に (を呼び出して<xref:System.Windows.Window.Show%2A>); ShowActivated に設定`false`後、ウィンドウが表示される場合は、影響を与えません</xref:System.Windows.Window.Show%2A>。       ShowActivated 設定`false`を呼び出して、モーダルで開かれているウィンドウの<xref:System.Windows.Window.ShowDialog%2A>、実際の影響を与えません</xref:System.Windows.Window.ShowDialog%2A>。 モーダル ウィンドウは有効になりませんが、モーダル ウィンドウは、他のアプリケーションの開いている windows のライセンス認証をユーザーをできなくなります。      <a name=&quot;dependencyPropertyInfo_WindowShowActivated&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.ShowActivatedProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.ShowActivatedProperty>"
  example:
  - "The following example shows how to use markup to configure a window to be opened without being activated.  \n  \n [!code-xml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/add/codesnippet/xaml/WindowShowActivatedSnippets/AWindow.xaml#showunactivatedmarkup1)]  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/add/codesnippet/csharp/WindowShowActivatedSnippets/AWindow.xaml.cs#showunactivatedcodebehind)]\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/add/codesnippet/visualbasic/windowshowactivatedsnippets/awindow.xaml.vb#showunactivatedcodebehind)]  \n  \n The following example shows how to use code to configure a window to be opened without it being activated.  \n  \n [!code-cs[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/add/codesnippet/csharp/WindowShowActivatedSnippets/Window1.xaml.cs#showunactivatedwindowcode)]\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/add/codesnippet/visualbasic/windowshowactivatedsnippets/window1.xaml.vb#showunactivatedwindowcode)]"
  syntax:
    content: public bool ShowActivated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>最初に表示されたときにウィンドウがアクティブにする場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Window.ShowActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowActivatedProperty
  id: ShowActivatedProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowActivatedProperty
  nameWithType: Window.ShowActivatedProperty
  fullName: System.Windows.Window.ShowActivatedProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.ShowActivated*>依存関係プロパティ</xref:System.Windows.Window.ShowActivated*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ShowActivatedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowDialog
  id: ShowDialog
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowDialog()
  nameWithType: Window.ShowDialog()
  fullName: System.Windows.Window.ShowDialog()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "ウィンドウを開き、新しく開かれたウィンドウが閉じられたときにのみを返します。"
  remarks: "ときに、<xref:System.Windows.Window>クラスをインスタンス化は既定では表示されません</xref:System.Windows.Window>。 ShowDialog は、ウィンドウを示しています、アプリケーションでは、その他のすべての windows を無効になり、ウィンドウが閉じられる場合にのみ返ります。 この種類のウィンドウと呼ばれる、*モーダル*ウィンドウです。       モーダル ウィンドウは、ダイアログ ボックスとして、主に使用されます。 ダイアログ ボックスは、特殊な種類のアプリケーション ファイルを開く、またはドキュメントの印刷などのタスクを実行するユーザーとの対話に使用するウィンドウです。 ダイアログ ボックスを受け入れるか、ダイアログ ボックスを閉じる前に、表示されているタスクを取り消すことよくようにします。 ShowDialog を返します、<xref:System.Nullable%601><xref:System.Boolean>アクティビティが承認または取り消されたかどうかを指定する値</xref:System.Boolean>。</xref:System.Nullable%601> 戻り値は、の値、<xref:System.Windows.Window.DialogResult%2A>プロパティ ウィンドウを閉じる前にします</xref:System.Windows.Window.DialogResult%2A>。 詳細については、 <xref:System.Windows.Window.DialogResult%2A>。</xref:System.Windows.Window.DialogResult%2A>を参照してください。       ShowDialog メソッドを呼び出すことによって開かれているウィンドウに自動的にそれを開いているウィンドウとのリレーションシップがないです。具体的には、開かれたウィンドウでは、どのウィンドウを開くことがわからない。 使用してこの関係を確立することができます、<xref:System.Windows.Window.Owner%2A>プロパティと管理を使用して、<xref:System.Windows.Window.OwnedWindows%2A>プロパティ</xref:System.Windows.Window.OwnedWindows%2A></xref:System.Windows.Window.Owner%2A>。 サポートする[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]オートメーション (を参照してください[UI オートメーションの概要](~/add/includes/ajax-current-ext-md.md))、 <xref:System.Windows.Window.Owner%2A>ShowDialog を呼び出すことによって開かれたウィンドウを設定する必要があります</xref:System.Windows.Window.Owner%2A>。       ときに、モーダル[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)](ShowDialog を呼び出すことによって開かれたウィンドウ) のウィンドウが閉じられる、以前にアクティブ化されたウィンドウの再アクティブ化します。 場合、モーダル[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]ウィンドウがオーナー ウィンドウ (を参照してください<xref:System.Windows.Window.Owner%2A>)、オーナー ウィンドウが再アクティブ化したときに、モーダル[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]にアクティブだったウィンドウが場合を除いて、ウィンドウが閉じられる</xref:System.Windows.Window.Owner%2A>。      > [!NOTE] > ウィンドウがブラウザーでホストされている場合、このメソッドを呼び出すことができません。"
  example:
  - "The following sample demonstrates how to open a modal window.  \n  \n [!code-cs[WindowShowDialogSnippets#WindowShowDialogCODE](~/add/codesnippet/csharp/WindowShowDialogSnippets.CSharp/MainWindow.xaml.cs#windowshowdialogcode)]\n [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/add/codesnippet/visualbasic/windowshowdialogsnippets/mainwindow.xaml.vb#windowshowdialogcode)]"
  syntax:
    content: public Nullable<bool> ShowDialog ();
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
      description: "A &lt;xref:System.Nullable%601&gt;型の値<xref:System.Boolean>アクティビティが受け入れられましたかどうかを指定する (<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>)、またはキャンセルされた (<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>).</xref:System.Boolean> 戻り値は、の値、<xref:System.Windows.Window.DialogResult*>プロパティ ウィンドウを閉じる前にします</xref:System.Windows.Window.DialogResult*>。"
  overload: System.Windows.Window.ShowDialog*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ウィンドウを閉じている途中で ShowDialog が呼び出されます (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) または閉じられて (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)。"
  platform:
  - net462
- uid: System.Windows.Window.ShowInTaskbar
  id: ShowInTaskbar
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
  fullName: System.Windows.Window.ShowInTaskbar
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはウィンドウがタスク バー ボタンを持つかどうかを示す値を設定します。"
  remarks: "ShowInTaskbar に設定されている場合`true`ウィンドウは、alt キーを押しながら TAB アプリケーションの選択リストにも表示されます。       タスク バー ボタンと alt キーを押しながら TAB アプリケーションの選択リストの両方に使用されるアイコンがの値、<xref:System.Windows.Window.Icon%2A>プロパティ</xref:System.Windows.Window.Icon%2A>。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。      <a name=&quot;dependencyPropertyInfo_WindowShowInTaskbar&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.ShowInTaskbarProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.ShowInTaskbarProperty>"
  syntax:
    content: public bool ShowInTaskbar { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、そのウィンドウがあるタスク バー ボタンです。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 ウィンドウがブラウザーでホストされている場合に適用されません。"
  overload: System.Windows.Window.ShowInTaskbar*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowInTaskbarProperty
  id: ShowInTaskbarProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowInTaskbarProperty
  nameWithType: Window.ShowInTaskbarProperty
  fullName: System.Windows.Window.ShowInTaskbarProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.ShowInTaskbar*>依存関係プロパティ</xref:System.Windows.Window.ShowInTaskbar*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SizeToContent
  id: SizeToContent
  parent: System.Windows.Window
  langs:
  - csharp
  name: SizeToContent
  nameWithType: Window.SizeToContent
  fullName: System.Windows.Window.SizeToContent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または設定するかどうか、ウィンドウ サイズが自動的にそのコンテンツのサイズに合わせてを示す値。"
  remarks: "SizeToContent に設定すると<xref:System.Windows.SizeToContent>、いずれかの設定<xref:System.Windows.FrameworkElement.Height%2A>または<xref:System.Windows.FrameworkElement.Width%2A>は影響しませんが、両方のプロパティを設定することができます、以外の場合は、設定された値は、ウィンドウには適用されません</xref:System.Windows.FrameworkElement.Width%2A></xref:System.Windows.FrameworkElement.Height%2A></xref:System.Windows.SizeToContent>。       SizeToContent に設定すると<xref:System.Windows.SizeToContent>、設定<xref:System.Windows.FrameworkElement.Height%2A>ウィンドウの高さを変更することはできません</xref:System.Windows.FrameworkElement.Height%2A></xref:System.Windows.SizeToContent>。       SizeToContent に設定すると<xref:System.Windows.SizeToContent>、設定<xref:System.Windows.FrameworkElement.Width%2A>ウィンドウの幅を変更することはできません</xref:System.Windows.FrameworkElement.Width%2A></xref:System.Windows.SizeToContent>。       SizeToContent 以外の値がある場合<xref:System.Windows.SizeToContent>:-SizeToContent が自動的に設定されている<xref:System.Windows.SizeToContent>場合は、ユーザーは、サイズ変更グリップを使用して、境界線をドラッグするかによって、ウィンドウをサイズ変更します</xref:System.Windows.SizeToContent></xref:System.Windows.SizeToContent>。      -コンテンツのサイズが変更された、自体のサイズを変更するウィンドウの原因となる場合<xref:System.Windows.FrameworkElement.SizeChanged>が発生します</xref:System.Windows.FrameworkElement.SizeChanged>。       ウィンドウが透過的な場合 (を参照してください<xref:System.Windows.Window.AllowsTransparency%2A>)、SizeToContent に設定する必要があります<xref:System.Windows.SizeToContent>ウィンドウが表示されているそのコンテンツを超えないことを確認する</xref:System.Windows.SizeToContent></xref:System.Windows.Window.AllowsTransparency%2A>。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。      <a name=&quot;dependencyPropertyInfo_WindowSizeToContent&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.SizeToContentProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.SizeToContentProperty>"
  example:
  - "The following example shows how to set the SizeToContent property in code to specify how a window resizes to fit its content.  \n  \n [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/add/codesnippet/visualbasic/howtowindowmanagementsnippets/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]\n [!code-cs[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/add/codesnippet/csharp/HOWTOWindowManagementSnippets/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]"
  syntax:
    content: public System.Windows.SizeToContent SizeToContent { get; set; }
    return:
      type: System.Windows.SizeToContent
      description: "A <xref href=&quot;System.Windows.SizeToContent&quot;></xref> value. 既定値は<xref href=&quot;System.Windows.SizeToContent&quot;></xref>です。"
  overload: System.Windows.Window.SizeToContent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SizeToContentProperty
  id: SizeToContentProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: SizeToContentProperty
  nameWithType: Window.SizeToContentProperty
  fullName: System.Windows.Window.SizeToContentProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.SizeToContent*>依存関係プロパティ</xref:System.Windows.Window.SizeToContent*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty SizeToContentProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SourceInitialized
  id: SourceInitialized
  parent: System.Windows.Window
  langs:
  - csharp
  name: SourceInitialized
  nameWithType: Window.SourceInitialized
  fullName: System.Windows.Window.SourceInitialized
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "相互運用をサポートするためにこのイベントは[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]します。 See <xref href=&quot;System.Windows.Interop.HwndSource&quot;></xref>."
  syntax:
    content: public event EventHandler SourceInitialized;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.StateChanged
  id: StateChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: StateChanged
  nameWithType: Window.StateChanged
  fullName: System.Windows.Window.StateChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "発生したときに、ウィンドウの<xref:System.Windows.Window.WindowState*>プロパティが変更された</xref:System.Windows.Window.WindowState*>。"
  syntax:
    content: public event EventHandler StateChanged;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TaskbarItemInfo
  id: TaskbarItemInfo
  parent: System.Windows.Window
  langs:
  - csharp
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
  fullName: System.Windows.Window.TaskbarItemInfo
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または設定、[!INCLUDE[win7](~/add/includes/win7-md.md)]のタスク バーのサムネイル、 <xref href=&quot;System.Windows.Window&quot;></xref>です。"
  remarks: "使用する方法についての詳細、[!INCLUDE[win7](~/add/includes/win7-md.md)]タスクバーの縮小版、<xref:System.Windows.Shell.TaskbarItemInfo>クラス</xref:System.Windows.Shell.TaskbarItemInfo>を参照してください。"
  syntax:
    content: public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }
    return:
      type: System.Windows.Shell.TaskbarItemInfo
      description: "[!INCLUDE[win7](~/add/includes/win7-md.md)]のタスク バーのサムネイル、 <xref href=&quot;System.Windows.Window&quot;></xref>です。"
  overload: System.Windows.Window.TaskbarItemInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TaskbarItemInfoProperty
  id: TaskbarItemInfoProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TaskbarItemInfoProperty
  nameWithType: Window.TaskbarItemInfoProperty
  fullName: System.Windows.Window.TaskbarItemInfoProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.TaskbarItemInfo*>依存関係プロパティ</xref:System.Windows.Window.TaskbarItemInfo*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Title
  id: Title
  parent: System.Windows.Window
  langs:
  - csharp
  name: Title
  nameWithType: Window.Title
  fullName: System.Windows.Window.Title
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはウィンドウのタイトルを設定します。"
  remarks: "タイトル、 <xref:System.Windows.Window>、 <xref:System.Windows.Navigation.NavigationWindow>、または[!INCLUDE[TLA#tla_iegeneric](~/add/includes/tlasharptla-iegeneric-md.md)]、 <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName>.</xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName>を使用して設定することも</xref:System.Windows.Navigation.NavigationWindow></xref:System.Windows.Window>      <a name=&quot;dependencyPropertyInfo_WindowTitle&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.TitleProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.TitleProperty>"
  syntax:
    content: public string Title { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>ウィンドウのタイトルを格納している</xref:System.String>。"
  overload: System.Windows.Window.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TitleProperty
  id: TitleProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TitleProperty
  nameWithType: Window.TitleProperty
  fullName: System.Windows.Window.TitleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.Title*>依存関係プロパティ</xref:System.Windows.Window.Title*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TitleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Top
  id: Top
  parent: System.Windows.Window
  langs:
  - csharp
  name: Top
  nameWithType: Window.Top
  fullName: System.Windows.Window.Top
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはデスクトップに関連して、ウィンドウの上端の位置を設定します。"
  remarks: "ときに、<xref:System.Windows.Window>最大化または最小化、この値は、復元の上端が<xref:System.Windows.Window></xref:System.Windows.Window>ポイント</xref:System.Windows.Window>。       このプロパティは、スタイルを設定することはできません。       値を指定しない場合、先頭は、システムの既定値に設定されます。 <xref:System.Double.NaN>。</xref:System.Double.NaN>を上部に設定してシステムの既定値を指定することもできます。 どちらも<xref:System.Double.NegativeInfinity>も<xref:System.Double.PositiveInfinity>は一番上の有効な値です</xref:System.Double.PositiveInfinity></xref:System.Double.NegativeInfinity>。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。      <a name=&quot;dependencyPropertyInfo_WindowTop&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.TopProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.TopProperty>"
  syntax:
    content: public double Top { get; set; }
    return:
      type: System.Double
      description: "ウィンドウの最上位の論理単位 (1/96&quot;) 内の位置。"
  overload: System.Windows.Window.Top*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Topmost
  id: Topmost
  parent: System.Windows.Window
  langs:
  - csharp
  name: Topmost
  nameWithType: Window.Topmost
  fullName: System.Windows.Window.Topmost
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または最上位の z オーダーでウィンドウが表示されるかどうかを示す値を設定します。"
  remarks: "最上位のプロパティに設定ウィンドウ`true`が最上位のプロパティに設定されて windows すべてが表示されます。`false`です。       Topmost のある windows のグループのプロパティに設定`true`、現在アクティブになっているウィンドウが最上位ウィンドウです。 同様に Topmost のある windows のグループのプロパティに設定`false`です。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。      <a name=&quot;dependencyPropertyInfo_WindowTopmost&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.TopmostProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.TopmostProperty>"
  syntax:
    content: public bool Topmost { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、ウィンドウが最上位です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Window.Topmost*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TopmostProperty
  id: TopmostProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TopmostProperty
  nameWithType: Window.TopmostProperty
  fullName: System.Windows.Window.TopmostProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.Topmost*>依存関係プロパティ</xref:System.Windows.Window.Topmost*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TopmostProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TopProperty
  id: TopProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TopProperty
  nameWithType: Window.TopProperty
  fullName: System.Windows.Window.TopProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.Top*>依存関係プロパティ</xref:System.Windows.Window.Top*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TopProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStartupLocation
  id: WindowStartupLocation
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
  fullName: System.Windows.Window.WindowStartupLocation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得または最初に表示される場合は、ウィンドウの位置を設定します。"
  remarks: "設定<xref:System.Windows.WindowStartupLocation>に<xref:System.Windows.WindowStartupLocation>によってをに従って配置するウィンドウの<xref:System.Windows.Window.Left%2A>と<xref:System.Windows.Window.Top%2A>プロパティの値</xref:System.Windows.Window.Top%2A></xref:System.Windows.Window.Left%2A></xref:System.Windows.WindowStartupLocation></xref:System.Windows.WindowStartupLocation>。 どちらの場合、<xref:System.Windows.Window.Left%2A>または<xref:System.Windows.Window.Top%2A>プロパティが指定されていない、その値によって決まります[!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)]</xref:System.Windows.Window.Top%2A></xref:System.Windows.Window.Left%2A>。       設定<xref:System.Windows.WindowStartupLocation>によって、マウス カーソルを含む画面の中央に配置するウィンドウ</xref:System.Windows.WindowStartupLocation>。       設定<xref:System.Windows.WindowStartupLocation>を<xref:System.Windows.WindowStartupLocation>によって、オーナー ウィンドウの中央に配置するウィンドウ (を参照してください<xref:System.Windows.Window.Owner%2A>)、指定した</xref:System.Windows.Window.Owner%2A></xref:System.Windows.WindowStartupLocation></xref:System.Windows.WindowStartupLocation>。 オーナー ウィンドウには、別の WPF ウィンドウまたは非 WPF ウィンドウのいずれかを指定できます。      > [!NOTE] > WPF 以外の windows での WPF ウィンドウの詳細については、次を参照してください[WPF および Win32 の相互運用](~/add/includes/ajax-current-ext-md.md) <xref:System.Windows.Interop.WindowInteropHelper>。</xref:System.Windows.Interop.WindowInteropHelper> 。       オーナー ウィンドウが指定されていないウィンドウの位置は同じ方法で決定されますとして<xref:System.Windows.WindowStartupLocation><xref:System.Windows.WindowStartupLocation>。</xref:System.Windows.WindowStartupLocation>に設定されている</xref:System.Windows.WindowStartupLocation>。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティの値を取得することはできません。"
  syntax:
    content: public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }
    return:
      type: System.Windows.WindowStartupLocation
      description: "A <xref href=&quot;System.Windows.WindowStartupLocation&quot;> </xref>最初に表示されるときに、ウィンドウの左上の位置を示す値。 既定値は<xref href=&quot;System.Windows.WindowStartupLocation&quot;></xref>です。"
  overload: System.Windows.Window.WindowStartupLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowState
  id: WindowState
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowState
  nameWithType: Window.WindowState
  fullName: System.Windows.Window.WindowState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはウィンドウを復元、最小化、または最大化されているかどうかを示す値を設定します。"
  remarks: "<xref:System.Windows.Window.RestoreBounds%2A>。</xref:System.Windows.Window.RestoreBounds%2A>サイズと場所が格納されているウィンドウを最小化または最大化、前に <xref:System.Windows.Window.RestoreBounds%2A>。</xref:System.Windows.Window.RestoreBounds%2A>から値を使用してそのサイズと場所の値が復元されたウィンドウが復旧し次第、その後、       WindowState プロパティが変更されたときに<xref:System.Windows.Window.StateChanged>が発生します</xref:System.Windows.Window.StateChanged>。      > [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。      <a name=&quot;dependencyPropertyInfo_WindowWindowState&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.WindowStateProperty>|  |メタデータ プロパティに設定`true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|</xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A> </xref:System.Windows.Window.WindowStateProperty>"
  syntax:
    content: public System.Windows.WindowState WindowState { get; set; }
    return:
      type: System.Windows.WindowState
      description: "A <xref href=&quot;System.Windows.WindowState&quot;> </xref>ウィンドウを復元、最小化、または最大化されているかどうかを決定します。 既定値は<xref href=&quot;System.Windows.WindowState&quot;> </xref> (復元)。"
  overload: System.Windows.Window.WindowState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStateProperty
  id: WindowStateProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStateProperty
  nameWithType: Window.WindowStateProperty
  fullName: System.Windows.Window.WindowStateProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.WindowState*>依存関係プロパティ</xref:System.Windows.Window.WindowState*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WindowStateProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStyle
  id: WindowStyle
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStyle
  nameWithType: Window.WindowStyle
  fullName: System.Windows.Window.WindowStyle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはウィンドウの境界線スタイルを設定します。"
  remarks: "WindowStyle には、いずれかを指定できます、<xref:System.Windows.WindowStyle>列挙値を含む<xref:System.Windows.WindowStyle>、 <xref:System.Windows.WindowStyle>、 <xref:System.Windows.WindowStyle>(既定)、および<xref:System.Windows.WindowStyle>.</xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle>       次の図は、上ウィンドウ スタイルを示します[!INCLUDE[TLA#tla_longhorn](~/add/includes/ajax-current-ext-md.md)](Windows Vista Aero テーマを有効になっている透明なガラス):![ウィンドウ スタイル](~/add/media/windowoverviewfigure6.PNG &quot;ウィンドウ スタイル&quot;)      >  [!NOTE] > 設定またはウィンドウがブラウザーでホストされている場合は、このプロパティを取得することはできません。      <a name=&quot;dependencyPropertyInfo_WindowWindowStyle&quot;></a>## 依存プロパティ情報 | | |  |-|-|  |識別子フィールド |<xref:System.Windows.Window.WindowStyleProperty>|  |メタデータ プロパティに設定`true`|None |</xref:System.Windows.Window.WindowStyleProperty>"
  syntax:
    content: public System.Windows.WindowStyle WindowStyle { get; set; }
    return:
      type: System.Windows.WindowStyle
      description: "A <xref href=&quot;System.Windows.WindowStyle&quot;> </xref>ウィンドウの境界線スタイルを指定します。 既定値は<xref href=&quot;System.Windows.WindowStyle&quot;></xref>です。"
  overload: System.Windows.Window.WindowStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStyleProperty
  id: WindowStyleProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStyleProperty
  nameWithType: Window.WindowStyleProperty
  fullName: System.Windows.Window.WindowStyleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "識別、<xref:System.Windows.Window.WindowStyle*>依存関係プロパティ</xref:System.Windows.Window.WindowStyle*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WindowStyleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Controls.ContentControl
  isExternal: false
  name: System.Windows.Controls.ContentControl
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Window.#ctor
  parent: System.Windows.Window
  isExternal: false
  name: Window()
  nameWithType: Window.Window()
  fullName: System.Windows.Window.Window()
- uid: System.Windows.Window.Activate
  parent: System.Windows.Window
  isExternal: false
  name: Activate()
  nameWithType: Window.Activate()
  fullName: System.Windows.Window.Activate()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Window.Activated
  parent: System.Windows.Window
  isExternal: false
  name: Activated
  nameWithType: Window.Activated
  fullName: System.Windows.Window.Activated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Window.AllowsTransparency
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
  fullName: System.Windows.Window.AllowsTransparency
- uid: System.Windows.Window.AllowsTransparencyProperty
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparencyProperty
  nameWithType: Window.AllowsTransparencyProperty
  fullName: System.Windows.Window.AllowsTransparencyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)
  parent: System.Windows.Window
  isExternal: false
  name: ArrangeOverride(Size)
  nameWithType: Window.ArrangeOverride(Size)
  fullName: System.Windows.Window.ArrangeOverride(Size)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Window.Close
  parent: System.Windows.Window
  isExternal: false
  name: Close()
  nameWithType: Window.Close()
  fullName: System.Windows.Window.Close()
- uid: System.Windows.Window.Closed
  parent: System.Windows.Window
  isExternal: false
  name: Closed
  nameWithType: Window.Closed
  fullName: System.Windows.Window.Closed
- uid: System.Windows.Window.Closing
  parent: System.Windows.Window
  isExternal: false
  name: Closing
  nameWithType: Window.Closing
  fullName: System.Windows.Window.Closing
- uid: System.ComponentModel.CancelEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CancelEventHandler
  nameWithType: CancelEventHandler
  fullName: System.ComponentModel.CancelEventHandler
- uid: System.Windows.Window.ContentRendered
  parent: System.Windows.Window
  isExternal: false
  name: ContentRendered
  nameWithType: Window.ContentRendered
  fullName: System.Windows.Window.ContentRendered
- uid: System.Windows.Window.Deactivated
  parent: System.Windows.Window
  isExternal: false
  name: Deactivated
  nameWithType: Window.Deactivated
  fullName: System.Windows.Window.Deactivated
- uid: System.Windows.Window.DialogResult
  parent: System.Windows.Window
  isExternal: false
  name: DialogResult
  nameWithType: Window.DialogResult
  fullName: System.Windows.Window.DialogResult
- uid: System.Nullable{System.Boolean}
  parent: System
  isExternal: true
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Window.DpiChanged
  parent: System.Windows.Window
  isExternal: false
  name: DpiChanged
  nameWithType: Window.DpiChanged
  fullName: System.Windows.Window.DpiChanged
- uid: System.Windows.DpiChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DpiChangedEventHandler
  nameWithType: DpiChangedEventHandler
  fullName: System.Windows.DpiChangedEventHandler
- uid: System.Windows.Window.DpiChangedEvent
  parent: System.Windows.Window
  isExternal: false
  name: DpiChangedEvent
  nameWithType: Window.DpiChangedEvent
  fullName: System.Windows.Window.DpiChangedEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Window.DragMove
  parent: System.Windows.Window
  isExternal: false
  name: DragMove()
  nameWithType: Window.DragMove()
  fullName: System.Windows.Window.DragMove()
- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  parent: System.Windows.Window
  isExternal: false
  name: GetWindow(DependencyObject)
  nameWithType: Window.GetWindow(DependencyObject)
  fullName: System.Windows.Window.GetWindow(DependencyObject)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Window.Hide
  parent: System.Windows.Window
  isExternal: false
  name: Hide()
  nameWithType: Window.Hide()
  fullName: System.Windows.Window.Hide()
- uid: System.Windows.Window.Icon
  parent: System.Windows.Window
  isExternal: false
  name: Icon
  nameWithType: Window.Icon
  fullName: System.Windows.Window.Icon
- uid: System.Windows.Media.ImageSource
  parent: System.Windows.Media
  isExternal: false
  name: ImageSource
  nameWithType: ImageSource
  fullName: System.Windows.Media.ImageSource
- uid: System.Windows.Window.IconProperty
  parent: System.Windows.Window
  isExternal: false
  name: IconProperty
  nameWithType: Window.IconProperty
  fullName: System.Windows.Window.IconProperty
- uid: System.Windows.Window.IsActive
  parent: System.Windows.Window
  isExternal: false
  name: IsActive
  nameWithType: Window.IsActive
  fullName: System.Windows.Window.IsActive
- uid: System.Windows.Window.IsActiveProperty
  parent: System.Windows.Window
  isExternal: false
  name: IsActiveProperty
  nameWithType: Window.IsActiveProperty
  fullName: System.Windows.Window.IsActiveProperty
- uid: System.Windows.Window.Left
  parent: System.Windows.Window
  isExternal: false
  name: Left
  nameWithType: Window.Left
  fullName: System.Windows.Window.Left
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Window.LeftProperty
  parent: System.Windows.Window
  isExternal: false
  name: LeftProperty
  nameWithType: Window.LeftProperty
  fullName: System.Windows.Window.LeftProperty
- uid: System.Windows.Window.LocationChanged
  parent: System.Windows.Window
  isExternal: false
  name: LocationChanged
  nameWithType: Window.LocationChanged
  fullName: System.Windows.Window.LocationChanged
- uid: System.Windows.Window.LogicalChildren
  parent: System.Windows.Window
  isExternal: false
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
  fullName: System.Windows.Window.LogicalChildren
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)
  parent: System.Windows.Window
  isExternal: false
  name: MeasureOverride(Size)
  nameWithType: Window.MeasureOverride(Size)
  fullName: System.Windows.Window.MeasureOverride(Size)
- uid: System.Windows.Window.OnActivated(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnActivated(EventArgs)
  nameWithType: Window.OnActivated(EventArgs)
  fullName: System.Windows.Window.OnActivated(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Window.OnClosed(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnClosed(EventArgs)
  nameWithType: Window.OnClosed(EventArgs)
  fullName: System.Windows.Window.OnClosed(EventArgs)
- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnClosing(CancelEventArgs)
  nameWithType: Window.OnClosing(CancelEventArgs)
  fullName: System.Windows.Window.OnClosing(CancelEventArgs)
- uid: System.ComponentModel.CancelEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: CancelEventArgs
  nameWithType: CancelEventArgs
  fullName: System.ComponentModel.CancelEventArgs
- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)
  parent: System.Windows.Window
  isExternal: false
  name: OnContentChanged(Object,Object)
  nameWithType: Window.OnContentChanged(Object,Object)
  fullName: System.Windows.Window.OnContentChanged(Object,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Window.OnContentRendered(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnContentRendered(EventArgs)
  nameWithType: Window.OnContentRendered(EventArgs)
  fullName: System.Windows.Window.OnContentRendered(EventArgs)
- uid: System.Windows.Window.OnCreateAutomationPeer
  parent: System.Windows.Window
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: Window.OnCreateAutomationPeer()
  fullName: System.Windows.Window.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.Window.OnDeactivated(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnDeactivated(EventArgs)
  nameWithType: Window.OnDeactivated(EventArgs)
  fullName: System.Windows.Window.OnDeactivated(EventArgs)
- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Window
  isExternal: false
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Window.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Window.OnDpiChanged(DpiScale,DpiScale)
- uid: System.Windows.DpiScale
  parent: System.Windows
  isExternal: false
  name: DpiScale
  nameWithType: DpiScale
  fullName: System.Windows.DpiScale
- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnLocationChanged(EventArgs)
  nameWithType: Window.OnLocationChanged(EventArgs)
  fullName: System.Windows.Window.OnLocationChanged(EventArgs)
- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
- uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationBoundaryFeedbackEventArgs
  nameWithType: ManipulationBoundaryFeedbackEventArgs
  fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnSourceInitialized(EventArgs)
  nameWithType: Window.OnSourceInitialized(EventArgs)
  fullName: System.Windows.Window.OnSourceInitialized(EventArgs)
- uid: System.Windows.Window.OnStateChanged(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnStateChanged(EventArgs)
  nameWithType: Window.OnStateChanged(EventArgs)
  fullName: System.Windows.Window.OnStateChanged(EventArgs)
- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Window
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Window.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Window.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.Window.OwnedWindows
  parent: System.Windows.Window
  isExternal: false
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
  fullName: System.Windows.Window.OwnedWindows
- uid: System.Windows.WindowCollection
  parent: System.Windows
  isExternal: false
  name: WindowCollection
  nameWithType: WindowCollection
  fullName: System.Windows.WindowCollection
- uid: System.Windows.Window.Owner
  parent: System.Windows.Window
  isExternal: false
  name: Owner
  nameWithType: Window.Owner
  fullName: System.Windows.Window.Owner
- uid: System.Windows.Window.ResizeMode
  parent: System.Windows.Window
  isExternal: false
  name: ResizeMode
  nameWithType: Window.ResizeMode
  fullName: System.Windows.Window.ResizeMode
- uid: System.Windows.ResizeMode
  parent: System.Windows
  isExternal: false
  name: ResizeMode
  nameWithType: ResizeMode
  fullName: System.Windows.ResizeMode
- uid: System.Windows.Window.ResizeModeProperty
  parent: System.Windows.Window
  isExternal: false
  name: ResizeModeProperty
  nameWithType: Window.ResizeModeProperty
  fullName: System.Windows.Window.ResizeModeProperty
- uid: System.Windows.Window.RestoreBounds
  parent: System.Windows.Window
  isExternal: false
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
  fullName: System.Windows.Window.RestoreBounds
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Window.Show
  parent: System.Windows.Window
  isExternal: false
  name: Show()
  nameWithType: Window.Show()
  fullName: System.Windows.Window.Show()
- uid: System.Windows.Window.ShowActivated
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivated
  nameWithType: Window.ShowActivated
  fullName: System.Windows.Window.ShowActivated
- uid: System.Windows.Window.ShowActivatedProperty
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivatedProperty
  nameWithType: Window.ShowActivatedProperty
  fullName: System.Windows.Window.ShowActivatedProperty
- uid: System.Windows.Window.ShowDialog
  parent: System.Windows.Window
  isExternal: false
  name: ShowDialog()
  nameWithType: Window.ShowDialog()
  fullName: System.Windows.Window.ShowDialog()
- uid: System.Windows.Window.ShowInTaskbar
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
  fullName: System.Windows.Window.ShowInTaskbar
- uid: System.Windows.Window.ShowInTaskbarProperty
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbarProperty
  nameWithType: Window.ShowInTaskbarProperty
  fullName: System.Windows.Window.ShowInTaskbarProperty
- uid: System.Windows.Window.SizeToContent
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContent
  nameWithType: Window.SizeToContent
  fullName: System.Windows.Window.SizeToContent
- uid: System.Windows.SizeToContent
  parent: System.Windows
  isExternal: false
  name: SizeToContent
  nameWithType: SizeToContent
  fullName: System.Windows.SizeToContent
- uid: System.Windows.Window.SizeToContentProperty
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContentProperty
  nameWithType: Window.SizeToContentProperty
  fullName: System.Windows.Window.SizeToContentProperty
- uid: System.Windows.Window.SourceInitialized
  parent: System.Windows.Window
  isExternal: false
  name: SourceInitialized
  nameWithType: Window.SourceInitialized
  fullName: System.Windows.Window.SourceInitialized
- uid: System.Windows.Window.StateChanged
  parent: System.Windows.Window
  isExternal: false
  name: StateChanged
  nameWithType: Window.StateChanged
  fullName: System.Windows.Window.StateChanged
- uid: System.Windows.Window.TaskbarItemInfo
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
  fullName: System.Windows.Window.TaskbarItemInfo
- uid: System.Windows.Shell.TaskbarItemInfo
  parent: System.Windows.Shell
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: TaskbarItemInfo
  fullName: System.Windows.Shell.TaskbarItemInfo
- uid: System.Windows.Window.TaskbarItemInfoProperty
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfoProperty
  nameWithType: Window.TaskbarItemInfoProperty
  fullName: System.Windows.Window.TaskbarItemInfoProperty
- uid: System.Windows.Window.Title
  parent: System.Windows.Window
  isExternal: false
  name: Title
  nameWithType: Window.Title
  fullName: System.Windows.Window.Title
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Window.TitleProperty
  parent: System.Windows.Window
  isExternal: false
  name: TitleProperty
  nameWithType: Window.TitleProperty
  fullName: System.Windows.Window.TitleProperty
- uid: System.Windows.Window.Top
  parent: System.Windows.Window
  isExternal: false
  name: Top
  nameWithType: Window.Top
  fullName: System.Windows.Window.Top
- uid: System.Windows.Window.Topmost
  parent: System.Windows.Window
  isExternal: false
  name: Topmost
  nameWithType: Window.Topmost
  fullName: System.Windows.Window.Topmost
- uid: System.Windows.Window.TopmostProperty
  parent: System.Windows.Window
  isExternal: false
  name: TopmostProperty
  nameWithType: Window.TopmostProperty
  fullName: System.Windows.Window.TopmostProperty
- uid: System.Windows.Window.TopProperty
  parent: System.Windows.Window
  isExternal: false
  name: TopProperty
  nameWithType: Window.TopProperty
  fullName: System.Windows.Window.TopProperty
- uid: System.Windows.Window.WindowStartupLocation
  parent: System.Windows.Window
  isExternal: false
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
  fullName: System.Windows.Window.WindowStartupLocation
- uid: System.Windows.WindowStartupLocation
  parent: System.Windows
  isExternal: false
  name: WindowStartupLocation
  nameWithType: WindowStartupLocation
  fullName: System.Windows.WindowStartupLocation
- uid: System.Windows.Window.WindowState
  parent: System.Windows.Window
  isExternal: false
  name: WindowState
  nameWithType: Window.WindowState
  fullName: System.Windows.Window.WindowState
- uid: System.Windows.WindowState
  parent: System.Windows
  isExternal: false
  name: WindowState
  nameWithType: WindowState
  fullName: System.Windows.WindowState
- uid: System.Windows.Window.WindowStateProperty
  parent: System.Windows.Window
  isExternal: false
  name: WindowStateProperty
  nameWithType: Window.WindowStateProperty
  fullName: System.Windows.Window.WindowStateProperty
- uid: System.Windows.Window.WindowStyle
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyle
  nameWithType: Window.WindowStyle
  fullName: System.Windows.Window.WindowStyle
- uid: System.Windows.WindowStyle
  parent: System.Windows
  isExternal: false
  name: WindowStyle
  nameWithType: WindowStyle
  fullName: System.Windows.WindowStyle
- uid: System.Windows.Window.WindowStyleProperty
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyleProperty
  nameWithType: Window.WindowStyleProperty
  fullName: System.Windows.Window.WindowStyleProperty
- uid: System.Windows.Window.#ctor*
  parent: System.Windows.Window
  isExternal: false
  name: Window
  nameWithType: Window.Window
- uid: System.Windows.Window.Activate*
  parent: System.Windows.Window
  isExternal: false
  name: Activate
  nameWithType: Window.Activate
- uid: System.Windows.Window.AllowsTransparency*
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
- uid: System.Windows.Window.ArrangeOverride*
  parent: System.Windows.Window
  isExternal: false
  name: ArrangeOverride
  nameWithType: Window.ArrangeOverride
- uid: System.Windows.Window.Close*
  parent: System.Windows.Window
  isExternal: false
  name: Close
  nameWithType: Window.Close
- uid: System.Windows.Window.DialogResult*
  parent: System.Windows.Window
  isExternal: false
  name: DialogResult
  nameWithType: Window.DialogResult
- uid: System.Windows.Window.DragMove*
  parent: System.Windows.Window
  isExternal: false
  name: DragMove
  nameWithType: Window.DragMove
- uid: System.Windows.Window.GetWindow*
  parent: System.Windows.Window
  isExternal: false
  name: GetWindow
  nameWithType: Window.GetWindow
- uid: System.Windows.Window.Hide*
  parent: System.Windows.Window
  isExternal: false
  name: Hide
  nameWithType: Window.Hide
- uid: System.Windows.Window.Icon*
  parent: System.Windows.Window
  isExternal: false
  name: Icon
  nameWithType: Window.Icon
- uid: System.Windows.Window.IsActive*
  parent: System.Windows.Window
  isExternal: false
  name: IsActive
  nameWithType: Window.IsActive
- uid: System.Windows.Window.Left*
  parent: System.Windows.Window
  isExternal: false
  name: Left
  nameWithType: Window.Left
- uid: System.Windows.Window.LogicalChildren*
  parent: System.Windows.Window
  isExternal: false
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
- uid: System.Windows.Window.MeasureOverride*
  parent: System.Windows.Window
  isExternal: false
  name: MeasureOverride
  nameWithType: Window.MeasureOverride
- uid: System.Windows.Window.OnActivated*
  parent: System.Windows.Window
  isExternal: false
  name: OnActivated
  nameWithType: Window.OnActivated
- uid: System.Windows.Window.OnClosed*
  parent: System.Windows.Window
  isExternal: false
  name: OnClosed
  nameWithType: Window.OnClosed
- uid: System.Windows.Window.OnClosing*
  parent: System.Windows.Window
  isExternal: false
  name: OnClosing
  nameWithType: Window.OnClosing
- uid: System.Windows.Window.OnContentChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnContentChanged
  nameWithType: Window.OnContentChanged
- uid: System.Windows.Window.OnContentRendered*
  parent: System.Windows.Window
  isExternal: false
  name: OnContentRendered
  nameWithType: Window.OnContentRendered
- uid: System.Windows.Window.OnCreateAutomationPeer*
  parent: System.Windows.Window
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: Window.OnCreateAutomationPeer
- uid: System.Windows.Window.OnDeactivated*
  parent: System.Windows.Window
  isExternal: false
  name: OnDeactivated
  nameWithType: Window.OnDeactivated
- uid: System.Windows.Window.OnDpiChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnDpiChanged
  nameWithType: Window.OnDpiChanged
- uid: System.Windows.Window.OnLocationChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnLocationChanged
  nameWithType: Window.OnLocationChanged
- uid: System.Windows.Window.OnManipulationBoundaryFeedback*
  parent: System.Windows.Window
  isExternal: false
  name: OnManipulationBoundaryFeedback
  nameWithType: Window.OnManipulationBoundaryFeedback
- uid: System.Windows.Window.OnSourceInitialized*
  parent: System.Windows.Window
  isExternal: false
  name: OnSourceInitialized
  nameWithType: Window.OnSourceInitialized
- uid: System.Windows.Window.OnStateChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnStateChanged
  nameWithType: Window.OnStateChanged
- uid: System.Windows.Window.OnVisualParentChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: Window.OnVisualParentChanged
- uid: System.Windows.Window.OwnedWindows*
  parent: System.Windows.Window
  isExternal: false
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
- uid: System.Windows.Window.Owner*
  parent: System.Windows.Window
  isExternal: false
  name: Owner
  nameWithType: Window.Owner
- uid: System.Windows.Window.ResizeMode*
  parent: System.Windows.Window
  isExternal: false
  name: ResizeMode
  nameWithType: Window.ResizeMode
- uid: System.Windows.Window.RestoreBounds*
  parent: System.Windows.Window
  isExternal: false
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
- uid: System.Windows.Window.Show*
  parent: System.Windows.Window
  isExternal: false
  name: Show
  nameWithType: Window.Show
- uid: System.Windows.Window.ShowActivated*
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivated
  nameWithType: Window.ShowActivated
- uid: System.Windows.Window.ShowDialog*
  parent: System.Windows.Window
  isExternal: false
  name: ShowDialog
  nameWithType: Window.ShowDialog
- uid: System.Windows.Window.ShowInTaskbar*
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
- uid: System.Windows.Window.SizeToContent*
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContent
  nameWithType: Window.SizeToContent
- uid: System.Windows.Window.TaskbarItemInfo*
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
- uid: System.Windows.Window.Title*
  parent: System.Windows.Window
  isExternal: false
  name: Title
  nameWithType: Window.Title
- uid: System.Windows.Window.Top*
  parent: System.Windows.Window
  isExternal: false
  name: Top
  nameWithType: Window.Top
- uid: System.Windows.Window.Topmost*
  parent: System.Windows.Window
  isExternal: false
  name: Topmost
  nameWithType: Window.Topmost
- uid: System.Windows.Window.WindowStartupLocation*
  parent: System.Windows.Window
  isExternal: false
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
- uid: System.Windows.Window.WindowState*
  parent: System.Windows.Window
  isExternal: false
  name: WindowState
  nameWithType: Window.WindowState
- uid: System.Windows.Window.WindowStyle*
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyle
  nameWithType: Window.WindowStyle
