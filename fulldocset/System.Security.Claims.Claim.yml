### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.Claim
  id: Claim
  children:
  - System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  - System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.#ctor(System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.Clone
  - System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.CustomSerializationData
  - System.Security.Claims.Claim.Issuer
  - System.Security.Claims.Claim.OriginalIssuer
  - System.Security.Claims.Claim.Properties
  - System.Security.Claims.Claim.Subject
  - System.Security.Claims.Claim.ToString
  - System.Security.Claims.Claim.Type
  - System.Security.Claims.Claim.Value
  - System.Security.Claims.Claim.ValueType
  - System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
  type: Class
  summary: "クレームを表します。"
  remarks: "クレームは、発行者によって作成されたサブジェクトに関するステートメントを示します。 クレームは、認証と承認の操作のコンテキスト内で使用されるサブジェクトの属性を表します。 サブジェクトと発行者は、id シナリオの一部である両方のエンティティです。 件名の典型的な例を示します。 ユーザー、アプリケーションまたはサービス、デバイス、またはコンピューター。 発行者の典型的な例を示します: オペレーティング システム、アプリケーションです。 サービス、ロール プロバイダー、id プロバイダー、またはフェデレーション プロバイダー。 発行者は、通常を通じて、セキュリティ トークン サービス (STS) のセキュリティ トークンを発行することで、信頼性情報を提供します。 (、WIF でから派生することによって、STS をビルドすることができます、<xref:System.IdentityModel.SecurityTokenService>クラス)</xref:System.IdentityModel.SecurityTokenService>場合によっては、発行者から受信した要求のコレクションは、リソースに直接格納されている件名属性によって拡張できます。 クレームは、データへのアクセス権を決定する評価できるその他の承認のプロセス中にリソースをセキュリティで保護し、ことか、サブジェクトに関する認証決定を express も使用できます。       .NET 4.5 以降では、クレーム ベース id を実装するには、Windows Identity Foundation (WIF) のクラスが完全に統合されて、.NET Framework。 クレームの概念は、クレーム クラスによって実装されます。       要求クラスの重要なプロパティを以下に示します: -<xref:System.Security.Claims.Claim.Type%2A>プロパティは、クレームのセマンティクス情報を含む文字列 (通常は URI) 以外の場合は、要求の値の意味を示します</xref:System.Security.Claims.Claim.Type%2A>。 たとえば、要求の種類の要求<xref:System.Security.Claims.ClaimTypes.GivenName>(&quot;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname&quot;) は、ユーザーの名前を表します</xref:System.Security.Claims.ClaimTypes.GivenName>。 値、<xref:System.Security.Claims.Claim.Type%2A>プロパティで定義されている既知のクレームの種類のいずれかを指定できます、<xref:System.Security.Claims.ClaimTypes>クラス、することもできます任意の URI、発行者で定義されている</xref:System.Security.Claims.ClaimTypes></xref:System.Security.Claims.Claim.Type%2A>。 たとえば、&quot;urn: spendinglimit&quot;のクレームの種類は、発行者のビジネス コンテキストで意味のあるユーザーの属性を表す場合があります。      -<xref:System.Security.Claims.Claim.Value%2A>プロパティには、要求の値が含まれています</xref:System.Security.Claims.Claim.Value%2A>。 依存関係を減らすし、WIF での管理を簡素化するために、要求の値は文字列として表されます。 複雑な値の型、値にシリアル化するためのものであり、文字列から逆シリアル化方法を示すためには、標準の XML スキーマ型を使用することをお勧めします。      -<xref:System.Security.Claims.Claim.ValueType%2A>プロパティには値の型情報を識別する文字列が含まれています</xref:System.Security.Claims.Claim.ValueType%2A>。 値の形式を理解し、逆シリアル化する方法に関する情報を提供する、このプロパティを使用する必要があります。 ソリューションは、複雑な値の型を必要とする場合は、標準 XML スキーマの種類を使用することをお勧め、<xref:System.Security.Claims.Claim.ValueType%2A>を示すプロパティをどのように<xref:System.Security.Claims.Claim.Value%2A>プロパティにシリアル化するためのものであり、文字列から逆シリアル化します</xref:System.Security.Claims.Claim.Value%2A></xref:System.Security.Claims.Claim.ValueType%2A>。      -<xref:System.Security.Claims.Claim.Subject%2A>プロパティは、<xref:System.Security.Claims.ClaimsIdentity>クレームのサブジェクトを表すオブジェクト</xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.Claim.Subject%2A>。 クレームのサブジェクトは、に関するクレームがアサートされるエンティティ (通常、リソースへのアクセスを要求しているユーザー) です。 <xref:System.Security.Claims.ClaimsIdentity>が含まれている間、そのプロパティでプロパティを記述するクレームのコレクションと&1; つまたは複数の発行元によってに attested とサブジェクトの属性です</xref:System.Security.Claims.ClaimsIdentity>。      -<xref:System.Security.Claims.Claim.Issuer%2A>プロパティには、要求を発行したエンティティの名前が含まれています</xref:System.Security.Claims.Claim.Issuer%2A>。 要求の発行者は、WIF の発行者名レジストリによって保持されている既知の発行者の一覧から取得した名前を表す文字列で表されます。 発行者名レジストリは、<xref:System.IdentityModel.Tokens.IssuerNameRegistry>クラス</xref:System.IdentityModel.Tokens.IssuerNameRegistry>から派生したクラスのインスタンス 発行者名レジストリは、ニーモニックの名前を対応する発行元によって生成されるトークンの署名を確認するために必要な暗号化マテリアルを関連付けます。 たとえば、<xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>クラス、.NET 4.5 ですぐに使用できますが、対応する X.509 証明書にニーモニック各発行者の名前を関連付けます</xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>。 よく知られている発行者の一覧は、通常、発行者名レジストリによってスタートアップ時に作成されます。 によって使用されるリスト、<xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>は、アプリケーション構成ファイルで指定します</xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>。      -<xref:System.Security.Claims.Claim.OriginalIssuer%2A>プロパティには、最初に要求を発行したエンティティの名前が含まれています</xref:System.Security.Claims.Claim.OriginalIssuer%2A>。 このプロパティは、クレーム可能性がありますが通過複数の発行者を RP アプリケーションのクライアントによって表されたシナリオを容易にするために設計されていますフェデレーション シナリオなど。 調べることができます、<xref:System.Security.Claims.Claim.OriginalIssuer%2A>プロパティを最初に要求を発行したエンティティを特定します</xref:System.Security.Claims.Claim.OriginalIssuer%2A>。 発行者名レジストリの場合などで管理されている、よく知られている発行者の一覧から、名前を取得、<xref:System.Security.Claims.Claim.Issuer%2A>プロパティ</xref:System.Security.Claims.Claim.Issuer%2A>。"
  example:
  - "The following example extracts the claims associated to the authenticated user performing an HTTP request and writes them in the HTTP response. The current user is read from the <xref:System.Web.HttpContext> as a <xref:System.Security.Claims.ClaimsPrincipal> and the claims are read from it. The claims are then written to HTTP the response.  \n  \n```c#  \nClaimsPrincipal principal = HttpContext.Current.User as ClaimsPrincipal;  \nif (null != principal)  \n{  \n   foreach (Claim claim in principal.Claims)  \n   {  \n      Response.Write(\"CLAIM TYPE: \" + claim.Type + \"; CLAIM VALUE: \" + claim.Value + \"</br>\");  \n   }  \n  \n}  \n  \n```"
  syntax:
    content: public class Claim
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(BinaryReader)
  nameWithType: Claim.Claim(BinaryReader)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public Claim (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "追加します。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  id: '#ctor(System.Security.Claims.Claim)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(Claim)
  nameWithType: Claim.Claim(Claim)
  fullName: System.Security.Claims.Claim.Claim(Claim)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.Claim&quot;> </xref>クラスです。"
  syntax:
    content: protected Claim (System.Security.Claims.Claim other);
    parameters:
    - id: other
      type: System.Security.Claims.Claim
      description: "セキュリティ クレーム。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(BinaryReader,ClaimsIdentity)
  nameWithType: Claim.Claim(BinaryReader,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader,ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.Claim&quot;> </xref>クラスの指定したリーダーを対象とします。"
  syntax:
    content: public Claim (System.IO.BinaryReader reader, System.Security.Claims.ClaimsIdentity subject);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "バイナリ リーダー。"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "この要求が記述する件名。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(Claim,ClaimsIdentity)
  nameWithType: Claim.Claim(Claim,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(Claim,ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.Claim&quot;> </xref>クラスの指定したセキュリティ クレームに、対象とします。"
  syntax:
    content: protected Claim (System.Security.Claims.Claim other, System.Security.Claims.ClaimsIdentity subject);
    parameters:
    - id: other
      type: System.Security.Claims.Claim
      description: "セキュリティ クレーム。"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "この要求が記述する件名。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String)
  nameWithType: Claim.Claim(String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.Claim&quot;> </xref>指定したクレームの種類と値を持つクラス。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>プロパティに設定されている`null`</xref:System.Security.Claims.Claim.Subject%2A>。 <xref:System.Security.Claims.Claim.Issuer%2A> <xref:System.Security.Claims.Claim.OriginalIssuer%2A> <xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>。</xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>プロパティ</xref:System.Security.Claims.Claim.OriginalIssuer%2A>を設定</xref:System.Security.Claims.Claim.Issuer%2A> <xref:System.Security.Claims.Claim.ValueType%2A>プロパティに設定されている<xref:System.Security.Claims.ClaimValueTypes.String?displayProperty=fullName></xref:System.Security.Claims.ClaimValueTypes.String?displayProperty=fullName></xref:System.Security.Claims.Claim.ValueType%2A>"
  syntax:
    content: public Claim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "要求の種類。"
    - id: value
      type: System.String
      description: "要求の値。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String)
  nameWithType: Claim.Claim(String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.Claim&quot;> </xref>指定された要求の種類、値、および値型を持つクラス。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>プロパティに設定されている`null`</xref:System.Security.Claims.Claim.Subject%2A>。 <xref:System.Security.Claims.Claim.Issuer%2A> <xref:System.Security.Claims.Claim.OriginalIssuer%2A> <xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>。</xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>プロパティ</xref:System.Security.Claims.Claim.OriginalIssuer%2A>を設定</xref:System.Security.Claims.Claim.Issuer%2A>"
  syntax:
    content: public Claim (string type, string value, string valueType);
    parameters:
    - id: type
      type: System.String
      description: "要求の種類。"
    - id: value
      type: System.String
      description: "要求の値。"
    - id: valueType
      type: System.String
      description: "要求値の型。 このパラメーターは、する場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、し<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>を使用します。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.Claim&quot;> </xref>クラスの指定された要求の種類、値、値型、および発行者を使用します。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>プロパティに設定されている`null`</xref:System.Security.Claims.Claim.Subject%2A>。 <xref:System.Security.Claims.Claim.OriginalIssuer%2A>プロパティの値に基づいて、`issuer`パラメーター</xref:System.Security.Claims.Claim.OriginalIssuer%2A> 。"
  syntax:
    content: public Claim (string type, string value, string valueType, string issuer);
    parameters:
    - id: type
      type: System.String
      description: "要求の種類。"
    - id: value
      type: System.String
      description: "要求の値。"
    - id: valueType
      type: System.String
      description: "要求値の型。 このパラメーターは、する場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、し<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>を使用します。"
    - id: issuer
      type: System.String
      description: "要求の発行者。 このパラメーターが空の場合、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、し<xref href=&quot;System.Security.Claims.ClaimsIdentity.DefaultIssuer&quot;></xref>を使用します。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.Claim&quot;> </xref>指定された要求の種類、値、値型、発行者、および発行元を持つクラス。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>プロパティに設定されている`null`</xref:System.Security.Claims.Claim.Subject%2A>。"
  syntax:
    content: public Claim (string type, string value, string valueType, string issuer, string originalIssuer);
    parameters:
    - id: type
      type: System.String
      description: "要求の種類。"
    - id: value
      type: System.String
      description: "要求の値。"
    - id: valueType
      type: System.String
      description: "要求値の型。 このパラメーターは、する場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、し<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>を使用します。"
    - id: issuer
      type: System.String
      description: "要求の発行者。 このパラメーターが空の場合、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、し<xref href=&quot;System.Security.Claims.ClaimsIdentity.DefaultIssuer&quot;></xref>を使用します。"
    - id: originalIssuer
      type: System.String
      description: "要求の発行元。 このパラメーターが空の場合または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、続いて、 <> </> *> の値に設定されて、 <> </> *> プロパティです。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String,String,String,ClaimsIdentity)
  nameWithType: Claim.Claim(String,String,String,String,String,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String,ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.Claim&quot;> </xref>指定された要求の種類、値、値型、発行者、発行元とサブジェクトを持つクラス。"
  syntax:
    content: public Claim (string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject);
    parameters:
    - id: type
      type: System.String
      description: "要求の種類。"
    - id: value
      type: System.String
      description: "要求の値。"
    - id: valueType
      type: System.String
      description: "要求値の型。 このパラメーターは、する場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、し<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>を使用します。"
    - id: issuer
      type: System.String
      description: "要求の発行者。 このパラメーターが空の場合、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、し<xref href=&quot;System.Security.Claims.ClaimsIdentity.DefaultIssuer&quot;></xref>を使用します。"
    - id: originalIssuer
      type: System.String
      description: "要求の発行元。 このパラメーターが空の場合または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、続いて、 <> </> *> の値に設定されて、 <> </> *> プロパティです。"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "この要求が記述する件名。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.Clone
  id: Clone
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Clone()
  nameWithType: Claim.Clone()
  fullName: System.Security.Claims.Claim.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいを返します<xref href=&quot;System.Security.Claims.Claim&quot;></xref>オブジェクトがこのオブジェクトからコピーします。 新しいクレームには、件名はありません。"
  remarks: "これは、シャロー コピー操作です。 <xref:System.Security.Claims.Claim.Subject%2A>新しいプロパティ<xref:System.Security.Claims.Claim>にオブジェクトが設定されている`null`</xref:System.Security.Claims.Claim></xref:System.Security.Claims.Claim.Subject%2A>。"
  syntax:
    content: public virtual System.Security.Claims.Claim Clone ();
    parameters: []
    return:
      type: System.Security.Claims.Claim
      description: "新しい要求オブジェクト。"
  overload: System.Security.Claims.Claim.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  id: Clone(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Clone(ClaimsIdentity)
  nameWithType: Claim.Clone(ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Clone(ClaimsIdentity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいを返します<xref href=&quot;System.Security.Claims.Claim&quot;></xref>オブジェクトがこのオブジェクトからコピーします。 新しいクレームのサブジェクトは、指定した ClaimsIdentity に設定されます。"
  remarks: "これは、シャロー コピー操作です。 <xref:System.Security.Claims.Claim.Subject%2A>新しいプロパティ<xref:System.Security.Claims.Claim>オブジェクトがの値に設定されている、`identity`パラメーター</xref:System.Security.Claims.Claim> </xref:System.Security.Claims.Claim.Subject%2A> 。"
  syntax:
    content: public virtual System.Security.Claims.Claim Clone (System.Security.Claims.ClaimsIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
      description: "新しい要求の目的のサブジェクト。"
    return:
      type: System.Security.Claims.Claim
      description: "新しい要求オブジェクト。"
  overload: System.Security.Claims.Claim.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: Claim.CustomSerializationData
  fullName: System.Security.Claims.Claim.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "<xref:System.Byte>。</xref:System.Byte>を返します。"
  overload: System.Security.Claims.Claim.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Issuer
  id: Issuer
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Issuer
  nameWithType: Claim.Issuer
  fullName: System.Security.Claims.Claim.Issuer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "要求の発行者を取得します。"
  remarks: "Issuer プロパティの値は、発行者名レジストリで保持されている、よく知られている発行者の一覧から使用されている名前です。 発行者名レジストリは、<xref:System.IdentityModel.Tokens.IssuerNameRegistry>クラス</xref:System.IdentityModel.Tokens.IssuerNameRegistry>から派生したクラスのインスタンス 発行者名レジストリ ニーモニック名 (発行者名) です。 発行元によって生成されるトークンの署名を確認するために必要な暗号化マテリアルとを関連付けますたとえば、X.509 証明書です。"
  syntax:
    content: public string Issuer { get; }
    return:
      type: System.String
      description: "要求の発行を参照する名前。"
  overload: System.Security.Claims.Claim.Issuer*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.OriginalIssuer
  id: OriginalIssuer
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: OriginalIssuer
  nameWithType: Claim.OriginalIssuer
  fullName: System.Security.Claims.Claim.OriginalIssuer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "要求の発行元を取得します。"
  remarks: "最初に要求を発行したエンティティの名前が含まれています。 このプロパティは、クレーム可能性がありますが通過複数の発行者を RP アプリケーションのクライアントによって表されたシナリオを容易にするために設計されていますフェデレーション シナリオなど。       OriginalIssuer プロパティの値は、発行者名レジストリで保持されている、よく知られている発行者の一覧から使用されている名前です。 発行者名レジストリは、<xref:System.IdentityModel.Tokens.IssuerNameRegistry>クラス</xref:System.IdentityModel.Tokens.IssuerNameRegistry>から派生したクラスのインスタンス 発行者名レジストリ ニーモニック名 (発行者名) です。 発行元によって生成されるトークンの署名を確認するために必要な暗号化マテリアルとを関連付けますたとえば、X.509 証明書です。       委任とフェデレーションのシナリオを除く、<xref:System.Security.Claims.Claim.Issuer%2A>プロパティと、OriginalIssuer プロパティは同じ値を持つ通常</xref:System.Security.Claims.Claim.Issuer%2A>。 OriginalIssuer プロパティの値の値と異なるかどうか、<xref:System.Security.Claims.Claim.Issuer%2A>プロパティ、クレームは、最初の発行者によって発行された最初および再発行者によって発行され、その後</xref:System.Security.Claims.Claim.Issuer%2A>。"
  syntax:
    content: public string OriginalIssuer { get; }
    return:
      type: System.String
      description: "要求の発行元を参照する名前。"
  overload: System.Security.Claims.Claim.OriginalIssuer*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Properties
  id: Properties
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Properties
  nameWithType: Claim.Properties
  fullName: System.Security.Claims.Claim.Properties
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求に関連付けられている追加のプロパティを格納するディクショナリを取得します。"
  remarks: "プロパティのプロパティは、メタデータまたはその他の情報に関連付けられている要求を許可する名前と値のペアのディクショナリを提供します。 このディクショナリ SAML トークンから生成された要求では、<xref:System.Security.Claims.ClaimProperties>クラス</xref:System.Security.Claims.ClaimProperties>内の定数で指定されたキーを含めることがあります。"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> Properties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要求に関連付けられている追加のプロパティを格納するディクショナリ。 プロパティは、名前と値のペアとして表されます。"
  overload: System.Security.Claims.Claim.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Subject
  id: Subject
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Subject
  nameWithType: Claim.Subject
  fullName: System.Security.Claims.Claim.Subject
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "クレームの件名を取得します。"
  remarks: "サブジェクトは、どの要求がアサートされるエンティティです。 一般的な例としては、ユーザー、アプリケーションまたはサービス、デバイス、またはコンピューターです。 サブジェクトが<xref:System.Security.Claims.ClaimsIdentity>それを記述するクレームのコレクションを含む、</xref:System.Security.Claims.ClaimsIdentity>によって表される"
  syntax:
    content: public System.Security.Claims.ClaimsIdentity Subject { get; }
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "クレームの件名です。"
  overload: System.Security.Claims.Claim.Subject*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.ToString
  id: ToString
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: ToString()
  nameWithType: Claim.ToString()
  fullName: System.Security.Claims.Claim.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この文字列表現を返します<xref href=&quot;System.Security.Claims.Claim&quot;></xref>オブジェクト。"
  remarks: '返される文字列、<xref:System.Security.Claims.Claim.Type%2A>の値を格納して、次の形式で<xref:System.Security.Claims.Claim.Value%2A>プロパティ:.&quot;型: 値&quot;.</xref:System.Security.Claims.Claim.Value%2A> </xref:System.Security.Claims.Claim.Type%2A>'
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "この文字列形式を<xref href=&quot;System.Security.Claims.Claim&quot;></xref>オブジェクト。"
  overload: System.Security.Claims.Claim.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Type
  id: Type
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Type
  nameWithType: Claim.Type
  fullName: System.Security.Claims.Claim.Type
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "要求の要求の種類を取得します。"
  remarks: "要求はについては、状態、Type プロパティが要求のセマンティックのコンテンツを提供します。 たとえば、要求の種類の要求<xref:System.Security.Claims.ClaimTypes.GivenName>(&quot;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname&quot;) は、ユーザーの名前を表します</xref:System.Security.Claims.ClaimTypes.GivenName>。 要求の種類は、通常は URI です。ただし、限定されない、特定の形式に以外の値を文字列として表現できるとあります。 のみの一般的な要件として、要求の発行者および要求コンシューマーは、要求の意味に関する同意する必要があります。 Windows Identity Foundation (WIF) によって使用される既知のクレームの種類の定数は、<xref:System.Security.Claims.ClaimTypes>クラス</xref:System.Security.Claims.ClaimTypes>を通じて利用 要求の値がによって提供される、<xref:System.Security.Claims.Claim.Value%2A>プロパティ</xref:System.Security.Claims.Claim.Value%2A>。"
  syntax:
    content: public string Type { get; }
    return:
      type: System.String
      description: "要求の種類。"
  overload: System.Security.Claims.Claim.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Value
  id: Value
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Value
  nameWithType: Claim.Value
  fullName: System.Security.Claims.Claim.Value
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "要求の値を取得します。"
  remarks: "要求の値は、文字列として表されます。 複雑な値の型、値がシリアル化して、文字列から逆シリアル化することを意図した方法を示すためには、標準の XML スキーマ型を使用することをお勧めします。       <xref:System.Security.Claims.Claim.ValueType%2A>プロパティが値の基になる構文の型情報を提供します</xref:System.Security.Claims.Claim.ValueType%2A>。 <xref:System.Security.Claims.Claim.Type%2A>プロパティ値のセマンティクス情報を提供する、。 これは、値の意味は、要求コンシューマーにそれを解釈する方法を示す</xref:System.Security.Claims.Claim.Type%2A>"
  syntax:
    content: public string Value { get; }
    return:
      type: System.String
      description: "要求の値。"
  overload: System.Security.Claims.Claim.Value*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.ValueType
  id: ValueType
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: ValueType
  nameWithType: Claim.ValueType
  fullName: System.Security.Claims.Claim.ValueType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "要求の値の型を取得します。"
  remarks: "ValueType プロパティには、値の型情報を識別する文字列が含まれています。 値の形式を理解し、および値を逆シリアル化する方法に関する情報を提供する、このプロパティを使用できます。 ソリューションは、複雑な値の型を必要とする場合を示すために、ValueType プロパティで、標準の XML スキーマ型を使用することをお勧めする方法、<xref:System.Security.Claims.Claim.Value%2A>プロパティがシリアル化および文字列から逆シリアル化に意図したものです</xref:System.Security.Claims.Claim.Value%2A>。"
  syntax:
    content: public string ValueType { get; }
    return:
      type: System.String
      description: "要求値の型。"
  overload: System.Security.Claims.Claim.ValueType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: Claim.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "追加します。"
  overload: System.Security.Claims.Claim.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: Claim.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "これを書き込みます<xref href=&quot;System.Security.Claims.Claim&quot;></xref>ライターに出力します。"
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "この要求を書き込むライター"
    - id: userData
      type: System.Byte[]
      description: "ユーザー データを要求するには"
  overload: System.Security.Claims.Claim.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(BinaryReader)
  nameWithType: Claim.Claim(BinaryReader)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(Claim)
  nameWithType: Claim.Claim(Claim)
  fullName: System.Security.Claims.Claim.Claim(Claim)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(BinaryReader,ClaimsIdentity)
  nameWithType: Claim.Claim(BinaryReader,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader,ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(Claim,ClaimsIdentity)
  nameWithType: Claim.Claim(Claim,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(Claim,ClaimsIdentity)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String)
  nameWithType: Claim.Claim(String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String)
  nameWithType: Claim.Claim(String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String,String,String,ClaimsIdentity)
  nameWithType: Claim.Claim(String,String,String,String,String,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String,ClaimsIdentity)
- uid: System.Security.Claims.Claim.Clone
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Clone()
  nameWithType: Claim.Clone()
  fullName: System.Security.Claims.Claim.Clone()
- uid: System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Clone(ClaimsIdentity)
  nameWithType: Claim.Clone(ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Clone(ClaimsIdentity)
- uid: System.Security.Claims.Claim.CustomSerializationData
  parent: System.Security.Claims.Claim
  isExternal: false
  name: CustomSerializationData
  nameWithType: Claim.CustomSerializationData
  fullName: System.Security.Claims.Claim.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.Claim.Issuer
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Issuer
  nameWithType: Claim.Issuer
  fullName: System.Security.Claims.Claim.Issuer
- uid: System.Security.Claims.Claim.OriginalIssuer
  parent: System.Security.Claims.Claim
  isExternal: false
  name: OriginalIssuer
  nameWithType: Claim.OriginalIssuer
  fullName: System.Security.Claims.Claim.OriginalIssuer
- uid: System.Security.Claims.Claim.Properties
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Properties
  nameWithType: Claim.Properties
  fullName: System.Security.Claims.Claim.Properties
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.Claim.Subject
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Subject
  nameWithType: Claim.Subject
  fullName: System.Security.Claims.Claim.Subject
- uid: System.Security.Claims.Claim.ToString
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ToString()
  nameWithType: Claim.ToString()
  fullName: System.Security.Claims.Claim.ToString()
- uid: System.Security.Claims.Claim.Type
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Type
  nameWithType: Claim.Type
  fullName: System.Security.Claims.Claim.Type
- uid: System.Security.Claims.Claim.Value
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Value
  nameWithType: Claim.Value
  fullName: System.Security.Claims.Claim.Value
- uid: System.Security.Claims.Claim.ValueType
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ValueType
  nameWithType: Claim.ValueType
  fullName: System.Security.Claims.Claim.ValueType
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: Claim.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.Claim
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: Claim.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.Claim.#ctor*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim
  nameWithType: Claim.Claim
- uid: System.Security.Claims.Claim.Clone*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Clone
  nameWithType: Claim.Clone
- uid: System.Security.Claims.Claim.CustomSerializationData*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: CustomSerializationData
  nameWithType: Claim.CustomSerializationData
- uid: System.Security.Claims.Claim.Issuer*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Issuer
  nameWithType: Claim.Issuer
- uid: System.Security.Claims.Claim.OriginalIssuer*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: OriginalIssuer
  nameWithType: Claim.OriginalIssuer
- uid: System.Security.Claims.Claim.Properties*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Properties
  nameWithType: Claim.Properties
- uid: System.Security.Claims.Claim.Subject*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Subject
  nameWithType: Claim.Subject
- uid: System.Security.Claims.Claim.ToString*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ToString
  nameWithType: Claim.ToString
- uid: System.Security.Claims.Claim.Type*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Type
  nameWithType: Claim.Type
- uid: System.Security.Claims.Claim.Value*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Value
  nameWithType: Claim.Value
- uid: System.Security.Claims.Claim.ValueType*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ValueType
  nameWithType: Claim.ValueType
- uid: System.Security.Claims.Claim.WriteTo*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: WriteTo
  nameWithType: Claim.WriteTo
