### YamlMime:ManagedReference
items:
- uid: System.Windows.WeakEventManager
  id: WeakEventManager
  children:
  - System.Windows.WeakEventManager.#ctor
  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  - System.Windows.WeakEventManager.Item(System.Object)
  - System.Windows.WeakEventManager.NewListenerList
  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  - System.Windows.WeakEventManager.ReadLock
  - System.Windows.WeakEventManager.Remove(System.Object)
  - System.Windows.WeakEventManager.ScheduleCleanup
  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  - System.Windows.WeakEventManager.StartListening(System.Object)
  - System.Windows.WeakEventManager.StopListening(System.Object)
  - System.Windows.WeakEventManager.WriteLock
  langs:
  - csharp
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
  type: Class
  summary: "イベント マネージャーで使用される基本クラスを提供、*弱いイベント パターン*です。 管理者は、追加し、パターンを使用してもイベント (またはコールバック) のリスナーを削除します。"
  remarks: "通常、イベント ソースにオブジェクトの有効期間とは別のイベント リスナーがある場合は、弱いイベント パターンを使用します。 ガベージ コレクションされるソース オブジェクトが解決しない場合でも、リスナーのハンドラーを、WeakEventManager の中心となるイベントのディスパッチ機能を使用できます。 これに対し、通常のイベント フックアップを使用して、`+=`演算子では、リスナーへの参照を保持するために切断された可能性のあるソースがします。 これは、受信側がガベージ コレクション、迅速にすることを防ぎます。       1 つ一般的なソースとリスナーの有効期間の関係を使用する必要がありますの弱いイベント パターンは、データのバインドからの更新イベントの処理です。       弱いイベント パターンは、コールバックと通常のイベントにも使用できます。"
  syntax:
    content: 'public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.WeakEventManager.#ctor
  id: '#ctor'
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "派生クラスのコンス トラクターによって初期化子として使用される場合は、基本クラスの値を初期化します。"
  syntax:
    content: protected WeakEventManager ();
    parameters: []
  overload: System.Windows.WeakEventManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  id: DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "各リスナーに管理対象のイベントを提供します。"
  remarks: "追加または削除されるイベント ハンドラー内から DeliverEvent メソッドを呼び出して、<xref:System.Windows.WeakEventManager.StartListening%2A>と<xref:System.Windows.WeakEventManager.StopListening%2A>サブクラスの実装</xref:System.Windows.WeakEventManager.StopListening%2A></xref:System.Windows.WeakEventManager.StartListening%2A>。       呼び出す場合は、<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>メソッドで、`AddListener`イベントを受け取るリスナーのリストは、クラスの実装は、基になるコレクションで保持します</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。 (`AddListener`インターフェイスまたはクラスのコントラクトの一部ではありません。 `AddListener`<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>を呼び出すし、イベントの弱いイベント パターン リスナーを追加するためのマネージャー クラスのメソッドに推奨される名前)。      <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>リスナーを&1; つのリストに追加します</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A></xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。 場合は、マネージャーの実装では、イベントごとのリスナーの&1; つ以上のリストを保持、または使用しないで DeliverEvent <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 代わりに、実装する必要があります作成独自<xref:System.Windows.WeakEventManager.ListenerList>インスタンス、`AddListener`適切なリストでは、リスナーを追加する必要があり、イベントの配信先の適切なリスナー リスト<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</xref:System.Windows.WeakEventManager.DeliverEventToList%2A>を呼び出すことによって</xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void DeliverEvent (object sender, EventArgs args);
    parameters:
    - id: sender
      type: System.Object
      description: "イベントを処理するオブジェクト。"
    - id: args
      type: System.EventArgs
      description: "<xref:System.EventArgs>を配信するイベントのイベント データを格納している</xref:System.EventArgs>。"
  overload: System.Windows.WeakEventManager.DeliverEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  id: DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);
    parameters:
    - id: sender
      type: System.Object
      description: "追加します。"
    - id: args
      type: System.EventArgs
      description: "追加します。"
    - id: list
      type: System.Windows.WeakEventManager.ListenerList
      description: "追加します。"
  overload: System.Windows.WeakEventManager.DeliverEventToList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  id: GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "返します、 <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref>は指定された型の使用を実装します。"
  remarks: "<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>実装は、渡されたを使用してこのメソッドを呼び出す`managerType`です。</xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 返された<xref:System.Windows.WeakEventManager>を調べ、どのイベントを受信しましたがどのプライベート クラス ハンドラーを呼び出すための差別化要因として使用されます</xref:System.Windows.WeakEventManager>。"
  syntax:
    content: protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);
    parameters:
    - id: managerType
      type: System.Type
      description: "取得する型、 <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref>用です。"
    return:
      type: System.Windows.WeakEventManager
      description: "一致する<xref href=&quot;System.Windows.WeakEventManager&quot;></xref>実装します。"
  overload: System.Windows.WeakEventManager.GetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Item(System.Object)
  id: Item(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "取得または指定したソースに格納されているデータを設定します。"
  remarks: "派生クラスには、データとこのインデクサーに格納する型を選択できます。 通常これとして実装される、 <xref:System.Windows.WeakEventManager.ListenerList>、リスナーへの弱い参照の一覧します</xref:System.Windows.WeakEventManager.ListenerList>。 この型を変更する場合にのみ必要があります、<xref:System.Windows.WeakEventManager.ListenerList>型は、必要な情報を含めることはできません</xref:System.Windows.WeakEventManager.ListenerList>。 そのため、オーバーライドする必要が場合、<xref:System.Windows.WeakEventManager.Purge%2A>メソッド基になる型のすべてのクリーンアップが正常に実行できるようにします</xref:System.Windows.WeakEventManager.Purge%2A>。"
  syntax:
    content: protected object this[object source] { get; set; }
    parameters:
    - id: source
      type: System.Object
      description: "要求されたソースの&0; から始まるインデックス。"
    return:
      type: System.Object
      description: "このソースのマネージャーによって格納されるデータ。"
  overload: System.Windows.WeakEventManager.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.NewListenerList
  id: NewListenerList
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "イベントのリスナーを格納する新しいオブジェクトを返します。"
  syntax:
    content: protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();
    parameters: []
    return:
      type: System.Windows.WeakEventManager.ListenerList
      description: "イベントのリスナーを格納する新しいオブジェクト。"
  overload: System.Windows.WeakEventManager.NewListenerList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  id: ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定したソースのイベント ハンドラーとして指定されたデリゲートを追加します。"
  syntax:
    content: protected void ProtectedAddHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "ハンドラーのデリゲートがサブスクライブしているソース オブジェクト。"
    - id: handler
      type: System.Delegate
      description: "によって発生するイベントを処理するデリゲート`source`です。"
  overload: System.Windows.WeakEventManager.ProtectedAddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "管理対象のイベントの指定されたソースを指定したリスナーを追加します。"
  remarks: "マネージャー クラス内には、このメソッドを呼び出す`AddListener`メソッド<xref:System.Windows.WeakEventManager>実装</xref:System.Windows.WeakEventManager>。 `AddListener`推奨される名前は、弱いイベント パターンにリスナーを追加するには、他のクラスを有効にする、マネージャー クラスで静的メソッドを定義します。 `AddListener`2 つのパラメーターを受け取る必要があります。`source`リスナーが接続されている場所と`listener`インスタンス。 `AddListener`実装では、現在のマネージャーの ProtectedAddListener メソッドを呼び出すし、同じ&2; つのパラメーターを渡します。       ProtectedAddListener を呼び出すリスナーのリストが空だった場合、<xref:System.Windows.WeakEventManager.StartListening%2A>メソッドに固有の仕様を呼び出すを内部的には、<xref:System.Windows.WeakEventManager.StartListening%2A>ポリモーフィズムをオーバーライドします</xref:System.Windows.WeakEventManager.StartListening%2A></xref:System.Windows.WeakEventManager.StartListening%2A>。       ProtectedAddListener では、リスナーを追加すると、単一の内部<xref:System.Windows.WeakEventManager.ListenerList>あたり`source`</xref:System.Windows.WeakEventManager.ListenerList>。 マネージャーの実装にイベント ソースの組み合わせごとのリスナーの&1; つ以上のリストが保持している場合は、ProtectedAddListener を使用しないでください。 代わりに、実装する必要があります作成独自<xref:System.Windows.WeakEventManager.ListenerList>インスタンス、`AddListener`リスナーを該当する一覧に追加する必要があり、イベントは、呼び出すことによって適切なリスナーの一覧に配信する必要があります、<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>イベントの代わりに、<xref:System.Windows.WeakEventManager.DeliverEvent%2A>メソッド</xref:System.Windows.WeakEventManager.DeliverEvent%2A></xref:System.Windows.WeakEventManager.DeliverEventToList%2A></xref:System.Windows.WeakEventManager.ListenerList>。"
  syntax:
    content: protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "リスナーを関連付けるソース。"
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "リッスンしているクラス (実装する必要があります<xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)。"
  overload: System.Windows.WeakEventManager.ProtectedAddListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  id: ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定したソースから、以前に追加されたハンドラーを削除します。"
  syntax:
    content: protected void ProtectedRemoveHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "ハンドラーを削除するソースです。"
    - id: handler
      type: System.Delegate
      description: "削除するデリゲート`source`です。"
  overload: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定されたソースから、以前に追加リスナーを削除します。"
  remarks: "マネージャー クラス内には、このメソッドを呼び出す`RemoveListener`メソッド<xref:System.Windows.WeakEventManager>実装</xref:System.Windows.WeakEventManager>。 `RemoveListener`推奨される名前は、弱いイベント パターンにリスナーを削除するには、他のクラスを有効にする、マネージャー クラスで静的メソッドを定義します。 `RemoveListener`2 つのパラメーターを受け取る必要があります。`source`リスナーを削除すると、場所、および`listener`クラスです。 `RemoveListener`実装では、現在のマネージャーの ProtectedRemoveListener メソッドを呼び出すし、同じ&2; つのパラメーターを渡します。       ProtectedRemoveListener を呼び出す ProtectedRemoveListener への呼び出しは、リスト内の最後のリスナーを削除した場合、<xref:System.Windows.WeakEventManager.StopListening%2A>メソッド、固有の仕様を呼び出すを内部的には、<xref:System.Windows.WeakEventManager.StopListening%2A>ポリモーフィズムをオーバーライドします</xref:System.Windows.WeakEventManager.StopListening%2A></xref:System.Windows.WeakEventManager.StopListening%2A>。       ProtectedRemoveListener が&1; つの内部からのリスナーを削除<xref:System.Windows.WeakEventManager.ListenerList>あたり`source`</xref:System.Windows.WeakEventManager.ListenerList>。 マネージャーの実装にイベント ソースの組み合わせごとのリスナーの&1; つ以上のリストが保持している場合は、ProtectedRemoveListener を使用しないでください。 代わりに、実装する必要があります作成独自<xref:System.Windows.WeakEventManager.ListenerList>インスタンス、 `RemoveListener` 、該当する一覧からのリスナーを削除する必要があり、イベントは、呼び出すことによって適切なリスナーの一覧に配信する必要があります、<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>メソッドの代わりに、<xref:System.Windows.WeakEventManager.DeliverEvent%2A>メソッド</xref:System.Windows.WeakEventManager.DeliverEvent%2A></xref:System.Windows.WeakEventManager.DeliverEventToList%2A></xref:System.Windows.WeakEventManager.ListenerList>。"
  syntax:
    content: protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "リスナーを削除するソースです。"
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "リッスンしているクラス (実装する必要があります<xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)。"
  overload: System.Windows.WeakEventManager.ProtectedRemoveListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  id: Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定されたソースのデータの一覧から非アクティブなリスナー エントリを削除します。 返します<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>いくつかのエントリが実際には、一覧から削除された場合。"
  remarks: "Purge メソッドはデータが<xref:System.Windows.WeakEventManager.ListenerList>。</xref:System.Windows.WeakEventManager.ListenerList>ときにすべてのエントリを削除する既定の実装"
  syntax:
    content: protected virtual bool Purge (object source, object data, bool purgeAll);
    parameters:
    - id: source
      type: System.Object
      description: "リッスンされているイベントのソース。"
    - id: data
      type: System.Object
      description: "チェックするデータ。 このオブジェクトができると予想される、<xref:System.Windows.WeakEventManager.ListenerList>実装</xref:System.Windows.WeakEventManager.ListenerList>。"
    - id: purgeAll
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>待機を停止する`source`からすべてのエントリを完全に削除`data`です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>いくつかのエントリが実際に削除された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.WeakEventManager.Purge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ReadLock
  id: ReadLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "基になるデータ テーブルに読み取りロックを確立し、 <xref:System.IDisposable>。</xref:System.IDisposable>を返します"
  remarks: "派生クラスでクエリに含まれるテーブル<xref:System.Windows.WeakEventManager.Item%2A>内で常に実行する必要があります、`using (ReadLock) { ... }`書き込みロック内では、既にクエリを除くの句</xref:System.Windows.WeakEventManager.Item%2A>。 これらのクエリは、クラスがより高度なサポートされている場合に必要な可能性があります`AddListener`を超える複数のデータを必要とする実装、`source`と`listener`を使用して、<xref:System.Windows.WeakEventManager.Item%2A>余分な情報を格納するコレクション</xref:System.Windows.WeakEventManager.Item%2A>。"
  syntax:
    content: protected IDisposable ReadLock { get; }
    return:
      type: System.IDisposable
      description: "テーブルのデータ メンバーのロックを確立しで破棄適切に使用できるオブジェクト、 <xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;> </xref>を構築します。"
  overload: System.Windows.WeakEventManager.ReadLock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定されたソースのすべてのリスナーを削除します。"
  syntax:
    content: protected void Remove (object source);
    parameters:
    - id: source
      type: System.Object
      description: "情報をリスナーを削除するソース。"
  overload: System.Windows.WeakEventManager.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  id: ScheduleCleanup
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "要求の優先度の低いスレッドで、基になるリスナー リスト内の未使用のエントリの消去を実行することです。"
  remarks: "呼び出しに似ていますが、ScheduleCleanup メソッドを呼び出すと、<xref:System.Windows.WeakEventManager.Purge%2A>現在マネージャーの一覧で、スレッドの優先順位の低い、メソッドで、`purgeAll`パラメーターに設定`false`</xref:System.Windows.WeakEventManager.Purge%2A>。"
  syntax:
    content: protected void ScheduleCleanup ();
    parameters: []
  overload: System.Windows.WeakEventManager.ScheduleCleanup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  id: SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "指定したマネージャーの種類の現在のマネージャーを設定します。"
  remarks: "呼び出しに必要な場合は、マネージャーは、初期化 SetCurrentManager メソッドを呼び出して、`CurrentManager`プロパティを<xref:System.Windows.WeakEventManager>実装</xref:System.Windows.WeakEventManager>。"
  syntax:
    content: protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);
    parameters:
    - id: managerType
      type: System.Type
      description: "新しいイベント マネージャーを設定する型。"
    - id: manager
      type: System.Windows.WeakEventManager
      description: "新しいイベント マネージャー。"
  overload: System.Windows.WeakEventManager.SetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "派生クラスでオーバーライドされると、管理対象のイベントのリッスンを開始します。 マネージャーが、呼び出し元の状態にする必要があります StartListening メソッドが最初に呼び出された後<> *> または<> *> 指定されたソースから関連するイベントを処理するたびにします。"
  syntax:
    content: protected abstract void StartListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "リッスンを開始するソース。"
  overload: System.Windows.WeakEventManager.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "派生クラスでオーバーライドされると、指定されたソース管理されているイベントのリッスンを停止します。"
  syntax:
    content: protected abstract void StopListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "リッスンを停止するソース。"
  overload: System.Windows.WeakEventManager.StopListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.WriteLock
  id: WriteLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "基になるデータ テーブルに対して書き込みロックを確立し、<xref:System.IDisposable>。</xref:System.IDisposable>を返します"
  remarks: "派生クラスでは行った変更はすべて、基になるデータ テーブル内で発生する必要があります、`using (WriteLock) { ... }`句。 これらの変更は、クラスがより高度なサポートされている場合に必要な可能性があります`AddListener`を超える複数のデータを必要とする実装、`source`と`listener`を使用して、<xref:System.Windows.WeakEventManager.Item%2A>余分な情報を格納するコレクション</xref:System.Windows.WeakEventManager.Item%2A>。"
  syntax:
    content: protected IDisposable WriteLock { get; }
    return:
      type: System.IDisposable
      description: "テーブルのデータ メンバーのロックを確立しで破棄適切に使用できるオブジェクト、 <xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;> </xref>を構築します。"
  overload: System.Windows.WeakEventManager.WriteLock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.Windows.WeakEventManager.#ctor
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
- uid: System.Windows.WeakEventManager.ListenerList
  parent: System.Windows
  isExternal: false
  name: WeakEventManager+ListenerList
  nameWithType: WeakEventManager+ListenerList
  fullName: System.Windows.WeakEventManager+ListenerList
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
- uid: System.Windows.WeakEventManager
  parent: System.Windows
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.WeakEventManager.Item(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
- uid: System.Windows.WeakEventManager.NewListenerList
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
- uid: System.Windows.IWeakEventListener
  parent: System.Windows
  isExternal: false
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.WeakEventManager.ReadLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
- uid: System.Windows.WeakEventManager.WriteLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
- uid: System.Windows.WeakEventManager.#ctor*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager.WeakEventManager
- uid: System.Windows.WeakEventManager.DeliverEvent*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent
  nameWithType: WeakEventManager.DeliverEvent
- uid: System.Windows.WeakEventManager.DeliverEventToList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList
  nameWithType: WeakEventManager.DeliverEventToList
- uid: System.Windows.WeakEventManager.GetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager
  nameWithType: WeakEventManager.GetCurrentManager
- uid: System.Windows.WeakEventManager.Item*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item
  nameWithType: WeakEventManager.Item
- uid: System.Windows.WeakEventManager.NewListenerList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList
  nameWithType: WeakEventManager.NewListenerList
- uid: System.Windows.WeakEventManager.ProtectedAddHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler
  nameWithType: WeakEventManager.ProtectedAddHandler
- uid: System.Windows.WeakEventManager.ProtectedAddListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener
  nameWithType: WeakEventManager.ProtectedAddListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler
  nameWithType: WeakEventManager.ProtectedRemoveHandler
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener
  nameWithType: WeakEventManager.ProtectedRemoveListener
- uid: System.Windows.WeakEventManager.Purge*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge
  nameWithType: WeakEventManager.Purge
- uid: System.Windows.WeakEventManager.ReadLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
- uid: System.Windows.WeakEventManager.Remove*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove
  nameWithType: WeakEventManager.Remove
- uid: System.Windows.WeakEventManager.ScheduleCleanup*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup
  nameWithType: WeakEventManager.ScheduleCleanup
- uid: System.Windows.WeakEventManager.SetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager
  nameWithType: WeakEventManager.SetCurrentManager
- uid: System.Windows.WeakEventManager.StartListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening
  nameWithType: WeakEventManager.StartListening
- uid: System.Windows.WeakEventManager.StopListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening
  nameWithType: WeakEventManager.StopListening
- uid: System.Windows.WeakEventManager.WriteLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
