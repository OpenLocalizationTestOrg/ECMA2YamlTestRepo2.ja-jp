### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.ICustomMarshaler
  id: ICustomMarshaler
  children:
  - System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  - System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  - System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  - System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  - System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  langs:
  - csharp
  name: ICustomMarshaler
  nameWithType: ICustomMarshaler
  fullName: System.Runtime.InteropServices.ICustomMarshaler
  type: Interface
  summary: "メソッドの呼び出しを処理するためのカスタム ラッパーを提供します。"
  remarks: "マーシャラーは、従来の機能と新しいインターフェイス間のブリッジを提供します。 次の利点は、カスタム マーシャ リング:-これにより、古いも新しいインターフェイスを実装しているサーバーを使用するインターフェイスを使用するように設計されたクライアント アプリケーション。      -これは、古いインターフェイスを実装しているサーバーを使用するクライアント アプリケーションの新しいインターフェイスを使用するビルドを使用できます。       マーシャ リング動作の違いを導入するか、コンポーネント オブジェクト モデル (COM) を別の方法で公開されるインターフェイスがある場合は、相互運用マーシャラーを使用する代わりに、カスタム マーシャラーを設計することができます。 カスタム マーシャラーを使用すると、.NET Framework コンポーネントを新規と既存の COM コンポーネントの違いを最小限に抑えることができます。       たとえばと呼ばれる管理対象のインターフェイスを開発している`INew`です。 このインターフェイスは、標準の COM 呼び出し可能ラッパー (CCW) を介して COM に公開される、ときに同じメソッドは、マネージ インターフェイスとし、相互運用マーシャラーに組み込まれているマーシャ リング規則を使用します。 たとえば、既知の COM インターフェイスが呼び出されること`IOld`と同じ機能が既に提供されて、`INew`インターフェイスです。 カスタム マーシャラーを設計することでは、アンマネージ実装を提供できる`IOld`のマネージ実装への呼び出しを代行する、`INew`インターフェイスです。 したがって、カスタム マーシャラーは、マネージ コードとアンマネージ インターフェイス間の仲介役として機能します。      > [!NOTE] > マネージ ディスパッチ専用インターフェイスでアンマネージ コードにコードをから呼び出すときに、カスタム マーシャラーは呼び出されません。      ## 定義すると、マーシャ リング型の前に、カスタム マーシャラーをビルドすることができます、マーシャ リングは、マネージ コードとアンマネージ インターフェイスを定義する必要があります。 これらのインターフェイスは、よく同じ機能を実行がマネージ コードとアンマネージ オブジェクトに異なる方法で公開されます。       マネージ コンパイラは、メタデータからマネージ インターフェイスを生成し、結果として得られるインターフェイスは他のマネージ インターフェイスのようになります。 次の例では、代表的なインターフェイスを示します。       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb) ]アンマネージ型のインターフェイス定義言語 (IDL) を定義して、Microsoft インターフェイス定義言語 (MIDL) コンパイラでコンパイルします。     ライブラリ ステートメント内のインターフェイスを定義し、それを割り当てますユニバーサル一意識別子 (UUID) 属性を持つインターフェイス ID を次の例に示します。      ```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```MIDL コンパイラでは、いくつかの出力ファイルを生成します。 出力ファイル Old_i.c 定義、インターフェイスが Old.idl で定義されている場合、`const`次の例で示すように、インターフェイスのインターフェイス id (IID) 変数です。      ```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```Old.h ファイルも、MIDL によって生成されます。 C++ ソース コードに含めることができるインターフェイスの C++ の定義が含まれています。      ## ICustomMarshaler インターフェイス、カスタム マーシャラーの実装と、ランタイムに適切なラッパーを提供する ICustomMarshaler インターフェイスを実装する必要があります。       次の c# コードでは、すべてのカスタム マーシャラーで実装する必要がある基本インターフェイスを表示します。       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb) ] ICustomMarshaler インターフェイスには、換算のサポート、クリーンアップのサポート、およびマーシャ リングするデータに関する情報を提供するメソッドが含まれています。          |操作の種類 |ICustomMarshaler メソッド |説明 |  |-----------------------|-----------------------------|-----------------|  |変換 (ネイティブ コードからマネージ コードへ) |<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|マネージ オブジェクトにネイティブ データへのポインターをマーシャ リングします</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>。 このメソッドは、引数として渡されるアンマネージ インターフェイスをマーシャ リングできるカスタム ランタイム呼び出し可能ラッパー (RCW) を返します。 マーシャラーは、カスタム RCW をその型のインスタンスを返す必要があります |。  |変換 (マネージ コードからネイティブ コード) |<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|ネイティブ データへのポインターにマネージ オブジェクトをマーシャ リングします</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>。 このメソッドは、カスタム COM 呼び出し可能ラッパー (CCW) を引数として渡されるマネージ インターフェイスをマーシャ リングできるを返します。 マーシャラーは、その型のカスタムの CCW のインスタンスを返す必要があります |。  |ネイティブ コードのクリーンアップ |<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>メソッドによって返されるネイティブのデータ (CCW) をクリーンアップするマーシャラーを有効にします |。  |マネージ コードのクリーンアップ |<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>メソッドによって返される管理対象のデータ (RCW) をクリーンアップするマーシャラーを有効にします |。  |(ネイティブ コード) に関する情報 |<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|マーシャ リングされるアンマネージ データのサイズを返します |。     ### 変換<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName>マネージ オブジェクトにネイティブ データへのポインターをマーシャ リングします</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A></xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A></xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A></xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A></xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>。 このメソッドは、引数として渡されるアンマネージ インターフェイスをマーシャ リングできるカスタム ランタイム呼び出し可能ラッパー (RCW) を返します。 マーシャラーは、その型のカスタム RCW のインスタンスを返す必要があります。       <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName>ネイティブ データへのポインターにマネージ オブジェクトをマーシャ リングします。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName> このメソッドは、カスタム COM 呼び出し可能ラッパー (CCW) を引数として渡されるマネージ インターフェイスをマーシャ リングできるを返します。 マーシャラーは、その型のカスタムの CCW のインスタンスを返す必要があります。      ### クリーンアップ<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName>、マーシャラーによって返されるネイティブのデータ (CCW) をクリーンアップできるように、<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>メソッド</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A></xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName>。       <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName>使用すると、マネージ データ (RCW) によって返されるをクリーンアップするマーシャラー、<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>メソッド</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>。</xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName>      ### サイズ情報を<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName>マーシャ リングされるアンマネージ データのサイズを返します</xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName>。      ## ICustomMarshaler インターフェイスを実装するだけでなく GetInstance メソッドを実装するカスタム マーシャラーを実装する必要があります、`static`呼び出されるメソッド`GetInstance`を受け入れる、<xref:System.String>をパラメーターとして ICustomMarshaler の戻り値の型を持つ</xref:System.String>。 これは、`static`メソッドは、カスタム マーシャラーのインスタンスをインスタンス化する共通言語ランタイムの COM 相互運用層によって呼び出されます。 渡される文字列`GetInstance`メソッドが返されるカスタム マーシャラーのカスタマイズに使用できる cookie は、します。      ```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```## MarshalAsAttribute を適用する、カスタム マーシャラーを使用して、適用する必要があります、<xref:System.Runtime.InteropServices.MarshalAsAttribute>属性をパラメーターまたはマーシャ リングされるフィールド</xref:System.Runtime.InteropServices.MarshalAsAttribute>。       渡す必要があります、<xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>列挙体の値、<xref:System.Runtime.InteropServices.MarshalAsAttribute>コンス トラクター</xref:System.Runtime.InteropServices.MarshalAsAttribute> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> 。 さらに、指定する必要があります、<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>フィールドに名前付きパラメーターが次のいずれか:- <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>(必須): カスタム マーシャラーのアセンブリ修飾名</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType></xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>。 名前には、名前空間とカスタム マーシャラーのクラスを含める必要があります。 カスタム マーシャラーがで使用されているアセンブリで定義されていない場合が定義されているアセンブリの名前を指定する必要があります。          > [!NOTE] > を使用することができます、<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>の代わりにフィールド、<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>フィールド</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType></xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>。 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>型を受け取り、指定する方が簡単です。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>      - <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie>(省略可能): カスタム マーシャラーに渡される cookie</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> 。 Cookie を使用するには、マーシャラーに追加情報を提供します。 たとえば、同じマーシャラーを介してラッパーの番号を指定する場合に、cookie は、特定のラッパーを識別します。 渡される cookie、`GetInstance`マーシャラーのメソッドです。       <xref:System.Runtime.InteropServices.MarshalAsAttribute>属性が、適切なラッパーをアクティブ化することができますので、カスタム マーシャラーを識別します</xref:System.Runtime.InteropServices.MarshalAsAttribute>。 共通言語ランタイムの相互運用機能のサービスは、属性を検査し、カスタム マーシャラー最初の時間をマーシャ リングする引数 (パラメーターやフィールド) のニーズを作成します。       ランタイムが呼び出すし、<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>と<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>メソッドの呼び出しを処理する、正しいラッパーをアクティブ化するカスタム マーシャラーを</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A></xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>。      ## 使用して、カスタム マーシャラー カスタム マーシャラーが完了すると、特定の種類のカスタム ラッパーとして使用できます。 次の例は、定義を示しています、`IUserData`マネージ インターフェイス: [!code-cpp [System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb) ]次の例で、`IUserData`インターフェイスの使用、`NewOldMarshaler`をアンマネージ クライアント アプリケーションに渡すを有効にするカスタム マーシャラー、`IOld`へのインターフェイス、`DoSomeStuff`メソッドです。     管理対象の説明、`DoSomeStuff`メソッドは、`INew`一方、前の例で示すように、インターフェイスのアンマネージ バージョン`DoSomeStuff`受け取り、`IOld`インターフェイス ポインター、次の例で示すようにします。      ```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```マネージ定義をエクスポートすることによって生成されるタイプ ライブラリ`IUserData`標準の定義ではなく、この例に示すアンマネージ定義を生成します。 <xref:System.Runtime.InteropServices.MarshalAsAttribute>に適用された属性、`INew`のマネージ定義の引数、`DoSomeStuff`メソッド引数が次の例のように、カスタム マーシャラーを使用することを示します</xref:System.Runtime.InteropServices.MarshalAsAttribute>。       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)][!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb) ]に前の例で、最初のパラメーターが提供される、<xref:System.Runtime.InteropServices.MarshalAsAttribute>属性は、<xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>列挙値`UnmanagedType.CustomMarshaler`</xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName></xref:System.Runtime.InteropServices.MarshalAsAttribute>。                      2 番目のパラメーターは、<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>フィールドには、カスタム マーシャラーのアセンブリ修飾名を提供します</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>。 この名前は、名前空間とカスタム マーシャラーのクラス (`MarshalType=&quot;MyCompany.NewOldMarshaler&quot;`)。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ICustomMarshaler
  implements: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  id: CleanUpManagedData(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: CleanUpManagedData(Object)
  nameWithType: ICustomMarshaler.CleanUpManagedData(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "不要になったときに、管理対象のデータの必要なクリーンアップを実行します。"
  syntax:
    content: public void CleanUpManagedData (object ManagedObj);
    parameters:
    - id: ManagedObj
      type: System.Object
      description: "マネージ オブジェクトを破棄します。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  id: CleanUpNativeData(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: CleanUpNativeData(IntPtr)
  nameWithType: ICustomMarshaler.CleanUpNativeData(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "不要になったときに、アンマネージ データの必要なクリーンアップを実行します。"
  syntax:
    content: public void CleanUpNativeData (IntPtr pNativeData);
    parameters:
    - id: pNativeData
      type: System.IntPtr
      description: "破棄するアンマネージ データへのポインター。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  id: GetNativeDataSize
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: GetNativeDataSize()
  nameWithType: ICustomMarshaler.GetNativeDataSize()
  fullName: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "マーシャ リングするネイティブのデータのサイズを返します。"
  syntax:
    content: public int GetNativeDataSize ();
    parameters: []
    return:
      type: System.Int32
      description: "ネイティブ データのバイト単位のサイズ。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  id: MarshalManagedToNative(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: MarshalManagedToNative(Object)
  nameWithType: ICustomMarshaler.MarshalManagedToNative(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "管理対象のデータをアンマネージ データに変換します。"
  syntax:
    content: public IntPtr MarshalManagedToNative (object ManagedObj);
    parameters:
    - id: ManagedObj
      type: System.Object
      description: "変換するマネージ オブジェクト。"
    return:
      type: System.IntPtr
      description: "マネージ オブジェクトの COM のビューへのポインター。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  id: MarshalNativeToManaged(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: MarshalNativeToManaged(IntPtr)
  nameWithType: ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "アンマネージ データを管理対象のデータに変換します。"
  syntax:
    content: public object MarshalNativeToManaged (IntPtr pNativeData);
    parameters:
    - id: pNativeData
      type: System.IntPtr
      description: "ラップされるアンマネージ データへのポインター。"
    return:
      type: System.Object
      description: "COM のデータのマネージ ビューを表すオブジェクト。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpManagedData(Object)
  nameWithType: ICustomMarshaler.CleanUpManagedData(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpNativeData(IntPtr)
  nameWithType: ICustomMarshaler.CleanUpNativeData(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: GetNativeDataSize()
  nameWithType: ICustomMarshaler.GetNativeDataSize()
  fullName: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalManagedToNative(Object)
  nameWithType: ICustomMarshaler.MarshalManagedToNative(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(Object)
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalNativeToManaged(IntPtr)
  nameWithType: ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(IntPtr)
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpManagedData
  nameWithType: ICustomMarshaler.CleanUpManagedData
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpNativeData
  nameWithType: ICustomMarshaler.CleanUpNativeData
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: GetNativeDataSize
  nameWithType: ICustomMarshaler.GetNativeDataSize
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalManagedToNative
  nameWithType: ICustomMarshaler.MarshalManagedToNative
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalNativeToManaged
  nameWithType: ICustomMarshaler.MarshalNativeToManaged
