### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CryptoAPITransform
  id: CryptoAPITransform
  children:
  - System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  - System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  - System.Security.Cryptography.CryptoAPITransform.Clear
  - System.Security.Cryptography.CryptoAPITransform.Dispose
  - System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  - System.Security.Cryptography.CryptoAPITransform.KeyHandle
  - System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  - System.Security.Cryptography.CryptoAPITransform.Reset
  - System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: CryptoAPITransform
  nameWithType: CryptoAPITransform
  fullName: System.Security.Cryptography.CryptoAPITransform
  type: Class
  summary: "データの暗号変換を実行します。 このクラスは継承できません。"
  remarks: ''
  example:
  - "The following code example demonstrates how to use members of the CryptoAPITransform class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/csharp/t-system.security.crypto_128_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/visualbasic/t-system.security.crypto_128_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/cpp/t-system.security.crypto_128_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CryptoAPITransform : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: CryptoAPITransform.CanReuseTransform
  fullName: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在の変換を再利用できるかどうかを示す値を取得します。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the CanReuseTransform property to determine if the current transform can be reused. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/csharp/p-system.security.crypto_33_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/visualbasic/p-system.security.crypto_33_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/cpp/p-system.security.crypto_33_1.cpp)]"
  syntax:
    content: public bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "複数のブロックを変換できるかどうかを示す値を取得します。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the CanTransformMultipleBlocks property to determine if multiple blocks can be transformed. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/csharp/p-system.security.crypto_68_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/visualbasic/p-system.security.crypto_68_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/cpp/p-system.security.crypto_68_1.cpp)]"
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>複数のブロックを変換できる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.Clear
  id: Clear
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: Clear()
  nameWithType: CryptoAPITransform.Clear()
  fullName: System.Security.Cryptography.CryptoAPITransform.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Cryptography.CryptoAPITransform&quot;> </xref>メソッドです。"
  remarks: "このメソッドは、単純な<xref:System.IDisposable.Dispose%2A?displayProperty=fullName>。</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       呼び出す`Dispose`により、リソースで使用される、<xref:System.Security.Cryptography.CryptoAPITransform>を他の目的を再割り当てする</xref:System.Security.Cryptography.CryptoAPITransform>。 詳細については`Dispose`を参照してください[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to call the Clear method to release the resources used by the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/csharp/m-system.security.crypto_94_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/visualbasic/m-system.security.crypto_94_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/cpp/m-system.security.crypto_94_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.CryptoAPITransform.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.Dispose
  id: Dispose
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: Dispose()
  nameWithType: CryptoAPITransform.Dispose()
  fullName: System.Security.Cryptography.CryptoAPITransform.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在のインスタンスによって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Cryptography.CryptoAPITransform&quot;> </xref>クラスです。"
  remarks: "呼び出す`Dispose` <xref:System.Security.Cryptography.CryptoAPITransform>.</xref:System.Security.Cryptography.CryptoAPITransform>の使用が終了したときに `Dispose`メソッドによって、<xref:System.Security.Cryptography.CryptoAPITransform>使用不可の状態</xref:System.Security.Cryptography.CryptoAPITransform>。 呼び出した後`Dispose`へのすべての参照を解放する必要があります、<xref:System.Security.Cryptography.CryptoAPITransform>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Security.Cryptography.CryptoAPITransform>占有されていた</xref:System.Security.Cryptography.CryptoAPITransform></xref:System.Security.Cryptography.CryptoAPITransform>。       詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 常に呼び出し`Dispose`<xref:System.Security.Cryptography.CryptoAPITransform></xref:System.Security.Cryptography.CryptoAPITransform>の最後の参照を解放する前に。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Security.Cryptography.CryptoAPITransform>オブジェクトの`Finalize`メソッド</xref:System.Security.Cryptography.CryptoAPITransform>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.CryptoAPITransform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: CryptoAPITransform.InputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "入力ブロック サイズを取得します。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the InputBlockSize property to retrieve the input block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/csharp/p-system.security.crypto_98_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/visualbasic/p-system.security.crypto_98_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/cpp/p-system.security.crypto_98_1.cpp)]"
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "入力ブロック サイズ (バイト単位)。"
  overload: System.Security.Cryptography.CryptoAPITransform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle
  id: KeyHandle
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: KeyHandle
  nameWithType: CryptoAPITransform.KeyHandle
  fullName: System.Security.Cryptography.CryptoAPITransform.KeyHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "キーのハンドルを取得します。"
  syntax:
    content: public IntPtr KeyHandle { get; }
    return:
      type: System.IntPtr
      description: "キーのハンドルです。"
  overload: System.Security.Cryptography.CryptoAPITransform.KeyHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: CryptoAPITransform.OutputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "出力ブロック サイズを取得します。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the OutputBlockSize property to retrieve the output block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/csharp/p-system.security.crypto_55_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/visualbasic/p-system.security.crypto_55_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/cpp/p-system.security.crypto_55_1.cpp)]"
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "出力ブロック サイズ (バイト単位)。"
  overload: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.Reset
  id: Reset
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: Reset()
  nameWithType: CryptoAPITransform.Reset()
  fullName: System.Security.Cryptography.CryptoAPITransform.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "内部状態をリセット<xref href=&quot;System.Security.Cryptography.CryptoAPITransform&quot;></xref>を別の暗号化または復号化を行うには再度使用できるようにします。"
  remarks: "Reset メソッドは、TransformFinalBlock を呼び出すときに自動的に呼び出されます。 `Reset`と、たとえば、暗号化された入力データは、ガベージ復号化することはできませんが、メソッドは呼び出されません。 この場合、例外をスローし、`Reset`は呼び出されません。 手動で呼び出すことができます、`Reset`ここではメソッドです。"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Cryptography.CryptoAPITransform.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "入力バイト配列の指定した領域の変換を計算し、その結果の変換を出力バイト配列の指定した領域にコピーします。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the TransformBlock method to transform the bytes from `currentPosition` in the `sourceBytes` array, writing the bytes to the `targetBytes` array. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/csharp/cb78acec-9bf8-4488-8243-_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/visualbasic/cb78acec-9bf8-4488-8243-_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/cpp/cb78acec-9bf8-4488-8243-_1.cpp)]"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "操作の実行を入力します。"
    - id: inputOffset
      type: System.Int32
      description: "データの使用を開始位置を示す入力バイト配列へのオフセット。"
    - id: inputCount
      type: System.Int32
      description: "データとして使用する入力バイト配列内のバイト数。"
    - id: outputBuffer
      type: System.Byte[]
      description: "データを書き込む先の出力。"
    - id: outputOffset
      type: System.Int32
      description: "データの書き込み開始位置を示す出力バイト配列へのオフセット。"
    return:
      type: System.Int32
      description: "書き込まれたバイト数。"
  overload: System.Security.Cryptography.CryptoAPITransform.TransformBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>outputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "入力バッファーの長さは、入力のオフセット、および入力の数の合計よりも小さいです。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>inputOffset</code>範囲外です。 このパラメーターには、負でない値が必要です。"
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定したバイト配列の指定した領域の変換を計算します。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the TransformFinalBlock method to transform the final block of bytes. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/csharp/58c95bd3-abbd-4afc-91d8-_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/visualbasic/58c95bd3-abbd-4afc-91d8-_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/cpp/58c95bd3-abbd-4afc-91d8-_1.cpp)]"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "操作の実行を入力します。"
    - id: inputOffset
      type: System.Int32
      description: "データの使用を開始するバイト配列へのオフセット。"
    - id: inputCount
      type: System.Int32
      description: "データとして使用するバイト配列内のバイト数。"
    return:
      type: System.Byte[]
      description: "計算に変換します。"
  overload: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> inputOffset </code>パラメーターが&0; 未満です。       - または -、 <code> inputCount </code>パラメーターが&0; 未満です。       または、入力バッファーの長さは、入力のオフセット、および入力の数の合計より小さい。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<xref href=&quot;System.Security.Cryptography.PaddingMode&quot;> </xref>埋め込みが有効ではありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> inputOffset </code>パラメーターが範囲外です。 このパラメーターには、負でない値が必要です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: CryptoAPITransform.CanReuseTransform
  fullName: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.CryptoAPITransform.Clear
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Clear()
  nameWithType: CryptoAPITransform.Clear()
  fullName: System.Security.Cryptography.CryptoAPITransform.Clear()
- uid: System.Security.Cryptography.CryptoAPITransform.Dispose
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Dispose()
  nameWithType: CryptoAPITransform.Dispose()
  fullName: System.Security.Cryptography.CryptoAPITransform.Dispose()
- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: InputBlockSize
  nameWithType: CryptoAPITransform.InputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: KeyHandle
  nameWithType: CryptoAPITransform.KeyHandle
  fullName: System.Security.Cryptography.CryptoAPITransform.KeyHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: CryptoAPITransform.OutputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
- uid: System.Security.Cryptography.CryptoAPITransform.Reset
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Reset()
  nameWithType: CryptoAPITransform.Reset()
  fullName: System.Security.Cryptography.CryptoAPITransform.Reset()
- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: CryptoAPITransform.CanReuseTransform
- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.CryptoAPITransform.Clear*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Clear
  nameWithType: CryptoAPITransform.Clear
- uid: System.Security.Cryptography.CryptoAPITransform.Dispose*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Dispose
  nameWithType: CryptoAPITransform.Dispose
- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: InputBlockSize
  nameWithType: CryptoAPITransform.InputBlockSize
- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: KeyHandle
  nameWithType: CryptoAPITransform.KeyHandle
- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: CryptoAPITransform.OutputBlockSize
- uid: System.Security.Cryptography.CryptoAPITransform.Reset*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Reset
  nameWithType: CryptoAPITransform.Reset
- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformBlock
  nameWithType: CryptoAPITransform.TransformBlock
- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: CryptoAPITransform.TransformFinalBlock
