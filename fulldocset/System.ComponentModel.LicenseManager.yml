### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseManager
  id: LicenseManager
  children:
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  - System.ComponentModel.LicenseManager.CurrentContext
  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  - System.ComponentModel.LicenseManager.LockContext(System.Object)
  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  - System.ComponentModel.LicenseManager.UsageMode
  - System.ComponentModel.LicenseManager.Validate(System.Type)
  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  langs:
  - csharp
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: System.ComponentModel.LicenseManager
  type: Class
  summary: "プロパティとメソッドをコンポーネントにライセンスを追加して管理を提供する<xref href=&quot;System.ComponentModel.LicenseProvider&quot;></xref>です。 このクラスは継承できません。"
  remarks: "LicenseManager クラスは、次を提供`static`プロパティ: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> <xref:System.ComponentModel.LicenseManager.UsageMode%2A></xref:System.ComponentModel.LicenseManager.UsageMode%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> 。 クラスは、以下も用意されています`static`メソッド: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>、 <xref:System.ComponentModel.LicenseManager.IsValid%2A>、 <xref:System.ComponentModel.LicenseManager.Validate%2A>。</xref:System.ComponentModel.LicenseManager.Validate%2A> </xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> 。       ライセンスを取得する対象となるコンポーネントを作成するときに、次を実行する必要があります: 1。  <xref:System.ComponentModel.LicenseProvider> <xref:System.ComponentModel.LicenseProviderAttribute>。</xref:System.ComponentModel.LicenseProviderAttribute>コンポーネントをマークすることによって</xref:System.ComponentModel.LicenseProvider>指定します。      2.  呼び出す<xref:System.ComponentModel.LicenseManager.Validate%2A>または<xref:System.ComponentModel.LicenseManager.IsValid%2A>コンポーネントのコンス トラクター</xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.Validate%2A> 。 <xref:System.ComponentModel.LicenseManager.Validate%2A>スロー、<xref:System.ComponentModel.LicenseException>有効なライセンスがなくてもインスタンスを作成しようとします</xref:System.ComponentModel.LicenseException>。</xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.IsValid%2A>例外はスローされません。</xref:System.ComponentModel.LicenseManager.IsValid%2A>      3.  呼び出す<xref:System.ComponentModel.License.Dispose%2A>コンポーネントが破棄または終了時に付与されているすべてのライセンス</xref:System.ComponentModel.License.Dispose%2A>。       ライセンスの詳細については、次を参照してください。[する方法: ライセンス コンポーネントやコントロール](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._63_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._63_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._63_1.cpp)]"
  syntax:
    content: public sealed class LicenseManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "ライセンス付きのインスタンスを使用できるコンテキストを指定指定した型のインスタンスを作成します。"
  remarks: "<xref:System.ComponentModel.LicenseContext>として指定する、`creationContext`パラメーターは、<xref:System.ComponentModel.LicenseManager.CurrentContext%2A>この<xref:System.ComponentModel.License>.</xref:System.ComponentModel.License>の有効期間</xref:System.ComponentModel.LicenseManager.CurrentContext%2A>として使用</xref:System.ComponentModel.LicenseContext> CreateWithContext メソッドでは、他のすべてのスレッドをブロック単位、<xref:System.AppDomain>変更から、 <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>、アトミックな操作として動作する CreateWithContext を許可します</xref:System.ComponentModel.LicenseManager.CurrentContext%2A></xref:System.AppDomain>。"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);
    parameters:
    - id: type
      type: System.Type
      description: "A<xref:System.Type>を作成する型を表す</xref:System.Type>。"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>ライセンス付きのインスタンスを使用する場合を指定します。"
    return:
      type: System.Object
      description: "指定した型のインスタンス。"
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "ライセンス付きのインスタンスを使用できるコンテキストを指定指定された引数で指定した型のインスタンスを作成します。"
  remarks: "<xref:System.ComponentModel.LicenseContext>として指定する、`creationContext`パラメーターは、<xref:System.ComponentModel.LicenseManager.CurrentContext%2A>この<xref:System.ComponentModel.License>.</xref:System.ComponentModel.License>の有効期間</xref:System.ComponentModel.LicenseManager.CurrentContext%2A>として使用</xref:System.ComponentModel.LicenseContext> このメソッドでは、他のすべてのスレッドをブロック単位、<xref:System.AppDomain>変更から、<xref:System.ComponentModel.LicenseManager.CurrentContext%2A>できるので、<xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>アトミックな操作として動作します</xref:System.ComponentModel.LicenseManager.CreateWithContext%2A></xref:System.ComponentModel.LicenseManager.CurrentContext%2A></xref:System.AppDomain>。"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: "A<xref:System.Type>を作成する型を表す</xref:System.Type>。"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>ライセンス付きのインスタンスを使用する場合を指定します。"
    - id: args
      type: System.Object[]
      description: "型の配列<xref:System.Object>、型の引数を表す</xref:System.Object>。"
    return:
      type: System.Object
      description: "指定した引数の配列の指定した型のインスタンス。"
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CurrentContext
  id: CurrentContext
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "現在の設定を取得または<xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>、ライセンスされたオブジェクトを使用する場合を指定します。"
  remarks: "ユーザーが、有効な要求したとき<xref:System.ComponentModel.License>、ユーザーをコンテキストを指定する必要があります、<xref:System.ComponentModel.License>に有効では、<xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName>メソッド</xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName></xref:System.ComponentModel.License></xref:System.ComponentModel.License>。 <xref:System.ComponentModel.LicenseContext>これによって返されるプロパティをすべて渡す必要がある<xref:System.ComponentModel.LicenseProvider>クラス</xref:System.ComponentModel.LicenseProvider></xref:System.ComponentModel.LicenseContext>。"
  syntax:
    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }
    return:
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>ライセンスされたオブジェクトを使用する場合を指定します。"
  overload: System.ComponentModel.LicenseManager.CurrentContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "CurrentContext プロパティは、現在ロックされているし、変更できません。"
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  id: IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定された型が有効なライセンスを持つかどうかを返します。"
  syntax:
    content: public static bool IsLicensed (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>有効なライセンスのデータ型を検索するには</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定された型がライセンス付き場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.LicenseManager.IsLicensed*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  id: IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型の有効なライセンスを許可できるかどうかを判断します。"
  remarks: "IsValid メソッドを返します`true`型か、ライセンスがない、またはとライセンスがおよび、ライセンスが無効です。       <xref:System.ComponentModel.LicenseException>有効な<xref:System.ComponentModel.License>。</xref:System.ComponentModel.License>を与えることができないときに</xref:System.ComponentModel.LicenseException>このメソッドがスローされません。 <xref:System.ComponentModel.LicenseManager.Validate%2A>メソッドが例外をスローします</xref:System.ComponentModel.LicenseManager.Validate%2A>。"
  syntax:
    content: public static bool IsValid (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A<xref:System.Type>を要求するオブジェクトの型を表す、 <xref href=&quot;System.ComponentModel.License&quot;> </xref></xref:System.Type> 。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、有効なライセンスを与えることができます。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "型の指定したインスタンスの有効なライセンスを与えることがあるかどうかを判断します。 このメソッドは、有効な作成<xref href=&quot;System.ComponentModel.License&quot;></xref>です。"
  remarks: "<xref:System.ComponentModel.LicenseManager.IsValid%2A>メソッドを返します`true`ときに、`type`パラメーターのライセンスがない、またはライセンスされている場合、`license`パラメーターが無効です。</xref:System.ComponentModel.LicenseManager.IsValid%2A> 。       <xref:System.ComponentModel.LicenseException>有効な<xref:System.ComponentModel.License>。</xref:System.ComponentModel.License>を与えることができないときに</xref:System.ComponentModel.LicenseException>このメソッドがスローされません。 <xref:System.ComponentModel.LicenseManager.Validate%2A>メソッドが例外をスローします</xref:System.ComponentModel.LicenseManager.Validate%2A>。       場合、`license`パラメーターではありません`null`を求めるオブジェクトは、この呼び出しの後に、<xref:System.ComponentModel.License>を呼び出してのライセンスを破棄する必要があります、<xref:System.ComponentModel.License.Dispose%2A>メソッド オブジェクトを破棄または終了時</xref:System.ComponentModel.License.Dispose%2A></xref:System.ComponentModel.License>。"
  syntax:
    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>、ライセンスを要求するオブジェクトの型を表す</xref:System.Type>。"
    - id: instance
      type: System.Object
      description: "指定した型または型のオブジェクトは、指定した型から派生します。"
    - id: license
      type: System.ComponentModel.License
      description: "A <xref href=&quot;System.ComponentModel.License&quot;> </xref>は有効なライセンス、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>場合は、有効なライセンスを付与することはできません。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>有効な場合<xref href=&quot;System.ComponentModel.License&quot;></xref>付与されている、それ以外は、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  id: LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "現在に加えられる変更が防止<xref href=&quot;System.ComponentModel.LicenseContext&quot;></xref>の指定したオブジェクト。"
  remarks: "使用して、<xref:System.ComponentModel.LicenseContext>を取得する、<xref:System.ComponentModel.License>オブジェクトの</xref:System.ComponentModel.License></xref:System.ComponentModel.LicenseContext>。 このメソッドはロック、 <xref:System.ComponentModel.LicenseContext>、防止、<xref:System.ComponentModel.License>取得されない</xref:System.ComponentModel.License></xref:System.ComponentModel.LicenseContext>。"
  syntax:
    content: public static void LockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "オブジェクトが現在のコンテキストをロックします。"
  overload: System.ComponentModel.LicenseManager.LockContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "コンテキストは既にロックされています。"
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  id: UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "現在の変更は、 <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>指定したオブジェクトの。"
  remarks: "使用して、<xref:System.ComponentModel.LicenseContext>を取得する、<xref:System.ComponentModel.License>オブジェクトの</xref:System.ComponentModel.License></xref:System.ComponentModel.LicenseContext>。 このメソッドのロックを解除、<xref:System.ComponentModel.LicenseContext>できるので、<xref:System.ComponentModel.License>を取得する</xref:System.ComponentModel.License></xref:System.ComponentModel.LicenseContext>。"
  syntax:
    content: public static void UnlockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "オブジェクトが現在のコンテキストがロックを解除します。"
  overload: System.ComponentModel.LicenseManager.UnlockContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contextUser</code>前の呼び出しで指定されたものの別のユーザーを表す<xref:System.ComponentModel.LicenseManager.LockContext*>です。"
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UsageMode
  id: UsageMode
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "取得、 <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> <xref:System.ComponentModel.LicenseManager.CurrentContext*>.</xref:System.ComponentModel.LicenseManager.CurrentContext*>のライセンス済みのオブジェクトを使用する場合を指定します。"
  remarks: "このプロパティの<xref:System.ComponentModel.LicenseManager.CurrentContext%2A>値、それを返します<xref:System.ComponentModel.LicenseUsageMode>。</xref:System.ComponentModel.LicenseUsageMode></xref:System.ComponentModel.LicenseManager.CurrentContext%2A>が見つけられない場合"
  syntax:
    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }
    return:
      type: System.ComponentModel.LicenseUsageMode
      description: "1 つ、 <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref>で指定された値、<xref:System.ComponentModel.LicenseManager.CurrentContext*>プロパティ</xref:System.ComponentModel.LicenseManager.CurrentContext*>。"
  overload: System.ComponentModel.LicenseManager.UsageMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  id: Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型のライセンスを付与できるかどうかを判断します。"
  remarks: "このメソッドは、<xref:System.ComponentModel.LicenseException>ときに、有効な<xref:System.ComponentModel.License>付与することはできません</xref:System.ComponentModel.License></xref:System.ComponentModel.LicenseException>。 <xref:System.ComponentModel.LicenseManager.IsValid%2A>メソッドが例外をスローしません</xref:System.ComponentModel.LicenseManager.IsValid%2A>。"
  syntax:
    content: public static void Validate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>、ライセンスを要求するオブジェクトの型を表す</xref:System.Type>。"
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "A <xref href=&quot;System.ComponentModel.License&quot;> </xref>付与することはできません。"
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  id: Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定した型のインスタンスのライセンスを与えることがあるかどうかを判断します。"
  remarks: "このメソッドは、<xref:System.ComponentModel.LicenseException>ときに、有効な<xref:System.ComponentModel.License>付与することはできません</xref:System.ComponentModel.License></xref:System.ComponentModel.LicenseException>。 <xref:System.ComponentModel.LicenseManager.IsValid%2A>メソッドが例外をスローしません</xref:System.ComponentModel.LicenseManager.IsValid%2A>。       すべてのオブジェクトを求める、<xref:System.ComponentModel.License>を呼び出してのライセンスを破棄する必要があります、<xref:System.ComponentModel.License.Dispose%2A>メソッド オブジェクトを破棄または終了時</xref:System.ComponentModel.License.Dispose%2A></xref:System.ComponentModel.License>。"
  syntax:
    content: public static System.ComponentModel.License Validate (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>、ライセンスを要求するオブジェクトの型を表す</xref:System.Type>。"
    - id: instance
      type: System.Object
      description: "<xref:System.Object>型または指定した型の指定した型から派生します</xref:System.Object>。"
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "型のライセンスが与えられたが、 <xref href=&quot;System.ComponentModel.License&quot;> </xref>付与することはできません。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.LicenseException
  parent: System.ComponentModel
  isExternal: false
  name: LicenseException
  nameWithType: LicenseException
  fullName: System.ComponentModel.LicenseException
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.LicenseManager.CurrentContext
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
- uid: System.ComponentModel.LicenseManager.UsageMode
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseUsageMode
  parent: System.ComponentModel
  isExternal: false
  name: LicenseUsageMode
  nameWithType: LicenseUsageMode
  fullName: System.ComponentModel.LicenseUsageMode
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
- uid: System.ComponentModel.LicenseManager.CreateWithContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext
  nameWithType: LicenseManager.CreateWithContext
- uid: System.ComponentModel.LicenseManager.CurrentContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed
  nameWithType: LicenseManager.IsLicensed
- uid: System.ComponentModel.LicenseManager.IsValid*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid
  nameWithType: LicenseManager.IsValid
- uid: System.ComponentModel.LicenseManager.LockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext
  nameWithType: LicenseManager.LockContext
- uid: System.ComponentModel.LicenseManager.UnlockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext
  nameWithType: LicenseManager.UnlockContext
- uid: System.ComponentModel.LicenseManager.UsageMode*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseManager.Validate*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate
  nameWithType: LicenseManager.Validate
