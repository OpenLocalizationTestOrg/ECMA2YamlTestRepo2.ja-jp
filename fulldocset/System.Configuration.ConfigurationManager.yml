### YamlMime:ManagedReference
items:
- uid: System.Configuration.ConfigurationManager
  id: ConfigurationManager
  children:
  - System.Configuration.ConfigurationManager.AppSettings
  - System.Configuration.ConfigurationManager.ConnectionStrings
  - System.Configuration.ConfigurationManager.GetSection(System.String)
  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  - System.Configuration.ConfigurationManager.OpenMachineConfiguration
  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  - System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  - System.Configuration.ConfigurationManager.RefreshSection(System.String)
  langs:
  - csharp
  name: ConfigurationManager
  nameWithType: ConfigurationManager
  fullName: System.Configuration.ConfigurationManager
  type: Class
  summary: "クライアント アプリケーションの構成ファイルへのアクセスを提供します。 このクラスは継承できません。"
  remarks: "ConfigurationManager クラスでは、アクセス マシン、アプリケーション、およびユーザーの構成情報にできます。 このクラスが置き換えられます、<xref:System.Configuration.ConfigurationSettings>クラスは推奨されなくなりました</xref:System.Configuration.ConfigurationSettings>。 <xref:System.Web.Configuration.WebConfigurationManager>クラス</xref:System.Web.Configuration.WebConfigurationManager>を使用して、web アプリケーション       ConfigurationManager クラスを使用するプロジェクトを参照する必要があります、`System.Configuration`アセンブリ。 既定では、コンソール アプリケーションと同様に、いくつかのプロジェクト テンプレートはこのアセンブリを参照しないため、手動で参照する必要があります。      > [!NOTE] > アプリケーション構成ファイルの場所と名前は、アプリケーションのホストに依存します。 詳細については、次を参照してください。 [NIB: アプリケーション構成ファイル](http://msdn.microsoft.com/en-us/0d05b1b8-b18b-43d8-bb3c-526ff0c44fe0)です。       組み込みを使用する<xref:System.Configuration>型または構成情報を処理してから派生します</xref:System.Configuration>。 これらの型を使用すると、構成情報を直接操作することができ、カスタム情報を含めるように構成ファイルを拡張することができます。       ConfigurationManager クラスには、次のタスクを実行できるようにするメンバーが含まれています:-構成ファイルからセクションを読み取ります。 構成情報にアクセスするには、呼び出し、<xref:System.Configuration.ConfigurationManager.GetSection%2A>メソッド</xref:System.Configuration.ConfigurationManager.GetSection%2A>。 などのいくつかのセクションの`appSettings`と`connectionStrings`を使用して、<xref:System.Configuration.ConfigurationManager.AppSettings%2A>と<xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A>クラス</xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A></xref:System.Configuration.ConfigurationManager.AppSettings%2A>。 これらのメンバー読み取り専用の操作を実行、構成の&1; つのキャッシュされたインスタンスを使用して、マルチ スレッドに注意してください。      - 読み書き可能な構成ファイル全体です。 アプリケーションでは、読み取りでき、設定の書き込み構成任意のレベルでは、アプリケーション自体や他のアプリケーションまたはコンピューター、ローカルまたはリモートですることができます。 ConfigurationManager クラスによって提供されるメソッドのいずれかを使用して、SampleApp.exe.config などの構成ファイルを開きます。 これらのメソッドが返す、<xref:System.Configuration.Configuration>さらに関連付けられている構成ファイルで作業する使用できるメソッドとプロパティを公開するオブジェクト</xref:System.Configuration.Configuration>。 メソッド読み取りまたは書き込み操作および実行ファイルが書き込まれるたびに、構成データを作成します。      構成タスクをサポートします。 次の種類は、さまざまな構成タスクをサポートするために使用されます:- <xref:System.Configuration.SectionInformation>- <xref:System.Configuration.PropertyInformation>- <xref:System.Configuration.PropertyInformationCollection>- <xref:System.Configuration.ElementInformation>- <xref:System.Configuration.ContextInformation>- <xref:System.Configuration.ConfigurationSectionGroup>-<xref:System.Configuration.ConfigurationSectionGroupCollection>既存の構成情報を使用するだけでなく作成およびなど、組み込みの構成の種類を拡張して、カスタム構成要素と作業、 <xref:System.Configuration.ConfigurationElement>、 <xref:System.Configuration.ConfigurationElementCollection>、 <xref:System.Configuration.ConfigurationProperty>、および<xref:System.Configuration.ConfigurationSection>クラス</xref:System.Configuration.ConfigurationSection></xref:System.Configuration.ConfigurationProperty></xref:System.Configuration.ConfigurationElementCollection></xref:System.Configuration.ConfigurationElement></xref:System.Configuration.ConfigurationSectionGroupCollection></xref:System.Configuration.ConfigurationSectionGroup></xref:System.Configuration.ContextInformation></xref:System.Configuration.ElementInformation></xref:System.Configuration.PropertyInformationCollection></xref:System.Configuration.PropertyInformation></xref:System.Configuration.SectionInformation>。 組み込みの構成の種類をプログラムによって拡張する方法の例は、 <xref:System.Configuration.ConfigurationSection>。</xref:System.Configuration.ConfigurationSection>を参照してください。 属性に基づくモデルを使用する組み込みの構成の種類を拡張する方法の例は、 <xref:System.Configuration.ConfigurationElement>。</xref:System.Configuration.ConfigurationElement>を参照してください。"
  example:
  - "The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(\"Setting1\");  \n            ReadSetting(\"NotValid\");  \n            AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\");  \n            AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\");  \n            ReadAllSettings();  \n        }  \n  \n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n  \n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(\"AppSettings is empty.\");  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? \"Not Found\";  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error writing app settings\");  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nModule Module1  \n  \n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(\"Setting1\")  \n        ReadSetting(\"NotValid\")  \n        AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\")  \n        AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\")  \n        ReadAllSettings()  \n    End Sub  \n  \n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n  \n            If appSettings.Count = 0 Then  \n                Console.WriteLine(\"AppSettings is empty.\")  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = \"Not found\"  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error writing app settings\")  \n        End Try  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config file as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n  <appSettings>  \n    <add key=\"Setting1\" value=\"May 5, 2014\"/>  \n    <add key=\"Setting2\" value=\"May 6, 2014\"/>  \n  </appSettings>  \n</configuration>  \n```  \n  \n The following example shows how to use a connection string to read data from a database.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n  \n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[\"WingtipToys\"].ConnectionString;  \n            string queryString = \"SELECT Id, ProductName FROM dbo.Products;\";  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(\"{0}, {1}\", reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n  \n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n  \n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(\"WingtipToys\").ConnectionString  \n        Dim queryString = \"SELECT Id, ProductName FROM dbo.Products;\"  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n  \n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(\"{0}, {1}\", reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <connectionStrings>  \n      <add name=\"WingtipToys\" connectionString=\"Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\" />  \n    </connectionStrings>  \n</configuration>  \n```"
  syntax:
    content: public static class ConfigurationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.AppSettings
  id: AppSettings
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
  fullName: System.Configuration.ConfigurationManager.AppSettings
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "取得、 <xref href=&quot;System.Configuration.AppSettingsSection&quot;> </xref>の現在のアプリケーションの既定の構成データ。"
  remarks: "A<xref:System.Configuration.AppSettingsSection>オブジェクトには、構成ファイルの内容が含まれています`appSettings`セクション。</xref:System.Configuration.AppSettingsSection> 。"
  example:
  - "The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(\"Setting1\");  \n            ReadSetting(\"NotValid\");  \n            AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\");  \n            AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\");  \n            ReadAllSettings();  \n        }  \n  \n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n  \n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(\"AppSettings is empty.\");  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? \"Not Found\";  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error writing app settings\");  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nModule Module1  \n  \n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(\"Setting1\")  \n        ReadSetting(\"NotValid\")  \n        AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\")  \n        AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\")  \n        ReadAllSettings()  \n    End Sub  \n  \n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n  \n            If appSettings.Count = 0 Then  \n                Console.WriteLine(\"AppSettings is empty.\")  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = \"Not found\"  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error writing app settings\")  \n        End Try  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config file as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n  <appSettings>  \n    <add key=\"Setting1\" value=\"May 5, 2014\"/>  \n    <add key=\"Setting2\" value=\"May 6, 2014\"/>  \n  </appSettings>  \n</configuration>  \n```"
  syntax:
    content: public static System.Collections.Specialized.NameValueCollection AppSettings { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "返します、 <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref>の内容を格納しているオブジェクト、 <xref href=&quot;System.Configuration.AppSettingsSection&quot;> </xref>の現在のアプリケーションの既定の構成オブジェクト。"
  overload: System.Configuration.ConfigurationManager.AppSettings*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "取得できませんでした、 <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref>アプリケーション設定データを持つオブジェクト。"
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.ConnectionStrings
  id: ConnectionStrings
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
  fullName: System.Configuration.ConfigurationManager.ConnectionStrings
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "取得、 <xref href=&quot;System.Configuration.ConnectionStringsSection&quot;> </xref>の現在のアプリケーションの既定の構成データ。"
  remarks: "A<xref:System.Configuration.ConnectionStringsSection>オブジェクトには、構成ファイルの内容が含まれています`connectionStrings`セクション。</xref:System.Configuration.ConnectionStringsSection> 。"
  example:
  - "The following example shows how to use a connection string to read data from a database.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n  \n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[\"WingtipToys\"].ConnectionString;  \n            string queryString = \"SELECT Id, ProductName FROM dbo.Products;\";  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(\"{0}, {1}\", reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n  \n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n  \n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(\"WingtipToys\").ConnectionString  \n        Dim queryString = \"SELECT Id, ProductName FROM dbo.Products;\"  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n  \n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(\"{0}, {1}\", reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <connectionStrings>  \n      <add name=\"WingtipToys\" connectionString=\"Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\" />  \n    </connectionStrings>  \n</configuration>  \n```"
  syntax:
    content: public static System.Configuration.ConnectionStringSettingsCollection ConnectionStrings { get; }
    return:
      type: System.Configuration.ConnectionStringSettingsCollection
      description: "返します、 <xref href=&quot;System.Configuration.ConnectionStringSettingsCollection&quot;> </xref>の内容を格納しているオブジェクト、 <xref href=&quot;System.Configuration.ConnectionStringsSection&quot;> </xref>の現在のアプリケーションの既定の構成オブジェクト。"
  overload: System.Configuration.ConfigurationManager.ConnectionStrings*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "取得できませんでした、 <xref href=&quot;System.Configuration.ConnectionStringSettingsCollection&quot;> </xref>オブジェクト。"
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.GetSection(System.String)
  id: GetSection(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: GetSection(String)
  nameWithType: ConfigurationManager.GetSection(String)
  fullName: System.Configuration.ConfigurationManager.GetSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "現在のアプリケーションの既定の構成を指定した構成セクションを取得します。"
  remarks: "クライアント アプリケーションの場合は、このメソッドは、アプリケーション構成ファイル、ローカル ユーザーの構成ファイル、およびローミングの構成ファイルをマージすることによって取得された構成ファイルを取得します。       GetSection メソッドでは、それを変更することはできません、ランタイム構成情報にアクセスします。 使用する、構成を変更する、 <xref:System.Configuration.Configuration.GetSection%2A>構成ファイルを次の Open メソッドのいずれかを使用して取得する方法:- <xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A></xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A> </xref:System.Configuration.Configuration.GetSection%2A>"
  example:
  - "The following example shows how to use the GetSection method. The example is part of a larger example that is provided for the <xref:System.Configuration.ConfigurationManager> class.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_14_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_14_1.vb)]"
  syntax:
    content: public static object GetSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "構成セクション パスと名前。"
    return:
      type: System.Object
      description: "指定した<xref href=&quot;System.Configuration.ConfigurationSection&quot;></xref>オブジェクト、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>セクションが存在しない場合。"
  overload: System.Configuration.ConfigurationManager.GetSection*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "構成ファイルを読み込むことができませんでした。"
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  id: OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenExeConfiguration(ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "現在のアプリケーションの構成ファイルを開きます、 <xref href=&quot;System.Configuration.Configuration&quot;> </xref>オブジェクト。"
  remarks: "クライアント アプリケーションでは、すべてのユーザー、個々 のユーザーに適用される別の構成とローミング ユーザーに適用される構成に適用されるグローバル構成を使用します。 `userLevel`パラメーターは、ユーザー レベル (構成ファイルは、アプリケーションと同じディレクトリ) があるないかどうかを示すによって開かれる、構成ファイルの場所を決定またはユーザーごとのレベル (構成ファイルはアプリケーション設定のパス、ユーザー レベルによって決まります)。       次のいずれかを渡すことによって、取得する構成値を指定`userLevel`: - 取得する、 <xref:System.Configuration.Configuration>、すべてのユーザーに適用するオブジェクト設定`userLevel` <xref:System.Configuration.ConfigurationUserLevel></xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration> 。      -ローカルに取得するには<xref:System.Configuration.Configuration>、現在のユーザーに適用するオブジェクト設定`userLevel` <xref:System.Configuration.ConfigurationUserLevel></xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration> 。      -ローミングを取得するには<xref:System.Configuration.Configuration>、現在のユーザーに適用するオブジェクト設定`userLevel` <xref:System.Configuration.ConfigurationUserLevel></xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration> 。          > [!NOTE] > を取得する、<xref:System.Configuration.Configuration>コードする必要がありますに対する読み取り権限の設定を継承するすべての構成ファイルのリソースのオブジェクトします</xref:System.Configuration.Configuration>。 構成ファイルを更新するには、コードは、構成ファイルとそれが存在するディレクトリの両方に対する書き込みアクセス許可をさらが必要です。"
  example:
  - "The following code example shows how to use the OpenExeConfiguration method.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#5](~/add/codesnippet/csharp/3eb7bc6f-f763-4df6-a789-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#5](~/add/codesnippet/visualbasic/3eb7bc6f-f763-4df6-a789-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenExeConfiguration (System.Configuration.ConfigurationUserLevel userLevel);
    parameters:
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "<xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref>構成を開きます。"
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "構成ファイルを読み込むことができませんでした。"
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  id: OpenExeConfiguration(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenExeConfiguration(String)
  nameWithType: ConfigurationManager.OpenExeConfiguration(String)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "として指定されたクライアント構成ファイルを開き、 <xref href=&quot;System.Configuration.Configuration&quot;> </xref>オブジェクト。"
  remarks: "クライアント アプリケーションでは、すべてのユーザー、個々 のユーザーに適用される別の構成とローミング ユーザーに適用される構成に適用されるグローバル構成を使用します。 `userLevel`値が開かれている構成ファイルの場所を決定します。 ユーザー レベル (構成ファイルは、アプリケーションと同じディレクトリ) を持たないかどうかを示します (構成ファイルは、ユーザー レベルの種類によって決まりますアプリケーション設定のパスは). ユーザーごとのレベルまたはします。       呼び出すことと同じではこのメソッドのオーバー ロードを呼び出して、<xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29>を持つオーバー ロード、`preLoad`パラメーターに設定`false`</xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29>。"
  example:
  - "The following code example shows how to use the OpenExeConfiguration method.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#6](~/add/codesnippet/csharp/m-system.configuration.c_28_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#6](~/add/codesnippet/visualbasic/m-system.configuration.c_28_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenExeConfiguration (string exePath);
    parameters:
    - id: exePath
      type: System.String
      description: "実行可能 (exe) ファイルのパス。"
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "構成ファイルを読み込むことができませんでした。"
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration
  id: OpenMachineConfiguration
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMachineConfiguration()
  nameWithType: ConfigurationManager.OpenMachineConfiguration()
  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "現在のコンピューターにマシン構成ファイルを開き、 <xref href=&quot;System.Configuration.Configuration&quot;> </xref>オブジェクト。"
  remarks: "Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \n  \n *%windir%*\\Microsoft.NET\\Framework\\\\*version*\\config  \n  \n> [!NOTE]\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer."
  example:
  - "The following code example shows how to use the OpenMachineConfiguration method to obtain all sections that are contained in the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/m-system.configuration.c_32_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/m-system.configuration.c_32_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMachineConfiguration ();
    parameters: []
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenMachineConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "構成ファイルを読み込むことができませんでした。"
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "として指定されたクライアント構成ファイルを開き、 <xref href=&quot;System.Configuration.Configuration&quot;> </xref>オブジェクトを指定したファイル マップとユーザー レベルを使用します。"
  remarks: "<xref:System.Configuration.ConfigurationUserLevel>オブジェクトが開かれている構成ファイルの場所を決定します</xref:System.Configuration.ConfigurationUserLevel>。 ファイルにユーザー レベル (構成ファイルは、アプリケーションと同じディレクトリ) が存在しないかどうかを示す、またはユーザーごとのレベル (構成ファイルがアプリケーション設定のパスによって決まります`userLevel`)。      > [!NOTE] > を取得する、<xref:System.Configuration.Configuration>コードする必要がありますに対する読み取り権限の設定を継承するすべての構成ファイルのリソースのオブジェクトします</xref:System.Configuration.Configuration>。 構成ファイルを更新するには、コードは、構成ファイルとそれが存在するディレクトリの両方に対する書き込みアクセス許可をさらが必要です。"
  example:
  - "The following code example shows how to use the OpenMappedExeConfiguration method to obtain all sections that are contained by the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#9](~/add/codesnippet/csharp/3a231caa-8bb5-4e8b-a7ef-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#9](~/add/codesnippet/visualbasic/3a231caa-8bb5-4e8b-a7ef-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel);
    parameters:
    - id: fileMap
      type: System.Configuration.ExeConfigurationFileMap
      description: "<xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref>アプリケーションの既定の構成ファイルの代わりに使用する構成ファイルを参照するオブジェクト。"
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "<xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref>オブジェクト構成を開きます。"
    return:
      type: System.Configuration.Configuration
      description: "構成オブジェクト。"
  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "構成ファイルを読み込むことができませんでした。"
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "として指定されたクライアント構成ファイルを開き、 <xref href=&quot;System.Configuration.Configuration&quot;> </xref>オブジェクトを指定したファイル マップ、ユーザー レベル、およびプリロード オプションを使用します。"
  remarks: "<xref:System.Configuration.ConfigurationUserLevel>オブジェクトが開かれる、構成ファイルの場所を決定します</xref:System.Configuration.ConfigurationUserLevel>。 ファイルにユーザー レベル (構成ファイルは、アプリケーションと同じディレクトリ) が存在しないかどうかを示しますまたはユーザーごとのレベル (構成ファイルがアプリケーション設定のパスによって決定される`userLevel`)。      > [!NOTE] > を取得する、<xref:System.Configuration.Configuration>コードする必要がありますに対する読み取り権限の設定を継承するすべての構成ファイルのリソースのオブジェクトします</xref:System.Configuration.Configuration>。 構成ファイルを更新するには、コードは、構成ファイルとそれが存在するディレクトリの両方に対する書き込みアクセス許可をさらが必要です。       コード例は、次を参照してください、<xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>オーバー ロード。</xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> 。"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel, bool preLoad);
    parameters:
    - id: fileMap
      type: System.Configuration.ExeConfigurationFileMap
      description: "<xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref>既定のアプリケーション構成ファイルの代わりに使用する構成ファイルを参照するオブジェクト。"
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "<xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref>オブジェクト構成を開きます。"
    - id: preLoad
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>すべてのセクション グループとセクションをプリロードするにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Configuration.Configuration
      description: "構成オブジェクト。"
  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "構成ファイルを読み込むことができませんでした。"
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  id: OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedMachineConfiguration(ConfigurationFileMap)
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "マシン構成ファイルを開き、 <xref href=&quot;System.Configuration.Configuration&quot;> </xref>オブジェクトを指定したファイル マップを使用します。"
  remarks: "Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \n  \n *%windir%*\\Microsoft.NET\\Framework\\\\*version*\\config  \n  \n> [!NOTE]\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer."
  example:
  - "The following code example shows how to use the OpenMappedMachineConfiguration method to obtain all sections in the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/b514431f-be81-4b1e-b58c-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/b514431f-be81-4b1e-b58c-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedMachineConfiguration (System.Configuration.ConfigurationFileMap fileMap);
    parameters:
    - id: fileMap
      type: System.Configuration.ConfigurationFileMap
      description: "<xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref>アプリケーションの既定の構成ファイルの代わりに使用する構成ファイルを参照するオブジェクト。"
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "構成ファイルを読み込むことができませんでした。"
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)
  id: RefreshSection(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: RefreshSection(String)
  nameWithType: ConfigurationManager.RefreshSection(String)
  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "次回取得するには再ディスクから読み取るように、名前付きセクションを更新します。"
  remarks: "このメソッドは、他のセクションに影響を与えずに、指定された構成セクションのキャッシュを無効にします。"
  example:
  - "The following code example shows how to use the RefreshSection method to refresh the application settings configuration section.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_34_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_34_1.vb)]"
  syntax:
    content: public static void RefreshSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "構成セクション名、または更新するセクションの構成パスとセクション名。"
  overload: System.Configuration.ConfigurationManager.RefreshSection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Configuration.ConfigurationManager.AppSettings
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
  fullName: System.Configuration.ConfigurationManager.AppSettings
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.ConfigurationManager.ConnectionStrings
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
  fullName: System.Configuration.ConfigurationManager.ConnectionStrings
- uid: System.Configuration.ConnectionStringSettingsCollection
  parent: System.Configuration
  isExternal: false
  name: ConnectionStringSettingsCollection
  nameWithType: ConnectionStringSettingsCollection
  fullName: System.Configuration.ConnectionStringSettingsCollection
- uid: System.Configuration.ConfigurationManager.GetSection(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: GetSection(String)
  nameWithType: ConfigurationManager.GetSection(String)
  fullName: System.Configuration.ConfigurationManager.GetSection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration(ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
- uid: System.Configuration.Configuration
  parent: System.Configuration
  isExternal: false
  name: Configuration
  nameWithType: Configuration
  fullName: System.Configuration.Configuration
- uid: System.Configuration.ConfigurationUserLevel
  parent: System.Configuration
  isExternal: false
  name: ConfigurationUserLevel
  nameWithType: ConfigurationUserLevel
  fullName: System.Configuration.ConfigurationUserLevel
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration(String)
  nameWithType: ConfigurationManager.OpenExeConfiguration(String)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMachineConfiguration()
  nameWithType: ConfigurationManager.OpenMachineConfiguration()
  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
- uid: System.Configuration.ExeConfigurationFileMap
  parent: System.Configuration
  isExternal: false
  name: ExeConfigurationFileMap
  nameWithType: ExeConfigurationFileMap
  fullName: System.Configuration.ExeConfigurationFileMap
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedMachineConfiguration(ConfigurationFileMap)
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
- uid: System.Configuration.ConfigurationFileMap
  parent: System.Configuration
  isExternal: false
  name: ConfigurationFileMap
  nameWithType: ConfigurationFileMap
  fullName: System.Configuration.ConfigurationFileMap
- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: RefreshSection(String)
  nameWithType: ConfigurationManager.RefreshSection(String)
  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)
- uid: System.Configuration.ConfigurationManager.AppSettings*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
- uid: System.Configuration.ConfigurationManager.ConnectionStrings*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
- uid: System.Configuration.ConfigurationManager.GetSection*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: GetSection
  nameWithType: ConfigurationManager.GetSection
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration
  nameWithType: ConfigurationManager.OpenExeConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMachineConfiguration
  nameWithType: ConfigurationManager.OpenMachineConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedMachineConfiguration
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration
- uid: System.Configuration.ConfigurationManager.RefreshSection*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: RefreshSection
  nameWithType: ConfigurationManager.RefreshSection
